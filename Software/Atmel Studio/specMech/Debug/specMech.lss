
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  0000495e  00004a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045f2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  000085f2  000045f2  000046a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802802  00802802  00004a14  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004a14  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000648  00000000  00000000  00004ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a1cc  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004756  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004452  00000000  00000000  00013a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e70  00000000  00000000  00017e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002274  00000000  00000000  00018cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f28  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0001ee78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 27 19 	jmp	0x324e	; 0x324e <__vector_17>
      48:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__vector_26>
      6c:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__vector_37>
      98:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	96 04       	cpc	r9, r6
      a2:	a4 04       	cpc	r10, r4
      a4:	a4 04       	cpc	r10, r4
      a6:	a4 04       	cpc	r10, r4
      a8:	a4 04       	cpc	r10, r4
      aa:	a4 04       	cpc	r10, r4
      ac:	a4 04       	cpc	r10, r4
      ae:	a4 04       	cpc	r10, r4
      b0:	a4 04       	cpc	r10, r4
      b2:	a4 04       	cpc	r10, r4
      b4:	a4 04       	cpc	r10, r4
      b6:	a4 04       	cpc	r10, r4
      b8:	a4 04       	cpc	r10, r4
      ba:	a4 04       	cpc	r10, r4
      bc:	a4 04       	cpc	r10, r4
      be:	a4 04       	cpc	r10, r4
      c0:	a4 04       	cpc	r10, r4
      c2:	7c 04       	cpc	r7, r12
      c4:	a4 04       	cpc	r10, r4
      c6:	a4 04       	cpc	r10, r4
      c8:	a4 04       	cpc	r10, r4
      ca:	a4 04       	cpc	r10, r4
      cc:	a4 04       	cpc	r10, r4
      ce:	a4 04       	cpc	r10, r4
      d0:	a4 04       	cpc	r10, r4
      d2:	a4 04       	cpc	r10, r4
      d4:	a4 04       	cpc	r10, r4
      d6:	86 04       	cpc	r8, r6
      d8:	a4 04       	cpc	r10, r4
      da:	81 04       	cpc	r8, r1
      dc:	a4 04       	cpc	r10, r4
      de:	a4 04       	cpc	r10, r4
      e0:	8a 04       	cpc	r8, r10
      e2:	8e 04       	cpc	r8, r14
      e4:	92 04       	cpc	r9, r2
      e6:	78 0e       	add	r7, r24
      e8:	78 0e       	add	r7, r24
      ea:	78 0e       	add	r7, r24
      ec:	dd 13       	cpse	r29, r29
      ee:	dd 13       	cpse	r29, r29
      f0:	dd 13       	cpse	r29, r29
      f2:	dd 13       	cpse	r29, r29
      f4:	dd 13       	cpse	r29, r29
      f6:	dd 13       	cpse	r29, r29
      f8:	dd 13       	cpse	r29, r29
      fa:	dd 13       	cpse	r29, r29
      fc:	dd 13       	cpse	r29, r29
      fe:	dd 13       	cpse	r29, r29
     100:	dd 13       	cpse	r29, r29
     102:	dd 13       	cpse	r29, r29
     104:	dd 13       	cpse	r29, r29
     106:	dd 13       	cpse	r29, r29
     108:	dd 13       	cpse	r29, r29
     10a:	dd 13       	cpse	r29, r29
     10c:	dd 13       	cpse	r29, r29
     10e:	dd 13       	cpse	r29, r29
     110:	8b 13       	cpse	r24, r27
     112:	dd 13       	cpse	r29, r29
     114:	dd 13       	cpse	r29, r29
     116:	dd 13       	cpse	r29, r29
     118:	dd 13       	cpse	r29, r29
     11a:	dd 13       	cpse	r29, r29
     11c:	dd 13       	cpse	r29, r29
     11e:	dd 13       	cpse	r29, r29
     120:	dd 13       	cpse	r29, r29
     122:	dd 13       	cpse	r29, r29
     124:	dd 13       	cpse	r29, r29
     126:	1e 0f       	add	r17, r30
     128:	1e 0f       	add	r17, r30
     12a:	1e 0f       	add	r17, r30
     12c:	dd 13       	cpse	r29, r29
     12e:	f2 0f       	add	r31, r18
     130:	dd 13       	cpse	r29, r29
     132:	dd 13       	cpse	r29, r29
     134:	dd 13       	cpse	r29, r29
     136:	dd 13       	cpse	r29, r29
     138:	dd 13       	cpse	r29, r29
     13a:	dd 13       	cpse	r29, r29
     13c:	dd 13       	cpse	r29, r29
     13e:	dd 13       	cpse	r29, r29
     140:	dd 13       	cpse	r29, r29
     142:	32 11       	cpse	r19, r2
     144:	20 12       	cpse	r2, r16
     146:	dd 13       	cpse	r29, r29
     148:	dd 13       	cpse	r29, r29
     14a:	dd 13       	cpse	r29, r29
     14c:	be 12       	cpse	r11, r30
     14e:	dd 13       	cpse	r29, r29
     150:	1d 13       	cpse	r17, r29

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	ee e5       	ldi	r30, 0x5E	; 94
     268:	f9 e4       	ldi	r31, 0x49	; 73
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a2 30       	cpi	r26, 0x02	; 2
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a2 e0       	ldi	r26, 0x02	; 2
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a0 33       	cpi	r26, 0x30	; 48
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 23 08 	call	0x1046	; 0x1046 <main>
     28a:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <read_AD590+0x40>
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <read_AD590+0x16>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	61 f0       	breq	.+24     	; 0x2be <read_AD590+0x2c>
     2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f3 e3       	ldi	r31, 0x33	; 51
     2ac:	cf 2e       	mov	r12, r31
     2ae:	dc 2c       	mov	r13, r12
     2b0:	f3 ef       	ldi	r31, 0xF3	; 243
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f0 e4       	ldi	r31, 0x40	; 64
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ba:	c1 e0       	ldi	r28, 0x01	; 1
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c4:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c6:	09 c0       	rjmp	.+18     	; 0x2da <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d2:	c1 2c       	mov	r12, r1
     2d4:	d1 2c       	mov	r13, r1
     2d6:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d8:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	87 e2       	ldi	r24, 0x27	; 39
     2e0:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e4:	4c 2f       	mov	r20, r28
     2e6:	40 95       	com	r20
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2f0:	4c 2f       	mov	r20, r28
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	87 e2       	ldi	r24, 0x27	; 39
     2f6:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	86 e1       	ldi	r24, 0x16	; 22
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <read_AD590+0x6a>
     300:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     302:	20 e8       	ldi	r18, 0x80	; 128
     304:	40 e7       	ldi	r20, 0x70	; 112
     306:	68 e0       	ldi	r22, 0x08	; 8
     308:	88 e4       	ldi	r24, 0x48	; 72
     30a:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
     31a:	23 e3       	ldi	r18, 0x33	; 51
     31c:	33 e9       	ldi	r19, 0x93	; 147
     31e:	48 e8       	ldi	r20, 0x88	; 136
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__subsf3>
     326:	9b 01       	movw	r18, r22
     328:	ac 01       	movw	r20, r24
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__addsf3>
	return(temperature);

}
     332:	cf 91       	pop	r28
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	d8 2f       	mov	r29, r24
     350:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     352:	46 2b       	or	r20, r22
     354:	c4 2f       	mov	r28, r20
     356:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     358:	12 2f       	mov	r17, r18
     35a:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     362:	08 2f       	mov	r16, r24
     364:	88 23       	and	r24, r24
     366:	69 f0       	breq	.+26     	; 0x382 <read_ADS1115+0x44>
		stop_TWI();
     368:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     36c:	60 2f       	mov	r22, r16
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
     378:	56 2f       	mov	r21, r22
     37a:	47 2f       	mov	r20, r23
     37c:	38 2f       	mov	r19, r24
     37e:	29 2f       	mov	r18, r25
     380:	d0 c0       	rjmp	.+416    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     388:	08 2f       	mov	r16, r24
     38a:	88 23       	and	r24, r24
     38c:	69 f0       	breq	.+26     	; 0x3a8 <read_ADS1115+0x6a>
		stop_TWI();
     38e:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     392:	60 2f       	mov	r22, r16
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
     39e:	56 2f       	mov	r21, r22
     3a0:	47 2f       	mov	r20, r23
     3a2:	38 2f       	mov	r19, r24
     3a4:	29 2f       	mov	r18, r25
     3a6:	bd c0       	rjmp	.+378    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a8:	8c 2f       	mov	r24, r28
     3aa:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     3ae:	c8 2f       	mov	r28, r24
     3b0:	88 23       	and	r24, r24
     3b2:	69 f0       	breq	.+26     	; 0x3ce <read_ADS1115+0x90>
		stop_TWI();
     3b4:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     3b8:	6c 2f       	mov	r22, r28
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
     3c4:	56 2f       	mov	r21, r22
     3c6:	47 2f       	mov	r20, r23
     3c8:	38 2f       	mov	r19, r24
     3ca:	29 2f       	mov	r18, r25
     3cc:	aa c0       	rjmp	.+340    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3ce:	81 2f       	mov	r24, r17
     3d0:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	88 23       	and	r24, r24
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <read_ADS1115+0xb6>
		stop_TWI();
     3da:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     3de:	6c 2f       	mov	r22, r28
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
     3ea:	56 2f       	mov	r21, r22
     3ec:	47 2f       	mov	r20, r23
     3ee:	38 2f       	mov	r19, r24
     3f0:	29 2f       	mov	r18, r25
     3f2:	97 c0       	rjmp	.+302    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	stop_TWI();
     3f4:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
     3f8:	8c e1       	ldi	r24, 0x1C	; 28
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fe:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		start_TWI(addr, TWIREAD);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     40a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			converting = NO;
     412:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     414:	c1 11       	cpse	r28, r1
     416:	f5 cf       	rjmp	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     418:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	8d 2f       	mov	r24, r29
     420:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	highbyte = read_TWI();
     432:	0e 94 ed 17 	call	0x2fda	; 0x2fda <read_TWI>
     436:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     438:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
     43c:	d8 2f       	mov	r29, r24
	stop_TWI();
     43e:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	value = highbyte;
     442:	6c 2f       	mov	r22, r28
     444:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     446:	76 2f       	mov	r23, r22
     448:	66 27       	eor	r22, r22
	value |= lowbyte;
     44a:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	f8 16       	cp	r15, r24
     450:	49 f1       	breq	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     452:	8f 15       	cp	r24, r15
     454:	30 f0       	brcs	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	ff 20       	and	r15, r15
     458:	d9 f1       	breq	.+118    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	f8 16       	cp	r15, r24
     45e:	69 f1       	breq	.+90     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     460:	42 c0       	rjmp	.+132    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	f8 16       	cp	r15, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	42 c0       	rjmp	.+132    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	f8 16       	cp	r15, r24
     46e:	21 f0       	breq	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	f8 12       	cpse	r15, r24
     474:	38 c0       	rjmp	.+112    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		case PGA0256:
			scale = SCA0256;
     478:	0f 2e       	mov	r0, r31
     47a:	f4 e7       	ldi	r31, 0x74	; 116
     47c:	cf 2e       	mov	r12, r31
     47e:	f3 e1       	ldi	r31, 0x13	; 19
     480:	df 2e       	mov	r13, r31
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	ef 2e       	mov	r14, r31
     486:	f7 e3       	ldi	r31, 0x37	; 55
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	3a c0       	rjmp	.+116    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48e:	0f 2e       	mov	r0, r31
     490:	f4 e7       	ldi	r31, 0x74	; 116
     492:	cf 2e       	mov	r12, r31
     494:	f3 e1       	ldi	r31, 0x13	; 19
     496:	df 2e       	mov	r13, r31
     498:	f3 e0       	ldi	r31, 0x03	; 3
     49a:	ef 2e       	mov	r14, r31
     49c:	f8 e3       	ldi	r31, 0x38	; 56
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
			break;
     4a2:	2f c0       	rjmp	.+94     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA2048:
			scale = SCA2048;
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f2 e1       	ldi	r31, 0x12	; 18
     4a8:	cf 2e       	mov	r12, r31
     4aa:	f3 e1       	ldi	r31, 0x13	; 19
     4ac:	df 2e       	mov	r13, r31
     4ae:	f3 e8       	ldi	r31, 0x83	; 131
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f8 e3       	ldi	r31, 0x38	; 56
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
			break;
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA4096:
			scale = SCA4096;
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f4 e7       	ldi	r31, 0x74	; 116
     4be:	cf 2e       	mov	r12, r31
     4c0:	f3 e1       	ldi	r31, 0x13	; 19
     4c2:	df 2e       	mov	r13, r31
     4c4:	f3 e0       	ldi	r31, 0x03	; 3
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f9 e3       	ldi	r31, 0x39	; 57
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
			break;
     4ce:	19 c0       	rjmp	.+50     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA6144:
			scale = SCA6144;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe e2       	ldi	r31, 0x2E	; 46
     4d4:	cf 2e       	mov	r12, r31
     4d6:	fd e9       	ldi	r31, 0x9D	; 157
     4d8:	df 2e       	mov	r13, r31
     4da:	f4 e4       	ldi	r31, 0x44	; 68
     4dc:	ef 2e       	mov	r14, r31
     4de:	f9 e3       	ldi	r31, 0x39	; 57
     4e0:	ff 2e       	mov	r15, r31
     4e2:	f0 2d       	mov	r31, r0
			break;
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		default:
			scale = 0.0;
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	76 01       	movw	r14, r12
			break;
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f1 e7       	ldi	r31, 0x71	; 113
     4f2:	cf 2e       	mov	r12, r31
     4f4:	f3 e1       	ldi	r31, 0x13	; 19
     4f6:	df 2e       	mov	r13, r31
     4f8:	f3 e8       	ldi	r31, 0x83	; 131
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f7 e3       	ldi	r31, 0x37	; 55
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__floatsisf>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
	return(voltage);
     51a:	56 2f       	mov	r21, r22
     51c:	47 2f       	mov	r20, r23
     51e:	38 2f       	mov	r19, r24
     520:	29 2f       	mov	r18, r25

}
     522:	65 2f       	mov	r22, r21
     524:	74 2f       	mov	r23, r20
     526:	83 2f       	mov	r24, r19
     528:	92 2f       	mov	r25, r18
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53c:	e0 e2       	ldi	r30, 0x20	; 32
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     544:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     546:	86 83       	std	Z+6, r24	; 0x06
     548:	08 95       	ret

0000054a <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	c4 51       	subi	r28, 0x14	; 20
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	2b e0       	ldi	r18, 0x0B	; 11
     560:	e2 ef       	ldi	r30, 0xF2	; 242
     562:	f5 e8       	ldi	r31, 0x85	; 133
     564:	de 01       	movw	r26, r28
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	2a 95       	dec	r18
     56e:	e1 f7       	brne	.-8      	; 0x568 <echo_cmd+0x1e>
     570:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     574:	22 ff       	sbrs	r18, 2
     576:	03 c0       	rjmp	.+6      	; 0x57e <echo_cmd+0x34>
     578:	22 e0       	ldi	r18, 0x02	; 2
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <echo_cmd+0x38>
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	3f 93       	push	r19
     588:	2f 93       	push	r18
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	8e 01       	movw	r16, r28
     594:	04 5f       	subi	r16, 0xF4	; 244
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	1f 93       	push	r17
     59a:	0f 93       	push	r16
     59c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
     5a6:	f8 01       	movw	r30, r16
     5a8:	01 90       	ld	r0, Z+
     5aa:	00 20       	and	r0, r0
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <echo_cmd+0x5e>
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	af 01       	movw	r20, r30
     5b2:	40 1b       	sub	r20, r16
     5b4:	51 0b       	sbc	r21, r17
     5b6:	b8 01       	movw	r22, r16
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	cc 5e       	subi	r28, 0xEC	; 236
     5c4:	de 4f       	sbci	r29, 0xFE	; 254
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <get_cmdline>:
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	9c 01       	movw	r18, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <get_cmdline+0x42>
     5de:	c7 e1       	ldi	r28, 0x17	; 23
     5e0:	dc e2       	ldi	r29, 0x2C	; 44
     5e2:	e8 81       	ld	r30, Y
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e9 5e       	subi	r30, 0xE9	; 233
     5e8:	f4 4d       	sbci	r31, 0xD4	; 212
     5ea:	80 81       	ld	r24, Z
     5ec:	f9 01       	movw	r30, r18
     5ee:	e4 0f       	add	r30, r20
     5f0:	f1 1d       	adc	r31, r1
     5f2:	80 83       	st	Z, r24
     5f4:	a9 e1       	ldi	r26, 0x19	; 25
     5f6:	bc e2       	ldi	r27, 0x2C	; 44
     5f8:	8c 91       	ld	r24, X
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	8c 93       	st	X, r24
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	6f ef       	ldi	r22, 0xFF	; 255
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     60c:	88 83       	st	Y, r24
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <get_cmdline+0x4a>
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
     61a:	81 11       	cpse	r24, r1
     61c:	e0 cf       	rjmp	.-64     	; 0x5de <get_cmdline+0xa>
     61e:	f9 01       	movw	r30, r18
     620:	e4 0f       	add	r30, r20
     622:	f1 1d       	adc	r31, r1
     624:	10 82       	st	Z, r1
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     62c:	9f e9       	ldi	r25, 0x9F	; 159
     62e:	98 0f       	add	r25, r24
     630:	9a 31       	cpi	r25, 0x1A	; 26
     632:	28 f0       	brcs	.+10     	; 0x63e <isaletter+0x12>
     634:	81 54       	subi	r24, 0x41	; 65
     636:	8a 31       	cpi	r24, 0x1A	; 26
     638:	20 f4       	brcc	.+8      	; 0x642 <isaletter+0x16>
		return(1);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	08 95       	ret
	}
	return(0);
     642:	80 e0       	ldi	r24, 0x00	; 0

}
     644:	08 95       	ret

00000646 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     652:	e6 2e       	mov	r14, r22
     654:	f1 2c       	mov	r15, r1
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	8e 9d       	mul	r24, r14
     65a:	f0 01       	movw	r30, r0
     65c:	8f 9d       	mul	r24, r15
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	ed 5f       	subi	r30, 0xFD	; 253
     664:	f7 4d       	sbci	r31, 0xD7	; 215
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     66a:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     66c:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     66e:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x34>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x32>
     676:	75 c0       	rjmp	.+234    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	ed 5f       	subi	r30, 0xFD	; 253
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     69c:	11 23       	and	r17, r17
     69e:	09 f4       	brne	.+2      	; 0x6a2 <parse_cmd+0x5c>
     6a0:	60 c0       	rjmp	.+192    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     6a4:	18 81       	ld	r17, Y
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     6ac:	88 23       	and	r24, r24
     6ae:	b1 f3       	breq	.-20     	; 0x69c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	84 e3       	ldi	r24, 0x34	; 52
     6b4:	8e 9d       	mul	r24, r14
     6b6:	f0 01       	movw	r30, r0
     6b8:	8f 9d       	mul	r24, r15
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	ed 5f       	subi	r30, 0xFD	; 253
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	2a c0       	rjmp	.+84     	; 0x71c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	ed 5f       	subi	r30, 0xFD	; 253
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	12 82       	std	Z+2, r1	; 0x02
			return;
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     6e6:	9b 33       	cpi	r25, 0x3B	; 59
     6e8:	61 f4       	brne	.+24     	; 0x702 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6ea:	94 e3       	ldi	r25, 0x34	; 52
     6ec:	9e 9d       	mul	r25, r14
     6ee:	f0 01       	movw	r30, r0
     6f0:	9f 9d       	mul	r25, r15
     6f2:	f0 0d       	add	r31, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	ed 5f       	subi	r30, 0xFD	; 253
     6f8:	f7 4d       	sbci	r31, 0xD7	; 215
     6fa:	e8 0f       	add	r30, r24
     6fc:	f1 1d       	adc	r31, r1
     6fe:	12 82       	std	Z+2, r1	; 0x02
			break;
     700:	0f c0       	rjmp	.+30     	; 0x720 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	24 e3       	ldi	r18, 0x34	; 52
     706:	2e 9d       	mul	r18, r14
     708:	f0 01       	movw	r30, r0
     70a:	2f 9d       	mul	r18, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	ed 5f       	subi	r30, 0xFD	; 253
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	89 32       	cpi	r24, 0x29	; 41
     71e:	a0 f2       	brcs	.-88     	; 0x6c8 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     720:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	1c c0       	rjmp	.+56     	; 0x75e <parse_cmd+0x118>
		if (*ptr == '\0') {
     726:	98 81       	ld	r25, Y
     728:	91 11       	cpse	r25, r1
     72a:	0c c0       	rjmp	.+24     	; 0x744 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     72c:	94 e3       	ldi	r25, 0x34	; 52
     72e:	9e 9d       	mul	r25, r14
     730:	f0 01       	movw	r30, r0
     732:	9f 9d       	mul	r25, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	ed 5f       	subi	r30, 0xFD	; 253
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     742:	0f c0       	rjmp	.+30     	; 0x762 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	24 e3       	ldi	r18, 0x34	; 52
     748:	2e 9d       	mul	r18, r14
     74a:	f0 01       	movw	r30, r0
     74c:	2f 9d       	mul	r18, r15
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	ed 5f       	subi	r30, 0xFD	; 253
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	e8 0f       	add	r30, r24
     758:	f1 1d       	adc	r31, r1
     75a:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f3       	brcs	.-60     	; 0x726 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	08 95       	ret

0000076e <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	6d 97       	sbiw	r28, 0x1d	; 29
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     780:	2e e3       	ldi	r18, 0x3E	; 62
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	29 83       	std	Y+1, r18	; 0x01
     786:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     788:	21 e2       	ldi	r18, 0x21	; 33
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	2b 83       	std	Y+3, r18	; 0x03
     78e:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     790:	88 23       	and	r24, r24
     792:	19 f0       	breq	.+6      	; 0x79a <send_prompt+0x2c>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	b9 f0       	breq	.+46     	; 0x7c6 <send_prompt+0x58>
     798:	2c c0       	rjmp	.+88     	; 0x7f2 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     79a:	8e 01       	movw	r16, r28
     79c:	0b 5f       	subi	r16, 0xFB	; 251
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	c8 01       	movw	r24, r16
     7a8:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ac:	f8 01       	movw	r30, r16
     7ae:	01 90       	ld	r0, Z+
     7b0:	00 20       	and	r0, r0
     7b2:	e9 f7       	brne	.-6      	; 0x7ae <send_prompt+0x40>
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	af 01       	movw	r20, r30
     7b8:	40 1b       	sub	r20, r16
     7ba:	51 0b       	sbc	r21, r17
     7bc:	b8 01       	movw	r22, r16
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			break;
     7c4:	2b c0       	rjmp	.+86     	; 0x81c <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     7c6:	8e 01       	movw	r16, r28
     7c8:	0b 5f       	subi	r16, 0xFB	; 251
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	be 01       	movw	r22, r28
     7ce:	6d 5f       	subi	r22, 0xFD	; 253
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7d8:	f8 01       	movw	r30, r16
     7da:	01 90       	ld	r0, Z+
     7dc:	00 20       	and	r0, r0
     7de:	e9 f7       	brne	.-6      	; 0x7da <send_prompt+0x6c>
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	af 01       	movw	r20, r30
     7e4:	40 1b       	sub	r20, r16
     7e6:	51 0b       	sbc	r21, r17
     7e8:	b8 01       	movw	r22, r16
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			break;
     7f0:	15 c0       	rjmp	.+42     	; 0x81c <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     7f2:	8e 01       	movw	r16, r28
     7f4:	0b 5f       	subi	r16, 0xFB	; 251
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
     7f8:	be 01       	movw	r22, r28
     7fa:	6d 5f       	subi	r22, 0xFD	; 253
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	c8 01       	movw	r24, r16
     800:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     804:	f8 01       	movw	r30, r16
     806:	01 90       	ld	r0, Z+
     808:	00 20       	and	r0, r0
     80a:	e9 f7       	brne	.-6      	; 0x806 <send_prompt+0x98>
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	af 01       	movw	r20, r30
     810:	40 1b       	sub	r20, r16
     812:	51 0b       	sbc	r21, r17
     814:	b8 01       	movw	r22, r16
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			break;

	}

}
     81c:	6d 96       	adiw	r28, 0x1d	; 29
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	de bf       	out	0x3e, r29	; 62
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <rebootACKd>:
uint8_t rebootACKd(char *cmdline)
{

	static uint8_t rebootnack = 1;
	
	if (rebootnack) {
     82c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     830:	22 23       	and	r18, r18
     832:	31 f1       	breq	.+76     	; 0x880 <rebootACKd+0x54>
     834:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     836:	80 81       	ld	r24, Z
     838:	81 32       	cpi	r24, 0x21	; 33
     83a:	a1 f4       	brne	.+40     	; 0x864 <rebootACKd+0x38>
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	91 11       	cpse	r25, r1
     840:	11 c0       	rjmp	.+34     	; 0x864 <rebootACKd+0x38>
			init_RTC(511);		// 1-sec RTC clock ticks
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     84a:	85 e0       	ldi	r24, 0x05	; 5
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     852:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
			rebootnack = 0;
     85c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return(YES);
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     864:	81 32       	cpi	r24, 0x21	; 33
     866:	39 f4       	brne	.+14     	; 0x876 <rebootACKd+0x4a>
     868:	81 81       	ldd	r24, Z+1	; 0x01
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <rebootACKd+0x4a>
//			send_prompt(EXCLAIMPROMPT);
			reboot();
     86e:	0e 94 66 1a 	call	0x34cc	; 0x34cc <reboot>
			return(NO);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
		} else {
			send_prompt(EXCLAIMPROMPT);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
			return(NO);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret
		}
	}

	return(YES);
     880:	81 e0       	ldi	r24, 0x01	; 1

}
     882:	08 95       	ret

00000884 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	cf 5f       	subi	r28, 0xFF	; 255
     88e:	d1 09       	sbc	r29, r1
     890:	cd bf       	out	0x3d, r28	; 61
     892:	de bf       	out	0x3e, r29	; 62
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
*/
	get_cmdline(cmdline);
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_cmdline>

	if (!rebootACKd(cmdline)) {
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 16 04 	call	0x82c	; 0x82c <rebootACKd>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <commands+0x26>
     8a8:	5d c0       	rjmp	.+186    	; 0x964 <commands+0xe0>
			return;
		}
	}
*/
	// Echo the command back to the user
		echo_cmd(cmdline);
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	0e 94 a5 02 	call	0x54a	; 0x54a <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	81 11       	cpse	r24, r1
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <commands+0x3a>
		send_prompt(GREATERPROMPT);
     8b8:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
		return;
     8bc:	53 c0       	rjmp	.+166    	; 0x964 <commands+0xe0>
	}

	parse_cmd(cmdline, cstack);
     8be:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	0e 94 23 03 	call	0x646	; 0x646 <parse_cmd>
	verb = pcmd[cstack].cverb;
     8ca:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8ce:	24 e3       	ldi	r18, 0x34	; 52
     8d0:	82 9f       	mul	r24, r18
     8d2:	d0 01       	movw	r26, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	ad 5f       	subi	r26, 0xFD	; 253
     8d8:	b7 4d       	sbci	r27, 0xD7	; 215
     8da:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	9c 91       	ld	r25, X

	switch (verb) {
     8e0:	4e 2f       	mov	r20, r30
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	fa 01       	movw	r30, r20
     8e6:	e2 55       	subi	r30, 0x52	; 82
     8e8:	f1 09       	sbc	r31, r1
     8ea:	e3 32       	cpi	r30, 0x23	; 35
     8ec:	f1 05       	cpc	r31, r1
     8ee:	60 f5       	brcc	.+88     	; 0x948 <commands+0xc4>
     8f0:	e0 5b       	subi	r30, 0xB0	; 176
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8f8:	89 2f       	mov	r24, r25
     8fa:	0e 94 45 0c 	call	0x188a	; 0x188a <close_PNEU>
     8fe:	28 2f       	mov	r18, r24
			break;
     900:	24 c0       	rjmp	.+72     	; 0x94a <commands+0xc6>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     902:	89 2f       	mov	r24, r25
     904:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <open_PNEU>
     908:	28 2f       	mov	r18, r24
			break;
     90a:	1f c0       	rjmp	.+62     	; 0x94a <commands+0xc6>

		case 'm':				// move
			ROBOMove(cstack);
     90c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <ROBOMove>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     910:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(object);
			break;

		case 'm':				// move
			ROBOMove(cstack);
			break;
     912:	1b c0       	rjmp	.+54     	; 0x94a <commands+0xc6>

		case 'r':				// Report
			prompt_flag = report(cstack);
     914:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <report>
     918:	28 2f       	mov	r18, r24
			break;
     91a:	17 c0       	rjmp	.+46     	; 0x94a <commands+0xc6>

		case 's':				// Set
			prompt_flag = set(cstack);
     91c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <set>
     920:	28 2f       	mov	r18, r24
			break;
     922:	13 c0       	rjmp	.+38     	; 0x94a <commands+0xc6>

		case 't':
			testroutine();
     924:	0e 94 6f 17 	call	0x2ede	; 0x2ede <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     928:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     92a:	0f c0       	rjmp	.+30     	; 0x94a <commands+0xc6>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	8a e6       	ldi	r24, 0x6A	; 106
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	81 50       	subi	r24, 0x01	; 1
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	20 40       	sbci	r18, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <commands+0xb4>
     940:	00 c0       	rjmp	.+0      	; 0x942 <commands+0xbe>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     942:	0e 94 66 1a 	call	0x34cc	; 0x34cc <reboot>
			return;
     946:	0e c0       	rjmp	.+28     	; 0x964 <commands+0xe0>

		default:
			prompt_flag = GREATERPROMPT;
     948:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     94a:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	6a e0       	ldi	r22, 0x0A	; 10
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     95a:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     95e:	82 2f       	mov	r24, r18
     960:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>

}
     964:	c1 50       	subi	r28, 0x01	; 1
     966:	df 4f       	sbci	r29, 0xFF	; 255
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     972:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     974:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     976:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     978:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     97a:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     97c:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     97e:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     980:	1f 92       	push	r1
     982:	7f 93       	push	r23
     984:	1f 92       	push	r1
     986:	6f 93       	push	r22
     988:	1f 92       	push	r1
     98a:	5f 93       	push	r21
     98c:	1f 92       	push	r1
     98e:	4f 93       	push	r20
     990:	1f 92       	push	r1
     992:	3f 93       	push	r19
     994:	1f 92       	push	r1
     996:	2f 93       	push	r18
     998:	2d ef       	ldi	r18, 0xFD	; 253
     99a:	35 e8       	ldi	r19, 0x85	; 133
     99c:	3f 93       	push	r19
     99e:	2f 93       	push	r18
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9a8:	8d b7       	in	r24, 0x3d	; 61
     9aa:	9e b7       	in	r25, 0x3e	; 62
     9ac:	40 96       	adiw	r24, 0x10	; 16
     9ae:	8d bf       	out	0x3d, r24	; 61
     9b0:	9e bf       	out	0x3e, r25	; 62
     9b2:	08 95       	ret

000009b4 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9b4:	dc 01       	movw	r26, r24
     9b6:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9b8:	81 89       	ldd	r24, Z+17	; 0x11
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	c0 97       	sbiw	r24, 0x30	; 48
     9be:	82 95       	swap	r24
     9c0:	92 95       	swap	r25
     9c2:	90 7f       	andi	r25, 0xF0	; 240
     9c4:	98 27       	eor	r25, r24
     9c6:	80 7f       	andi	r24, 0xF0	; 240
     9c8:	98 27       	eor	r25, r24
     9ca:	92 89       	ldd	r25, Z+18	; 0x12
     9cc:	90 53       	subi	r25, 0x30	; 48
     9ce:	89 2b       	or	r24, r25
     9d0:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9d2:	86 85       	ldd	r24, Z+14	; 0x0e
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	c0 97       	sbiw	r24, 0x30	; 48
     9d8:	82 95       	swap	r24
     9da:	92 95       	swap	r25
     9dc:	90 7f       	andi	r25, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	97 85       	ldd	r25, Z+15	; 0x0f
     9e6:	90 53       	subi	r25, 0x30	; 48
     9e8:	89 2b       	or	r24, r25
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	8c 93       	st	X, r24
     9ee:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9f0:	83 85       	ldd	r24, Z+11	; 0x0b
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	c0 97       	sbiw	r24, 0x30	; 48
     9f6:	82 95       	swap	r24
     9f8:	92 95       	swap	r25
     9fa:	90 7f       	andi	r25, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	80 7f       	andi	r24, 0xF0	; 240
     a00:	98 27       	eor	r25, r24
     a02:	94 85       	ldd	r25, Z+12	; 0x0c
     a04:	90 53       	subi	r25, 0x30	; 48
     a06:	89 2b       	or	r24, r25
     a08:	12 96       	adiw	r26, 0x02	; 2
     a0a:	8c 93       	st	X, r24
     a0c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	13 96       	adiw	r26, 0x03	; 3
     a12:	8c 93       	st	X, r24
     a14:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a16:	80 85       	ldd	r24, Z+8	; 0x08
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	c0 97       	sbiw	r24, 0x30	; 48
     a1c:	82 95       	swap	r24
     a1e:	92 95       	swap	r25
     a20:	90 7f       	andi	r25, 0xF0	; 240
     a22:	98 27       	eor	r25, r24
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	98 27       	eor	r25, r24
     a28:	91 85       	ldd	r25, Z+9	; 0x09
     a2a:	90 53       	subi	r25, 0x30	; 48
     a2c:	89 2b       	or	r24, r25
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	8c 93       	st	X, r24
     a32:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a34:	25 81       	ldd	r18, Z+5	; 0x05
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	20 53       	subi	r18, 0x30	; 48
     a3a:	31 09       	sbc	r19, r1
     a3c:	22 95       	swap	r18
     a3e:	32 95       	swap	r19
     a40:	30 7f       	andi	r19, 0xF0	; 240
     a42:	32 27       	eor	r19, r18
     a44:	20 7f       	andi	r18, 0xF0	; 240
     a46:	32 27       	eor	r19, r18
     a48:	86 81       	ldd	r24, Z+6	; 0x06
     a4a:	80 53       	subi	r24, 0x30	; 48
     a4c:	28 2b       	or	r18, r24
     a4e:	15 96       	adiw	r26, 0x05	; 5
     a50:	2c 93       	st	X, r18
     a52:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a54:	22 81       	ldd	r18, Z+2	; 0x02
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	20 53       	subi	r18, 0x30	; 48
     a5a:	31 09       	sbc	r19, r1
     a5c:	22 95       	swap	r18
     a5e:	32 95       	swap	r19
     a60:	30 7f       	andi	r19, 0xF0	; 240
     a62:	32 27       	eor	r19, r18
     a64:	20 7f       	andi	r18, 0xF0	; 240
     a66:	32 27       	eor	r19, r18
     a68:	83 81       	ldd	r24, Z+3	; 0x03
     a6a:	80 53       	subi	r24, 0x30	; 48
     a6c:	28 2b       	or	r18, r24
     a6e:	16 96       	adiw	r26, 0x06	; 6
     a70:	2c 93       	st	X, r18
     a72:	08 95       	ret

00000a74 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     a86:	c8 2f       	mov	r28, r24
     a88:	88 23       	and	r24, r24
     a8a:	21 f0       	breq	.+8      	; 0xa94 <read_DS3231+0x20>
		stop_TWI();
     a8c:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     a90:	8c 2f       	mov	r24, r28
     a92:	28 c0       	rjmp	.+80     	; 0xae4 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     a9a:	c8 2f       	mov	r28, r24
     a9c:	88 23       	and	r24, r24
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <read_DS3231+0x34>
		stop_TWI();
     aa0:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     aa4:	8c 2f       	mov	r24, r28
     aa6:	1e c0       	rjmp	.+60     	; 0xae4 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	88 e6       	ldi	r24, 0x68	; 104
     aac:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     ab0:	c8 2f       	mov	r28, r24
     ab2:	88 23       	and	r24, r24
     ab4:	69 f0       	breq	.+26     	; 0xad0 <read_DS3231+0x5c>
		stop_TWI();
     ab6:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     aba:	8c 2f       	mov	r24, r28
     abc:	13 c0       	rjmp	.+38     	; 0xae4 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     abe:	87 01       	movw	r16, r14
     ac0:	0c 0f       	add	r16, r28
     ac2:	11 1d       	adc	r17, r1
     ac4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <read_TWI>
     ac8:	f8 01       	movw	r30, r16
     aca:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     acc:	cf 5f       	subi	r28, 0xFF	; 255
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <read_DS3231+0x5e>
     ad0:	c0 e0       	ldi	r28, 0x00	; 0
     ad2:	c6 30       	cpi	r28, 0x06	; 6
     ad4:	a0 f3       	brcs	.-24     	; 0xabe <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     ad6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
     ada:	f7 01       	movw	r30, r14
     adc:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ade:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	return(0);
     ae2:	80 e0       	ldi	r24, 0x00	; 0

}
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	27 97       	sbiw	r28, 0x07	; 7
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b04:	be 01       	movw	r22, r28
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	88 e6       	ldi	r24, 0x68	; 104
     b0c:	0e 94 3a 05 	call	0xa74	; 0xa74 <read_DS3231>
     b10:	88 23       	and	r24, r24
     b12:	49 f0       	breq	.+18     	; 0xb26 <get_time+0x36>
// avoid a bootup announcement at boot-time by not sending this
//		printError(ERR_GETTIME, "DS3231 get_time");
		strcpy(isotime, "CurrentTime?");
     b14:	9d e0       	ldi	r25, 0x0D	; 13
     b16:	ed e1       	ldi	r30, 0x1D	; 29
     b18:	f6 e8       	ldi	r31, 0x86	; 134
     b1a:	d8 01       	movw	r26, r16
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	9a 95       	dec	r25
     b22:	e1 f7       	brne	.-8      	; 0xb1c <get_time+0x2c>
		return(retval);
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	c8 01       	movw	r24, r16
     b2e:	0e 94 b9 04 	call	0x972	; 0x972 <convert_ds2iso>
	return(0);
     b32:	80 e0       	ldi	r24, 0x00	; 0

}
     b34:	27 96       	adiw	r28, 0x07	; 7
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     b58:	c8 2f       	mov	r28, r24
     b5a:	88 23       	and	r24, r24
     b5c:	21 f0       	breq	.+8      	; 0xb66 <write_DS3231+0x22>
		stop_TWI();
     b5e:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     b62:	8c 2f       	mov	r24, r28
     b64:	22 c0       	rjmp	.+68     	; 0xbaa <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     b6c:	c8 2f       	mov	r28, r24
     b6e:	88 23       	and	r24, r24
     b70:	b1 f0       	breq	.+44     	; 0xb9e <write_DS3231+0x5a>
		stop_TWI();
     b72:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
     b76:	8c 2f       	mov	r24, r28
     b78:	18 c0       	rjmp	.+48     	; 0xbaa <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b7a:	78 01       	movw	r14, r16
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	e8 1a       	sub	r14, r24
     b80:	f8 0a       	sbc	r15, r24
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     b8a:	c8 2f       	mov	r28, r24
     b8c:	88 23       	and	r24, r24
     b8e:	21 f0       	breq	.+8      	; 0xb98 <write_DS3231+0x54>
			stop_TWI();
     b90:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
			return(retval);
     b94:	8c 2f       	mov	r24, r28
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b98:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b9a:	87 01       	movw	r16, r14
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <write_DS3231+0x5c>
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     ba0:	d7 30       	cpi	r29, 0x07	; 7
     ba2:	58 f3       	brcs	.-42     	; 0xb7a <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     ba4:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	return(0);
     ba8:	80 e0       	ldi	r24, 0x00	; 0

}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	08 95       	ret

00000bb8 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	27 97       	sbiw	r28, 0x07	; 7
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bc6:	bc 01       	movw	r22, r24
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     bd0:	be 01       	movw	r22, r28
     bd2:	6f 5f       	subi	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	88 e6       	ldi	r24, 0x68	; 104
     bd8:	0e 94 a2 05 	call	0xb44	; 0xb44 <write_DS3231>
		return(retval);
	}
	return(0);

}
     bdc:	27 96       	adiw	r28, 0x07	; 7
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     be8:	45 e1       	ldi	r20, 0x15	; 21
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	6b e0       	ldi	r22, 0x0B	; 11
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e 94 b3 22 	call	0x4566	; 0x4566 <eeprom_read_block>
     bf4:	08 95       	ret

00000bf6 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bf6:	4b e0       	ldi	r20, 0x0B	; 11
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	0e 94 b3 22 	call	0x4566	; 0x4566 <eeprom_read_block>
     c02:	08 95       	ret

00000c04 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	65 97       	sbiw	r28, 0x15	; 21
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c1a:	45 e1       	ldi	r20, 0x15	; 21
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	6b e0       	ldi	r22, 0x0B	; 11
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 b7 22 	call	0x456e	; 0x456e <eeprom_update_block>

}
     c2a:	65 96       	adiw	r28, 0x15	; 21
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <update_VERSION>:

void update_VERSION(void)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	2b 97       	sbiw	r28, 0x0b	; 11
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c44:	8b e0       	ldi	r24, 0x0B	; 11
     c46:	ea e2       	ldi	r30, 0x2A	; 42
     c48:	f6 e8       	ldi	r31, 0x86	; 134
     c4a:	de 01       	movw	r26, r28
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	01 90       	ld	r0, Z+
     c50:	0d 92       	st	X+, r0
     c52:	8a 95       	dec	r24
     c54:	e1 f7       	brne	.-8      	; 0xc4e <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c56:	4b e0       	ldi	r20, 0x0B	; 11
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 b7 22 	call	0x456e	; 0x456e <eeprom_update_block>

}
     c66:	2b 96       	adiw	r28, 0x0b	; 11
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c72:	0e 94 02 06 	call	0xc04	; 0xc04 <update_BOOTTIME>
	update_VERSION();
     c76:	0e 94 1b 06 	call	0xc36	; 0xc36 <update_VERSION>
     c7a:	08 95       	ret

00000c7c <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	cf 55       	subi	r28, 0x5F	; 95
     c8a:	d1 09       	sbc	r29, r1
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errorFormat[] = "$S%dERR,%d,%s";
     c90:	2e e0       	ldi	r18, 0x0E	; 14
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f6 e8       	ldi	r31, 0x86	; 134
     c96:	de 01       	movw	r26, r28
     c98:	ae 5a       	subi	r26, 0xAE	; 174
     c9a:	bf 4f       	sbci	r27, 0xFF	; 255
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	2a 95       	dec	r18
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <printError+0x20>

	sprintf(strbuf, errorFormat, get_SPECID, errorNumber, errorString);
     ca4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     ca8:	22 ff       	sbrs	r18, 2
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <printError+0x36>
     cac:	22 e0       	ldi	r18, 0x02	; 2
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <printError+0x3a>
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	7f 93       	push	r23
     cb8:	6f 93       	push	r22
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	3f 93       	push	r19
     cc0:	2f 93       	push	r18
     cc2:	ce 01       	movw	r24, r28
     cc4:	8e 5a       	subi	r24, 0xAE	; 174
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	8e 01       	movw	r16, r28
     cce:	0f 5f       	subi	r16, 0xFF	; 255
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	1f 93       	push	r17
     cd4:	0f 93       	push	r16
     cd6:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
	checksum_NMEA(strbuf);
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     ce0:	f8 01       	movw	r30, r16
     ce2:	01 90       	ld	r0, Z+
     ce4:	00 20       	and	r0, r0
     ce6:	e9 f7       	brne	.-6      	; 0xce2 <printError+0x66>
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	af 01       	movw	r20, r30
     cec:	40 1b       	sub	r20, r16
     cee:	51 0b       	sbc	r21, r17
     cf0:	b8 01       	movw	r22, r16
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>

}
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	c1 5a       	subi	r28, 0xA1	; 161
     cfe:	df 4f       	sbci	r29, 0xFF	; 255
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	c8 2f       	mov	r28, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	f7 2e       	mov	r15, r23
     d20:	8a 01       	movw	r16, r20
     d22:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     d2a:	81 11       	cpse	r24, r1
     d2c:	2b c0       	rjmp	.+86     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     d2e:	8f 2d       	mov	r24, r15
     d30:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     d34:	81 11       	cpse	r24, r1
     d36:	26 c0       	rjmp	.+76     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     d38:	8e 2d       	mov	r24, r14
     d3a:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     d3e:	81 11       	cpse	r24, r1
     d40:	21 c0       	rjmp	.+66     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	8c 2f       	mov	r24, r28
     d46:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     d4a:	81 11       	cpse	r24, r1
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <read_FRAM+0x76>
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d52:	78 01       	movw	r14, r16
     d54:	ec 0e       	add	r14, r28
     d56:	f1 1c       	adc	r15, r1
     d58:	0e 94 ed 17 	call	0x2fda	; 0x2fda <read_TWI>
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d60:	cf 5f       	subi	r28, 0xFF	; 255
     d62:	2c 2f       	mov	r18, r28
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	8d 2f       	mov	r24, r29
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	84 f3       	brlt	.-32     	; 0xd52 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     d72:	ec 01       	movw	r28, r24
     d74:	c0 0f       	add	r28, r16
     d76:	d1 1f       	adc	r29, r17
     d78:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
     d7c:	88 83       	st	Y, r24

	stop_TWI();
     d7e:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	return(0);
     d82:	80 e0       	ldi	r24, 0x00	; 0

}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	08 95       	ret

00000d92 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	f6 2e       	mov	r15, r22
     da0:	17 2f       	mov	r17, r23
     da2:	ea 01       	movw	r28, r20
     da4:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
     dac:	81 11       	cpse	r24, r1
     dae:	1c c0       	rjmp	.+56     	; 0xde8 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     db0:	81 2f       	mov	r24, r17
     db2:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     db6:	81 11       	cpse	r24, r1
     db8:	17 c0       	rjmp	.+46     	; 0xde8 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     dba:	8f 2d       	mov	r24, r15
     dbc:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     dc0:	81 11       	cpse	r24, r1
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <write_FRAM+0x56>
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     dc8:	7e 01       	movw	r14, r28
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	e8 1a       	sub	r14, r24
     dce:	f8 0a       	sbc	r15, r24
     dd0:	88 81       	ld	r24, Y
     dd2:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
     dd6:	81 11       	cpse	r24, r1
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     dda:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     ddc:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     dde:	10 17       	cp	r17, r16
     de0:	98 f3       	brcs	.-26     	; 0xdc8 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     de2:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	return(0);
     de6:	80 e0       	ldi	r24, 0x00	; 0

}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     df6:	8f 92       	push	r8
     df8:	9f 92       	push	r9
     dfa:	af 92       	push	r10
     dfc:	bf 92       	push	r11
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	59 f0       	breq	.+22     	; 0xe20 <get_humidity+0x2a>
     e0a:	18 f0       	brcs	.+6      	; 0xe12 <get_humidity+0x1c>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	79 f0       	breq	.+30     	; 0xe2e <get_humidity+0x38>
     e10:	15 c0       	rjmp	.+42     	; 0xe3c <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
     e18:	4b 01       	movw	r8, r22
     e1a:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     e1c:	40 e4       	ldi	r20, 0x40	; 64
			break;
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
     e26:	4b 01       	movw	r8, r22
     e28:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     e2a:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
     e34:	4b 01       	movw	r8, r22
     e36:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     e38:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e3c:	0f 2e       	mov	r0, r31
     e3e:	81 2c       	mov	r8, r1
     e40:	91 2c       	mov	r9, r1
     e42:	f0 ea       	ldi	r31, 0xA0	; 160
     e44:	af 2e       	mov	r10, r31
     e46:	f1 e4       	ldi	r31, 0x41	; 65
     e48:	bf 2e       	mov	r11, r31
     e4a:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e4c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     e4e:	20 e8       	ldi	r18, 0x80	; 128
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	88 e4       	ldi	r24, 0x48	; 72
     e54:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 ea       	ldi	r20, 0xA0	; 160
     e5e:	50 e4       	ldi	r21, 0x40	; 64
     e60:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divsf3>
     e64:	2a e0       	ldi	r18, 0x0A	; 10
     e66:	37 ed       	ldi	r19, 0xD7	; 215
     e68:	43 e2       	ldi	r20, 0x23	; 35
     e6a:	5e e3       	ldi	r21, 0x3E	; 62
     e6c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__subsf3>
     e70:	2f e5       	ldi	r18, 0x5F	; 95
     e72:	39 e2       	ldi	r19, 0x29	; 41
     e74:	4b ec       	ldi	r20, 0xCB	; 203
     e76:	5b e3       	ldi	r21, 0x3B	; 59
     e78:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divsf3>
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     e80:	29 ec       	ldi	r18, 0xC9	; 201
     e82:	3e e8       	ldi	r19, 0x8E	; 142
     e84:	4d e0       	ldi	r20, 0x0D	; 13
     e86:	5b e3       	ldi	r21, 0x3B	; 59
     e88:	c5 01       	movw	r24, r10
     e8a:	b4 01       	movw	r22, r8
     e8c:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	62 e2       	ldi	r22, 0x22	; 34
     e96:	7d ef       	ldi	r23, 0xFD	; 253
     e98:	86 e8       	ldi	r24, 0x86	; 134
     e9a:	9f e3       	ldi	r25, 0x3F	; 63
     e9c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__subsf3>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divsf3>
	return(humidity);

}
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	08 95       	ret

00000ebe <initialize>:
#include "initialize.h"
#include "oled.h"
#include "eeprom.h"

void initialize(void)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	2b 97       	sbiw	r28, 0x0b	; 11
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     ecc:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     ed0:	8b e0       	ldi	r24, 0x0B	; 11
     ed2:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     ed6:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <init_XPORT>
	init_SPECID();
     eda:	0e 94 57 17 	call	0x2eae	; 0x2eae <init_SPECID>
	init_LED();
     ede:	0e 94 1d 08 	call	0x103a	; 0x103a <init_LED>
	init_BEEPER();
     ee2:	0e 94 9e 02 	call	0x53c	; 0x53c <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <init_RTC>
	init_USART();
     eee:	0e 94 49 18 	call	0x3092	; 0x3092 <init_USART>
	init_TWI();
     ef2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <init_TWI>
	init_MMA8451();
     ef6:	0e 94 b5 09 	call	0x136a	; 0x136a <init_MMA8451>
	init_PNEU();
     efa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <init_PNEU>
	init_OLED(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0e 94 42 0a 	call	0x1484	; 0x1484 <init_OLED>
	init_OLED(1);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 42 0a 	call	0x1484	; 0x1484 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     f0a:	0e 94 39 06 	call	0xc72	; 0xc72 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     f0e:	80 ee       	ldi	r24, 0xE0	; 224
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     f16:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
	get_VERSION(versionstr);
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	63 e4       	ldi	r22, 0x43	; 67
     f26:	76 e8       	ldi	r23, 0x86	; 134
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     f2e:	42 e0       	ldi	r20, 0x02	; 2
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>

}
     f3c:	2b 96       	adiw	r28, 0x0b	; 11
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     f6a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     f6e:	86 ff       	sbrs	r24, 6
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     f72:	80 e4       	ldi	r24, 0x40	; 64
     f74:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     f78:	0e 94 66 1a 	call	0x34cc	; 0x34cc <reboot>
	}

}
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	21 f0       	breq	.+8      	; 0xfb2 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	79 f5       	brne	.+94     	; 0x100c <read_ionpump+0x6e>
		pins = AIN23;
     fae:	40 e3       	ldi	r20, 0x30	; 48
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     fb2:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     fb4:	20 e8       	ldi	r18, 0x80	; 128
     fb6:	62 e0       	ldi	r22, 0x02	; 2
     fb8:	89 e4       	ldi	r24, 0x49	; 73
     fba:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     fbe:	6b 01       	movw	r12, r22
     fc0:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     fc2:	2d ec       	ldi	r18, 0xCD	; 205
     fc4:	3c ec       	ldi	r19, 0xCC	; 204
     fc6:	4c ec       	ldi	r20, 0xCC	; 204
     fc8:	5e e3       	ldi	r21, 0x3E	; 62
     fca:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__cmpsf2>
     fce:	88 23       	and	r24, r24
     fd0:	14 f1       	brlt	.+68     	; 0x1016 <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e4       	ldi	r21, 0x40	; 64
     fda:	c7 01       	movw	r24, r14
     fdc:	b6 01       	movw	r22, r12
     fde:	0e 94 12 1c 	call	0x3824	; 0x3824 <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	ec f0       	brlt	.+58     	; 0x1020 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     fe6:	29 e7       	ldi	r18, 0x79	; 121
     fe8:	39 ee       	ldi	r19, 0xE9	; 233
     fea:	42 e0       	ldi	r20, 0x02	; 2
     fec:	50 e4       	ldi	r21, 0x40	; 64
     fee:	c7 01       	movw	r24, r14
     ff0:	b6 01       	movw	r22, r12
     ff2:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
     ff6:	2e e6       	ldi	r18, 0x6E	; 110
     ff8:	33 ea       	ldi	r19, 0xA3	; 163
     ffa:	4b ed       	ldi	r20, 0xDB	; 219
     ffc:	50 e4       	ldi	r21, 0x40	; 64
     ffe:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__subsf3>

	return(vacuum);
    1002:	56 2f       	mov	r21, r22
    1004:	47 2f       	mov	r20, r23
    1006:	38 2f       	mov	r19, r24
    1008:	29 2f       	mov	r18, r25
    100a:	0e c0       	rjmp	.+28     	; 0x1028 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	36 e2       	ldi	r19, 0x26	; 38
    1012:	24 ec       	ldi	r18, 0xC4	; 196
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	36 e2       	ldi	r19, 0x26	; 38
    101c:	24 ec       	ldi	r18, 0xC4	; 196
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	36 e2       	ldi	r19, 0x26	; 38
    1026:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
    1028:	65 2f       	mov	r22, r21
    102a:	74 2f       	mov	r23, r20
    102c:	83 2f       	mov	r24, r19
    102e:	92 2f       	mov	r25, r18
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    103a:	e0 ea       	ldi	r30, 0xA0	; 160
    103c:	f4 e0       	ldi	r31, 0x04	; 4
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1042:	81 83       	std	Z+1, r24	; 0x01
    1044:	08 95       	ret

00001046 <main>:
extern void initialize(void);

int main(void)
{

	initialize();
    1046:	0e 94 5f 07 	call	0xebe	; 0xebe <initialize>
	sei();
    104a:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
    104c:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x104>
    1050:	88 23       	and	r24, r24
    1052:	e1 f3       	breq	.-8      	; 0x104c <main+0x6>
			recv0_buf.done = NO;
    1054:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>
//			on_BEEPER;
//			_delay_ms(50);
//			off_BEEPER;
			commands();
    1058:	0e 94 42 04 	call	0x884	; 0x884 <commands>
    105c:	f7 cf       	rjmp	.-18     	; 0x104c <main+0x6>

0000105e <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	c8 2f       	mov	r28, r24
    1064:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	write_TWI(reg);
    106c:	8d 2f       	mov	r24, r29
    106e:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
	start_TWI(addr, TWIREAD);
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	8c 2f       	mov	r24, r28
    1076:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	val = readlast_TWI();
    107a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
    107e:	c8 2f       	mov	r28, r24
	stop_TWI();
    1080:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
	return(val);

}
    1084:	8c 2f       	mov	r24, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	d6 2f       	mov	r29, r22
    1094:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
    109c:	c8 2f       	mov	r28, r24
    109e:	88 23       	and	r24, r24
    10a0:	21 f0       	breq	.+8      	; 0x10aa <write_MCP23008+0x1e>
		stop_TWI();
    10a2:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    10a6:	8c 2f       	mov	r24, r28
    10a8:	17 c0       	rjmp	.+46     	; 0x10d8 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    10aa:	8d 2f       	mov	r24, r29
    10ac:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
    10b0:	c8 2f       	mov	r28, r24
    10b2:	88 23       	and	r24, r24
    10b4:	21 f0       	breq	.+8      	; 0x10be <write_MCP23008+0x32>
		stop_TWI();
    10b6:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    10ba:	8c 2f       	mov	r24, r28
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    10be:	81 2f       	mov	r24, r17
    10c0:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
    10c4:	c8 2f       	mov	r28, r24
    10c6:	88 23       	and	r24, r24
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <write_MCP23008+0x46>
		stop_TWI();
    10ca:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    10ce:	8c 2f       	mov	r24, r28
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <write_MCP23008+0x4c>
	}
	stop_TWI();
    10d2:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
	return(0);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
	
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	08 95       	ret

000010e0 <read_MCP9808>:
#include "globals.h"
#include "mcp9808.h"
#include "twi.h"

float read_MCP9808(void)
{
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	88 e1       	ldi	r24, 0x18	; 24
    10f2:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	write_TWI(TEMPREGISTER);
    10f6:	85 e0       	ldi	r24, 0x05	; 5
    10f8:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	88 e1       	ldi	r24, 0x18	; 24
    1100:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	highbyte = read_TWI();
    1104:	0e 94 ed 17 	call	0x2fda	; 0x2fda <read_TWI>
    1108:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    110a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
    110e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1110:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1114:	1c 2f       	mov	r17, r28
    1116:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1118:	6c 2f       	mov	r22, r28
    111a:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    1132:	6b 01       	movw	r12, r22
    1134:	7c 01       	movw	r14, r24
    1136:	6d 2f       	mov	r22, r29
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5d e3       	ldi	r21, 0x3D	; 61
    114a:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	c7 01       	movw	r24, r14
    1154:	b6 01       	movw	r22, r12
    1156:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__addsf3>
	if (sign) {
    115a:	11 23       	and	r17, r17
    115c:	41 f0       	breq	.+16     	; 0x116e <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e8       	ldi	r24, 0x80	; 128
    1168:	93 e4       	ldi	r25, 0x43	; 67
    116a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__subsf3>
	}
	return(temperature);
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	18 2f       	mov	r17, r24
    118c:	f6 2e       	mov	r15, r22
    118e:	ea 01       	movw	r28, r20
    1190:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
    1198:	81 11       	cpse	r24, r1
    119a:	1e c0       	rjmp	.+60     	; 0x11d8 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    119c:	8f 2d       	mov	r24, r15
    119e:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
    11a2:	81 11       	cpse	r24, r1
    11a4:	19 c0       	rjmp	.+50     	; 0x11d8 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	81 2f       	mov	r24, r17
    11aa:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
    11ae:	81 11       	cpse	r24, r1
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <read_MMA8451+0x5a>
    11b2:	11 e0       	ldi	r17, 0x01	; 1
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    11b6:	7e 01       	movw	r14, r28
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	e8 1a       	sub	r14, r24
    11bc:	f8 0a       	sbc	r15, r24
    11be:	0e 94 ed 17 	call	0x2fda	; 0x2fda <read_TWI>
    11c2:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    11c4:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    11c6:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    11c8:	10 17       	cp	r17, r16
    11ca:	a8 f3       	brcs	.-22     	; 0x11b6 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    11cc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <readlast_TWI>
    11d0:	88 83       	st	Y, r24
	stop_TWI();
    11d2:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
	return(0);
    11d6:	80 e0       	ldi	r24, 0x00	; 0

}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	08 95       	ret

000011e6 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	26 97       	sbiw	r28, 0x06	; 6
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	6c 01       	movw	r12, r24
    1202:	7b 01       	movw	r14, r22
    1204:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e8       	ldi	r25, 0x80	; 128
    120a:	a6 e2       	ldi	r26, 0x26	; 38
    120c:	b4 ec       	ldi	r27, 0xC4	; 196
    120e:	fa 01       	movw	r30, r20
    1210:	80 83       	st	Z, r24
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	a2 83       	std	Z+2, r26	; 0x02
    1216:	b3 83       	std	Z+3, r27	; 0x03
    1218:	fb 01       	movw	r30, r22
    121a:	80 83       	st	Z, r24
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	b3 83       	std	Z+3, r27	; 0x03
    1222:	f6 01       	movw	r30, r12
    1224:	80 83       	st	Z, r24
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	a2 83       	std	Z+2, r26	; 0x02
    122a:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    122c:	26 e0       	ldi	r18, 0x06	; 6
    122e:	ae 01       	movw	r20, r28
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	8d e1       	ldi	r24, 0x1D	; 29
    1238:	0e 94 bf 08 	call	0x117e	; 0x117e <read_MMA8451>

	ix = datain[0];
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
	ix |= datain[1];
    1244:	2a 81       	ldd	r18, Y+2	; 0x02
    1246:	82 2b       	or	r24, r18
	ix /= 4;
    1248:	bc 01       	movw	r22, r24
    124a:	77 23       	and	r23, r23
    124c:	14 f4       	brge	.+4      	; 0x1252 <get_orientation+0x6c>
    124e:	6d 5f       	subi	r22, 0xFD	; 253
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	75 95       	asr	r23
    1254:	67 95       	ror	r22
    1256:	75 95       	asr	r23
    1258:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    125a:	07 2e       	mov	r0, r23
    125c:	00 0c       	add	r0, r0
    125e:	88 0b       	sbc	r24, r24
    1260:	99 0b       	sbc	r25, r25
    1262:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__floatsisf>
    1266:	26 e6       	ldi	r18, 0x66	; 102
    1268:	36 e2       	ldi	r19, 0x26	; 38
    126a:	45 e7       	ldi	r20, 0x75	; 117
    126c:	5e e3       	ldi	r21, 0x3E	; 62
    126e:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    1272:	f6 01       	movw	r30, r12
    1274:	60 83       	st	Z, r22
    1276:	71 83       	std	Z+1, r23	; 0x01
    1278:	82 83       	std	Z+2, r24	; 0x02
    127a:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    1280:	98 2f       	mov	r25, r24
    1282:	88 27       	eor	r24, r24
	iy |= datain[3];
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	82 2b       	or	r24, r18
	iy /= 4;
    1288:	bc 01       	movw	r22, r24
    128a:	77 23       	and	r23, r23
    128c:	14 f4       	brge	.+4      	; 0x1292 <get_orientation+0xac>
    128e:	6d 5f       	subi	r22, 0xFD	; 253
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	75 95       	asr	r23
    1294:	67 95       	ror	r22
    1296:	75 95       	asr	r23
    1298:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    129a:	07 2e       	mov	r0, r23
    129c:	00 0c       	add	r0, r0
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__floatsisf>
    12a6:	26 e6       	ldi	r18, 0x66	; 102
    12a8:	36 e2       	ldi	r19, 0x26	; 38
    12aa:	45 e7       	ldi	r20, 0x75	; 117
    12ac:	5e e3       	ldi	r21, 0x3E	; 62
    12ae:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    12b2:	f7 01       	movw	r30, r14
    12b4:	60 83       	st	Z, r22
    12b6:	71 83       	std	Z+1, r23	; 0x01
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    12c0:	98 2f       	mov	r25, r24
    12c2:	88 27       	eor	r24, r24
	iz |= datain[5];
    12c4:	2e 81       	ldd	r18, Y+6	; 0x06
    12c6:	82 2b       	or	r24, r18
	iz /= 4;
    12c8:	bc 01       	movw	r22, r24
    12ca:	77 23       	and	r23, r23
    12cc:	14 f4       	brge	.+4      	; 0x12d2 <get_orientation+0xec>
    12ce:	6d 5f       	subi	r22, 0xFD	; 253
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	75 95       	asr	r23
    12d4:	67 95       	ror	r22
    12d6:	75 95       	asr	r23
    12d8:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    12da:	07 2e       	mov	r0, r23
    12dc:	00 0c       	add	r0, r0
    12de:	88 0b       	sbc	r24, r24
    12e0:	99 0b       	sbc	r25, r25
    12e2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__floatsisf>
    12e6:	26 e6       	ldi	r18, 0x66	; 102
    12e8:	36 e2       	ldi	r19, 0x26	; 38
    12ea:	45 e7       	ldi	r20, 0x75	; 117
    12ec:	5e e3       	ldi	r21, 0x3E	; 62
    12ee:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    12f2:	f8 01       	movw	r30, r16
    12f4:	60 83       	st	Z, r22
    12f6:	71 83       	std	Z+1, r23	; 0x01
    12f8:	82 83       	std	Z+2, r24	; 0x02
    12fa:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	26 96       	adiw	r28, 0x06	; 6
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	08 95       	ret

00001316 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	d6 2f       	mov	r29, r22
    131e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
    1326:	c8 2f       	mov	r28, r24
    1328:	88 23       	and	r24, r24
    132a:	21 f0       	breq	.+8      	; 0x1334 <write_MMA8451+0x1e>
		stop_TWI();
    132c:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    1330:	8c 2f       	mov	r24, r28
    1332:	17 c0       	rjmp	.+46     	; 0x1362 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1334:	8d 2f       	mov	r24, r29
    1336:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
    133a:	c8 2f       	mov	r28, r24
    133c:	88 23       	and	r24, r24
    133e:	21 f0       	breq	.+8      	; 0x1348 <write_MMA8451+0x32>
		stop_TWI();
    1340:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    1344:	8c 2f       	mov	r24, r28
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1348:	81 2f       	mov	r24, r17
    134a:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
    134e:	c8 2f       	mov	r28, r24
    1350:	88 23       	and	r24, r24
    1352:	21 f0       	breq	.+8      	; 0x135c <write_MMA8451+0x46>
		stop_TWI();
    1354:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
		return(retval);
    1358:	8c 2f       	mov	r24, r28
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <write_MMA8451+0x4c>
	}
	stop_TWI();
    135c:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>
	return(0);
    1360:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	08 95       	ret

0000136a <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	1f 92       	push	r1
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1374:	40 e4       	ldi	r20, 0x40	; 64
    1376:	6b e2       	ldi	r22, 0x2B	; 43
    1378:	8d e1       	ldi	r24, 0x1D	; 29
    137a:	0e 94 8b 09 	call	0x1316	; 0x1316 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	ae 01       	movw	r20, r28
    1382:	4f 5f       	subi	r20, 0xFF	; 255
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    1386:	6b e2       	ldi	r22, 0x2B	; 43
    1388:	8d e1       	ldi	r24, 0x1D	; 29
    138a:	0e 94 bf 08 	call	0x117e	; 0x117e <read_MMA8451>
	while (retval & 0x40) {
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1390:	21 e0       	ldi	r18, 0x01	; 1
    1392:	ae 01       	movw	r20, r28
    1394:	4f 5f       	subi	r20, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	6b e2       	ldi	r22, 0x2B	; 43
    139a:	8d e1       	ldi	r24, 0x1D	; 29
    139c:	0e 94 bf 08 	call	0x117e	; 0x117e <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	86 fd       	sbrc	r24, 6
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    13a6:	40 ec       	ldi	r20, 0xC0	; 192
    13a8:	6f e0       	ldi	r22, 0x0F	; 15
    13aa:	8d e1       	ldi	r24, 0x1D	; 29
    13ac:	0e 94 8b 09 	call	0x1316	; 0x1316 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    13b0:	42 e0       	ldi	r20, 0x02	; 2
    13b2:	6b e2       	ldi	r22, 0x2B	; 43
    13b4:	8d e1       	ldi	r24, 0x1D	; 29
    13b6:	0e 94 8b 09 	call	0x1316	; 0x1316 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    13ba:	4d e3       	ldi	r20, 0x3D	; 61
    13bc:	6a e2       	ldi	r22, 0x2A	; 42
    13be:	8d e1       	ldi	r24, 0x1D	; 29
    13c0:	0e 94 8b 09 	call	0x1316	; 0x1316 <write_MMA8451>

	return(retval);

}
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	2e 97       	sbiw	r28, 0x0e	; 14
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    13e6:	88 e0       	ldi	r24, 0x08	; 8
    13e8:	e4 e5       	ldi	r30, 0x54	; 84
    13ea:	f6 e8       	ldi	r31, 0x86	; 134
    13ec:	de 01       	movw	r26, r28
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	8a 95       	dec	r24
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    13f8:	f8 01       	movw	r30, r16
    13fa:	01 90       	ld	r0, Z+
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <checksum_NMEA+0x2c>
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	3e 2f       	mov	r19, r30
    1404:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1406:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    140c:	f8 01       	movw	r30, r16
    140e:	e8 0f       	add	r30, r24
    1410:	f1 1d       	adc	r31, r1
    1412:	20 81       	ld	r18, Z
    1414:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	83 17       	cp	r24, r19
    141a:	c0 f3       	brcs	.-16     	; 0x140c <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    141c:	1f 92       	push	r1
    141e:	9f 93       	push	r25
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	7e 01       	movw	r14, r28
    142a:	89 e0       	ldi	r24, 0x09	; 9
    142c:	e8 0e       	add	r14, r24
    142e:	f1 1c       	adc	r15, r1
    1430:	ff 92       	push	r15
    1432:	ef 92       	push	r14
    1434:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
	strcat(str, chksum);
    1438:	b7 01       	movw	r22, r14
    143a:	c8 01       	movw	r24, r16
    143c:	0e 94 c5 21 	call	0x438a	; 0x438a <strcat>

}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	2e 96       	adiw	r28, 0x0e	; 14
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	08 95       	ret

00001460 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	d6 2f       	mov	r29, r22
    1466:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	0e 94 0a 18 	call	0x3014	; 0x3014 <start_TWI>
	write_TWI(type);
    146e:	8d 2f       	mov	r24, r29
    1470:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
	write_TWI(byteToSend);
    1474:	8c 2f       	mov	r24, r28
    1476:	0e 94 34 18 	call	0x3068	; 0x3068 <write_TWI>
	stop_TWI();
    147a:	0e 94 30 18 	call	0x3060	; 0x3060 <stop_TWI>

}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1484:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1486:	e0 e6       	ldi	r30, 0x60	; 96
    1488:	f4 e0       	ldi	r31, 0x04	; 4
    148a:	90 e4       	ldi	r25, 0x40	; 64
    148c:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	a1 e4       	ldi	r26, 0x41	; 65
    1492:	b3 e0       	ldi	r27, 0x03	; 3
    1494:	11 97       	sbiw	r26, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <init_OLED+0x10>
    1498:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    149a:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    149c:	81 11       	cpse	r24, r1
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    14a0:	cc e3       	ldi	r28, 0x3C	; 60
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    14a4:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    14a6:	4a e2       	ldi	r20, 0x2A	; 42
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	8c 2f       	mov	r24, r28
    14ac:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    14b0:	41 e7       	ldi	r20, 0x71	; 113
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    14ba:	4c e5       	ldi	r20, 0x5C	; 92
    14bc:	60 e4       	ldi	r22, 0x40	; 64
    14be:	8c 2f       	mov	r24, r28
    14c0:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    14c4:	48 e2       	ldi	r20, 0x28	; 40
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    14ce:	48 e0       	ldi	r20, 0x08	; 8
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	8c 2f       	mov	r24, r28
    14d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14d8:	4a e2       	ldi	r20, 0x2A	; 42
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14e2:	49 e7       	ldi	r20, 0x79	; 121
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	8c 2f       	mov	r24, r28
    14e8:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14ec:	45 ed       	ldi	r20, 0xD5	; 213
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	8c 2f       	mov	r24, r28
    14f2:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    14f6:	40 e7       	ldi	r20, 0x70	; 112
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1500:	48 e7       	ldi	r20, 0x78	; 120
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8c 2f       	mov	r24, r28
    1506:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    150a:	48 e0       	ldi	r20, 0x08	; 8
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1514:	46 e0       	ldi	r20, 0x06	; 6
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    151e:	42 e7       	ldi	r20, 0x72	; 114
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	60 e4       	ldi	r22, 0x40	; 64
    152c:	8c 2f       	mov	r24, r28
    152e:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1532:	4a e2       	ldi	r20, 0x2A	; 42
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	8c 2f       	mov	r24, r28
    1538:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    153c:	49 e7       	ldi	r20, 0x79	; 121
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1546:	4a ed       	ldi	r20, 0xDA	; 218
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    155a:	4c ed       	ldi	r20, 0xDC	; 220
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	8c 2f       	mov	r24, r28
    1560:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	8c 2f       	mov	r24, r28
    156a:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    156e:	41 e8       	ldi	r20, 0x81	; 129
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	8c 2f       	mov	r24, r28
    1574:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	8c 2f       	mov	r24, r28
    157e:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1582:	49 ed       	ldi	r20, 0xD9	; 217
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    158c:	41 ef       	ldi	r20, 0xF1	; 241
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	8c 2f       	mov	r24, r28
    1592:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1596:	4b ed       	ldi	r20, 0xDB	; 219
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	8c 2f       	mov	r24, r28
    159c:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    15a0:	40 e4       	ldi	r20, 0x40	; 64
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	8c 2f       	mov	r24, r28
    15a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    15aa:	48 e7       	ldi	r20, 0x78	; 120
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	8c 2f       	mov	r24, r28
    15b0:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    15b4:	48 e2       	ldi	r20, 0x28	; 40
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	8c 2f       	mov	r24, r28
    15ba:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8c 2f       	mov	r24, r28
    15c4:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	8c 2f       	mov	r24, r28
    15ce:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    15d2:	4c e0       	ldi	r20, 0x0C	; 12
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	8c 2f       	mov	r24, r28
    15d8:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
    15dc:	ba e6       	ldi	r27, 0x6A	; 106
    15de:	24 e0       	ldi	r18, 0x04	; 4
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	b1 50       	subi	r27, 0x01	; 1
    15e4:	20 40       	sbci	r18, 0x00	; 0
    15e6:	80 40       	sbci	r24, 0x00	; 0
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <init_OLED+0x15e>
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15ec:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    15f0:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    15f4:	85 e0       	ldi	r24, 0x05	; 5
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    15fc:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	e2 97       	sbiw	r28, 0x32	; 50
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    161c:	91 e1       	ldi	r25, 0x11	; 17
    161e:	ec e5       	ldi	r30, 0x5C	; 92
    1620:	f6 e8       	ldi	r31, 0x86	; 134
    1622:	de 01       	movw	r26, r28
    1624:	92 96       	adiw	r26, 0x22	; 34
    1626:	01 90       	ld	r0, Z+
    1628:	0d 92       	st	X+, r0
    162a:	9a 95       	dec	r25
    162c:	e1 f7       	brne	.-8      	; 0x1626 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    162e:	81 11       	cpse	r24, r1
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1632:	0c e3       	ldi	r16, 0x3C	; 60
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1636:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	7c 01       	movw	r14, r24
    163e:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <strcpy>
	if (strlen(strbuf) > 16) {
    1642:	f7 01       	movw	r30, r14
    1644:	01 90       	ld	r0, Z+
    1646:	00 20       	and	r0, r0
    1648:	e9 f7       	brne	.-6      	; 0x1644 <writestr_OLED+0x40>
    164a:	31 97       	sbiw	r30, 0x01	; 1
    164c:	ee 19       	sub	r30, r14
    164e:	ff 09       	sbc	r31, r15
    1650:	71 97       	sbiw	r30, 0x11	; 17
    1652:	08 f0       	brcs	.+2      	; 0x1656 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1654:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1656:	be 01       	movw	r22, r28
    1658:	6e 5d       	subi	r22, 0xDE	; 222
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	0e 94 c5 21 	call	0x438a	; 0x438a <strcat>

	if (lineno == 1) {
    1664:	11 30       	cpi	r17, 0x01	; 1
    1666:	39 f4       	brne	.+14     	; 0x1676 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	80 2f       	mov	r24, r16
    166e:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	12 c0       	rjmp	.+36     	; 0x169a <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1676:	40 ec       	ldi	r20, 0xC0	; 192
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	80 2f       	mov	r24, r16
    167c:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>
    1680:	f8 cf       	rjmp	.-16     	; 0x1672 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1682:	e1 e0       	ldi	r30, 0x01	; 1
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	ec 0f       	add	r30, r28
    1688:	fd 1f       	adc	r31, r29
    168a:	e1 0f       	add	r30, r17
    168c:	f1 1d       	adc	r31, r1
    168e:	40 81       	ld	r20, Z
    1690:	60 e4       	ldi	r22, 0x40	; 64
    1692:	80 2f       	mov	r24, r16
    1694:	0e 94 30 0a 	call	0x1460	; 0x1460 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1698:	1f 5f       	subi	r17, 0xFF	; 255
    169a:	10 31       	cpi	r17, 0x10	; 16
    169c:	90 f3       	brcs	.-28     	; 0x1682 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    16a6:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    16aa:	e2 96       	adiw	r28, 0x32	; 50
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	08 95       	ret

000016be <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	61 97       	sbiw	r28, 0x11	; 17
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    16d0:	81 e1       	ldi	r24, 0x11	; 17
    16d2:	ec e5       	ldi	r30, 0x5C	; 92
    16d4:	f6 e8       	ldi	r31, 0x86	; 134
    16d6:	de 01       	movw	r26, r28
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	01 90       	ld	r0, Z+
    16dc:	0d 92       	st	X+, r0
    16de:	8a 95       	dec	r24
    16e0:	e1 f7       	brne	.-8      	; 0x16da <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	be 01       	movw	r22, r28
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	81 2f       	mov	r24, r17
    16ec:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16f0:	42 e0       	ldi	r20, 0x02	; 2
    16f2:	be 01       	movw	r22, r28
    16f4:	6f 5f       	subi	r22, 0xFF	; 255
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	81 2f       	mov	r24, r17
    16fa:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
	timerOLED = 0;
    16fe:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1702:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    1706:	61 96       	adiw	r28, 0x11	; 17
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	08 95       	ret

00001714 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	84 e2       	ldi	r24, 0x24	; 36
    171a:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    171e:	81 11       	cpse	r24, r1
    1720:	35 c0       	rjmp	.+106    	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	6a e0       	ldi	r22, 0x0A	; 10
    1726:	84 e2       	ldi	r24, 0x24	; 36
    1728:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    172c:	81 11       	cpse	r24, r1
    172e:	2e c0       	rjmp	.+92     	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1730:	4e ef       	ldi	r20, 0xFE	; 254
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	81 e2       	ldi	r24, 0x21	; 33
    1736:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    173a:	81 11       	cpse	r24, r1
    173c:	27 c0       	rjmp	.+78     	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	81 e2       	ldi	r24, 0x21	; 33
    1744:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    1748:	81 11       	cpse	r24, r1
    174a:	20 c0       	rjmp	.+64     	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    174c:	4c ef       	ldi	r20, 0xFC	; 252
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	81 e2       	ldi	r24, 0x21	; 33
    1752:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    1756:	81 11       	cpse	r24, r1
    1758:	19 c0       	rjmp	.+50     	; 0x178c <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	64 e0       	ldi	r22, 0x04	; 4
    175e:	81 e2       	ldi	r24, 0x21	; 33
    1760:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    1764:	81 11       	cpse	r24, r1
    1766:	12 c0       	rjmp	.+36     	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	65 e0       	ldi	r22, 0x05	; 5
    176c:	81 e2       	ldi	r24, 0x21	; 33
    176e:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    1772:	81 11       	cpse	r24, r1
    1774:	0b c0       	rjmp	.+22     	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	66 e0       	ldi	r22, 0x06	; 6
    177a:	81 e2       	ldi	r24, 0x21	; 33
    177c:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
    1780:	81 11       	cpse	r24, r1
    1782:	04 c0       	rjmp	.+8      	; 0x178c <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1784:	89 e0       	ldi	r24, 0x09	; 9
    1786:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    178a:	80 e0       	ldi	r24, 0x00	; 0

}
    178c:	08 95       	ret

0000178e <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	6c 01       	movw	r12, r24
    17a0:	8b 01       	movw	r16, r22
    17a2:	7a 01       	movw	r14, r20
    17a4:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    17a6:	69 e0       	ldi	r22, 0x09	; 9
    17a8:	81 e2       	ldi	r24, 0x21	; 33
    17aa:	0e 94 2f 08 	call	0x105e	; 0x105e <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    17ae:	98 2f       	mov	r25, r24
    17b0:	92 95       	swap	r25
    17b2:	96 95       	lsr	r25
    17b4:	96 95       	lsr	r25
    17b6:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    17b8:	91 30       	cpi	r25, 0x01	; 1
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    17bc:	93 e6       	ldi	r25, 0x63	; 99
    17be:	f6 01       	movw	r30, r12
    17c0:	90 83       	st	Z, r25
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    17c4:	92 30       	cpi	r25, 0x02	; 2
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    17c8:	9f e6       	ldi	r25, 0x6F	; 111
    17ca:	f6 01       	movw	r30, r12
    17cc:	90 83       	st	Z, r25
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    17d0:	93 30       	cpi	r25, 0x03	; 3
    17d2:	21 f4       	brne	.+8      	; 0x17dc <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    17d4:	94 e7       	ldi	r25, 0x74	; 116
    17d6:	f6 01       	movw	r30, r12
    17d8:	90 83       	st	Z, r25
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    17dc:	98 e7       	ldi	r25, 0x78	; 120
    17de:	f6 01       	movw	r30, r12
    17e0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17e2:	98 2f       	mov	r25, r24
    17e4:	96 95       	lsr	r25
    17e6:	96 95       	lsr	r25
	state &= 0b00000011;
    17e8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17ea:	91 30       	cpi	r25, 0x01	; 1
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <read_PNEUSENSORS+0x68>
		*right = 'c';
    17ee:	93 e6       	ldi	r25, 0x63	; 99
    17f0:	f7 01       	movw	r30, r14
    17f2:	90 83       	st	Z, r25
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <__DATA_REGION_LENGTH__+0x14>
	} else if (state == 2) {
    17f6:	92 30       	cpi	r25, 0x02	; 2
    17f8:	21 f4       	brne	.+8      	; 0x1802 <__DATA_REGION_LENGTH__+0x2>
		*right = 'o';
    17fa:	9f e6       	ldi	r25, 0x6F	; 111
    17fc:	f7 01       	movw	r30, r14
    17fe:	90 83       	st	Z, r25
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <__DATA_REGION_LENGTH__+0x14>
	} else if (state == 3) {
    1802:	93 30       	cpi	r25, 0x03	; 3
    1804:	21 f4       	brne	.+8      	; 0x180e <__DATA_REGION_LENGTH__+0xe>
		*right = 't';
    1806:	94 e7       	ldi	r25, 0x74	; 116
    1808:	f7 01       	movw	r30, r14
    180a:	90 83       	st	Z, r25
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <__DATA_REGION_LENGTH__+0x14>
	} else {
		*right = 'x';
    180e:	98 e7       	ldi	r25, 0x78	; 120
    1810:	f7 01       	movw	r30, r14
    1812:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1814:	98 2f       	mov	r25, r24
    1816:	92 95       	swap	r25
    1818:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    181a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    181c:	91 30       	cpi	r25, 0x01	; 1
    181e:	21 f4       	brne	.+8      	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
		*left = 'o';
    1820:	9f e6       	ldi	r25, 0x6F	; 111
    1822:	f8 01       	movw	r30, r16
    1824:	90 83       	st	Z, r25
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
	} else if (state == 2) {
    1828:	92 30       	cpi	r25, 0x02	; 2
    182a:	21 f4       	brne	.+8      	; 0x1834 <__DATA_REGION_LENGTH__+0x34>
		*left = 'c';
    182c:	93 e6       	ldi	r25, 0x63	; 99
    182e:	f8 01       	movw	r30, r16
    1830:	90 83       	st	Z, r25
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
	} else if (state == 3) {
    1834:	93 30       	cpi	r25, 0x03	; 3
    1836:	21 f4       	brne	.+8      	; 0x1840 <__DATA_REGION_LENGTH__+0x40>
		*left = 't';
    1838:	94 e7       	ldi	r25, 0x74	; 116
    183a:	f8 01       	movw	r30, r16
    183c:	90 83       	st	Z, r25
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
	} else {
		*left = 'x';
    1840:	98 e7       	ldi	r25, 0x78	; 120
    1842:	f8 01       	movw	r30, r16
    1844:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1846:	81 ff       	sbrs	r24, 1
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <__DATA_REGION_LENGTH__+0x50>
		*air = '0';
    184a:	80 e3       	ldi	r24, 0x30	; 48
    184c:	88 83       	st	Y, r24
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	} else {
		*air = '1';
    1850:	81 e3       	ldi	r24, 0x31	; 49
    1852:	88 83       	st	Y, r24
	}
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	08 95       	ret

00001866 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	d8 2f       	mov	r29, r24
    186c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    186e:	69 e0       	ldi	r22, 0x09	; 9
    1870:	84 e2       	ldi	r24, 0x24	; 36
    1872:	0e 94 2f 08 	call	0x105e	; 0x105e <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1876:	8d 2b       	or	r24, r29
    1878:	48 2f       	mov	r20, r24
    187a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    187c:	6a e0       	ldi	r22, 0x0A	; 10
    187e:	84 e2       	ldi	r24, 0x24	; 36
    1880:	0e 94 46 08 	call	0x108c	; 0x108c <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	6a 97       	sbiw	r28, 0x1a	; 26
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1898:	99 e0       	ldi	r25, 0x09	; 9
    189a:	e5 e8       	ldi	r30, 0x85	; 133
    189c:	f6 e8       	ldi	r31, 0x86	; 134
    189e:	de 01       	movw	r26, r28
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	01 90       	ld	r0, Z+
    18a4:	0d 92       	st	X+, r0
    18a6:	9a 95       	dec	r25
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    18aa:	8c 36       	cpi	r24, 0x6C	; 108
    18ac:	31 f1       	breq	.+76     	; 0x18fa <close_PNEU+0x70>
    18ae:	18 f4       	brcc	.+6      	; 0x18b6 <close_PNEU+0x2c>
    18b0:	82 36       	cpi	r24, 0x62	; 98
    18b2:	39 f0       	breq	.+14     	; 0x18c2 <close_PNEU+0x38>
    18b4:	75 c0       	rjmp	.+234    	; 0x19a0 <close_PNEU+0x116>
    18b6:	82 37       	cpi	r24, 0x72	; 114
    18b8:	c1 f1       	breq	.+112    	; 0x192a <close_PNEU+0xa0>
    18ba:	83 37       	cpi	r24, 0x73	; 115
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <close_PNEU+0x36>
    18be:	4d c0       	rjmp	.+154    	; 0x195a <close_PNEU+0xd0>
    18c0:	6f c0       	rjmp	.+222    	; 0x19a0 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18c2:	6a ee       	ldi	r22, 0xEA	; 234
    18c4:	84 e4       	ldi	r24, 0x44	; 68
    18c6:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18ca:	66 ee       	ldi	r22, 0xE6	; 230
    18cc:	88 e8       	ldi	r24, 0x88	; 136
    18ce:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    18d2:	8d e6       	ldi	r24, 0x6D	; 109
    18d4:	96 e8       	ldi	r25, 0x86	; 134
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	9f 93       	push	r25
    18e0:	8f 93       	push	r24
    18e2:	09 96       	adiw	r24, 0x09	; 9
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	47 c0       	rjmp	.+142    	; 0x1988 <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18fa:	6a ee       	ldi	r22, 0xEA	; 234
    18fc:	84 e4       	ldi	r24, 0x44	; 68
    18fe:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1902:	82 e7       	ldi	r24, 0x72	; 114
    1904:	96 e8       	ldi	r25, 0x86	; 134
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	ce 01       	movw	r24, r28
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	09 96       	adiw	r24, 0x09	; 9
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	2f c0       	rjmp	.+94     	; 0x1988 <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    192a:	66 ee       	ldi	r22, 0xE6	; 230
    192c:	88 e8       	ldi	r24, 0x88	; 136
    192e:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1932:	87 e7       	ldi	r24, 0x77	; 119
    1934:	96 e8       	ldi	r25, 0x86	; 134
    1936:	9f 93       	push	r25
    1938:	8f 93       	push	r24
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	9f 93       	push	r25
    1940:	8f 93       	push	r24
    1942:	09 96       	adiw	r24, 0x09	; 9
    1944:	9f 93       	push	r25
    1946:	8f 93       	push	r24
    1948:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    195a:	6c ee       	ldi	r22, 0xEC	; 236
    195c:	82 e2       	ldi	r24, 0x22	; 34
    195e:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1962:	8d e7       	ldi	r24, 0x7D	; 125
    1964:	96 e8       	ldi	r25, 0x86	; 134
    1966:	9f 93       	push	r25
    1968:	8f 93       	push	r24
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	09 96       	adiw	r24, 0x09	; 9
    1974:	9f 93       	push	r25
    1976:	8f 93       	push	r24
    1978:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 5f 0b 	call	0x16be	; 0x16be <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	be 01       	movw	r22, r28
    1992:	66 5f       	subi	r22, 0xF6	; 246
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
	return(GREATERPROMPT);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    19a0:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    19a2:	6a 96       	adiw	r28, 0x1a	; 26
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	69 97       	sbiw	r28, 0x19	; 25
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    19bc:	98 e0       	ldi	r25, 0x08	; 8
    19be:	ee e8       	ldi	r30, 0x8E	; 142
    19c0:	f6 e8       	ldi	r31, 0x86	; 134
    19c2:	de 01       	movw	r26, r28
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	01 90       	ld	r0, Z+
    19c8:	0d 92       	st	X+, r0
    19ca:	9a 95       	dec	r25
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    19ce:	8c 36       	cpi	r24, 0x6C	; 108
    19d0:	31 f1       	breq	.+76     	; 0x1a1e <open_PNEU+0x70>
    19d2:	18 f4       	brcc	.+6      	; 0x19da <open_PNEU+0x2c>
    19d4:	82 36       	cpi	r24, 0x62	; 98
    19d6:	39 f0       	breq	.+14     	; 0x19e6 <open_PNEU+0x38>
    19d8:	75 c0       	rjmp	.+234    	; 0x1ac4 <open_PNEU+0x116>
    19da:	82 37       	cpi	r24, 0x72	; 114
    19dc:	c1 f1       	breq	.+112    	; 0x1a4e <open_PNEU+0xa0>
    19de:	83 37       	cpi	r24, 0x73	; 115
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <open_PNEU+0x36>
    19e2:	4d c0       	rjmp	.+154    	; 0x1a7e <open_PNEU+0xd0>
    19e4:	6f c0       	rjmp	.+222    	; 0x1ac4 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19e6:	6e ea       	ldi	r22, 0xAE	; 174
    19e8:	84 e4       	ldi	r24, 0x44	; 68
    19ea:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19ee:	6e e6       	ldi	r22, 0x6E	; 110
    19f0:	88 e8       	ldi	r24, 0x88	; 136
    19f2:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    19f6:	8d e6       	ldi	r24, 0x6D	; 109
    19f8:	96 e8       	ldi	r25, 0x86	; 134
    19fa:	9f 93       	push	r25
    19fc:	8f 93       	push	r24
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	08 96       	adiw	r24, 0x08	; 8
    1a08:	9f 93       	push	r25
    1a0a:	8f 93       	push	r24
    1a0c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	47 c0       	rjmp	.+142    	; 0x1aac <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a1e:	6e ea       	ldi	r22, 0xAE	; 174
    1a20:	84 e4       	ldi	r24, 0x44	; 68
    1a22:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a26:	82 e7       	ldi	r24, 0x72	; 114
    1a28:	96 e8       	ldi	r25, 0x86	; 134
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	9f 93       	push	r25
    1a34:	8f 93       	push	r24
    1a36:	08 96       	adiw	r24, 0x08	; 8
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	2f c0       	rjmp	.+94     	; 0x1aac <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a4e:	6e e6       	ldi	r22, 0x6E	; 110
    1a50:	88 e8       	ldi	r24, 0x88	; 136
    1a52:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a56:	87 e7       	ldi	r24, 0x77	; 119
    1a58:	96 e8       	ldi	r25, 0x86	; 134
    1a5a:	9f 93       	push	r25
    1a5c:	8f 93       	push	r24
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	9f 93       	push	r25
    1a64:	8f 93       	push	r24
    1a66:	08 96       	adiw	r24, 0x08	; 8
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	17 c0       	rjmp	.+46     	; 0x1aac <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a7e:	6e ec       	ldi	r22, 0xCE	; 206
    1a80:	82 e2       	ldi	r24, 0x22	; 34
    1a82:	0e 94 33 0c 	call	0x1866	; 0x1866 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a86:	8d e7       	ldi	r24, 0x7D	; 125
    1a88:	96 e8       	ldi	r25, 0x86	; 134
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	08 96       	adiw	r24, 0x08	; 8
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			break;
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	0e 94 5f 0b 	call	0x16be	; 0x16be <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	be 01       	movw	r22, r28
    1ab6:	67 5f       	subi	r22, 0xF7	; 247
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
	return(GREATERPROMPT);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1ac4:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1ac6:	69 96       	adiw	r28, 0x19	; 25
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ad2:	1f 92       	push	r1
    1ad4:	0f 92       	push	r0
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	4f 93       	push	r20
    1ae2:	5f 93       	push	r21
    1ae4:	6f 93       	push	r22
    1ae6:	7f 93       	push	r23
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	af 93       	push	r26
    1aee:	bf 93       	push	r27
    1af0:	ef 93       	push	r30
    1af2:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1af4:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1af8:	88 23       	and	r24, r24
    1afa:	4c f4       	brge	.+18     	; 0x1b0e <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1b02:	68 e0       	ldi	r22, 0x08	; 8
    1b04:	81 e2       	ldi	r24, 0x21	; 33
    1b06:	0e 94 2f 08 	call	0x105e	; 0x105e <read_MCP23008>
    1b0a:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <pneuState>
	}

}
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b30:	e0 e0       	ldi	r30, 0x00	; 0
    1b32:	f4 e0       	ldi	r31, 0x04	; 4
    1b34:	88 e0       	ldi	r24, 0x08	; 8
    1b36:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b38:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b3a:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b3c:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b3e:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b40:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b42:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b44:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b46:	e0 e2       	ldi	r30, 0x20	; 32
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b4c:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b4e:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b50:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b52:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b54:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b56:	e0 e4       	ldi	r30, 0x40	; 64
    1b58:	f4 e0       	ldi	r31, 0x04	; 4
    1b5a:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b5c:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b5e:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b60:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b62:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b64:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b66:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b68:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b6a:	e0 e6       	ldi	r30, 0x60	; 96
    1b6c:	f4 e0       	ldi	r31, 0x04	; 4
    1b6e:	94 e0       	ldi	r25, 0x04	; 4
    1b70:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b72:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b74:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b76:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b78:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7a:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7c:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7e:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b80:	e0 e8       	ldi	r30, 0x80	; 128
    1b82:	f4 e0       	ldi	r31, 0x04	; 4
    1b84:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b86:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b88:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b8a:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b8c:	e0 ea       	ldi	r30, 0xA0	; 160
    1b8e:	f4 e0       	ldi	r31, 0x04	; 4
    1b90:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b92:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b94:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b96:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b98:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b9a:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b9c:	86 8b       	std	Z+22, r24	; 0x16
    1b9e:	08 95       	ret

00001ba0 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1ba0:	2f 92       	push	r2
    1ba2:	3f 92       	push	r3
    1ba4:	4f 92       	push	r4
    1ba6:	5f 92       	push	r5
    1ba8:	6f 92       	push	r6
    1baa:	7f 92       	push	r7
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	c1 50       	subi	r28, 0x01	; 1
    1bca:	d3 40       	sbci	r29, 0x03	; 3
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1bd0:	92 e4       	ldi	r25, 0x42	; 66
    1bd2:	e4 ef       	ldi	r30, 0xF4	; 244
    1bd4:	f6 e8       	ldi	r31, 0x86	; 134
    1bd6:	de 01       	movw	r26, r28
    1bd8:	ab 5a       	subi	r26, 0xAB	; 171
    1bda:	be 4f       	sbci	r27, 0xFE	; 254
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0d 92       	st	X+, r0
    1be0:	9a 95       	dec	r25
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1be4:	93 e3       	ldi	r25, 0x33	; 51
    1be6:	e6 e3       	ldi	r30, 0x36	; 54
    1be8:	f7 e8       	ldi	r31, 0x87	; 135
    1bea:	de 01       	movw	r26, r28
    1bec:	a9 56       	subi	r26, 0x69	; 105
    1bee:	be 4f       	sbci	r27, 0xFE	; 254
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	0d 92       	st	X+, r0
    1bf4:	9a 95       	dec	r25
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <report+0x50>
	const char format1_MTR[] = "$S%dMTR,%s,%c,%3.1f,V,%3.1f,C,%s";
    1bf8:	91 e2       	ldi	r25, 0x21	; 33
    1bfa:	e9 e6       	ldi	r30, 0x69	; 105
    1bfc:	f7 e8       	ldi	r31, 0x87	; 135
    1bfe:	de 01       	movw	r26, r28
    1c00:	a6 53       	subi	r26, 0x36	; 54
    1c02:	be 4f       	sbci	r27, 0xFE	; 254
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	9a 95       	dec	r25
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <report+0x64>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1c0c:	90 e2       	ldi	r25, 0x20	; 32
    1c0e:	ea e8       	ldi	r30, 0x8A	; 138
    1c10:	f7 e8       	ldi	r31, 0x87	; 135
    1c12:	de 01       	movw	r26, r28
    1c14:	a5 51       	subi	r26, 0x15	; 21
    1c16:	be 4f       	sbci	r27, 0xFE	; 254
    1c18:	01 90       	ld	r0, Z+
    1c1a:	0d 92       	st	X+, r0
    1c1c:	9a 95       	dec	r25
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1c20:	92 e1       	ldi	r25, 0x12	; 18
    1c22:	ea ea       	ldi	r30, 0xAA	; 170
    1c24:	f7 e8       	ldi	r31, 0x87	; 135
    1c26:	de 01       	movw	r26, r28
    1c28:	a5 5f       	subi	r26, 0xF5	; 245
    1c2a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	0d 92       	st	X+, r0
    1c30:	9a 95       	dec	r25
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <report+0x8c>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c34:	91 e3       	ldi	r25, 0x31	; 49
    1c36:	ec eb       	ldi	r30, 0xBC	; 188
    1c38:	f7 e8       	ldi	r31, 0x87	; 135
    1c3a:	de 01       	movw	r26, r28
    1c3c:	a3 5e       	subi	r26, 0xE3	; 227
    1c3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c40:	01 90       	ld	r0, Z+
    1c42:	0d 92       	st	X+, r0
    1c44:	9a 95       	dec	r25
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c48:	93 e1       	ldi	r25, 0x13	; 19
    1c4a:	ed ee       	ldi	r30, 0xED	; 237
    1c4c:	f7 e8       	ldi	r31, 0x87	; 135
    1c4e:	de 01       	movw	r26, r28
    1c50:	a2 5b       	subi	r26, 0xB2	; 178
    1c52:	bd 4f       	sbci	r27, 0xFD	; 253
    1c54:	01 90       	ld	r0, Z+
    1c56:	0d 92       	st	X+, r0
    1c58:	9a 95       	dec	r25
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c5c:	93 e1       	ldi	r25, 0x13	; 19
    1c5e:	e0 e0       	ldi	r30, 0x00	; 0
    1c60:	f8 e8       	ldi	r31, 0x88	; 136
    1c62:	de 01       	movw	r26, r28
    1c64:	af 59       	subi	r26, 0x9F	; 159
    1c66:	bd 4f       	sbci	r27, 0xFD	; 253
    1c68:	01 90       	ld	r0, Z+
    1c6a:	0d 92       	st	X+, r0
    1c6c:	9a 95       	dec	r25
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <report+0xc8>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c70:	9d e1       	ldi	r25, 0x1D	; 29
    1c72:	e3 e1       	ldi	r30, 0x13	; 19
    1c74:	f8 e8       	ldi	r31, 0x88	; 136
    1c76:	de 01       	movw	r26, r28
    1c78:	ac 58       	subi	r26, 0x8C	; 140
    1c7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c7c:	01 90       	ld	r0, Z+
    1c7e:	0d 92       	st	X+, r0
    1c80:	9a 95       	dec	r25
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <report+0xdc>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c84:	99 e2       	ldi	r25, 0x29	; 41
    1c86:	e0 e3       	ldi	r30, 0x30	; 48
    1c88:	f8 e8       	ldi	r31, 0x88	; 136
    1c8a:	de 01       	movw	r26, r28
    1c8c:	af 56       	subi	r26, 0x6F	; 111
    1c8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c90:	01 90       	ld	r0, Z+
    1c92:	0d 92       	st	X+, r0
    1c94:	9a 95       	dec	r25
    1c96:	e1 f7       	brne	.-8      	; 0x1c90 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c98:	9d e0       	ldi	r25, 0x0D	; 13
    1c9a:	e9 e5       	ldi	r30, 0x59	; 89
    1c9c:	f8 e8       	ldi	r31, 0x88	; 136
    1c9e:	de 01       	movw	r26, r28
    1ca0:	a6 54       	subi	r26, 0x46	; 70
    1ca2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	0d 92       	st	X+, r0
    1ca8:	9a 95       	dec	r25
    1caa:	e1 f7       	brne	.-8      	; 0x1ca4 <report+0x104>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1cac:	91 e1       	ldi	r25, 0x11	; 17
    1cae:	e6 e6       	ldi	r30, 0x66	; 102
    1cb0:	f8 e8       	ldi	r31, 0x88	; 136
    1cb2:	de 01       	movw	r26, r28
    1cb4:	a9 53       	subi	r26, 0x39	; 57
    1cb6:	bd 4f       	sbci	r27, 0xFD	; 253
    1cb8:	01 90       	ld	r0, Z+
    1cba:	0d 92       	st	X+, r0
    1cbc:	9a 95       	dec	r25
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1cc0:	08 2f       	mov	r16, r24
    1cc2:	10 e0       	ldi	r17, 0x00	; 0
    1cc4:	84 e3       	ldi	r24, 0x34	; 52
    1cc6:	80 9f       	mul	r24, r16
    1cc8:	f0 01       	movw	r30, r0
    1cca:	81 9f       	mul	r24, r17
    1ccc:	f0 0d       	add	r31, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	ed 5f       	subi	r30, 0xFD	; 253
    1cd2:	f7 4d       	sbci	r31, 0xD7	; 215
    1cd4:	e1 81       	ldd	r30, Z+1	; 0x01
    1cd6:	8e 2f       	mov	r24, r30
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e1 54       	subi	r30, 0x41	; 65
    1cde:	f1 09       	sbc	r31, r1
    1ce0:	e6 33       	cpi	r30, 0x36	; 54
    1ce2:	f1 05       	cpc	r31, r1
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <report+0x148>
    1ce6:	69 c5       	rjmp	.+2770   	; 0x27ba <report+0xc1a>
    1ce8:	ed 58       	subi	r30, 0x8D	; 141
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	8b 5e       	subi	r24, 0xEB	; 235
    1cf4:	9e 4f       	sbci	r25, 0xFE	; 254
    1cf6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1cfa:	84 e3       	ldi	r24, 0x34	; 52
    1cfc:	80 9f       	mul	r24, r16
    1cfe:	f0 01       	movw	r30, r0
    1d00:	81 9f       	mul	r24, r17
    1d02:	f0 0d       	add	r31, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	ed 5f       	subi	r30, 0xFD	; 253
    1d08:	f7 4d       	sbci	r31, 0xD7	; 215
    1d0a:	e1 80       	ldd	r14, Z+1	; 0x01
    1d0c:	0f 2e       	mov	r0, r31
    1d0e:	ff e3       	ldi	r31, 0x3F	; 63
    1d10:	ff 2e       	mov	r15, r31
    1d12:	f0 2d       	mov	r31, r0
    1d14:	fe 0c       	add	r15, r14
			retval = get_ROBOFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1d16:	ae 01       	movw	r20, r28
    1d18:	48 51       	subi	r20, 0x18	; 24
    1d1a:	5d 4f       	sbci	r21, 0xFD	; 253
    1d1c:	68 e1       	ldi	r22, 0x18	; 24
    1d1e:	8f 2d       	mov	r24, r15
    1d20:	0e 94 98 15 	call	0x2b30	; 0x2b30 <get_ROBOFloat>
			if (retval == ERROR) {
    1d24:	83 36       	cpi	r24, 0x63	; 99
    1d26:	61 f4       	brne	.+24     	; 0x1d40 <report+0x1a0>
				voltage = -666.0;
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e8       	ldi	r25, 0x80	; 128
    1d2c:	a6 e2       	ldi	r26, 0x26	; 38
    1d2e:	b4 ec       	ldi	r27, 0xC4	; 196
    1d30:	c8 51       	subi	r28, 0x18	; 24
    1d32:	dd 4f       	sbci	r29, 0xFD	; 253
    1d34:	88 83       	st	Y, r24
    1d36:	99 83       	std	Y+1, r25	; 0x01
    1d38:	aa 83       	std	Y+2, r26	; 0x02
    1d3a:	bb 83       	std	Y+3, r27	; 0x03
    1d3c:	c8 5e       	subi	r28, 0xE8	; 232
    1d3e:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_ROBOFloat(controller, ROBOREADTEMPERATURE, &t0);
    1d40:	ae 01       	movw	r20, r28
    1d42:	4c 51       	subi	r20, 0x1C	; 28
    1d44:	5d 4f       	sbci	r21, 0xFD	; 253
    1d46:	62 e5       	ldi	r22, 0x52	; 82
    1d48:	8f 2d       	mov	r24, r15
    1d4a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <get_ROBOFloat>
			if (retval == ERROR) {
    1d4e:	83 36       	cpi	r24, 0x63	; 99
    1d50:	61 f4       	brne	.+24     	; 0x1d6a <report+0x1ca>
				t0 = -666.0;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e8       	ldi	r25, 0x80	; 128
    1d56:	a6 e2       	ldi	r26, 0x26	; 38
    1d58:	b4 ec       	ldi	r27, 0xC4	; 196
    1d5a:	cc 51       	subi	r28, 0x1C	; 28
    1d5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d5e:	88 83       	st	Y, r24
    1d60:	99 83       	std	Y+1, r25	; 0x01
    1d62:	aa 83       	std	Y+2, r26	; 0x02
    1d64:	bb 83       	std	Y+3, r27	; 0x03
    1d66:	c4 5e       	subi	r28, 0xE4	; 228
    1d68:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1d6a:	24 e3       	ldi	r18, 0x34	; 52
    1d6c:	20 9f       	mul	r18, r16
    1d6e:	c0 01       	movw	r24, r0
    1d70:	21 9f       	mul	r18, r17
    1d72:	90 0d       	add	r25, r0
    1d74:	11 24       	eor	r1, r1
    1d76:	82 5d       	subi	r24, 0xD2	; 210
    1d78:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_ROBOFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
    1d7a:	cc 51       	subi	r28, 0x1C	; 28
    1d7c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d7e:	68 81       	ld	r22, Y
    1d80:	c4 5e       	subi	r28, 0xE4	; 228
    1d82:	d2 40       	sbci	r29, 0x02	; 2
    1d84:	cb 51       	subi	r28, 0x1B	; 27
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	78 81       	ld	r23, Y
    1d8a:	c5 5e       	subi	r28, 0xE5	; 229
    1d8c:	d2 40       	sbci	r29, 0x02	; 2
    1d8e:	ca 51       	subi	r28, 0x1A	; 26
    1d90:	dd 4f       	sbci	r29, 0xFD	; 253
    1d92:	e8 81       	ld	r30, Y
    1d94:	c6 5e       	subi	r28, 0xE6	; 230
    1d96:	d2 40       	sbci	r29, 0x02	; 2
    1d98:	c9 51       	subi	r28, 0x19	; 25
    1d9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9c:	f8 81       	ld	r31, Y
    1d9e:	c7 5e       	subi	r28, 0xE7	; 231
    1da0:	d2 40       	sbci	r29, 0x02	; 2
    1da2:	c8 51       	subi	r28, 0x18	; 24
    1da4:	dd 4f       	sbci	r29, 0xFD	; 253
    1da6:	28 81       	ld	r18, Y
    1da8:	c8 5e       	subi	r28, 0xE8	; 232
    1daa:	d2 40       	sbci	r29, 0x02	; 2
    1dac:	c7 51       	subi	r28, 0x17	; 23
    1dae:	dd 4f       	sbci	r29, 0xFD	; 253
    1db0:	38 81       	ld	r19, Y
    1db2:	c9 5e       	subi	r28, 0xE9	; 233
    1db4:	d2 40       	sbci	r29, 0x02	; 2
    1db6:	c6 51       	subi	r28, 0x16	; 22
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	48 81       	ld	r20, Y
    1dbc:	ca 5e       	subi	r28, 0xEA	; 234
    1dbe:	d2 40       	sbci	r29, 0x02	; 2
    1dc0:	c5 51       	subi	r28, 0x15	; 21
    1dc2:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc4:	58 81       	ld	r21, Y
    1dc6:	cb 5e       	subi	r28, 0xEB	; 235
    1dc8:	d2 40       	sbci	r29, 0x02	; 2
    1dca:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1dce:	a2 ff       	sbrs	r26, 2
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <report+0x238>
    1dd2:	a2 e0       	ldi	r26, 0x02	; 2
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <report+0x23c>
    1dd8:	a1 e0       	ldi	r26, 0x01	; 1
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	ff 93       	push	r31
    1de2:	ef 93       	push	r30
    1de4:	7f 93       	push	r23
    1de6:	6f 93       	push	r22
    1de8:	5f 93       	push	r21
    1dea:	4f 93       	push	r20
    1dec:	3f 93       	push	r19
    1dee:	2f 93       	push	r18
    1df0:	1f 92       	push	r1
    1df2:	ef 92       	push	r14
    1df4:	ce 01       	movw	r24, r28
    1df6:	8b 5e       	subi	r24, 0xEB	; 235
    1df8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dfa:	9f 93       	push	r25
    1dfc:	8f 93       	push	r24
    1dfe:	bf 93       	push	r27
    1e00:	af 93       	push	r26
    1e02:	8b 54       	subi	r24, 0x4B	; 75
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	9f 93       	push	r25
    1e08:	8f 93       	push	r24
    1e0a:	8e 01       	movw	r16, r28
    1e0c:	0f 5f       	subi	r16, 0xFF	; 255
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	1f 93       	push	r17
    1e12:	0f 93       	push	r16
    1e14:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1e18:	c8 01       	movw	r24, r16
    1e1a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e1e:	f8 01       	movw	r30, r16
    1e20:	01 90       	ld	r0, Z+
    1e22:	00 20       	and	r0, r0
    1e24:	e9 f7       	brne	.-6      	; 0x1e20 <report+0x280>
    1e26:	31 97       	sbiw	r30, 0x01	; 1
    1e28:	af 01       	movw	r20, r30
    1e2a:	40 1b       	sub	r20, r16
    1e2c:	51 0b       	sbc	r21, r17
    1e2e:	b8 01       	movw	r22, r16
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			break;
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	c5 c4       	rjmp	.+2442   	; 0x27c6 <report+0xc26>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	8b 5e       	subi	r24, 0xEB	; 235
    1e40:	9e 4f       	sbci	r25, 0xFE	; 254
    1e42:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1e46:	84 e3       	ldi	r24, 0x34	; 52
    1e48:	80 9f       	mul	r24, r16
    1e4a:	f0 01       	movw	r30, r0
    1e4c:	81 9f       	mul	r24, r17
    1e4e:	f0 0d       	add	r31, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	ed 5f       	subi	r30, 0xFD	; 253
    1e54:	f7 4d       	sbci	r31, 0xD7	; 215
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
    1e58:	0f 2e       	mov	r0, r31
    1e5a:	ff e1       	ldi	r31, 0x1F	; 31
    1e5c:	7f 2e       	mov	r7, r31
    1e5e:	f0 2d       	mov	r31, r0
    1e60:	78 0e       	add	r7, r24
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1e62:	ae 01       	movw	r20, r28
    1e64:	48 52       	subi	r20, 0x28	; 40
    1e66:	5d 4f       	sbci	r21, 0xFD	; 253
    1e68:	60 e1       	ldi	r22, 0x10	; 16
    1e6a:	87 2d       	mov	r24, r7
    1e6c:	0e 94 82 14 	call	0x2904	; 0x2904 <get_ROBOEncoder>
			if (retval == ERROR) {
    1e70:	83 36       	cpi	r24, 0x63	; 99
    1e72:	61 f4       	brne	.+24     	; 0x1e8c <report+0x2ec>
				encoderValue = 0x7FFFFFFF;
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	af ef       	ldi	r26, 0xFF	; 255
    1e7a:	bf e7       	ldi	r27, 0x7F	; 127
    1e7c:	c8 52       	subi	r28, 0x28	; 40
    1e7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e80:	88 83       	st	Y, r24
    1e82:	99 83       	std	Y+1, r25	; 0x01
    1e84:	aa 83       	std	Y+2, r26	; 0x02
    1e86:	bb 83       	std	Y+3, r27	; 0x03
    1e88:	c8 5d       	subi	r28, 0xD8	; 216
    1e8a:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1e8c:	c8 52       	subi	r28, 0x28	; 40
    1e8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e90:	68 81       	ld	r22, Y
    1e92:	79 81       	ldd	r23, Y+1	; 0x01
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	9b 81       	ldd	r25, Y+3	; 0x03
    1e98:	c8 5d       	subi	r28, 0xD8	; 216
    1e9a:	d2 40       	sbci	r29, 0x02	; 2
    1e9c:	2c e0       	ldi	r18, 0x0C	; 12
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodsi4>
    1ea8:	f2 2e       	mov	r15, r18
    1eaa:	e3 2e       	mov	r14, r19
    1eac:	d4 2e       	mov	r13, r20
    1eae:	c5 2e       	mov	r12, r21
			retval = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1eb0:	ae 01       	movw	r20, r28
    1eb2:	44 52       	subi	r20, 0x24	; 36
    1eb4:	5d 4f       	sbci	r21, 0xFD	; 253
    1eb6:	62 e1       	ldi	r22, 0x12	; 18
    1eb8:	87 2d       	mov	r24, r7
    1eba:	0e 94 82 14 	call	0x2904	; 0x2904 <get_ROBOEncoder>
			if (retval == ERROR) {
    1ebe:	83 36       	cpi	r24, 0x63	; 99
    1ec0:	61 f4       	brne	.+24     	; 0x1eda <report+0x33a>
				encoderSpeed = 0x7FFFFFFF;
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	af ef       	ldi	r26, 0xFF	; 255
    1ec8:	bf e7       	ldi	r27, 0x7F	; 127
    1eca:	c4 52       	subi	r28, 0x24	; 36
    1ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ece:	88 83       	st	Y, r24
    1ed0:	99 83       	std	Y+1, r25	; 0x01
    1ed2:	aa 83       	std	Y+2, r26	; 0x02
    1ed4:	bb 83       	std	Y+3, r27	; 0x03
    1ed6:	cc 5d       	subi	r28, 0xDC	; 220
    1ed8:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    1eda:	c4 52       	subi	r28, 0x24	; 36
    1edc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ede:	68 81       	ld	r22, Y
    1ee0:	79 81       	ldd	r23, Y+1	; 0x01
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	cc 5d       	subi	r28, 0xDC	; 220
    1ee8:	d2 40       	sbci	r29, 0x02	; 2
    1eea:	2c e0       	ldi	r18, 0x0C	; 12
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodsi4>
    1ef6:	b2 2e       	mov	r11, r18
    1ef8:	a3 2e       	mov	r10, r19
    1efa:	94 2e       	mov	r9, r20
    1efc:	85 2e       	mov	r8, r21
			retval = get_ROBOInt32(controller, ROBOREADCURRENT, &icurrents);
    1efe:	ae 01       	movw	r20, r28
    1f00:	40 52       	subi	r20, 0x20	; 32
    1f02:	5d 4f       	sbci	r21, 0xFD	; 253
    1f04:	61 e3       	ldi	r22, 0x31	; 49
    1f06:	87 2d       	mov	r24, r7
    1f08:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <get_ROBOInt32>
			if (retval == ERROR) {
    1f0c:	83 36       	cpi	r24, 0x63	; 99
    1f0e:	61 f4       	brne	.+24     	; 0x1f28 <report+0x388>
				icurrents = 0x7FFFFFFF;
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	9f ef       	ldi	r25, 0xFF	; 255
    1f14:	af ef       	ldi	r26, 0xFF	; 255
    1f16:	bf e7       	ldi	r27, 0x7F	; 127
    1f18:	c0 52       	subi	r28, 0x20	; 32
    1f1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1c:	88 83       	st	Y, r24
    1f1e:	99 83       	std	Y+1, r25	; 0x01
    1f20:	aa 83       	std	Y+2, r26	; 0x02
    1f22:	bb 83       	std	Y+3, r27	; 0x03
    1f24:	c0 5e       	subi	r28, 0xE0	; 224
    1f26:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1f28:	c0 52       	subi	r28, 0x20	; 32
    1f2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2c:	88 81       	ld	r24, Y
    1f2e:	99 81       	ldd	r25, Y+1	; 0x01
    1f30:	aa 81       	ldd	r26, Y+2	; 0x02
    1f32:	bb 81       	ldd	r27, Y+3	; 0x03
    1f34:	c0 5e       	subi	r28, 0xE0	; 224
    1f36:	d2 40       	sbci	r29, 0x02	; 2
    1f38:	cd 01       	movw	r24, r26
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	9c 01       	movw	r18, r24
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1f54:	44 e3       	ldi	r20, 0x34	; 52
    1f56:	40 9f       	mul	r20, r16
    1f58:	90 01       	movw	r18, r0
    1f5a:	41 9f       	mul	r20, r17
    1f5c:	30 0d       	add	r19, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	a9 01       	movw	r20, r18
    1f62:	42 5d       	subi	r20, 0xD2	; 210
    1f64:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_ROBOInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1f66:	f9 01       	movw	r30, r18
    1f68:	ed 5f       	subi	r30, 0xFD	; 253
    1f6a:	f7 4d       	sbci	r31, 0xD7	; 215
    1f6c:	21 81       	ldd	r18, Z+1	; 0x01
    1f6e:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f72:	32 ff       	sbrs	r19, 2
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <report+0x3dc>
    1f76:	32 e0       	ldi	r19, 0x02	; 2
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <report+0x3e0>
    1f7c:	31 e0       	ldi	r19, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	5f 93       	push	r21
    1f82:	4f 93       	push	r20
    1f84:	9f 93       	push	r25
    1f86:	8f 93       	push	r24
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	1f 92       	push	r1
    1f9a:	2f 93       	push	r18
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	8b 5e       	subi	r24, 0xEB	; 235
    1fa0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fa2:	9f 93       	push	r25
    1fa4:	8f 93       	push	r24
    1fa6:	6f 93       	push	r22
    1fa8:	3f 93       	push	r19
    1faa:	8e 57       	subi	r24, 0x7E	; 126
    1fac:	9f 4f       	sbci	r25, 0xFF	; 255
    1fae:	9f 93       	push	r25
    1fb0:	8f 93       	push	r24
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	0f 5f       	subi	r16, 0xFF	; 255
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	1f 93       	push	r17
    1fba:	0f 93       	push	r16
    1fbc:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	01 90       	ld	r0, Z+
    1fca:	00 20       	and	r0, r0
    1fcc:	e9 f7       	brne	.-6      	; 0x1fc8 <report+0x428>
    1fce:	31 97       	sbiw	r30, 0x01	; 1
    1fd0:	af 01       	movw	r20, r30
    1fd2:	40 1b       	sub	r20, r16
    1fd4:	51 0b       	sbc	r21, r17
    1fd6:	b8 01       	movw	r22, r16
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			break;
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	f1 c3       	rjmp	.+2018   	; 0x27c6 <report+0xc26>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
    1fea:	cc 51       	subi	r28, 0x1C	; 28
    1fec:	dd 4f       	sbci	r29, 0xFD	; 253
    1fee:	68 83       	st	Y, r22
    1ff0:	79 83       	std	Y+1, r23	; 0x01
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	9b 83       	std	Y+3, r25	; 0x03
    1ff6:	c4 5e       	subi	r28, 0xE4	; 228
    1ff8:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    2000:	f6 2e       	mov	r15, r22
    2002:	e7 2e       	mov	r14, r23
    2004:	d8 2e       	mov	r13, r24
    2006:	c9 2e       	mov	r12, r25
			t1 = get_temperature(1);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
    200e:	c8 50       	subi	r28, 0x08	; 8
    2010:	dd 4f       	sbci	r29, 0xFD	; 253
    2012:	68 83       	st	Y, r22
    2014:	c8 5f       	subi	r28, 0xF8	; 248
    2016:	d2 40       	sbci	r29, 0x02	; 2
    2018:	c7 50       	subi	r28, 0x07	; 7
    201a:	dd 4f       	sbci	r29, 0xFD	; 253
    201c:	78 83       	st	Y, r23
    201e:	c9 5f       	subi	r28, 0xF9	; 249
    2020:	d2 40       	sbci	r29, 0x02	; 2
    2022:	c6 50       	subi	r28, 0x06	; 6
    2024:	dd 4f       	sbci	r29, 0xFD	; 253
    2026:	88 83       	st	Y, r24
    2028:	ca 5f       	subi	r28, 0xFA	; 250
    202a:	d2 40       	sbci	r29, 0x02	; 2
    202c:	c5 50       	subi	r28, 0x05	; 5
    202e:	dd 4f       	sbci	r29, 0xFD	; 253
    2030:	98 83       	st	Y, r25
    2032:	cb 5f       	subi	r28, 0xFB	; 251
    2034:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    203c:	c4 50       	subi	r28, 0x04	; 4
    203e:	dd 4f       	sbci	r29, 0xFD	; 253
    2040:	68 83       	st	Y, r22
    2042:	cc 5f       	subi	r28, 0xFC	; 252
    2044:	d2 40       	sbci	r29, 0x02	; 2
    2046:	c3 50       	subi	r28, 0x03	; 3
    2048:	dd 4f       	sbci	r29, 0xFD	; 253
    204a:	78 83       	st	Y, r23
    204c:	cd 5f       	subi	r28, 0xFD	; 253
    204e:	d2 40       	sbci	r29, 0x02	; 2
    2050:	c2 50       	subi	r28, 0x02	; 2
    2052:	dd 4f       	sbci	r29, 0xFD	; 253
    2054:	88 83       	st	Y, r24
    2056:	ce 5f       	subi	r28, 0xFE	; 254
    2058:	d2 40       	sbci	r29, 0x02	; 2
    205a:	c1 50       	subi	r28, 0x01	; 1
    205c:	dd 4f       	sbci	r29, 0xFD	; 253
    205e:	98 83       	st	Y, r25
    2060:	cf 5f       	subi	r28, 0xFF	; 255
    2062:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
    206a:	b6 2e       	mov	r11, r22
    206c:	a7 2e       	mov	r10, r23
    206e:	98 2e       	mov	r9, r24
    2070:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    2078:	76 2e       	mov	r7, r22
    207a:	67 2e       	mov	r6, r23
    207c:	58 2e       	mov	r5, r24
    207e:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <get_temperature>
    2086:	c0 50       	subi	r28, 0x00	; 0
    2088:	dd 4f       	sbci	r29, 0xFD	; 253
    208a:	68 83       	st	Y, r22
    208c:	c0 50       	subi	r28, 0x00	; 0
    208e:	d3 40       	sbci	r29, 0x03	; 3
    2090:	cf 5f       	subi	r28, 0xFF	; 255
    2092:	dc 4f       	sbci	r29, 0xFC	; 252
    2094:	78 83       	st	Y, r23
    2096:	c1 50       	subi	r28, 0x01	; 1
    2098:	d3 40       	sbci	r29, 0x03	; 3
    209a:	38 2e       	mov	r3, r24
    209c:	29 2e       	mov	r2, r25
			get_time(currenttime);
    209e:	ce 01       	movw	r24, r28
    20a0:	8b 5e       	subi	r24, 0xEB	; 235
    20a2:	9e 4f       	sbci	r25, 0xFE	; 254
    20a4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    20a8:	24 e3       	ldi	r18, 0x34	; 52
    20aa:	20 9f       	mul	r18, r16
    20ac:	c0 01       	movw	r24, r0
    20ae:	21 9f       	mul	r18, r17
    20b0:	90 0d       	add	r25, r0
    20b2:	11 24       	eor	r1, r1
    20b4:	82 5d       	subi	r24, 0xD2	; 210
    20b6:	97 4d       	sbci	r25, 0xD7	; 215
    20b8:	cc 51       	subi	r28, 0x1C	; 28
    20ba:	dd 4f       	sbci	r29, 0xFD	; 253
    20bc:	28 81       	ld	r18, Y
    20be:	c4 5e       	subi	r28, 0xE4	; 228
    20c0:	d2 40       	sbci	r29, 0x02	; 2
    20c2:	cb 51       	subi	r28, 0x1B	; 27
    20c4:	dd 4f       	sbci	r29, 0xFD	; 253
    20c6:	38 81       	ld	r19, Y
    20c8:	c5 5e       	subi	r28, 0xE5	; 229
    20ca:	d2 40       	sbci	r29, 0x02	; 2
    20cc:	ca 51       	subi	r28, 0x1A	; 26
    20ce:	dd 4f       	sbci	r29, 0xFD	; 253
    20d0:	48 81       	ld	r20, Y
    20d2:	c6 5e       	subi	r28, 0xE6	; 230
    20d4:	d2 40       	sbci	r29, 0x02	; 2
    20d6:	c9 51       	subi	r28, 0x19	; 25
    20d8:	dd 4f       	sbci	r29, 0xFD	; 253
    20da:	58 81       	ld	r21, Y
    20dc:	c7 5e       	subi	r28, 0xE7	; 231
    20de:	d2 40       	sbci	r29, 0x02	; 2
    20e0:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    20e4:	62 ff       	sbrs	r22, 2
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <report+0x54e>
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <report+0x552>
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	9f 93       	push	r25
    20f4:	8f 93       	push	r24
    20f6:	2f 92       	push	r2
    20f8:	3f 92       	push	r3
    20fa:	cf 5f       	subi	r28, 0xFF	; 255
    20fc:	dc 4f       	sbci	r29, 0xFC	; 252
    20fe:	98 81       	ld	r25, Y
    2100:	c1 50       	subi	r28, 0x01	; 1
    2102:	d3 40       	sbci	r29, 0x03	; 3
    2104:	9f 93       	push	r25
    2106:	c0 50       	subi	r28, 0x00	; 0
    2108:	dd 4f       	sbci	r29, 0xFD	; 253
    210a:	88 81       	ld	r24, Y
    210c:	c0 50       	subi	r28, 0x00	; 0
    210e:	d3 40       	sbci	r29, 0x03	; 3
    2110:	8f 93       	push	r24
    2112:	4f 92       	push	r4
    2114:	5f 92       	push	r5
    2116:	6f 92       	push	r6
    2118:	7f 92       	push	r7
    211a:	8f 92       	push	r8
    211c:	9f 92       	push	r9
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	c1 50       	subi	r28, 0x01	; 1
    2124:	dd 4f       	sbci	r29, 0xFD	; 253
    2126:	98 81       	ld	r25, Y
    2128:	cf 5f       	subi	r28, 0xFF	; 255
    212a:	d2 40       	sbci	r29, 0x02	; 2
    212c:	9f 93       	push	r25
    212e:	c2 50       	subi	r28, 0x02	; 2
    2130:	dd 4f       	sbci	r29, 0xFD	; 253
    2132:	88 81       	ld	r24, Y
    2134:	ce 5f       	subi	r28, 0xFE	; 254
    2136:	d2 40       	sbci	r29, 0x02	; 2
    2138:	8f 93       	push	r24
    213a:	c3 50       	subi	r28, 0x03	; 3
    213c:	dd 4f       	sbci	r29, 0xFD	; 253
    213e:	98 81       	ld	r25, Y
    2140:	cd 5f       	subi	r28, 0xFD	; 253
    2142:	d2 40       	sbci	r29, 0x02	; 2
    2144:	9f 93       	push	r25
    2146:	c4 50       	subi	r28, 0x04	; 4
    2148:	dd 4f       	sbci	r29, 0xFD	; 253
    214a:	88 81       	ld	r24, Y
    214c:	cc 5f       	subi	r28, 0xFC	; 252
    214e:	d2 40       	sbci	r29, 0x02	; 2
    2150:	8f 93       	push	r24
    2152:	c5 50       	subi	r28, 0x05	; 5
    2154:	dd 4f       	sbci	r29, 0xFD	; 253
    2156:	98 81       	ld	r25, Y
    2158:	cb 5f       	subi	r28, 0xFB	; 251
    215a:	d2 40       	sbci	r29, 0x02	; 2
    215c:	9f 93       	push	r25
    215e:	c6 50       	subi	r28, 0x06	; 6
    2160:	dd 4f       	sbci	r29, 0xFD	; 253
    2162:	88 81       	ld	r24, Y
    2164:	ca 5f       	subi	r28, 0xFA	; 250
    2166:	d2 40       	sbci	r29, 0x02	; 2
    2168:	8f 93       	push	r24
    216a:	c7 50       	subi	r28, 0x07	; 7
    216c:	dd 4f       	sbci	r29, 0xFD	; 253
    216e:	98 81       	ld	r25, Y
    2170:	c9 5f       	subi	r28, 0xF9	; 249
    2172:	d2 40       	sbci	r29, 0x02	; 2
    2174:	9f 93       	push	r25
    2176:	c8 50       	subi	r28, 0x08	; 8
    2178:	dd 4f       	sbci	r29, 0xFD	; 253
    217a:	88 81       	ld	r24, Y
    217c:	c8 5f       	subi	r28, 0xF8	; 248
    217e:	d2 40       	sbci	r29, 0x02	; 2
    2180:	8f 93       	push	r24
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	5f 93       	push	r21
    218c:	4f 93       	push	r20
    218e:	3f 93       	push	r19
    2190:	2f 93       	push	r18
    2192:	ce 01       	movw	r24, r28
    2194:	8b 5e       	subi	r24, 0xEB	; 235
    2196:	9e 4f       	sbci	r25, 0xFE	; 254
    2198:	9f 93       	push	r25
    219a:	8f 93       	push	r24
    219c:	7f 93       	push	r23
    219e:	6f 93       	push	r22
    21a0:	80 5c       	subi	r24, 0xC0	; 192
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	9f 93       	push	r25
    21a6:	8f 93       	push	r24
    21a8:	8e 01       	movw	r16, r28
    21aa:	0f 5f       	subi	r16, 0xFF	; 255
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	1f 93       	push	r17
    21b0:	0f 93       	push	r16
    21b2:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			checksum_NMEA(outbuf);
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	c8 01       	movw	r24, r16
    21bc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    21c0:	f8 01       	movw	r30, r16
    21c2:	01 90       	ld	r0, Z+
    21c4:	00 20       	and	r0, r0
    21c6:	e9 f7       	brne	.-6      	; 0x21c2 <report+0x622>
    21c8:	31 97       	sbiw	r30, 0x01	; 1
    21ca:	af 01       	movw	r20, r30
    21cc:	40 1b       	sub	r20, r16
    21ce:	51 0b       	sbc	r21, r17
    21d0:	b8 01       	movw	r22, r16
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	66 e9       	ldi	r22, 0x96	; 150
    21dc:	76 e8       	ldi	r23, 0x86	; 134
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    21e4:	cc 51       	subi	r28, 0x1C	; 28
    21e6:	dd 4f       	sbci	r29, 0xFD	; 253
    21e8:	b8 80       	ld	r11, Y
    21ea:	c4 5e       	subi	r28, 0xE4	; 228
    21ec:	d2 40       	sbci	r29, 0x02	; 2
    21ee:	cb 51       	subi	r28, 0x1B	; 27
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	a8 80       	ld	r10, Y
    21f4:	c5 5e       	subi	r28, 0xE5	; 229
    21f6:	d2 40       	sbci	r29, 0x02	; 2
    21f8:	ca 51       	subi	r28, 0x1A	; 26
    21fa:	dd 4f       	sbci	r29, 0xFD	; 253
    21fc:	98 80       	ld	r9, Y
    21fe:	c6 5e       	subi	r28, 0xE6	; 230
    2200:	d2 40       	sbci	r29, 0x02	; 2
    2202:	c9 51       	subi	r28, 0x19	; 25
    2204:	dd 4f       	sbci	r29, 0xFD	; 253
    2206:	88 80       	ld	r8, Y
    2208:	c7 5e       	subi	r28, 0xE7	; 231
    220a:	d2 40       	sbci	r29, 0x02	; 2
    220c:	26 e6       	ldi	r18, 0x66	; 102
    220e:	36 e6       	ldi	r19, 0x66	; 102
    2210:	46 ee       	ldi	r20, 0xE6	; 230
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	6b 2d       	mov	r22, r11
    2216:	7a 2d       	mov	r23, r10
    2218:	89 2d       	mov	r24, r9
    221a:	98 2d       	mov	r25, r8
    221c:	0e 94 17 1c 	call	0x382e	; 0x382e <__mulsf3>
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	52 e4       	ldi	r21, 0x42	; 66
    2230:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__addsf3>
    2234:	9f 93       	push	r25
    2236:	8f 93       	push	r24
    2238:	7f 93       	push	r23
    223a:	6f 93       	push	r22
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	86 ea       	ldi	r24, 0xA6	; 166
    2246:	96 e8       	ldi	r25, 0x86	; 134
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	1f 93       	push	r17
    224e:	0f 93       	push	r16
    2250:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2254:	42 e0       	ldi	r20, 0x02	; 2
    2256:	b8 01       	movw	r22, r16
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	b1 c2       	rjmp	.+1378   	; 0x27c6 <report+0xc26>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2264:	ae 01       	movw	r20, r28
    2266:	4c 50       	subi	r20, 0x0C	; 12
    2268:	5d 4f       	sbci	r21, 0xFD	; 253
    226a:	be 01       	movw	r22, r28
    226c:	60 51       	subi	r22, 0x10	; 16
    226e:	7d 4f       	sbci	r23, 0xFD	; 253
    2270:	ce 01       	movw	r24, r28
    2272:	84 51       	subi	r24, 0x14	; 20
    2274:	9d 4f       	sbci	r25, 0xFD	; 253
    2276:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <get_orientation>
			get_time(currenttime);
    227a:	ce 01       	movw	r24, r28
    227c:	8b 5e       	subi	r24, 0xEB	; 235
    227e:	9e 4f       	sbci	r25, 0xFE	; 254
    2280:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    2284:	24 e3       	ldi	r18, 0x34	; 52
    2286:	20 9f       	mul	r18, r16
    2288:	c0 01       	movw	r24, r0
    228a:	21 9f       	mul	r18, r17
    228c:	90 0d       	add	r25, r0
    228e:	11 24       	eor	r1, r1
    2290:	82 5d       	subi	r24, 0xD2	; 210
    2292:	97 4d       	sbci	r25, 0xD7	; 215
    2294:	cc 50       	subi	r28, 0x0C	; 12
    2296:	dd 4f       	sbci	r29, 0xFD	; 253
    2298:	a8 81       	ld	r26, Y
    229a:	c4 5f       	subi	r28, 0xF4	; 244
    229c:	d2 40       	sbci	r29, 0x02	; 2
    229e:	cb 50       	subi	r28, 0x0B	; 11
    22a0:	dd 4f       	sbci	r29, 0xFD	; 253
    22a2:	b8 81       	ld	r27, Y
    22a4:	c5 5f       	subi	r28, 0xF5	; 245
    22a6:	d2 40       	sbci	r29, 0x02	; 2
    22a8:	ca 50       	subi	r28, 0x0A	; 10
    22aa:	dd 4f       	sbci	r29, 0xFD	; 253
    22ac:	18 81       	ld	r17, Y
    22ae:	c6 5f       	subi	r28, 0xF6	; 246
    22b0:	d2 40       	sbci	r29, 0x02	; 2
    22b2:	c9 50       	subi	r28, 0x09	; 9
    22b4:	dd 4f       	sbci	r29, 0xFD	; 253
    22b6:	08 81       	ld	r16, Y
    22b8:	c7 5f       	subi	r28, 0xF7	; 247
    22ba:	d2 40       	sbci	r29, 0x02	; 2
    22bc:	c0 51       	subi	r28, 0x10	; 16
    22be:	dd 4f       	sbci	r29, 0xFD	; 253
    22c0:	68 81       	ld	r22, Y
    22c2:	c0 5f       	subi	r28, 0xF0	; 240
    22c4:	d2 40       	sbci	r29, 0x02	; 2
    22c6:	cf 50       	subi	r28, 0x0F	; 15
    22c8:	dd 4f       	sbci	r29, 0xFD	; 253
    22ca:	78 81       	ld	r23, Y
    22cc:	c1 5f       	subi	r28, 0xF1	; 241
    22ce:	d2 40       	sbci	r29, 0x02	; 2
    22d0:	ce 50       	subi	r28, 0x0E	; 14
    22d2:	dd 4f       	sbci	r29, 0xFD	; 253
    22d4:	e8 81       	ld	r30, Y
    22d6:	c2 5f       	subi	r28, 0xF2	; 242
    22d8:	d2 40       	sbci	r29, 0x02	; 2
    22da:	cd 50       	subi	r28, 0x0D	; 13
    22dc:	dd 4f       	sbci	r29, 0xFD	; 253
    22de:	f8 81       	ld	r31, Y
    22e0:	c3 5f       	subi	r28, 0xF3	; 243
    22e2:	d2 40       	sbci	r29, 0x02	; 2
    22e4:	c4 51       	subi	r28, 0x14	; 20
    22e6:	dd 4f       	sbci	r29, 0xFD	; 253
    22e8:	28 81       	ld	r18, Y
    22ea:	cc 5e       	subi	r28, 0xEC	; 236
    22ec:	d2 40       	sbci	r29, 0x02	; 2
    22ee:	c3 51       	subi	r28, 0x13	; 19
    22f0:	dd 4f       	sbci	r29, 0xFD	; 253
    22f2:	38 81       	ld	r19, Y
    22f4:	cd 5e       	subi	r28, 0xED	; 237
    22f6:	d2 40       	sbci	r29, 0x02	; 2
    22f8:	c2 51       	subi	r28, 0x12	; 18
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	48 81       	ld	r20, Y
    22fe:	ce 5e       	subi	r28, 0xEE	; 238
    2300:	d2 40       	sbci	r29, 0x02	; 2
    2302:	c1 51       	subi	r28, 0x11	; 17
    2304:	dd 4f       	sbci	r29, 0xFD	; 253
    2306:	58 81       	ld	r21, Y
    2308:	cf 5e       	subi	r28, 0xEF	; 239
    230a:	d2 40       	sbci	r29, 0x02	; 2
    230c:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2310:	f2 fe       	sbrs	r15, 2
    2312:	05 c0       	rjmp	.+10     	; 0x231e <report+0x77e>
    2314:	68 94       	set
    2316:	ff 24       	eor	r15, r15
    2318:	f1 f8       	bld	r15, 1
    231a:	e1 2c       	mov	r14, r1
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <report+0x784>
    231e:	ff 24       	eor	r15, r15
    2320:	f3 94       	inc	r15
    2322:	e1 2c       	mov	r14, r1
    2324:	9f 93       	push	r25
    2326:	8f 93       	push	r24
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	bf 93       	push	r27
    232e:	af 93       	push	r26
    2330:	ff 93       	push	r31
    2332:	ef 93       	push	r30
    2334:	7f 93       	push	r23
    2336:	6f 93       	push	r22
    2338:	5f 93       	push	r21
    233a:	4f 93       	push	r20
    233c:	3f 93       	push	r19
    233e:	2f 93       	push	r18
    2340:	ce 01       	movw	r24, r28
    2342:	8b 5e       	subi	r24, 0xEB	; 235
    2344:	9e 4f       	sbci	r25, 0xFE	; 254
    2346:	9f 93       	push	r25
    2348:	8f 93       	push	r24
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	8a 52       	subi	r24, 0x2A	; 42
    2350:	9f 4f       	sbci	r25, 0xFF	; 255
    2352:	9f 93       	push	r25
    2354:	8f 93       	push	r24
    2356:	8e 01       	movw	r16, r28
    2358:	0f 5f       	subi	r16, 0xFF	; 255
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	1f 93       	push	r17
    235e:	0f 93       	push	r16
    2360:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			checksum_NMEA(outbuf);
    2364:	c8 01       	movw	r24, r16
    2366:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    236a:	f8 01       	movw	r30, r16
    236c:	01 90       	ld	r0, Z+
    236e:	00 20       	and	r0, r0
    2370:	e9 f7       	brne	.-6      	; 0x236c <report+0x7cc>
    2372:	31 97       	sbiw	r30, 0x01	; 1
    2374:	af 01       	movw	r20, r30
    2376:	40 1b       	sub	r20, r16
    2378:	51 0b       	sbc	r21, r17
    237a:	b8 01       	movw	r22, r16
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	6c eb       	ldi	r22, 0xBC	; 188
    2386:	76 e8       	ldi	r23, 0x86	; 134
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    238e:	c9 50       	subi	r28, 0x09	; 9
    2390:	dd 4f       	sbci	r29, 0xFD	; 253
    2392:	88 81       	ld	r24, Y
    2394:	c7 5f       	subi	r28, 0xF7	; 247
    2396:	d2 40       	sbci	r29, 0x02	; 2
    2398:	8f 93       	push	r24
    239a:	ca 50       	subi	r28, 0x0A	; 10
    239c:	dd 4f       	sbci	r29, 0xFD	; 253
    239e:	88 81       	ld	r24, Y
    23a0:	c6 5f       	subi	r28, 0xF6	; 246
    23a2:	d2 40       	sbci	r29, 0x02	; 2
    23a4:	8f 93       	push	r24
    23a6:	cb 50       	subi	r28, 0x0B	; 11
    23a8:	dd 4f       	sbci	r29, 0xFD	; 253
    23aa:	88 81       	ld	r24, Y
    23ac:	c5 5f       	subi	r28, 0xF5	; 245
    23ae:	d2 40       	sbci	r29, 0x02	; 2
    23b0:	8f 93       	push	r24
    23b2:	cc 50       	subi	r28, 0x0C	; 12
    23b4:	dd 4f       	sbci	r29, 0xFD	; 253
    23b6:	88 81       	ld	r24, Y
    23b8:	c4 5f       	subi	r28, 0xF4	; 244
    23ba:	d2 40       	sbci	r29, 0x02	; 2
    23bc:	8f 93       	push	r24
    23be:	cd 50       	subi	r28, 0x0D	; 13
    23c0:	dd 4f       	sbci	r29, 0xFD	; 253
    23c2:	88 81       	ld	r24, Y
    23c4:	c3 5f       	subi	r28, 0xF3	; 243
    23c6:	d2 40       	sbci	r29, 0x02	; 2
    23c8:	8f 93       	push	r24
    23ca:	ce 50       	subi	r28, 0x0E	; 14
    23cc:	dd 4f       	sbci	r29, 0xFD	; 253
    23ce:	88 81       	ld	r24, Y
    23d0:	c2 5f       	subi	r28, 0xF2	; 242
    23d2:	d2 40       	sbci	r29, 0x02	; 2
    23d4:	8f 93       	push	r24
    23d6:	cf 50       	subi	r28, 0x0F	; 15
    23d8:	dd 4f       	sbci	r29, 0xFD	; 253
    23da:	88 81       	ld	r24, Y
    23dc:	c1 5f       	subi	r28, 0xF1	; 241
    23de:	d2 40       	sbci	r29, 0x02	; 2
    23e0:	8f 93       	push	r24
    23e2:	c0 51       	subi	r28, 0x10	; 16
    23e4:	dd 4f       	sbci	r29, 0xFD	; 253
    23e6:	88 81       	ld	r24, Y
    23e8:	c0 5f       	subi	r28, 0xF0	; 240
    23ea:	d2 40       	sbci	r29, 0x02	; 2
    23ec:	8f 93       	push	r24
    23ee:	c1 51       	subi	r28, 0x11	; 17
    23f0:	dd 4f       	sbci	r29, 0xFD	; 253
    23f2:	88 81       	ld	r24, Y
    23f4:	cf 5e       	subi	r28, 0xEF	; 239
    23f6:	d2 40       	sbci	r29, 0x02	; 2
    23f8:	8f 93       	push	r24
    23fa:	c2 51       	subi	r28, 0x12	; 18
    23fc:	dd 4f       	sbci	r29, 0xFD	; 253
    23fe:	88 81       	ld	r24, Y
    2400:	ce 5e       	subi	r28, 0xEE	; 238
    2402:	d2 40       	sbci	r29, 0x02	; 2
    2404:	8f 93       	push	r24
    2406:	c3 51       	subi	r28, 0x13	; 19
    2408:	dd 4f       	sbci	r29, 0xFD	; 253
    240a:	88 81       	ld	r24, Y
    240c:	cd 5e       	subi	r28, 0xED	; 237
    240e:	d2 40       	sbci	r29, 0x02	; 2
    2410:	8f 93       	push	r24
    2412:	c4 51       	subi	r28, 0x14	; 20
    2414:	dd 4f       	sbci	r29, 0xFD	; 253
    2416:	88 81       	ld	r24, Y
    2418:	cc 5e       	subi	r28, 0xEC	; 236
    241a:	d2 40       	sbci	r29, 0x02	; 2
    241c:	8f 93       	push	r24
    241e:	ce 01       	movw	r24, r28
    2420:	85 5f       	subi	r24, 0xF5	; 245
    2422:	9d 4f       	sbci	r25, 0xFD	; 253
    2424:	9f 93       	push	r25
    2426:	8f 93       	push	r24
    2428:	1f 93       	push	r17
    242a:	0f 93       	push	r16
    242c:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	42 e0       	ldi	r20, 0x02	; 2
    2436:	b8 01       	movw	r22, r16
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    243e:	c3 c1       	rjmp	.+902    	; 0x27c6 <report+0xc26>

		case 'p':
			get_time(currenttime);
    2440:	ce 01       	movw	r24, r28
    2442:	8b 5e       	subi	r24, 0xEB	; 235
    2444:	9e 4f       	sbci	r25, 0xFE	; 254
    2446:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    244a:	9e 01       	movw	r18, r28
    244c:	2c 5a       	subi	r18, 0xAC	; 172
    244e:	3e 4f       	sbci	r19, 0xFE	; 254
    2450:	ae 01       	movw	r20, r28
    2452:	4d 5a       	subi	r20, 0xAD	; 173
    2454:	5e 4f       	sbci	r21, 0xFE	; 254
    2456:	be 01       	movw	r22, r28
    2458:	6e 5a       	subi	r22, 0xAE	; 174
    245a:	7e 4f       	sbci	r23, 0xFE	; 254
    245c:	ce 01       	movw	r24, r28
    245e:	8f 5a       	subi	r24, 0xAF	; 175
    2460:	9e 4f       	sbci	r25, 0xFE	; 254
    2462:	0e 94 c7 0b 	call	0x178e	; 0x178e <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2466:	24 e3       	ldi	r18, 0x34	; 52
    2468:	20 9f       	mul	r18, r16
    246a:	c0 01       	movw	r24, r0
    246c:	21 9f       	mul	r18, r17
    246e:	90 0d       	add	r25, r0
    2470:	11 24       	eor	r1, r1
    2472:	82 5d       	subi	r24, 0xD2	; 210
    2474:	97 4d       	sbci	r25, 0xD7	; 215
    2476:	cc 5a       	subi	r28, 0xAC	; 172
    2478:	de 4f       	sbci	r29, 0xFE	; 254
    247a:	58 81       	ld	r21, Y
    247c:	c4 55       	subi	r28, 0x54	; 84
    247e:	d1 40       	sbci	r29, 0x01	; 1
    2480:	cd 5a       	subi	r28, 0xAD	; 173
    2482:	de 4f       	sbci	r29, 0xFE	; 254
    2484:	48 81       	ld	r20, Y
    2486:	c3 55       	subi	r28, 0x53	; 83
    2488:	d1 40       	sbci	r29, 0x01	; 1
    248a:	ce 5a       	subi	r28, 0xAE	; 174
    248c:	de 4f       	sbci	r29, 0xFE	; 254
    248e:	38 81       	ld	r19, Y
    2490:	c2 55       	subi	r28, 0x52	; 82
    2492:	d1 40       	sbci	r29, 0x01	; 1
    2494:	cf 5a       	subi	r28, 0xAF	; 175
    2496:	de 4f       	sbci	r29, 0xFE	; 254
    2498:	28 81       	ld	r18, Y
    249a:	c1 55       	subi	r28, 0x51	; 81
    249c:	d1 40       	sbci	r29, 0x01	; 1
    249e:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    24a2:	62 ff       	sbrs	r22, 2
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <report+0x90c>
    24a6:	62 e0       	ldi	r22, 0x02	; 2
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <report+0x910>
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	9f 93       	push	r25
    24b2:	8f 93       	push	r24
    24b4:	1f 92       	push	r1
    24b6:	5f 93       	push	r21
    24b8:	1f 92       	push	r1
    24ba:	4f 93       	push	r20
    24bc:	1f 92       	push	r1
    24be:	3f 93       	push	r19
    24c0:	1f 92       	push	r1
    24c2:	2f 93       	push	r18
    24c4:	ce 01       	movw	r24, r28
    24c6:	8b 5e       	subi	r24, 0xEB	; 235
    24c8:	9e 4f       	sbci	r25, 0xFE	; 254
    24ca:	9f 93       	push	r25
    24cc:	8f 93       	push	r24
    24ce:	7f 93       	push	r23
    24d0:	6f 93       	push	r22
    24d2:	88 5f       	subi	r24, 0xF8	; 248
    24d4:	9e 4f       	sbci	r25, 0xFE	; 254
    24d6:	9f 93       	push	r25
    24d8:	8f 93       	push	r24
    24da:	8e 01       	movw	r16, r28
    24dc:	0f 5f       	subi	r16, 0xFF	; 255
    24de:	1f 4f       	sbci	r17, 0xFF	; 255
    24e0:	1f 93       	push	r17
    24e2:	0f 93       	push	r16
    24e4:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			checksum_NMEA(outbuf);
    24e8:	c8 01       	movw	r24, r16
    24ea:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24ee:	f8 01       	movw	r30, r16
    24f0:	01 90       	ld	r0, Z+
    24f2:	00 20       	and	r0, r0
    24f4:	e9 f7       	brne	.-6      	; 0x24f0 <report+0x950>
    24f6:	31 97       	sbiw	r30, 0x01	; 1
    24f8:	af 01       	movw	r20, r30
    24fa:	40 1b       	sub	r20, r16
    24fc:	51 0b       	sbc	r21, r17
    24fe:	b8 01       	movw	r22, r16
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2506:	cd 5a       	subi	r28, 0xAD	; 173
    2508:	de 4f       	sbci	r29, 0xFE	; 254
    250a:	88 81       	ld	r24, Y
    250c:	c3 55       	subi	r28, 0x53	; 83
    250e:	d1 40       	sbci	r29, 0x01	; 1
    2510:	1f 92       	push	r1
    2512:	8f 93       	push	r24
    2514:	ce 5a       	subi	r28, 0xAE	; 174
    2516:	de 4f       	sbci	r29, 0xFE	; 254
    2518:	88 81       	ld	r24, Y
    251a:	c2 55       	subi	r28, 0x52	; 82
    251c:	d1 40       	sbci	r29, 0x01	; 1
    251e:	1f 92       	push	r1
    2520:	8f 93       	push	r24
    2522:	ce 01       	movw	r24, r28
    2524:	82 5b       	subi	r24, 0xB2	; 178
    2526:	9d 4f       	sbci	r25, 0xFD	; 253
    2528:	9f 93       	push	r25
    252a:	8f 93       	push	r24
    252c:	1f 93       	push	r17
    252e:	0f 93       	push	r16
    2530:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	b8 01       	movw	r22, r16
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    253e:	cc 5a       	subi	r28, 0xAC	; 172
    2540:	de 4f       	sbci	r29, 0xFE	; 254
    2542:	88 81       	ld	r24, Y
    2544:	c4 55       	subi	r28, 0x54	; 84
    2546:	d1 40       	sbci	r29, 0x01	; 1
    2548:	1f 92       	push	r1
    254a:	8f 93       	push	r24
    254c:	cf 5a       	subi	r28, 0xAF	; 175
    254e:	de 4f       	sbci	r29, 0xFE	; 254
    2550:	88 81       	ld	r24, Y
    2552:	c1 55       	subi	r28, 0x51	; 81
    2554:	d1 40       	sbci	r29, 0x01	; 1
    2556:	1f 92       	push	r1
    2558:	8f 93       	push	r24
    255a:	ce 01       	movw	r24, r28
    255c:	8f 59       	subi	r24, 0x9F	; 159
    255e:	9d 4f       	sbci	r25, 0xFD	; 253
    2560:	9f 93       	push	r25
    2562:	8f 93       	push	r24
    2564:	1f 93       	push	r17
    2566:	0f 93       	push	r16
    2568:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			writestr_OLED(1, outbuf, 2);
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	42 e0       	ldi	r20, 0x02	; 2
    2572:	b8 01       	movw	r22, r16
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    257a:	25 c1       	rjmp	.+586    	; 0x27c6 <report+0xc26>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    257c:	ce 01       	movw	r24, r28
    257e:	8b 5e       	subi	r24, 0xEB	; 235
    2580:	9e 4f       	sbci	r25, 0xFE	; 254
    2582:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    2586:	24 e1       	ldi	r18, 0x14	; 20
    2588:	ae 01       	movw	r20, r28
    258a:	47 5d       	subi	r20, 0xD7	; 215
    258c:	5e 4f       	sbci	r21, 0xFE	; 254
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e5       	ldi	r24, 0x50	; 80
    2594:	0e 94 87 06 	call	0xd0e	; 0xd0e <read_FRAM>
			get_BOOTTIME(boottime);
    2598:	ce 01       	movw	r24, r28
    259a:	83 5c       	subi	r24, 0xC3	; 195
    259c:	9e 4f       	sbci	r25, 0xFE	; 254
    259e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    25a2:	24 e3       	ldi	r18, 0x34	; 52
    25a4:	20 9f       	mul	r18, r16
    25a6:	c0 01       	movw	r24, r0
    25a8:	21 9f       	mul	r18, r17
    25aa:	90 0d       	add	r25, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	82 5d       	subi	r24, 0xD2	; 210
    25b0:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    25b2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    25b6:	22 ff       	sbrs	r18, 2
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <report+0xa20>
    25ba:	22 e0       	ldi	r18, 0x02	; 2
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <report+0xa24>
    25c0:	21 e0       	ldi	r18, 0x01	; 1
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	ce 01       	movw	r24, r28
    25ca:	83 5c       	subi	r24, 0xC3	; 195
    25cc:	9e 4f       	sbci	r25, 0xFE	; 254
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	44 97       	sbiw	r24, 0x14	; 20
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	8e 01       	movw	r16, r28
    25da:	0b 5e       	subi	r16, 0xEB	; 235
    25dc:	1e 4f       	sbci	r17, 0xFE	; 254
    25de:	1f 93       	push	r17
    25e0:	0f 93       	push	r16
    25e2:	3f 93       	push	r19
    25e4:	2f 93       	push	r18
    25e6:	85 5b       	subi	r24, 0xB5	; 181
    25e8:	9e 4f       	sbci	r25, 0xFE	; 254
    25ea:	9f 93       	push	r25
    25ec:	8f 93       	push	r24
    25ee:	83 57       	subi	r24, 0x73	; 115
    25f0:	92 40       	sbci	r25, 0x02	; 2
    25f2:	7c 01       	movw	r14, r24
    25f4:	9f 93       	push	r25
    25f6:	8f 93       	push	r24
    25f8:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    25fc:	c7 01       	movw	r24, r14
    25fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2602:	f7 01       	movw	r30, r14
    2604:	01 90       	ld	r0, Z+
    2606:	00 20       	and	r0, r0
    2608:	e9 f7       	brne	.-6      	; 0x2604 <report+0xa64>
    260a:	31 97       	sbiw	r30, 0x01	; 1
    260c:	af 01       	movw	r20, r30
    260e:	4e 19       	sub	r20, r14
    2610:	5f 09       	sbc	r21, r15
    2612:	b7 01       	movw	r22, r14
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			writestr_OLED(1, "Time", 1);
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	68 ec       	ldi	r22, 0xC8	; 200
    261e:	76 e8       	ldi	r23, 0x86	; 134
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2626:	b8 01       	movw	r22, r16
    2628:	65 5f       	subi	r22, 0xF5	; 245
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	42 e0       	ldi	r20, 0x02	; 2
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	c6 c0       	rjmp	.+396    	; 0x27c6 <report+0xc26>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_ionpump>
    2640:	f6 2e       	mov	r15, r22
    2642:	e7 2e       	mov	r14, r23
    2644:	d8 2e       	mov	r13, r24
    2646:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_ionpump>
    264e:	b6 2e       	mov	r11, r22
    2650:	a7 2e       	mov	r10, r23
    2652:	98 2e       	mov	r9, r24
    2654:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2656:	ce 01       	movw	r24, r28
    2658:	8b 5e       	subi	r24, 0xEB	; 235
    265a:	9e 4f       	sbci	r25, 0xFE	; 254
    265c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2660:	24 e3       	ldi	r18, 0x34	; 52
    2662:	20 9f       	mul	r18, r16
    2664:	c0 01       	movw	r24, r0
    2666:	21 9f       	mul	r18, r17
    2668:	90 0d       	add	r25, r0
    266a:	11 24       	eor	r1, r1
    266c:	82 5d       	subi	r24, 0xD2	; 210
    266e:	97 4d       	sbci	r25, 0xD7	; 215
    2670:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2674:	22 ff       	sbrs	r18, 2
    2676:	03 c0       	rjmp	.+6      	; 0x267e <report+0xade>
    2678:	22 e0       	ldi	r18, 0x02	; 2
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <report+0xae2>
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	9f 93       	push	r25
    2684:	8f 93       	push	r24
    2686:	8f 92       	push	r8
    2688:	9f 92       	push	r9
    268a:	af 92       	push	r10
    268c:	bf 92       	push	r11
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	ce 01       	movw	r24, r28
    2698:	8b 5e       	subi	r24, 0xEB	; 235
    269a:	9e 4f       	sbci	r25, 0xFE	; 254
    269c:	9f 93       	push	r25
    269e:	8f 93       	push	r24
    26a0:	3f 93       	push	r19
    26a2:	2f 93       	push	r18
    26a4:	84 58       	subi	r24, 0x84	; 132
    26a6:	9e 4f       	sbci	r25, 0xFE	; 254
    26a8:	9f 93       	push	r25
    26aa:	8f 93       	push	r24
    26ac:	8e 01       	movw	r16, r28
    26ae:	0f 5f       	subi	r16, 0xFF	; 255
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	1f 93       	push	r17
    26b4:	0f 93       	push	r16
    26b6:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			checksum_NMEA(outbuf);
    26ba:	c8 01       	movw	r24, r16
    26bc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    26c0:	f8 01       	movw	r30, r16
    26c2:	01 90       	ld	r0, Z+
    26c4:	00 20       	and	r0, r0
    26c6:	e9 f7       	brne	.-6      	; 0x26c2 <report+0xb22>
    26c8:	31 97       	sbiw	r30, 0x01	; 1
    26ca:	af 01       	movw	r20, r30
    26cc:	40 1b       	sub	r20, r16
    26ce:	51 0b       	sbc	r21, r17
    26d0:	b8 01       	movw	r22, r16
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	6d ec       	ldi	r22, 0xCD	; 205
    26dc:	76 e8       	ldi	r23, 0x86	; 134
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	ce 01       	movw	r24, r28
    26f6:	86 54       	subi	r24, 0x46	; 70
    26f8:	9d 4f       	sbci	r25, 0xFD	; 253
    26fa:	9f 93       	push	r25
    26fc:	8f 93       	push	r24
    26fe:	1f 93       	push	r17
    2700:	0f 93       	push	r16
    2702:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2706:	42 e0       	ldi	r20, 0x02	; 2
    2708:	b8 01       	movw	r22, r16
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	58 c0       	rjmp	.+176    	; 0x27c6 <report+0xc26>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2716:	ce 01       	movw	r24, r28
    2718:	86 5f       	subi	r24, 0xF6	; 246
    271a:	9e 4f       	sbci	r25, 0xFE	; 254
    271c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
			get_time(currenttime);
    2720:	ce 01       	movw	r24, r28
    2722:	8b 5e       	subi	r24, 0xEB	; 235
    2724:	9e 4f       	sbci	r25, 0xFE	; 254
    2726:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    272a:	24 e3       	ldi	r18, 0x34	; 52
    272c:	20 9f       	mul	r18, r16
    272e:	c0 01       	movw	r24, r0
    2730:	21 9f       	mul	r18, r17
    2732:	90 0d       	add	r25, r0
    2734:	11 24       	eor	r1, r1
    2736:	82 5d       	subi	r24, 0xD2	; 210
    2738:	97 4d       	sbci	r25, 0xD7	; 215
    273a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    273e:	22 ff       	sbrs	r18, 2
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <report+0xba8>
    2742:	22 e0       	ldi	r18, 0x02	; 2
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	02 c0       	rjmp	.+4      	; 0x274c <report+0xbac>
    2748:	21 e0       	ldi	r18, 0x01	; 1
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	9f 93       	push	r25
    274e:	8f 93       	push	r24
    2750:	ce 01       	movw	r24, r28
    2752:	86 5f       	subi	r24, 0xF6	; 246
    2754:	9e 4f       	sbci	r25, 0xFE	; 254
    2756:	9f 93       	push	r25
    2758:	8f 93       	push	r24
    275a:	0b 96       	adiw	r24, 0x0b	; 11
    275c:	9f 93       	push	r25
    275e:	8f 93       	push	r24
    2760:	3f 93       	push	r19
    2762:	2f 93       	push	r18
    2764:	8e 54       	subi	r24, 0x4E	; 78
    2766:	9e 4f       	sbci	r25, 0xFE	; 254
    2768:	9f 93       	push	r25
    276a:	8f 93       	push	r24
    276c:	8e 01       	movw	r16, r28
    276e:	0f 5f       	subi	r16, 0xFF	; 255
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	1f 93       	push	r17
    2774:	0f 93       	push	r16
    2776:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
			checksum_NMEA(outbuf);
    277a:	c8 01       	movw	r24, r16
    277c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2780:	f8 01       	movw	r30, r16
    2782:	01 90       	ld	r0, Z+
    2784:	00 20       	and	r0, r0
    2786:	e9 f7       	brne	.-6      	; 0x2782 <report+0xbe2>
    2788:	31 97       	sbiw	r30, 0x01	; 1
    278a:	af 01       	movw	r20, r30
    278c:	40 1b       	sub	r20, r16
    278e:	51 0b       	sbc	r21, r17
    2790:	b8 01       	movw	r22, r16
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	63 e4       	ldi	r22, 0x43	; 67
    279c:	76 e8       	ldi	r23, 0x86	; 134
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			get_VERSION(outbuf);
    27a4:	c8 01       	movw	r24, r16
    27a6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27aa:	42 e0       	ldi	r20, 0x02	; 2
    27ac:	b8 01       	movw	r22, r16
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 02 0b 	call	0x1604	; 0x1604 <writestr_OLED>
			break;
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	06 c0       	rjmp	.+12     	; 0x27c6 <report+0xc26>

		default:
			printError(ERR_BADOBJECT, "report: invalid object");
    27ba:	6d ed       	ldi	r22, 0xDD	; 221
    27bc:	76 e8       	ldi	r23, 0x86	; 134
    27be:	89 ec       	ldi	r24, 0xC9	; 201
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			break;
	}

	return(GREATERPROMPT);

}
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	cf 5f       	subi	r28, 0xFF	; 255
    27ca:	dc 4f       	sbci	r29, 0xFC	; 252
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
    27e0:	bf 90       	pop	r11
    27e2:	af 90       	pop	r10
    27e4:	9f 90       	pop	r9
    27e6:	8f 90       	pop	r8
    27e8:	7f 90       	pop	r7
    27ea:	6f 90       	pop	r6
    27ec:	5f 90       	pop	r5
    27ee:	4f 90       	pop	r4
    27f0:	3f 90       	pop	r3
    27f2:	2f 90       	pop	r2
    27f4:	08 95       	ret

000027f6 <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{
    27f6:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2800:	1b c0       	rjmp	.+54     	; 0x2838 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2802:	fd 01       	movw	r30, r26
    2804:	e4 0f       	add	r30, r20
    2806:	f5 1f       	adc	r31, r21
    2808:	20 81       	ld	r18, Z
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	32 2f       	mov	r19, r18
    280e:	22 27       	eor	r18, r18
    2810:	82 27       	eor	r24, r18
    2812:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	0c c0       	rjmp	.+24     	; 0x2830 <crc16+0x3a>
			if (crc & 0x8000) {
    2818:	99 23       	and	r25, r25
    281a:	3c f4       	brge	.+14     	; 0x282a <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	31 e2       	ldi	r19, 0x21	; 33
    2822:	83 27       	eor	r24, r19
    2824:	30 e1       	ldi	r19, 0x10	; 16
    2826:	93 27       	eor	r25, r19
    2828:	02 c0       	rjmp	.+4      	; 0x282e <crc16+0x38>
			} else {
				crc = crc << 1;
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    282e:	2f 5f       	subi	r18, 0xFF	; 255
    2830:	28 30       	cpi	r18, 0x08	; 8
    2832:	90 f3       	brcs	.-28     	; 0x2818 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2834:	4f 5f       	subi	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	46 17       	cp	r20, r22
    283a:	57 07       	cpc	r21, r23
    283c:	10 f3       	brcs	.-60     	; 0x2802 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
    283e:	08 95       	ret

00002840 <ROBOGoTo>:
	Returns:
		ERROR if an error occured
		NOERROR on success
------------------------------------------------------------------------------*/
uint8_t ROBOGoTo(uint8_t controller, int32_t newPosition)
{
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	65 97       	sbiw	r28, 0x15	; 21
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	tbuf[0] = controller;
    284e:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2850:	81 e4       	ldi	r24, 0x41	; 65
    2852:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2854:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2856:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2858:	80 e2       	ldi	r24, 0x20	; 32
    285a:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    285c:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    285e:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2860:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2862:	90 e4       	ldi	r25, 0x40	; 64
    2864:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2866:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2868:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    286a:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    286c:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    286e:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2870:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2872:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2874:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2876:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2878:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    287a:	63 e1       	ldi	r22, 0x13	; 19
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	ce 01       	movw	r24, r28
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2886:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2888:	8d 8b       	std	Y+21, r24	; 0x15
	send_USART(1, tbuf, 21);
    288a:	45 e1       	ldi	r20, 0x15	; 21
    288c:	be 01       	movw	r22, r28
    288e:	6f 5f       	subi	r22, 0xFF	; 255
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>

	recv1_buf.data[0] = 0x00;	// Set up receiving buffer
    2898:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.nbytes = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    28a2:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    28a6:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	start_TCB0(1);				// Start 1 ms ticks timer
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Data received
    28b2:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	81 f0       	breq	.+32     	; 0x28da <ROBOGoTo+0x9a>
			break;
		}
		if (ticks > 50) {		// 4 ms just barely works at 38400 baud
    28ba:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    28be:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    28c2:	c3 97       	sbiw	r24, 0x33	; 51
    28c4:	b0 f3       	brcs	.-20     	; 0x28b2 <ROBOGoTo+0x72>
			stop_TCB0();
    28c6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "Timeout ROBOGoTo reply");
    28ca:	67 e7       	ldi	r22, 0x77	; 119
    28cc:	78 e8       	ldi	r23, 0x88	; 136
    28ce:	8f e2       	ldi	r24, 0x2F	; 47
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    28d6:	83 e6       	ldi	r24, 0x63	; 99
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <ROBOGoTo+0xb8>
		}
	}
	stop_TCB0();
    28da:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>

	if (recv1_buf.data[0] != 0xFF) {
    28de:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <recv1_buf>
    28e2:	8f 3f       	cpi	r24, 0xFF	; 255
    28e4:	41 f0       	breq	.+16     	; 0x28f6 <ROBOGoTo+0xb6>
		printError(ERR_MTRTIMEOUT, "Bad reply (not 0xFF) ROBOGoTo");		
    28e6:	6e e8       	ldi	r22, 0x8E	; 142
    28e8:	78 e8       	ldi	r23, 0x88	; 136
    28ea:	8f e2       	ldi	r24, 0x2F	; 47
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    28f2:	83 e6       	ldi	r24, 0x63	; 99
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <ROBOGoTo+0xb8>
	}

	return(NOERROR);
    28f6:	80 e0       	ldi	r24, 0x00	; 0
}
    28f8:	65 96       	adiw	r28, 0x15	; 21
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <get_ROBOEncoder>:
			Bit1 - Direction (0=forward, 1-backwards)
			Bit2 - Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved" and masked out here since Bit7 returns 1
------------------------------------------------------------------------------*/
uint8_t get_ROBOEncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	27 97       	sbiw	r28, 0x07	; 7
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;
    291c:	97 e0       	ldi	r25, 0x07	; 7
    291e:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2922:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2926:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    292a:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    292c:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    292e:	42 e0       	ldi	r20, 0x02	; 2
    2930:	be 01       	movw	r22, r28
    2932:	6f 5f       	subi	r22, 0xFF	; 255
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
	start_TCB0(1);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <start_TCB0>
	while (recv1_buf.done == NO) {
    2944:	11 c0       	rjmp	.+34     	; 0x2968 <get_ROBOEncoder+0x64>
		asm("nop");
    2946:	00 00       	nop
		if (ticks > 50) {
    2948:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    294c:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2950:	c3 97       	sbiw	r24, 0x33	; 51
    2952:	50 f0       	brcs	.+20     	; 0x2968 <get_ROBOEncoder+0x64>
			stop_TCB0();
    2954:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>
			printError(ERR_MTRENCREAD, "ROBOEncoder read timeout");
    2958:	6c ea       	ldi	r22, 0xAC	; 172
    295a:	78 e8       	ldi	r23, 0x88	; 136
    295c:	80 e3       	ldi	r24, 0x30	; 48
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2964:	83 e6       	ldi	r24, 0x63	; 99
    2966:	74 c0       	rjmp	.+232    	; 0x2a50 <get_ROBOEncoder+0x14c>

	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);
	start_TCB0(1);
	while (recv1_buf.done == NO) {
    2968:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    296c:	88 23       	and	r24, r24
    296e:	59 f3       	breq	.-42     	; 0x2946 <get_ROBOEncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRENCREAD, "ROBOEncoder read timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    2970:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2974:	e2 e1       	ldi	r30, 0x12	; 18
    2976:	fa e2       	ldi	r31, 0x2A	; 42
    2978:	e5 80       	ldd	r14, Z+5	; 0x05
    297a:	f1 2c       	mov	r15, r1
    297c:	fe 2c       	mov	r15, r14
    297e:	ee 24       	eor	r14, r14
    2980:	86 81       	ldd	r24, Z+6	; 0x06
    2982:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {
    2984:	22 e0       	ldi	r18, 0x02	; 2
    2986:	0e c0       	rjmp	.+28     	; 0x29a4 <get_ROBOEncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2988:	82 2f       	mov	r24, r18
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	fc 01       	movw	r30, r24
    298e:	e0 5f       	subi	r30, 0xF0	; 240
    2990:	f5 4d       	sbci	r31, 0xD5	; 213
    2992:	30 81       	ld	r19, Z
    2994:	e1 e0       	ldi	r30, 0x01	; 1
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	ec 0f       	add	r30, r28
    299a:	fd 1f       	adc	r31, r29
    299c:	e8 0f       	add	r30, r24
    299e:	f9 1f       	adc	r31, r25
    29a0:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {
    29a2:	2f 5f       	subi	r18, 0xFF	; 255
    29a4:	27 30       	cpi	r18, 0x07	; 7
    29a6:	80 f3       	brcs	.-32     	; 0x2988 <get_ROBOEncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    29a8:	67 e0       	ldi	r22, 0x07	; 7
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <crc16>

	if (crcReceived != crcExpected) {
    29b4:	e8 16       	cp	r14, r24
    29b6:	f9 06       	cpc	r15, r25
    29b8:	71 f0       	breq	.+28     	; 0x29d6 <get_ROBOEncoder+0xd2>
		*value = 0;
    29ba:	d8 01       	movw	r26, r16
    29bc:	1d 92       	st	X+, r1
    29be:	1d 92       	st	X+, r1
    29c0:	1d 92       	st	X+, r1
    29c2:	1c 92       	st	X, r1
    29c4:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "ROBOEncoder CRC error");
    29c6:	65 ec       	ldi	r22, 0xC5	; 197
    29c8:	78 e8       	ldi	r23, 0x88	; 136
    29ca:	81 e3       	ldi	r24, 0x31	; 49
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    29d2:	83 e6       	ldi	r24, 0x63	; 99
    29d4:	3d c0       	rjmp	.+122    	; 0x2a50 <get_ROBOEncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    29d6:	22 e1       	ldi	r18, 0x12	; 18
    29d8:	3a e2       	ldi	r19, 0x2A	; 42
    29da:	f9 01       	movw	r30, r18
    29dc:	80 81       	ld	r24, Z
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e0       	ldi	r26, 0x00	; 0
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	78 2f       	mov	r23, r24
    29e6:	66 27       	eor	r22, r22
    29e8:	55 27       	eor	r21, r21
    29ea:	44 27       	eor	r20, r20
    29ec:	d8 01       	movw	r26, r16
    29ee:	4d 93       	st	X+, r20
    29f0:	5d 93       	st	X+, r21
    29f2:	6d 93       	st	X+, r22
    29f4:	7c 93       	st	X, r23
    29f6:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	89 2f       	mov	r24, r25
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	dc 01       	movw	r26, r24
    2a04:	99 27       	eor	r25, r25
    2a06:	88 27       	eor	r24, r24
    2a08:	84 2b       	or	r24, r20
    2a0a:	95 2b       	or	r25, r21
    2a0c:	a6 2b       	or	r26, r22
    2a0e:	b7 2b       	or	r27, r23
    2a10:	f8 01       	movw	r30, r16
    2a12:	80 83       	st	Z, r24
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	a2 83       	std	Z+2, r26	; 0x02
    2a18:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2a1a:	f9 01       	movw	r30, r18
    2a1c:	42 81       	ldd	r20, Z+2	; 0x02
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	76 2f       	mov	r23, r22
    2a26:	65 2f       	mov	r22, r21
    2a28:	54 2f       	mov	r21, r20
    2a2a:	44 27       	eor	r20, r20
    2a2c:	84 2b       	or	r24, r20
    2a2e:	95 2b       	or	r25, r21
    2a30:	a6 2b       	or	r26, r22
    2a32:	b7 2b       	or	r27, r23
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2a3e:	f9 01       	movw	r30, r18
    2a40:	23 81       	ldd	r18, Z+3	; 0x03
    2a42:	82 2b       	or	r24, r18
    2a44:	f8 01       	movw	r30, r16
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0

}
    2a50:	27 96       	adiw	r28, 0x07	; 7
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	08 95       	ret

00002a64 <ROBOMove>:

	Output:
		ERROR if an unknown motor designator (A, B, C, or a, b, c) is read.
------------------------------------------------------------------------------*/
uint8_t ROBOMove(uint8_t cstack)
{
    2a64:	ff 92       	push	r15
    2a66:	0f 93       	push	r16
    2a68:	1f 93       	push	r17
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <ROBOMove+0xc>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <ROBOMove+0xe>
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2a76:	08 2f       	mov	r16, r24
    2a78:	10 e0       	ldi	r17, 0x00	; 0
    2a7a:	84 e3       	ldi	r24, 0x34	; 52
    2a7c:	80 9f       	mul	r24, r16
    2a7e:	f0 01       	movw	r30, r0
    2a80:	81 9f       	mul	r24, r17
    2a82:	f0 0d       	add	r31, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	ed 5f       	subi	r30, 0xFD	; 253
    2a88:	f7 4d       	sbci	r31, 0xD7	; 215
    2a8a:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2a8c:	81 34       	cpi	r24, 0x41	; 65
    2a8e:	00 f1       	brcs	.+64     	; 0x2ad0 <ROBOMove+0x6c>
    2a90:	84 34       	cpi	r24, 0x44	; 68
    2a92:	28 f0       	brcs	.+10     	; 0x2a9e <ROBOMove+0x3a>
    2a94:	9f e9       	ldi	r25, 0x9F	; 159
    2a96:	98 0f       	add	r25, r24
    2a98:	93 30       	cpi	r25, 0x03	; 3
    2a9a:	58 f0       	brcs	.+22     	; 0x2ab2 <ROBOMove+0x4e>
    2a9c:	19 c0       	rjmp	.+50     	; 0x2ad0 <ROBOMove+0x6c>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2a9e:	0f 2e       	mov	r0, r31
    2aa0:	ff e3       	ldi	r31, 0x3F	; 63
    2aa2:	ff 2e       	mov	r15, r31
    2aa4:	f0 2d       	mov	r31, r0
    2aa6:	f8 0e       	add	r15, r24
			currentPosition = 0;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	1a 82       	std	Y+2, r1	; 0x02
    2aac:	1b 82       	std	Y+3, r1	; 0x03
    2aae:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2ab0:	17 c0       	rjmp	.+46     	; 0x2ae0 <ROBOMove+0x7c>
		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2ab2:	0f 2e       	mov	r0, r31
    2ab4:	ff e1       	ldi	r31, 0x1F	; 31
    2ab6:	ff 2e       	mov	r15, r31
    2ab8:	f0 2d       	mov	r31, r0
    2aba:	f8 0e       	add	r15, r24
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2abc:	ae 01       	movw	r20, r28
    2abe:	4f 5f       	subi	r20, 0xFF	; 255
    2ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac2:	60 e1       	ldi	r22, 0x10	; 16
    2ac4:	8f 2d       	mov	r24, r15
    2ac6:	0e 94 82 14 	call	0x2904	; 0x2904 <get_ROBOEncoder>
			if (retval == ERROR) {
    2aca:	83 36       	cpi	r24, 0x63	; 99
    2acc:	49 f4       	brne	.+18     	; 0x2ae0 <ROBOMove+0x7c>
    2ace:	26 c0       	rjmp	.+76     	; 0x2b1c <ROBOMove+0xb8>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "ROBOMove invalid motor designator");
    2ad0:	6b ed       	ldi	r22, 0xDB	; 219
    2ad2:	78 e8       	ldi	r23, 0x88	; 136
    2ad4:	8d e2       	ldi	r24, 0x2D	; 45
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2adc:	83 e6       	ldi	r24, 0x63	; 99
    2ade:	1f c0       	rjmp	.+62     	; 0x2b1e <ROBOMove+0xba>
			break;	
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2ae0:	24 e3       	ldi	r18, 0x34	; 52
    2ae2:	20 9f       	mul	r18, r16
    2ae4:	c0 01       	movw	r24, r0
    2ae6:	21 9f       	mul	r18, r17
    2ae8:	90 0d       	add	r25, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	8b 5f       	subi	r24, 0xFB	; 251
    2aee:	97 4d       	sbci	r25, 0xD7	; 215
    2af0:	0e 94 bb 20 	call	0x4176	; 0x4176 <atol>
    2af4:	9b 01       	movw	r18, r22
    2af6:	ac 01       	movw	r20, r24
    2af8:	ac e0       	ldi	r26, 0x0C	; 12
    2afa:	b1 e0       	ldi	r27, 0x01	; 1
    2afc:	0e 94 3a 20 	call	0x4074	; 0x4074 <__muluhisi3>
    2b00:	09 81       	ldd	r16, Y+1	; 0x01
    2b02:	1a 81       	ldd	r17, Y+2	; 0x02
    2b04:	2b 81       	ldd	r18, Y+3	; 0x03
    2b06:	3c 81       	ldd	r19, Y+4	; 0x04
    2b08:	ab 01       	movw	r20, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	40 0f       	add	r20, r16
    2b0e:	51 1f       	adc	r21, r17
    2b10:	62 1f       	adc	r22, r18
    2b12:	73 1f       	adc	r23, r19

	return(ROBOGoTo(controller, newPosition));
    2b14:	8f 2d       	mov	r24, r15
    2b16:	0e 94 20 14 	call	0x2840	; 0x2840 <ROBOGoTo>
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <ROBOMove+0xba>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2b1c:	83 e6       	ldi	r24, 0x63	; 99

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);

	return(ROBOGoTo(controller, newPosition));

}
    2b1e:	24 96       	adiw	r28, 0x04	; 4
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	ff 90       	pop	r15
    2b2e:	08 95       	ret

00002b30 <get_ROBOFloat>:
	Returns:
		ERROR - on error
		NOERROR - no error
------------------------------------------------------------------------------*/
uint8_t get_ROBOFloat(uint8_t controller, uint8_t command, float *value)
{
    2b30:	af 92       	push	r10
    2b32:	bf 92       	push	r11
    2b34:	cf 92       	push	r12
    2b36:	df 92       	push	r13
    2b38:	ef 92       	push	r14
    2b3a:	ff 92       	push	r15
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <get_ROBOFloat+0x16>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <get_ROBOFloat+0x18>
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	a8 2e       	mov	r10, r24
    2b4e:	b6 2e       	mov	r11, r22
    2b50:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;
    2b52:	84 e0       	ldi	r24, 0x04	; 4
    2b54:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2b58:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2b5c:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2b60:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b62:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    2b64:	42 e0       	ldi	r20, 0x02	; 2
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>

	start_TCB0(1);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {
    2b7a:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	81 f0       	breq	.+32     	; 0x2ba2 <get_ROBOFloat+0x72>
			break;
		}
		if (ticks > 50) {
    2b82:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2b86:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2b8a:	c3 97       	sbiw	r24, 0x33	; 51
    2b8c:	b0 f3       	brcs	.-20     	; 0x2b7a <get_ROBOFloat+0x4a>
			stop_TCB0();
    2b8e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>
			printError(ERR_MTRENCREAD, "ROBOFloat timeout");
    2b92:	6d ef       	ldi	r22, 0xFD	; 253
    2b94:	78 e8       	ldi	r23, 0x88	; 136
    2b96:	80 e3       	ldi	r24, 0x30	; 48
    2b98:	91 e0       	ldi	r25, 0x01	; 1
    2b9a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2b9e:	83 e6       	ldi	r24, 0x63	; 99
    2ba0:	36 c0       	rjmp	.+108    	; 0x2c0e <get_ROBOFloat+0xde>
		}
	}
	stop_TCB0();
    2ba2:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2ba6:	e2 e1       	ldi	r30, 0x12	; 18
    2ba8:	fa e2       	ldi	r31, 0x2A	; 42
    2baa:	90 81       	ld	r25, Z
    2bac:	c9 2e       	mov	r12, r25
    2bae:	d1 2c       	mov	r13, r1
    2bb0:	dc 2c       	mov	r13, r12
    2bb2:	cc 24       	eor	r12, r12
    2bb4:	81 81       	ldd	r24, Z+1	; 0x01
    2bb6:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2bb8:	02 81       	ldd	r16, Z+2	; 0x02
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	10 2f       	mov	r17, r16
    2bbe:	00 27       	eor	r16, r16
    2bc0:	23 81       	ldd	r18, Z+3	; 0x03
    2bc2:	02 2b       	or	r16, r18
	recv1_buf.data[2] = recv1_buf.data[0];
    2bc4:	92 83       	std	Z+2, r25	; 0x02
	recv1_buf.data[3] = recv1_buf.data[1];
    2bc6:	83 83       	std	Z+3, r24	; 0x03
	recv1_buf.data[0] = controller;
    2bc8:	a0 82       	st	Z, r10
	recv1_buf.data[1] = command;
    2bca:	b1 82       	std	Z+1, r11	; 0x01
	crcExpected = crc16(recv1_buf.data, 4);
    2bcc:	64 e0       	ldi	r22, 0x04	; 4
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <crc16>
	if (crcExpected != crcReceived) {
    2bd6:	08 17       	cp	r16, r24
    2bd8:	19 07       	cpc	r17, r25
    2bda:	41 f0       	breq	.+16     	; 0x2bec <get_ROBOFloat+0xbc>
		printError(ERR_MTRENCCRC, "ROBOFloat CRC error");
    2bdc:	6f e0       	ldi	r22, 0x0F	; 15
    2bde:	79 e8       	ldi	r23, 0x89	; 137
    2be0:	81 e3       	ldi	r24, 0x31	; 49
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    2be8:	83 e6       	ldi	r24, 0x63	; 99
    2bea:	11 c0       	rjmp	.+34     	; 0x2c0e <get_ROBOFloat+0xde>
	} else {
		*value = ((float) tempval / 10.0);
    2bec:	b6 01       	movw	r22, r12
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__floatunsisf>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e2       	ldi	r20, 0x20	; 32
    2bfc:	51 e4       	ldi	r21, 0x41	; 65
    2bfe:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divsf3>
    2c02:	f7 01       	movw	r30, r14
    2c04:	60 83       	st	Z, r22
    2c06:	71 83       	std	Z+1, r23	; 0x01
    2c08:	82 83       	std	Z+2, r24	; 0x02
    2c0a:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2c0e:	24 96       	adiw	r28, 0x04	; 4
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	08 95       	ret

00002c2a <get_ROBOInt32>:

	Returns:
		
------------------------------------------------------------------------------*/
uint8_t get_ROBOInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	26 97       	sbiw	r28, 0x06	; 6
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;
    2c42:	96 e0       	ldi	r25, 0x06	; 6
    2c44:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2c48:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2c4c:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2c50:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2c52:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    2c54:	42 e0       	ldi	r20, 0x02	; 2
    2c56:	be 01       	movw	r22, r28
    2c58:	6f 5f       	subi	r22, 0xFF	; 255
    2c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
	start_TCB0(1);
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {
    2c6a:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	81 f0       	breq	.+32     	; 0x2c92 <get_ROBOInt32+0x68>
			break;
		}
		if (ticks > 50) {
    2c72:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2c76:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2c7a:	c3 97       	sbiw	r24, 0x33	; 51
    2c7c:	b0 f3       	brcs	.-20     	; 0x2c6a <get_ROBOInt32+0x40>
			stop_TCB0();
    2c7e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_ROBOInt32 timeout");
    2c82:	63 e2       	ldi	r22, 0x23	; 35
    2c84:	79 e8       	ldi	r23, 0x89	; 137
    2c86:	8f e2       	ldi	r24, 0x2F	; 47
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2c8e:	83 e6       	ldi	r24, 0x63	; 99
    2c90:	60 c0       	rjmp	.+192    	; 0x2d52 <get_ROBOInt32+0x128>
		}
	}
	stop_TCB0();
    2c92:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <stop_TCB0>

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2c96:	e2 e1       	ldi	r30, 0x12	; 18
    2c98:	fa e2       	ldi	r31, 0x2A	; 42
    2c9a:	e4 80       	ldd	r14, Z+4	; 0x04
    2c9c:	f1 2c       	mov	r15, r1
    2c9e:	fe 2c       	mov	r15, r14
    2ca0:	ee 24       	eor	r14, r14
    2ca2:	85 81       	ldd	r24, Z+5	; 0x05
    2ca4:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {
    2ca6:	22 e0       	ldi	r18, 0x02	; 2
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <get_ROBOInt32+0x9c>
		tbuf[i] = recv1_buf.data[i-2];
    2caa:	82 2f       	mov	r24, r18
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	fc 01       	movw	r30, r24
    2cb0:	e0 5f       	subi	r30, 0xF0	; 240
    2cb2:	f5 4d       	sbci	r31, 0xD5	; 213
    2cb4:	30 81       	ld	r19, Z
    2cb6:	e1 e0       	ldi	r30, 0x01	; 1
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	ec 0f       	add	r30, r28
    2cbc:	fd 1f       	adc	r31, r29
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {
    2cc4:	2f 5f       	subi	r18, 0xFF	; 255
    2cc6:	26 30       	cpi	r18, 0x06	; 6
    2cc8:	80 f3       	brcs	.-32     	; 0x2caa <get_ROBOInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2cca:	66 e0       	ldi	r22, 0x06	; 6
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	ce 01       	movw	r24, r28
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <crc16>

	if (crcReceived != crcExpected) {
    2cd6:	e8 16       	cp	r14, r24
    2cd8:	f9 06       	cpc	r15, r25
    2cda:	89 f0       	breq	.+34     	; 0x2cfe <get_ROBOInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_ROBOInt32 CRC error");
    2cdc:	69 e3       	ldi	r22, 0x39	; 57
    2cde:	79 e8       	ldi	r23, 0x89	; 137
    2ce0:	81 e3       	ldi	r24, 0x31	; 49
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		*value = 0x7FFFFFFF;
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	9f ef       	ldi	r25, 0xFF	; 255
    2cec:	af ef       	ldi	r26, 0xFF	; 255
    2cee:	bf e7       	ldi	r27, 0x7F	; 127
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2cfa:	83 e6       	ldi	r24, 0x63	; 99
    2cfc:	2a c0       	rjmp	.+84     	; 0x2d52 <get_ROBOInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2cfe:	e2 e1       	ldi	r30, 0x12	; 18
    2d00:	fa e2       	ldi	r31, 0x2A	; 42
    2d02:	80 81       	ld	r24, Z
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e0       	ldi	r26, 0x00	; 0
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	78 2f       	mov	r23, r24
    2d0c:	66 27       	eor	r22, r22
    2d0e:	55 27       	eor	r21, r21
    2d10:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	89 2f       	mov	r24, r25
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a0 e0       	ldi	r26, 0x00	; 0
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	99 27       	eor	r25, r25
    2d20:	88 27       	eor	r24, r24
    2d22:	84 2b       	or	r24, r20
    2d24:	95 2b       	or	r25, r21
    2d26:	a6 2b       	or	r26, r22
    2d28:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2d2a:	42 81       	ldd	r20, Z+2	; 0x02
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	76 2f       	mov	r23, r22
    2d34:	65 2f       	mov	r22, r21
    2d36:	54 2f       	mov	r21, r20
    2d38:	44 27       	eor	r20, r20
    2d3a:	84 2b       	or	r24, r20
    2d3c:	95 2b       	or	r25, r21
    2d3e:	a6 2b       	or	r26, r22
    2d40:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2d42:	23 81       	ldd	r18, Z+3	; 0x03
    2d44:	82 2b       	or	r24, r18
	*value = tempval;
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
	return(NOERROR);
    2d50:	80 e0       	ldi	r24, 0x00	; 0

}
    2d52:	26 96       	adiw	r28, 0x06	; 6
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	08 95       	ret

00002d66 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    2d66:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2d68:	e0 e6       	ldi	r30, 0x60	; 96
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2d6e:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2d70:	88 ed       	ldi	r24, 0xD8	; 216
    2d72:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2d74:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <init_RTC+0x14>
		asm("nop");
    2d78:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2d7a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2d7e:	96 fd       	sbrc	r25, 6
    2d80:	fb cf       	rjmp	.-10     	; 0x2d78 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2d82:	e0 e6       	ldi	r30, 0x60	; 96
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2d88:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2d8a:	28 ed       	ldi	r18, 0xD8	; 216
    2d8c:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2d8e:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2d90:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2d92:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2d94:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2d96:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <init_RTC+0x36>
		asm("nop");
    2d9a:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2d9c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2da0:	91 11       	cpse	r25, r1
    2da2:	fb cf       	rjmp	.-10     	; 0x2d9a <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2da4:	e0 e4       	ldi	r30, 0x40	; 64
    2da6:	f1 e0       	ldi	r31, 0x01	; 1
    2da8:	42 87       	std	Z+10, r20	; 0x0a
    2daa:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2db0:	85 81       	ldd	r24, Z+5	; 0x05
    2db2:	81 60       	ori	r24, 0x01	; 1
    2db4:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2db6:	81 eb       	ldi	r24, 0xB1	; 177
    2db8:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2dba:	82 81       	ldd	r24, Z+2	; 0x02
    2dbc:	81 60       	ori	r24, 0x01	; 1
    2dbe:	82 83       	std	Z+2, r24	; 0x02
    2dc0:	08 95       	ret

00002dc2 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2dc2:	1f 92       	push	r1
    2dc4:	0f 92       	push	r0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	0f 92       	push	r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2dea:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    2dee:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	b9 f0       	breq	.+46     	; 0x2e24 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2df6:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    2dfa:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    2dfe:	28 17       	cp	r18, r24
    2e00:	39 07       	cpc	r19, r25
    2e02:	58 f4       	brcc	.+22     	; 0x2e1a <__vector_3+0x58>
			clear_OLED(0);
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	0e 94 5f 0b 	call	0x16be	; 0x16be <clear_OLED>
			clear_OLED(1);
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	0e 94 5f 0b 	call	0x16be	; 0x16be <clear_OLED>
			timerOLED = 0;
    2e10:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    2e14:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    2e18:	05 c0       	rjmp	.+10     	; 0x2e24 <__vector_3+0x62>
		} else {
			timerOLED++;
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    2e20:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2e24:	80 e2       	ldi	r24, 0x20	; 32
    2e26:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2e2a:	ff 91       	pop	r31
    2e2c:	ef 91       	pop	r30
    2e2e:	bf 91       	pop	r27
    2e30:	af 91       	pop	r26
    2e32:	9f 91       	pop	r25
    2e34:	8f 91       	pop	r24
    2e36:	7f 91       	pop	r23
    2e38:	6f 91       	pop	r22
    2e3a:	5f 91       	pop	r21
    2e3c:	4f 91       	pop	r20
    2e3e:	3f 91       	pop	r19
    2e40:	2f 91       	pop	r18
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	0f 90       	pop	r0
    2e48:	1f 90       	pop	r1
    2e4a:	18 95       	reti

00002e4c <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	24 e3       	ldi	r18, 0x34	; 52
    2e54:	28 9f       	mul	r18, r24
    2e56:	f0 01       	movw	r30, r0
    2e58:	29 9f       	mul	r18, r25
    2e5a:	f0 0d       	add	r31, r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	ed 5f       	subi	r30, 0xFD	; 253
    2e60:	f7 4d       	sbci	r31, 0xD7	; 215
    2e62:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2e64:	24 37       	cpi	r18, 0x74	; 116
    2e66:	e9 f4       	brne	.+58     	; 0x2ea2 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2e68:	24 e3       	ldi	r18, 0x34	; 52
    2e6a:	28 9f       	mul	r18, r24
    2e6c:	e0 01       	movw	r28, r0
    2e6e:	29 9f       	mul	r18, r25
    2e70:	d0 0d       	add	r29, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	cb 5f       	subi	r28, 0xFB	; 251
    2e76:	d7 4d       	sbci	r29, 0xD7	; 215
    2e78:	fe 01       	movw	r30, r28
    2e7a:	01 90       	ld	r0, Z+
    2e7c:	00 20       	and	r0, r0
    2e7e:	e9 f7       	brne	.-6      	; 0x2e7a <set+0x2e>
    2e80:	31 97       	sbiw	r30, 0x01	; 1
    2e82:	ec 1b       	sub	r30, r28
    2e84:	fd 0b       	sbc	r31, r29
    2e86:	73 97       	sbiw	r30, 0x13	; 19
    2e88:	71 f4       	brne	.+28     	; 0x2ea6 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2e90:	24 e1       	ldi	r18, 0x14	; 20
    2e92:	ae 01       	movw	r20, r28
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	80 e5       	ldi	r24, 0x50	; 80
    2e9a:	0e 94 c9 06 	call	0xd92	; 0xd92 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	03 c0       	rjmp	.+6      	; 0x2ea8 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2ea2:	82 e0       	ldi	r24, 0x02	; 2
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	08 95       	ret

00002eae <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2eae:	e0 ea       	ldi	r30, 0xA0	; 160
    2eb0:	f4 e0       	ldi	r31, 0x04	; 4
    2eb2:	82 89       	ldd	r24, Z+18	; 0x12
    2eb4:	87 7f       	andi	r24, 0xF7	; 247
    2eb6:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2eb8:	84 e0       	ldi	r24, 0x04	; 4
    2eba:	82 83       	std	Z+2, r24	; 0x02
    2ebc:	08 95       	ret

00002ebe <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2ebe:	83 30       	cpi	r24, 0x03	; 3
    2ec0:	18 f0       	brcs	.+6      	; 0x2ec8 <get_temperature+0xa>
    2ec2:	83 30       	cpi	r24, 0x03	; 3
    2ec4:	21 f0       	breq	.+8      	; 0x2ece <get_temperature+0x10>
    2ec6:	06 c0       	rjmp	.+12     	; 0x2ed4 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2ec8:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    2ecc:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2ece:	0e 94 70 08 	call	0x10e0	; 0x10e0 <read_MCP9808>
			break;
    2ed2:	08 95       	ret
		default:
			temperature = -999.9;
    2ed4:	6a e9       	ldi	r22, 0x9A	; 154
    2ed6:	79 ef       	ldi	r23, 0xF9	; 249
    2ed8:	89 e7       	ldi	r24, 0x79	; 121
    2eda:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2edc:	08 95       	ret

00002ede <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	e2 97       	sbiw	r28, 0x32	; 50
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <start_TCB0>
    2ef8:	2a e6       	ldi	r18, 0x6A	; 106
    2efa:	84 e0       	ldi	r24, 0x04	; 4
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	21 50       	subi	r18, 0x01	; 1
    2f00:	80 40       	sbci	r24, 0x00	; 0
    2f02:	90 40       	sbci	r25, 0x00	; 0
    2f04:	e1 f7       	brne	.-8      	; 0x2efe <testroutine+0x20>
    2f06:	00 c0       	rjmp	.+0      	; 0x2f08 <testroutine+0x2a>
	_delay_ms(100);
	sprintf(buf, "ticks = %d\r\n", ticks);
    2f08:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2f0c:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2f10:	9f 93       	push	r25
    2f12:	8f 93       	push	r24
    2f14:	81 e5       	ldi	r24, 0x51	; 81
    2f16:	99 e8       	ldi	r25, 0x89	; 137
    2f18:	9f 93       	push	r25
    2f1a:	8f 93       	push	r24
    2f1c:	8e 01       	movw	r16, r28
    2f1e:	0f 5f       	subi	r16, 0xFF	; 255
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	1f 93       	push	r17
    2f24:	0f 93       	push	r16
    2f26:	0e 94 33 22 	call	0x4466	; 0x4466 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	00 20       	and	r0, r0
    2f30:	e9 f7       	brne	.-6      	; 0x2f2c <testroutine+0x4e>
    2f32:	31 97       	sbiw	r30, 0x01	; 1
    2f34:	af 01       	movw	r20, r30
    2f36:	40 1b       	sub	r20, r16
    2f38:	51 0b       	sbc	r21, r17
    2f3a:	b8 01       	movw	r22, r16
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	0e 94 a1 18 	call	0x3142	; 0x3142 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	e2 96       	adiw	r28, 0x32	; 50
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    2f5e:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <ticks>
    2f62:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    2f66:	25 e0       	ldi	r18, 0x05	; 5
    2f68:	3d e0       	ldi	r19, 0x0D	; 13
    2f6a:	ac 01       	movw	r20, r24
    2f6c:	42 9f       	mul	r20, r18
    2f6e:	c0 01       	movw	r24, r0
    2f70:	43 9f       	mul	r20, r19
    2f72:	90 0d       	add	r25, r0
    2f74:	52 9f       	mul	r21, r18
    2f76:	90 0d       	add	r25, r0
    2f78:	11 24       	eor	r1, r1
    2f7a:	e0 e8       	ldi	r30, 0x80	; 128
    2f7c:	fa e0       	ldi	r31, 0x0A	; 10
    2f7e:	84 87       	std	Z+12, r24	; 0x0c
    2f80:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    2f86:	80 83       	st	Z, r24
    2f88:	08 95       	ret

00002f8a <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    2f8a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    2f8e:	08 95       	ret

00002f90 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    2f90:	1f 92       	push	r1
    2f92:	0f 92       	push	r0
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	0f 92       	push	r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	8f 93       	push	r24
    2f9c:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    2fa4:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2fa8:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <ticks>
    2fb2:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <ticks+0x1>

    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	0f 90       	pop	r0
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	0f 90       	pop	r0
    2fc0:	1f 90       	pop	r1
    2fc2:	18 95       	reti

00002fc4 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2fc4:	e0 ea       	ldi	r30, 0xA0	; 160
    2fc6:	f8 e0       	ldi	r31, 0x08	; 8
    2fc8:	8b e0       	ldi	r24, 0x0B	; 11
    2fca:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2fcc:	83 81       	ldd	r24, Z+3	; 0x03
    2fce:	81 60       	ori	r24, 0x01	; 1
    2fd0:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2fd2:	85 81       	ldd	r24, Z+5	; 0x05
    2fd4:	81 60       	ori	r24, 0x01	; 1
    2fd6:	85 83       	std	Z+5, r24	; 0x05
    2fd8:	08 95       	ret

00002fda <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2fdc:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2fde:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2fe2:	88 23       	and	r24, r24
    2fe4:	dc f7       	brge	.-10     	; 0x2fdc <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    2fe6:	e0 ea       	ldi	r30, 0xA0	; 160
    2fe8:	f8 e0       	ldi	r31, 0x08	; 8
    2fea:	84 81       	ldd	r24, Z+4	; 0x04
    2fec:	8b 7f       	andi	r24, 0xFB	; 251
    2fee:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2ff0:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    2ff2:	94 81       	ldd	r25, Z+4	; 0x04
    2ff4:	92 60       	ori	r25, 0x02	; 2
    2ff6:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    2ff8:	08 95       	ret

00002ffa <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2ffa:	01 c0       	rjmp	.+2      	; 0x2ffe <readlast_TWI+0x4>
		asm("nop");
    2ffc:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2ffe:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3002:	88 23       	and	r24, r24
    3004:	dc f7       	brge	.-10     	; 0x2ffc <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3006:	e0 ea       	ldi	r30, 0xA0	; 160
    3008:	f8 e0       	ldi	r31, 0x08	; 8
    300a:	84 81       	ldd	r24, Z+4	; 0x04
    300c:	84 60       	ori	r24, 0x04	; 4
    300e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3010:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3012:	08 95       	ret

00003014 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3014:	61 30       	cpi	r22, 0x01	; 1
    3016:	39 f4       	brne	.+14     	; 0x3026 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	81 60       	ori	r24, 0x01	; 1
    3020:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3024:	05 c0       	rjmp	.+10     	; 0x3030 <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    3026:	88 0f       	add	r24, r24
    3028:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    302e:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3030:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3034:	80 7c       	andi	r24, 0xC0	; 192
    3036:	d9 f3       	breq	.-10     	; 0x302e <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3038:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    303c:	82 fd       	sbrc	r24, 2
    303e:	0c c0       	rjmp	.+24     	; 0x3058 <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    3040:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3044:	83 fd       	sbrc	r24, 3
    3046:	0a c0       	rjmp	.+20     	; 0x305c <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3048:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    304c:	89 2f       	mov	r24, r25
    304e:	80 71       	andi	r24, 0x10	; 16
    3050:	94 ff       	sbrs	r25, 4
    3052:	05 c0       	rjmp	.+10     	; 0x305e <start_TWI+0x4a>
		return(TWINODEVICE);
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    305c:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    305e:	08 95       	ret

00003060 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    3060:	87 e0       	ldi	r24, 0x07	; 7
    3062:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3066:	08 95       	ret

00003068 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3068:	01 c0       	rjmp	.+2      	; 0x306c <write_TWI+0x4>
		asm("nop");
    306a:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    306c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3070:	96 ff       	sbrs	r25, 6
    3072:	fb cf       	rjmp	.-10     	; 0x306a <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    3074:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3078:	01 c0       	rjmp	.+2      	; 0x307c <write_TWI+0x14>
		asm("nop");
    307a:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    307c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3080:	86 ff       	sbrs	r24, 6
    3082:	fb cf       	rjmp	.-10     	; 0x307a <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3084:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3088:	89 2f       	mov	r24, r25
    308a:	80 71       	andi	r24, 0x10	; 16
    308c:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    308e:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    3090:	08 95       	ret

00003092 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3092:	e0 e0       	ldi	r30, 0x00	; 0
    3094:	f4 e0       	ldi	r31, 0x04	; 4
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    309a:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    309c:	e0 e0       	ldi	r30, 0x00	; 0
    309e:	f8 e0       	ldi	r31, 0x08	; 8
    30a0:	2d e6       	ldi	r18, 0x6D	; 109
    30a2:	35 e0       	ldi	r19, 0x05	; 5
    30a4:	20 87       	std	Z+8, r18	; 0x08
    30a6:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    30a8:	95 81       	ldd	r25, Z+5	; 0x05
    30aa:	90 68       	ori	r25, 0x80	; 128
    30ac:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    30ae:	96 81       	ldd	r25, Z+6	; 0x06
    30b0:	90 64       	ori	r25, 0x40	; 64
    30b2:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    30b4:	96 81       	ldd	r25, Z+6	; 0x06
    30b6:	90 68       	ori	r25, 0x80	; 128
    30b8:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    30ba:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xff>
	send0_buf.tail = 0;
    30be:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0x100>
	send0_buf.done = YES;
    30c2:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	recv0_buf.head = 0;
    30c6:	10 92 16 2c 	sts	0x2C16, r1	; 0x802c16 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    30ca:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    30ce:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf>
	recv0_buf.length = 0;
    30d2:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x102>
	recv0_buf.done = NO;
    30d6:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    30da:	e0 e4       	ldi	r30, 0x40	; 64
    30dc:	f4 e0       	ldi	r31, 0x04	; 4
    30de:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    30e0:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    30e2:	e0 e2       	ldi	r30, 0x20	; 32
    30e4:	f8 e0       	ldi	r31, 0x08	; 8
    30e6:	4b e5       	ldi	r20, 0x5B	; 91
    30e8:	51 e0       	ldi	r21, 0x01	; 1
    30ea:	40 87       	std	Z+8, r20	; 0x08
    30ec:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    30ee:	95 81       	ldd	r25, Z+5	; 0x05
    30f0:	90 68       	ori	r25, 0x80	; 128
    30f2:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    30f4:	96 81       	ldd	r25, Z+6	; 0x06
    30f6:	90 64       	ori	r25, 0x40	; 64
    30f8:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    30fa:	96 81       	ldd	r25, Z+6	; 0x06
    30fc:	90 68       	ori	r25, 0x80	; 128
    30fe:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3100:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.tail = 0;
    3104:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0x100>
	send1_buf.done = YES;
    3108:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	recv1_buf.head = 0;
    310c:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    3110:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    3114:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.done = NO;
    3118:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    311c:	e0 e2       	ldi	r30, 0x20	; 32
    311e:	f4 e0       	ldi	r31, 0x04	; 4
    3120:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3122:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3124:	e0 e6       	ldi	r30, 0x60	; 96
    3126:	f8 e0       	ldi	r31, 0x08	; 8
    3128:	20 87       	std	Z+8, r18	; 0x08
    312a:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    312c:	96 81       	ldd	r25, Z+6	; 0x06
    312e:	90 64       	ori	r25, 0x40	; 64
    3130:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3132:	96 81       	ldd	r25, Z+6	; 0x06
    3134:	90 68       	ori	r25, 0x80	; 128
    3136:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3138:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	recv3_buf.done = NO;
    313c:	10 92 25 2e 	sts	0x2E25, r1	; 0x802e25 <recv3_buf+0x104>
    3140:	08 95       	ret

00003142 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3142:	0f 93       	push	r16
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	eb 01       	movw	r28, r22
    314c:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    314e:	81 30       	cpi	r24, 0x01	; 1
    3150:	01 f1       	breq	.+64     	; 0x3192 <send_USART+0x50>
    3152:	b0 f0       	brcs	.+44     	; 0x3180 <send_USART+0x3e>
    3154:	83 30       	cpi	r24, 0x03	; 3
    3156:	09 f4       	brne	.+2      	; 0x315a <send_USART+0x18>
    3158:	6d c0       	rjmp	.+218    	; 0x3234 <send_USART+0xf2>
    315a:	74 c0       	rjmp	.+232    	; 0x3244 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    315c:	eb e1       	ldi	r30, 0x1B	; 27
    315e:	fd e2       	ldi	r31, 0x2D	; 45
    3160:	80 81       	ld	r24, Z
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	38 81       	ld	r19, Y
    3166:	dc 01       	movw	r26, r24
    3168:	a4 5e       	subi	r26, 0xE4	; 228
    316a:	b3 4d       	sbci	r27, 0xD3	; 211
    316c:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    316e:	01 96       	adiw	r24, 0x01	; 1
    3170:	6f ef       	ldi	r22, 0xFF	; 255
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
    3178:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    317a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    317c:	21 96       	adiw	r28, 0x01	; 1
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3180:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    3182:	21 17       	cp	r18, r17
    3184:	58 f3       	brcs	.-42     	; 0x315c <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3186:	e0 e0       	ldi	r30, 0x00	; 0
    3188:	f8 e0       	ldi	r31, 0x08	; 8
    318a:	85 81       	ldd	r24, Z+5	; 0x05
    318c:	80 62       	ori	r24, 0x20	; 32
    318e:	85 83       	std	Z+5, r24	; 0x05
			break;
    3190:	59 c0       	rjmp	.+178    	; 0x3244 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    3192:	64 2f       	mov	r22, r20
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	ce 01       	movw	r24, r28
    3198:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <crc16>
    319c:	48 2f       	mov	r20, r24
    319e:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	11 c0       	rjmp	.+34     	; 0x31c6 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    31a4:	ea e2       	ldi	r30, 0x2A	; 42
    31a6:	f0 e3       	ldi	r31, 0x30	; 48
    31a8:	80 81       	ld	r24, Z
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	38 81       	ld	r19, Y
    31ae:	dc 01       	movw	r26, r24
    31b0:	a5 5d       	subi	r26, 0xD5	; 213
    31b2:	b0 4d       	sbci	r27, 0xD0	; 208
    31b4:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    31b6:	01 96       	adiw	r24, 0x01	; 1
    31b8:	6f ef       	ldi	r22, 0xFF	; 255
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
    31c0:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    31c2:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    31c4:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    31c6:	21 17       	cp	r18, r17
    31c8:	68 f3       	brcs	.-38     	; 0x31a4 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    31ca:	ea e2       	ldi	r30, 0x2A	; 42
    31cc:	f0 e3       	ldi	r31, 0x30	; 48
    31ce:	80 81       	ld	r24, Z
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	dc 01       	movw	r26, r24
    31d4:	a5 5d       	subi	r26, 0xD5	; 213
    31d6:	b0 4d       	sbci	r27, 0xD0	; 208
    31d8:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	2f ef       	ldi	r18, 0xFF	; 255
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	b9 01       	movw	r22, r18
    31e2:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	dc 01       	movw	r26, r24
    31ea:	a5 5d       	subi	r26, 0xD5	; 213
    31ec:	b0 4d       	sbci	r27, 0xD0	; 208
    31ee:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    31f0:	01 96       	adiw	r24, 0x01	; 1
    31f2:	b9 01       	movw	r22, r18
    31f4:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
    31f8:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    31fa:	1e 5f       	subi	r17, 0xFE	; 254
    31fc:	10 93 2c 30 	sts	0x302C, r17	; 0x80302c <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    3200:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3204:	e0 e2       	ldi	r30, 0x20	; 32
    3206:	f8 e0       	ldi	r31, 0x08	; 8
    3208:	85 81       	ldd	r24, Z+5	; 0x05
    320a:	80 62       	ori	r24, 0x20	; 32
    320c:	85 83       	std	Z+5, r24	; 0x05
			break;
    320e:	1a c0       	rjmp	.+52     	; 0x3244 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3210:	e5 e2       	ldi	r30, 0x25	; 37
    3212:	ff e2       	ldi	r31, 0x2F	; 47
    3214:	80 81       	ld	r24, Z
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	38 81       	ld	r19, Y
    321a:	dc 01       	movw	r26, r24
    321c:	aa 5d       	subi	r26, 0xDA	; 218
    321e:	b1 4d       	sbci	r27, 0xD1	; 209
    3220:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3222:	01 96       	adiw	r24, 0x01	; 1
    3224:	6f ef       	ldi	r22, 0xFF	; 255
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
    322c:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    322e:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    3230:	21 96       	adiw	r28, 0x01	; 1
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3234:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3236:	21 17       	cp	r18, r17
    3238:	58 f3       	brcs	.-42     	; 0x3210 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    323a:	e0 e6       	ldi	r30, 0x60	; 96
    323c:	f8 e0       	ldi	r31, 0x08	; 8
    323e:	85 81       	ldd	r24, Z+5	; 0x05
    3240:	80 62       	ori	r24, 0x20	; 32
    3242:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret

0000324e <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    324e:	1f 92       	push	r1
    3250:	0f 92       	push	r0
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	0f 92       	push	r0
    3256:	11 24       	eor	r1, r1
    3258:	5f 93       	push	r21
    325a:	6f 93       	push	r22
    325c:	7f 93       	push	r23
    325e:	8f 93       	push	r24
    3260:	9f 93       	push	r25
    3262:	af 93       	push	r26
    3264:	bf 93       	push	r27
    3266:	ef 93       	push	r30
    3268:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    326a:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
    326e:	8f 3f       	cpi	r24, 0xFF	; 255
    3270:	19 f1       	breq	.+70     	; 0x32b8 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    3272:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    3276:	8d 30       	cpi	r24, 0x0D	; 13
    3278:	51 f4       	brne	.+20     	; 0x328e <__vector_17+0x40>
			recv0_buf.done = YES;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    3280:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	e9 5e       	subi	r30, 0xE9	; 233
    3288:	f4 4d       	sbci	r31, 0xD4	; 212
    328a:	10 82       	st	Z, r1
    328c:	06 c0       	rjmp	.+12     	; 0x329a <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    328e:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	e9 5e       	subi	r30, 0xE9	; 233
    3296:	f4 4d       	sbci	r31, 0xD4	; 212
    3298:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    329a:	e9 e1       	ldi	r30, 0x19	; 25
    329c:	fc e2       	ldi	r31, 0x2C	; 44
    329e:	80 81       	ld	r24, Z
    32a0:	8f 5f       	subi	r24, 0xFF	; 255
    32a2:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    32a4:	e6 e1       	ldi	r30, 0x16	; 22
    32a6:	fc e2       	ldi	r31, 0x2C	; 44
    32a8:	80 81       	ld	r24, Z
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	01 96       	adiw	r24, 0x01	; 1
    32ae:	6f ef       	ldi	r22, 0xFF	; 255
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
    32b6:	80 83       	st	Z, r24
	}
}
    32b8:	ff 91       	pop	r31
    32ba:	ef 91       	pop	r30
    32bc:	bf 91       	pop	r27
    32be:	af 91       	pop	r26
    32c0:	9f 91       	pop	r25
    32c2:	8f 91       	pop	r24
    32c4:	7f 91       	pop	r23
    32c6:	6f 91       	pop	r22
    32c8:	5f 91       	pop	r21
    32ca:	0f 90       	pop	r0
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	0f 90       	pop	r0
    32d0:	1f 90       	pop	r1
    32d2:	18 95       	reti

000032d4 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    32d4:	1f 92       	push	r1
    32d6:	0f 92       	push	r0
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	0f 92       	push	r0
    32dc:	11 24       	eor	r1, r1
    32de:	8f 93       	push	r24
    32e0:	9f 93       	push	r25
    32e2:	ef 93       	push	r30
    32e4:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    32e6:	e0 e0       	ldi	r30, 0x00	; 0
    32e8:	f8 e0       	ldi	r31, 0x08	; 8
    32ea:	85 81       	ldd	r24, Z+5	; 0x05
    32ec:	8f 7d       	andi	r24, 0xDF	; 223
    32ee:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    32f0:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xff>
    32f4:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0x100>
    32f8:	8e 17       	cp	r24, r30
    32fa:	b9 f0       	breq	.+46     	; 0x332a <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    32fc:	91 e0       	ldi	r25, 0x01	; 1
    32fe:	9e 0f       	add	r25, r30
    3300:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <send0_buf+0x100>
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	e4 5e       	subi	r30, 0xE4	; 228
    3308:	f3 4d       	sbci	r31, 0xD3	; 211
    330a:	80 81       	ld	r24, Z
    330c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	9f 3f       	cpi	r25, 0xFF	; 255
    3314:	08 f4       	brcc	.+2      	; 0x3318 <__vector_18+0x44>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	89 0f       	add	r24, r25
    331a:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    331e:	e0 e0       	ldi	r30, 0x00	; 0
    3320:	f8 e0       	ldi	r31, 0x08	; 8
    3322:	85 81       	ldd	r24, Z+5	; 0x05
    3324:	80 62       	ori	r24, 0x20	; 32
    3326:	85 83       	std	Z+5, r24	; 0x05
    3328:	03 c0       	rjmp	.+6      	; 0x3330 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	}

}
    3330:	ff 91       	pop	r31
    3332:	ef 91       	pop	r30
    3334:	9f 91       	pop	r25
    3336:	8f 91       	pop	r24
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti

00003342 <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    3342:	1f 92       	push	r1
    3344:	0f 92       	push	r0
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	0f 92       	push	r0
    334a:	11 24       	eor	r1, r1
    334c:	2f 93       	push	r18
    334e:	8f 93       	push	r24
    3350:	9f 93       	push	r25
    3352:	ef 93       	push	r30
    3354:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3356:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    335a:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    335e:	80 91 13 2b 	lds	r24, 0x2B13	; 0x802b13 <recv1_buf+0x101>
    3362:	e8 17       	cp	r30, r24
    3364:	40 f4       	brcc	.+16     	; 0x3376 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3366:	21 e0       	ldi	r18, 0x01	; 1
    3368:	2e 0f       	add	r18, r30
    336a:	20 93 15 2b 	sts	0x2B15, r18	; 0x802b15 <recv1_buf+0x103>
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	ee 5e       	subi	r30, 0xEE	; 238
    3372:	f5 4d       	sbci	r31, 0xD5	; 213
    3374:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3376:	90 91 15 2b 	lds	r25, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    337a:	98 17       	cp	r25, r24
    337c:	18 f0       	brcs	.+6      	; 0x3384 <__vector_26+0x42>
		recv1_buf.done = YES;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x104>
	}

}
    3384:	ff 91       	pop	r31
    3386:	ef 91       	pop	r30
    3388:	9f 91       	pop	r25
    338a:	8f 91       	pop	r24
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	0f 90       	pop	r0
    3394:	1f 90       	pop	r1
    3396:	18 95       	reti

00003398 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	8f 93       	push	r24
    33a4:	9f 93       	push	r25
    33a6:	ef 93       	push	r30
    33a8:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    33aa:	e0 e2       	ldi	r30, 0x20	; 32
    33ac:	f8 e0       	ldi	r31, 0x08	; 8
    33ae:	85 81       	ldd	r24, Z+5	; 0x05
    33b0:	8f 7d       	andi	r24, 0xDF	; 223
    33b2:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    33b4:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <send1_buf+0xff>
    33b8:	e0 91 2b 30 	lds	r30, 0x302B	; 0x80302b <send1_buf+0x100>
    33bc:	8e 17       	cp	r24, r30
    33be:	b9 f0       	breq	.+46     	; 0x33ee <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    33c0:	91 e0       	ldi	r25, 0x01	; 1
    33c2:	9e 0f       	add	r25, r30
    33c4:	90 93 2b 30 	sts	0x302B, r25	; 0x80302b <send1_buf+0x100>
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	e5 5d       	subi	r30, 0xD5	; 213
    33cc:	f0 4d       	sbci	r31, 0xD0	; 208
    33ce:	80 81       	ld	r24, Z
    33d0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	9f 3f       	cpi	r25, 0xFF	; 255
    33d8:	08 f4       	brcc	.+2      	; 0x33dc <__vector_27+0x44>
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	89 0f       	add	r24, r25
    33de:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    33e2:	e0 e2       	ldi	r30, 0x20	; 32
    33e4:	f8 e0       	ldi	r31, 0x08	; 8
    33e6:	85 81       	ldd	r24, Z+5	; 0x05
    33e8:	80 62       	ori	r24, 0x20	; 32
    33ea:	85 83       	std	Z+5, r24	; 0x05
    33ec:	03 c0       	rjmp	.+6      	; 0x33f4 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    33f4:	ff 91       	pop	r31
    33f6:	ef 91       	pop	r30
    33f8:	9f 91       	pop	r25
    33fa:	8f 91       	pop	r24
    33fc:	0f 90       	pop	r0
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	0f 90       	pop	r0
    3402:	1f 90       	pop	r1
    3404:	18 95       	reti

00003406 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	0f 92       	push	r0
    340e:	11 24       	eor	r1, r1
    3410:	8f 93       	push	r24
    3412:	9f 93       	push	r25
    3414:	af 93       	push	r26
    3416:	bf 93       	push	r27
    3418:	ef 93       	push	r30
    341a:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    341c:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3420:	8d 30       	cpi	r24, 0x0D	; 13
    3422:	21 f0       	breq	.+8      	; 0x342c <__vector_37+0x26>
    3424:	e0 91 24 2e 	lds	r30, 0x2E24	; 0x802e24 <recv3_buf+0x103>
    3428:	ee 3f       	cpi	r30, 0xFE	; 254
    342a:	78 f0       	brcs	.+30     	; 0x344a <__vector_37+0x44>
		recv3_buf.done = YES;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3432:	a4 e2       	ldi	r26, 0x24	; 36
    3434:	be e2       	ldi	r27, 0x2E	; 46
    3436:	8c 91       	ld	r24, X
    3438:	e8 2f       	mov	r30, r24
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	ef 5d       	subi	r30, 0xDF	; 223
    343e:	f2 4d       	sbci	r31, 0xD2	; 210
    3440:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    3442:	80 93 22 2e 	sts	0x2E22, r24	; 0x802e22 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    3446:	1c 92       	st	X, r1
		return;
    3448:	08 c0       	rjmp	.+16     	; 0x345a <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    344a:	91 e0       	ldi	r25, 0x01	; 1
    344c:	9e 0f       	add	r25, r30
    344e:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <recv3_buf+0x103>
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	ef 5d       	subi	r30, 0xDF	; 223
    3456:	f2 4d       	sbci	r31, 0xD2	; 210
    3458:	80 83       	st	Z, r24
	}

}
    345a:	ff 91       	pop	r31
    345c:	ef 91       	pop	r30
    345e:	bf 91       	pop	r27
    3460:	af 91       	pop	r26
    3462:	9f 91       	pop	r25
    3464:	8f 91       	pop	r24
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	0f 90       	pop	r0
    346c:	1f 90       	pop	r1
    346e:	18 95       	reti

00003470 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    3470:	1f 92       	push	r1
    3472:	0f 92       	push	r0
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	0f 92       	push	r0
    3478:	11 24       	eor	r1, r1
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3486:	a9 e2       	ldi	r26, 0x29	; 41
    3488:	bf e2       	ldi	r27, 0x2F	; 47
    348a:	ec 91       	ld	r30, X
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	8e 0f       	add	r24, r30
    3490:	8c 93       	st	X, r24
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	ea 5d       	subi	r30, 0xDA	; 218
    3496:	f1 4d       	sbci	r31, 0xD1	; 209
    3498:	90 81       	ld	r25, Z
    349a:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    349e:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x101>
    34a2:	89 17       	cp	r24, r25
    34a4:	40 f0       	brcs	.+16     	; 0x34b6 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    34a6:	e0 e6       	ldi	r30, 0x60	; 96
    34a8:	f8 e0       	ldi	r31, 0x08	; 8
    34aa:	85 81       	ldd	r24, Z+5	; 0x05
    34ac:	8f 7d       	andi	r24, 0xDF	; 223
    34ae:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	}

}
    34b6:	ff 91       	pop	r31
    34b8:	ef 91       	pop	r30
    34ba:	bf 91       	pop	r27
    34bc:	af 91       	pop	r26
    34be:	9f 91       	pop	r25
    34c0:	8f 91       	pop	r24
    34c2:	0f 90       	pop	r0
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	0f 90       	pop	r0
    34c8:	1f 90       	pop	r1
    34ca:	18 95       	reti

000034cc <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    34cc:	0e 94 49 18 	call	0x3092	; 0x3092 <init_USART>
	init_XPORT();
    34d0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    34d4:	88 ed       	ldi	r24, 0xD8	; 216
    34d6:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    34de:	08 95       	ret

000034e0 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    34e0:	e0 e4       	ldi	r30, 0x40	; 64
    34e2:	f4 e0       	ldi	r31, 0x04	; 4
    34e4:	88 e0       	ldi	r24, 0x08	; 8
    34e6:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    34e8:	81 83       	std	Z+1, r24	; 0x01
    34ea:	ad e8       	ldi	r26, 0x8D	; 141
    34ec:	b0 e2       	ldi	r27, 0x20	; 32
    34ee:	11 97       	sbiw	r26, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <init_XPORT+0xe>
    34f2:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    34f4:	85 83       	std	Z+5, r24	; 0x05
    34f6:	08 95       	ret

000034f8 <__subsf3>:
    34f8:	50 58       	subi	r21, 0x80	; 128

000034fa <__addsf3>:
    34fa:	bb 27       	eor	r27, r27
    34fc:	aa 27       	eor	r26, r26
    34fe:	0e 94 94 1a 	call	0x3528	; 0x3528 <__addsf3x>
    3502:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__fp_round>
    3506:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__fp_pscA>
    350a:	38 f0       	brcs	.+14     	; 0x351a <__addsf3+0x20>
    350c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fp_pscB>
    3510:	20 f0       	brcs	.+8      	; 0x351a <__addsf3+0x20>
    3512:	39 f4       	brne	.+14     	; 0x3522 <__addsf3+0x28>
    3514:	9f 3f       	cpi	r25, 0xFF	; 255
    3516:	19 f4       	brne	.+6      	; 0x351e <__addsf3+0x24>
    3518:	26 f4       	brtc	.+8      	; 0x3522 <__addsf3+0x28>
    351a:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__fp_nan>
    351e:	0e f4       	brtc	.+2      	; 0x3522 <__addsf3+0x28>
    3520:	e0 95       	com	r30
    3522:	e7 fb       	bst	r30, 7
    3524:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__fp_inf>

00003528 <__addsf3x>:
    3528:	e9 2f       	mov	r30, r25
    352a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fp_split3>
    352e:	58 f3       	brcs	.-42     	; 0x3506 <__addsf3+0xc>
    3530:	ba 17       	cp	r27, r26
    3532:	62 07       	cpc	r22, r18
    3534:	73 07       	cpc	r23, r19
    3536:	84 07       	cpc	r24, r20
    3538:	95 07       	cpc	r25, r21
    353a:	20 f0       	brcs	.+8      	; 0x3544 <__addsf3x+0x1c>
    353c:	79 f4       	brne	.+30     	; 0x355c <__addsf3x+0x34>
    353e:	a6 f5       	brtc	.+104    	; 0x35a8 <__addsf3x+0x80>
    3540:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_zero>
    3544:	0e f4       	brtc	.+2      	; 0x3548 <__addsf3x+0x20>
    3546:	e0 95       	com	r30
    3548:	0b 2e       	mov	r0, r27
    354a:	ba 2f       	mov	r27, r26
    354c:	a0 2d       	mov	r26, r0
    354e:	0b 01       	movw	r0, r22
    3550:	b9 01       	movw	r22, r18
    3552:	90 01       	movw	r18, r0
    3554:	0c 01       	movw	r0, r24
    3556:	ca 01       	movw	r24, r20
    3558:	a0 01       	movw	r20, r0
    355a:	11 24       	eor	r1, r1
    355c:	ff 27       	eor	r31, r31
    355e:	59 1b       	sub	r21, r25
    3560:	99 f0       	breq	.+38     	; 0x3588 <__addsf3x+0x60>
    3562:	59 3f       	cpi	r21, 0xF9	; 249
    3564:	50 f4       	brcc	.+20     	; 0x357a <__addsf3x+0x52>
    3566:	50 3e       	cpi	r21, 0xE0	; 224
    3568:	68 f1       	brcs	.+90     	; 0x35c4 <__addsf3x+0x9c>
    356a:	1a 16       	cp	r1, r26
    356c:	f0 40       	sbci	r31, 0x00	; 0
    356e:	a2 2f       	mov	r26, r18
    3570:	23 2f       	mov	r18, r19
    3572:	34 2f       	mov	r19, r20
    3574:	44 27       	eor	r20, r20
    3576:	58 5f       	subi	r21, 0xF8	; 248
    3578:	f3 cf       	rjmp	.-26     	; 0x3560 <__addsf3x+0x38>
    357a:	46 95       	lsr	r20
    357c:	37 95       	ror	r19
    357e:	27 95       	ror	r18
    3580:	a7 95       	ror	r26
    3582:	f0 40       	sbci	r31, 0x00	; 0
    3584:	53 95       	inc	r21
    3586:	c9 f7       	brne	.-14     	; 0x357a <__addsf3x+0x52>
    3588:	7e f4       	brtc	.+30     	; 0x35a8 <__addsf3x+0x80>
    358a:	1f 16       	cp	r1, r31
    358c:	ba 0b       	sbc	r27, r26
    358e:	62 0b       	sbc	r22, r18
    3590:	73 0b       	sbc	r23, r19
    3592:	84 0b       	sbc	r24, r20
    3594:	ba f0       	brmi	.+46     	; 0x35c4 <__addsf3x+0x9c>
    3596:	91 50       	subi	r25, 0x01	; 1
    3598:	a1 f0       	breq	.+40     	; 0x35c2 <__addsf3x+0x9a>
    359a:	ff 0f       	add	r31, r31
    359c:	bb 1f       	adc	r27, r27
    359e:	66 1f       	adc	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	c2 f7       	brpl	.-16     	; 0x3596 <__addsf3x+0x6e>
    35a6:	0e c0       	rjmp	.+28     	; 0x35c4 <__addsf3x+0x9c>
    35a8:	ba 0f       	add	r27, r26
    35aa:	62 1f       	adc	r22, r18
    35ac:	73 1f       	adc	r23, r19
    35ae:	84 1f       	adc	r24, r20
    35b0:	48 f4       	brcc	.+18     	; 0x35c4 <__addsf3x+0x9c>
    35b2:	87 95       	ror	r24
    35b4:	77 95       	ror	r23
    35b6:	67 95       	ror	r22
    35b8:	b7 95       	ror	r27
    35ba:	f7 95       	ror	r31
    35bc:	9e 3f       	cpi	r25, 0xFE	; 254
    35be:	08 f0       	brcs	.+2      	; 0x35c2 <__addsf3x+0x9a>
    35c0:	b0 cf       	rjmp	.-160    	; 0x3522 <__addsf3+0x28>
    35c2:	93 95       	inc	r25
    35c4:	88 0f       	add	r24, r24
    35c6:	08 f0       	brcs	.+2      	; 0x35ca <__addsf3x+0xa2>
    35c8:	99 27       	eor	r25, r25
    35ca:	ee 0f       	add	r30, r30
    35cc:	97 95       	ror	r25
    35ce:	87 95       	ror	r24
    35d0:	08 95       	ret

000035d2 <__cmpsf2>:
    35d2:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_cmp>
    35d6:	08 f4       	brcc	.+2      	; 0x35da <__cmpsf2+0x8>
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	08 95       	ret

000035dc <__divsf3>:
    35dc:	0e 94 02 1b 	call	0x3604	; 0x3604 <__divsf3x>
    35e0:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__fp_round>
    35e4:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fp_pscB>
    35e8:	58 f0       	brcs	.+22     	; 0x3600 <__divsf3+0x24>
    35ea:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__fp_pscA>
    35ee:	40 f0       	brcs	.+16     	; 0x3600 <__divsf3+0x24>
    35f0:	29 f4       	brne	.+10     	; 0x35fc <__divsf3+0x20>
    35f2:	5f 3f       	cpi	r21, 0xFF	; 255
    35f4:	29 f0       	breq	.+10     	; 0x3600 <__divsf3+0x24>
    35f6:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__fp_inf>
    35fa:	51 11       	cpse	r21, r1
    35fc:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__fp_szero>
    3600:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__fp_nan>

00003604 <__divsf3x>:
    3604:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fp_split3>
    3608:	68 f3       	brcs	.-38     	; 0x35e4 <__divsf3+0x8>

0000360a <__divsf3_pse>:
    360a:	99 23       	and	r25, r25
    360c:	b1 f3       	breq	.-20     	; 0x35fa <__divsf3+0x1e>
    360e:	55 23       	and	r21, r21
    3610:	91 f3       	breq	.-28     	; 0x35f6 <__divsf3+0x1a>
    3612:	95 1b       	sub	r25, r21
    3614:	55 0b       	sbc	r21, r21
    3616:	bb 27       	eor	r27, r27
    3618:	aa 27       	eor	r26, r26
    361a:	62 17       	cp	r22, r18
    361c:	73 07       	cpc	r23, r19
    361e:	84 07       	cpc	r24, r20
    3620:	38 f0       	brcs	.+14     	; 0x3630 <__divsf3_pse+0x26>
    3622:	9f 5f       	subi	r25, 0xFF	; 255
    3624:	5f 4f       	sbci	r21, 0xFF	; 255
    3626:	22 0f       	add	r18, r18
    3628:	33 1f       	adc	r19, r19
    362a:	44 1f       	adc	r20, r20
    362c:	aa 1f       	adc	r26, r26
    362e:	a9 f3       	breq	.-22     	; 0x361a <__divsf3_pse+0x10>
    3630:	35 d0       	rcall	.+106    	; 0x369c <__divsf3_pse+0x92>
    3632:	0e 2e       	mov	r0, r30
    3634:	3a f0       	brmi	.+14     	; 0x3644 <__divsf3_pse+0x3a>
    3636:	e0 e8       	ldi	r30, 0x80	; 128
    3638:	32 d0       	rcall	.+100    	; 0x369e <__divsf3_pse+0x94>
    363a:	91 50       	subi	r25, 0x01	; 1
    363c:	50 40       	sbci	r21, 0x00	; 0
    363e:	e6 95       	lsr	r30
    3640:	00 1c       	adc	r0, r0
    3642:	ca f7       	brpl	.-14     	; 0x3636 <__divsf3_pse+0x2c>
    3644:	2b d0       	rcall	.+86     	; 0x369c <__divsf3_pse+0x92>
    3646:	fe 2f       	mov	r31, r30
    3648:	29 d0       	rcall	.+82     	; 0x369c <__divsf3_pse+0x92>
    364a:	66 0f       	add	r22, r22
    364c:	77 1f       	adc	r23, r23
    364e:	88 1f       	adc	r24, r24
    3650:	bb 1f       	adc	r27, r27
    3652:	26 17       	cp	r18, r22
    3654:	37 07       	cpc	r19, r23
    3656:	48 07       	cpc	r20, r24
    3658:	ab 07       	cpc	r26, r27
    365a:	b0 e8       	ldi	r27, 0x80	; 128
    365c:	09 f0       	breq	.+2      	; 0x3660 <__divsf3_pse+0x56>
    365e:	bb 0b       	sbc	r27, r27
    3660:	80 2d       	mov	r24, r0
    3662:	bf 01       	movw	r22, r30
    3664:	ff 27       	eor	r31, r31
    3666:	93 58       	subi	r25, 0x83	; 131
    3668:	5f 4f       	sbci	r21, 0xFF	; 255
    366a:	3a f0       	brmi	.+14     	; 0x367a <__divsf3_pse+0x70>
    366c:	9e 3f       	cpi	r25, 0xFE	; 254
    366e:	51 05       	cpc	r21, r1
    3670:	78 f0       	brcs	.+30     	; 0x3690 <__divsf3_pse+0x86>
    3672:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__fp_inf>
    3676:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__fp_szero>
    367a:	5f 3f       	cpi	r21, 0xFF	; 255
    367c:	e4 f3       	brlt	.-8      	; 0x3676 <__divsf3_pse+0x6c>
    367e:	98 3e       	cpi	r25, 0xE8	; 232
    3680:	d4 f3       	brlt	.-12     	; 0x3676 <__divsf3_pse+0x6c>
    3682:	86 95       	lsr	r24
    3684:	77 95       	ror	r23
    3686:	67 95       	ror	r22
    3688:	b7 95       	ror	r27
    368a:	f7 95       	ror	r31
    368c:	9f 5f       	subi	r25, 0xFF	; 255
    368e:	c9 f7       	brne	.-14     	; 0x3682 <__divsf3_pse+0x78>
    3690:	88 0f       	add	r24, r24
    3692:	91 1d       	adc	r25, r1
    3694:	96 95       	lsr	r25
    3696:	87 95       	ror	r24
    3698:	97 f9       	bld	r25, 7
    369a:	08 95       	ret
    369c:	e1 e0       	ldi	r30, 0x01	; 1
    369e:	66 0f       	add	r22, r22
    36a0:	77 1f       	adc	r23, r23
    36a2:	88 1f       	adc	r24, r24
    36a4:	bb 1f       	adc	r27, r27
    36a6:	62 17       	cp	r22, r18
    36a8:	73 07       	cpc	r23, r19
    36aa:	84 07       	cpc	r24, r20
    36ac:	ba 07       	cpc	r27, r26
    36ae:	20 f0       	brcs	.+8      	; 0x36b8 <__divsf3_pse+0xae>
    36b0:	62 1b       	sub	r22, r18
    36b2:	73 0b       	sbc	r23, r19
    36b4:	84 0b       	sbc	r24, r20
    36b6:	ba 0b       	sbc	r27, r26
    36b8:	ee 1f       	adc	r30, r30
    36ba:	88 f7       	brcc	.-30     	; 0x369e <__divsf3_pse+0x94>
    36bc:	e0 95       	com	r30
    36be:	08 95       	ret

000036c0 <__floatunsisf>:
    36c0:	e8 94       	clt
    36c2:	09 c0       	rjmp	.+18     	; 0x36d6 <__floatsisf+0x12>

000036c4 <__floatsisf>:
    36c4:	97 fb       	bst	r25, 7
    36c6:	3e f4       	brtc	.+14     	; 0x36d6 <__floatsisf+0x12>
    36c8:	90 95       	com	r25
    36ca:	80 95       	com	r24
    36cc:	70 95       	com	r23
    36ce:	61 95       	neg	r22
    36d0:	7f 4f       	sbci	r23, 0xFF	; 255
    36d2:	8f 4f       	sbci	r24, 0xFF	; 255
    36d4:	9f 4f       	sbci	r25, 0xFF	; 255
    36d6:	99 23       	and	r25, r25
    36d8:	a9 f0       	breq	.+42     	; 0x3704 <__floatsisf+0x40>
    36da:	f9 2f       	mov	r31, r25
    36dc:	96 e9       	ldi	r25, 0x96	; 150
    36de:	bb 27       	eor	r27, r27
    36e0:	93 95       	inc	r25
    36e2:	f6 95       	lsr	r31
    36e4:	87 95       	ror	r24
    36e6:	77 95       	ror	r23
    36e8:	67 95       	ror	r22
    36ea:	b7 95       	ror	r27
    36ec:	f1 11       	cpse	r31, r1
    36ee:	f8 cf       	rjmp	.-16     	; 0x36e0 <__floatsisf+0x1c>
    36f0:	fa f4       	brpl	.+62     	; 0x3730 <__floatsisf+0x6c>
    36f2:	bb 0f       	add	r27, r27
    36f4:	11 f4       	brne	.+4      	; 0x36fa <__floatsisf+0x36>
    36f6:	60 ff       	sbrs	r22, 0
    36f8:	1b c0       	rjmp	.+54     	; 0x3730 <__floatsisf+0x6c>
    36fa:	6f 5f       	subi	r22, 0xFF	; 255
    36fc:	7f 4f       	sbci	r23, 0xFF	; 255
    36fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3700:	9f 4f       	sbci	r25, 0xFF	; 255
    3702:	16 c0       	rjmp	.+44     	; 0x3730 <__floatsisf+0x6c>
    3704:	88 23       	and	r24, r24
    3706:	11 f0       	breq	.+4      	; 0x370c <__floatsisf+0x48>
    3708:	96 e9       	ldi	r25, 0x96	; 150
    370a:	11 c0       	rjmp	.+34     	; 0x372e <__floatsisf+0x6a>
    370c:	77 23       	and	r23, r23
    370e:	21 f0       	breq	.+8      	; 0x3718 <__floatsisf+0x54>
    3710:	9e e8       	ldi	r25, 0x8E	; 142
    3712:	87 2f       	mov	r24, r23
    3714:	76 2f       	mov	r23, r22
    3716:	05 c0       	rjmp	.+10     	; 0x3722 <__floatsisf+0x5e>
    3718:	66 23       	and	r22, r22
    371a:	71 f0       	breq	.+28     	; 0x3738 <__floatsisf+0x74>
    371c:	96 e8       	ldi	r25, 0x86	; 134
    371e:	86 2f       	mov	r24, r22
    3720:	70 e0       	ldi	r23, 0x00	; 0
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	2a f0       	brmi	.+10     	; 0x3730 <__floatsisf+0x6c>
    3726:	9a 95       	dec	r25
    3728:	66 0f       	add	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	88 1f       	adc	r24, r24
    372e:	da f7       	brpl	.-10     	; 0x3726 <__floatsisf+0x62>
    3730:	88 0f       	add	r24, r24
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	97 f9       	bld	r25, 7
    3738:	08 95       	ret

0000373a <__fp_cmp>:
    373a:	99 0f       	add	r25, r25
    373c:	00 08       	sbc	r0, r0
    373e:	55 0f       	add	r21, r21
    3740:	aa 0b       	sbc	r26, r26
    3742:	e0 e8       	ldi	r30, 0x80	; 128
    3744:	fe ef       	ldi	r31, 0xFE	; 254
    3746:	16 16       	cp	r1, r22
    3748:	17 06       	cpc	r1, r23
    374a:	e8 07       	cpc	r30, r24
    374c:	f9 07       	cpc	r31, r25
    374e:	c0 f0       	brcs	.+48     	; 0x3780 <__fp_cmp+0x46>
    3750:	12 16       	cp	r1, r18
    3752:	13 06       	cpc	r1, r19
    3754:	e4 07       	cpc	r30, r20
    3756:	f5 07       	cpc	r31, r21
    3758:	98 f0       	brcs	.+38     	; 0x3780 <__fp_cmp+0x46>
    375a:	62 1b       	sub	r22, r18
    375c:	73 0b       	sbc	r23, r19
    375e:	84 0b       	sbc	r24, r20
    3760:	95 0b       	sbc	r25, r21
    3762:	39 f4       	brne	.+14     	; 0x3772 <__fp_cmp+0x38>
    3764:	0a 26       	eor	r0, r26
    3766:	61 f0       	breq	.+24     	; 0x3780 <__fp_cmp+0x46>
    3768:	23 2b       	or	r18, r19
    376a:	24 2b       	or	r18, r20
    376c:	25 2b       	or	r18, r21
    376e:	21 f4       	brne	.+8      	; 0x3778 <__fp_cmp+0x3e>
    3770:	08 95       	ret
    3772:	0a 26       	eor	r0, r26
    3774:	09 f4       	brne	.+2      	; 0x3778 <__fp_cmp+0x3e>
    3776:	a1 40       	sbci	r26, 0x01	; 1
    3778:	a6 95       	lsr	r26
    377a:	8f ef       	ldi	r24, 0xFF	; 255
    377c:	81 1d       	adc	r24, r1
    377e:	81 1d       	adc	r24, r1
    3780:	08 95       	ret

00003782 <__fp_inf>:
    3782:	97 f9       	bld	r25, 7
    3784:	9f 67       	ori	r25, 0x7F	; 127
    3786:	80 e8       	ldi	r24, 0x80	; 128
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	08 95       	ret

0000378e <__fp_nan>:
    378e:	9f ef       	ldi	r25, 0xFF	; 255
    3790:	80 ec       	ldi	r24, 0xC0	; 192
    3792:	08 95       	ret

00003794 <__fp_pscA>:
    3794:	00 24       	eor	r0, r0
    3796:	0a 94       	dec	r0
    3798:	16 16       	cp	r1, r22
    379a:	17 06       	cpc	r1, r23
    379c:	18 06       	cpc	r1, r24
    379e:	09 06       	cpc	r0, r25
    37a0:	08 95       	ret

000037a2 <__fp_pscB>:
    37a2:	00 24       	eor	r0, r0
    37a4:	0a 94       	dec	r0
    37a6:	12 16       	cp	r1, r18
    37a8:	13 06       	cpc	r1, r19
    37aa:	14 06       	cpc	r1, r20
    37ac:	05 06       	cpc	r0, r21
    37ae:	08 95       	ret

000037b0 <__fp_round>:
    37b0:	09 2e       	mov	r0, r25
    37b2:	03 94       	inc	r0
    37b4:	00 0c       	add	r0, r0
    37b6:	11 f4       	brne	.+4      	; 0x37bc <__fp_round+0xc>
    37b8:	88 23       	and	r24, r24
    37ba:	52 f0       	brmi	.+20     	; 0x37d0 <__fp_round+0x20>
    37bc:	bb 0f       	add	r27, r27
    37be:	40 f4       	brcc	.+16     	; 0x37d0 <__fp_round+0x20>
    37c0:	bf 2b       	or	r27, r31
    37c2:	11 f4       	brne	.+4      	; 0x37c8 <__fp_round+0x18>
    37c4:	60 ff       	sbrs	r22, 0
    37c6:	04 c0       	rjmp	.+8      	; 0x37d0 <__fp_round+0x20>
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	8f 4f       	sbci	r24, 0xFF	; 255
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	08 95       	ret

000037d2 <__fp_split3>:
    37d2:	57 fd       	sbrc	r21, 7
    37d4:	90 58       	subi	r25, 0x80	; 128
    37d6:	44 0f       	add	r20, r20
    37d8:	55 1f       	adc	r21, r21
    37da:	59 f0       	breq	.+22     	; 0x37f2 <__fp_splitA+0x10>
    37dc:	5f 3f       	cpi	r21, 0xFF	; 255
    37de:	71 f0       	breq	.+28     	; 0x37fc <__fp_splitA+0x1a>
    37e0:	47 95       	ror	r20

000037e2 <__fp_splitA>:
    37e2:	88 0f       	add	r24, r24
    37e4:	97 fb       	bst	r25, 7
    37e6:	99 1f       	adc	r25, r25
    37e8:	61 f0       	breq	.+24     	; 0x3802 <__fp_splitA+0x20>
    37ea:	9f 3f       	cpi	r25, 0xFF	; 255
    37ec:	79 f0       	breq	.+30     	; 0x380c <__fp_splitA+0x2a>
    37ee:	87 95       	ror	r24
    37f0:	08 95       	ret
    37f2:	12 16       	cp	r1, r18
    37f4:	13 06       	cpc	r1, r19
    37f6:	14 06       	cpc	r1, r20
    37f8:	55 1f       	adc	r21, r21
    37fa:	f2 cf       	rjmp	.-28     	; 0x37e0 <__fp_split3+0xe>
    37fc:	46 95       	lsr	r20
    37fe:	f1 df       	rcall	.-30     	; 0x37e2 <__fp_splitA>
    3800:	08 c0       	rjmp	.+16     	; 0x3812 <__fp_splitA+0x30>
    3802:	16 16       	cp	r1, r22
    3804:	17 06       	cpc	r1, r23
    3806:	18 06       	cpc	r1, r24
    3808:	99 1f       	adc	r25, r25
    380a:	f1 cf       	rjmp	.-30     	; 0x37ee <__fp_splitA+0xc>
    380c:	86 95       	lsr	r24
    380e:	71 05       	cpc	r23, r1
    3810:	61 05       	cpc	r22, r1
    3812:	08 94       	sec
    3814:	08 95       	ret

00003816 <__fp_zero>:
    3816:	e8 94       	clt

00003818 <__fp_szero>:
    3818:	bb 27       	eor	r27, r27
    381a:	66 27       	eor	r22, r22
    381c:	77 27       	eor	r23, r23
    381e:	cb 01       	movw	r24, r22
    3820:	97 f9       	bld	r25, 7
    3822:	08 95       	ret

00003824 <__gesf2>:
    3824:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_cmp>
    3828:	08 f4       	brcc	.+2      	; 0x382c <__gesf2+0x8>
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	08 95       	ret

0000382e <__mulsf3>:
    382e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3x>
    3832:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__fp_round>
    3836:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__fp_pscA>
    383a:	38 f0       	brcs	.+14     	; 0x384a <__mulsf3+0x1c>
    383c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fp_pscB>
    3840:	20 f0       	brcs	.+8      	; 0x384a <__mulsf3+0x1c>
    3842:	95 23       	and	r25, r21
    3844:	11 f0       	breq	.+4      	; 0x384a <__mulsf3+0x1c>
    3846:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__fp_inf>
    384a:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__fp_nan>
    384e:	11 24       	eor	r1, r1
    3850:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__fp_szero>

00003854 <__mulsf3x>:
    3854:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fp_split3>
    3858:	70 f3       	brcs	.-36     	; 0x3836 <__mulsf3+0x8>

0000385a <__mulsf3_pse>:
    385a:	95 9f       	mul	r25, r21
    385c:	c1 f3       	breq	.-16     	; 0x384e <__mulsf3+0x20>
    385e:	95 0f       	add	r25, r21
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	55 1f       	adc	r21, r21
    3864:	62 9f       	mul	r22, r18
    3866:	f0 01       	movw	r30, r0
    3868:	72 9f       	mul	r23, r18
    386a:	bb 27       	eor	r27, r27
    386c:	f0 0d       	add	r31, r0
    386e:	b1 1d       	adc	r27, r1
    3870:	63 9f       	mul	r22, r19
    3872:	aa 27       	eor	r26, r26
    3874:	f0 0d       	add	r31, r0
    3876:	b1 1d       	adc	r27, r1
    3878:	aa 1f       	adc	r26, r26
    387a:	64 9f       	mul	r22, r20
    387c:	66 27       	eor	r22, r22
    387e:	b0 0d       	add	r27, r0
    3880:	a1 1d       	adc	r26, r1
    3882:	66 1f       	adc	r22, r22
    3884:	82 9f       	mul	r24, r18
    3886:	22 27       	eor	r18, r18
    3888:	b0 0d       	add	r27, r0
    388a:	a1 1d       	adc	r26, r1
    388c:	62 1f       	adc	r22, r18
    388e:	73 9f       	mul	r23, r19
    3890:	b0 0d       	add	r27, r0
    3892:	a1 1d       	adc	r26, r1
    3894:	62 1f       	adc	r22, r18
    3896:	83 9f       	mul	r24, r19
    3898:	a0 0d       	add	r26, r0
    389a:	61 1d       	adc	r22, r1
    389c:	22 1f       	adc	r18, r18
    389e:	74 9f       	mul	r23, r20
    38a0:	33 27       	eor	r19, r19
    38a2:	a0 0d       	add	r26, r0
    38a4:	61 1d       	adc	r22, r1
    38a6:	23 1f       	adc	r18, r19
    38a8:	84 9f       	mul	r24, r20
    38aa:	60 0d       	add	r22, r0
    38ac:	21 1d       	adc	r18, r1
    38ae:	82 2f       	mov	r24, r18
    38b0:	76 2f       	mov	r23, r22
    38b2:	6a 2f       	mov	r22, r26
    38b4:	11 24       	eor	r1, r1
    38b6:	9f 57       	subi	r25, 0x7F	; 127
    38b8:	50 40       	sbci	r21, 0x00	; 0
    38ba:	9a f0       	brmi	.+38     	; 0x38e2 <__mulsf3_pse+0x88>
    38bc:	f1 f0       	breq	.+60     	; 0x38fa <__mulsf3_pse+0xa0>
    38be:	88 23       	and	r24, r24
    38c0:	4a f0       	brmi	.+18     	; 0x38d4 <__mulsf3_pse+0x7a>
    38c2:	ee 0f       	add	r30, r30
    38c4:	ff 1f       	adc	r31, r31
    38c6:	bb 1f       	adc	r27, r27
    38c8:	66 1f       	adc	r22, r22
    38ca:	77 1f       	adc	r23, r23
    38cc:	88 1f       	adc	r24, r24
    38ce:	91 50       	subi	r25, 0x01	; 1
    38d0:	50 40       	sbci	r21, 0x00	; 0
    38d2:	a9 f7       	brne	.-22     	; 0x38be <__mulsf3_pse+0x64>
    38d4:	9e 3f       	cpi	r25, 0xFE	; 254
    38d6:	51 05       	cpc	r21, r1
    38d8:	80 f0       	brcs	.+32     	; 0x38fa <__mulsf3_pse+0xa0>
    38da:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__fp_inf>
    38de:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__fp_szero>
    38e2:	5f 3f       	cpi	r21, 0xFF	; 255
    38e4:	e4 f3       	brlt	.-8      	; 0x38de <__mulsf3_pse+0x84>
    38e6:	98 3e       	cpi	r25, 0xE8	; 232
    38e8:	d4 f3       	brlt	.-12     	; 0x38de <__mulsf3_pse+0x84>
    38ea:	86 95       	lsr	r24
    38ec:	77 95       	ror	r23
    38ee:	67 95       	ror	r22
    38f0:	b7 95       	ror	r27
    38f2:	f7 95       	ror	r31
    38f4:	e7 95       	ror	r30
    38f6:	9f 5f       	subi	r25, 0xFF	; 255
    38f8:	c1 f7       	brne	.-16     	; 0x38ea <__mulsf3_pse+0x90>
    38fa:	fe 2b       	or	r31, r30
    38fc:	88 0f       	add	r24, r24
    38fe:	91 1d       	adc	r25, r1
    3900:	96 95       	lsr	r25
    3902:	87 95       	ror	r24
    3904:	97 f9       	bld	r25, 7
    3906:	08 95       	ret

00003908 <vfprintf>:
    3908:	a0 e1       	ldi	r26, 0x10	; 16
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	ea e8       	ldi	r30, 0x8A	; 138
    390e:	fc e1       	ldi	r31, 0x1C	; 28
    3910:	0c 94 45 20 	jmp	0x408a	; 0x408a <__prologue_saves__>
    3914:	7c 01       	movw	r14, r24
    3916:	1b 01       	movw	r2, r22
    3918:	6a 01       	movw	r12, r20
    391a:	fc 01       	movw	r30, r24
    391c:	16 82       	std	Z+6, r1	; 0x06
    391e:	17 82       	std	Z+7, r1	; 0x07
    3920:	83 81       	ldd	r24, Z+3	; 0x03
    3922:	81 ff       	sbrs	r24, 1
    3924:	44 c3       	rjmp	.+1672   	; 0x3fae <vfprintf+0x6a6>
    3926:	9e 01       	movw	r18, r28
    3928:	2f 5f       	subi	r18, 0xFF	; 255
    392a:	3f 4f       	sbci	r19, 0xFF	; 255
    392c:	39 01       	movw	r6, r18
    392e:	f7 01       	movw	r30, r14
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	f1 01       	movw	r30, r2
    3934:	93 fd       	sbrc	r25, 3
    3936:	85 91       	lpm	r24, Z+
    3938:	93 ff       	sbrs	r25, 3
    393a:	81 91       	ld	r24, Z+
    393c:	1f 01       	movw	r2, r30
    393e:	88 23       	and	r24, r24
    3940:	09 f4       	brne	.+2      	; 0x3944 <vfprintf+0x3c>
    3942:	31 c3       	rjmp	.+1634   	; 0x3fa6 <vfprintf+0x69e>
    3944:	85 32       	cpi	r24, 0x25	; 37
    3946:	39 f4       	brne	.+14     	; 0x3956 <vfprintf+0x4e>
    3948:	93 fd       	sbrc	r25, 3
    394a:	85 91       	lpm	r24, Z+
    394c:	93 ff       	sbrs	r25, 3
    394e:	81 91       	ld	r24, Z+
    3950:	1f 01       	movw	r2, r30
    3952:	85 32       	cpi	r24, 0x25	; 37
    3954:	39 f4       	brne	.+14     	; 0x3964 <vfprintf+0x5c>
    3956:	b7 01       	movw	r22, r14
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    395e:	56 01       	movw	r10, r12
    3960:	65 01       	movw	r12, r10
    3962:	e5 cf       	rjmp	.-54     	; 0x392e <vfprintf+0x26>
    3964:	10 e0       	ldi	r17, 0x00	; 0
    3966:	51 2c       	mov	r5, r1
    3968:	91 2c       	mov	r9, r1
    396a:	ff e1       	ldi	r31, 0x1F	; 31
    396c:	f9 15       	cp	r31, r9
    396e:	d8 f0       	brcs	.+54     	; 0x39a6 <vfprintf+0x9e>
    3970:	8b 32       	cpi	r24, 0x2B	; 43
    3972:	79 f0       	breq	.+30     	; 0x3992 <vfprintf+0x8a>
    3974:	38 f4       	brcc	.+14     	; 0x3984 <vfprintf+0x7c>
    3976:	80 32       	cpi	r24, 0x20	; 32
    3978:	79 f0       	breq	.+30     	; 0x3998 <vfprintf+0x90>
    397a:	83 32       	cpi	r24, 0x23	; 35
    397c:	a1 f4       	brne	.+40     	; 0x39a6 <vfprintf+0x9e>
    397e:	f9 2d       	mov	r31, r9
    3980:	f0 61       	ori	r31, 0x10	; 16
    3982:	2e c0       	rjmp	.+92     	; 0x39e0 <vfprintf+0xd8>
    3984:	8d 32       	cpi	r24, 0x2D	; 45
    3986:	61 f0       	breq	.+24     	; 0x39a0 <vfprintf+0x98>
    3988:	80 33       	cpi	r24, 0x30	; 48
    398a:	69 f4       	brne	.+26     	; 0x39a6 <vfprintf+0x9e>
    398c:	29 2d       	mov	r18, r9
    398e:	21 60       	ori	r18, 0x01	; 1
    3990:	2d c0       	rjmp	.+90     	; 0x39ec <vfprintf+0xe4>
    3992:	39 2d       	mov	r19, r9
    3994:	32 60       	ori	r19, 0x02	; 2
    3996:	93 2e       	mov	r9, r19
    3998:	89 2d       	mov	r24, r9
    399a:	84 60       	ori	r24, 0x04	; 4
    399c:	98 2e       	mov	r9, r24
    399e:	2a c0       	rjmp	.+84     	; 0x39f4 <vfprintf+0xec>
    39a0:	e9 2d       	mov	r30, r9
    39a2:	e8 60       	ori	r30, 0x08	; 8
    39a4:	15 c0       	rjmp	.+42     	; 0x39d0 <vfprintf+0xc8>
    39a6:	97 fc       	sbrc	r9, 7
    39a8:	2d c0       	rjmp	.+90     	; 0x3a04 <vfprintf+0xfc>
    39aa:	20 ed       	ldi	r18, 0xD0	; 208
    39ac:	28 0f       	add	r18, r24
    39ae:	2a 30       	cpi	r18, 0x0A	; 10
    39b0:	88 f4       	brcc	.+34     	; 0x39d4 <vfprintf+0xcc>
    39b2:	96 fe       	sbrs	r9, 6
    39b4:	06 c0       	rjmp	.+12     	; 0x39c2 <vfprintf+0xba>
    39b6:	3a e0       	ldi	r19, 0x0A	; 10
    39b8:	13 9f       	mul	r17, r19
    39ba:	20 0d       	add	r18, r0
    39bc:	11 24       	eor	r1, r1
    39be:	12 2f       	mov	r17, r18
    39c0:	19 c0       	rjmp	.+50     	; 0x39f4 <vfprintf+0xec>
    39c2:	8a e0       	ldi	r24, 0x0A	; 10
    39c4:	58 9e       	mul	r5, r24
    39c6:	20 0d       	add	r18, r0
    39c8:	11 24       	eor	r1, r1
    39ca:	52 2e       	mov	r5, r18
    39cc:	e9 2d       	mov	r30, r9
    39ce:	e0 62       	ori	r30, 0x20	; 32
    39d0:	9e 2e       	mov	r9, r30
    39d2:	10 c0       	rjmp	.+32     	; 0x39f4 <vfprintf+0xec>
    39d4:	8e 32       	cpi	r24, 0x2E	; 46
    39d6:	31 f4       	brne	.+12     	; 0x39e4 <vfprintf+0xdc>
    39d8:	96 fc       	sbrc	r9, 6
    39da:	e5 c2       	rjmp	.+1482   	; 0x3fa6 <vfprintf+0x69e>
    39dc:	f9 2d       	mov	r31, r9
    39de:	f0 64       	ori	r31, 0x40	; 64
    39e0:	9f 2e       	mov	r9, r31
    39e2:	08 c0       	rjmp	.+16     	; 0x39f4 <vfprintf+0xec>
    39e4:	8c 36       	cpi	r24, 0x6C	; 108
    39e6:	21 f4       	brne	.+8      	; 0x39f0 <vfprintf+0xe8>
    39e8:	29 2d       	mov	r18, r9
    39ea:	20 68       	ori	r18, 0x80	; 128
    39ec:	92 2e       	mov	r9, r18
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <vfprintf+0xec>
    39f0:	88 36       	cpi	r24, 0x68	; 104
    39f2:	41 f4       	brne	.+16     	; 0x3a04 <vfprintf+0xfc>
    39f4:	f1 01       	movw	r30, r2
    39f6:	93 fd       	sbrc	r25, 3
    39f8:	85 91       	lpm	r24, Z+
    39fa:	93 ff       	sbrs	r25, 3
    39fc:	81 91       	ld	r24, Z+
    39fe:	1f 01       	movw	r2, r30
    3a00:	81 11       	cpse	r24, r1
    3a02:	b3 cf       	rjmp	.-154    	; 0x396a <vfprintf+0x62>
    3a04:	9b eb       	ldi	r25, 0xBB	; 187
    3a06:	98 0f       	add	r25, r24
    3a08:	93 30       	cpi	r25, 0x03	; 3
    3a0a:	20 f4       	brcc	.+8      	; 0x3a14 <vfprintf+0x10c>
    3a0c:	99 2d       	mov	r25, r9
    3a0e:	90 61       	ori	r25, 0x10	; 16
    3a10:	80 5e       	subi	r24, 0xE0	; 224
    3a12:	07 c0       	rjmp	.+14     	; 0x3a22 <vfprintf+0x11a>
    3a14:	9b e9       	ldi	r25, 0x9B	; 155
    3a16:	98 0f       	add	r25, r24
    3a18:	93 30       	cpi	r25, 0x03	; 3
    3a1a:	08 f0       	brcs	.+2      	; 0x3a1e <vfprintf+0x116>
    3a1c:	66 c1       	rjmp	.+716    	; 0x3cea <vfprintf+0x3e2>
    3a1e:	99 2d       	mov	r25, r9
    3a20:	9f 7e       	andi	r25, 0xEF	; 239
    3a22:	96 ff       	sbrs	r25, 6
    3a24:	16 e0       	ldi	r17, 0x06	; 6
    3a26:	9f 73       	andi	r25, 0x3F	; 63
    3a28:	99 2e       	mov	r9, r25
    3a2a:	85 36       	cpi	r24, 0x65	; 101
    3a2c:	19 f4       	brne	.+6      	; 0x3a34 <vfprintf+0x12c>
    3a2e:	90 64       	ori	r25, 0x40	; 64
    3a30:	99 2e       	mov	r9, r25
    3a32:	08 c0       	rjmp	.+16     	; 0x3a44 <vfprintf+0x13c>
    3a34:	86 36       	cpi	r24, 0x66	; 102
    3a36:	21 f4       	brne	.+8      	; 0x3a40 <vfprintf+0x138>
    3a38:	39 2f       	mov	r19, r25
    3a3a:	30 68       	ori	r19, 0x80	; 128
    3a3c:	93 2e       	mov	r9, r19
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <vfprintf+0x13c>
    3a40:	11 11       	cpse	r17, r1
    3a42:	11 50       	subi	r17, 0x01	; 1
    3a44:	97 fe       	sbrs	r9, 7
    3a46:	07 c0       	rjmp	.+14     	; 0x3a56 <vfprintf+0x14e>
    3a48:	1c 33       	cpi	r17, 0x3C	; 60
    3a4a:	50 f4       	brcc	.+20     	; 0x3a60 <vfprintf+0x158>
    3a4c:	44 24       	eor	r4, r4
    3a4e:	43 94       	inc	r4
    3a50:	41 0e       	add	r4, r17
    3a52:	27 e0       	ldi	r18, 0x07	; 7
    3a54:	0b c0       	rjmp	.+22     	; 0x3a6c <vfprintf+0x164>
    3a56:	18 30       	cpi	r17, 0x08	; 8
    3a58:	38 f0       	brcs	.+14     	; 0x3a68 <vfprintf+0x160>
    3a5a:	27 e0       	ldi	r18, 0x07	; 7
    3a5c:	17 e0       	ldi	r17, 0x07	; 7
    3a5e:	05 c0       	rjmp	.+10     	; 0x3a6a <vfprintf+0x162>
    3a60:	27 e0       	ldi	r18, 0x07	; 7
    3a62:	9c e3       	ldi	r25, 0x3C	; 60
    3a64:	49 2e       	mov	r4, r25
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <vfprintf+0x164>
    3a68:	21 2f       	mov	r18, r17
    3a6a:	41 2c       	mov	r4, r1
    3a6c:	56 01       	movw	r10, r12
    3a6e:	84 e0       	ldi	r24, 0x04	; 4
    3a70:	a8 0e       	add	r10, r24
    3a72:	b1 1c       	adc	r11, r1
    3a74:	f6 01       	movw	r30, r12
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	04 2d       	mov	r16, r4
    3a80:	a3 01       	movw	r20, r6
    3a82:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <__ftoa_engine>
    3a86:	6c 01       	movw	r12, r24
    3a88:	f9 81       	ldd	r31, Y+1	; 0x01
    3a8a:	fc 87       	std	Y+12, r31	; 0x0c
    3a8c:	f0 ff       	sbrs	r31, 0
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <vfprintf+0x18c>
    3a90:	f3 ff       	sbrs	r31, 3
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <vfprintf+0x198>
    3a94:	91 fc       	sbrc	r9, 1
    3a96:	06 c0       	rjmp	.+12     	; 0x3aa4 <vfprintf+0x19c>
    3a98:	92 fe       	sbrs	r9, 2
    3a9a:	06 c0       	rjmp	.+12     	; 0x3aa8 <vfprintf+0x1a0>
    3a9c:	00 e2       	ldi	r16, 0x20	; 32
    3a9e:	05 c0       	rjmp	.+10     	; 0x3aaa <vfprintf+0x1a2>
    3aa0:	0d e2       	ldi	r16, 0x2D	; 45
    3aa2:	03 c0       	rjmp	.+6      	; 0x3aaa <vfprintf+0x1a2>
    3aa4:	0b e2       	ldi	r16, 0x2B	; 43
    3aa6:	01 c0       	rjmp	.+2      	; 0x3aaa <vfprintf+0x1a2>
    3aa8:	00 e0       	ldi	r16, 0x00	; 0
    3aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aac:	8c 70       	andi	r24, 0x0C	; 12
    3aae:	19 f0       	breq	.+6      	; 0x3ab6 <vfprintf+0x1ae>
    3ab0:	01 11       	cpse	r16, r1
    3ab2:	5a c2       	rjmp	.+1204   	; 0x3f68 <vfprintf+0x660>
    3ab4:	9b c2       	rjmp	.+1334   	; 0x3fec <vfprintf+0x6e4>
    3ab6:	97 fe       	sbrs	r9, 7
    3ab8:	10 c0       	rjmp	.+32     	; 0x3ada <vfprintf+0x1d2>
    3aba:	4c 0c       	add	r4, r12
    3abc:	fc 85       	ldd	r31, Y+12	; 0x0c
    3abe:	f4 ff       	sbrs	r31, 4
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <vfprintf+0x1c2>
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	81 33       	cpi	r24, 0x31	; 49
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <vfprintf+0x1c2>
    3ac8:	4a 94       	dec	r4
    3aca:	14 14       	cp	r1, r4
    3acc:	74 f5       	brge	.+92     	; 0x3b2a <vfprintf+0x222>
    3ace:	28 e0       	ldi	r18, 0x08	; 8
    3ad0:	24 15       	cp	r18, r4
    3ad2:	78 f5       	brcc	.+94     	; 0x3b32 <vfprintf+0x22a>
    3ad4:	88 e0       	ldi	r24, 0x08	; 8
    3ad6:	48 2e       	mov	r4, r24
    3ad8:	2c c0       	rjmp	.+88     	; 0x3b32 <vfprintf+0x22a>
    3ada:	96 fc       	sbrc	r9, 6
    3adc:	2a c0       	rjmp	.+84     	; 0x3b32 <vfprintf+0x22a>
    3ade:	81 2f       	mov	r24, r17
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	8c 15       	cp	r24, r12
    3ae4:	9d 05       	cpc	r25, r13
    3ae6:	9c f0       	brlt	.+38     	; 0x3b0e <vfprintf+0x206>
    3ae8:	3c ef       	ldi	r19, 0xFC	; 252
    3aea:	c3 16       	cp	r12, r19
    3aec:	3f ef       	ldi	r19, 0xFF	; 255
    3aee:	d3 06       	cpc	r13, r19
    3af0:	74 f0       	brlt	.+28     	; 0x3b0e <vfprintf+0x206>
    3af2:	89 2d       	mov	r24, r9
    3af4:	80 68       	ori	r24, 0x80	; 128
    3af6:	98 2e       	mov	r9, r24
    3af8:	0a c0       	rjmp	.+20     	; 0x3b0e <vfprintf+0x206>
    3afa:	e2 e0       	ldi	r30, 0x02	; 2
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	ec 0f       	add	r30, r28
    3b00:	fd 1f       	adc	r31, r29
    3b02:	e1 0f       	add	r30, r17
    3b04:	f1 1d       	adc	r31, r1
    3b06:	80 81       	ld	r24, Z
    3b08:	80 33       	cpi	r24, 0x30	; 48
    3b0a:	19 f4       	brne	.+6      	; 0x3b12 <vfprintf+0x20a>
    3b0c:	11 50       	subi	r17, 0x01	; 1
    3b0e:	11 11       	cpse	r17, r1
    3b10:	f4 cf       	rjmp	.-24     	; 0x3afa <vfprintf+0x1f2>
    3b12:	97 fe       	sbrs	r9, 7
    3b14:	0e c0       	rjmp	.+28     	; 0x3b32 <vfprintf+0x22a>
    3b16:	44 24       	eor	r4, r4
    3b18:	43 94       	inc	r4
    3b1a:	41 0e       	add	r4, r17
    3b1c:	81 2f       	mov	r24, r17
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	c8 16       	cp	r12, r24
    3b22:	d9 06       	cpc	r13, r25
    3b24:	2c f4       	brge	.+10     	; 0x3b30 <vfprintf+0x228>
    3b26:	1c 19       	sub	r17, r12
    3b28:	04 c0       	rjmp	.+8      	; 0x3b32 <vfprintf+0x22a>
    3b2a:	44 24       	eor	r4, r4
    3b2c:	43 94       	inc	r4
    3b2e:	01 c0       	rjmp	.+2      	; 0x3b32 <vfprintf+0x22a>
    3b30:	10 e0       	ldi	r17, 0x00	; 0
    3b32:	97 fe       	sbrs	r9, 7
    3b34:	06 c0       	rjmp	.+12     	; 0x3b42 <vfprintf+0x23a>
    3b36:	1c 14       	cp	r1, r12
    3b38:	1d 04       	cpc	r1, r13
    3b3a:	34 f4       	brge	.+12     	; 0x3b48 <vfprintf+0x240>
    3b3c:	c6 01       	movw	r24, r12
    3b3e:	01 96       	adiw	r24, 0x01	; 1
    3b40:	05 c0       	rjmp	.+10     	; 0x3b4c <vfprintf+0x244>
    3b42:	85 e0       	ldi	r24, 0x05	; 5
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <vfprintf+0x244>
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	01 11       	cpse	r16, r1
    3b4e:	01 96       	adiw	r24, 0x01	; 1
    3b50:	11 23       	and	r17, r17
    3b52:	31 f0       	breq	.+12     	; 0x3b60 <vfprintf+0x258>
    3b54:	21 2f       	mov	r18, r17
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	2f 5f       	subi	r18, 0xFF	; 255
    3b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5c:	82 0f       	add	r24, r18
    3b5e:	93 1f       	adc	r25, r19
    3b60:	25 2d       	mov	r18, r5
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	82 17       	cp	r24, r18
    3b66:	93 07       	cpc	r25, r19
    3b68:	14 f4       	brge	.+4      	; 0x3b6e <vfprintf+0x266>
    3b6a:	58 1a       	sub	r5, r24
    3b6c:	01 c0       	rjmp	.+2      	; 0x3b70 <vfprintf+0x268>
    3b6e:	51 2c       	mov	r5, r1
    3b70:	89 2d       	mov	r24, r9
    3b72:	89 70       	andi	r24, 0x09	; 9
    3b74:	49 f4       	brne	.+18     	; 0x3b88 <vfprintf+0x280>
    3b76:	55 20       	and	r5, r5
    3b78:	39 f0       	breq	.+14     	; 0x3b88 <vfprintf+0x280>
    3b7a:	b7 01       	movw	r22, r14
    3b7c:	80 e2       	ldi	r24, 0x20	; 32
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3b84:	5a 94       	dec	r5
    3b86:	f7 cf       	rjmp	.-18     	; 0x3b76 <vfprintf+0x26e>
    3b88:	00 23       	and	r16, r16
    3b8a:	29 f0       	breq	.+10     	; 0x3b96 <vfprintf+0x28e>
    3b8c:	b7 01       	movw	r22, r14
    3b8e:	80 2f       	mov	r24, r16
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3b96:	93 fc       	sbrc	r9, 3
    3b98:	09 c0       	rjmp	.+18     	; 0x3bac <vfprintf+0x2a4>
    3b9a:	55 20       	and	r5, r5
    3b9c:	39 f0       	breq	.+14     	; 0x3bac <vfprintf+0x2a4>
    3b9e:	b7 01       	movw	r22, r14
    3ba0:	80 e3       	ldi	r24, 0x30	; 48
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3ba8:	5a 94       	dec	r5
    3baa:	f7 cf       	rjmp	.-18     	; 0x3b9a <vfprintf+0x292>
    3bac:	97 fe       	sbrs	r9, 7
    3bae:	4c c0       	rjmp	.+152    	; 0x3c48 <vfprintf+0x340>
    3bb0:	46 01       	movw	r8, r12
    3bb2:	d7 fe       	sbrs	r13, 7
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <vfprintf+0x2b2>
    3bb6:	81 2c       	mov	r8, r1
    3bb8:	91 2c       	mov	r9, r1
    3bba:	c6 01       	movw	r24, r12
    3bbc:	88 19       	sub	r24, r8
    3bbe:	99 09       	sbc	r25, r9
    3bc0:	f3 01       	movw	r30, r6
    3bc2:	e8 0f       	add	r30, r24
    3bc4:	f9 1f       	adc	r31, r25
    3bc6:	ed 87       	std	Y+13, r30	; 0x0d
    3bc8:	fe 87       	std	Y+14, r31	; 0x0e
    3bca:	96 01       	movw	r18, r12
    3bcc:	24 19       	sub	r18, r4
    3bce:	31 09       	sbc	r19, r1
    3bd0:	2f 87       	std	Y+15, r18	; 0x0f
    3bd2:	38 8b       	std	Y+16, r19	; 0x10
    3bd4:	01 2f       	mov	r16, r17
    3bd6:	10 e0       	ldi	r17, 0x00	; 0
    3bd8:	11 95       	neg	r17
    3bda:	01 95       	neg	r16
    3bdc:	11 09       	sbc	r17, r1
    3bde:	3f ef       	ldi	r19, 0xFF	; 255
    3be0:	83 16       	cp	r8, r19
    3be2:	93 06       	cpc	r9, r19
    3be4:	29 f4       	brne	.+10     	; 0x3bf0 <vfprintf+0x2e8>
    3be6:	b7 01       	movw	r22, r14
    3be8:	8e e2       	ldi	r24, 0x2E	; 46
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3bf0:	c8 14       	cp	r12, r8
    3bf2:	d9 04       	cpc	r13, r9
    3bf4:	4c f0       	brlt	.+18     	; 0x3c08 <vfprintf+0x300>
    3bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf8:	98 89       	ldd	r25, Y+16	; 0x10
    3bfa:	88 15       	cp	r24, r8
    3bfc:	99 05       	cpc	r25, r9
    3bfe:	24 f4       	brge	.+8      	; 0x3c08 <vfprintf+0x300>
    3c00:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c02:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c04:	81 81       	ldd	r24, Z+1	; 0x01
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <vfprintf+0x302>
    3c08:	80 e3       	ldi	r24, 0x30	; 48
    3c0a:	f1 e0       	ldi	r31, 0x01	; 1
    3c0c:	8f 1a       	sub	r8, r31
    3c0e:	91 08       	sbc	r9, r1
    3c10:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c12:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c14:	2f 5f       	subi	r18, 0xFF	; 255
    3c16:	3f 4f       	sbci	r19, 0xFF	; 255
    3c18:	2d 87       	std	Y+13, r18	; 0x0d
    3c1a:	3e 87       	std	Y+14, r19	; 0x0e
    3c1c:	80 16       	cp	r8, r16
    3c1e:	91 06       	cpc	r9, r17
    3c20:	2c f0       	brlt	.+10     	; 0x3c2c <vfprintf+0x324>
    3c22:	b7 01       	movw	r22, r14
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3c2a:	d9 cf       	rjmp	.-78     	; 0x3bde <vfprintf+0x2d6>
    3c2c:	c8 14       	cp	r12, r8
    3c2e:	d9 04       	cpc	r13, r9
    3c30:	41 f4       	brne	.+16     	; 0x3c42 <vfprintf+0x33a>
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	96 33       	cpi	r25, 0x36	; 54
    3c36:	20 f4       	brcc	.+8      	; 0x3c40 <vfprintf+0x338>
    3c38:	95 33       	cpi	r25, 0x35	; 53
    3c3a:	19 f4       	brne	.+6      	; 0x3c42 <vfprintf+0x33a>
    3c3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c3e:	34 ff       	sbrs	r19, 4
    3c40:	81 e3       	ldi	r24, 0x31	; 49
    3c42:	b7 01       	movw	r22, r14
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	4e c0       	rjmp	.+156    	; 0x3ce4 <vfprintf+0x3dc>
    3c48:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4a:	81 33       	cpi	r24, 0x31	; 49
    3c4c:	19 f0       	breq	.+6      	; 0x3c54 <vfprintf+0x34c>
    3c4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c50:	9f 7e       	andi	r25, 0xEF	; 239
    3c52:	9c 87       	std	Y+12, r25	; 0x0c
    3c54:	b7 01       	movw	r22, r14
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3c5c:	11 11       	cpse	r17, r1
    3c5e:	05 c0       	rjmp	.+10     	; 0x3c6a <vfprintf+0x362>
    3c60:	94 fc       	sbrc	r9, 4
    3c62:	18 c0       	rjmp	.+48     	; 0x3c94 <vfprintf+0x38c>
    3c64:	85 e6       	ldi	r24, 0x65	; 101
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	17 c0       	rjmp	.+46     	; 0x3c98 <vfprintf+0x390>
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	8e e2       	ldi	r24, 0x2E	; 46
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3c74:	1e 5f       	subi	r17, 0xFE	; 254
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	01 e0       	ldi	r16, 0x01	; 1
    3c7a:	08 0f       	add	r16, r24
    3c7c:	f3 01       	movw	r30, r6
    3c7e:	e8 0f       	add	r30, r24
    3c80:	f1 1d       	adc	r31, r1
    3c82:	80 81       	ld	r24, Z
    3c84:	b7 01       	movw	r22, r14
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3c8c:	80 2f       	mov	r24, r16
    3c8e:	01 13       	cpse	r16, r17
    3c90:	f3 cf       	rjmp	.-26     	; 0x3c78 <vfprintf+0x370>
    3c92:	e6 cf       	rjmp	.-52     	; 0x3c60 <vfprintf+0x358>
    3c94:	85 e4       	ldi	r24, 0x45	; 69
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	b7 01       	movw	r22, r14
    3c9a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3c9e:	d7 fc       	sbrc	r13, 7
    3ca0:	06 c0       	rjmp	.+12     	; 0x3cae <vfprintf+0x3a6>
    3ca2:	c1 14       	cp	r12, r1
    3ca4:	d1 04       	cpc	r13, r1
    3ca6:	41 f4       	brne	.+16     	; 0x3cb8 <vfprintf+0x3b0>
    3ca8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3caa:	e4 ff       	sbrs	r30, 4
    3cac:	05 c0       	rjmp	.+10     	; 0x3cb8 <vfprintf+0x3b0>
    3cae:	d1 94       	neg	r13
    3cb0:	c1 94       	neg	r12
    3cb2:	d1 08       	sbc	r13, r1
    3cb4:	8d e2       	ldi	r24, 0x2D	; 45
    3cb6:	01 c0       	rjmp	.+2      	; 0x3cba <vfprintf+0x3b2>
    3cb8:	8b e2       	ldi	r24, 0x2B	; 43
    3cba:	b7 01       	movw	r22, r14
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3cc2:	80 e3       	ldi	r24, 0x30	; 48
    3cc4:	2a e0       	ldi	r18, 0x0A	; 10
    3cc6:	c2 16       	cp	r12, r18
    3cc8:	d1 04       	cpc	r13, r1
    3cca:	2c f0       	brlt	.+10     	; 0x3cd6 <vfprintf+0x3ce>
    3ccc:	8f 5f       	subi	r24, 0xFF	; 255
    3cce:	fa e0       	ldi	r31, 0x0A	; 10
    3cd0:	cf 1a       	sub	r12, r31
    3cd2:	d1 08       	sbc	r13, r1
    3cd4:	f7 cf       	rjmp	.-18     	; 0x3cc4 <vfprintf+0x3bc>
    3cd6:	b7 01       	movw	r22, r14
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3cde:	b7 01       	movw	r22, r14
    3ce0:	c6 01       	movw	r24, r12
    3ce2:	c0 96       	adiw	r24, 0x30	; 48
    3ce4:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3ce8:	54 c1       	rjmp	.+680    	; 0x3f92 <vfprintf+0x68a>
    3cea:	83 36       	cpi	r24, 0x63	; 99
    3cec:	31 f0       	breq	.+12     	; 0x3cfa <vfprintf+0x3f2>
    3cee:	83 37       	cpi	r24, 0x73	; 115
    3cf0:	79 f0       	breq	.+30     	; 0x3d10 <vfprintf+0x408>
    3cf2:	83 35       	cpi	r24, 0x53	; 83
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <vfprintf+0x3f0>
    3cf6:	56 c0       	rjmp	.+172    	; 0x3da4 <vfprintf+0x49c>
    3cf8:	20 c0       	rjmp	.+64     	; 0x3d3a <vfprintf+0x432>
    3cfa:	56 01       	movw	r10, r12
    3cfc:	32 e0       	ldi	r19, 0x02	; 2
    3cfe:	a3 0e       	add	r10, r19
    3d00:	b1 1c       	adc	r11, r1
    3d02:	f6 01       	movw	r30, r12
    3d04:	80 81       	ld	r24, Z
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	01 e0       	ldi	r16, 0x01	; 1
    3d0a:	10 e0       	ldi	r17, 0x00	; 0
    3d0c:	63 01       	movw	r12, r6
    3d0e:	12 c0       	rjmp	.+36     	; 0x3d34 <vfprintf+0x42c>
    3d10:	56 01       	movw	r10, r12
    3d12:	f2 e0       	ldi	r31, 0x02	; 2
    3d14:	af 0e       	add	r10, r31
    3d16:	b1 1c       	adc	r11, r1
    3d18:	f6 01       	movw	r30, r12
    3d1a:	c0 80       	ld	r12, Z
    3d1c:	d1 80       	ldd	r13, Z+1	; 0x01
    3d1e:	96 fe       	sbrs	r9, 6
    3d20:	03 c0       	rjmp	.+6      	; 0x3d28 <vfprintf+0x420>
    3d22:	61 2f       	mov	r22, r17
    3d24:	70 e0       	ldi	r23, 0x00	; 0
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <vfprintf+0x424>
    3d28:	6f ef       	ldi	r22, 0xFF	; 255
    3d2a:	7f ef       	ldi	r23, 0xFF	; 255
    3d2c:	c6 01       	movw	r24, r12
    3d2e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <strnlen>
    3d32:	8c 01       	movw	r16, r24
    3d34:	f9 2d       	mov	r31, r9
    3d36:	ff 77       	andi	r31, 0x7F	; 127
    3d38:	14 c0       	rjmp	.+40     	; 0x3d62 <vfprintf+0x45a>
    3d3a:	56 01       	movw	r10, r12
    3d3c:	22 e0       	ldi	r18, 0x02	; 2
    3d3e:	a2 0e       	add	r10, r18
    3d40:	b1 1c       	adc	r11, r1
    3d42:	f6 01       	movw	r30, r12
    3d44:	c0 80       	ld	r12, Z
    3d46:	d1 80       	ldd	r13, Z+1	; 0x01
    3d48:	96 fe       	sbrs	r9, 6
    3d4a:	03 c0       	rjmp	.+6      	; 0x3d52 <vfprintf+0x44a>
    3d4c:	61 2f       	mov	r22, r17
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <vfprintf+0x44e>
    3d52:	6f ef       	ldi	r22, 0xFF	; 255
    3d54:	7f ef       	ldi	r23, 0xFF	; 255
    3d56:	c6 01       	movw	r24, r12
    3d58:	0e 94 ba 21 	call	0x4374	; 0x4374 <strnlen_P>
    3d5c:	8c 01       	movw	r16, r24
    3d5e:	f9 2d       	mov	r31, r9
    3d60:	f0 68       	ori	r31, 0x80	; 128
    3d62:	9f 2e       	mov	r9, r31
    3d64:	f3 fd       	sbrc	r31, 3
    3d66:	1a c0       	rjmp	.+52     	; 0x3d9c <vfprintf+0x494>
    3d68:	85 2d       	mov	r24, r5
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	08 17       	cp	r16, r24
    3d6e:	19 07       	cpc	r17, r25
    3d70:	a8 f4       	brcc	.+42     	; 0x3d9c <vfprintf+0x494>
    3d72:	b7 01       	movw	r22, r14
    3d74:	80 e2       	ldi	r24, 0x20	; 32
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3d7c:	5a 94       	dec	r5
    3d7e:	f4 cf       	rjmp	.-24     	; 0x3d68 <vfprintf+0x460>
    3d80:	f6 01       	movw	r30, r12
    3d82:	97 fc       	sbrc	r9, 7
    3d84:	85 91       	lpm	r24, Z+
    3d86:	97 fe       	sbrs	r9, 7
    3d88:	81 91       	ld	r24, Z+
    3d8a:	6f 01       	movw	r12, r30
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3d94:	51 10       	cpse	r5, r1
    3d96:	5a 94       	dec	r5
    3d98:	01 50       	subi	r16, 0x01	; 1
    3d9a:	11 09       	sbc	r17, r1
    3d9c:	01 15       	cp	r16, r1
    3d9e:	11 05       	cpc	r17, r1
    3da0:	79 f7       	brne	.-34     	; 0x3d80 <vfprintf+0x478>
    3da2:	f7 c0       	rjmp	.+494    	; 0x3f92 <vfprintf+0x68a>
    3da4:	84 36       	cpi	r24, 0x64	; 100
    3da6:	11 f0       	breq	.+4      	; 0x3dac <vfprintf+0x4a4>
    3da8:	89 36       	cpi	r24, 0x69	; 105
    3daa:	61 f5       	brne	.+88     	; 0x3e04 <vfprintf+0x4fc>
    3dac:	56 01       	movw	r10, r12
    3dae:	97 fe       	sbrs	r9, 7
    3db0:	09 c0       	rjmp	.+18     	; 0x3dc4 <vfprintf+0x4bc>
    3db2:	24 e0       	ldi	r18, 0x04	; 4
    3db4:	a2 0e       	add	r10, r18
    3db6:	b1 1c       	adc	r11, r1
    3db8:	f6 01       	movw	r30, r12
    3dba:	60 81       	ld	r22, Z
    3dbc:	71 81       	ldd	r23, Z+1	; 0x01
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	0a c0       	rjmp	.+20     	; 0x3dd8 <vfprintf+0x4d0>
    3dc4:	f2 e0       	ldi	r31, 0x02	; 2
    3dc6:	af 0e       	add	r10, r31
    3dc8:	b1 1c       	adc	r11, r1
    3dca:	f6 01       	movw	r30, r12
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	07 2e       	mov	r0, r23
    3dd2:	00 0c       	add	r0, r0
    3dd4:	88 0b       	sbc	r24, r24
    3dd6:	99 0b       	sbc	r25, r25
    3dd8:	f9 2d       	mov	r31, r9
    3dda:	ff 76       	andi	r31, 0x6F	; 111
    3ddc:	9f 2e       	mov	r9, r31
    3dde:	97 ff       	sbrs	r25, 7
    3de0:	09 c0       	rjmp	.+18     	; 0x3df4 <vfprintf+0x4ec>
    3de2:	90 95       	com	r25
    3de4:	80 95       	com	r24
    3de6:	70 95       	com	r23
    3de8:	61 95       	neg	r22
    3dea:	7f 4f       	sbci	r23, 0xFF	; 255
    3dec:	8f 4f       	sbci	r24, 0xFF	; 255
    3dee:	9f 4f       	sbci	r25, 0xFF	; 255
    3df0:	f0 68       	ori	r31, 0x80	; 128
    3df2:	9f 2e       	mov	r9, r31
    3df4:	2a e0       	ldi	r18, 0x0A	; 10
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	a3 01       	movw	r20, r6
    3dfa:	0e 94 55 22 	call	0x44aa	; 0x44aa <__ultoa_invert>
    3dfe:	c8 2e       	mov	r12, r24
    3e00:	c6 18       	sub	r12, r6
    3e02:	3f c0       	rjmp	.+126    	; 0x3e82 <vfprintf+0x57a>
    3e04:	09 2d       	mov	r16, r9
    3e06:	85 37       	cpi	r24, 0x75	; 117
    3e08:	21 f4       	brne	.+8      	; 0x3e12 <vfprintf+0x50a>
    3e0a:	0f 7e       	andi	r16, 0xEF	; 239
    3e0c:	2a e0       	ldi	r18, 0x0A	; 10
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	1d c0       	rjmp	.+58     	; 0x3e4c <vfprintf+0x544>
    3e12:	09 7f       	andi	r16, 0xF9	; 249
    3e14:	8f 36       	cpi	r24, 0x6F	; 111
    3e16:	91 f0       	breq	.+36     	; 0x3e3c <vfprintf+0x534>
    3e18:	18 f4       	brcc	.+6      	; 0x3e20 <vfprintf+0x518>
    3e1a:	88 35       	cpi	r24, 0x58	; 88
    3e1c:	59 f0       	breq	.+22     	; 0x3e34 <vfprintf+0x52c>
    3e1e:	c3 c0       	rjmp	.+390    	; 0x3fa6 <vfprintf+0x69e>
    3e20:	80 37       	cpi	r24, 0x70	; 112
    3e22:	19 f0       	breq	.+6      	; 0x3e2a <vfprintf+0x522>
    3e24:	88 37       	cpi	r24, 0x78	; 120
    3e26:	11 f0       	breq	.+4      	; 0x3e2c <vfprintf+0x524>
    3e28:	be c0       	rjmp	.+380    	; 0x3fa6 <vfprintf+0x69e>
    3e2a:	00 61       	ori	r16, 0x10	; 16
    3e2c:	04 ff       	sbrs	r16, 4
    3e2e:	09 c0       	rjmp	.+18     	; 0x3e42 <vfprintf+0x53a>
    3e30:	04 60       	ori	r16, 0x04	; 4
    3e32:	07 c0       	rjmp	.+14     	; 0x3e42 <vfprintf+0x53a>
    3e34:	94 fe       	sbrs	r9, 4
    3e36:	08 c0       	rjmp	.+16     	; 0x3e48 <vfprintf+0x540>
    3e38:	06 60       	ori	r16, 0x06	; 6
    3e3a:	06 c0       	rjmp	.+12     	; 0x3e48 <vfprintf+0x540>
    3e3c:	28 e0       	ldi	r18, 0x08	; 8
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	05 c0       	rjmp	.+10     	; 0x3e4c <vfprintf+0x544>
    3e42:	20 e1       	ldi	r18, 0x10	; 16
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <vfprintf+0x544>
    3e48:	20 e1       	ldi	r18, 0x10	; 16
    3e4a:	32 e0       	ldi	r19, 0x02	; 2
    3e4c:	56 01       	movw	r10, r12
    3e4e:	07 ff       	sbrs	r16, 7
    3e50:	09 c0       	rjmp	.+18     	; 0x3e64 <vfprintf+0x55c>
    3e52:	84 e0       	ldi	r24, 0x04	; 4
    3e54:	a8 0e       	add	r10, r24
    3e56:	b1 1c       	adc	r11, r1
    3e58:	f6 01       	movw	r30, r12
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	08 c0       	rjmp	.+16     	; 0x3e74 <vfprintf+0x56c>
    3e64:	f2 e0       	ldi	r31, 0x02	; 2
    3e66:	af 0e       	add	r10, r31
    3e68:	b1 1c       	adc	r11, r1
    3e6a:	f6 01       	movw	r30, r12
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	a3 01       	movw	r20, r6
    3e76:	0e 94 55 22 	call	0x44aa	; 0x44aa <__ultoa_invert>
    3e7a:	c8 2e       	mov	r12, r24
    3e7c:	c6 18       	sub	r12, r6
    3e7e:	0f 77       	andi	r16, 0x7F	; 127
    3e80:	90 2e       	mov	r9, r16
    3e82:	96 fe       	sbrs	r9, 6
    3e84:	0b c0       	rjmp	.+22     	; 0x3e9c <vfprintf+0x594>
    3e86:	09 2d       	mov	r16, r9
    3e88:	0e 7f       	andi	r16, 0xFE	; 254
    3e8a:	c1 16       	cp	r12, r17
    3e8c:	50 f4       	brcc	.+20     	; 0x3ea2 <vfprintf+0x59a>
    3e8e:	94 fe       	sbrs	r9, 4
    3e90:	0a c0       	rjmp	.+20     	; 0x3ea6 <vfprintf+0x59e>
    3e92:	92 fc       	sbrc	r9, 2
    3e94:	08 c0       	rjmp	.+16     	; 0x3ea6 <vfprintf+0x59e>
    3e96:	09 2d       	mov	r16, r9
    3e98:	0e 7e       	andi	r16, 0xEE	; 238
    3e9a:	05 c0       	rjmp	.+10     	; 0x3ea6 <vfprintf+0x59e>
    3e9c:	dc 2c       	mov	r13, r12
    3e9e:	09 2d       	mov	r16, r9
    3ea0:	03 c0       	rjmp	.+6      	; 0x3ea8 <vfprintf+0x5a0>
    3ea2:	dc 2c       	mov	r13, r12
    3ea4:	01 c0       	rjmp	.+2      	; 0x3ea8 <vfprintf+0x5a0>
    3ea6:	d1 2e       	mov	r13, r17
    3ea8:	04 ff       	sbrs	r16, 4
    3eaa:	0d c0       	rjmp	.+26     	; 0x3ec6 <vfprintf+0x5be>
    3eac:	fe 01       	movw	r30, r28
    3eae:	ec 0d       	add	r30, r12
    3eb0:	f1 1d       	adc	r31, r1
    3eb2:	80 81       	ld	r24, Z
    3eb4:	80 33       	cpi	r24, 0x30	; 48
    3eb6:	11 f4       	brne	.+4      	; 0x3ebc <vfprintf+0x5b4>
    3eb8:	09 7e       	andi	r16, 0xE9	; 233
    3eba:	09 c0       	rjmp	.+18     	; 0x3ece <vfprintf+0x5c6>
    3ebc:	02 ff       	sbrs	r16, 2
    3ebe:	06 c0       	rjmp	.+12     	; 0x3ecc <vfprintf+0x5c4>
    3ec0:	d3 94       	inc	r13
    3ec2:	d3 94       	inc	r13
    3ec4:	04 c0       	rjmp	.+8      	; 0x3ece <vfprintf+0x5c6>
    3ec6:	80 2f       	mov	r24, r16
    3ec8:	86 78       	andi	r24, 0x86	; 134
    3eca:	09 f0       	breq	.+2      	; 0x3ece <vfprintf+0x5c6>
    3ecc:	d3 94       	inc	r13
    3ece:	03 fd       	sbrc	r16, 3
    3ed0:	11 c0       	rjmp	.+34     	; 0x3ef4 <vfprintf+0x5ec>
    3ed2:	00 ff       	sbrs	r16, 0
    3ed4:	06 c0       	rjmp	.+12     	; 0x3ee2 <vfprintf+0x5da>
    3ed6:	1c 2d       	mov	r17, r12
    3ed8:	d5 14       	cp	r13, r5
    3eda:	80 f4       	brcc	.+32     	; 0x3efc <vfprintf+0x5f4>
    3edc:	15 0d       	add	r17, r5
    3ede:	1d 19       	sub	r17, r13
    3ee0:	0d c0       	rjmp	.+26     	; 0x3efc <vfprintf+0x5f4>
    3ee2:	d5 14       	cp	r13, r5
    3ee4:	58 f4       	brcc	.+22     	; 0x3efc <vfprintf+0x5f4>
    3ee6:	b7 01       	movw	r22, r14
    3ee8:	80 e2       	ldi	r24, 0x20	; 32
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3ef0:	d3 94       	inc	r13
    3ef2:	f7 cf       	rjmp	.-18     	; 0x3ee2 <vfprintf+0x5da>
    3ef4:	d5 14       	cp	r13, r5
    3ef6:	10 f4       	brcc	.+4      	; 0x3efc <vfprintf+0x5f4>
    3ef8:	5d 18       	sub	r5, r13
    3efa:	01 c0       	rjmp	.+2      	; 0x3efe <vfprintf+0x5f6>
    3efc:	51 2c       	mov	r5, r1
    3efe:	04 ff       	sbrs	r16, 4
    3f00:	10 c0       	rjmp	.+32     	; 0x3f22 <vfprintf+0x61a>
    3f02:	b7 01       	movw	r22, r14
    3f04:	80 e3       	ldi	r24, 0x30	; 48
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3f0c:	02 ff       	sbrs	r16, 2
    3f0e:	17 c0       	rjmp	.+46     	; 0x3f3e <vfprintf+0x636>
    3f10:	01 fd       	sbrc	r16, 1
    3f12:	03 c0       	rjmp	.+6      	; 0x3f1a <vfprintf+0x612>
    3f14:	88 e7       	ldi	r24, 0x78	; 120
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <vfprintf+0x616>
    3f1a:	88 e5       	ldi	r24, 0x58	; 88
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	b7 01       	movw	r22, r14
    3f20:	0c c0       	rjmp	.+24     	; 0x3f3a <vfprintf+0x632>
    3f22:	80 2f       	mov	r24, r16
    3f24:	86 78       	andi	r24, 0x86	; 134
    3f26:	59 f0       	breq	.+22     	; 0x3f3e <vfprintf+0x636>
    3f28:	01 ff       	sbrs	r16, 1
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <vfprintf+0x628>
    3f2c:	8b e2       	ldi	r24, 0x2B	; 43
    3f2e:	01 c0       	rjmp	.+2      	; 0x3f32 <vfprintf+0x62a>
    3f30:	80 e2       	ldi	r24, 0x20	; 32
    3f32:	07 fd       	sbrc	r16, 7
    3f34:	8d e2       	ldi	r24, 0x2D	; 45
    3f36:	b7 01       	movw	r22, r14
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3f3e:	c1 16       	cp	r12, r17
    3f40:	38 f4       	brcc	.+14     	; 0x3f50 <vfprintf+0x648>
    3f42:	b7 01       	movw	r22, r14
    3f44:	80 e3       	ldi	r24, 0x30	; 48
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3f4c:	11 50       	subi	r17, 0x01	; 1
    3f4e:	f7 cf       	rjmp	.-18     	; 0x3f3e <vfprintf+0x636>
    3f50:	ca 94       	dec	r12
    3f52:	f3 01       	movw	r30, r6
    3f54:	ec 0d       	add	r30, r12
    3f56:	f1 1d       	adc	r31, r1
    3f58:	80 81       	ld	r24, Z
    3f5a:	b7 01       	movw	r22, r14
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3f62:	c1 10       	cpse	r12, r1
    3f64:	f5 cf       	rjmp	.-22     	; 0x3f50 <vfprintf+0x648>
    3f66:	15 c0       	rjmp	.+42     	; 0x3f92 <vfprintf+0x68a>
    3f68:	f4 e0       	ldi	r31, 0x04	; 4
    3f6a:	f5 15       	cp	r31, r5
    3f6c:	60 f5       	brcc	.+88     	; 0x3fc6 <vfprintf+0x6be>
    3f6e:	84 e0       	ldi	r24, 0x04	; 4
    3f70:	58 1a       	sub	r5, r24
    3f72:	93 fe       	sbrs	r9, 3
    3f74:	1f c0       	rjmp	.+62     	; 0x3fb4 <vfprintf+0x6ac>
    3f76:	01 11       	cpse	r16, r1
    3f78:	27 c0       	rjmp	.+78     	; 0x3fc8 <vfprintf+0x6c0>
    3f7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f7c:	23 ff       	sbrs	r18, 3
    3f7e:	2a c0       	rjmp	.+84     	; 0x3fd4 <vfprintf+0x6cc>
    3f80:	02 e5       	ldi	r16, 0x52	; 82
    3f82:	11 e0       	ldi	r17, 0x01	; 1
    3f84:	39 2d       	mov	r19, r9
    3f86:	30 71       	andi	r19, 0x10	; 16
    3f88:	93 2e       	mov	r9, r19
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	84 91       	lpm	r24, Z
    3f8e:	81 11       	cpse	r24, r1
    3f90:	24 c0       	rjmp	.+72     	; 0x3fda <vfprintf+0x6d2>
    3f92:	55 20       	and	r5, r5
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <vfprintf+0x690>
    3f96:	e4 cc       	rjmp	.-1592   	; 0x3960 <vfprintf+0x58>
    3f98:	b7 01       	movw	r22, r14
    3f9a:	80 e2       	ldi	r24, 0x20	; 32
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3fa2:	5a 94       	dec	r5
    3fa4:	f6 cf       	rjmp	.-20     	; 0x3f92 <vfprintf+0x68a>
    3fa6:	f7 01       	movw	r30, r14
    3fa8:	86 81       	ldd	r24, Z+6	; 0x06
    3faa:	97 81       	ldd	r25, Z+7	; 0x07
    3fac:	26 c0       	rjmp	.+76     	; 0x3ffa <vfprintf+0x6f2>
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	9f ef       	ldi	r25, 0xFF	; 255
    3fb2:	23 c0       	rjmp	.+70     	; 0x3ffa <vfprintf+0x6f2>
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	80 e2       	ldi	r24, 0x20	; 32
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3fbe:	5a 94       	dec	r5
    3fc0:	51 10       	cpse	r5, r1
    3fc2:	f8 cf       	rjmp	.-16     	; 0x3fb4 <vfprintf+0x6ac>
    3fc4:	d8 cf       	rjmp	.-80     	; 0x3f76 <vfprintf+0x66e>
    3fc6:	51 2c       	mov	r5, r1
    3fc8:	b7 01       	movw	r22, r14
    3fca:	80 2f       	mov	r24, r16
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3fd2:	d3 cf       	rjmp	.-90     	; 0x3f7a <vfprintf+0x672>
    3fd4:	06 e5       	ldi	r16, 0x56	; 86
    3fd6:	11 e0       	ldi	r17, 0x01	; 1
    3fd8:	d5 cf       	rjmp	.-86     	; 0x3f84 <vfprintf+0x67c>
    3fda:	91 10       	cpse	r9, r1
    3fdc:	80 52       	subi	r24, 0x20	; 32
    3fde:	b7 01       	movw	r22, r14
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <fputc>
    3fe6:	0f 5f       	subi	r16, 0xFF	; 255
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	cf cf       	rjmp	.-98     	; 0x3f8a <vfprintf+0x682>
    3fec:	23 e0       	ldi	r18, 0x03	; 3
    3fee:	25 15       	cp	r18, r5
    3ff0:	10 f4       	brcc	.+4      	; 0x3ff6 <vfprintf+0x6ee>
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	bd cf       	rjmp	.-134    	; 0x3f70 <vfprintf+0x668>
    3ff6:	51 2c       	mov	r5, r1
    3ff8:	c0 cf       	rjmp	.-128    	; 0x3f7a <vfprintf+0x672>
    3ffa:	60 96       	adiw	r28, 0x10	; 16
    3ffc:	e2 e1       	ldi	r30, 0x12	; 18
    3ffe:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__>

00004002 <__divmodhi4>:
    4002:	97 fb       	bst	r25, 7
    4004:	07 2e       	mov	r0, r23
    4006:	16 f4       	brtc	.+4      	; 0x400c <__divmodhi4+0xa>
    4008:	00 94       	com	r0
    400a:	07 d0       	rcall	.+14     	; 0x401a <__divmodhi4_neg1>
    400c:	77 fd       	sbrc	r23, 7
    400e:	09 d0       	rcall	.+18     	; 0x4022 <__divmodhi4_neg2>
    4010:	0e 94 76 20 	call	0x40ec	; 0x40ec <__udivmodhi4>
    4014:	07 fc       	sbrc	r0, 7
    4016:	05 d0       	rcall	.+10     	; 0x4022 <__divmodhi4_neg2>
    4018:	3e f4       	brtc	.+14     	; 0x4028 <__divmodhi4_exit>

0000401a <__divmodhi4_neg1>:
    401a:	90 95       	com	r25
    401c:	81 95       	neg	r24
    401e:	9f 4f       	sbci	r25, 0xFF	; 255
    4020:	08 95       	ret

00004022 <__divmodhi4_neg2>:
    4022:	70 95       	com	r23
    4024:	61 95       	neg	r22
    4026:	7f 4f       	sbci	r23, 0xFF	; 255

00004028 <__divmodhi4_exit>:
    4028:	08 95       	ret

0000402a <__divmodsi4>:
    402a:	05 2e       	mov	r0, r21
    402c:	97 fb       	bst	r25, 7
    402e:	1e f4       	brtc	.+6      	; 0x4036 <__divmodsi4+0xc>
    4030:	00 94       	com	r0
    4032:	0e 94 2c 20 	call	0x4058	; 0x4058 <__negsi2>
    4036:	57 fd       	sbrc	r21, 7
    4038:	07 d0       	rcall	.+14     	; 0x4048 <__divmodsi4_neg2>
    403a:	0e 94 8a 20 	call	0x4114	; 0x4114 <__udivmodsi4>
    403e:	07 fc       	sbrc	r0, 7
    4040:	03 d0       	rcall	.+6      	; 0x4048 <__divmodsi4_neg2>
    4042:	4e f4       	brtc	.+18     	; 0x4056 <__divmodsi4_exit>
    4044:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__negsi2>

00004048 <__divmodsi4_neg2>:
    4048:	50 95       	com	r21
    404a:	40 95       	com	r20
    404c:	30 95       	com	r19
    404e:	21 95       	neg	r18
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
    4052:	4f 4f       	sbci	r20, 0xFF	; 255
    4054:	5f 4f       	sbci	r21, 0xFF	; 255

00004056 <__divmodsi4_exit>:
    4056:	08 95       	ret

00004058 <__negsi2>:
    4058:	90 95       	com	r25
    405a:	80 95       	com	r24
    405c:	70 95       	com	r23
    405e:	61 95       	neg	r22
    4060:	7f 4f       	sbci	r23, 0xFF	; 255
    4062:	8f 4f       	sbci	r24, 0xFF	; 255
    4064:	9f 4f       	sbci	r25, 0xFF	; 255
    4066:	08 95       	ret

00004068 <__tablejump2__>:
    4068:	ee 0f       	add	r30, r30
    406a:	ff 1f       	adc	r31, r31
    406c:	05 90       	lpm	r0, Z+
    406e:	f4 91       	lpm	r31, Z
    4070:	e0 2d       	mov	r30, r0
    4072:	09 94       	ijmp

00004074 <__muluhisi3>:
    4074:	0e 94 ac 20 	call	0x4158	; 0x4158 <__umulhisi3>
    4078:	a5 9f       	mul	r26, r21
    407a:	90 0d       	add	r25, r0
    407c:	b4 9f       	mul	r27, r20
    407e:	90 0d       	add	r25, r0
    4080:	a4 9f       	mul	r26, r20
    4082:	80 0d       	add	r24, r0
    4084:	91 1d       	adc	r25, r1
    4086:	11 24       	eor	r1, r1
    4088:	08 95       	ret

0000408a <__prologue_saves__>:
    408a:	2f 92       	push	r2
    408c:	3f 92       	push	r3
    408e:	4f 92       	push	r4
    4090:	5f 92       	push	r5
    4092:	6f 92       	push	r6
    4094:	7f 92       	push	r7
    4096:	8f 92       	push	r8
    4098:	9f 92       	push	r9
    409a:	af 92       	push	r10
    409c:	bf 92       	push	r11
    409e:	cf 92       	push	r12
    40a0:	df 92       	push	r13
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	ca 1b       	sub	r28, r26
    40b4:	db 0b       	sbc	r29, r27
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	09 94       	ijmp

000040bc <__epilogue_restores__>:
    40bc:	2a 88       	ldd	r2, Y+18	; 0x12
    40be:	39 88       	ldd	r3, Y+17	; 0x11
    40c0:	48 88       	ldd	r4, Y+16	; 0x10
    40c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    40c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    40c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    40c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    40ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    40cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    40ce:	b9 84       	ldd	r11, Y+9	; 0x09
    40d0:	c8 84       	ldd	r12, Y+8	; 0x08
    40d2:	df 80       	ldd	r13, Y+7	; 0x07
    40d4:	ee 80       	ldd	r14, Y+6	; 0x06
    40d6:	fd 80       	ldd	r15, Y+5	; 0x05
    40d8:	0c 81       	ldd	r16, Y+4	; 0x04
    40da:	1b 81       	ldd	r17, Y+3	; 0x03
    40dc:	aa 81       	ldd	r26, Y+2	; 0x02
    40de:	b9 81       	ldd	r27, Y+1	; 0x01
    40e0:	ce 0f       	add	r28, r30
    40e2:	d1 1d       	adc	r29, r1
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	ed 01       	movw	r28, r26
    40ea:	08 95       	ret

000040ec <__udivmodhi4>:
    40ec:	aa 1b       	sub	r26, r26
    40ee:	bb 1b       	sub	r27, r27
    40f0:	51 e1       	ldi	r21, 0x11	; 17
    40f2:	07 c0       	rjmp	.+14     	; 0x4102 <__udivmodhi4_ep>

000040f4 <__udivmodhi4_loop>:
    40f4:	aa 1f       	adc	r26, r26
    40f6:	bb 1f       	adc	r27, r27
    40f8:	a6 17       	cp	r26, r22
    40fa:	b7 07       	cpc	r27, r23
    40fc:	10 f0       	brcs	.+4      	; 0x4102 <__udivmodhi4_ep>
    40fe:	a6 1b       	sub	r26, r22
    4100:	b7 0b       	sbc	r27, r23

00004102 <__udivmodhi4_ep>:
    4102:	88 1f       	adc	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	5a 95       	dec	r21
    4108:	a9 f7       	brne	.-22     	; 0x40f4 <__udivmodhi4_loop>
    410a:	80 95       	com	r24
    410c:	90 95       	com	r25
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	08 95       	ret

00004114 <__udivmodsi4>:
    4114:	a1 e2       	ldi	r26, 0x21	; 33
    4116:	1a 2e       	mov	r1, r26
    4118:	aa 1b       	sub	r26, r26
    411a:	bb 1b       	sub	r27, r27
    411c:	fd 01       	movw	r30, r26
    411e:	0d c0       	rjmp	.+26     	; 0x413a <__udivmodsi4_ep>

00004120 <__udivmodsi4_loop>:
    4120:	aa 1f       	adc	r26, r26
    4122:	bb 1f       	adc	r27, r27
    4124:	ee 1f       	adc	r30, r30
    4126:	ff 1f       	adc	r31, r31
    4128:	a2 17       	cp	r26, r18
    412a:	b3 07       	cpc	r27, r19
    412c:	e4 07       	cpc	r30, r20
    412e:	f5 07       	cpc	r31, r21
    4130:	20 f0       	brcs	.+8      	; 0x413a <__udivmodsi4_ep>
    4132:	a2 1b       	sub	r26, r18
    4134:	b3 0b       	sbc	r27, r19
    4136:	e4 0b       	sbc	r30, r20
    4138:	f5 0b       	sbc	r31, r21

0000413a <__udivmodsi4_ep>:
    413a:	66 1f       	adc	r22, r22
    413c:	77 1f       	adc	r23, r23
    413e:	88 1f       	adc	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	1a 94       	dec	r1
    4144:	69 f7       	brne	.-38     	; 0x4120 <__udivmodsi4_loop>
    4146:	60 95       	com	r22
    4148:	70 95       	com	r23
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	9b 01       	movw	r18, r22
    4150:	ac 01       	movw	r20, r24
    4152:	bd 01       	movw	r22, r26
    4154:	cf 01       	movw	r24, r30
    4156:	08 95       	ret

00004158 <__umulhisi3>:
    4158:	a2 9f       	mul	r26, r18
    415a:	b0 01       	movw	r22, r0
    415c:	b3 9f       	mul	r27, r19
    415e:	c0 01       	movw	r24, r0
    4160:	a3 9f       	mul	r26, r19
    4162:	70 0d       	add	r23, r0
    4164:	81 1d       	adc	r24, r1
    4166:	11 24       	eor	r1, r1
    4168:	91 1d       	adc	r25, r1
    416a:	b2 9f       	mul	r27, r18
    416c:	70 0d       	add	r23, r0
    416e:	81 1d       	adc	r24, r1
    4170:	11 24       	eor	r1, r1
    4172:	91 1d       	adc	r25, r1
    4174:	08 95       	ret

00004176 <atol>:
    4176:	1f 93       	push	r17
    4178:	fc 01       	movw	r30, r24
    417a:	99 27       	eor	r25, r25
    417c:	88 27       	eor	r24, r24
    417e:	bc 01       	movw	r22, r24
    4180:	e8 94       	clt
    4182:	11 91       	ld	r17, Z+
    4184:	10 32       	cpi	r17, 0x20	; 32
    4186:	e9 f3       	breq	.-6      	; 0x4182 <atol+0xc>
    4188:	19 30       	cpi	r17, 0x09	; 9
    418a:	10 f0       	brcs	.+4      	; 0x4190 <atol+0x1a>
    418c:	1e 30       	cpi	r17, 0x0E	; 14
    418e:	c8 f3       	brcs	.-14     	; 0x4182 <atol+0xc>
    4190:	1b 32       	cpi	r17, 0x2B	; 43
    4192:	51 f0       	breq	.+20     	; 0x41a8 <atol+0x32>
    4194:	1d 32       	cpi	r17, 0x2D	; 45
    4196:	49 f4       	brne	.+18     	; 0x41aa <atol+0x34>
    4198:	68 94       	set
    419a:	06 c0       	rjmp	.+12     	; 0x41a8 <atol+0x32>
    419c:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <__mulsi_const_10>
    41a0:	61 0f       	add	r22, r17
    41a2:	71 1d       	adc	r23, r1
    41a4:	81 1d       	adc	r24, r1
    41a6:	91 1d       	adc	r25, r1
    41a8:	11 91       	ld	r17, Z+
    41aa:	10 53       	subi	r17, 0x30	; 48
    41ac:	1a 30       	cpi	r17, 0x0A	; 10
    41ae:	b0 f3       	brcs	.-20     	; 0x419c <atol+0x26>
    41b0:	3e f4       	brtc	.+14     	; 0x41c0 <atol+0x4a>
    41b2:	90 95       	com	r25
    41b4:	80 95       	com	r24
    41b6:	70 95       	com	r23
    41b8:	61 95       	neg	r22
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	8f 4f       	sbci	r24, 0xFF	; 255
    41be:	9f 4f       	sbci	r25, 0xFF	; 255
    41c0:	1f 91       	pop	r17
    41c2:	08 95       	ret

000041c4 <__ftoa_engine>:
    41c4:	28 30       	cpi	r18, 0x08	; 8
    41c6:	08 f0       	brcs	.+2      	; 0x41ca <__ftoa_engine+0x6>
    41c8:	27 e0       	ldi	r18, 0x07	; 7
    41ca:	33 27       	eor	r19, r19
    41cc:	da 01       	movw	r26, r20
    41ce:	99 0f       	add	r25, r25
    41d0:	31 1d       	adc	r19, r1
    41d2:	87 fd       	sbrc	r24, 7
    41d4:	91 60       	ori	r25, 0x01	; 1
    41d6:	00 96       	adiw	r24, 0x00	; 0
    41d8:	61 05       	cpc	r22, r1
    41da:	71 05       	cpc	r23, r1
    41dc:	39 f4       	brne	.+14     	; 0x41ec <__ftoa_engine+0x28>
    41de:	32 60       	ori	r19, 0x02	; 2
    41e0:	2e 5f       	subi	r18, 0xFE	; 254
    41e2:	3d 93       	st	X+, r19
    41e4:	30 e3       	ldi	r19, 0x30	; 48
    41e6:	2a 95       	dec	r18
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <__ftoa_engine+0x1e>
    41ea:	08 95       	ret
    41ec:	9f 3f       	cpi	r25, 0xFF	; 255
    41ee:	30 f0       	brcs	.+12     	; 0x41fc <__ftoa_engine+0x38>
    41f0:	80 38       	cpi	r24, 0x80	; 128
    41f2:	71 05       	cpc	r23, r1
    41f4:	61 05       	cpc	r22, r1
    41f6:	09 f0       	breq	.+2      	; 0x41fa <__ftoa_engine+0x36>
    41f8:	3c 5f       	subi	r19, 0xFC	; 252
    41fa:	3c 5f       	subi	r19, 0xFC	; 252
    41fc:	3d 93       	st	X+, r19
    41fe:	91 30       	cpi	r25, 0x01	; 1
    4200:	08 f0       	brcs	.+2      	; 0x4204 <__ftoa_engine+0x40>
    4202:	80 68       	ori	r24, 0x80	; 128
    4204:	91 1d       	adc	r25, r1
    4206:	df 93       	push	r29
    4208:	cf 93       	push	r28
    420a:	1f 93       	push	r17
    420c:	0f 93       	push	r16
    420e:	ff 92       	push	r15
    4210:	ef 92       	push	r14
    4212:	19 2f       	mov	r17, r25
    4214:	98 7f       	andi	r25, 0xF8	; 248
    4216:	96 95       	lsr	r25
    4218:	e9 2f       	mov	r30, r25
    421a:	96 95       	lsr	r25
    421c:	96 95       	lsr	r25
    421e:	e9 0f       	add	r30, r25
    4220:	ff 27       	eor	r31, r31
    4222:	ec 54       	subi	r30, 0x4C	; 76
    4224:	fe 4f       	sbci	r31, 0xFE	; 254
    4226:	99 27       	eor	r25, r25
    4228:	33 27       	eor	r19, r19
    422a:	ee 24       	eor	r14, r14
    422c:	ff 24       	eor	r15, r15
    422e:	a7 01       	movw	r20, r14
    4230:	e7 01       	movw	r28, r14
    4232:	05 90       	lpm	r0, Z+
    4234:	08 94       	sec
    4236:	07 94       	ror	r0
    4238:	28 f4       	brcc	.+10     	; 0x4244 <__ftoa_engine+0x80>
    423a:	36 0f       	add	r19, r22
    423c:	e7 1e       	adc	r14, r23
    423e:	f8 1e       	adc	r15, r24
    4240:	49 1f       	adc	r20, r25
    4242:	51 1d       	adc	r21, r1
    4244:	66 0f       	add	r22, r22
    4246:	77 1f       	adc	r23, r23
    4248:	88 1f       	adc	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	06 94       	lsr	r0
    424e:	a1 f7       	brne	.-24     	; 0x4238 <__ftoa_engine+0x74>
    4250:	05 90       	lpm	r0, Z+
    4252:	07 94       	ror	r0
    4254:	28 f4       	brcc	.+10     	; 0x4260 <__ftoa_engine+0x9c>
    4256:	e7 0e       	add	r14, r23
    4258:	f8 1e       	adc	r15, r24
    425a:	49 1f       	adc	r20, r25
    425c:	56 1f       	adc	r21, r22
    425e:	c1 1d       	adc	r28, r1
    4260:	77 0f       	add	r23, r23
    4262:	88 1f       	adc	r24, r24
    4264:	99 1f       	adc	r25, r25
    4266:	66 1f       	adc	r22, r22
    4268:	06 94       	lsr	r0
    426a:	a1 f7       	brne	.-24     	; 0x4254 <__ftoa_engine+0x90>
    426c:	05 90       	lpm	r0, Z+
    426e:	07 94       	ror	r0
    4270:	28 f4       	brcc	.+10     	; 0x427c <__ftoa_engine+0xb8>
    4272:	f8 0e       	add	r15, r24
    4274:	49 1f       	adc	r20, r25
    4276:	56 1f       	adc	r21, r22
    4278:	c7 1f       	adc	r28, r23
    427a:	d1 1d       	adc	r29, r1
    427c:	88 0f       	add	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	66 1f       	adc	r22, r22
    4282:	77 1f       	adc	r23, r23
    4284:	06 94       	lsr	r0
    4286:	a1 f7       	brne	.-24     	; 0x4270 <__ftoa_engine+0xac>
    4288:	05 90       	lpm	r0, Z+
    428a:	07 94       	ror	r0
    428c:	20 f4       	brcc	.+8      	; 0x4296 <__ftoa_engine+0xd2>
    428e:	49 0f       	add	r20, r25
    4290:	56 1f       	adc	r21, r22
    4292:	c7 1f       	adc	r28, r23
    4294:	d8 1f       	adc	r29, r24
    4296:	99 0f       	add	r25, r25
    4298:	66 1f       	adc	r22, r22
    429a:	77 1f       	adc	r23, r23
    429c:	88 1f       	adc	r24, r24
    429e:	06 94       	lsr	r0
    42a0:	a9 f7       	brne	.-22     	; 0x428c <__ftoa_engine+0xc8>
    42a2:	84 91       	lpm	r24, Z
    42a4:	10 95       	com	r17
    42a6:	17 70       	andi	r17, 0x07	; 7
    42a8:	41 f0       	breq	.+16     	; 0x42ba <__ftoa_engine+0xf6>
    42aa:	d6 95       	lsr	r29
    42ac:	c7 95       	ror	r28
    42ae:	57 95       	ror	r21
    42b0:	47 95       	ror	r20
    42b2:	f7 94       	ror	r15
    42b4:	e7 94       	ror	r14
    42b6:	1a 95       	dec	r17
    42b8:	c1 f7       	brne	.-16     	; 0x42aa <__ftoa_engine+0xe6>
    42ba:	ea e5       	ldi	r30, 0x5A	; 90
    42bc:	f1 e0       	ldi	r31, 0x01	; 1
    42be:	68 94       	set
    42c0:	15 90       	lpm	r1, Z+
    42c2:	15 91       	lpm	r17, Z+
    42c4:	35 91       	lpm	r19, Z+
    42c6:	65 91       	lpm	r22, Z+
    42c8:	95 91       	lpm	r25, Z+
    42ca:	05 90       	lpm	r0, Z+
    42cc:	7f e2       	ldi	r23, 0x2F	; 47
    42ce:	73 95       	inc	r23
    42d0:	e1 18       	sub	r14, r1
    42d2:	f1 0a       	sbc	r15, r17
    42d4:	43 0b       	sbc	r20, r19
    42d6:	56 0b       	sbc	r21, r22
    42d8:	c9 0b       	sbc	r28, r25
    42da:	d0 09       	sbc	r29, r0
    42dc:	c0 f7       	brcc	.-16     	; 0x42ce <__ftoa_engine+0x10a>
    42de:	e1 0c       	add	r14, r1
    42e0:	f1 1e       	adc	r15, r17
    42e2:	43 1f       	adc	r20, r19
    42e4:	56 1f       	adc	r21, r22
    42e6:	c9 1f       	adc	r28, r25
    42e8:	d0 1d       	adc	r29, r0
    42ea:	7e f4       	brtc	.+30     	; 0x430a <__ftoa_engine+0x146>
    42ec:	70 33       	cpi	r23, 0x30	; 48
    42ee:	11 f4       	brne	.+4      	; 0x42f4 <__ftoa_engine+0x130>
    42f0:	8a 95       	dec	r24
    42f2:	e6 cf       	rjmp	.-52     	; 0x42c0 <__ftoa_engine+0xfc>
    42f4:	e8 94       	clt
    42f6:	01 50       	subi	r16, 0x01	; 1
    42f8:	30 f0       	brcs	.+12     	; 0x4306 <__ftoa_engine+0x142>
    42fa:	08 0f       	add	r16, r24
    42fc:	0a f4       	brpl	.+2      	; 0x4300 <__ftoa_engine+0x13c>
    42fe:	00 27       	eor	r16, r16
    4300:	02 17       	cp	r16, r18
    4302:	08 f4       	brcc	.+2      	; 0x4306 <__ftoa_engine+0x142>
    4304:	20 2f       	mov	r18, r16
    4306:	23 95       	inc	r18
    4308:	02 2f       	mov	r16, r18
    430a:	7a 33       	cpi	r23, 0x3A	; 58
    430c:	28 f0       	brcs	.+10     	; 0x4318 <__ftoa_engine+0x154>
    430e:	79 e3       	ldi	r23, 0x39	; 57
    4310:	7d 93       	st	X+, r23
    4312:	2a 95       	dec	r18
    4314:	e9 f7       	brne	.-6      	; 0x4310 <__ftoa_engine+0x14c>
    4316:	10 c0       	rjmp	.+32     	; 0x4338 <__ftoa_engine+0x174>
    4318:	7d 93       	st	X+, r23
    431a:	2a 95       	dec	r18
    431c:	89 f6       	brne	.-94     	; 0x42c0 <__ftoa_engine+0xfc>
    431e:	06 94       	lsr	r0
    4320:	97 95       	ror	r25
    4322:	67 95       	ror	r22
    4324:	37 95       	ror	r19
    4326:	17 95       	ror	r17
    4328:	17 94       	ror	r1
    432a:	e1 18       	sub	r14, r1
    432c:	f1 0a       	sbc	r15, r17
    432e:	43 0b       	sbc	r20, r19
    4330:	56 0b       	sbc	r21, r22
    4332:	c9 0b       	sbc	r28, r25
    4334:	d0 09       	sbc	r29, r0
    4336:	98 f0       	brcs	.+38     	; 0x435e <__ftoa_engine+0x19a>
    4338:	23 95       	inc	r18
    433a:	7e 91       	ld	r23, -X
    433c:	73 95       	inc	r23
    433e:	7a 33       	cpi	r23, 0x3A	; 58
    4340:	08 f0       	brcs	.+2      	; 0x4344 <__ftoa_engine+0x180>
    4342:	70 e3       	ldi	r23, 0x30	; 48
    4344:	7c 93       	st	X, r23
    4346:	20 13       	cpse	r18, r16
    4348:	b8 f7       	brcc	.-18     	; 0x4338 <__ftoa_engine+0x174>
    434a:	7e 91       	ld	r23, -X
    434c:	70 61       	ori	r23, 0x10	; 16
    434e:	7d 93       	st	X+, r23
    4350:	30 f0       	brcs	.+12     	; 0x435e <__ftoa_engine+0x19a>
    4352:	83 95       	inc	r24
    4354:	71 e3       	ldi	r23, 0x31	; 49
    4356:	7d 93       	st	X+, r23
    4358:	70 e3       	ldi	r23, 0x30	; 48
    435a:	2a 95       	dec	r18
    435c:	e1 f7       	brne	.-8      	; 0x4356 <__ftoa_engine+0x192>
    435e:	11 24       	eor	r1, r1
    4360:	ef 90       	pop	r14
    4362:	ff 90       	pop	r15
    4364:	0f 91       	pop	r16
    4366:	1f 91       	pop	r17
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	99 27       	eor	r25, r25
    436e:	87 fd       	sbrc	r24, 7
    4370:	90 95       	com	r25
    4372:	08 95       	ret

00004374 <strnlen_P>:
    4374:	fc 01       	movw	r30, r24
    4376:	05 90       	lpm	r0, Z+
    4378:	61 50       	subi	r22, 0x01	; 1
    437a:	70 40       	sbci	r23, 0x00	; 0
    437c:	01 10       	cpse	r0, r1
    437e:	d8 f7       	brcc	.-10     	; 0x4376 <strnlen_P+0x2>
    4380:	80 95       	com	r24
    4382:	90 95       	com	r25
    4384:	8e 0f       	add	r24, r30
    4386:	9f 1f       	adc	r25, r31
    4388:	08 95       	ret

0000438a <strcat>:
    438a:	fb 01       	movw	r30, r22
    438c:	dc 01       	movw	r26, r24
    438e:	0d 90       	ld	r0, X+
    4390:	00 20       	and	r0, r0
    4392:	e9 f7       	brne	.-6      	; 0x438e <strcat+0x4>
    4394:	11 97       	sbiw	r26, 0x01	; 1
    4396:	01 90       	ld	r0, Z+
    4398:	0d 92       	st	X+, r0
    439a:	00 20       	and	r0, r0
    439c:	e1 f7       	brne	.-8      	; 0x4396 <strcat+0xc>
    439e:	08 95       	ret

000043a0 <strcpy>:
    43a0:	fb 01       	movw	r30, r22
    43a2:	dc 01       	movw	r26, r24
    43a4:	01 90       	ld	r0, Z+
    43a6:	0d 92       	st	X+, r0
    43a8:	00 20       	and	r0, r0
    43aa:	e1 f7       	brne	.-8      	; 0x43a4 <strcpy+0x4>
    43ac:	08 95       	ret

000043ae <strnlen>:
    43ae:	fc 01       	movw	r30, r24
    43b0:	61 50       	subi	r22, 0x01	; 1
    43b2:	70 40       	sbci	r23, 0x00	; 0
    43b4:	01 90       	ld	r0, Z+
    43b6:	01 10       	cpse	r0, r1
    43b8:	d8 f7       	brcc	.-10     	; 0x43b0 <strnlen+0x2>
    43ba:	80 95       	com	r24
    43bc:	90 95       	com	r25
    43be:	8e 0f       	add	r24, r30
    43c0:	9f 1f       	adc	r25, r31
    43c2:	08 95       	ret

000043c4 <__mulsi_const_10>:
    43c4:	59 2f       	mov	r21, r25
    43c6:	48 2f       	mov	r20, r24
    43c8:	37 2f       	mov	r19, r23
    43ca:	26 2f       	mov	r18, r22
    43cc:	66 0f       	add	r22, r22
    43ce:	77 1f       	adc	r23, r23
    43d0:	88 1f       	adc	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	66 0f       	add	r22, r22
    43d6:	77 1f       	adc	r23, r23
    43d8:	88 1f       	adc	r24, r24
    43da:	99 1f       	adc	r25, r25
    43dc:	62 0f       	add	r22, r18
    43de:	73 1f       	adc	r23, r19
    43e0:	84 1f       	adc	r24, r20
    43e2:	95 1f       	adc	r25, r21
    43e4:	66 0f       	add	r22, r22
    43e6:	77 1f       	adc	r23, r23
    43e8:	88 1f       	adc	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	08 95       	ret

000043ee <fputc>:
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	fb 01       	movw	r30, r22
    43f8:	23 81       	ldd	r18, Z+3	; 0x03
    43fa:	21 fd       	sbrc	r18, 1
    43fc:	03 c0       	rjmp	.+6      	; 0x4404 <fputc+0x16>
    43fe:	8f ef       	ldi	r24, 0xFF	; 255
    4400:	9f ef       	ldi	r25, 0xFF	; 255
    4402:	2c c0       	rjmp	.+88     	; 0x445c <fputc+0x6e>
    4404:	22 ff       	sbrs	r18, 2
    4406:	16 c0       	rjmp	.+44     	; 0x4434 <fputc+0x46>
    4408:	46 81       	ldd	r20, Z+6	; 0x06
    440a:	57 81       	ldd	r21, Z+7	; 0x07
    440c:	24 81       	ldd	r18, Z+4	; 0x04
    440e:	35 81       	ldd	r19, Z+5	; 0x05
    4410:	42 17       	cp	r20, r18
    4412:	53 07       	cpc	r21, r19
    4414:	44 f4       	brge	.+16     	; 0x4426 <fputc+0x38>
    4416:	a0 81       	ld	r26, Z
    4418:	b1 81       	ldd	r27, Z+1	; 0x01
    441a:	9d 01       	movw	r18, r26
    441c:	2f 5f       	subi	r18, 0xFF	; 255
    441e:	3f 4f       	sbci	r19, 0xFF	; 255
    4420:	20 83       	st	Z, r18
    4422:	31 83       	std	Z+1, r19	; 0x01
    4424:	8c 93       	st	X, r24
    4426:	26 81       	ldd	r18, Z+6	; 0x06
    4428:	37 81       	ldd	r19, Z+7	; 0x07
    442a:	2f 5f       	subi	r18, 0xFF	; 255
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	26 83       	std	Z+6, r18	; 0x06
    4430:	37 83       	std	Z+7, r19	; 0x07
    4432:	14 c0       	rjmp	.+40     	; 0x445c <fputc+0x6e>
    4434:	8b 01       	movw	r16, r22
    4436:	ec 01       	movw	r28, r24
    4438:	fb 01       	movw	r30, r22
    443a:	00 84       	ldd	r0, Z+8	; 0x08
    443c:	f1 85       	ldd	r31, Z+9	; 0x09
    443e:	e0 2d       	mov	r30, r0
    4440:	09 95       	icall
    4442:	89 2b       	or	r24, r25
    4444:	e1 f6       	brne	.-72     	; 0x43fe <fputc+0x10>
    4446:	d8 01       	movw	r26, r16
    4448:	16 96       	adiw	r26, 0x06	; 6
    444a:	8d 91       	ld	r24, X+
    444c:	9c 91       	ld	r25, X
    444e:	17 97       	sbiw	r26, 0x07	; 7
    4450:	01 96       	adiw	r24, 0x01	; 1
    4452:	16 96       	adiw	r26, 0x06	; 6
    4454:	8d 93       	st	X+, r24
    4456:	9c 93       	st	X, r25
    4458:	17 97       	sbiw	r26, 0x07	; 7
    445a:	ce 01       	movw	r24, r28
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	08 95       	ret

00004466 <sprintf>:
    4466:	ae e0       	ldi	r26, 0x0E	; 14
    4468:	b0 e0       	ldi	r27, 0x00	; 0
    446a:	e9 e3       	ldi	r30, 0x39	; 57
    446c:	f2 e2       	ldi	r31, 0x22	; 34
    446e:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__prologue_saves__+0x1c>
    4472:	0d 89       	ldd	r16, Y+21	; 0x15
    4474:	1e 89       	ldd	r17, Y+22	; 0x16
    4476:	86 e0       	ldi	r24, 0x06	; 6
    4478:	8c 83       	std	Y+4, r24	; 0x04
    447a:	09 83       	std	Y+1, r16	; 0x01
    447c:	1a 83       	std	Y+2, r17	; 0x02
    447e:	8f ef       	ldi	r24, 0xFF	; 255
    4480:	9f e7       	ldi	r25, 0x7F	; 127
    4482:	8d 83       	std	Y+5, r24	; 0x05
    4484:	9e 83       	std	Y+6, r25	; 0x06
    4486:	ae 01       	movw	r20, r28
    4488:	47 5e       	subi	r20, 0xE7	; 231
    448a:	5f 4f       	sbci	r21, 0xFF	; 255
    448c:	6f 89       	ldd	r22, Y+23	; 0x17
    448e:	78 8d       	ldd	r23, Y+24	; 0x18
    4490:	ce 01       	movw	r24, r28
    4492:	01 96       	adiw	r24, 0x01	; 1
    4494:	0e 94 84 1c 	call	0x3908	; 0x3908 <vfprintf>
    4498:	ef 81       	ldd	r30, Y+7	; 0x07
    449a:	f8 85       	ldd	r31, Y+8	; 0x08
    449c:	e0 0f       	add	r30, r16
    449e:	f1 1f       	adc	r31, r17
    44a0:	10 82       	st	Z, r1
    44a2:	2e 96       	adiw	r28, 0x0e	; 14
    44a4:	e4 e0       	ldi	r30, 0x04	; 4
    44a6:	0c 94 6c 20 	jmp	0x40d8	; 0x40d8 <__epilogue_restores__+0x1c>

000044aa <__ultoa_invert>:
    44aa:	fa 01       	movw	r30, r20
    44ac:	aa 27       	eor	r26, r26
    44ae:	28 30       	cpi	r18, 0x08	; 8
    44b0:	51 f1       	breq	.+84     	; 0x4506 <__ultoa_invert+0x5c>
    44b2:	20 31       	cpi	r18, 0x10	; 16
    44b4:	81 f1       	breq	.+96     	; 0x4516 <__ultoa_invert+0x6c>
    44b6:	e8 94       	clt
    44b8:	6f 93       	push	r22
    44ba:	6e 7f       	andi	r22, 0xFE	; 254
    44bc:	6e 5f       	subi	r22, 0xFE	; 254
    44be:	7f 4f       	sbci	r23, 0xFF	; 255
    44c0:	8f 4f       	sbci	r24, 0xFF	; 255
    44c2:	9f 4f       	sbci	r25, 0xFF	; 255
    44c4:	af 4f       	sbci	r26, 0xFF	; 255
    44c6:	b1 e0       	ldi	r27, 0x01	; 1
    44c8:	3e d0       	rcall	.+124    	; 0x4546 <__ultoa_invert+0x9c>
    44ca:	b4 e0       	ldi	r27, 0x04	; 4
    44cc:	3c d0       	rcall	.+120    	; 0x4546 <__ultoa_invert+0x9c>
    44ce:	67 0f       	add	r22, r23
    44d0:	78 1f       	adc	r23, r24
    44d2:	89 1f       	adc	r24, r25
    44d4:	9a 1f       	adc	r25, r26
    44d6:	a1 1d       	adc	r26, r1
    44d8:	68 0f       	add	r22, r24
    44da:	79 1f       	adc	r23, r25
    44dc:	8a 1f       	adc	r24, r26
    44de:	91 1d       	adc	r25, r1
    44e0:	a1 1d       	adc	r26, r1
    44e2:	6a 0f       	add	r22, r26
    44e4:	71 1d       	adc	r23, r1
    44e6:	81 1d       	adc	r24, r1
    44e8:	91 1d       	adc	r25, r1
    44ea:	a1 1d       	adc	r26, r1
    44ec:	20 d0       	rcall	.+64     	; 0x452e <__ultoa_invert+0x84>
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <__ultoa_invert+0x48>
    44f0:	68 94       	set
    44f2:	3f 91       	pop	r19
    44f4:	2a e0       	ldi	r18, 0x0A	; 10
    44f6:	26 9f       	mul	r18, r22
    44f8:	11 24       	eor	r1, r1
    44fa:	30 19       	sub	r19, r0
    44fc:	30 5d       	subi	r19, 0xD0	; 208
    44fe:	31 93       	st	Z+, r19
    4500:	de f6       	brtc	.-74     	; 0x44b8 <__ultoa_invert+0xe>
    4502:	cf 01       	movw	r24, r30
    4504:	08 95       	ret
    4506:	46 2f       	mov	r20, r22
    4508:	47 70       	andi	r20, 0x07	; 7
    450a:	40 5d       	subi	r20, 0xD0	; 208
    450c:	41 93       	st	Z+, r20
    450e:	b3 e0       	ldi	r27, 0x03	; 3
    4510:	0f d0       	rcall	.+30     	; 0x4530 <__ultoa_invert+0x86>
    4512:	c9 f7       	brne	.-14     	; 0x4506 <__ultoa_invert+0x5c>
    4514:	f6 cf       	rjmp	.-20     	; 0x4502 <__ultoa_invert+0x58>
    4516:	46 2f       	mov	r20, r22
    4518:	4f 70       	andi	r20, 0x0F	; 15
    451a:	40 5d       	subi	r20, 0xD0	; 208
    451c:	4a 33       	cpi	r20, 0x3A	; 58
    451e:	18 f0       	brcs	.+6      	; 0x4526 <__ultoa_invert+0x7c>
    4520:	49 5d       	subi	r20, 0xD9	; 217
    4522:	31 fd       	sbrc	r19, 1
    4524:	40 52       	subi	r20, 0x20	; 32
    4526:	41 93       	st	Z+, r20
    4528:	02 d0       	rcall	.+4      	; 0x452e <__ultoa_invert+0x84>
    452a:	a9 f7       	brne	.-22     	; 0x4516 <__ultoa_invert+0x6c>
    452c:	ea cf       	rjmp	.-44     	; 0x4502 <__ultoa_invert+0x58>
    452e:	b4 e0       	ldi	r27, 0x04	; 4
    4530:	a6 95       	lsr	r26
    4532:	97 95       	ror	r25
    4534:	87 95       	ror	r24
    4536:	77 95       	ror	r23
    4538:	67 95       	ror	r22
    453a:	ba 95       	dec	r27
    453c:	c9 f7       	brne	.-14     	; 0x4530 <__ultoa_invert+0x86>
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	61 05       	cpc	r22, r1
    4542:	71 05       	cpc	r23, r1
    4544:	08 95       	ret
    4546:	9b 01       	movw	r18, r22
    4548:	ac 01       	movw	r20, r24
    454a:	0a 2e       	mov	r0, r26
    454c:	06 94       	lsr	r0
    454e:	57 95       	ror	r21
    4550:	47 95       	ror	r20
    4552:	37 95       	ror	r19
    4554:	27 95       	ror	r18
    4556:	ba 95       	dec	r27
    4558:	c9 f7       	brne	.-14     	; 0x454c <__ultoa_invert+0xa2>
    455a:	62 0f       	add	r22, r18
    455c:	73 1f       	adc	r23, r19
    455e:	84 1f       	adc	r24, r20
    4560:	95 1f       	adc	r25, r21
    4562:	a0 1d       	adc	r26, r0
    4564:	08 95       	ret

00004566 <eeprom_read_block>:
    4566:	60 50       	subi	r22, 0x00	; 0
    4568:	7c 4e       	sbci	r23, 0xEC	; 236
    456a:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <memcpy>

0000456e <eeprom_update_block>:
    456e:	dc 01       	movw	r26, r24
    4570:	a4 0f       	add	r26, r20
    4572:	b5 1f       	adc	r27, r21
    4574:	41 50       	subi	r20, 0x01	; 1
    4576:	50 40       	sbci	r21, 0x00	; 0
    4578:	48 f0       	brcs	.+18     	; 0x458c <eeprom_update_block+0x1e>
    457a:	cb 01       	movw	r24, r22
    457c:	84 0f       	add	r24, r20
    457e:	95 1f       	adc	r25, r21
    4580:	2e 91       	ld	r18, -X
    4582:	0e 94 c8 22 	call	0x4590	; 0x4590 <eeprom_update_r18>
    4586:	41 50       	subi	r20, 0x01	; 1
    4588:	50 40       	sbci	r21, 0x00	; 0
    458a:	d0 f7       	brcc	.-12     	; 0x4580 <eeprom_update_block+0x12>
    458c:	08 95       	ret

0000458e <eeprom_update_byte>:
    458e:	26 2f       	mov	r18, r22

00004590 <eeprom_update_r18>:
    4590:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <eeprom_mapen>
    4594:	00 80       	ld	r0, Z
    4596:	02 16       	cp	r0, r18
    4598:	19 f0       	breq	.+6      	; 0x45a0 <eeprom_update_r18+0x10>
    459a:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <eeprom_write_r18>
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	08 95       	ret

000045a4 <eeprom_write_byte>:
    45a4:	26 2f       	mov	r18, r22

000045a6 <eeprom_write_r18>:
    45a6:	af 93       	push	r26
    45a8:	bf 93       	push	r27
    45aa:	e0 e0       	ldi	r30, 0x00	; 0
    45ac:	f0 e1       	ldi	r31, 0x10	; 16
    45ae:	32 81       	ldd	r19, Z+2	; 0x02
    45b0:	31 fd       	sbrc	r19, 1
    45b2:	fd cf       	rjmp	.-6      	; 0x45ae <eeprom_write_r18+0x8>
    45b4:	dc 01       	movw	r26, r24
    45b6:	a0 50       	subi	r26, 0x00	; 0
    45b8:	bc 4e       	sbci	r27, 0xEC	; 236
    45ba:	2c 93       	st	X, r18
    45bc:	2d e9       	ldi	r18, 0x9D	; 157
    45be:	24 bf       	out	0x34, r18	; 52
    45c0:	23 e0       	ldi	r18, 0x03	; 3
    45c2:	20 83       	st	Z, r18
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	bf 91       	pop	r27
    45c8:	af 91       	pop	r26
    45ca:	08 95       	ret

000045cc <eeprom_read_byte>:
    45cc:	03 d0       	rcall	.+6      	; 0x45d4 <eeprom_mapen>
    45ce:	80 81       	ld	r24, Z
    45d0:	99 27       	eor	r25, r25
    45d2:	08 95       	ret

000045d4 <eeprom_mapen>:
    45d4:	fc 01       	movw	r30, r24
    45d6:	e0 50       	subi	r30, 0x00	; 0
    45d8:	fc 4e       	sbci	r31, 0xEC	; 236
    45da:	08 95       	ret

000045dc <memcpy>:
    45dc:	fb 01       	movw	r30, r22
    45de:	dc 01       	movw	r26, r24
    45e0:	02 c0       	rjmp	.+4      	; 0x45e6 <memcpy+0xa>
    45e2:	01 90       	ld	r0, Z+
    45e4:	0d 92       	st	X+, r0
    45e6:	41 50       	subi	r20, 0x01	; 1
    45e8:	50 40       	sbci	r21, 0x00	; 0
    45ea:	d8 f7       	brcc	.-10     	; 0x45e2 <memcpy+0x6>
    45ec:	08 95       	ret

000045ee <_exit>:
    45ee:	f8 94       	cli

000045f0 <__stop_program>:
    45f0:	ff cf       	rjmp	.-2      	; 0x45f0 <__stop_program>
