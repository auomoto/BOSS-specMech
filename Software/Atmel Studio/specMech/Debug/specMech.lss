
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00006f65  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b25  0000a3ac  000063ac  00006440  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a53  00802800  00802800  00006f65  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fc4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  00007008  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ba38  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004549  00000000  00000000  00013090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b72  00000000  00000000  000175d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001328  00000000  00000000  0001c14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024da  00000000  00000000  0001d474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000057ec  00000000  00000000  0001f94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  0002513a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       c:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <__vector_3>
      10:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      18:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      1c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      20:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      24:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      28:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      2c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      30:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__vector_12>
      34:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      38:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      3c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      40:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      44:	0c 94 15 28 	jmp	0x502a	; 0x502a <__vector_17>
      48:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <__vector_18>
      4c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      50:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__vector_20>
      54:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      58:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      5c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      60:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      64:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      68:	0c 94 bd 27 	jmp	0x4f7a	; 0x4f7a <__vector_26>
      6c:	0c 94 dd 27 	jmp	0x4fba	; 0x4fba <__vector_27>
      70:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      74:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__vector_29>
      78:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      7c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      80:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      84:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      88:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      8c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      90:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      94:	0c 94 9f 28 	jmp	0x513e	; 0x513e <__vector_37>
      98:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <__vector_38>
      9c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      a0:	e4 04       	cpc	r14, r4
      a2:	0b 05       	cpc	r16, r11
      a4:	0b 05       	cpc	r16, r11
      a6:	0b 05       	cpc	r16, r11
      a8:	0b 05       	cpc	r16, r11
      aa:	0b 05       	cpc	r16, r11
      ac:	0b 05       	cpc	r16, r11
      ae:	0b 05       	cpc	r16, r11
      b0:	0b 05       	cpc	r16, r11
      b2:	e7 04       	cpc	r14, r7
      b4:	0b 05       	cpc	r16, r11
      b6:	0b 05       	cpc	r16, r11
      b8:	0b 05       	cpc	r16, r11
      ba:	0b 05       	cpc	r16, r11
      bc:	0b 05       	cpc	r16, r11
      be:	0b 05       	cpc	r16, r11
      c0:	0b 05       	cpc	r16, r11
      c2:	0b 05       	cpc	r16, r11
      c4:	0b 05       	cpc	r16, r11
      c6:	0b 05       	cpc	r16, r11
      c8:	0b 05       	cpc	r16, r11
      ca:	0b 05       	cpc	r16, r11
      cc:	0b 05       	cpc	r16, r11
      ce:	0b 05       	cpc	r16, r11
      d0:	0b 05       	cpc	r16, r11
      d2:	0b 05       	cpc	r16, r11
      d4:	d2 04       	cpc	r13, r2
      d6:	0b 05       	cpc	r16, r11
      d8:	0b 05       	cpc	r16, r11
      da:	0b 05       	cpc	r16, r11
      dc:	0b 05       	cpc	r16, r11
      de:	0b 05       	cpc	r16, r11
      e0:	0b 05       	cpc	r16, r11
      e2:	0b 05       	cpc	r16, r11
      e4:	0b 05       	cpc	r16, r11
      e6:	0b 05       	cpc	r16, r11
      e8:	d8 04       	cpc	r13, r8
      ea:	0b 05       	cpc	r16, r11
      ec:	d5 04       	cpc	r13, r5
      ee:	0b 05       	cpc	r16, r11
      f0:	0b 05       	cpc	r16, r11
      f2:	db 04       	cpc	r13, r11
      f4:	de 04       	cpc	r13, r14
      f6:	e1 04       	cpc	r14, r1
      f8:	7f 11       	cpse	r23, r15
      fa:	7f 11       	cpse	r23, r15
      fc:	7f 11       	cpse	r23, r15
      fe:	9f 17       	cp	r25, r31
     100:	9f 17       	cp	r25, r31
     102:	9f 17       	cp	r25, r31
     104:	9f 17       	cp	r25, r31
     106:	9f 17       	cp	r25, r31
     108:	9f 17       	cp	r25, r31
     10a:	9f 17       	cp	r25, r31
     10c:	9f 17       	cp	r25, r31
     10e:	9f 17       	cp	r25, r31
     110:	9f 17       	cp	r25, r31
     112:	9f 17       	cp	r25, r31
     114:	9f 17       	cp	r25, r31
     116:	9f 17       	cp	r25, r31
     118:	9f 17       	cp	r25, r31
     11a:	9f 17       	cp	r25, r31
     11c:	9f 17       	cp	r25, r31
     11e:	9f 17       	cp	r25, r31
     120:	9f 17       	cp	r25, r31
     122:	61 17       	cp	r22, r17
     124:	9f 17       	cp	r25, r31
     126:	9f 17       	cp	r25, r31
     128:	9f 17       	cp	r25, r31
     12a:	9f 17       	cp	r25, r31
     12c:	9f 17       	cp	r25, r31
     12e:	9f 17       	cp	r25, r31
     130:	9f 17       	cp	r25, r31
     132:	9f 17       	cp	r25, r31
     134:	9f 17       	cp	r25, r31
     136:	9f 17       	cp	r25, r31
     138:	76 13       	cpse	r23, r22
     13a:	76 13       	cpse	r23, r22
     13c:	76 13       	cpse	r23, r22
     13e:	9f 17       	cp	r25, r31
     140:	24 14       	cp	r2, r4
     142:	9f 17       	cp	r25, r31
     144:	9f 17       	cp	r25, r31
     146:	9f 17       	cp	r25, r31
     148:	9f 17       	cp	r25, r31
     14a:	9f 17       	cp	r25, r31
     14c:	9f 17       	cp	r25, r31
     14e:	9f 17       	cp	r25, r31
     150:	9f 17       	cp	r25, r31
     152:	9f 17       	cp	r25, r31
     154:	61 15       	cp	r22, r1
     156:	37 16       	cp	r3, r23
     158:	9f 17       	cp	r25, r31
     15a:	9f 17       	cp	r25, r31
     15c:	9f 17       	cp	r25, r31
     15e:	c0 16       	cp	r12, r16
     160:	9f 17       	cp	r25, r31
     162:	08 17       	cp	r16, r24
     164:	7e 22       	and	r7, r30
     166:	7e 22       	and	r7, r30
     168:	7e 22       	and	r7, r30
     16a:	8a 22       	and	r8, r26
     16c:	13 23       	and	r17, r19
     16e:	13 23       	and	r17, r19
     170:	13 23       	and	r17, r19
     172:	13 23       	and	r17, r19
     174:	13 23       	and	r17, r19
     176:	13 23       	and	r17, r19
     178:	13 23       	and	r17, r19
     17a:	13 23       	and	r17, r19
     17c:	13 23       	and	r17, r19
     17e:	13 23       	and	r17, r19
     180:	13 23       	and	r17, r19
     182:	13 23       	and	r17, r19
     184:	13 23       	and	r17, r19
     186:	13 23       	and	r17, r19
     188:	13 23       	and	r17, r19
     18a:	13 23       	and	r17, r19
     18c:	13 23       	and	r17, r19
     18e:	13 23       	and	r17, r19
     190:	13 23       	and	r17, r19
     192:	13 23       	and	r17, r19
     194:	13 23       	and	r17, r19
     196:	13 23       	and	r17, r19
     198:	13 23       	and	r17, r19
     19a:	13 23       	and	r17, r19
     19c:	13 23       	and	r17, r19
     19e:	13 23       	and	r17, r19
     1a0:	13 23       	and	r17, r19
     1a2:	13 23       	and	r17, r19
     1a4:	c2 22       	and	r12, r18
     1a6:	c2 22       	and	r12, r18
     1a8:	c2 22       	and	r12, r18
     1aa:	e7 22       	and	r14, r23
     1ac:	13 23       	and	r17, r19
     1ae:	13 23       	and	r17, r19
     1b0:	13 23       	and	r17, r19
     1b2:	13 23       	and	r17, r19
     1b4:	13 23       	and	r17, r19
     1b6:	13 23       	and	r17, r19
     1b8:	13 23       	and	r17, r19
     1ba:	13 23       	and	r17, r19
     1bc:	13 23       	and	r17, r19
     1be:	13 23       	and	r17, r19
     1c0:	13 23       	and	r17, r19
     1c2:	13 23       	and	r17, r19
     1c4:	13 23       	and	r17, r19
     1c6:	13 23       	and	r17, r19
     1c8:	13 23       	and	r17, r19
     1ca:	13 23       	and	r17, r19
     1cc:	13 23       	and	r17, r19
     1ce:	13 23       	and	r17, r19
     1d0:	13 23       	and	r17, r19
     1d2:	7a 22       	and	r7, r26

000001d4 <__trampolines_end>:
     1d4:	6e 61       	ori	r22, 0x1E	; 30
     1d6:	6e 00       	.word	0x006e	; ????

000001d8 <__c.2332>:
     1d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     208:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     218:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     228:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     238:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     248:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     258:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     268:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     278:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     288:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     298:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf ef       	ldi	r28, 0xFF	; 255
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df e3       	ldi	r29, 0x3F	; 63
     2e0:	de bf       	out	0x3e, r29	; 62

000002e2 <__do_clear_bss>:
     2e2:	22 e3       	ldi	r18, 0x32	; 50
     2e4:	a0 e0       	ldi	r26, 0x00	; 0
     2e6:	b8 e2       	ldi	r27, 0x28	; 40
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <.do_clear_bss_start>

000002ea <.do_clear_bss_loop>:
     2ea:	1d 92       	st	X+, r1

000002ec <.do_clear_bss_start>:
     2ec:	a3 35       	cpi	r26, 0x53	; 83
     2ee:	b2 07       	cpc	r27, r18
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <.do_clear_bss_loop>
     2f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <main>
     2f6:	0c 94 d4 31 	jmp	0x63a8	; 0x63a8 <_exit>

000002fa <__bad_interrupt>:
     2fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fe <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     2fe:	8f 92       	push	r8
     300:	9f 92       	push	r9
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <read_AD590+0x16>
     314:	00 d0       	rcall	.+0      	; 0x316 <read_AD590+0x18>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	c9 f0       	breq	.+50     	; 0x352 <read_AD590+0x54>
     320:	18 f0       	brcs	.+6      	; 0x328 <read_AD590+0x2a>
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	61 f0       	breq	.+24     	; 0x33e <read_AD590+0x40>
     326:	10 c0       	rjmp	.+32     	; 0x348 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     328:	0f 2e       	mov	r0, r31
     32a:	f3 e3       	ldi	r31, 0x33	; 51
     32c:	8f 2e       	mov	r8, r31
     32e:	98 2c       	mov	r9, r8
     330:	f3 ef       	ldi	r31, 0xF3	; 243
     332:	af 2e       	mov	r10, r31
     334:	f0 e4       	ldi	r31, 0x40	; 64
     336:	bf 2e       	mov	r11, r31
     338:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     33a:	11 e0       	ldi	r17, 0x01	; 1
     33c:	0e c0       	rjmp	.+28     	; 0x35a <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     33e:	81 2c       	mov	r8, r1
     340:	91 2c       	mov	r9, r1
     342:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     344:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     346:	09 c0       	rjmp	.+18     	; 0x35a <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     348:	81 2c       	mov	r8, r1
     34a:	91 2c       	mov	r9, r1
     34c:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     34e:	10 e0       	ldi	r17, 0x00	; 0
			break;
     350:	04 c0       	rjmp	.+8      	; 0x35a <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     352:	81 2c       	mov	r8, r1
     354:	91 2c       	mov	r9, r1
     356:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     358:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	66 e0       	ldi	r22, 0x06	; 6
     35e:	87 e2       	ldi	r24, 0x27	; 39
     360:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     364:	41 2f       	mov	r20, r17
     366:	40 95       	com	r20
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	87 e2       	ldi	r24, 0x27	; 39
     36c:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     370:	41 2f       	mov	r20, r17
     372:	6a e0       	ldi	r22, 0x0A	; 10
     374:	87 e2       	ldi	r24, 0x27	; 39
     376:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	86 e1       	ldi	r24, 0x16	; 22
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <read_AD590+0x7e>
     380:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     382:	8e 01       	movw	r16, r28
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	20 e8       	ldi	r18, 0x80	; 128
     38a:	40 e7       	ldi	r20, 0x70	; 112
     38c:	68 e0       	ldi	r22, 0x08	; 8
     38e:	88 e4       	ldi	r24, 0x48	; 72
     390:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	51 f4       	brne	.+20     	; 0x3ac <read_AD590+0xae>
		*temperature = BADFLOAT;
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e8       	ldi	r21, 0x80	; 128
     39c:	66 e2       	ldi	r22, 0x26	; 38
     39e:	74 ec       	ldi	r23, 0xC4	; 196
     3a0:	f7 01       	movw	r30, r14
     3a2:	40 83       	st	Z, r20
     3a4:	51 83       	std	Z+1, r21	; 0x01
     3a6:	62 83       	std	Z+2, r22	; 0x02
     3a8:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     3aa:	1c c0       	rjmp	.+56     	; 0x3e4 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	4a e7       	ldi	r20, 0x7A	; 122
     3b2:	54 e4       	ldi	r21, 0x44	; 68
     3b4:	69 81       	ldd	r22, Y+1	; 0x01
     3b6:	7a 81       	ldd	r23, Y+2	; 0x02
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e9       	ldi	r19, 0x93	; 147
     3c4:	48 e8       	ldi	r20, 0x88	; 136
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 33 29 	call	0x5266	; 0x5266 <__subsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c5 01       	movw	r24, r10
     3d2:	b4 01       	movw	r22, r8
     3d4:	0e 94 34 29 	call	0x5268	; 0x5268 <__addsf3>
     3d8:	f7 01       	movw	r30, r14
     3da:	60 83       	st	Z, r22
     3dc:	71 83       	std	Z+1, r23	; 0x01
     3de:	82 83       	std	Z+2, r24	; 0x02
     3e0:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     3e2:	80 e0       	ldi	r24, 0x00	; 0

}
     3e4:	24 96       	adiw	r28, 0x04	; 4
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	08 95       	ret

00000400 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	f8 2e       	mov	r15, r24
     41a:	e6 2e       	mov	r14, r22
     41c:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     41e:	46 2b       	or	r20, r22
     420:	c4 2f       	mov	r28, r20
     422:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     424:	d2 2f       	mov	r29, r18
     426:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e8       	ldi	r25, 0x80	; 128
     42c:	a6 e2       	ldi	r26, 0x26	; 38
     42e:	b4 ec       	ldi	r27, 0xC4	; 196
     430:	f8 01       	movw	r30, r16
     432:	80 83       	st	Z, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	a2 83       	std	Z+2, r26	; 0x02
     438:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8f 2d       	mov	r24, r15
     43e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
     442:	08 2f       	mov	r16, r24
     444:	88 23       	and	r24, r24
     446:	21 f0       	breq	.+8      	; 0x450 <read_ADS1115+0x50>
		stop_TWI();
     448:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     44c:	13 e6       	ldi	r17, 0x63	; 99
     44e:	b4 c0       	rjmp	.+360    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     456:	18 2f       	mov	r17, r24
     458:	83 36       	cpi	r24, 0x63	; 99
     45a:	19 f4       	brne	.+6      	; 0x462 <read_ADS1115+0x62>
		stop_TWI();
     45c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     460:	ab c0       	rjmp	.+342    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     468:	18 2f       	mov	r17, r24
     46a:	83 36       	cpi	r24, 0x63	; 99
     46c:	19 f4       	brne	.+6      	; 0x474 <read_ADS1115+0x74>
		stop_TWI();
     46e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     472:	a2 c0       	rjmp	.+324    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     474:	8d 2f       	mov	r24, r29
     476:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     47a:	18 2f       	mov	r17, r24
     47c:	83 36       	cpi	r24, 0x63	; 99
     47e:	19 f4       	brne	.+6      	; 0x486 <read_ADS1115+0x86>
		stop_TWI();
     480:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     484:	99 c0       	rjmp	.+306    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	stop_TWI();
     486:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
     48a:	fc e1       	ldi	r31, 0x1C	; 28
     48c:	fa 95       	dec	r31
     48e:	f1 f7       	brne	.-4      	; 0x48c <read_ADS1115+0x8c>

	_delay_us(25);									// Power-up time

	converting = YES;
     490:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <read_ADS1115+0xa6>
		start_TWI(addr, TWIREAD);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8f 2d       	mov	r24, r15
     498:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
		flag = readlast_TWI();
     49c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
		if (flag & 0b10000000) {
     4a0:	88 23       	and	r24, r24
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <read_ADS1115+0xa6>
			converting = NO;
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     4a6:	c1 11       	cpse	r28, r1
     4a8:	f5 cf       	rjmp	.-22     	; 0x494 <read_ADS1115+0x94>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     4aa:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	start_TWI(addr, TWIWRITE);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	8f 2d       	mov	r24, r15
     4b2:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8f 2d       	mov	r24, r15
     4c0:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
	highbyte = read_TWI();
     4c4:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <read_TWI>
     4c8:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     4ca:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
     4ce:	d8 2f       	mov	r29, r24
	stop_TWI();
     4d0:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	value = highbyte;
     4d4:	6c 2f       	mov	r22, r28
     4d6:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     4d8:	76 2f       	mov	r23, r22
     4da:	66 27       	eor	r22, r22
	value |= lowbyte;
     4dc:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	e8 16       	cp	r14, r24
     4e2:	49 f1       	breq	.+82     	; 0x536 <read_ADS1115+0x136>
     4e4:	8e 15       	cp	r24, r14
     4e6:	30 f0       	brcs	.+12     	; 0x4f4 <read_ADS1115+0xf4>
     4e8:	ee 20       	and	r14, r14
     4ea:	d9 f1       	breq	.+118    	; 0x562 <read_ADS1115+0x162>
     4ec:	e2 e0       	ldi	r30, 0x02	; 2
     4ee:	ee 16       	cp	r14, r30
     4f0:	69 f1       	breq	.+90     	; 0x54c <read_ADS1115+0x14c>
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <read_ADS1115+0x178>
     4f4:	f8 e0       	ldi	r31, 0x08	; 8
     4f6:	ef 16       	cp	r14, r31
     4f8:	09 f4       	brne	.+2      	; 0x4fc <read_ADS1115+0xfc>
     4fa:	42 c0       	rjmp	.+132    	; 0x580 <read_ADS1115+0x180>
     4fc:	8a e0       	ldi	r24, 0x0A	; 10
     4fe:	e8 16       	cp	r14, r24
     500:	21 f0       	breq	.+8      	; 0x50a <read_ADS1115+0x10a>
     502:	e6 e0       	ldi	r30, 0x06	; 6
     504:	ee 12       	cpse	r14, r30
     506:	38 c0       	rjmp	.+112    	; 0x578 <read_ADS1115+0x178>
     508:	0b c0       	rjmp	.+22     	; 0x520 <read_ADS1115+0x120>
		case PGA0256:
			scale = SCA0256;
     50a:	0f 2e       	mov	r0, r31
     50c:	f4 e7       	ldi	r31, 0x74	; 116
     50e:	8f 2e       	mov	r8, r31
     510:	f3 e1       	ldi	r31, 0x13	; 19
     512:	9f 2e       	mov	r9, r31
     514:	f3 e0       	ldi	r31, 0x03	; 3
     516:	af 2e       	mov	r10, r31
     518:	f7 e3       	ldi	r31, 0x37	; 55
     51a:	bf 2e       	mov	r11, r31
     51c:	f0 2d       	mov	r31, r0
     51e:	3a c0       	rjmp	.+116    	; 0x594 <read_ADS1115+0x194>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     520:	0f 2e       	mov	r0, r31
     522:	f4 e7       	ldi	r31, 0x74	; 116
     524:	8f 2e       	mov	r8, r31
     526:	f3 e1       	ldi	r31, 0x13	; 19
     528:	9f 2e       	mov	r9, r31
     52a:	f3 e0       	ldi	r31, 0x03	; 3
     52c:	af 2e       	mov	r10, r31
     52e:	f8 e3       	ldi	r31, 0x38	; 56
     530:	bf 2e       	mov	r11, r31
     532:	f0 2d       	mov	r31, r0
			break;
     534:	2f c0       	rjmp	.+94     	; 0x594 <read_ADS1115+0x194>
		case PGA2048:
			scale = SCA2048;
     536:	0f 2e       	mov	r0, r31
     538:	f2 e1       	ldi	r31, 0x12	; 18
     53a:	8f 2e       	mov	r8, r31
     53c:	f3 e1       	ldi	r31, 0x13	; 19
     53e:	9f 2e       	mov	r9, r31
     540:	f3 e8       	ldi	r31, 0x83	; 131
     542:	af 2e       	mov	r10, r31
     544:	f8 e3       	ldi	r31, 0x38	; 56
     546:	bf 2e       	mov	r11, r31
     548:	f0 2d       	mov	r31, r0
			break;
     54a:	24 c0       	rjmp	.+72     	; 0x594 <read_ADS1115+0x194>
		case PGA4096:
			scale = SCA4096;
     54c:	0f 2e       	mov	r0, r31
     54e:	f4 e7       	ldi	r31, 0x74	; 116
     550:	8f 2e       	mov	r8, r31
     552:	f3 e1       	ldi	r31, 0x13	; 19
     554:	9f 2e       	mov	r9, r31
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	af 2e       	mov	r10, r31
     55a:	f9 e3       	ldi	r31, 0x39	; 57
     55c:	bf 2e       	mov	r11, r31
     55e:	f0 2d       	mov	r31, r0
			break;
     560:	19 c0       	rjmp	.+50     	; 0x594 <read_ADS1115+0x194>
		case PGA6144:
			scale = SCA6144;
     562:	0f 2e       	mov	r0, r31
     564:	fe e2       	ldi	r31, 0x2E	; 46
     566:	8f 2e       	mov	r8, r31
     568:	fd e9       	ldi	r31, 0x9D	; 157
     56a:	9f 2e       	mov	r9, r31
     56c:	f4 e4       	ldi	r31, 0x44	; 68
     56e:	af 2e       	mov	r10, r31
     570:	f9 e3       	ldi	r31, 0x39	; 57
     572:	bf 2e       	mov	r11, r31
     574:	f0 2d       	mov	r31, r0
			break;
     576:	0e c0       	rjmp	.+28     	; 0x594 <read_ADS1115+0x194>
		default:
			scale = 0.0;
     578:	81 2c       	mov	r8, r1
     57a:	91 2c       	mov	r9, r1
     57c:	54 01       	movw	r10, r8
			break;
     57e:	0a c0       	rjmp	.+20     	; 0x594 <read_ADS1115+0x194>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     580:	0f 2e       	mov	r0, r31
     582:	f1 e7       	ldi	r31, 0x71	; 113
     584:	8f 2e       	mov	r8, r31
     586:	f3 e1       	ldi	r31, 0x13	; 19
     588:	9f 2e       	mov	r9, r31
     58a:	f3 e8       	ldi	r31, 0x83	; 131
     58c:	af 2e       	mov	r10, r31
     58e:	f7 e3       	ldi	r31, 0x37	; 55
     590:	bf 2e       	mov	r11, r31
     592:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
     5ac:	f6 01       	movw	r30, r12
     5ae:	60 83       	st	Z, r22
     5b0:	71 83       	std	Z+1, r23	; 0x01
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     5b6:	10 2f       	mov	r17, r16

}
     5b8:	81 2f       	mov	r24, r17
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	9c 01       	movw	r18, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <get_cmdline+0x42>
     5de:	ce e3       	ldi	r28, 0x3E	; 62
     5e0:	de e2       	ldi	r29, 0x2E	; 46
     5e2:	e8 81       	ld	r30, Y
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e1 5c       	subi	r30, 0xC1	; 193
     5e8:	f2 4d       	sbci	r31, 0xD2	; 210
     5ea:	80 81       	ld	r24, Z
     5ec:	f9 01       	movw	r30, r18
     5ee:	e4 0f       	add	r30, r20
     5f0:	f1 1d       	adc	r31, r1
     5f2:	80 83       	st	Z, r24
     5f4:	a0 e4       	ldi	r26, 0x40	; 64
     5f6:	be e2       	ldi	r27, 0x2E	; 46
     5f8:	8c 91       	ld	r24, X
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	8c 93       	st	X, r24
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	6e ef       	ldi	r22, 0xFE	; 254
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
     60c:	88 83       	st	Y, r24
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <get_cmdline+0x4a>
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
     61a:	81 11       	cpse	r24, r1
     61c:	e0 cf       	rjmp	.-64     	; 0x5de <get_cmdline+0xa>
     61e:	f9 01       	movw	r30, r18
     620:	e4 0f       	add	r30, r20
     622:	f1 1d       	adc	r31, r1
     624:	10 82       	st	Z, r1
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     62c:	9f e9       	ldi	r25, 0x9F	; 159
     62e:	98 0f       	add	r25, r24
     630:	9a 31       	cpi	r25, 0x1A	; 26
     632:	28 f0       	brcs	.+10     	; 0x63e <isaletter+0x12>
     634:	81 54       	subi	r24, 0x41	; 65
     636:	8a 31       	cpi	r24, 0x1A	; 26
     638:	20 f4       	brcc	.+8      	; 0x642 <isaletter+0x16>
		return(ERROR);
     63a:	83 e6       	ldi	r24, 0x63	; 99
     63c:	08 95       	ret
     63e:	83 e6       	ldi	r24, 0x63	; 99
     640:	08 95       	ret
	}
	return(NOERROR);
     642:	80 e0       	ldi	r24, 0x00	; 0

}
     644:	08 95       	ret

00000646 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     652:	e6 2e       	mov	r14, r22
     654:	f1 2c       	mov	r15, r1
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	8e 9d       	mul	r24, r14
     65a:	f0 01       	movw	r30, r0
     65c:	8f 9d       	mul	r24, r15
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	e3 5f       	subi	r30, 0xF3	; 243
     664:	f7 4d       	sbci	r31, 0xD7	; 215
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     66a:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     66c:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     66e:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x34>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x32>
     676:	75 c0       	rjmp	.+234    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	e3 5f       	subi	r30, 0xF3	; 243
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     69c:	11 23       	and	r17, r17
     69e:	09 f4       	brne	.+2      	; 0x6a2 <parse_cmd+0x5c>
     6a0:	60 c0       	rjmp	.+192    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6a4:	18 81       	ld	r17, Y
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     6ac:	88 23       	and	r24, r24
     6ae:	b1 f3       	breq	.-20     	; 0x69c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	84 e3       	ldi	r24, 0x34	; 52
     6b4:	8e 9d       	mul	r24, r14
     6b6:	f0 01       	movw	r30, r0
     6b8:	8f 9d       	mul	r24, r15
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	e3 5f       	subi	r30, 0xF3	; 243
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	2a c0       	rjmp	.+84     	; 0x71c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e3 5f       	subi	r30, 0xF3	; 243
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	12 82       	std	Z+2, r1	; 0x02
			return;
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     6e6:	9b 33       	cpi	r25, 0x3B	; 59
     6e8:	61 f4       	brne	.+24     	; 0x702 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6ea:	94 e3       	ldi	r25, 0x34	; 52
     6ec:	9e 9d       	mul	r25, r14
     6ee:	f0 01       	movw	r30, r0
     6f0:	9f 9d       	mul	r25, r15
     6f2:	f0 0d       	add	r31, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	e3 5f       	subi	r30, 0xF3	; 243
     6f8:	f7 4d       	sbci	r31, 0xD7	; 215
     6fa:	e8 0f       	add	r30, r24
     6fc:	f1 1d       	adc	r31, r1
     6fe:	12 82       	std	Z+2, r1	; 0x02
			break;
     700:	0f c0       	rjmp	.+30     	; 0x720 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	24 e3       	ldi	r18, 0x34	; 52
     706:	2e 9d       	mul	r18, r14
     708:	f0 01       	movw	r30, r0
     70a:	2f 9d       	mul	r18, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	e3 5f       	subi	r30, 0xF3	; 243
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	89 32       	cpi	r24, 0x29	; 41
     71e:	a0 f2       	brcs	.-88     	; 0x6c8 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     720:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	1c c0       	rjmp	.+56     	; 0x75e <parse_cmd+0x118>
		if (*ptr == '\0') {
     726:	98 81       	ld	r25, Y
     728:	91 11       	cpse	r25, r1
     72a:	0c c0       	rjmp	.+24     	; 0x744 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     72c:	94 e3       	ldi	r25, 0x34	; 52
     72e:	9e 9d       	mul	r25, r14
     730:	f0 01       	movw	r30, r0
     732:	9f 9d       	mul	r25, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e3 5f       	subi	r30, 0xF3	; 243
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     742:	0f c0       	rjmp	.+30     	; 0x762 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	24 e3       	ldi	r18, 0x34	; 52
     748:	2e 9d       	mul	r18, r14
     74a:	f0 01       	movw	r30, r0
     74c:	2f 9d       	mul	r18, r15
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	e3 5f       	subi	r30, 0xF3	; 243
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	e8 0f       	add	r30, r24
     758:	f1 1d       	adc	r31, r1
     75a:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f3       	brcs	.-60     	; 0x726 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	08 95       	ret

0000076e <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	c5 50       	subi	r28, 0x05	; 5
     77c:	d1 40       	sbci	r29, 0x01	; 1
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     782:	27 e0       	ldi	r18, 0x07	; 7
     784:	e2 eb       	ldi	r30, 0xB2	; 178
     786:	f3 ea       	ldi	r31, 0xA3	; 163
     788:	de 01       	movw	r26, r28
     78a:	a1 50       	subi	r26, 0x01	; 1
     78c:	bf 4f       	sbci	r27, 0xFF	; 255
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	2a 95       	dec	r18
     794:	e1 f7       	brne	.-8      	; 0x78e <printLine+0x20>

	if (firstpass) {
     796:	20 91 15 2a 	lds	r18, 0x2A15	; 0x802a15 <firstpass>
     79a:	21 11       	cpse	r18, r1
     79c:	2a c0       	rjmp	.+84     	; 0x7f2 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     79e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     7a2:	22 ff       	sbrs	r18, 2
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <printLine+0x3e>
     7a6:	22 e0       	ldi	r18, 0x02	; 2
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <printLine+0x42>
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	3f 93       	push	r19
     7b6:	2f 93       	push	r18
     7b8:	ce 01       	movw	r24, r28
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
	checksum_NMEA(strbuf);
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 ce 0c 	call	0x199c	; 0x199c <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7d6:	f8 01       	movw	r30, r16
     7d8:	01 90       	ld	r0, Z+
     7da:	00 20       	and	r0, r0
     7dc:	e9 f7       	brne	.-6      	; 0x7d8 <printLine+0x6a>
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	af 01       	movw	r20, r30
     7e2:	40 1b       	sub	r20, r16
     7e4:	51 0b       	sbc	r21, r17
     7e6:	b8 01       	movw	r22, r16
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <send_USART>
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	de bf       	out	0x3e, r29	; 62

}
     7f2:	cb 5f       	subi	r28, 0xFB	; 251
     7f4:	de 4f       	sbci	r29, 0xFE	; 254
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	cc 51       	subi	r28, 0x1C	; 28
     81a:	d1 40       	sbci	r29, 0x01	; 1
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	de bf       	out	0x3e, r29	; 62
     820:	d8 2e       	mov	r13, r24
     822:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	e9 eb       	ldi	r30, 0xB9	; 185
     828:	f3 ea       	ldi	r31, 0xA3	; 163
     82a:	9e 01       	movw	r18, r28
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	79 01       	movw	r14, r18
     832:	d9 01       	movw	r26, r18
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	8a 95       	dec	r24
     83a:	e1 f7       	brne	.-8      	; 0x834 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     83c:	8e 01       	movw	r16, r28
     83e:	05 5f       	subi	r16, 0xF5	; 245
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	c8 01       	movw	r24, r16
     844:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	1f 93       	push	r17
     84e:	0f 93       	push	r16
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	0c 5e       	subi	r16, 0xEC	; 236
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
	printLine(strbuf);
     860:	c8 01       	movw	r24, r16
     862:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

}
     866:	cd bf       	out	0x3d, r28	; 61
     868:	de bf       	out	0x3e, r29	; 62
     86a:	c4 5e       	subi	r28, 0xE4	; 228
     86c:	de 4f       	sbci	r29, 0xFE	; 254
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	de bf       	out	0x3e, r29	; 62
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	08 95       	ret

00000884 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <send_EXprompt+0x6>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     88e:	81 e2       	ldi	r24, 0x21	; 33
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	be 01       	movw	r22, r28
     89a:	6f 5f       	subi	r22, 0xFF	; 255
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <send_USART>

}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     8ae:	cf 93       	push	r28

	if (!rebootackd) {
     8b0:	c0 91 0c 28 	lds	r28, 0x280C	; 0x80280c <rebootackd>
     8b4:	c1 11       	cpse	r28, r1
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <rebootACKd+0x4c>
     8b8:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     8ba:	80 81       	ld	r24, Z
     8bc:	81 32       	cpi	r24, 0x21	; 33
     8be:	91 f4       	brne	.+36     	; 0x8e4 <rebootACKd+0x36>
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	91 11       	cpse	r25, r1
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8d6:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <rebootackd>
			return(YES);
     8e0:	c1 e0       	ldi	r28, 0x01	; 1
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     8e4:	81 32       	cpi	r24, 0x21	; 33
     8e6:	31 f4       	brne	.+12     	; 0x8f4 <rebootACKd+0x46>
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	88 23       	and	r24, r24
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <rebootACKd+0x46>
			reboot();
     8ee:	0e 94 02 29 	call	0x5204	; 0x5204 <reboot>
			return(NO);
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     8f4:	0e 94 42 04 	call	0x884	; 0x884 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <rebootACKd+0x4e>
		}
	}

	return(YES);
     8fa:	c1 e0       	ldi	r28, 0x01	; 1

}
     8fc:	8c 2f       	mov	r24, r28
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <send_GTprompt+0x6>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     90c:	8e e3       	ldi	r24, 0x3E	; 62
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	be 01       	movw	r22, r28
     918:	6f 5f       	subi	r22, 0xFF	; 255
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <send_USART>

}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	d1 09       	sbc	r29, r1
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	0e 94 57 04 	call	0x8ae	; 0x8ae <rebootACKd>
     94c:	88 23       	and	r24, r24
     94e:	09 f4       	brne	.+2      	; 0x952 <commands+0x26>
     950:	74 c0       	rjmp	.+232    	; 0xa3a <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	88 23       	and	r24, r24
     956:	11 f0       	breq	.+4      	; 0x95c <commands+0x30>
     958:	81 32       	cpi	r24, 0x21	; 33
     95a:	29 f4       	brne	.+10     	; 0x966 <commands+0x3a>
		firstpass = NO;
     95c:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <firstpass>
		send_GTprompt();
     960:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
		return;
     964:	6a c0       	rjmp	.+212    	; 0xa3a <commands+0x10e>
	}

	echo_cmd(cmdline);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 02 04 	call	0x804	; 0x804 <echo_cmd>
	parse_cmd(cmdline, cstack);
     96e:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	0e 94 23 03 	call	0x646	; 0x646 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     97a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     97e:	24 e3       	ldi	r18, 0x34	; 52
     980:	82 9f       	mul	r24, r18
     982:	f0 01       	movw	r30, r0
     984:	11 24       	eor	r1, r1
     986:	e3 5f       	subi	r30, 0xF3	; 243
     988:	f7 4d       	sbci	r31, 0xD7	; 215
     98a:	e0 81       	ld	r30, Z
     98c:	4e 2f       	mov	r20, r30
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	fa 01       	movw	r30, r20
     992:	e9 54       	subi	r30, 0x49	; 73
     994:	f1 09       	sbc	r31, r1
     996:	ec 32       	cpi	r30, 0x2C	; 44
     998:	f1 05       	cpc	r31, r1
     99a:	e8 f5       	brcc	.+122    	; 0xa16 <commands+0xea>
     99c:	e0 5b       	subi	r30, 0xB0	; 176
     99e:	ff 4f       	sbci	r31, 0xFF	; 255
     9a0:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     9a4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <close_PNEU>
			break;
     9a8:	3c c0       	rjmp	.+120    	; 0xa22 <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     9aa:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <open_PNEU>
			break;
     9ae:	39 c0       	rjmp	.+114    	; 0xa22 <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     9b0:	0e 94 20 22 	call	0x4440	; 0x4440 <move_MOTOR_CMD>
			break;
     9b4:	36 c0       	rjmp	.+108    	; 0xa22 <commands+0xf6>

		case 'r':				// report
			report(cstack);
     9b6:	0e 94 b9 10 	call	0x2172	; 0x2172 <report>
			break;
     9ba:	33 c0       	rjmp	.+102    	; 0xa22 <commands+0xf6>

		case 's':				// set
			set(cstack);
     9bc:	0e 94 75 23 	call	0x46ea	; 0x46ea <set>
			break;
     9c0:	30 c0       	rjmp	.+96     	; 0xa22 <commands+0xf6>

		case 't':
			testroutine();
     9c2:	0e 94 11 25 	call	0x4a22	; 0x4a22 <testroutine>
			break;
     9c6:	2d c0       	rjmp	.+90     	; 0xa22 <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9c8:	0e 94 98 21 	call	0x4330	; 0x4330 <init_MOTORS>
			break;
     9cc:	2a c0       	rjmp	.+84     	; 0xa22 <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9ce:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <motorsMoving>
     9d2:	88 23       	and	r24, r24
     9d4:	39 f0       	breq	.+14     	; 0x9e4 <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     9d6:	63 ec       	ldi	r22, 0xC3	; 195
     9d8:	73 ea       	ldi	r23, 0xA3	; 163
     9da:	86 e3       	ldi	r24, 0x36	; 54
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				break;
     9e2:	1f c0       	rjmp	.+62     	; 0xa22 <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     9e4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <put_FRAM_ENCODERS>
     9e8:	83 36       	cpi	r24, 0x63	; 99
     9ea:	31 f4       	brne	.+12     	; 0x9f8 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     9ec:	68 ee       	ldi	r22, 0xE8	; 232
     9ee:	73 ea       	ldi	r23, 0xA3	; 163
     9f0:	83 e9       	ldi	r24, 0x93	; 147
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				}
				timerSAVEENCODER = 0;
     9f8:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     9fc:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	8a e6       	ldi	r24, 0x6A	; 106
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	81 50       	subi	r24, 0x01	; 1
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	20 40       	sbci	r18, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <commands+0xda>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <commands+0xe4>
				_delay_ms(100);
				reboot();			// in wdt.c
     a10:	0e 94 02 29 	call	0x5204	; 0x5204 <reboot>
				return;
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     a16:	6a e0       	ldi	r22, 0x0A	; 10
     a18:	74 ea       	ldi	r23, 0xA4	; 164
     a1a:	89 ec       	ldi	r24, 0xC9	; 201
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a22:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	6a e0       	ldi	r22, 0x0A	; 10
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
     a32:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a36:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>

}
     a3a:	c1 50       	subi	r28, 0x01	; 1
     a3c:	df 4f       	sbci	r29, 0xFF	; 255
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	c0 5f       	subi	r28, 0xF0	; 240
     a56:	d1 09       	sbc	r29, r1
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	e8 e1       	ldi	r30, 0x18	; 24
     a62:	f4 ea       	ldi	r31, 0xA4	; 164
     a64:	de 01       	movw	r26, r28
     a66:	a5 5a       	subi	r26, 0xA5	; 165
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	8a 95       	dec	r24
     a70:	e1 f7       	brne	.-8      	; 0xa6a <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     a72:	89 e1       	ldi	r24, 0x19	; 25
     a74:	e0 e3       	ldi	r30, 0x30	; 48
     a76:	f4 ea       	ldi	r31, 0xA4	; 164
     a78:	de 01       	movw	r26, r28
     a7a:	ad 58       	subi	r26, 0x8D	; 141
     a7c:	bf 4f       	sbci	r27, 0xFF	; 255
     a7e:	01 90       	ld	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	8a 95       	dec	r24
     a84:	e1 f7       	brne	.-8      	; 0xa7e <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     a86:	87 e1       	ldi	r24, 0x17	; 23
     a88:	e9 e4       	ldi	r30, 0x49	; 73
     a8a:	f4 ea       	ldi	r31, 0xA4	; 164
     a8c:	de 01       	movw	r26, r28
     a8e:	a4 57       	subi	r26, 0x74	; 116
     a90:	bf 4f       	sbci	r27, 0xFF	; 255
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	8a 95       	dec	r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     a9a:	88 e1       	ldi	r24, 0x18	; 24
     a9c:	e0 e6       	ldi	r30, 0x60	; 96
     a9e:	f4 ea       	ldi	r31, 0xA4	; 164
     aa0:	de 01       	movw	r26, r28
     aa2:	ad 55       	subi	r26, 0x5D	; 93
     aa4:	bf 4f       	sbci	r27, 0xFF	; 255
     aa6:	01 90       	ld	r0, Z+
     aa8:	0d 92       	st	X+, r0
     aaa:	8a 95       	dec	r24
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     aae:	8b e1       	ldi	r24, 0x1B	; 27
     ab0:	e8 e7       	ldi	r30, 0x78	; 120
     ab2:	f4 ea       	ldi	r31, 0xA4	; 164
     ab4:	de 01       	movw	r26, r28
     ab6:	a5 54       	subi	r26, 0x45	; 69
     ab8:	bf 4f       	sbci	r27, 0xFF	; 255
     aba:	01 90       	ld	r0, Z+
     abc:	0d 92       	st	X+, r0
     abe:	8a 95       	dec	r24
     ac0:	e1 f7       	brne	.-8      	; 0xaba <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     ac2:	8b e1       	ldi	r24, 0x1B	; 27
     ac4:	e3 e9       	ldi	r30, 0x93	; 147
     ac6:	f4 ea       	ldi	r31, 0xA4	; 164
     ac8:	de 01       	movw	r26, r28
     aca:	aa 52       	subi	r26, 0x2A	; 42
     acc:	bf 4f       	sbci	r27, 0xFF	; 255
     ace:	01 90       	ld	r0, Z+
     ad0:	0d 92       	st	X+, r0
     ad2:	8a 95       	dec	r24
     ad4:	e1 f7       	brne	.-8      	; 0xace <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <check_isotime+0xae>
		sbuf[i] = isotime[i];
     ada:	82 2f       	mov	r24, r18
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	f8 01       	movw	r30, r16
     ae0:	e8 0f       	add	r30, r24
     ae2:	f9 1f       	adc	r31, r25
     ae4:	30 81       	ld	r19, Z
     ae6:	e1 e0       	ldi	r30, 0x01	; 1
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ec 0f       	add	r30, r28
     aec:	fd 1f       	adc	r31, r29
     aee:	e8 0f       	add	r30, r24
     af0:	f9 1f       	adc	r31, r25
     af2:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     af4:	2f 5f       	subi	r18, 0xFF	; 255
     af6:	24 30       	cpi	r18, 0x04	; 4
     af8:	80 f3       	brcs	.-32     	; 0xada <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     afa:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((year < 2021) || year > 2030) {
     b04:	85 5e       	subi	r24, 0xE5	; 229
     b06:	97 40       	sbci	r25, 0x07	; 7
     b08:	0a 97       	sbiw	r24, 0x0a	; 10
     b0a:	40 f1       	brcs	.+80     	; 0xb5c <check_isotime+0x114>
		sprintf(strbuf, msg0);
     b0c:	ce 01       	movw	r24, r28
     b0e:	85 5a       	subi	r24, 0xA5	; 165
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	8e 01       	movw	r16, r28
     b18:	05 5f       	subi	r16, 0xF5	; 245
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	1f 93       	push	r17
     b1e:	0f 93       	push	r16
     b20:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     b24:	b8 01       	movw	r22, r16
     b26:	8b e5       	ldi	r24, 0x5B	; 91
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	83 e6       	ldi	r24, 0x63	; 99
     b38:	fd c0       	rjmp	.+506    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	35 97       	sbiw	r30, 0x05	; 5
     b42:	d8 01       	movw	r26, r16
     b44:	a2 0f       	add	r26, r18
     b46:	b3 1f       	adc	r27, r19
     b48:	9c 91       	ld	r25, X
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	2c 0f       	add	r18, r28
     b50:	3d 1f       	adc	r19, r29
     b52:	e2 0f       	add	r30, r18
     b54:	f3 1f       	adc	r31, r19
     b56:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <check_isotime+0x116>
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	87 30       	cpi	r24, 0x07	; 7
     b60:	60 f3       	brcs	.-40     	; 0xb3a <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b62:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((month < 1) || (month > 12)) {
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	0c 97       	sbiw	r24, 0x0c	; 12
     b70:	40 f1       	brcs	.+80     	; 0xbc2 <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     b72:	ce 01       	movw	r24, r28
     b74:	8d 58       	subi	r24, 0x8D	; 141
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	8e 01       	movw	r16, r28
     b7e:	05 5f       	subi	r16, 0xF5	; 245
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	1f 93       	push	r17
     b84:	0f 93       	push	r16
     b86:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     b8a:	b8 01       	movw	r22, r16
     b8c:	8b e5       	ldi	r24, 0x5B	; 91
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	83 e6       	ldi	r24, 0x63	; 99
     b9e:	ca c0       	rjmp	.+404    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	f9 01       	movw	r30, r18
     ba6:	38 97       	sbiw	r30, 0x08	; 8
     ba8:	d8 01       	movw	r26, r16
     baa:	a2 0f       	add	r26, r18
     bac:	b3 1f       	adc	r27, r19
     bae:	9c 91       	ld	r25, X
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	2c 0f       	add	r18, r28
     bb6:	3d 1f       	adc	r19, r29
     bb8:	e2 0f       	add	r30, r18
     bba:	f3 1f       	adc	r31, r19
     bbc:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <check_isotime+0x17c>
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	8a 30       	cpi	r24, 0x0A	; 10
     bc6:	60 f3       	brcs	.-40     	; 0xba0 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     bc8:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((day < 1) || (day > 31)) {
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	4f 97       	sbiw	r24, 0x1f	; 31
     bd6:	40 f1       	brcs	.+80     	; 0xc28 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     bd8:	ce 01       	movw	r24, r28
     bda:	84 57       	subi	r24, 0x74	; 116
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	8e 01       	movw	r16, r28
     be4:	05 5f       	subi	r16, 0xF5	; 245
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	1f 93       	push	r17
     bea:	0f 93       	push	r16
     bec:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     bf0:	b8 01       	movw	r22, r16
     bf2:	8b e5       	ldi	r24, 0x5B	; 91
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	83 e6       	ldi	r24, 0x63	; 99
     c04:	97 c0       	rjmp	.+302    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	f9 01       	movw	r30, r18
     c0c:	3b 97       	sbiw	r30, 0x0b	; 11
     c0e:	d8 01       	movw	r26, r16
     c10:	a2 0f       	add	r26, r18
     c12:	b3 1f       	adc	r27, r19
     c14:	9c 91       	ld	r25, X
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	2c 0f       	add	r18, r28
     c1c:	3d 1f       	adc	r19, r29
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <check_isotime+0x1e2>
     c28:	8b e0       	ldi	r24, 0x0B	; 11
     c2a:	8d 30       	cpi	r24, 0x0D	; 13
     c2c:	60 f3       	brcs	.-40     	; 0xc06 <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     c2e:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((hours < 0) || (hours > 23)) {
     c38:	48 97       	sbiw	r24, 0x18	; 24
     c3a:	40 f1       	brcs	.+80     	; 0xc8c <check_isotime+0x244>
		sprintf(strbuf, msg3);
     c3c:	ce 01       	movw	r24, r28
     c3e:	8d 55       	subi	r24, 0x5D	; 93
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	8e 01       	movw	r16, r28
     c48:	05 5f       	subi	r16, 0xF5	; 245
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	1f 93       	push	r17
     c4e:	0f 93       	push	r16
     c50:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     c54:	b8 01       	movw	r22, r16
     c56:	8b e5       	ldi	r24, 0x5B	; 91
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	83 e6       	ldi	r24, 0x63	; 99
     c68:	65 c0       	rjmp	.+202    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	3e 97       	sbiw	r30, 0x0e	; 14
     c72:	d8 01       	movw	r26, r16
     c74:	a2 0f       	add	r26, r18
     c76:	b3 1f       	adc	r27, r19
     c78:	9c 91       	ld	r25, X
     c7a:	21 e0       	ldi	r18, 0x01	; 1
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	2c 0f       	add	r18, r28
     c80:	3d 1f       	adc	r19, r29
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <check_isotime+0x246>
     c8c:	8e e0       	ldi	r24, 0x0E	; 14
     c8e:	80 31       	cpi	r24, 0x10	; 16
     c90:	60 f3       	brcs	.-40     	; 0xc6a <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     c92:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     c9c:	cc 97       	sbiw	r24, 0x3c	; 60
     c9e:	40 f1       	brcs	.+80     	; 0xcf0 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     ca0:	ce 01       	movw	r24, r28
     ca2:	85 54       	subi	r24, 0x45	; 69
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	8e 01       	movw	r16, r28
     cac:	05 5f       	subi	r16, 0xF5	; 245
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	1f 93       	push	r17
     cb2:	0f 93       	push	r16
     cb4:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     cb8:	b8 01       	movw	r22, r16
     cba:	8b e5       	ldi	r24, 0x5B	; 91
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	83 e6       	ldi	r24, 0x63	; 99
     ccc:	33 c0       	rjmp	.+102    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	f9 01       	movw	r30, r18
     cd4:	71 97       	sbiw	r30, 0x11	; 17
     cd6:	d8 01       	movw	r26, r16
     cd8:	a2 0f       	add	r26, r18
     cda:	b3 1f       	adc	r27, r19
     cdc:	9c 91       	ld	r25, X
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	2c 0f       	add	r18, r28
     ce4:	3d 1f       	adc	r19, r29
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <check_isotime+0x2aa>
     cf0:	81 e1       	ldi	r24, 0x11	; 17
     cf2:	83 31       	cpi	r24, 0x13	; 19
     cf4:	60 f3       	brcs	.-40     	; 0xcce <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     cf6:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     d00:	cc 97       	sbiw	r24, 0x3c	; 60
     d02:	b8 f0       	brcs	.+46     	; 0xd32 <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     d04:	ce 01       	movw	r24, r28
     d06:	8a 52       	subi	r24, 0x2A	; 42
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	8e 01       	movw	r16, r28
     d10:	05 5f       	subi	r16, 0xF5	; 245
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	1f 93       	push	r17
     d16:	0f 93       	push	r16
     d18:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_ISO, strbuf);
     d1c:	b8 01       	movw	r22, r16
     d1e:	8b e5       	ldi	r24, 0x5B	; 91
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	83 e6       	ldi	r24, 0x63	; 99
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <check_isotime+0x2ec>
	}
	return(NOERROR);
     d32:	80 e0       	ldi	r24, 0x00	; 0
}
     d34:	c0 51       	subi	r28, 0x10	; 16
     d36:	df 4f       	sbci	r29, 0xFF	; 255
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	a0 97       	sbiw	r28, 0x20	; 32
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	ee ea       	ldi	r30, 0xAE	; 174
     d5c:	f4 ea       	ldi	r31, 0xA4	; 164
     d5e:	9e 01       	movw	r18, r28
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	d9 01       	movw	r26, r18
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	4a 95       	dec	r20
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     d6e:	fb 01       	movw	r30, r22
     d70:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     d72:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     d74:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     d76:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     d78:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     d7a:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     d7c:	1f 92       	push	r1
     d7e:	bf 93       	push	r27
     d80:	1f 92       	push	r1
     d82:	af 93       	push	r26
     d84:	1f 92       	push	r1
     d86:	1f 93       	push	r17
     d88:	1f 92       	push	r1
     d8a:	0f 93       	push	r16
     d8c:	1f 92       	push	r1
     d8e:	5f 93       	push	r21
     d90:	1f 92       	push	r1
     d92:	4f 93       	push	r20
     d94:	3f 93       	push	r19
     d96:	2f 93       	push	r18
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>

}
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	a0 96       	adiw	r28, 0x20	; 32
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     db4:	dc 01       	movw	r26, r24
     db6:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     db8:	81 89       	ldd	r24, Z+17	; 0x11
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	c0 97       	sbiw	r24, 0x30	; 48
     dbe:	82 95       	swap	r24
     dc0:	92 95       	swap	r25
     dc2:	90 7f       	andi	r25, 0xF0	; 240
     dc4:	98 27       	eor	r25, r24
     dc6:	80 7f       	andi	r24, 0xF0	; 240
     dc8:	98 27       	eor	r25, r24
     dca:	92 89       	ldd	r25, Z+18	; 0x12
     dcc:	90 53       	subi	r25, 0x30	; 48
     dce:	89 2b       	or	r24, r25
     dd0:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     dd2:	86 85       	ldd	r24, Z+14	; 0x0e
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	c0 97       	sbiw	r24, 0x30	; 48
     dd8:	82 95       	swap	r24
     dda:	92 95       	swap	r25
     ddc:	90 7f       	andi	r25, 0xF0	; 240
     dde:	98 27       	eor	r25, r24
     de0:	80 7f       	andi	r24, 0xF0	; 240
     de2:	98 27       	eor	r25, r24
     de4:	97 85       	ldd	r25, Z+15	; 0x0f
     de6:	90 53       	subi	r25, 0x30	; 48
     de8:	89 2b       	or	r24, r25
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	8c 93       	st	X, r24
     dee:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     df0:	83 85       	ldd	r24, Z+11	; 0x0b
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	c0 97       	sbiw	r24, 0x30	; 48
     df6:	82 95       	swap	r24
     df8:	92 95       	swap	r25
     dfa:	90 7f       	andi	r25, 0xF0	; 240
     dfc:	98 27       	eor	r25, r24
     dfe:	80 7f       	andi	r24, 0xF0	; 240
     e00:	98 27       	eor	r25, r24
     e02:	94 85       	ldd	r25, Z+12	; 0x0c
     e04:	90 53       	subi	r25, 0x30	; 48
     e06:	89 2b       	or	r24, r25
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	8c 93       	st	X, r24
     e0c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     e16:	80 85       	ldd	r24, Z+8	; 0x08
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	c0 97       	sbiw	r24, 0x30	; 48
     e1c:	82 95       	swap	r24
     e1e:	92 95       	swap	r25
     e20:	90 7f       	andi	r25, 0xF0	; 240
     e22:	98 27       	eor	r25, r24
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	98 27       	eor	r25, r24
     e28:	91 85       	ldd	r25, Z+9	; 0x09
     e2a:	90 53       	subi	r25, 0x30	; 48
     e2c:	89 2b       	or	r24, r25
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	8c 93       	st	X, r24
     e32:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     e34:	25 81       	ldd	r18, Z+5	; 0x05
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	20 53       	subi	r18, 0x30	; 48
     e3a:	31 09       	sbc	r19, r1
     e3c:	22 95       	swap	r18
     e3e:	32 95       	swap	r19
     e40:	30 7f       	andi	r19, 0xF0	; 240
     e42:	32 27       	eor	r19, r18
     e44:	20 7f       	andi	r18, 0xF0	; 240
     e46:	32 27       	eor	r19, r18
     e48:	86 81       	ldd	r24, Z+6	; 0x06
     e4a:	80 53       	subi	r24, 0x30	; 48
     e4c:	28 2b       	or	r18, r24
     e4e:	15 96       	adiw	r26, 0x05	; 5
     e50:	2c 93       	st	X, r18
     e52:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     e54:	22 81       	ldd	r18, Z+2	; 0x02
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	20 53       	subi	r18, 0x30	; 48
     e5a:	31 09       	sbc	r19, r1
     e5c:	22 95       	swap	r18
     e5e:	32 95       	swap	r19
     e60:	30 7f       	andi	r19, 0xF0	; 240
     e62:	32 27       	eor	r19, r18
     e64:	20 7f       	andi	r18, 0xF0	; 240
     e66:	32 27       	eor	r19, r18
     e68:	83 81       	ldd	r24, Z+3	; 0x03
     e6a:	80 53       	subi	r24, 0x30	; 48
     e6c:	28 2b       	or	r18, r24
     e6e:	16 96       	adiw	r26, 0x06	; 6
     e70:	2c 93       	st	X, r18
     e72:	08 95       	ret

00000e74 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
     e86:	c8 2f       	mov	r28, r24
     e88:	83 36       	cpi	r24, 0x63	; 99
     e8a:	19 f4       	brne	.+6      	; 0xe92 <read_DS3231+0x1e>
		stop_TWI();
     e8c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     e90:	26 c0       	rjmp	.+76     	; 0xede <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     e98:	c8 2f       	mov	r28, r24
     e9a:	83 36       	cpi	r24, 0x63	; 99
     e9c:	19 f4       	brne	.+6      	; 0xea4 <read_DS3231+0x30>
		stop_TWI();
     e9e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     ea2:	1d c0       	rjmp	.+58     	; 0xede <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	88 e6       	ldi	r24, 0x68	; 104
     ea8:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
     eac:	c8 2f       	mov	r28, r24
     eae:	83 36       	cpi	r24, 0x63	; 99
     eb0:	61 f4       	brne	.+24     	; 0xeca <read_DS3231+0x56>
		stop_TWI();
     eb2:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     eb6:	13 c0       	rjmp	.+38     	; 0xede <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     eb8:	87 01       	movw	r16, r14
     eba:	0c 0f       	add	r16, r28
     ebc:	11 1d       	adc	r17, r1
     ebe:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <read_TWI>
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     ec6:	cf 5f       	subi	r28, 0xFF	; 255
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <read_DS3231+0x58>
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	c6 30       	cpi	r28, 0x06	; 6
     ece:	a0 f3       	brcs	.-24     	; 0xeb8 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     ed0:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
     ed4:	f7 01       	movw	r30, r14
     ed6:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ed8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	return(NOERROR);
     edc:	c0 e0       	ldi	r28, 0x00	; 0

}
     ede:	8c 2f       	mov	r24, r28
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	88 e6       	ldi	r24, 0x68	; 104
     f0a:	0e 94 3a 07 	call	0xe74	; 0xe74 <read_DS3231>
     f0e:	18 2f       	mov	r17, r24
     f10:	83 36       	cpi	r24, 0x63	; 99
     f12:	79 f4       	brne	.+30     	; 0xf32 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     f14:	6e ec       	ldi	r22, 0xCE	; 206
     f16:	74 ea       	ldi	r23, 0xA4	; 164
     f18:	85 e6       	ldi	r24, 0x65	; 101
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		strcpy(isotime, "DateTime?");
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	ee ed       	ldi	r30, 0xDE	; 222
     f24:	f4 ea       	ldi	r31, 0xA4	; 164
     f26:	d7 01       	movw	r26, r14
     f28:	01 90       	ld	r0, Z+
     f2a:	0d 92       	st	X+, r0
     f2c:	8a 95       	dec	r24
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <get_time+0x3c>
		return(ERROR);
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     f32:	be 01       	movw	r22, r28
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	c7 01       	movw	r24, r14
     f3a:	0e 94 a3 06 	call	0xd46	; 0xd46 <convert_ds2iso>
	return(NOERROR);
     f3e:	10 e0       	ldi	r17, 0x00	; 0

}
     f40:	81 2f       	mov	r24, r17
     f42:	27 96       	adiw	r28, 0x07	; 7
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	08 95       	ret

00000f54 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
     f68:	c8 2f       	mov	r28, r24
     f6a:	83 36       	cpi	r24, 0x63	; 99
     f6c:	19 f4       	brne	.+6      	; 0xf74 <write_DS3231+0x20>
		stop_TWI();
     f6e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     f72:	20 c0       	rjmp	.+64     	; 0xfb4 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     f7a:	c8 2f       	mov	r28, r24
     f7c:	83 36       	cpi	r24, 0x63	; 99
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <write_DS3231+0x54>
		stop_TWI();
     f80:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
     f84:	17 c0       	rjmp	.+46     	; 0xfb4 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f86:	78 01       	movw	r14, r16
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	e8 1a       	sub	r14, r24
     f8c:	f8 0a       	sbc	r15, r24
     f8e:	f8 01       	movw	r30, r16
     f90:	80 81       	ld	r24, Z
     f92:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
     f96:	c8 2f       	mov	r28, r24
     f98:	83 36       	cpi	r24, 0x63	; 99
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <write_DS3231+0x4e>
			stop_TWI();
     f9c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
			return(ERROR);
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fa2:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fa4:	87 01       	movw	r16, r14
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <write_DS3231+0x56>
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     faa:	d7 30       	cpi	r29, 0x07	; 7
     fac:	60 f3       	brcs	.-40     	; 0xf86 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     fae:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	return(NOERROR);
     fb2:	c0 e0       	ldi	r28, 0x00	; 0

}
     fb4:	8c 2f       	mov	r24, r28
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	08 95       	ret

00000fc4 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	27 97       	sbiw	r28, 0x07	; 7
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     fda:	0e 94 24 05 	call	0xa48	; 0xa48 <check_isotime>
     fde:	18 2f       	mov	r17, r24
     fe0:	83 36       	cpi	r24, 0x63	; 99
     fe2:	39 f4       	brne	.+14     	; 0xff2 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     fe4:	68 ee       	ldi	r22, 0xE8	; 232
     fe6:	74 ea       	ldi	r23, 0xA4	; 164
     fe8:	8b e5       	ldi	r24, 0x5B	; 91
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     ff2:	b7 01       	movw	r22, r14
     ff4:	ce 01       	movw	r24, r28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	88 e6       	ldi	r24, 0x68	; 104
    1004:	0e 94 aa 07 	call	0xf54	; 0xf54 <write_DS3231>
    1008:	18 2f       	mov	r17, r24
    100a:	83 36       	cpi	r24, 0x63	; 99
    100c:	39 f4       	brne	.+14     	; 0x101c <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
    100e:	66 e0       	ldi	r22, 0x06	; 6
    1010:	75 ea       	ldi	r23, 0xA5	; 165
    1012:	86 e6       	ldi	r24, 0x66	; 102
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    101a:	01 c0       	rjmp	.+2      	; 0x101e <put_time+0x5a>
	}
	return(NOERROR);
    101c:	10 e0       	ldi	r17, 0x00	; 0

}
    101e:	81 2f       	mov	r24, r17
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1032:	45 e1       	ldi	r20, 0x15	; 21
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	6b e0       	ldi	r22, 0x0B	; 11
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 90 31 	call	0x6320	; 0x6320 <eeprom_read_block>
    103e:	08 95       	ret

00001040 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
    1040:	4b e0       	ldi	r20, 0x0B	; 11
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 90 31 	call	0x6320	; 0x6320 <eeprom_read_block>
    104c:	08 95       	ret

0000104e <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	65 97       	sbiw	r28, 0x15	; 21
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1064:	45 e1       	ldi	r20, 0x15	; 21
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	6b e0       	ldi	r22, 0x0B	; 11
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 94 31 	call	0x6328	; 0x6328 <eeprom_update_block>

}
    1074:	65 96       	adiw	r28, 0x15	; 21
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <update_VERSION>:

void update_VERSION(void)
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2b 97       	sbiw	r28, 0x0b	; 11
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    108e:	8b e0       	ldi	r24, 0x0B	; 11
    1090:	e3 e2       	ldi	r30, 0x23	; 35
    1092:	f5 ea       	ldi	r31, 0xA5	; 165
    1094:	de 01       	movw	r26, r28
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	8a 95       	dec	r24
    109e:	e1 f7       	brne	.-8      	; 0x1098 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    10a0:	4b e0       	ldi	r20, 0x0B	; 11
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	0e 94 94 31 	call	0x6328	; 0x6328 <eeprom_update_block>

}
    10b0:	2b 96       	adiw	r28, 0x0b	; 11
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    10bc:	0e 94 27 08 	call	0x104e	; 0x104e <update_BOOTTIME>
	update_VERSION();
    10c0:	0e 94 40 08 	call	0x1080	; 0x1080 <update_VERSION>
    10c4:	08 95       	ret

000010c6 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	c8 50       	subi	r28, 0x08	; 8
    10d4:	d1 40       	sbci	r29, 0x01	; 1
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	ee e2       	ldi	r30, 0x2E	; 46
    10de:	f5 ea       	ldi	r31, 0xA5	; 165
    10e0:	de 01       	movw	r26, r28
    10e2:	a1 50       	subi	r26, 0x01	; 1
    10e4:	bf 4f       	sbci	r27, 0xFF	; 255
    10e6:	01 90       	ld	r0, Z+
    10e8:	0d 92       	st	X+, r0
    10ea:	2a 95       	dec	r18
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <printError+0x20>

	if (!squelchErrors) {
    10ee:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <squelchErrors>
    10f2:	21 11       	cpse	r18, r1
    10f4:	15 c0       	rjmp	.+42     	; 0x1120 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    10f6:	7f 93       	push	r23
    10f8:	6f 93       	push	r22
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	ce 01       	movw	r24, r28
    1100:	81 50       	subi	r24, 0x01	; 1
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	8e 01       	movw	r16, r28
    110a:	0f 5f       	subi	r16, 0xFF	; 255
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	1f 93       	push	r17
    1110:	0f 93       	push	r16
    1112:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printLine(strbuf);
    1116:	c8 01       	movw	r24, r16
    1118:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	de bf       	out	0x3e, r29	; 62
	}

}
    1120:	c8 5f       	subi	r28, 0xF8	; 248
    1122:	de 4f       	sbci	r29, 0xFE	; 254
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	d8 2f       	mov	r29, r24
    1144:	d6 2e       	mov	r13, r22
    1146:	07 2f       	mov	r16, r23
    1148:	7a 01       	movw	r14, r20
    114a:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    1152:	c8 2f       	mov	r28, r24
    1154:	83 36       	cpi	r24, 0x63	; 99
    1156:	19 f4       	brne	.+6      	; 0x115e <read_FRAM+0x2c>
		stop_TWI();
    1158:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    115c:	2e c0       	rjmp	.+92     	; 0x11ba <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    115e:	80 2f       	mov	r24, r16
    1160:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1164:	c8 2f       	mov	r28, r24
    1166:	83 36       	cpi	r24, 0x63	; 99
    1168:	41 f1       	breq	.+80     	; 0x11ba <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    116a:	8d 2d       	mov	r24, r13
    116c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1170:	c8 2f       	mov	r28, r24
    1172:	83 36       	cpi	r24, 0x63	; 99
    1174:	11 f1       	breq	.+68     	; 0x11ba <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	8d 2f       	mov	r24, r29
    117a:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    117e:	c8 2f       	mov	r28, r24
    1180:	83 36       	cpi	r24, 0x63	; 99
    1182:	d9 f0       	breq	.+54     	; 0x11ba <read_FRAM+0x88>
    1184:	c0 e0       	ldi	r28, 0x00	; 0
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    1188:	67 01       	movw	r12, r14
    118a:	cc 0e       	add	r12, r28
    118c:	d1 1c       	adc	r13, r1
    118e:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <read_TWI>
    1192:	f6 01       	movw	r30, r12
    1194:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    1196:	cf 5f       	subi	r28, 0xFF	; 255
    1198:	2c 2f       	mov	r18, r28
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 2f       	mov	r24, r17
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	84 f3       	brlt	.-32     	; 0x1188 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    11a8:	ec 01       	movw	r28, r24
    11aa:	ce 0d       	add	r28, r14
    11ac:	df 1d       	adc	r29, r15
    11ae:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
    11b2:	88 83       	st	Y, r24

	stop_TWI();
    11b4:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	return(NOERROR);
    11b8:	c0 e0       	ldi	r28, 0x00	; 0

}
    11ba:	8c 2f       	mov	r24, r28
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	08 95       	ret

000011ce <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	2a 97       	sbiw	r28, 0x0a	; 10
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
    11e8:	f5 ea       	ldi	r31, 0xA5	; 165
    11ea:	de 01       	movw	r26, r28
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	01 90       	ld	r0, Z+
    11f0:	0d 92       	st	X+, r0
    11f2:	8a 95       	dec	r24
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    11f6:	24 e1       	ldi	r18, 0x14	; 20
    11f8:	a7 01       	movw	r20, r14
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e5       	ldi	r24, 0x50	; 80
    1200:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    1204:	18 2f       	mov	r17, r24
    1206:	83 36       	cpi	r24, 0x63	; 99
    1208:	39 f4       	brne	.+14     	; 0x1218 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    120a:	be 01       	movw	r22, r28
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	c7 01       	movw	r24, r14
    1212:	0e 94 a5 30 	call	0x614a	; 0x614a <strcpy>
		return(ERROR);
    1216:	01 c0       	rjmp	.+2      	; 0x121a <get_SETTIME+0x4c>
	}
	return(NOERROR);
    1218:	10 e0       	ldi	r17, 0x00	; 0
}
    121a:	81 2f       	mov	r24, r17
    121c:	2a 96       	adiw	r28, 0x0a	; 10
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	08 95       	ret

0000122e <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	f6 2e       	mov	r15, r22
    123c:	17 2f       	mov	r17, r23
    123e:	ea 01       	movw	r28, r20
    1240:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    1248:	83 36       	cpi	r24, 0x63	; 99
    124a:	e1 f0       	breq	.+56     	; 0x1284 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    124c:	81 2f       	mov	r24, r17
    124e:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1252:	83 36       	cpi	r24, 0x63	; 99
    1254:	b9 f0       	breq	.+46     	; 0x1284 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    1256:	8f 2d       	mov	r24, r15
    1258:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    125c:	83 36       	cpi	r24, 0x63	; 99
    125e:	91 f0       	breq	.+36     	; 0x1284 <write_FRAM+0x56>
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	0b c0       	rjmp	.+22     	; 0x127a <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1264:	7e 01       	movw	r14, r28
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	e8 1a       	sub	r14, r24
    126a:	f8 0a       	sbc	r15, r24
    126c:	88 81       	ld	r24, Y
    126e:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1272:	83 36       	cpi	r24, 0x63	; 99
    1274:	39 f0       	breq	.+14     	; 0x1284 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    1276:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1278:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    127a:	10 17       	cp	r17, r16
    127c:	98 f3       	brcs	.-26     	; 0x1264 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    127e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	return(NOERROR);
    1282:	80 e0       	ldi	r24, 0x00	; 0

}
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <get_humidity+0x1a>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <get_humidity+0x1c>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	59 f0       	breq	.+22     	; 0x12cc <get_humidity+0x3a>
    12b6:	18 f0       	brcs	.+6      	; 0x12be <get_humidity+0x2c>
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	79 f0       	breq	.+30     	; 0x12da <get_humidity+0x48>
    12bc:	15 c0       	rjmp	.+42     	; 0x12e8 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    12c4:	6b 01       	movw	r12, r22
    12c6:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    12c8:	40 e4       	ldi	r20, 0x40	; 64
			break;
    12ca:	17 c0       	rjmp	.+46     	; 0x12fa <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    12d2:	6b 01       	movw	r12, r22
    12d4:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    12d6:	40 e5       	ldi	r20, 0x50	; 80
			break;
    12d8:	10 c0       	rjmp	.+32     	; 0x12fa <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    12e0:	6b 01       	movw	r12, r22
    12e2:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    12e4:	40 e6       	ldi	r20, 0x60	; 96
			break;
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    12e8:	0f 2e       	mov	r0, r31
    12ea:	c1 2c       	mov	r12, r1
    12ec:	d1 2c       	mov	r13, r1
    12ee:	f0 ea       	ldi	r31, 0xA0	; 160
    12f0:	ef 2e       	mov	r14, r31
    12f2:	f1 e4       	ldi	r31, 0x41	; 65
    12f4:	ff 2e       	mov	r15, r31
    12f6:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    12f8:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    12fa:	8e 01       	movw	r16, r28
    12fc:	0f 5f       	subi	r16, 0xFF	; 255
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	20 e8       	ldi	r18, 0x80	; 128
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	88 e4       	ldi	r24, 0x48	; 72
    1306:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    130a:	83 36       	cpi	r24, 0x63	; 99
    130c:	89 f1       	breq	.+98     	; 0x1370 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 ea       	ldi	r20, 0xA0	; 160
    1314:	50 e4       	ldi	r21, 0x40	; 64
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	0e 94 a5 29 	call	0x534a	; 0x534a <__divsf3>
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	37 ed       	ldi	r19, 0xD7	; 215
    1326:	43 e2       	ldi	r20, 0x23	; 35
    1328:	5e e3       	ldi	r21, 0x3E	; 62
    132a:	0e 94 33 29 	call	0x5266	; 0x5266 <__subsf3>
    132e:	2f e5       	ldi	r18, 0x5F	; 95
    1330:	39 e2       	ldi	r19, 0x29	; 41
    1332:	4b ec       	ldi	r20, 0xCB	; 203
    1334:	5b e3       	ldi	r21, 0x3B	; 59
    1336:	0e 94 a5 29 	call	0x534a	; 0x534a <__divsf3>
    133a:	4b 01       	movw	r8, r22
    133c:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    133e:	29 ec       	ldi	r18, 0xC9	; 201
    1340:	3e e8       	ldi	r19, 0x8E	; 142
    1342:	4d e0       	ldi	r20, 0x0D	; 13
    1344:	5b e3       	ldi	r21, 0x3B	; 59
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	62 e2       	ldi	r22, 0x22	; 34
    1354:	7d ef       	ldi	r23, 0xFD	; 253
    1356:	86 e8       	ldi	r24, 0x86	; 134
    1358:	9f e3       	ldi	r25, 0x3F	; 63
    135a:	0e 94 33 29 	call	0x5266	; 0x5266 <__subsf3>
    135e:	9b 01       	movw	r18, r22
    1360:	ac 01       	movw	r20, r24
    1362:	c5 01       	movw	r24, r10
    1364:	b4 01       	movw	r22, r8
    1366:	0e 94 a5 29 	call	0x534a	; 0x534a <__divsf3>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1370:	0f 2e       	mov	r0, r31
    1372:	c1 2c       	mov	r12, r1
    1374:	f0 e8       	ldi	r31, 0x80	; 128
    1376:	df 2e       	mov	r13, r31
    1378:	f6 e2       	ldi	r31, 0x26	; 38
    137a:	ef 2e       	mov	r14, r31
    137c:	f4 ec       	ldi	r31, 0xC4	; 196
    137e:	ff 2e       	mov	r15, r31
    1380:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 a0 29 	call	0x5340	; 0x5340 <__cmpsf2>
    1390:	88 23       	and	r24, r24
    1392:	4c f4       	brge	.+18     	; 0x13a6 <get_humidity+0x114>
		humidity = BADFLOAT;
    1394:	0f 2e       	mov	r0, r31
    1396:	c1 2c       	mov	r12, r1
    1398:	f0 e8       	ldi	r31, 0x80	; 128
    139a:	df 2e       	mov	r13, r31
    139c:	f6 e2       	ldi	r31, 0x26	; 38
    139e:	ef 2e       	mov	r14, r31
    13a0:	f4 ec       	ldi	r31, 0xC4	; 196
    13a2:	ff 2e       	mov	r15, r31
    13a4:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	24 96       	adiw	r28, 0x04	; 4
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	9f 90       	pop	r9
    13c6:	8f 90       	pop	r8
    13c8:	08 95       	ret

000013ca <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2b 97       	sbiw	r28, 0x0b	; 11
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    13d8:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <rebootackd>
	timerOLED = 0;					// See oled.h
    13dc:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    13e0:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    13e4:	80 ee       	ldi	r24, 0xE0	; 224
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    13ec:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    13f0:	0e 94 a3 10 	call	0x2146	; 0x2146 <init_PORTS>
	init_TWI();
    13f4:	0e 94 e7 25 	call	0x4bce	; 0x4bce <init_TWI>
	init_PNEU();
    13f8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1404:	0e 94 9c 0c 	call	0x1938	; 0x1938 <init_MMA8451>
	init_OLED();	// Needs TWI
    1408:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    140c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <init_EEPROM>
	init_USART();
    1410:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <init_USART>
	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <start_TCB0>
	sei();
    141c:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    141e:	0e 94 98 21 	call	0x4330	; 0x4330 <init_MOTORS>
	get_VERSION(versionstr);
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	62 e4       	ldi	r22, 0x42	; 66
    142e:	75 ea       	ldi	r23, 0xA5	; 165
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1436:	42 e0       	ldi	r20, 0x02	; 2
    1438:	be 01       	movw	r22, r28
    143a:	6f 5f       	subi	r22, 0xFF	; 255
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>

}
    1444:	2b 96       	adiw	r28, 0x0b	; 11
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <read_ionpump+0x12>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <read_ionpump+0x14>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	21 f0       	breq	.+8      	; 0x1474 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	c1 f5       	brne	.+112    	; 0x14e0 <read_ionpump+0x90>
		pins = AIN23;
    1470:	40 e3       	ldi	r20, 0x30	; 48
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1474:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1476:	8e 01       	movw	r16, r28
    1478:	0f 5f       	subi	r16, 0xFF	; 255
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	20 e8       	ldi	r18, 0x80	; 128
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	89 e4       	ldi	r24, 0x49	; 73
    1482:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    1486:	83 36       	cpi	r24, 0x63	; 99
    1488:	81 f1       	breq	.+96     	; 0x14ea <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    148a:	c9 80       	ldd	r12, Y+1	; 0x01
    148c:	da 80       	ldd	r13, Y+2	; 0x02
    148e:	eb 80       	ldd	r14, Y+3	; 0x03
    1490:	fc 80       	ldd	r15, Y+4	; 0x04
    1492:	2d ec       	ldi	r18, 0xCD	; 205
    1494:	3c ec       	ldi	r19, 0xCC	; 204
    1496:	4c ec       	ldi	r20, 0xCC	; 204
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	c7 01       	movw	r24, r14
    149c:	b6 01       	movw	r22, r12
    149e:	0e 94 a0 29 	call	0x5340	; 0x5340 <__cmpsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	3c f1       	brlt	.+78     	; 0x14f4 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e4       	ldi	r21, 0x40	; 64
    14ae:	c7 01       	movw	r24, r14
    14b0:	b6 01       	movw	r22, r12
    14b2:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	14 f1       	brlt	.+68     	; 0x14fe <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    14ba:	29 e7       	ldi	r18, 0x79	; 121
    14bc:	39 ee       	ldi	r19, 0xE9	; 233
    14be:	42 e0       	ldi	r20, 0x02	; 2
    14c0:	50 e4       	ldi	r21, 0x40	; 64
    14c2:	c7 01       	movw	r24, r14
    14c4:	b6 01       	movw	r22, r12
    14c6:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    14ca:	2e e6       	ldi	r18, 0x6E	; 110
    14cc:	33 ea       	ldi	r19, 0xA3	; 163
    14ce:	4b ed       	ldi	r20, 0xDB	; 219
    14d0:	50 e4       	ldi	r21, 0x40	; 64
    14d2:	0e 94 33 29 	call	0x5266	; 0x5266 <__subsf3>
	return(vacuum);
    14d6:	56 2f       	mov	r21, r22
    14d8:	47 2f       	mov	r20, r23
    14da:	38 2f       	mov	r19, r24
    14dc:	29 2f       	mov	r18, r25
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	36 e2       	ldi	r19, 0x26	; 38
    14e6:	24 ec       	ldi	r18, 0xC4	; 196
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	36 e2       	ldi	r19, 0x26	; 38
    14f0:	24 ec       	ldi	r18, 0xC4	; 196
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	36 e2       	ldi	r19, 0x26	; 38
    14fa:	24 ec       	ldi	r18, 0xC4	; 196
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	36 e2       	ldi	r19, 0x26	; 38
    1504:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1506:	65 2f       	mov	r22, r21
    1508:	74 2f       	mov	r23, r20
    150a:	83 2f       	mov	r24, r19
    150c:	92 2f       	mov	r25, r18
    150e:	24 96       	adiw	r28, 0x04	; 4
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	08 95       	ret

00001526 <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <firstpass>
	squelchErrors = YES;
    152c:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
	initialize();
    1530:	0e 94 e5 09 	call	0x13ca	; 0x13ca <initialize>
	squelchErrors = NO;
    1534:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1538:	80 91 42 2e 	lds	r24, 0x2E42	; 0x802e42 <recv0_buf+0x103>
    153c:	88 23       	and	r24, r24
    153e:	21 f0       	breq	.+8      	; 0x1548 <main+0x22>
			recv0_buf.done = NO;
    1540:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
			commands();
    1544:	0e 94 96 04 	call	0x92c	; 0x92c <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1548:	20 91 16 2a 	lds	r18, 0x2A16	; 0x802a16 <timerOLED>
    154c:	30 91 17 2a 	lds	r19, 0x2A17	; 0x802a17 <timerOLED+0x1>
    1550:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    1554:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	78 f4       	brcc	.+30     	; 0x157c <main+0x56>
			squelchErrors = YES;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			clear_OLED(0);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <clear_OLED>
			clear_OLED(1);
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <clear_OLED>
			timerOLED = 0;
    1570:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1574:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
			squelchErrors = NO;
    1578:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    157c:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    1580:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <timeoutSAVEENCODER>
    1584:	89 17       	cp	r24, r25
    1586:	c0 f6       	brcc	.-80     	; 0x1538 <main+0x12>
    1588:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rebootackd>
    158c:	88 23       	and	r24, r24
    158e:	a1 f2       	breq	.-88     	; 0x1538 <main+0x12>
			squelchErrors = YES;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    1596:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    159a:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
			squelchErrors = NO;
    159e:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
    15a2:	ca cf       	rjmp	.-108    	; 0x1538 <main+0x12>

000015a4 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	c8 2f       	mov	r28, r24
    15aa:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    15b2:	83 36       	cpi	r24, 0x63	; 99
    15b4:	51 f4       	brne	.+20     	; 0x15ca <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    15b6:	63 e5       	ldi	r22, 0x53	; 83
    15b8:	75 ea       	ldi	r23, 0xA5	; 165
    15ba:	82 e9       	ldi	r24, 0x92	; 146
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    15c2:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(0xFF);
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	19 c0       	rjmp	.+50     	; 0x15fc <read_MCP23008+0x58>
	}
	write_TWI(reg);
    15ca:	8d 2f       	mov	r24, r29
    15cc:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	8c 2f       	mov	r24, r28
    15d4:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    15d8:	83 36       	cpi	r24, 0x63	; 99
    15da:	51 f4       	brne	.+20     	; 0x15f0 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    15dc:	63 e5       	ldi	r22, 0x53	; 83
    15de:	75 ea       	ldi	r23, 0xA5	; 165
    15e0:	82 e9       	ldi	r24, 0x92	; 146
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    15e8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(0xFF);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    15f0:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
    15f4:	c8 2f       	mov	r28, r24
	stop_TWI();
    15f6:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
	return(value);
    15fa:	8c 2f       	mov	r24, r28

}
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	d6 2f       	mov	r29, r22
    160a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    1612:	c8 2f       	mov	r28, r24
    1614:	83 36       	cpi	r24, 0x63	; 99
    1616:	49 f4       	brne	.+18     	; 0x162a <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1618:	67 e6       	ldi	r22, 0x67	; 103
    161a:	75 ea       	ldi	r23, 0xA5	; 165
    161c:	82 e9       	ldi	r24, 0x92	; 146
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    1624:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    1628:	15 c0       	rjmp	.+42     	; 0x1654 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    162a:	8d 2f       	mov	r24, r29
    162c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1630:	88 23       	and	r24, r24
    1632:	21 f0       	breq	.+8      	; 0x163c <write_MCP23008+0x3a>
		stop_TWI();
    1634:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    1638:	c3 e6       	ldi	r28, 0x63	; 99
    163a:	0c c0       	rjmp	.+24     	; 0x1654 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    163c:	81 2f       	mov	r24, r17
    163e:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1642:	88 23       	and	r24, r24
    1644:	21 f0       	breq	.+8      	; 0x164e <write_MCP23008+0x4c>
		stop_TWI();
    1646:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    164a:	c3 e6       	ldi	r28, 0x63	; 99
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <write_MCP23008+0x52>
	}
	stop_TWI();
    164e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
	return(NOERROR);
    1652:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1654:	8c 2f       	mov	r24, r28
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	08 95       	ret

0000165e <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	88 e1       	ldi	r24, 0x18	; 24
    1676:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    167a:	83 36       	cpi	r24, 0x63	; 99
    167c:	51 f4       	brne	.+20     	; 0x1692 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e8       	ldi	r21, 0x80	; 128
    1682:	66 e2       	ldi	r22, 0x26	; 38
    1684:	74 ec       	ldi	r23, 0xC4	; 196
    1686:	f8 01       	movw	r30, r16
    1688:	40 83       	st	Z, r20
    168a:	51 83       	std	Z+1, r21	; 0x01
    168c:	62 83       	std	Z+2, r22	; 0x02
    168e:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1690:	43 c0       	rjmp	.+134    	; 0x1718 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1692:	85 e0       	ldi	r24, 0x05	; 5
    1694:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	88 e1       	ldi	r24, 0x18	; 24
    169c:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
	highbyte = read_TWI();
    16a0:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <read_TWI>
    16a4:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    16a6:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
    16aa:	d8 2f       	mov	r29, r24
	stop_TWI();
    16ac:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    16b0:	fc 2f       	mov	r31, r28
    16b2:	f0 71       	andi	r31, 0x10	; 16
    16b4:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    16b6:	6c 2f       	mov	r22, r28
    16b8:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 17 2a 	call	0x542e	; 0x542e <__floatunsisf>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    16d0:	4b 01       	movw	r8, r22
    16d2:	5c 01       	movw	r10, r24
    16d4:	6d 2f       	mov	r22, r29
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 17 2a 	call	0x542e	; 0x542e <__floatunsisf>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5d e3       	ldi	r21, 0x3D	; 61
    16e8:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	c5 01       	movw	r24, r10
    16f2:	b4 01       	movw	r22, r8
    16f4:	0e 94 34 29 	call	0x5268	; 0x5268 <__addsf3>
	if (sign) {
    16f8:	ff 20       	and	r15, r15
    16fa:	41 f0       	breq	.+16     	; 0x170c <read_MCP9808+0xae>
		temp = 256.0 - temp;
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	93 e4       	ldi	r25, 0x43	; 67
    1708:	0e 94 33 29 	call	0x5266	; 0x5266 <__subsf3>
	}
	*temperature = temp;
    170c:	f8 01       	movw	r30, r16
    170e:	60 83       	st	Z, r22
    1710:	71 83       	std	Z+1, r23	; 0x01
    1712:	82 83       	std	Z+2, r24	; 0x02
    1714:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1716:	80 e0       	ldi	r24, 0x00	; 0
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	08 95       	ret

0000172c <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	f8 2e       	mov	r15, r24
    173a:	e6 2e       	mov	r14, r22
    173c:	ea 01       	movw	r28, r20
    173e:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    1746:	18 2f       	mov	r17, r24
    1748:	83 36       	cpi	r24, 0x63	; 99
    174a:	19 f4       	brne	.+6      	; 0x1752 <read_MMA8451+0x26>
		stop_TWI();
    174c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    1750:	23 c0       	rjmp	.+70     	; 0x1798 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1752:	8e 2d       	mov	r24, r14
    1754:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1758:	18 2f       	mov	r17, r24
    175a:	83 36       	cpi	r24, 0x63	; 99
    175c:	e9 f0       	breq	.+58     	; 0x1798 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	8f 2d       	mov	r24, r15
    1762:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    1766:	18 2f       	mov	r17, r24
    1768:	83 36       	cpi	r24, 0x63	; 99
    176a:	69 f4       	brne	.+26     	; 0x1786 <read_MMA8451+0x5a>
		stop_TWI();
    176c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(ERROR);
    1770:	13 c0       	rjmp	.+38     	; 0x1798 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1772:	7e 01       	movw	r14, r28
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	e8 1a       	sub	r14, r24
    1778:	f8 0a       	sbc	r15, r24
    177a:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <read_TWI>
    177e:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1780:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1782:	e7 01       	movw	r28, r14
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <read_MMA8451+0x5c>
    1786:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1788:	10 17       	cp	r17, r16
    178a:	98 f3       	brcs	.-26     	; 0x1772 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    178c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <readlast_TWI>
    1790:	88 83       	st	Y, r24
	stop_TWI();
    1792:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
	return(NOERROR);
    1796:	10 e0       	ldi	r17, 0x00	; 0

}
    1798:	81 2f       	mov	r24, r17
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	26 97       	sbiw	r28, 0x06	; 6
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	6c 01       	movw	r12, r24
    17c4:	7b 01       	movw	r14, r22
    17c6:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e8       	ldi	r25, 0x80	; 128
    17cc:	a6 e2       	ldi	r26, 0x26	; 38
    17ce:	b4 ec       	ldi	r27, 0xC4	; 196
    17d0:	fa 01       	movw	r30, r20
    17d2:	80 83       	st	Z, r24
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	a2 83       	std	Z+2, r26	; 0x02
    17d8:	b3 83       	std	Z+3, r27	; 0x03
    17da:	fb 01       	movw	r30, r22
    17dc:	80 83       	st	Z, r24
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	a2 83       	std	Z+2, r26	; 0x02
    17e2:	b3 83       	std	Z+3, r27	; 0x03
    17e4:	f6 01       	movw	r30, r12
    17e6:	80 83       	st	Z, r24
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	a2 83       	std	Z+2, r26	; 0x02
    17ec:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    17ee:	26 e0       	ldi	r18, 0x06	; 6
    17f0:	ae 01       	movw	r20, r28
    17f2:	4f 5f       	subi	r20, 0xFF	; 255
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	8d e1       	ldi	r24, 0x1D	; 29
    17fa:	0e 94 96 0b 	call	0x172c	; 0x172c <read_MMA8451>
    17fe:	83 36       	cpi	r24, 0x63	; 99
    1800:	09 f4       	brne	.+2      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
		return(ERROR);
	}

	ix = datain[0];
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1808:	76 2f       	mov	r23, r22
    180a:	66 27       	eor	r22, r22
	ix |= datain[1];
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	68 2b       	or	r22, r24
	ix >>= 2;
    1810:	75 95       	asr	r23
    1812:	67 95       	ror	r22
    1814:	75 95       	asr	r23
    1816:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1818:	07 2e       	mov	r0, r23
    181a:	00 0c       	add	r0, r0
    181c:	88 0b       	sbc	r24, r24
    181e:	99 0b       	sbc	r25, r25
    1820:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	59 e3       	ldi	r21, 0x39	; 57
    182c:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    1830:	26 e6       	ldi	r18, 0x66	; 102
    1832:	36 e2       	ldi	r19, 0x26	; 38
    1834:	45 e7       	ldi	r20, 0x75	; 117
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    183c:	f6 01       	movw	r30, r12
    183e:	60 83       	st	Z, r22
    1840:	71 83       	std	Z+1, r23	; 0x01
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1846:	6b 81       	ldd	r22, Y+3	; 0x03
    1848:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    184a:	76 2f       	mov	r23, r22
    184c:	66 27       	eor	r22, r22
	iy |= datain[3];
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	68 2b       	or	r22, r24
	iy >>= 2;
    1852:	75 95       	asr	r23
    1854:	67 95       	ror	r22
    1856:	75 95       	asr	r23
    1858:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    185a:	07 2e       	mov	r0, r23
    185c:	00 0c       	add	r0, r0
    185e:	88 0b       	sbc	r24, r24
    1860:	99 0b       	sbc	r25, r25
    1862:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	59 e3       	ldi	r21, 0x39	; 57
    186e:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    1872:	26 e6       	ldi	r18, 0x66	; 102
    1874:	36 e2       	ldi	r19, 0x26	; 38
    1876:	45 e7       	ldi	r20, 0x75	; 117
    1878:	54 e4       	ldi	r21, 0x44	; 68
    187a:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    187e:	f7 01       	movw	r30, r14
    1880:	60 83       	st	Z, r22
    1882:	71 83       	std	Z+1, r23	; 0x01
    1884:	82 83       	std	Z+2, r24	; 0x02
    1886:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1888:	6d 81       	ldd	r22, Y+5	; 0x05
    188a:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    188c:	76 2f       	mov	r23, r22
    188e:	66 27       	eor	r22, r22
	iz |= datain[5];
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	68 2b       	or	r22, r24
	iz >>= 2;
    1894:	75 95       	asr	r23
    1896:	67 95       	ror	r22
    1898:	75 95       	asr	r23
    189a:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    189c:	07 2e       	mov	r0, r23
    189e:	00 0c       	add	r0, r0
    18a0:	88 0b       	sbc	r24, r24
    18a2:	99 0b       	sbc	r25, r25
    18a4:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	59 e3       	ldi	r21, 0x39	; 57
    18b0:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    18b4:	26 e6       	ldi	r18, 0x66	; 102
    18b6:	36 e2       	ldi	r19, 0x26	; 38
    18b8:	45 e7       	ldi	r20, 0x75	; 117
    18ba:	54 e4       	ldi	r21, 0x44	; 68
    18bc:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    18c0:	f8 01       	movw	r30, r16
    18c2:	60 83       	st	Z, r22
    18c4:	71 83       	std	Z+1, r23	; 0x01
    18c6:	82 83       	std	Z+2, r24	; 0x02
    18c8:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    18ca:	80 e0       	ldi	r24, 0x00	; 0

}
    18cc:	26 96       	adiw	r28, 0x06	; 6
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    18e2:	08 95       	ret

000018e4 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	d6 2f       	mov	r29, r22
    18ec:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
    18f4:	c8 2f       	mov	r28, r24
    18f6:	88 23       	and	r24, r24
    18f8:	21 f0       	breq	.+8      	; 0x1902 <write_MMA8451+0x1e>
		stop_TWI();
    18fa:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(retval);
    18fe:	8c 2f       	mov	r24, r28
    1900:	17 c0       	rjmp	.+46     	; 0x1930 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1902:	8d 2f       	mov	r24, r29
    1904:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    1908:	c8 2f       	mov	r28, r24
    190a:	88 23       	and	r24, r24
    190c:	21 f0       	breq	.+8      	; 0x1916 <write_MMA8451+0x32>
		stop_TWI();
    190e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(retval);
    1912:	8c 2f       	mov	r24, r28
    1914:	0d c0       	rjmp	.+26     	; 0x1930 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1916:	81 2f       	mov	r24, r17
    1918:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
    191c:	c8 2f       	mov	r28, r24
    191e:	88 23       	and	r24, r24
    1920:	21 f0       	breq	.+8      	; 0x192a <write_MMA8451+0x46>
		stop_TWI();
    1922:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
		return(retval);
    1926:	8c 2f       	mov	r24, r28
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <write_MMA8451+0x4c>
	}
	stop_TWI();
    192a:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>
	return(0);
    192e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	08 95       	ret

00001938 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	1f 92       	push	r1
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1942:	40 e4       	ldi	r20, 0x40	; 64
    1944:	6b e2       	ldi	r22, 0x2B	; 43
    1946:	8d e1       	ldi	r24, 0x1D	; 29
    1948:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    194c:	21 e0       	ldi	r18, 0x01	; 1
    194e:	ae 01       	movw	r20, r28
    1950:	4f 5f       	subi	r20, 0xFF	; 255
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	6b e2       	ldi	r22, 0x2B	; 43
    1956:	8d e1       	ldi	r24, 0x1D	; 29
    1958:	0e 94 96 0b 	call	0x172c	; 0x172c <read_MMA8451>
	while (retval & 0x40) {
    195c:	08 c0       	rjmp	.+16     	; 0x196e <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	ae 01       	movw	r20, r28
    1962:	4f 5f       	subi	r20, 0xFF	; 255
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	6b e2       	ldi	r22, 0x2B	; 43
    1968:	8d e1       	ldi	r24, 0x1D	; 29
    196a:	0e 94 96 0b 	call	0x172c	; 0x172c <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	86 fd       	sbrc	r24, 6
    1972:	f5 cf       	rjmp	.-22     	; 0x195e <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1974:	40 ec       	ldi	r20, 0xC0	; 192
    1976:	6f e0       	ldi	r22, 0x0F	; 15
    1978:	8d e1       	ldi	r24, 0x1D	; 29
    197a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    197e:	42 e0       	ldi	r20, 0x02	; 2
    1980:	6b e2       	ldi	r22, 0x2B	; 43
    1982:	8d e1       	ldi	r24, 0x1D	; 29
    1984:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1988:	4d e3       	ldi	r20, 0x3D	; 61
    198a:	6a e2       	ldi	r22, 0x2A	; 42
    198c:	8d e1       	ldi	r24, 0x1D	; 29
    198e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <write_MMA8451>

	return(retval);

}
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	0f 90       	pop	r0
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    199c:	ef 92       	push	r14
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	2e 97       	sbiw	r28, 0x0e	; 14
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    19b4:	88 e0       	ldi	r24, 0x08	; 8
    19b6:	ec e7       	ldi	r30, 0x7C	; 124
    19b8:	f5 ea       	ldi	r31, 0xA5	; 165
    19ba:	de 01       	movw	r26, r28
    19bc:	11 96       	adiw	r26, 0x01	; 1
    19be:	01 90       	ld	r0, Z+
    19c0:	0d 92       	st	X+, r0
    19c2:	8a 95       	dec	r24
    19c4:	e1 f7       	brne	.-8      	; 0x19be <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    19c6:	f8 01       	movw	r30, r16
    19c8:	01 90       	ld	r0, Z+
    19ca:	00 20       	and	r0, r0
    19cc:	e9 f7       	brne	.-6      	; 0x19c8 <checksum_NMEA+0x2c>
    19ce:	31 97       	sbiw	r30, 0x01	; 1
    19d0:	3e 2f       	mov	r19, r30
    19d2:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    19d4:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    19da:	f8 01       	movw	r30, r16
    19dc:	e8 0f       	add	r30, r24
    19de:	f1 1d       	adc	r31, r1
    19e0:	20 81       	ld	r18, Z
    19e2:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	83 17       	cp	r24, r19
    19e8:	c0 f3       	brcs	.-16     	; 0x19da <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    19ea:	1f 92       	push	r1
    19ec:	9f 93       	push	r25
    19ee:	ce 01       	movw	r24, r28
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	7e 01       	movw	r14, r28
    19f8:	89 e0       	ldi	r24, 0x09	; 9
    19fa:	e8 0e       	add	r14, r24
    19fc:	f1 1c       	adc	r15, r1
    19fe:	ff 92       	push	r15
    1a00:	ef 92       	push	r14
    1a02:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
	strcat(str, chksum);
    1a06:	b7 01       	movw	r22, r14
    1a08:	c8 01       	movw	r24, r16
    1a0a:	0e 94 9a 30 	call	0x6134	; 0x6134 <strcat>

}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	2e 96       	adiw	r28, 0x0e	; 14
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	08 95       	ret

00001a2e <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1a2e:	e0 e6       	ldi	r30, 0x60	; 96
    1a30:	f4 e0       	ldi	r31, 0x04	; 4
    1a32:	80 e4       	ldi	r24, 0x40	; 64
    1a34:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1a36:	81 83       	std	Z+1, r24	; 0x01
    1a38:	a1 e4       	ldi	r26, 0x41	; 65
    1a3a:	b3 e0       	ldi	r27, 0x03	; 3
    1a3c:	11 97       	sbiw	r26, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <reset_OLED+0xe>
    1a40:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1a42:	85 83       	std	Z+5, r24	; 0x05
    1a44:	08 95       	ret

00001a46 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	d6 2f       	mov	r29, r22
    1a4c:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	0e 94 33 26 	call	0x4c66	; 0x4c66 <start_TWI>
	write_TWI(type);
    1a54:	8d 2f       	mov	r24, r29
    1a56:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
	write_TWI(byteToSend);
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <write_TWI>
	stop_TWI();
    1a60:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <stop_TWI>

}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1a6a:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1a6c:	88 23       	and	r24, r24
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <init_OLEDDISPLAY+0xc>
    1a74:	9e c0       	rjmp	.+316    	; 0x1bb2 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1a76:	cd e3       	ldi	r28, 0x3D	; 61
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1a7a:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1a7c:	4a e2       	ldi	r20, 0x2A	; 42
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	8c 2f       	mov	r24, r28
    1a82:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1a86:	41 e7       	ldi	r20, 0x71	; 113
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	8c 2f       	mov	r24, r28
    1a8c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1a90:	4c e5       	ldi	r20, 0x5C	; 92
    1a92:	60 e4       	ldi	r22, 0x40	; 64
    1a94:	8c 2f       	mov	r24, r28
    1a96:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1a9a:	48 e2       	ldi	r20, 0x28	; 40
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	8c 2f       	mov	r24, r28
    1aa0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1aa4:	48 e0       	ldi	r20, 0x08	; 8
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	8c 2f       	mov	r24, r28
    1aaa:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1aae:	4a e2       	ldi	r20, 0x2A	; 42
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	8c 2f       	mov	r24, r28
    1ab4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ab8:	49 e7       	ldi	r20, 0x79	; 121
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	8c 2f       	mov	r24, r28
    1abe:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1ac2:	45 ed       	ldi	r20, 0xD5	; 213
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	8c 2f       	mov	r24, r28
    1ac8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1acc:	40 e7       	ldi	r20, 0x70	; 112
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	8c 2f       	mov	r24, r28
    1ad2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1ad6:	48 e7       	ldi	r20, 0x78	; 120
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	8c 2f       	mov	r24, r28
    1adc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1ae0:	48 e0       	ldi	r20, 0x08	; 8
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	8c 2f       	mov	r24, r28
    1ae6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1aea:	46 e0       	ldi	r20, 0x06	; 6
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	8c 2f       	mov	r24, r28
    1af0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1af4:	42 e7       	ldi	r20, 0x72	; 114
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	8c 2f       	mov	r24, r28
    1afa:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	60 e4       	ldi	r22, 0x40	; 64
    1b02:	8c 2f       	mov	r24, r28
    1b04:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b08:	4a e2       	ldi	r20, 0x2A	; 42
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	8c 2f       	mov	r24, r28
    1b0e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1b12:	49 e7       	ldi	r20, 0x79	; 121
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	8c 2f       	mov	r24, r28
    1b18:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1b1c:	4a ed       	ldi	r20, 0xDA	; 218
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	8c 2f       	mov	r24, r28
    1b22:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	8c 2f       	mov	r24, r28
    1b2c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1b30:	4c ed       	ldi	r20, 0xDC	; 220
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	8c 2f       	mov	r24, r28
    1b36:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	8c 2f       	mov	r24, r28
    1b40:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1b44:	41 e8       	ldi	r20, 0x81	; 129
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	8c 2f       	mov	r24, r28
    1b4a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	8c 2f       	mov	r24, r28
    1b54:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1b58:	49 ed       	ldi	r20, 0xD9	; 217
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	8c 2f       	mov	r24, r28
    1b5e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1b62:	41 ef       	ldi	r20, 0xF1	; 241
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	8c 2f       	mov	r24, r28
    1b68:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1b6c:	4b ed       	ldi	r20, 0xDB	; 219
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	8c 2f       	mov	r24, r28
    1b72:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1b76:	40 e4       	ldi	r20, 0x40	; 64
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	8c 2f       	mov	r24, r28
    1b7c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b80:	48 e7       	ldi	r20, 0x78	; 120
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	8c 2f       	mov	r24, r28
    1b86:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b8a:	48 e2       	ldi	r20, 0x28	; 40
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	8c 2f       	mov	r24, r28
    1b90:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	8c 2f       	mov	r24, r28
    1b9a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	8c 2f       	mov	r24, r28
    1ba4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1ba8:	4c e0       	ldi	r20, 0x0C	; 12
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	8c 2f       	mov	r24, r28
    1bae:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>

}
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1bb6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <reset_OLED>
	init_OLEDDISPLAY(0);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <init_OLEDDISPLAY>
    1bc6:	2a e6       	ldi	r18, 0x6A	; 106
    1bc8:	84 e0       	ldi	r24, 0x04	; 4
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	21 50       	subi	r18, 0x01	; 1
    1bce:	80 40       	sbci	r24, 0x00	; 0
    1bd0:	90 40       	sbci	r25, 0x00	; 0
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <init_OLED+0x16>
    1bd4:	00 c0       	rjmp	.+0      	; 0x1bd6 <init_OLED+0x20>
    1bd6:	08 95       	ret

00001bd8 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	e2 97       	sbiw	r28, 0x32	; 50
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1bf0:	91 e1       	ldi	r25, 0x11	; 17
    1bf2:	e4 e8       	ldi	r30, 0x84	; 132
    1bf4:	f5 ea       	ldi	r31, 0xA5	; 165
    1bf6:	de 01       	movw	r26, r28
    1bf8:	92 96       	adiw	r26, 0x22	; 34
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	0d 92       	st	X+, r0
    1bfe:	9a 95       	dec	r25
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1c02:	81 11       	cpse	r24, r1
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1c06:	0c e3       	ldi	r16, 0x3C	; 60
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1c0a:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	7c 01       	movw	r14, r24
    1c12:	0e 94 a5 30 	call	0x614a	; 0x614a <strcpy>
	if (strlen(strbuf) > 16) {
    1c16:	f7 01       	movw	r30, r14
    1c18:	01 90       	ld	r0, Z+
    1c1a:	00 20       	and	r0, r0
    1c1c:	e9 f7       	brne	.-6      	; 0x1c18 <writestr_OLED+0x40>
    1c1e:	31 97       	sbiw	r30, 0x01	; 1
    1c20:	ee 19       	sub	r30, r14
    1c22:	ff 09       	sbc	r31, r15
    1c24:	71 97       	sbiw	r30, 0x11	; 17
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1c28:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1c2a:	be 01       	movw	r22, r28
    1c2c:	6e 5d       	subi	r22, 0xDE	; 222
    1c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c30:	ce 01       	movw	r24, r28
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	0e 94 9a 30 	call	0x6134	; 0x6134 <strcat>

	if (lineno == 1) {
    1c38:	11 30       	cpi	r17, 0x01	; 1
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	80 2f       	mov	r24, r16
    1c42:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	12 c0       	rjmp	.+36     	; 0x1c6e <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1c4a:	40 ec       	ldi	r20, 0xC0	; 192
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	80 2f       	mov	r24, r16
    1c50:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>
    1c54:	f8 cf       	rjmp	.-16     	; 0x1c46 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1c56:	e1 e0       	ldi	r30, 0x01	; 1
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	ec 0f       	add	r30, r28
    1c5c:	fd 1f       	adc	r31, r29
    1c5e:	e1 0f       	add	r30, r17
    1c60:	f1 1d       	adc	r31, r1
    1c62:	40 81       	ld	r20, Z
    1c64:	60 e4       	ldi	r22, 0x40	; 64
    1c66:	80 2f       	mov	r24, r16
    1c68:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1c6c:	1f 5f       	subi	r17, 0xFF	; 255
    1c6e:	10 31       	cpi	r17, 0x10	; 16
    1c70:	90 f3       	brcs	.-28     	; 0x1c56 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1c72:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1c76:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1c7a:	e2 96       	adiw	r28, 0x32	; 50
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	08 95       	ret

00001c8e <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	1f 92       	push	r1
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1c9c:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	be 01       	movw	r22, r28
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1caa:	42 e0       	ldi	r20, 0x02	; 2
    1cac:	be 01       	movw	r22, r28
    1cae:	6f 5f       	subi	r22, 0xFF	; 255
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	81 2f       	mov	r24, r17
    1cb4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
	timerOLED = 0;
    1cb8:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1cbc:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1cc0:	0f 90       	pop	r0
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	08 95       	ret

00001cca <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	84 e2       	ldi	r24, 0x24	; 36
    1cd0:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1cd4:	83 36       	cpi	r24, 0x63	; 99
    1cd6:	a9 f1       	breq	.+106    	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	6a e0       	ldi	r22, 0x0A	; 10
    1cdc:	84 e2       	ldi	r24, 0x24	; 36
    1cde:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1ce2:	83 36       	cpi	r24, 0x63	; 99
    1ce4:	71 f1       	breq	.+92     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1ce6:	4e ef       	ldi	r20, 0xFE	; 254
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	81 e2       	ldi	r24, 0x21	; 33
    1cec:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1cf0:	83 36       	cpi	r24, 0x63	; 99
    1cf2:	39 f1       	breq	.+78     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	81 e2       	ldi	r24, 0x21	; 33
    1cfa:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1cfe:	83 36       	cpi	r24, 0x63	; 99
    1d00:	01 f1       	breq	.+64     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1d02:	4c ef       	ldi	r20, 0xFC	; 252
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	81 e2       	ldi	r24, 0x21	; 33
    1d08:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1d0c:	83 36       	cpi	r24, 0x63	; 99
    1d0e:	c9 f0       	breq	.+50     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	64 e0       	ldi	r22, 0x04	; 4
    1d14:	81 e2       	ldi	r24, 0x21	; 33
    1d16:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1d1a:	83 36       	cpi	r24, 0x63	; 99
    1d1c:	91 f0       	breq	.+36     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	65 e0       	ldi	r22, 0x05	; 5
    1d22:	81 e2       	ldi	r24, 0x21	; 33
    1d24:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1d28:	83 36       	cpi	r24, 0x63	; 99
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	66 e0       	ldi	r22, 0x06	; 6
    1d30:	81 e2       	ldi	r24, 0x21	; 33
    1d32:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    1d36:	83 36       	cpi	r24, 0x63	; 99
    1d38:	21 f0       	breq	.+8      	; 0x1d42 <init_PNEU+0x78>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1d3a:	89 e0       	ldi	r24, 0x09	; 9
    1d3c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	return(NOERROR);
    1d40:	80 e0       	ldi	r24, 0x00	; 0

}
    1d42:	08 95       	ret

00001d44 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	6c 01       	movw	r12, r24
    1d56:	8b 01       	movw	r16, r22
    1d58:	7a 01       	movw	r14, r20
    1d5a:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d5c:	69 e0       	ldi	r22, 0x09	; 9
    1d5e:	81 e2       	ldi	r24, 0x21	; 33
    1d60:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d64:	98 2f       	mov	r25, r24
    1d66:	92 95       	swap	r25
    1d68:	96 95       	lsr	r25
    1d6a:	96 95       	lsr	r25
    1d6c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d6e:	91 30       	cpi	r25, 0x01	; 1
    1d70:	21 f4       	brne	.+8      	; 0x1d7a <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d72:	93 e6       	ldi	r25, 0x63	; 99
    1d74:	f6 01       	movw	r30, r12
    1d76:	90 83       	st	Z, r25
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d7a:	92 30       	cpi	r25, 0x02	; 2
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d7e:	9f e6       	ldi	r25, 0x6F	; 111
    1d80:	f6 01       	movw	r30, r12
    1d82:	90 83       	st	Z, r25
    1d84:	09 c0       	rjmp	.+18     	; 0x1d98 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1d86:	93 30       	cpi	r25, 0x03	; 3
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <read_PNEUSensors+0x4e>
		*shutter = 't';
    1d8a:	94 e7       	ldi	r25, 0x74	; 116
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	90 83       	st	Z, r25
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1d92:	98 e7       	ldi	r25, 0x78	; 120
    1d94:	f6 01       	movw	r30, r12
    1d96:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1d98:	98 2f       	mov	r25, r24
    1d9a:	96 95       	lsr	r25
    1d9c:	96 95       	lsr	r25
	state &= 0b00000011;
    1d9e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1da0:	91 30       	cpi	r25, 0x01	; 1
    1da2:	21 f4       	brne	.+8      	; 0x1dac <read_PNEUSensors+0x68>
		*right = 'c';
    1da4:	93 e6       	ldi	r25, 0x63	; 99
    1da6:	f7 01       	movw	r30, r14
    1da8:	90 83       	st	Z, r25
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1dac:	92 30       	cpi	r25, 0x02	; 2
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <read_PNEUSensors+0x74>
		*right = 'o';
    1db0:	9f e6       	ldi	r25, 0x6F	; 111
    1db2:	f7 01       	movw	r30, r14
    1db4:	90 83       	st	Z, r25
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1db8:	93 30       	cpi	r25, 0x03	; 3
    1dba:	21 f4       	brne	.+8      	; 0x1dc4 <read_PNEUSensors+0x80>
		*right = 't';
    1dbc:	94 e7       	ldi	r25, 0x74	; 116
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	90 83       	st	Z, r25
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1dc4:	98 e7       	ldi	r25, 0x78	; 120
    1dc6:	f7 01       	movw	r30, r14
    1dc8:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1dca:	98 2f       	mov	r25, r24
    1dcc:	92 95       	swap	r25
    1dce:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1dd0:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dd2:	91 30       	cpi	r25, 0x01	; 1
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <read_PNEUSensors+0x9a>
		*left = 'o';
    1dd6:	9f e6       	ldi	r25, 0x6F	; 111
    1dd8:	f8 01       	movw	r30, r16
    1dda:	90 83       	st	Z, r25
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1dde:	92 30       	cpi	r25, 0x02	; 2
    1de0:	21 f4       	brne	.+8      	; 0x1dea <read_PNEUSensors+0xa6>
		*left = 'c';
    1de2:	93 e6       	ldi	r25, 0x63	; 99
    1de4:	f8 01       	movw	r30, r16
    1de6:	90 83       	st	Z, r25
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1dea:	93 30       	cpi	r25, 0x03	; 3
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <read_PNEUSensors+0xb2>
		*left = 't';
    1dee:	94 e7       	ldi	r25, 0x74	; 116
    1df0:	f8 01       	movw	r30, r16
    1df2:	90 83       	st	Z, r25
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1df6:	98 e7       	ldi	r25, 0x78	; 120
    1df8:	f8 01       	movw	r30, r16
    1dfa:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1dfc:	81 ff       	sbrs	r24, 1
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <read_PNEUSensors+0xc2>
		*air = '0';
    1e00:	80 e3       	ldi	r24, 0x30	; 48
    1e02:	88 83       	st	Y, r24
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1e06:	81 e3       	ldi	r24, 0x31	; 49
    1e08:	88 83       	st	Y, r24
	}
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	08 95       	ret

00001e1c <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	d8 2f       	mov	r29, r24
    1e22:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1e24:	69 e0       	ldi	r22, 0x09	; 9
    1e26:	84 e2       	ldi	r24, 0x24	; 36
    1e28:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1e2c:	8d 2b       	or	r24, r29
    1e2e:	48 2f       	mov	r20, r24
    1e30:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1e32:	6a e0       	ldi	r22, 0x0A	; 10
    1e34:	84 e2       	ldi	r24, 0x24	; 36
    1e36:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	6a 97       	sbiw	r28, 0x1a	; 26
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1e4e:	99 e0       	ldi	r25, 0x09	; 9
    1e50:	ef ec       	ldi	r30, 0xCF	; 207
    1e52:	f5 ea       	ldi	r31, 0xA5	; 165
    1e54:	de 01       	movw	r26, r28
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	01 90       	ld	r0, Z+
    1e5a:	0d 92       	st	X+, r0
    1e5c:	9a 95       	dec	r25
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e60:	24 e3       	ldi	r18, 0x34	; 52
    1e62:	82 9f       	mul	r24, r18
    1e64:	c0 01       	movw	r24, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e3 5f       	subi	r30, 0xF3	; 243
    1e6c:	f7 4d       	sbci	r31, 0xD7	; 215
    1e6e:	81 81       	ldd	r24, Z+1	; 0x01
    1e70:	8c 36       	cpi	r24, 0x6C	; 108
    1e72:	31 f1       	breq	.+76     	; 0x1ec0 <close_PNEU+0x80>
    1e74:	18 f4       	brcc	.+6      	; 0x1e7c <close_PNEU+0x3c>
    1e76:	82 36       	cpi	r24, 0x62	; 98
    1e78:	39 f0       	breq	.+14     	; 0x1e88 <close_PNEU+0x48>
    1e7a:	6a c0       	rjmp	.+212    	; 0x1f50 <close_PNEU+0x110>
    1e7c:	82 37       	cpi	r24, 0x72	; 114
    1e7e:	c1 f1       	breq	.+112    	; 0x1ef0 <close_PNEU+0xb0>
    1e80:	83 37       	cpi	r24, 0x73	; 115
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <close_PNEU+0x46>
    1e84:	4d c0       	rjmp	.+154    	; 0x1f20 <close_PNEU+0xe0>
    1e86:	64 c0       	rjmp	.+200    	; 0x1f50 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e88:	6a ee       	ldi	r22, 0xEA	; 234
    1e8a:	84 e4       	ldi	r24, 0x44	; 68
    1e8c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e90:	66 ee       	ldi	r22, 0xE6	; 230
    1e92:	88 e8       	ldi	r24, 0x88	; 136
    1e94:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1e98:	85 e9       	ldi	r24, 0x95	; 149
    1e9a:	95 ea       	ldi	r25, 0xA5	; 165
    1e9c:	9f 93       	push	r25
    1e9e:	8f 93       	push	r24
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	9f 93       	push	r25
    1ea6:	8f 93       	push	r24
    1ea8:	09 96       	adiw	r24, 0x09	; 9
    1eaa:	9f 93       	push	r25
    1eac:	8f 93       	push	r24
    1eae:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	59 c0       	rjmp	.+178    	; 0x1f72 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ec0:	6a ee       	ldi	r22, 0xEA	; 234
    1ec2:	84 e4       	ldi	r24, 0x44	; 68
    1ec4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ec8:	8a e9       	ldi	r24, 0x9A	; 154
    1eca:	95 ea       	ldi	r25, 0xA5	; 165
    1ecc:	9f 93       	push	r25
    1ece:	8f 93       	push	r24
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	09 96       	adiw	r24, 0x09	; 9
    1eda:	9f 93       	push	r25
    1edc:	8f 93       	push	r24
    1ede:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	41 c0       	rjmp	.+130    	; 0x1f72 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1ef0:	66 ee       	ldi	r22, 0xE6	; 230
    1ef2:	88 e8       	ldi	r24, 0x88	; 136
    1ef4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1ef8:	8f e9       	ldi	r24, 0x9F	; 159
    1efa:	95 ea       	ldi	r25, 0xA5	; 165
    1efc:	9f 93       	push	r25
    1efe:	8f 93       	push	r24
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	09 96       	adiw	r24, 0x09	; 9
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	29 c0       	rjmp	.+82     	; 0x1f72 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1f20:	6c ee       	ldi	r22, 0xEC	; 236
    1f22:	82 e2       	ldi	r24, 0x22	; 34
    1f24:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1f28:	85 ea       	ldi	r24, 0xA5	; 165
    1f2a:	95 ea       	ldi	r25, 0xA5	; 165
    1f2c:	9f 93       	push	r25
    1f2e:	8f 93       	push	r24
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	9f 93       	push	r25
    1f36:	8f 93       	push	r24
    1f38:	09 96       	adiw	r24, 0x09	; 9
    1f3a:	9f 93       	push	r25
    1f3c:	8f 93       	push	r24
    1f3e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	11 c0       	rjmp	.+34     	; 0x1f72 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1f50:	6d ea       	ldi	r22, 0xAD	; 173
    1f52:	75 ea       	ldi	r23, 0xA5	; 165
    1f54:	85 ef       	ldi	r24, 0xF5	; 245
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			strcpy(outbuf, "close what?");
    1f5c:	8c e0       	ldi	r24, 0x0C	; 12
    1f5e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f60:	f5 ea       	ldi	r31, 0xA5	; 165
    1f62:	de 01       	movw	r26, r28
    1f64:	1a 96       	adiw	r26, 0x0a	; 10
    1f66:	01 90       	ld	r0, Z+
    1f68:	0d 92       	st	X+, r0
    1f6a:	8a 95       	dec	r24
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <close_PNEU+0x126>
			return(ERROR);
    1f6e:	83 e6       	ldi	r24, 0x63	; 99
    1f70:	0b c0       	rjmp	.+22     	; 0x1f88 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	be 01       	movw	r22, r28
    1f7c:	66 5f       	subi	r22, 0xF6	; 246
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
	return(NOERROR);
    1f86:	80 e0       	ldi	r24, 0x00	; 0

}
    1f88:	6a 96       	adiw	r28, 0x1a	; 26
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	69 97       	sbiw	r28, 0x19	; 25
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1fa2:	98 e0       	ldi	r25, 0x08	; 8
    1fa4:	e8 ef       	ldi	r30, 0xF8	; 248
    1fa6:	f5 ea       	ldi	r31, 0xA5	; 165
    1fa8:	de 01       	movw	r26, r28
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	01 90       	ld	r0, Z+
    1fae:	0d 92       	st	X+, r0
    1fb0:	9a 95       	dec	r25
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1fb4:	24 e3       	ldi	r18, 0x34	; 52
    1fb6:	82 9f       	mul	r24, r18
    1fb8:	c0 01       	movw	r24, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	e3 5f       	subi	r30, 0xF3	; 243
    1fc0:	f7 4d       	sbci	r31, 0xD7	; 215
    1fc2:	81 81       	ldd	r24, Z+1	; 0x01
    1fc4:	8c 36       	cpi	r24, 0x6C	; 108
    1fc6:	31 f1       	breq	.+76     	; 0x2014 <open_PNEU+0x80>
    1fc8:	18 f4       	brcc	.+6      	; 0x1fd0 <open_PNEU+0x3c>
    1fca:	82 36       	cpi	r24, 0x62	; 98
    1fcc:	39 f0       	breq	.+14     	; 0x1fdc <open_PNEU+0x48>
    1fce:	6a c0       	rjmp	.+212    	; 0x20a4 <open_PNEU+0x110>
    1fd0:	82 37       	cpi	r24, 0x72	; 114
    1fd2:	c1 f1       	breq	.+112    	; 0x2044 <open_PNEU+0xb0>
    1fd4:	83 37       	cpi	r24, 0x73	; 115
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <open_PNEU+0x46>
    1fd8:	4d c0       	rjmp	.+154    	; 0x2074 <open_PNEU+0xe0>
    1fda:	64 c0       	rjmp	.+200    	; 0x20a4 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1fdc:	6e ea       	ldi	r22, 0xAE	; 174
    1fde:	84 e4       	ldi	r24, 0x44	; 68
    1fe0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1fe4:	6e e6       	ldi	r22, 0x6E	; 110
    1fe6:	88 e8       	ldi	r24, 0x88	; 136
    1fe8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1fec:	85 e9       	ldi	r24, 0x95	; 149
    1fee:	95 ea       	ldi	r25, 0xA5	; 165
    1ff0:	9f 93       	push	r25
    1ff2:	8f 93       	push	r24
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	9f 93       	push	r25
    1ffa:	8f 93       	push	r24
    1ffc:	08 96       	adiw	r24, 0x08	; 8
    1ffe:	9f 93       	push	r25
    2000:	8f 93       	push	r24
    2002:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	59 c0       	rjmp	.+178    	; 0x20c6 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    2014:	6e ea       	ldi	r22, 0xAE	; 174
    2016:	84 e4       	ldi	r24, 0x44	; 68
    2018:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    201c:	8a e9       	ldi	r24, 0x9A	; 154
    201e:	95 ea       	ldi	r25, 0xA5	; 165
    2020:	9f 93       	push	r25
    2022:	8f 93       	push	r24
    2024:	ce 01       	movw	r24, r28
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	9f 93       	push	r25
    202a:	8f 93       	push	r24
    202c:	08 96       	adiw	r24, 0x08	; 8
    202e:	9f 93       	push	r25
    2030:	8f 93       	push	r24
    2032:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	41 c0       	rjmp	.+130    	; 0x20c6 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    2044:	6e e6       	ldi	r22, 0x6E	; 110
    2046:	88 e8       	ldi	r24, 0x88	; 136
    2048:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    204c:	8f e9       	ldi	r24, 0x9F	; 159
    204e:	95 ea       	ldi	r25, 0xA5	; 165
    2050:	9f 93       	push	r25
    2052:	8f 93       	push	r24
    2054:	ce 01       	movw	r24, r28
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	9f 93       	push	r25
    205a:	8f 93       	push	r24
    205c:	08 96       	adiw	r24, 0x08	; 8
    205e:	9f 93       	push	r25
    2060:	8f 93       	push	r24
    2062:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	29 c0       	rjmp	.+82     	; 0x20c6 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    2074:	6e ec       	ldi	r22, 0xCE	; 206
    2076:	82 e2       	ldi	r24, 0x22	; 34
    2078:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    207c:	85 ea       	ldi	r24, 0xA5	; 165
    207e:	95 ea       	ldi	r25, 0xA5	; 165
    2080:	9f 93       	push	r25
    2082:	8f 93       	push	r24
    2084:	ce 01       	movw	r24, r28
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	9f 93       	push	r25
    208a:	8f 93       	push	r24
    208c:	08 96       	adiw	r24, 0x08	; 8
    208e:	9f 93       	push	r25
    2090:	8f 93       	push	r24
    2092:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			break;
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	11 c0       	rjmp	.+34     	; 0x20c6 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    20a4:	68 ed       	ldi	r22, 0xD8	; 216
    20a6:	75 ea       	ldi	r23, 0xA5	; 165
    20a8:	85 ef       	ldi	r24, 0xF5	; 245
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			strcpy(outbuf, "open what?");
    20b0:	8b e0       	ldi	r24, 0x0B	; 11
    20b2:	ed ee       	ldi	r30, 0xED	; 237
    20b4:	f5 ea       	ldi	r31, 0xA5	; 165
    20b6:	de 01       	movw	r26, r28
    20b8:	19 96       	adiw	r26, 0x09	; 9
    20ba:	01 90       	ld	r0, Z+
    20bc:	0d 92       	st	X+, r0
    20be:	8a 95       	dec	r24
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <open_PNEU+0x126>
			return(ERROR);
    20c2:	83 e6       	ldi	r24, 0x63	; 99
    20c4:	0b c0       	rjmp	.+22     	; 0x20dc <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	be 01       	movw	r22, r28
    20d0:	67 5f       	subi	r22, 0xF7	; 247
    20d2:	7f 4f       	sbci	r23, 0xFF	; 255
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
	return(NOERROR);
    20da:	80 e0       	ldi	r24, 0x00	; 0

}
    20dc:	69 96       	adiw	r28, 0x19	; 25
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

000020e8 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    20e8:	1f 92       	push	r1
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	0f 92       	push	r0
    20f0:	11 24       	eor	r1, r1
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    210a:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    210e:	88 23       	and	r24, r24
    2110:	4c f4       	brge	.+18     	; 0x2124 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    2112:	80 e8       	ldi	r24, 0x80	; 128
    2114:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    2118:	68 e0       	ldi	r22, 0x08	; 8
    211a:	81 e2       	ldi	r24, 0x21	; 33
    211c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <read_MCP23008>
    2120:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <pneuState>
	}

}
    2124:	ff 91       	pop	r31
    2126:	ef 91       	pop	r30
    2128:	bf 91       	pop	r27
    212a:	af 91       	pop	r26
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	7f 91       	pop	r23
    2132:	6f 91       	pop	r22
    2134:	5f 91       	pop	r21
    2136:	4f 91       	pop	r20
    2138:	3f 91       	pop	r19
    213a:	2f 91       	pop	r18
    213c:	0f 90       	pop	r0
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	0f 90       	pop	r0
    2142:	1f 90       	pop	r1
    2144:	18 95       	reti

00002146 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    2146:	84 e0       	ldi	r24, 0x04	; 4
    2148:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    214c:	e0 ea       	ldi	r30, 0xA0	; 160
    214e:	f4 e0       	ldi	r31, 0x04	; 4
    2150:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    2152:	80 e2       	ldi	r24, 0x20	; 32
    2154:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2156:	8b e0       	ldi	r24, 0x0B	; 11
    2158:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    215a:	e0 e4       	ldi	r30, 0x40	; 64
    215c:	f4 e0       	ldi	r31, 0x04	; 4
    215e:	88 e0       	ldi	r24, 0x08	; 8
    2160:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    2162:	81 83       	std	Z+1, r24	; 0x01
    2164:	ad e8       	ldi	r26, 0x8D	; 141
    2166:	b0 e2       	ldi	r27, 0x20	; 32
    2168:	11 97       	sbiw	r26, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <init_PORTS+0x22>
    216c:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    216e:	85 83       	std	Z+5, r24	; 0x05
    2170:	08 95       	ret

00002172 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    2172:	2f 92       	push	r2
    2174:	3f 92       	push	r3
    2176:	4f 92       	push	r4
    2178:	5f 92       	push	r5
    217a:	6f 92       	push	r6
    217c:	7f 92       	push	r7
    217e:	8f 92       	push	r8
    2180:	9f 92       	push	r9
    2182:	af 92       	push	r10
    2184:	bf 92       	push	r11
    2186:	cf 92       	push	r12
    2188:	df 92       	push	r13
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	c1 5a       	subi	r28, 0xA1	; 161
    219c:	d3 40       	sbci	r29, 0x03	; 3
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    21a2:	95 e4       	ldi	r25, 0x45	; 69
    21a4:	ec e6       	ldi	r30, 0x6C	; 108
    21a6:	f7 ea       	ldi	r31, 0xA7	; 167
    21a8:	de 01       	movw	r26, r28
    21aa:	a2 5a       	subi	r26, 0xA2	; 162
    21ac:	be 4f       	sbci	r27, 0xFE	; 254
    21ae:	01 90       	ld	r0, Z+
    21b0:	0d 92       	st	X+, r0
    21b2:	9a 95       	dec	r25
    21b4:	e1 f7       	brne	.-8      	; 0x21ae <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%s";
    21b6:	93 e2       	ldi	r25, 0x23	; 35
    21b8:	e1 eb       	ldi	r30, 0xB1	; 177
    21ba:	f7 ea       	ldi	r31, 0xA7	; 167
    21bc:	de 01       	movw	r26, r28
    21be:	ad 55       	subi	r26, 0x5D	; 93
    21c0:	be 4f       	sbci	r27, 0xFE	; 254
    21c2:	01 90       	ld	r0, Z+
    21c4:	0d 92       	st	X+, r0
    21c6:	9a 95       	dec	r25
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <report+0x50>
	const char format_MT0[] = "ETI,%s,Mtr%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";
    21ca:	9f e2       	ldi	r25, 0x2F	; 47
    21cc:	e4 ed       	ldi	r30, 0xD4	; 212
    21ce:	f7 ea       	ldi	r31, 0xA7	; 167
    21d0:	de 01       	movw	r26, r28
    21d2:	aa 53       	subi	r26, 0x3A	; 58
    21d4:	be 4f       	sbci	r27, 0xFE	; 254
    21d6:	01 90       	ld	r0, Z+
    21d8:	0d 92       	st	X+, r0
    21da:	9a 95       	dec	r25
    21dc:	e1 f7       	brne	.-8      	; 0x21d6 <report+0x64>
//	const char format_MT0[] = "ETI,%s,Mtr %c,%3.1f,V,%3.1f,C,%ld,mA,0x%02x,S4,%s";
	const char format_MT1[] = "PID,%s,Mtr%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    21de:	90 e3       	ldi	r25, 0x30	; 48
    21e0:	e3 e0       	ldi	r30, 0x03	; 3
    21e2:	f8 ea       	ldi	r31, 0xA8	; 168
    21e4:	de 01       	movw	r26, r28
    21e6:	ab 50       	subi	r26, 0x0B	; 11
    21e8:	be 4f       	sbci	r27, 0xFE	; 254
    21ea:	01 90       	ld	r0, Z+
    21ec:	0d 92       	st	X+, r0
    21ee:	9a 95       	dec	r25
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <report+0x78>
	const char format_MT2[] = "DMM,%s,Mtr%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    21f2:	94 e3       	ldi	r25, 0x34	; 52
    21f4:	e3 e3       	ldi	r30, 0x33	; 51
    21f6:	f8 ea       	ldi	r31, 0xA8	; 168
    21f8:	de 01       	movw	r26, r28
    21fa:	ab 5d       	subi	r26, 0xDB	; 219
    21fc:	bd 4f       	sbci	r27, 0xFD	; 253
    21fe:	01 90       	ld	r0, Z+
    2200:	0d 92       	st	X+, r0
    2202:	9a 95       	dec	r25
    2204:	e1 f7       	brne	.-8      	; 0x21fe <report+0x8c>
	const char format_MT3[] = "MTC,%s,Mtr%c,%ld,mA,0x%02x,S4,%s";
    2206:	91 e2       	ldi	r25, 0x21	; 33
    2208:	e7 e6       	ldi	r30, 0x67	; 103
    220a:	f8 ea       	ldi	r31, 0xA8	; 168
    220c:	de 01       	movw	r26, r28
    220e:	a7 5a       	subi	r26, 0xA7	; 167
    2210:	bd 4f       	sbci	r27, 0xFD	; 253
    2212:	01 90       	ld	r0, Z+
    2214:	0d 92       	st	X+, r0
    2216:	9a 95       	dec	r25
    2218:	e1 f7       	brne	.-8      	; 0x2212 <report+0xa0>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    221a:	9c e1       	ldi	r25, 0x1C	; 28
    221c:	e8 e8       	ldi	r30, 0x88	; 136
    221e:	f8 ea       	ldi	r31, 0xA8	; 168
    2220:	de 01       	movw	r26, r28
    2222:	a6 58       	subi	r26, 0x86	; 134
    2224:	bd 4f       	sbci	r27, 0xFD	; 253
    2226:	01 90       	ld	r0, Z+
    2228:	0d 92       	st	X+, r0
    222a:	9a 95       	dec	r25
    222c:	e1 f7       	brne	.-8      	; 0x2226 <report+0xb4>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    222e:	92 e1       	ldi	r25, 0x12	; 18
    2230:	e4 ea       	ldi	r30, 0xA4	; 164
    2232:	f8 ea       	ldi	r31, 0xA8	; 168
    2234:	de 01       	movw	r26, r28
    2236:	aa 56       	subi	r26, 0x6A	; 106
    2238:	bd 4f       	sbci	r27, 0xFD	; 253
    223a:	01 90       	ld	r0, Z+
    223c:	0d 92       	st	X+, r0
    223e:	9a 95       	dec	r25
    2240:	e1 f7       	brne	.-8      	; 0x223a <report+0xc8>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    2242:	9d e2       	ldi	r25, 0x2D	; 45
    2244:	e6 eb       	ldi	r30, 0xB6	; 182
    2246:	f8 ea       	ldi	r31, 0xA8	; 168
    2248:	de 01       	movw	r26, r28
    224a:	a8 55       	subi	r26, 0x58	; 88
    224c:	bd 4f       	sbci	r27, 0xFD	; 253
    224e:	01 90       	ld	r0, Z+
    2250:	0d 92       	st	X+, r0
    2252:	9a 95       	dec	r25
    2254:	e1 f7       	brne	.-8      	; 0x224e <report+0xdc>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2256:	93 e1       	ldi	r25, 0x13	; 19
    2258:	e3 ee       	ldi	r30, 0xE3	; 227
    225a:	f8 ea       	ldi	r31, 0xA8	; 168
    225c:	de 01       	movw	r26, r28
    225e:	ab 52       	subi	r26, 0x2B	; 43
    2260:	bd 4f       	sbci	r27, 0xFD	; 253
    2262:	01 90       	ld	r0, Z+
    2264:	0d 92       	st	X+, r0
    2266:	9a 95       	dec	r25
    2268:	e1 f7       	brne	.-8      	; 0x2262 <report+0xf0>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    226a:	93 e1       	ldi	r25, 0x13	; 19
    226c:	e6 ef       	ldi	r30, 0xF6	; 246
    226e:	f8 ea       	ldi	r31, 0xA8	; 168
    2270:	de 01       	movw	r26, r28
    2272:	a8 51       	subi	r26, 0x18	; 24
    2274:	bd 4f       	sbci	r27, 0xFD	; 253
    2276:	01 90       	ld	r0, Z+
    2278:	0d 92       	st	X+, r0
    227a:	9a 95       	dec	r25
    227c:	e1 f7       	brne	.-8      	; 0x2276 <report+0x104>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    227e:	99 e1       	ldi	r25, 0x19	; 25
    2280:	e9 e0       	ldi	r30, 0x09	; 9
    2282:	f9 ea       	ldi	r31, 0xA9	; 169
    2284:	de 01       	movw	r26, r28
    2286:	a5 50       	subi	r26, 0x05	; 5
    2288:	bd 4f       	sbci	r27, 0xFD	; 253
    228a:	01 90       	ld	r0, Z+
    228c:	0d 92       	st	X+, r0
    228e:	9a 95       	dec	r25
    2290:	e1 f7       	brne	.-8      	; 0x228a <report+0x118>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    2292:	95 e2       	ldi	r25, 0x25	; 37
    2294:	e2 e2       	ldi	r30, 0x22	; 34
    2296:	f9 ea       	ldi	r31, 0xA9	; 169
    2298:	de 01       	movw	r26, r28
    229a:	ac 5e       	subi	r26, 0xEC	; 236
    229c:	bc 4f       	sbci	r27, 0xFC	; 252
    229e:	01 90       	ld	r0, Z+
    22a0:	0d 92       	st	X+, r0
    22a2:	9a 95       	dec	r25
    22a4:	e1 f7       	brne	.-8      	; 0x229e <report+0x12c>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    22a6:	9d e0       	ldi	r25, 0x0D	; 13
    22a8:	e7 e4       	ldi	r30, 0x47	; 71
    22aa:	f9 ea       	ldi	r31, 0xA9	; 169
    22ac:	de 01       	movw	r26, r28
    22ae:	a7 5c       	subi	r26, 0xC7	; 199
    22b0:	bc 4f       	sbci	r27, 0xFC	; 252
    22b2:	01 90       	ld	r0, Z+
    22b4:	0d 92       	st	X+, r0
    22b6:	9a 95       	dec	r25
    22b8:	e1 f7       	brne	.-8      	; 0x22b2 <report+0x140>
	const char format_VER[] = "VER,%s,%s,%s";
    22ba:	9d e0       	ldi	r25, 0x0D	; 13
    22bc:	e4 e5       	ldi	r30, 0x54	; 84
    22be:	f9 ea       	ldi	r31, 0xA9	; 169
    22c0:	de 01       	movw	r26, r28
    22c2:	aa 5b       	subi	r26, 0xBA	; 186
    22c4:	bc 4f       	sbci	r27, 0xFC	; 252
    22c6:	01 90       	ld	r0, Z+
    22c8:	0d 92       	st	X+, r0
    22ca:	9a 95       	dec	r25
    22cc:	e1 f7       	brne	.-8      	; 0x22c6 <report+0x154>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    22ce:	08 2f       	mov	r16, r24
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	84 e3       	ldi	r24, 0x34	; 52
    22d4:	80 9f       	mul	r24, r16
    22d6:	f0 01       	movw	r30, r0
    22d8:	81 9f       	mul	r24, r17
    22da:	f0 0d       	add	r31, r0
    22dc:	11 24       	eor	r1, r1
    22de:	e3 5f       	subi	r30, 0xF3	; 243
    22e0:	f7 4d       	sbci	r31, 0xD7	; 215
    22e2:	e1 81       	ldd	r30, Z+1	; 0x01
    22e4:	8e 2f       	mov	r24, r30
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	e1 54       	subi	r30, 0x41	; 65
    22ec:	f1 09       	sbc	r31, r1
    22ee:	e6 33       	cpi	r30, 0x36	; 54
    22f0:	f1 05       	cpc	r31, r1
    22f2:	08 f0       	brcs	.+2      	; 0x22f6 <report+0x184>
    22f4:	24 c6       	rjmp	.+3144   	; 0x2f3e <report+0xdcc>
    22f6:	e4 58       	subi	r30, 0x84	; 132
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    22fe:	ce 01       	movw	r24, r28
    2300:	86 5f       	subi	r24, 0xF6	; 246
    2302:	9e 4f       	sbci	r25, 0xFE	; 254
    2304:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			controller = pcmd[cstack].cobject + 63;
    2308:	84 e3       	ldi	r24, 0x34	; 52
    230a:	80 9f       	mul	r24, r16
    230c:	f0 01       	movw	r30, r0
    230e:	81 9f       	mul	r24, r17
    2310:	f0 0d       	add	r31, r0
    2312:	11 24       	eor	r1, r1
    2314:	e3 5f       	subi	r30, 0xF3	; 243
    2316:	f7 4d       	sbci	r31, 0xD7	; 215
    2318:	d1 80       	ldd	r13, Z+1	; 0x01
    231a:	0f 2e       	mov	r0, r31
    231c:	ff e3       	ldi	r31, 0x3F	; 63
    231e:	ef 2e       	mov	r14, r31
    2320:	f0 2d       	mov	r31, r0
    2322:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    2324:	ae 01       	movw	r20, r28
    2326:	4c 59       	subi	r20, 0x9C	; 156
    2328:	5c 4f       	sbci	r21, 0xFC	; 252
    232a:	68 e1       	ldi	r22, 0x18	; 24
    232c:	8e 2d       	mov	r24, r14
    232e:	0e 94 89 1a 	call	0x3512	; 0x3512 <get_MOTOR_FLOAT>
    2332:	f8 2e       	mov	r15, r24
    2334:	83 e6       	ldi	r24, 0x63	; 99
    2336:	f8 12       	cpse	r15, r24
    2338:	07 c0       	rjmp	.+14     	; 0x2348 <report+0x1d6>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	76 ea       	ldi	r23, 0xA6	; 166
    233e:	86 e3       	ldi	r24, 0x36	; 54
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2346:	05 c6       	rjmp	.+3082   	; 0x2f52 <report+0xde0>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    2348:	ce 01       	movw	r24, r28
    234a:	8a 5b       	subi	r24, 0xBA	; 186
    234c:	9e 4f       	sbci	r25, 0xFE	; 254
    234e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <get_FRAM_ENCSAVETIME>
    2352:	f8 2e       	mov	r15, r24
    2354:	93 e6       	ldi	r25, 0x63	; 99
    2356:	89 13       	cpse	r24, r25
    2358:	11 c0       	rjmp	.+34     	; 0x237c <report+0x20a>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    235a:	82 e2       	ldi	r24, 0x22	; 34
    235c:	e4 e2       	ldi	r30, 0x24	; 36
    235e:	f6 ea       	ldi	r31, 0xA6	; 166
    2360:	de 01       	movw	r26, r28
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	01 90       	ld	r0, Z+
    2366:	0d 92       	st	X+, r0
    2368:	8a 95       	dec	r24
    236a:	e1 f7       	brne	.-8      	; 0x2364 <report+0x1f2>
				printError(ERR_MTR, outbuf);
    236c:	be 01       	movw	r22, r28
    236e:	6f 5f       	subi	r22, 0xFF	; 255
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	86 e3       	ldi	r24, 0x36	; 54
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    237a:	eb c5       	rjmp	.+3030   	; 0x2f52 <report+0xde0>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    237c:	ae 01       	movw	r20, r28
    237e:	40 5a       	subi	r20, 0xA0	; 160
    2380:	5c 4f       	sbci	r21, 0xFC	; 252
    2382:	62 e5       	ldi	r22, 0x52	; 82
    2384:	8e 2d       	mov	r24, r14
    2386:	0e 94 89 1a 	call	0x3512	; 0x3512 <get_MOTOR_FLOAT>
    238a:	f8 2e       	mov	r15, r24
    238c:	83 e6       	ldi	r24, 0x63	; 99
    238e:	f8 12       	cpse	r15, r24
    2390:	07 c0       	rjmp	.+14     	; 0x23a0 <report+0x22e>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2392:	66 e4       	ldi	r22, 0x46	; 70
    2394:	76 ea       	ldi	r23, 0xA6	; 166
    2396:	86 e3       	ldi	r24, 0x36	; 54
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    239e:	d9 c5       	rjmp	.+2994   	; 0x2f52 <report+0xde0>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    23a0:	be 01       	movw	r22, r28
    23a2:	64 5a       	subi	r22, 0xA4	; 164
    23a4:	7c 4f       	sbci	r23, 0xFC	; 252
    23a6:	8e 2d       	mov	r24, r14
    23a8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <get_MOTOR_MAXCURRENT>
    23ac:	f8 2e       	mov	r15, r24
    23ae:	93 e6       	ldi	r25, 0x63	; 99
    23b0:	89 13       	cpse	r24, r25
    23b2:	07 c0       	rjmp	.+14     	; 0x23c2 <report+0x250>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    23b4:	60 e7       	ldi	r22, 0x70	; 112
    23b6:	76 ea       	ldi	r23, 0xA6	; 166
    23b8:	86 e3       	ldi	r24, 0x36	; 54
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    23c0:	c8 c5       	rjmp	.+2960   	; 0x2f52 <report+0xde0>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    23c2:	be 01       	movw	r22, r28
    23c4:	6d 5a       	subi	r22, 0xAD	; 173
    23c6:	7c 4f       	sbci	r23, 0xFC	; 252
    23c8:	8e 2d       	mov	r24, r14
    23ca:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <get_MOTOR_S4MODE>
    23ce:	f8 2e       	mov	r15, r24
    23d0:	83 e6       	ldi	r24, 0x63	; 99
    23d2:	f8 12       	cpse	r15, r24
    23d4:	07 c0       	rjmp	.+14     	; 0x23e4 <report+0x272>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    23d6:	63 e9       	ldi	r22, 0x93	; 147
    23d8:	76 ea       	ldi	r23, 0xA6	; 166
    23da:	86 e3       	ldi	r24, 0x36	; 54
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    23e2:	b7 c5       	rjmp	.+2926   	; 0x2f52 <report+0xde0>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    23e4:	be 01       	movw	r22, r28
    23e6:	6a 58       	subi	r22, 0x8A	; 138
    23e8:	7c 4f       	sbci	r23, 0xFC	; 252
    23ea:	8e 2d       	mov	r24, r14
    23ec:	0e 94 90 1b 	call	0x3720	; 0x3720 <get_MOTOR_PID>
    23f0:	f8 2e       	mov	r15, r24
    23f2:	93 e6       	ldi	r25, 0x63	; 99
    23f4:	89 13       	cpse	r24, r25
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <report+0x294>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    23f8:	62 eb       	ldi	r22, 0xB2	; 178
    23fa:	76 ea       	ldi	r23, 0xA6	; 166
    23fc:	86 e3       	ldi	r24, 0x36	; 54
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2404:	a6 c5       	rjmp	.+2892   	; 0x2f52 <report+0xde0>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    2406:	24 e3       	ldi	r18, 0x34	; 52
    2408:	20 9f       	mul	r18, r16
    240a:	c0 01       	movw	r24, r0
    240c:	21 9f       	mul	r18, r17
    240e:	90 0d       	add	r25, r0
    2410:	11 24       	eor	r1, r1
    2412:	8c 01       	movw	r16, r24
    2414:	08 5c       	subi	r16, 0xC8	; 200
    2416:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    2418:	1f 93       	push	r17
    241a:	0f 93       	push	r16
    241c:	ce 01       	movw	r24, r28
    241e:	8a 5b       	subi	r24, 0xBA	; 186
    2420:	9e 4f       	sbci	r25, 0xFE	; 254
    2422:	9f 93       	push	r25
    2424:	8f 93       	push	r24
    2426:	cd 59       	subi	r28, 0x9D	; 157
    2428:	dc 4f       	sbci	r29, 0xFC	; 252
    242a:	88 81       	ld	r24, Y
    242c:	c3 56       	subi	r28, 0x63	; 99
    242e:	d3 40       	sbci	r29, 0x03	; 3
    2430:	8f 93       	push	r24
    2432:	ce 59       	subi	r28, 0x9E	; 158
    2434:	dc 4f       	sbci	r29, 0xFC	; 252
    2436:	88 81       	ld	r24, Y
    2438:	c2 56       	subi	r28, 0x62	; 98
    243a:	d3 40       	sbci	r29, 0x03	; 3
    243c:	8f 93       	push	r24
    243e:	cf 59       	subi	r28, 0x9F	; 159
    2440:	dc 4f       	sbci	r29, 0xFC	; 252
    2442:	88 81       	ld	r24, Y
    2444:	c1 56       	subi	r28, 0x61	; 97
    2446:	d3 40       	sbci	r29, 0x03	; 3
    2448:	8f 93       	push	r24
    244a:	c0 5a       	subi	r28, 0xA0	; 160
    244c:	dc 4f       	sbci	r29, 0xFC	; 252
    244e:	88 81       	ld	r24, Y
    2450:	c0 56       	subi	r28, 0x60	; 96
    2452:	d3 40       	sbci	r29, 0x03	; 3
    2454:	8f 93       	push	r24
    2456:	c9 59       	subi	r28, 0x99	; 153
    2458:	dc 4f       	sbci	r29, 0xFC	; 252
    245a:	88 81       	ld	r24, Y
    245c:	c7 56       	subi	r28, 0x67	; 103
    245e:	d3 40       	sbci	r29, 0x03	; 3
    2460:	8f 93       	push	r24
    2462:	ca 59       	subi	r28, 0x9A	; 154
    2464:	dc 4f       	sbci	r29, 0xFC	; 252
    2466:	88 81       	ld	r24, Y
    2468:	c6 56       	subi	r28, 0x66	; 102
    246a:	d3 40       	sbci	r29, 0x03	; 3
    246c:	8f 93       	push	r24
    246e:	cb 59       	subi	r28, 0x9B	; 155
    2470:	dc 4f       	sbci	r29, 0xFC	; 252
    2472:	88 81       	ld	r24, Y
    2474:	c5 56       	subi	r28, 0x65	; 101
    2476:	d3 40       	sbci	r29, 0x03	; 3
    2478:	8f 93       	push	r24
    247a:	cc 59       	subi	r28, 0x9C	; 156
    247c:	dc 4f       	sbci	r29, 0xFC	; 252
    247e:	88 81       	ld	r24, Y
    2480:	c4 56       	subi	r28, 0x64	; 100
    2482:	d3 40       	sbci	r29, 0x03	; 3
    2484:	8f 93       	push	r24
    2486:	1f 92       	push	r1
    2488:	df 92       	push	r13
    248a:	5e 01       	movw	r10, r28
    248c:	86 ef       	ldi	r24, 0xF6	; 246
    248e:	a8 1a       	sub	r10, r24
    2490:	8e ef       	ldi	r24, 0xFE	; 254
    2492:	b8 0a       	sbc	r11, r24
    2494:	bf 92       	push	r11
    2496:	af 92       	push	r10
    2498:	ce 01       	movw	r24, r28
    249a:	8a 53       	subi	r24, 0x3A	; 58
    249c:	9e 4f       	sbci	r25, 0xFE	; 254
    249e:	9f 93       	push	r25
    24a0:	8f 93       	push	r24
    24a2:	85 5c       	subi	r24, 0xC5	; 197
    24a4:	91 40       	sbci	r25, 0x01	; 1
    24a6:	7c 01       	movw	r14, r24
    24a8:	9f 93       	push	r25
    24aa:	8f 93       	push	r24
    24ac:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    24b0:	c7 01       	movw	r24, r14
    24b2:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    24b6:	1f 93       	push	r17
    24b8:	0f 93       	push	r16
    24ba:	cd 5a       	subi	r28, 0xAD	; 173
    24bc:	dc 4f       	sbci	r29, 0xFC	; 252
    24be:	88 81       	ld	r24, Y
    24c0:	c3 55       	subi	r28, 0x53	; 83
    24c2:	d3 40       	sbci	r29, 0x03	; 3
    24c4:	1f 92       	push	r1
    24c6:	8f 93       	push	r24
    24c8:	c1 5a       	subi	r28, 0xA1	; 161
    24ca:	dc 4f       	sbci	r29, 0xFC	; 252
    24cc:	88 81       	ld	r24, Y
    24ce:	cf 55       	subi	r28, 0x5F	; 95
    24d0:	d3 40       	sbci	r29, 0x03	; 3
    24d2:	8f 93       	push	r24
    24d4:	c2 5a       	subi	r28, 0xA2	; 162
    24d6:	dc 4f       	sbci	r29, 0xFC	; 252
    24d8:	88 81       	ld	r24, Y
    24da:	ce 55       	subi	r28, 0x5E	; 94
    24dc:	d3 40       	sbci	r29, 0x03	; 3
    24de:	8f 93       	push	r24
    24e0:	c3 5a       	subi	r28, 0xA3	; 163
    24e2:	dc 4f       	sbci	r29, 0xFC	; 252
    24e4:	88 81       	ld	r24, Y
    24e6:	cd 55       	subi	r28, 0x5D	; 93
    24e8:	d3 40       	sbci	r29, 0x03	; 3
    24ea:	8f 93       	push	r24
    24ec:	c4 5a       	subi	r28, 0xA4	; 164
    24ee:	dc 4f       	sbci	r29, 0xFC	; 252
    24f0:	88 81       	ld	r24, Y
    24f2:	cc 55       	subi	r28, 0x5C	; 92
    24f4:	d3 40       	sbci	r29, 0x03	; 3
    24f6:	8f 93       	push	r24
    24f8:	1f 92       	push	r1
    24fa:	df 92       	push	r13
    24fc:	bf 92       	push	r11
    24fe:	af 92       	push	r10
    2500:	ce 01       	movw	r24, r28
    2502:	87 5a       	subi	r24, 0xA7	; 167
    2504:	9d 4f       	sbci	r25, 0xFD	; 253
    2506:	9f 93       	push	r25
    2508:	8f 93       	push	r24
    250a:	ff 92       	push	r15
    250c:	ef 92       	push	r14
    250e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	c7 01       	movw	r24, r14
    2518:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    251c:	c2 58       	subi	r28, 0x82	; 130
    251e:	dc 4f       	sbci	r29, 0xFC	; 252
    2520:	e8 81       	ld	r30, Y
    2522:	ce 57       	subi	r28, 0x7E	; 126
    2524:	d3 40       	sbci	r29, 0x03	; 3
    2526:	c1 58       	subi	r28, 0x81	; 129
    2528:	dc 4f       	sbci	r29, 0xFC	; 252
    252a:	f8 81       	ld	r31, Y
    252c:	cf 57       	subi	r28, 0x7F	; 127
    252e:	d3 40       	sbci	r29, 0x03	; 3
    2530:	c0 58       	subi	r28, 0x80	; 128
    2532:	dc 4f       	sbci	r29, 0xFC	; 252
    2534:	a8 81       	ld	r26, Y
    2536:	c0 58       	subi	r28, 0x80	; 128
    2538:	d3 40       	sbci	r29, 0x03	; 3
    253a:	cf 57       	subi	r28, 0x7F	; 127
    253c:	dc 4f       	sbci	r29, 0xFC	; 252
    253e:	b8 81       	ld	r27, Y
    2540:	c1 58       	subi	r28, 0x81	; 129
    2542:	d3 40       	sbci	r29, 0x03	; 3
    2544:	c6 58       	subi	r28, 0x86	; 134
    2546:	dc 4f       	sbci	r29, 0xFC	; 252
    2548:	48 81       	ld	r20, Y
    254a:	ca 57       	subi	r28, 0x7A	; 122
    254c:	d3 40       	sbci	r29, 0x03	; 3
    254e:	c5 58       	subi	r28, 0x85	; 133
    2550:	dc 4f       	sbci	r29, 0xFC	; 252
    2552:	58 81       	ld	r21, Y
    2554:	cb 57       	subi	r28, 0x7B	; 123
    2556:	d3 40       	sbci	r29, 0x03	; 3
    2558:	c4 58       	subi	r28, 0x84	; 132
    255a:	dc 4f       	sbci	r29, 0xFC	; 252
    255c:	68 81       	ld	r22, Y
    255e:	cc 57       	subi	r28, 0x7C	; 124
    2560:	d3 40       	sbci	r29, 0x03	; 3
    2562:	c3 58       	subi	r28, 0x83	; 131
    2564:	dc 4f       	sbci	r29, 0xFC	; 252
    2566:	78 81       	ld	r23, Y
    2568:	cd 57       	subi	r28, 0x7D	; 125
    256a:	d3 40       	sbci	r29, 0x03	; 3
    256c:	ca 58       	subi	r28, 0x8A	; 138
    256e:	dc 4f       	sbci	r29, 0xFC	; 252
    2570:	88 81       	ld	r24, Y
    2572:	c6 57       	subi	r28, 0x76	; 118
    2574:	d3 40       	sbci	r29, 0x03	; 3
    2576:	c9 58       	subi	r28, 0x89	; 137
    2578:	dc 4f       	sbci	r29, 0xFC	; 252
    257a:	98 81       	ld	r25, Y
    257c:	c7 57       	subi	r28, 0x77	; 119
    257e:	d3 40       	sbci	r29, 0x03	; 3
    2580:	c8 58       	subi	r28, 0x88	; 136
    2582:	dc 4f       	sbci	r29, 0xFC	; 252
    2584:	28 81       	ld	r18, Y
    2586:	c8 57       	subi	r28, 0x78	; 120
    2588:	d3 40       	sbci	r29, 0x03	; 3
    258a:	c7 58       	subi	r28, 0x87	; 135
    258c:	dc 4f       	sbci	r29, 0xFC	; 252
    258e:	38 81       	ld	r19, Y
    2590:	c9 57       	subi	r28, 0x79	; 121
    2592:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    2594:	1f 93       	push	r17
    2596:	0f 93       	push	r16
    2598:	cb 57       	subi	r28, 0x7B	; 123
    259a:	dc 4f       	sbci	r29, 0xFC	; 252
    259c:	c8 80       	ld	r12, Y
    259e:	c5 58       	subi	r28, 0x85	; 133
    25a0:	d3 40       	sbci	r29, 0x03	; 3
    25a2:	cf 92       	push	r12
    25a4:	cc 57       	subi	r28, 0x7C	; 124
    25a6:	dc 4f       	sbci	r29, 0xFC	; 252
    25a8:	c8 80       	ld	r12, Y
    25aa:	c4 58       	subi	r28, 0x84	; 132
    25ac:	d3 40       	sbci	r29, 0x03	; 3
    25ae:	cf 92       	push	r12
    25b0:	cd 57       	subi	r28, 0x7D	; 125
    25b2:	dc 4f       	sbci	r29, 0xFC	; 252
    25b4:	c8 80       	ld	r12, Y
    25b6:	c3 58       	subi	r28, 0x83	; 131
    25b8:	d3 40       	sbci	r29, 0x03	; 3
    25ba:	cf 92       	push	r12
    25bc:	ce 57       	subi	r28, 0x7E	; 126
    25be:	dc 4f       	sbci	r29, 0xFC	; 252
    25c0:	c8 80       	ld	r12, Y
    25c2:	c2 58       	subi	r28, 0x82	; 130
    25c4:	d3 40       	sbci	r29, 0x03	; 3
    25c6:	cf 92       	push	r12
    25c8:	bf 93       	push	r27
    25ca:	af 93       	push	r26
    25cc:	ff 93       	push	r31
    25ce:	ef 93       	push	r30
    25d0:	7f 93       	push	r23
    25d2:	6f 93       	push	r22
    25d4:	5f 93       	push	r21
    25d6:	4f 93       	push	r20
    25d8:	3f 93       	push	r19
    25da:	2f 93       	push	r18
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	1f 92       	push	r1
    25e2:	df 92       	push	r13
    25e4:	bf 92       	push	r11
    25e6:	af 92       	push	r10
    25e8:	ce 01       	movw	r24, r28
    25ea:	8b 50       	subi	r24, 0x0B	; 11
    25ec:	9e 4f       	sbci	r25, 0xFE	; 254
    25ee:	9f 93       	push	r25
    25f0:	8f 93       	push	r24
    25f2:	ff 92       	push	r15
    25f4:	ef 92       	push	r14
    25f6:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    25fa:	c7 01       	movw	r24, r14
    25fc:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    2600:	1f 93       	push	r17
    2602:	0f 93       	push	r16
    2604:	cb 56       	subi	r28, 0x6B	; 107
    2606:	dc 4f       	sbci	r29, 0xFC	; 252
    2608:	88 81       	ld	r24, Y
    260a:	c5 59       	subi	r28, 0x95	; 149
    260c:	d3 40       	sbci	r29, 0x03	; 3
    260e:	8f 93       	push	r24
    2610:	cc 56       	subi	r28, 0x6C	; 108
    2612:	dc 4f       	sbci	r29, 0xFC	; 252
    2614:	88 81       	ld	r24, Y
    2616:	c4 59       	subi	r28, 0x94	; 148
    2618:	d3 40       	sbci	r29, 0x03	; 3
    261a:	8f 93       	push	r24
    261c:	cd 56       	subi	r28, 0x6D	; 109
    261e:	dc 4f       	sbci	r29, 0xFC	; 252
    2620:	88 81       	ld	r24, Y
    2622:	c3 59       	subi	r28, 0x93	; 147
    2624:	d3 40       	sbci	r29, 0x03	; 3
    2626:	8f 93       	push	r24
    2628:	ce 56       	subi	r28, 0x6E	; 110
    262a:	dc 4f       	sbci	r29, 0xFC	; 252
    262c:	88 81       	ld	r24, Y
    262e:	c2 59       	subi	r28, 0x92	; 146
    2630:	d3 40       	sbci	r29, 0x03	; 3
    2632:	8f 93       	push	r24
    2634:	cf 56       	subi	r28, 0x6F	; 111
    2636:	dc 4f       	sbci	r29, 0xFC	; 252
    2638:	88 81       	ld	r24, Y
    263a:	c1 59       	subi	r28, 0x91	; 145
    263c:	d3 40       	sbci	r29, 0x03	; 3
    263e:	8f 93       	push	r24
    2640:	c0 57       	subi	r28, 0x70	; 112
    2642:	dc 4f       	sbci	r29, 0xFC	; 252
    2644:	88 81       	ld	r24, Y
    2646:	c0 59       	subi	r28, 0x90	; 144
    2648:	d3 40       	sbci	r29, 0x03	; 3
    264a:	8f 93       	push	r24
    264c:	c1 57       	subi	r28, 0x71	; 113
    264e:	dc 4f       	sbci	r29, 0xFC	; 252
    2650:	88 81       	ld	r24, Y
    2652:	cf 58       	subi	r28, 0x8F	; 143
    2654:	d3 40       	sbci	r29, 0x03	; 3
    2656:	8f 93       	push	r24
    2658:	c2 57       	subi	r28, 0x72	; 114
    265a:	dc 4f       	sbci	r29, 0xFC	; 252
    265c:	88 81       	ld	r24, Y
    265e:	ce 58       	subi	r28, 0x8E	; 142
    2660:	d3 40       	sbci	r29, 0x03	; 3
    2662:	8f 93       	push	r24
    2664:	c3 57       	subi	r28, 0x73	; 115
    2666:	dc 4f       	sbci	r29, 0xFC	; 252
    2668:	88 81       	ld	r24, Y
    266a:	cd 58       	subi	r28, 0x8D	; 141
    266c:	d3 40       	sbci	r29, 0x03	; 3
    266e:	8f 93       	push	r24
    2670:	c4 57       	subi	r28, 0x74	; 116
    2672:	dc 4f       	sbci	r29, 0xFC	; 252
    2674:	88 81       	ld	r24, Y
    2676:	cc 58       	subi	r28, 0x8C	; 140
    2678:	d3 40       	sbci	r29, 0x03	; 3
    267a:	8f 93       	push	r24
    267c:	c5 57       	subi	r28, 0x75	; 117
    267e:	dc 4f       	sbci	r29, 0xFC	; 252
    2680:	88 81       	ld	r24, Y
    2682:	cb 58       	subi	r28, 0x8B	; 139
    2684:	d3 40       	sbci	r29, 0x03	; 3
    2686:	8f 93       	push	r24
    2688:	c6 57       	subi	r28, 0x76	; 118
    268a:	dc 4f       	sbci	r29, 0xFC	; 252
    268c:	88 81       	ld	r24, Y
    268e:	ca 58       	subi	r28, 0x8A	; 138
    2690:	d3 40       	sbci	r29, 0x03	; 3
    2692:	8f 93       	push	r24
    2694:	c7 57       	subi	r28, 0x77	; 119
    2696:	dc 4f       	sbci	r29, 0xFC	; 252
    2698:	88 81       	ld	r24, Y
    269a:	c9 58       	subi	r28, 0x89	; 137
    269c:	d3 40       	sbci	r29, 0x03	; 3
    269e:	8f 93       	push	r24
    26a0:	c8 57       	subi	r28, 0x78	; 120
    26a2:	dc 4f       	sbci	r29, 0xFC	; 252
    26a4:	88 81       	ld	r24, Y
    26a6:	c8 58       	subi	r28, 0x88	; 136
    26a8:	d3 40       	sbci	r29, 0x03	; 3
    26aa:	8f 93       	push	r24
    26ac:	c9 57       	subi	r28, 0x79	; 121
    26ae:	dc 4f       	sbci	r29, 0xFC	; 252
    26b0:	88 81       	ld	r24, Y
    26b2:	c7 58       	subi	r28, 0x87	; 135
    26b4:	d3 40       	sbci	r29, 0x03	; 3
    26b6:	8f 93       	push	r24
    26b8:	ca 57       	subi	r28, 0x7A	; 122
    26ba:	dc 4f       	sbci	r29, 0xFC	; 252
    26bc:	88 81       	ld	r24, Y
    26be:	c6 58       	subi	r28, 0x86	; 134
    26c0:	d3 40       	sbci	r29, 0x03	; 3
    26c2:	8f 93       	push	r24
    26c4:	1f 92       	push	r1
    26c6:	df 92       	push	r13
    26c8:	bf 92       	push	r11
    26ca:	af 92       	push	r10
    26cc:	ce 01       	movw	r24, r28
    26ce:	8b 5d       	subi	r24, 0xDB	; 219
    26d0:	9d 4f       	sbci	r25, 0xFD	; 253
    26d2:	9f 93       	push	r25
    26d4:	8f 93       	push	r24
    26d6:	ff 92       	push	r15
    26d8:	ef 92       	push	r14
    26da:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	c7 01       	movw	r24, r14
    26e4:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26e8:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    26ea:	33 c4       	rjmp	.+2150   	; 0x2f52 <report+0xde0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    26ec:	ce 01       	movw	r24, r28
    26ee:	86 5f       	subi	r24, 0xF6	; 246
    26f0:	9e 4f       	sbci	r25, 0xFE	; 254
    26f2:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			controller = pcmd[cstack].cobject + 31;
    26f6:	84 e3       	ldi	r24, 0x34	; 52
    26f8:	80 9f       	mul	r24, r16
    26fa:	f0 01       	movw	r30, r0
    26fc:	81 9f       	mul	r24, r17
    26fe:	f0 0d       	add	r31, r0
    2700:	11 24       	eor	r1, r1
    2702:	e3 5f       	subi	r30, 0xF3	; 243
    2704:	f7 4d       	sbci	r31, 0xD7	; 215
    2706:	81 81       	ldd	r24, Z+1	; 0x01
    2708:	0f 2e       	mov	r0, r31
    270a:	ff e1       	ldi	r31, 0x1F	; 31
    270c:	ef 2e       	mov	r14, r31
    270e:	f0 2d       	mov	r31, r0
    2710:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2712:	be 01       	movw	r22, r28
    2714:	6c 5a       	subi	r22, 0xAC	; 172
    2716:	7c 4f       	sbci	r23, 0xFC	; 252
    2718:	8e 2d       	mov	r24, r14
    271a:	0e 94 0d 1a 	call	0x341a	; 0x341a <get_MOTOR_ENCODER>
    271e:	f8 2e       	mov	r15, r24
    2720:	93 e6       	ldi	r25, 0x63	; 99
    2722:	89 13       	cpse	r24, r25
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <report+0x5c2>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    2726:	6e ec       	ldi	r22, 0xCE	; 206
    2728:	76 ea       	ldi	r23, 0xA6	; 166
    272a:	86 e3       	ldi	r24, 0x36	; 54
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2732:	0f c4       	rjmp	.+2078   	; 0x2f52 <report+0xde0>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    2734:	cc 5a       	subi	r28, 0xAC	; 172
    2736:	dc 4f       	sbci	r29, 0xFC	; 252
    2738:	68 81       	ld	r22, Y
    273a:	79 81       	ldd	r23, Y+1	; 0x01
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	c4 55       	subi	r28, 0x54	; 84
    2742:	d3 40       	sbci	r29, 0x03	; 3
    2744:	2b e1       	ldi	r18, 0x1B	; 27
    2746:	31 e0       	ldi	r19, 0x01	; 1
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__divmodsi4>
    2750:	f2 2e       	mov	r15, r18
    2752:	d3 2e       	mov	r13, r19
    2754:	c4 2e       	mov	r12, r20
    2756:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2758:	be 01       	movw	r22, r28
    275a:	68 5a       	subi	r22, 0xA8	; 168
    275c:	7c 4f       	sbci	r23, 0xFC	; 252
    275e:	8e 2d       	mov	r24, r14
    2760:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <get_MOTOR_SPEED>
    2764:	83 36       	cpi	r24, 0x63	; 99
    2766:	61 f4       	brne	.+24     	; 0x2780 <report+0x60e>
				encoderSpeed = 0x7FFFFFFF;
    2768:	8f ef       	ldi	r24, 0xFF	; 255
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	af ef       	ldi	r26, 0xFF	; 255
    276e:	bf e7       	ldi	r27, 0x7F	; 127
    2770:	c8 5a       	subi	r28, 0xA8	; 168
    2772:	dc 4f       	sbci	r29, 0xFC	; 252
    2774:	88 83       	st	Y, r24
    2776:	99 83       	std	Y+1, r25	; 0x01
    2778:	aa 83       	std	Y+2, r26	; 0x02
    277a:	bb 83       	std	Y+3, r27	; 0x03
    277c:	c8 55       	subi	r28, 0x58	; 88
    277e:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2780:	c8 5a       	subi	r28, 0xA8	; 168
    2782:	dc 4f       	sbci	r29, 0xFC	; 252
    2784:	68 81       	ld	r22, Y
    2786:	79 81       	ldd	r23, Y+1	; 0x01
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	9b 81       	ldd	r25, Y+3	; 0x03
    278c:	c8 55       	subi	r28, 0x58	; 88
    278e:	d3 40       	sbci	r29, 0x03	; 3
    2790:	2b e1       	ldi	r18, 0x1B	; 27
    2792:	31 e0       	ldi	r19, 0x01	; 1
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__divmodsi4>
    279c:	a2 2e       	mov	r10, r18
    279e:	93 2e       	mov	r9, r19
    27a0:	84 2e       	mov	r8, r20
    27a2:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    27a4:	be 01       	movw	r22, r28
    27a6:	68 59       	subi	r22, 0x98	; 152
    27a8:	7c 4f       	sbci	r23, 0xFC	; 252
    27aa:	8e 2d       	mov	r24, r14
    27ac:	0e 94 a0 19 	call	0x3340	; 0x3340 <get_MOTOR_CURRENT>
    27b0:	83 36       	cpi	r24, 0x63	; 99
    27b2:	71 f4       	brne	.+28     	; 0x27d0 <report+0x65e>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    27b4:	6e ee       	ldi	r22, 0xEE	; 238
    27b6:	76 ea       	ldi	r23, 0xA6	; 166
    27b8:	86 e3       	ldi	r24, 0x36	; 54
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				motorCurrent = 0xFFFF;
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	9f ef       	ldi	r25, 0xFF	; 255
    27c4:	c8 59       	subi	r28, 0x98	; 152
    27c6:	dc 4f       	sbci	r29, 0xFC	; 252
    27c8:	88 83       	st	Y, r24
    27ca:	99 83       	std	Y+1, r25	; 0x01
    27cc:	c8 56       	subi	r28, 0x68	; 104
    27ce:	d3 40       	sbci	r29, 0x03	; 3
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    27d0:	24 e3       	ldi	r18, 0x34	; 52
    27d2:	20 9f       	mul	r18, r16
    27d4:	c0 01       	movw	r24, r0
    27d6:	21 9f       	mul	r18, r17
    27d8:	90 0d       	add	r25, r0
    27da:	11 24       	eor	r1, r1
    27dc:	9c 01       	movw	r18, r24
    27de:	28 5c       	subi	r18, 0xC8	; 200
    27e0:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    27e2:	fc 01       	movw	r30, r24
    27e4:	e3 5f       	subi	r30, 0xF3	; 243
    27e6:	f7 4d       	sbci	r31, 0xD7	; 215
    27e8:	81 81       	ldd	r24, Z+1	; 0x01
    27ea:	3f 93       	push	r19
    27ec:	2f 93       	push	r18
    27ee:	c7 59       	subi	r28, 0x97	; 151
    27f0:	dc 4f       	sbci	r29, 0xFC	; 252
    27f2:	98 81       	ld	r25, Y
    27f4:	c9 56       	subi	r28, 0x69	; 105
    27f6:	d3 40       	sbci	r29, 0x03	; 3
    27f8:	9f 93       	push	r25
    27fa:	c8 59       	subi	r28, 0x98	; 152
    27fc:	dc 4f       	sbci	r29, 0xFC	; 252
    27fe:	98 81       	ld	r25, Y
    2800:	c8 56       	subi	r28, 0x68	; 104
    2802:	d3 40       	sbci	r29, 0x03	; 3
    2804:	9f 93       	push	r25
    2806:	7f 92       	push	r7
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ff 92       	push	r15
    2816:	1f 92       	push	r1
    2818:	8f 93       	push	r24
    281a:	ce 01       	movw	r24, r28
    281c:	86 5f       	subi	r24, 0xF6	; 246
    281e:	9e 4f       	sbci	r25, 0xFE	; 254
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	87 56       	subi	r24, 0x67	; 103
    2826:	9f 4f       	sbci	r25, 0xFF	; 255
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	8e 01       	movw	r16, r28
    282e:	0f 5f       	subi	r16, 0xFF	; 255
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	1f 93       	push	r17
    2834:	0f 93       	push	r16
    2836:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    283a:	c8 01       	movw	r24, r16
    283c:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			break;
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2844:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2846:	85 c3       	rjmp	.+1802   	; 0x2f52 <report+0xde0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    284e:	c0 5a       	subi	r28, 0xA0	; 160
    2850:	dc 4f       	sbci	r29, 0xFC	; 252
    2852:	68 83       	st	Y, r22
    2854:	79 83       	std	Y+1, r23	; 0x01
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	9b 83       	std	Y+3, r25	; 0x03
    285a:	c0 56       	subi	r28, 0x60	; 96
    285c:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    2864:	d6 2e       	mov	r13, r22
    2866:	c7 2e       	mov	r12, r23
    2868:	b8 2e       	mov	r11, r24
    286a:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    2872:	ca 56       	subi	r28, 0x6A	; 106
    2874:	dc 4f       	sbci	r29, 0xFC	; 252
    2876:	68 83       	st	Y, r22
    2878:	c6 59       	subi	r28, 0x96	; 150
    287a:	d3 40       	sbci	r29, 0x03	; 3
    287c:	c9 56       	subi	r28, 0x69	; 105
    287e:	dc 4f       	sbci	r29, 0xFC	; 252
    2880:	78 83       	st	Y, r23
    2882:	c7 59       	subi	r28, 0x97	; 151
    2884:	d3 40       	sbci	r29, 0x03	; 3
    2886:	c8 56       	subi	r28, 0x68	; 104
    2888:	dc 4f       	sbci	r29, 0xFC	; 252
    288a:	88 83       	st	Y, r24
    288c:	c8 59       	subi	r28, 0x98	; 152
    288e:	d3 40       	sbci	r29, 0x03	; 3
    2890:	c7 56       	subi	r28, 0x67	; 103
    2892:	dc 4f       	sbci	r29, 0xFC	; 252
    2894:	98 83       	st	Y, r25
    2896:	c9 59       	subi	r28, 0x99	; 153
    2898:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    28a0:	c6 56       	subi	r28, 0x66	; 102
    28a2:	dc 4f       	sbci	r29, 0xFC	; 252
    28a4:	68 83       	st	Y, r22
    28a6:	ca 59       	subi	r28, 0x9A	; 154
    28a8:	d3 40       	sbci	r29, 0x03	; 3
    28aa:	c5 56       	subi	r28, 0x65	; 101
    28ac:	dc 4f       	sbci	r29, 0xFC	; 252
    28ae:	78 83       	st	Y, r23
    28b0:	cb 59       	subi	r28, 0x9B	; 155
    28b2:	d3 40       	sbci	r29, 0x03	; 3
    28b4:	c4 56       	subi	r28, 0x64	; 100
    28b6:	dc 4f       	sbci	r29, 0xFC	; 252
    28b8:	88 83       	st	Y, r24
    28ba:	cc 59       	subi	r28, 0x9C	; 156
    28bc:	d3 40       	sbci	r29, 0x03	; 3
    28be:	c3 56       	subi	r28, 0x63	; 99
    28c0:	dc 4f       	sbci	r29, 0xFC	; 252
    28c2:	98 83       	st	Y, r25
    28c4:	cd 59       	subi	r28, 0x9D	; 157
    28c6:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    28ce:	c2 56       	subi	r28, 0x62	; 98
    28d0:	dc 4f       	sbci	r29, 0xFC	; 252
    28d2:	68 83       	st	Y, r22
    28d4:	ce 59       	subi	r28, 0x9E	; 158
    28d6:	d3 40       	sbci	r29, 0x03	; 3
    28d8:	c1 56       	subi	r28, 0x61	; 97
    28da:	dc 4f       	sbci	r29, 0xFC	; 252
    28dc:	78 83       	st	Y, r23
    28de:	cf 59       	subi	r28, 0x9F	; 159
    28e0:	d3 40       	sbci	r29, 0x03	; 3
    28e2:	98 2e       	mov	r9, r24
    28e4:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    28ec:	76 2e       	mov	r7, r22
    28ee:	67 2e       	mov	r6, r23
    28f0:	58 2e       	mov	r5, r24
    28f2:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	0e 94 d5 24 	call	0x49aa	; 0x49aa <get_temperature>
    28fa:	c0 56       	subi	r28, 0x60	; 96
    28fc:	dc 4f       	sbci	r29, 0xFC	; 252
    28fe:	68 83       	st	Y, r22
    2900:	c0 5a       	subi	r28, 0xA0	; 160
    2902:	d3 40       	sbci	r29, 0x03	; 3
    2904:	cf 55       	subi	r28, 0x5F	; 95
    2906:	dc 4f       	sbci	r29, 0xFC	; 252
    2908:	78 83       	st	Y, r23
    290a:	c1 5a       	subi	r28, 0xA1	; 161
    290c:	d3 40       	sbci	r29, 0x03	; 3
    290e:	38 2e       	mov	r3, r24
    2910:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2912:	7e 01       	movw	r14, r28
    2914:	96 ef       	ldi	r25, 0xF6	; 246
    2916:	e9 1a       	sub	r14, r25
    2918:	9e ef       	ldi	r25, 0xFE	; 254
    291a:	f9 0a       	sbc	r15, r25
    291c:	c7 01       	movw	r24, r14
    291e:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2922:	24 e3       	ldi	r18, 0x34	; 52
    2924:	20 9f       	mul	r18, r16
    2926:	c0 01       	movw	r24, r0
    2928:	21 9f       	mul	r18, r17
    292a:	90 0d       	add	r25, r0
    292c:	11 24       	eor	r1, r1
    292e:	88 5c       	subi	r24, 0xC8	; 200
    2930:	97 4d       	sbci	r25, 0xD7	; 215
    2932:	9f 93       	push	r25
    2934:	8f 93       	push	r24
    2936:	2f 92       	push	r2
    2938:	3f 92       	push	r3
    293a:	cf 55       	subi	r28, 0x5F	; 95
    293c:	dc 4f       	sbci	r29, 0xFC	; 252
    293e:	88 81       	ld	r24, Y
    2940:	c1 5a       	subi	r28, 0xA1	; 161
    2942:	d3 40       	sbci	r29, 0x03	; 3
    2944:	8f 93       	push	r24
    2946:	c0 56       	subi	r28, 0x60	; 96
    2948:	dc 4f       	sbci	r29, 0xFC	; 252
    294a:	98 81       	ld	r25, Y
    294c:	c0 5a       	subi	r28, 0xA0	; 160
    294e:	d3 40       	sbci	r29, 0x03	; 3
    2950:	9f 93       	push	r25
    2952:	4f 92       	push	r4
    2954:	5f 92       	push	r5
    2956:	6f 92       	push	r6
    2958:	7f 92       	push	r7
    295a:	8f 92       	push	r8
    295c:	9f 92       	push	r9
    295e:	c1 56       	subi	r28, 0x61	; 97
    2960:	dc 4f       	sbci	r29, 0xFC	; 252
    2962:	88 81       	ld	r24, Y
    2964:	cf 59       	subi	r28, 0x9F	; 159
    2966:	d3 40       	sbci	r29, 0x03	; 3
    2968:	8f 93       	push	r24
    296a:	c2 56       	subi	r28, 0x62	; 98
    296c:	dc 4f       	sbci	r29, 0xFC	; 252
    296e:	98 81       	ld	r25, Y
    2970:	ce 59       	subi	r28, 0x9E	; 158
    2972:	d3 40       	sbci	r29, 0x03	; 3
    2974:	9f 93       	push	r25
    2976:	c3 56       	subi	r28, 0x63	; 99
    2978:	dc 4f       	sbci	r29, 0xFC	; 252
    297a:	88 81       	ld	r24, Y
    297c:	cd 59       	subi	r28, 0x9D	; 157
    297e:	d3 40       	sbci	r29, 0x03	; 3
    2980:	8f 93       	push	r24
    2982:	c4 56       	subi	r28, 0x64	; 100
    2984:	dc 4f       	sbci	r29, 0xFC	; 252
    2986:	98 81       	ld	r25, Y
    2988:	cc 59       	subi	r28, 0x9C	; 156
    298a:	d3 40       	sbci	r29, 0x03	; 3
    298c:	9f 93       	push	r25
    298e:	c5 56       	subi	r28, 0x65	; 101
    2990:	dc 4f       	sbci	r29, 0xFC	; 252
    2992:	88 81       	ld	r24, Y
    2994:	cb 59       	subi	r28, 0x9B	; 155
    2996:	d3 40       	sbci	r29, 0x03	; 3
    2998:	8f 93       	push	r24
    299a:	c6 56       	subi	r28, 0x66	; 102
    299c:	dc 4f       	sbci	r29, 0xFC	; 252
    299e:	98 81       	ld	r25, Y
    29a0:	ca 59       	subi	r28, 0x9A	; 154
    29a2:	d3 40       	sbci	r29, 0x03	; 3
    29a4:	9f 93       	push	r25
    29a6:	c7 56       	subi	r28, 0x67	; 103
    29a8:	dc 4f       	sbci	r29, 0xFC	; 252
    29aa:	88 81       	ld	r24, Y
    29ac:	c9 59       	subi	r28, 0x99	; 153
    29ae:	d3 40       	sbci	r29, 0x03	; 3
    29b0:	8f 93       	push	r24
    29b2:	c8 56       	subi	r28, 0x68	; 104
    29b4:	dc 4f       	sbci	r29, 0xFC	; 252
    29b6:	98 81       	ld	r25, Y
    29b8:	c8 59       	subi	r28, 0x98	; 152
    29ba:	d3 40       	sbci	r29, 0x03	; 3
    29bc:	9f 93       	push	r25
    29be:	c9 56       	subi	r28, 0x69	; 105
    29c0:	dc 4f       	sbci	r29, 0xFC	; 252
    29c2:	88 81       	ld	r24, Y
    29c4:	c7 59       	subi	r28, 0x97	; 151
    29c6:	d3 40       	sbci	r29, 0x03	; 3
    29c8:	8f 93       	push	r24
    29ca:	ca 56       	subi	r28, 0x6A	; 106
    29cc:	dc 4f       	sbci	r29, 0xFC	; 252
    29ce:	98 81       	ld	r25, Y
    29d0:	c6 59       	subi	r28, 0x96	; 150
    29d2:	d3 40       	sbci	r29, 0x03	; 3
    29d4:	9f 93       	push	r25
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	cd 59       	subi	r28, 0x9D	; 157
    29e0:	dc 4f       	sbci	r29, 0xFC	; 252
    29e2:	88 81       	ld	r24, Y
    29e4:	c3 56       	subi	r28, 0x63	; 99
    29e6:	d3 40       	sbci	r29, 0x03	; 3
    29e8:	8f 93       	push	r24
    29ea:	ce 59       	subi	r28, 0x9E	; 158
    29ec:	dc 4f       	sbci	r29, 0xFC	; 252
    29ee:	88 81       	ld	r24, Y
    29f0:	c2 56       	subi	r28, 0x62	; 98
    29f2:	d3 40       	sbci	r29, 0x03	; 3
    29f4:	8f 93       	push	r24
    29f6:	cf 59       	subi	r28, 0x9F	; 159
    29f8:	dc 4f       	sbci	r29, 0xFC	; 252
    29fa:	88 81       	ld	r24, Y
    29fc:	c1 56       	subi	r28, 0x61	; 97
    29fe:	d3 40       	sbci	r29, 0x03	; 3
    2a00:	8f 93       	push	r24
    2a02:	c0 5a       	subi	r28, 0xA0	; 160
    2a04:	dc 4f       	sbci	r29, 0xFC	; 252
    2a06:	88 81       	ld	r24, Y
    2a08:	c0 56       	subi	r28, 0x60	; 96
    2a0a:	d3 40       	sbci	r29, 0x03	; 3
    2a0c:	8f 93       	push	r24
    2a0e:	ff 92       	push	r15
    2a10:	ef 92       	push	r14
    2a12:	ce 01       	movw	r24, r28
    2a14:	82 5a       	subi	r24, 0xA2	; 162
    2a16:	9e 4f       	sbci	r25, 0xFE	; 254
    2a18:	9f 93       	push	r25
    2a1a:	8f 93       	push	r24
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	0f 5f       	subi	r16, 0xFF	; 255
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	1f 93       	push	r17
    2a24:	0f 93       	push	r16
    2a26:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printLine(outbuf);
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	c8 01       	movw	r24, r16
    2a30:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	6e e0       	ldi	r22, 0x0E	; 14
    2a38:	77 ea       	ldi	r23, 0xA7	; 167
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2a40:	c0 5a       	subi	r28, 0xA0	; 160
    2a42:	dc 4f       	sbci	r29, 0xFC	; 252
    2a44:	f8 80       	ld	r15, Y
    2a46:	c0 56       	subi	r28, 0x60	; 96
    2a48:	d3 40       	sbci	r29, 0x03	; 3
    2a4a:	cf 59       	subi	r28, 0x9F	; 159
    2a4c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a4e:	e8 80       	ld	r14, Y
    2a50:	c1 56       	subi	r28, 0x61	; 97
    2a52:	d3 40       	sbci	r29, 0x03	; 3
    2a54:	ce 59       	subi	r28, 0x9E	; 158
    2a56:	dc 4f       	sbci	r29, 0xFC	; 252
    2a58:	98 80       	ld	r9, Y
    2a5a:	c2 56       	subi	r28, 0x62	; 98
    2a5c:	d3 40       	sbci	r29, 0x03	; 3
    2a5e:	cd 59       	subi	r28, 0x9D	; 157
    2a60:	dc 4f       	sbci	r29, 0xFC	; 252
    2a62:	88 80       	ld	r8, Y
    2a64:	c3 56       	subi	r28, 0x63	; 99
    2a66:	d3 40       	sbci	r29, 0x03	; 3
    2a68:	26 e6       	ldi	r18, 0x66	; 102
    2a6a:	36 e6       	ldi	r19, 0x66	; 102
    2a6c:	46 ee       	ldi	r20, 0xE6	; 230
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	6f 2d       	mov	r22, r15
    2a72:	7e 2d       	mov	r23, r14
    2a74:	89 2d       	mov	r24, r9
    2a76:	98 2d       	mov	r25, r8
    2a78:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	52 e4       	ldi	r21, 0x42	; 66
    2a8c:	0e 94 34 29 	call	0x5268	; 0x5268 <__addsf3>
    2a90:	9f 93       	push	r25
    2a92:	8f 93       	push	r24
    2a94:	7f 93       	push	r23
    2a96:	6f 93       	push	r22
    2a98:	8f 92       	push	r8
    2a9a:	9f 92       	push	r9
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	8e e1       	ldi	r24, 0x1E	; 30
    2aa2:	97 ea       	ldi	r25, 0xA7	; 167
    2aa4:	9f 93       	push	r25
    2aa6:	8f 93       	push	r24
    2aa8:	1f 93       	push	r17
    2aaa:	0f 93       	push	r16
    2aac:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2ab0:	42 e0       	ldi	r20, 0x02	; 2
    2ab2:	b8 01       	movw	r22, r16
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			break;
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2abe:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2ac0:	48 c2       	rjmp	.+1168   	; 0x2f52 <report+0xde0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2ac2:	ae 01       	movw	r20, r28
    2ac4:	4e 58       	subi	r20, 0x8E	; 142
    2ac6:	5c 4f       	sbci	r21, 0xFC	; 252
    2ac8:	be 01       	movw	r22, r28
    2aca:	62 59       	subi	r22, 0x92	; 146
    2acc:	7c 4f       	sbci	r23, 0xFC	; 252
    2ace:	ce 01       	movw	r24, r28
    2ad0:	86 59       	subi	r24, 0x96	; 150
    2ad2:	9c 4f       	sbci	r25, 0xFC	; 252
    2ad4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <get_orientation>
			get_time(currenttime);
    2ad8:	7e 01       	movw	r14, r28
    2ada:	96 ef       	ldi	r25, 0xF6	; 246
    2adc:	e9 1a       	sub	r14, r25
    2ade:	9e ef       	ldi	r25, 0xFE	; 254
    2ae0:	f9 0a       	sbc	r15, r25
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2ae8:	24 e3       	ldi	r18, 0x34	; 52
    2aea:	20 9f       	mul	r18, r16
    2aec:	c0 01       	movw	r24, r0
    2aee:	21 9f       	mul	r18, r17
    2af0:	90 0d       	add	r25, r0
    2af2:	11 24       	eor	r1, r1
    2af4:	88 5c       	subi	r24, 0xC8	; 200
    2af6:	97 4d       	sbci	r25, 0xD7	; 215
    2af8:	9f 93       	push	r25
    2afa:	8f 93       	push	r24
    2afc:	cb 58       	subi	r28, 0x8B	; 139
    2afe:	dc 4f       	sbci	r29, 0xFC	; 252
    2b00:	88 81       	ld	r24, Y
    2b02:	c5 57       	subi	r28, 0x75	; 117
    2b04:	d3 40       	sbci	r29, 0x03	; 3
    2b06:	8f 93       	push	r24
    2b08:	cc 58       	subi	r28, 0x8C	; 140
    2b0a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b0c:	88 81       	ld	r24, Y
    2b0e:	c4 57       	subi	r28, 0x74	; 116
    2b10:	d3 40       	sbci	r29, 0x03	; 3
    2b12:	8f 93       	push	r24
    2b14:	cd 58       	subi	r28, 0x8D	; 141
    2b16:	dc 4f       	sbci	r29, 0xFC	; 252
    2b18:	88 81       	ld	r24, Y
    2b1a:	c3 57       	subi	r28, 0x73	; 115
    2b1c:	d3 40       	sbci	r29, 0x03	; 3
    2b1e:	8f 93       	push	r24
    2b20:	ce 58       	subi	r28, 0x8E	; 142
    2b22:	dc 4f       	sbci	r29, 0xFC	; 252
    2b24:	88 81       	ld	r24, Y
    2b26:	c2 57       	subi	r28, 0x72	; 114
    2b28:	d3 40       	sbci	r29, 0x03	; 3
    2b2a:	8f 93       	push	r24
    2b2c:	cf 58       	subi	r28, 0x8F	; 143
    2b2e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b30:	88 81       	ld	r24, Y
    2b32:	c1 57       	subi	r28, 0x71	; 113
    2b34:	d3 40       	sbci	r29, 0x03	; 3
    2b36:	8f 93       	push	r24
    2b38:	c0 59       	subi	r28, 0x90	; 144
    2b3a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b3c:	88 81       	ld	r24, Y
    2b3e:	c0 57       	subi	r28, 0x70	; 112
    2b40:	d3 40       	sbci	r29, 0x03	; 3
    2b42:	8f 93       	push	r24
    2b44:	c1 59       	subi	r28, 0x91	; 145
    2b46:	dc 4f       	sbci	r29, 0xFC	; 252
    2b48:	88 81       	ld	r24, Y
    2b4a:	cf 56       	subi	r28, 0x6F	; 111
    2b4c:	d3 40       	sbci	r29, 0x03	; 3
    2b4e:	8f 93       	push	r24
    2b50:	c2 59       	subi	r28, 0x92	; 146
    2b52:	dc 4f       	sbci	r29, 0xFC	; 252
    2b54:	88 81       	ld	r24, Y
    2b56:	ce 56       	subi	r28, 0x6E	; 110
    2b58:	d3 40       	sbci	r29, 0x03	; 3
    2b5a:	8f 93       	push	r24
    2b5c:	c3 59       	subi	r28, 0x93	; 147
    2b5e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b60:	88 81       	ld	r24, Y
    2b62:	cd 56       	subi	r28, 0x6D	; 109
    2b64:	d3 40       	sbci	r29, 0x03	; 3
    2b66:	8f 93       	push	r24
    2b68:	c4 59       	subi	r28, 0x94	; 148
    2b6a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b6c:	88 81       	ld	r24, Y
    2b6e:	cc 56       	subi	r28, 0x6C	; 108
    2b70:	d3 40       	sbci	r29, 0x03	; 3
    2b72:	8f 93       	push	r24
    2b74:	c5 59       	subi	r28, 0x95	; 149
    2b76:	dc 4f       	sbci	r29, 0xFC	; 252
    2b78:	88 81       	ld	r24, Y
    2b7a:	cb 56       	subi	r28, 0x6B	; 107
    2b7c:	d3 40       	sbci	r29, 0x03	; 3
    2b7e:	8f 93       	push	r24
    2b80:	c6 59       	subi	r28, 0x96	; 150
    2b82:	dc 4f       	sbci	r29, 0xFC	; 252
    2b84:	88 81       	ld	r24, Y
    2b86:	ca 56       	subi	r28, 0x6A	; 106
    2b88:	d3 40       	sbci	r29, 0x03	; 3
    2b8a:	8f 93       	push	r24
    2b8c:	ff 92       	push	r15
    2b8e:	ef 92       	push	r14
    2b90:	ce 01       	movw	r24, r28
    2b92:	86 58       	subi	r24, 0x86	; 134
    2b94:	9d 4f       	sbci	r25, 0xFD	; 253
    2b96:	9f 93       	push	r25
    2b98:	8f 93       	push	r24
    2b9a:	8e 01       	movw	r16, r28
    2b9c:	0f 5f       	subi	r16, 0xFF	; 255
    2b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba0:	1f 93       	push	r17
    2ba2:	0f 93       	push	r16
    2ba4:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printLine(outbuf);
    2ba8:	c8 01       	movw	r24, r16
    2baa:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Orientation", 1);
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	64 e3       	ldi	r22, 0x34	; 52
    2bb2:	77 ea       	ldi	r23, 0xA7	; 167
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2bba:	cb 58       	subi	r28, 0x8B	; 139
    2bbc:	dc 4f       	sbci	r29, 0xFC	; 252
    2bbe:	88 81       	ld	r24, Y
    2bc0:	c5 57       	subi	r28, 0x75	; 117
    2bc2:	d3 40       	sbci	r29, 0x03	; 3
    2bc4:	8f 93       	push	r24
    2bc6:	cc 58       	subi	r28, 0x8C	; 140
    2bc8:	dc 4f       	sbci	r29, 0xFC	; 252
    2bca:	88 81       	ld	r24, Y
    2bcc:	c4 57       	subi	r28, 0x74	; 116
    2bce:	d3 40       	sbci	r29, 0x03	; 3
    2bd0:	8f 93       	push	r24
    2bd2:	cd 58       	subi	r28, 0x8D	; 141
    2bd4:	dc 4f       	sbci	r29, 0xFC	; 252
    2bd6:	88 81       	ld	r24, Y
    2bd8:	c3 57       	subi	r28, 0x73	; 115
    2bda:	d3 40       	sbci	r29, 0x03	; 3
    2bdc:	8f 93       	push	r24
    2bde:	ce 58       	subi	r28, 0x8E	; 142
    2be0:	dc 4f       	sbci	r29, 0xFC	; 252
    2be2:	88 81       	ld	r24, Y
    2be4:	c2 57       	subi	r28, 0x72	; 114
    2be6:	d3 40       	sbci	r29, 0x03	; 3
    2be8:	8f 93       	push	r24
    2bea:	cf 58       	subi	r28, 0x8F	; 143
    2bec:	dc 4f       	sbci	r29, 0xFC	; 252
    2bee:	88 81       	ld	r24, Y
    2bf0:	c1 57       	subi	r28, 0x71	; 113
    2bf2:	d3 40       	sbci	r29, 0x03	; 3
    2bf4:	8f 93       	push	r24
    2bf6:	c0 59       	subi	r28, 0x90	; 144
    2bf8:	dc 4f       	sbci	r29, 0xFC	; 252
    2bfa:	88 81       	ld	r24, Y
    2bfc:	c0 57       	subi	r28, 0x70	; 112
    2bfe:	d3 40       	sbci	r29, 0x03	; 3
    2c00:	8f 93       	push	r24
    2c02:	c1 59       	subi	r28, 0x91	; 145
    2c04:	dc 4f       	sbci	r29, 0xFC	; 252
    2c06:	88 81       	ld	r24, Y
    2c08:	cf 56       	subi	r28, 0x6F	; 111
    2c0a:	d3 40       	sbci	r29, 0x03	; 3
    2c0c:	8f 93       	push	r24
    2c0e:	c2 59       	subi	r28, 0x92	; 146
    2c10:	dc 4f       	sbci	r29, 0xFC	; 252
    2c12:	88 81       	ld	r24, Y
    2c14:	ce 56       	subi	r28, 0x6E	; 110
    2c16:	d3 40       	sbci	r29, 0x03	; 3
    2c18:	8f 93       	push	r24
    2c1a:	c3 59       	subi	r28, 0x93	; 147
    2c1c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c1e:	88 81       	ld	r24, Y
    2c20:	cd 56       	subi	r28, 0x6D	; 109
    2c22:	d3 40       	sbci	r29, 0x03	; 3
    2c24:	8f 93       	push	r24
    2c26:	c4 59       	subi	r28, 0x94	; 148
    2c28:	dc 4f       	sbci	r29, 0xFC	; 252
    2c2a:	88 81       	ld	r24, Y
    2c2c:	cc 56       	subi	r28, 0x6C	; 108
    2c2e:	d3 40       	sbci	r29, 0x03	; 3
    2c30:	8f 93       	push	r24
    2c32:	c5 59       	subi	r28, 0x95	; 149
    2c34:	dc 4f       	sbci	r29, 0xFC	; 252
    2c36:	88 81       	ld	r24, Y
    2c38:	cb 56       	subi	r28, 0x6B	; 107
    2c3a:	d3 40       	sbci	r29, 0x03	; 3
    2c3c:	8f 93       	push	r24
    2c3e:	c6 59       	subi	r28, 0x96	; 150
    2c40:	dc 4f       	sbci	r29, 0xFC	; 252
    2c42:	88 81       	ld	r24, Y
    2c44:	ca 56       	subi	r28, 0x6A	; 106
    2c46:	d3 40       	sbci	r29, 0x03	; 3
    2c48:	8f 93       	push	r24
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	8a 56       	subi	r24, 0x6A	; 106
    2c4e:	9d 4f       	sbci	r25, 0xFD	; 253
    2c50:	9f 93       	push	r25
    2c52:	8f 93       	push	r24
    2c54:	1f 93       	push	r17
    2c56:	0f 93       	push	r16
    2c58:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	42 e0       	ldi	r20, 0x02	; 2
    2c62:	b8 01       	movw	r22, r16
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2c6a:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2c6c:	72 c1       	rjmp	.+740    	; 0x2f52 <report+0xde0>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2c6e:	7e 01       	movw	r14, r28
    2c70:	96 ef       	ldi	r25, 0xF6	; 246
    2c72:	e9 1a       	sub	r14, r25
    2c74:	9e ef       	ldi	r25, 0xFE	; 254
    2c76:	f9 0a       	sbc	r15, r25
    2c78:	c7 01       	movw	r24, r14
    2c7a:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2c7e:	9e 01       	movw	r18, r28
    2c80:	23 5a       	subi	r18, 0xA3	; 163
    2c82:	3e 4f       	sbci	r19, 0xFE	; 254
    2c84:	ae 01       	movw	r20, r28
    2c86:	44 5a       	subi	r20, 0xA4	; 164
    2c88:	5e 4f       	sbci	r21, 0xFE	; 254
    2c8a:	be 01       	movw	r22, r28
    2c8c:	65 5a       	subi	r22, 0xA5	; 165
    2c8e:	7e 4f       	sbci	r23, 0xFE	; 254
    2c90:	ce 01       	movw	r24, r28
    2c92:	86 5a       	subi	r24, 0xA6	; 166
    2c94:	9e 4f       	sbci	r25, 0xFE	; 254
    2c96:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2c9a:	24 e3       	ldi	r18, 0x34	; 52
    2c9c:	20 9f       	mul	r18, r16
    2c9e:	c0 01       	movw	r24, r0
    2ca0:	21 9f       	mul	r18, r17
    2ca2:	90 0d       	add	r25, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	88 5c       	subi	r24, 0xC8	; 200
    2ca8:	97 4d       	sbci	r25, 0xD7	; 215
    2caa:	9f 93       	push	r25
    2cac:	8f 93       	push	r24
    2cae:	c3 5a       	subi	r28, 0xA3	; 163
    2cb0:	de 4f       	sbci	r29, 0xFE	; 254
    2cb2:	88 81       	ld	r24, Y
    2cb4:	cd 55       	subi	r28, 0x5D	; 93
    2cb6:	d1 40       	sbci	r29, 0x01	; 1
    2cb8:	1f 92       	push	r1
    2cba:	8f 93       	push	r24
    2cbc:	c4 5a       	subi	r28, 0xA4	; 164
    2cbe:	de 4f       	sbci	r29, 0xFE	; 254
    2cc0:	88 81       	ld	r24, Y
    2cc2:	cc 55       	subi	r28, 0x5C	; 92
    2cc4:	d1 40       	sbci	r29, 0x01	; 1
    2cc6:	1f 92       	push	r1
    2cc8:	8f 93       	push	r24
    2cca:	c5 5a       	subi	r28, 0xA5	; 165
    2ccc:	de 4f       	sbci	r29, 0xFE	; 254
    2cce:	88 81       	ld	r24, Y
    2cd0:	cb 55       	subi	r28, 0x5B	; 91
    2cd2:	d1 40       	sbci	r29, 0x01	; 1
    2cd4:	1f 92       	push	r1
    2cd6:	8f 93       	push	r24
    2cd8:	c6 5a       	subi	r28, 0xA6	; 166
    2cda:	de 4f       	sbci	r29, 0xFE	; 254
    2cdc:	88 81       	ld	r24, Y
    2cde:	ca 55       	subi	r28, 0x5A	; 90
    2ce0:	d1 40       	sbci	r29, 0x01	; 1
    2ce2:	1f 92       	push	r1
    2ce4:	8f 93       	push	r24
    2ce6:	ff 92       	push	r15
    2ce8:	ef 92       	push	r14
    2cea:	ce 01       	movw	r24, r28
    2cec:	88 55       	subi	r24, 0x58	; 88
    2cee:	9d 4f       	sbci	r25, 0xFD	; 253
    2cf0:	9f 93       	push	r25
    2cf2:	8f 93       	push	r24
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	0f 5f       	subi	r16, 0xFF	; 255
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	1f 93       	push	r17
    2cfc:	0f 93       	push	r16
    2cfe:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printLine(outbuf);
    2d02:	c8 01       	movw	r24, r16
    2d04:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2d08:	c4 5a       	subi	r28, 0xA4	; 164
    2d0a:	de 4f       	sbci	r29, 0xFE	; 254
    2d0c:	88 81       	ld	r24, Y
    2d0e:	cc 55       	subi	r28, 0x5C	; 92
    2d10:	d1 40       	sbci	r29, 0x01	; 1
    2d12:	1f 92       	push	r1
    2d14:	8f 93       	push	r24
    2d16:	c5 5a       	subi	r28, 0xA5	; 165
    2d18:	de 4f       	sbci	r29, 0xFE	; 254
    2d1a:	88 81       	ld	r24, Y
    2d1c:	cb 55       	subi	r28, 0x5B	; 91
    2d1e:	d1 40       	sbci	r29, 0x01	; 1
    2d20:	1f 92       	push	r1
    2d22:	8f 93       	push	r24
    2d24:	ce 01       	movw	r24, r28
    2d26:	8b 52       	subi	r24, 0x2B	; 43
    2d28:	9d 4f       	sbci	r25, 0xFD	; 253
    2d2a:	9f 93       	push	r25
    2d2c:	8f 93       	push	r24
    2d2e:	1f 93       	push	r17
    2d30:	0f 93       	push	r16
    2d32:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	b8 01       	movw	r22, r16
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2d40:	c3 5a       	subi	r28, 0xA3	; 163
    2d42:	de 4f       	sbci	r29, 0xFE	; 254
    2d44:	88 81       	ld	r24, Y
    2d46:	cd 55       	subi	r28, 0x5D	; 93
    2d48:	d1 40       	sbci	r29, 0x01	; 1
    2d4a:	1f 92       	push	r1
    2d4c:	8f 93       	push	r24
    2d4e:	c6 5a       	subi	r28, 0xA6	; 166
    2d50:	de 4f       	sbci	r29, 0xFE	; 254
    2d52:	88 81       	ld	r24, Y
    2d54:	ca 55       	subi	r28, 0x5A	; 90
    2d56:	d1 40       	sbci	r29, 0x01	; 1
    2d58:	1f 92       	push	r1
    2d5a:	8f 93       	push	r24
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	88 51       	subi	r24, 0x18	; 24
    2d60:	9d 4f       	sbci	r25, 0xFD	; 253
    2d62:	9f 93       	push	r25
    2d64:	8f 93       	push	r24
    2d66:	1f 93       	push	r17
    2d68:	0f 93       	push	r16
    2d6a:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	42 e0       	ldi	r20, 0x02	; 2
    2d74:	b8 01       	movw	r22, r16
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2d7c:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2d7e:	e9 c0       	rjmp	.+466    	; 0x2f52 <report+0xde0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2d80:	7e 01       	movw	r14, r28
    2d82:	96 ef       	ldi	r25, 0xF6	; 246
    2d84:	e9 1a       	sub	r14, r25
    2d86:	9e ef       	ldi	r25, 0xFE	; 254
    2d88:	f9 0a       	sbc	r15, r25
    2d8a:	c7 01       	movw	r24, r14
    2d8c:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			get_SETTIME(lastsettime);
    2d90:	6e 01       	movw	r12, r28
    2d92:	82 ee       	ldi	r24, 0xE2	; 226
    2d94:	c8 1a       	sub	r12, r24
    2d96:	8e ef       	ldi	r24, 0xFE	; 254
    2d98:	d8 0a       	sbc	r13, r24
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <get_SETTIME>
			get_BOOTTIME(boottime);
    2da0:	5e 01       	movw	r10, r28
    2da2:	9e ec       	ldi	r25, 0xCE	; 206
    2da4:	a9 1a       	sub	r10, r25
    2da6:	9e ef       	ldi	r25, 0xFE	; 254
    2da8:	b9 0a       	sbc	r11, r25
    2daa:	c5 01       	movw	r24, r10
    2dac:	0e 94 19 08 	call	0x1032	; 0x1032 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2db0:	24 e3       	ldi	r18, 0x34	; 52
    2db2:	20 9f       	mul	r18, r16
    2db4:	c0 01       	movw	r24, r0
    2db6:	21 9f       	mul	r18, r17
    2db8:	90 0d       	add	r25, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	88 5c       	subi	r24, 0xC8	; 200
    2dbe:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2dc0:	9f 93       	push	r25
    2dc2:	8f 93       	push	r24
    2dc4:	bf 92       	push	r11
    2dc6:	af 92       	push	r10
    2dc8:	df 92       	push	r13
    2dca:	cf 92       	push	r12
    2dcc:	ff 92       	push	r15
    2dce:	ef 92       	push	r14
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	85 50       	subi	r24, 0x05	; 5
    2dd4:	9d 4f       	sbci	r25, 0xFD	; 253
    2dd6:	9f 93       	push	r25
    2dd8:	8f 93       	push	r24
    2dda:	8e 01       	movw	r16, r28
    2ddc:	0f 5f       	subi	r16, 0xFF	; 255
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	1f 93       	push	r17
    2de2:	0f 93       	push	r16
    2de4:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2de8:	c8 01       	movw	r24, r16
    2dea:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Time", 1);
    2dee:	41 e0       	ldi	r20, 0x01	; 1
    2df0:	60 e4       	ldi	r22, 0x40	; 64
    2df2:	77 ea       	ldi	r23, 0xA7	; 167
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2dfa:	b7 01       	movw	r22, r14
    2dfc:	65 5f       	subi	r22, 0xF5	; 245
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	42 e0       	ldi	r20, 0x02	; 2
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			break;
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e0c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2e0e:	a1 c0       	rjmp	.+322    	; 0x2f52 <report+0xde0>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	0e 94 28 0a 	call	0x1450	; 0x1450 <read_ionpump>
    2e16:	d6 2e       	mov	r13, r22
    2e18:	c7 2e       	mov	r12, r23
    2e1a:	b8 2e       	mov	r11, r24
    2e1c:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	0e 94 28 0a 	call	0x1450	; 0x1450 <read_ionpump>
    2e24:	96 2e       	mov	r9, r22
    2e26:	87 2e       	mov	r8, r23
    2e28:	78 2e       	mov	r7, r24
    2e2a:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2e2c:	7e 01       	movw	r14, r28
    2e2e:	96 ef       	ldi	r25, 0xF6	; 246
    2e30:	e9 1a       	sub	r14, r25
    2e32:	9e ef       	ldi	r25, 0xFE	; 254
    2e34:	f9 0a       	sbc	r15, r25
    2e36:	c7 01       	movw	r24, r14
    2e38:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2e3c:	24 e3       	ldi	r18, 0x34	; 52
    2e3e:	20 9f       	mul	r18, r16
    2e40:	c0 01       	movw	r24, r0
    2e42:	21 9f       	mul	r18, r17
    2e44:	90 0d       	add	r25, r0
    2e46:	11 24       	eor	r1, r1
    2e48:	88 5c       	subi	r24, 0xC8	; 200
    2e4a:	97 4d       	sbci	r25, 0xD7	; 215
    2e4c:	9f 93       	push	r25
    2e4e:	8f 93       	push	r24
    2e50:	6f 92       	push	r6
    2e52:	7f 92       	push	r7
    2e54:	8f 92       	push	r8
    2e56:	9f 92       	push	r9
    2e58:	af 92       	push	r10
    2e5a:	bf 92       	push	r11
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ff 92       	push	r15
    2e62:	ef 92       	push	r14
    2e64:	ce 01       	movw	r24, r28
    2e66:	8c 5e       	subi	r24, 0xEC	; 236
    2e68:	9c 4f       	sbci	r25, 0xFC	; 252
    2e6a:	9f 93       	push	r25
    2e6c:	8f 93       	push	r24
    2e6e:	8e 01       	movw	r16, r28
    2e70:	0f 5f       	subi	r16, 0xFF	; 255
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	1f 93       	push	r17
    2e76:	0f 93       	push	r16
    2e78:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printLine(outbuf);
    2e7c:	c8 01       	movw	r24, r16
    2e7e:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2e82:	41 e0       	ldi	r20, 0x01	; 1
    2e84:	65 e4       	ldi	r22, 0x45	; 69
    2e86:	77 ea       	ldi	r23, 0xA7	; 167
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2e8e:	6f 92       	push	r6
    2e90:	7f 92       	push	r7
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	87 5c       	subi	r24, 0xC7	; 199
    2ea2:	9c 4f       	sbci	r25, 0xFC	; 252
    2ea4:	9f 93       	push	r25
    2ea6:	8f 93       	push	r24
    2ea8:	1f 93       	push	r17
    2eaa:	0f 93       	push	r16
    2eac:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2eb0:	42 e0       	ldi	r20, 0x02	; 2
    2eb2:	b8 01       	movw	r22, r16
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			break;
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2ebe:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2ec0:	48 c0       	rjmp	.+144    	; 0x2f52 <report+0xde0>

		case 'V':					// Version
			get_VERSION(version);
    2ec2:	6e 01       	movw	r12, r28
    2ec4:	9f ef       	ldi	r25, 0xFF	; 255
    2ec6:	c9 0e       	add	r12, r25
    2ec8:	d1 1c       	adc	r13, r1
    2eca:	c6 01       	movw	r24, r12
    2ecc:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
			get_time(currenttime);
    2ed0:	7e 01       	movw	r14, r28
    2ed2:	86 ef       	ldi	r24, 0xF6	; 246
    2ed4:	e8 1a       	sub	r14, r24
    2ed6:	8e ef       	ldi	r24, 0xFE	; 254
    2ed8:	f8 0a       	sbc	r15, r24
    2eda:	c7 01       	movw	r24, r14
    2edc:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2ee0:	24 e3       	ldi	r18, 0x34	; 52
    2ee2:	20 9f       	mul	r18, r16
    2ee4:	c0 01       	movw	r24, r0
    2ee6:	21 9f       	mul	r18, r17
    2ee8:	90 0d       	add	r25, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	88 5c       	subi	r24, 0xC8	; 200
    2eee:	97 4d       	sbci	r25, 0xD7	; 215
    2ef0:	9f 93       	push	r25
    2ef2:	8f 93       	push	r24
    2ef4:	df 92       	push	r13
    2ef6:	cf 92       	push	r12
    2ef8:	ff 92       	push	r15
    2efa:	ef 92       	push	r14
    2efc:	ce 01       	movw	r24, r28
    2efe:	8a 5b       	subi	r24, 0xBA	; 186
    2f00:	9c 4f       	sbci	r25, 0xFC	; 252
    2f02:	9f 93       	push	r25
    2f04:	8f 93       	push	r24
    2f06:	8e 01       	movw	r16, r28
    2f08:	0f 5f       	subi	r16, 0xFF	; 255
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	1f 93       	push	r17
    2f0e:	0f 93       	push	r16
    2f10:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printLine(outbuf);
    2f14:	c8 01       	movw	r24, r16
    2f16:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	62 e4       	ldi	r22, 0x42	; 66
    2f1e:	75 ea       	ldi	r23, 0xA5	; 165
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			get_VERSION(outbuf);
    2f26:	c8 01       	movw	r24, r16
    2f28:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2f2c:	42 e0       	ldi	r20, 0x02	; 2
    2f2e:	b8 01       	movw	r22, r16
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <writestr_OLED>
			break;
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2f3a:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2f3c:	0a c0       	rjmp	.+20     	; 0x2f52 <report+0xde0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2f3e:	65 e5       	ldi	r22, 0x55	; 85
    2f40:	77 ea       	ldi	r23, 0xA7	; 167
    2f42:	8a ec       	ldi	r24, 0xCA	; 202
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    2f4a:	0f 2e       	mov	r0, r31
    2f4c:	f3 e6       	ldi	r31, 0x63	; 99
    2f4e:	ff 2e       	mov	r15, r31
    2f50:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2f52:	8f 2d       	mov	r24, r15
    2f54:	cf 55       	subi	r28, 0x5F	; 95
    2f56:	dc 4f       	sbci	r29, 0xFC	; 252
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	ef 90       	pop	r14
    2f68:	df 90       	pop	r13
    2f6a:	cf 90       	pop	r12
    2f6c:	bf 90       	pop	r11
    2f6e:	af 90       	pop	r10
    2f70:	9f 90       	pop	r9
    2f72:	8f 90       	pop	r8
    2f74:	7f 90       	pop	r7
    2f76:	6f 90       	pop	r6
    2f78:	5f 90       	pop	r5
    2f7a:	4f 90       	pop	r4
    2f7c:	3f 90       	pop	r3
    2f7e:	2f 90       	pop	r2
    2f80:	08 95       	ret

00002f82 <crc16>:

-------------*/

	return(NOERROR);

}
    2f82:	dc 01       	movw	r26, r24
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	1b c0       	rjmp	.+54     	; 0x2fc4 <crc16+0x42>
    2f8e:	fd 01       	movw	r30, r26
    2f90:	e4 0f       	add	r30, r20
    2f92:	f5 1f       	adc	r31, r21
    2f94:	20 81       	ld	r18, Z
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	32 2f       	mov	r19, r18
    2f9a:	22 27       	eor	r18, r18
    2f9c:	82 27       	eor	r24, r18
    2f9e:	93 27       	eor	r25, r19
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	0c c0       	rjmp	.+24     	; 0x2fbc <crc16+0x3a>
    2fa4:	99 23       	and	r25, r25
    2fa6:	3c f4       	brge	.+14     	; 0x2fb6 <crc16+0x34>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	31 e2       	ldi	r19, 0x21	; 33
    2fae:	83 27       	eor	r24, r19
    2fb0:	30 e1       	ldi	r19, 0x10	; 16
    2fb2:	93 27       	eor	r25, r19
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <crc16+0x38>
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	2f 5f       	subi	r18, 0xFF	; 255
    2fbc:	28 30       	cpi	r18, 0x08	; 8
    2fbe:	90 f3       	brcs	.-28     	; 0x2fa4 <crc16+0x22>
    2fc0:	4f 5f       	subi	r20, 0xFF	; 255
    2fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc4:	46 17       	cp	r20, r22
    2fc6:	57 07       	cpc	r21, r23
    2fc8:	10 f3       	brcs	.-60     	; 0x2f8e <crc16+0xc>
    2fca:	08 95       	ret

00002fcc <get_FRAM_ENCSAVETIME>:
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	c6 57       	subi	r28, 0x76	; 118
    2fdc:	d1 09       	sbc	r29, r1
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	7c 01       	movw	r14, r24
    2fe4:	86 e2       	ldi	r24, 0x26	; 38
    2fe6:	e1 e6       	ldi	r30, 0x61	; 97
    2fe8:	f9 ea       	ldi	r31, 0xA9	; 169
    2fea:	de 01       	movw	r26, r28
    2fec:	af 5a       	subi	r26, 0xAF	; 175
    2fee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff0:	01 90       	ld	r0, Z+
    2ff2:	0d 92       	st	X+, r0
    2ff4:	8a 95       	dec	r24
    2ff6:	e1 f7       	brne	.-8      	; 0x2ff0 <get_FRAM_ENCSAVETIME+0x24>
    2ff8:	24 e1       	ldi	r18, 0x14	; 20
    2ffa:	a7 01       	movw	r20, r14
    2ffc:	60 e2       	ldi	r22, 0x20	; 32
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	80 e5       	ldi	r24, 0x50	; 80
    3002:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    3006:	18 2f       	mov	r17, r24
    3008:	83 36       	cpi	r24, 0x63	; 99
    300a:	b1 f4       	brne	.+44     	; 0x3038 <get_FRAM_ENCSAVETIME+0x6c>
    300c:	ce 01       	movw	r24, r28
    300e:	8f 5a       	subi	r24, 0xAF	; 175
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	80 55       	subi	r24, 0x50	; 80
    3018:	91 09       	sbc	r25, r1
    301a:	7c 01       	movw	r14, r24
    301c:	9f 93       	push	r25
    301e:	8f 93       	push	r24
    3020:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3024:	b7 01       	movw	r22, r14
    3026:	86 e3       	ldi	r24, 0x36	; 54
    3028:	91 e0       	ldi	r25, 0x01	; 1
    302a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	03 c0       	rjmp	.+6      	; 0x303e <get_FRAM_ENCSAVETIME+0x72>
    3038:	f7 01       	movw	r30, r14
    303a:	13 8a       	std	Z+19, r1	; 0x13
    303c:	10 e0       	ldi	r17, 0x00	; 0
    303e:	81 2f       	mov	r24, r17
    3040:	ca 58       	subi	r28, 0x8A	; 138
    3042:	df 4f       	sbci	r29, 0xFF	; 255
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	08 95       	ret

00003054 <get_FRAM_MOTOR_ENCODER>:
    3054:	cf 92       	push	r12
    3056:	df 92       	push	r13
    3058:	ef 92       	push	r14
    305a:	ff 92       	push	r15
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	c3 58       	subi	r28, 0x83	; 131
    306a:	d1 09       	sbc	r29, r1
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	8b 01       	movw	r16, r22
    3072:	9f e2       	ldi	r25, 0x2F	; 47
    3074:	e7 e8       	ldi	r30, 0x87	; 135
    3076:	f9 ea       	ldi	r31, 0xA9	; 169
    3078:	de 01       	movw	r26, r28
    307a:	ab 5a       	subi	r26, 0xAB	; 171
    307c:	bf 4f       	sbci	r27, 0xFF	; 255
    307e:	01 90       	ld	r0, Z+
    3080:	0d 92       	st	X+, r0
    3082:	9a 95       	dec	r25
    3084:	e1 f7       	brne	.-8      	; 0x307e <get_FRAM_MOTOR_ENCODER+0x2a>
    3086:	81 38       	cpi	r24, 0x81	; 129
    3088:	59 f0       	breq	.+22     	; 0x30a0 <get_FRAM_MOTOR_ENCODER+0x4c>
    308a:	82 38       	cpi	r24, 0x82	; 130
    308c:	31 f0       	breq	.+12     	; 0x309a <get_FRAM_MOTOR_ENCODER+0x46>
    308e:	80 38       	cpi	r24, 0x80	; 128
    3090:	09 f0       	breq	.+2      	; 0x3094 <get_FRAM_MOTOR_ENCODER+0x40>
    3092:	69 c0       	rjmp	.+210    	; 0x3166 <get_FRAM_MOTOR_ENCODER+0x112>
    3094:	64 e1       	ldi	r22, 0x14	; 20
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <get_FRAM_MOTOR_ENCODER+0x50>
    309a:	6c e1       	ldi	r22, 0x1C	; 28
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <get_FRAM_MOTOR_ENCODER+0x50>
    30a0:	68 e1       	ldi	r22, 0x18	; 24
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	f8 2e       	mov	r15, r24
    30a6:	24 e0       	ldi	r18, 0x04	; 4
    30a8:	ae 01       	movw	r20, r28
    30aa:	4f 5a       	subi	r20, 0xAF	; 175
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	80 e5       	ldi	r24, 0x50	; 80
    30b0:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    30b4:	e8 2e       	mov	r14, r24
    30b6:	83 e6       	ldi	r24, 0x63	; 99
    30b8:	e8 12       	cpse	r14, r24
    30ba:	24 c0       	rjmp	.+72     	; 0x3104 <get_FRAM_MOTOR_ENCODER+0xb0>
    30bc:	81 ec       	ldi	r24, 0xC1	; 193
    30be:	8f 0d       	add	r24, r15
    30c0:	1f 92       	push	r1
    30c2:	8f 93       	push	r24
    30c4:	ce 01       	movw	r24, r28
    30c6:	8b 5a       	subi	r24, 0xAB	; 171
    30c8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ca:	9f 93       	push	r25
    30cc:	8f 93       	push	r24
    30ce:	fe 01       	movw	r30, r28
    30d0:	31 96       	adiw	r30, 0x01	; 1
    30d2:	6f 01       	movw	r12, r30
    30d4:	ff 93       	push	r31
    30d6:	ef 93       	push	r30
    30d8:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    30dc:	b6 01       	movw	r22, r12
    30de:	83 e9       	ldi	r24, 0x93	; 147
    30e0:	91 e0       	ldi	r25, 0x01	; 1
    30e2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    30e6:	8f ef       	ldi	r24, 0xFF	; 255
    30e8:	9f ef       	ldi	r25, 0xFF	; 255
    30ea:	dc 01       	movw	r26, r24
    30ec:	f8 01       	movw	r30, r16
    30ee:	80 83       	st	Z, r24
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	a2 83       	std	Z+2, r26	; 0x02
    30f4:	b3 83       	std	Z+3, r27	; 0x03
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	35 c0       	rjmp	.+106    	; 0x316e <get_FRAM_MOTOR_ENCODER+0x11a>
    3104:	62 96       	adiw	r28, 0x12	; 18
    3106:	8f ad       	ldd	r24, Y+63	; 0x3f
    3108:	62 97       	sbiw	r28, 0x12	; 18
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	a0 e0       	ldi	r26, 0x00	; 0
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	78 2f       	mov	r23, r24
    3112:	66 27       	eor	r22, r22
    3114:	55 27       	eor	r21, r21
    3116:	44 27       	eor	r20, r20
    3118:	63 96       	adiw	r28, 0x13	; 19
    311a:	9f ad       	ldd	r25, Y+63	; 0x3f
    311c:	63 97       	sbiw	r28, 0x13	; 19
    311e:	89 2f       	mov	r24, r25
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	dc 01       	movw	r26, r24
    3128:	99 27       	eor	r25, r25
    312a:	88 27       	eor	r24, r24
    312c:	84 2b       	or	r24, r20
    312e:	95 2b       	or	r25, r21
    3130:	a6 2b       	or	r26, r22
    3132:	b7 2b       	or	r27, r23
    3134:	64 96       	adiw	r28, 0x14	; 20
    3136:	4f ad       	ldd	r20, Y+63	; 0x3f
    3138:	64 97       	sbiw	r28, 0x14	; 20
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	76 2f       	mov	r23, r22
    3142:	65 2f       	mov	r22, r21
    3144:	54 2f       	mov	r21, r20
    3146:	44 27       	eor	r20, r20
    3148:	84 2b       	or	r24, r20
    314a:	95 2b       	or	r25, r21
    314c:	a6 2b       	or	r26, r22
    314e:	b7 2b       	or	r27, r23
    3150:	65 96       	adiw	r28, 0x15	; 21
    3152:	2f ad       	ldd	r18, Y+63	; 0x3f
    3154:	65 97       	sbiw	r28, 0x15	; 21
    3156:	82 2b       	or	r24, r18
    3158:	f8 01       	movw	r30, r16
    315a:	80 83       	st	Z, r24
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	a2 83       	std	Z+2, r26	; 0x02
    3160:	b3 83       	std	Z+3, r27	; 0x03
    3162:	e1 2c       	mov	r14, r1
    3164:	04 c0       	rjmp	.+8      	; 0x316e <get_FRAM_MOTOR_ENCODER+0x11a>
    3166:	0f 2e       	mov	r0, r31
    3168:	f3 e6       	ldi	r31, 0x63	; 99
    316a:	ef 2e       	mov	r14, r31
    316c:	f0 2d       	mov	r31, r0
    316e:	8e 2d       	mov	r24, r14
    3170:	cd 57       	subi	r28, 0x7D	; 125
    3172:	df 4f       	sbci	r29, 0xFF	; 255
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	ff 90       	pop	r15
    3182:	ef 90       	pop	r14
    3184:	df 90       	pop	r13
    3186:	cf 90       	pop	r12
    3188:	08 95       	ret

0000318a <get_MOTOR>:
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	c2 59       	subi	r28, 0x92	; 146
    31a2:	d1 09       	sbc	r29, r1
    31a4:	cd bf       	out	0x3d, r28	; 61
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	e8 2e       	mov	r14, r24
    31aa:	8a 01       	movw	r16, r20
    31ac:	f2 2e       	mov	r15, r18
    31ae:	80 e2       	ldi	r24, 0x20	; 32
    31b0:	e6 eb       	ldi	r30, 0xB6	; 182
    31b2:	f9 ea       	ldi	r31, 0xA9	; 169
    31b4:	de 01       	movw	r26, r28
    31b6:	ab 5a       	subi	r26, 0xAB	; 171
    31b8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ba:	01 90       	ld	r0, Z+
    31bc:	0d 92       	st	X+, r0
    31be:	8a 95       	dec	r24
    31c0:	e1 f7       	brne	.-8      	; 0x31ba <get_MOTOR+0x30>
    31c2:	8e e1       	ldi	r24, 0x1E	; 30
    31c4:	e6 ed       	ldi	r30, 0xD6	; 214
    31c6:	f9 ea       	ldi	r31, 0xA9	; 169
    31c8:	de 01       	movw	r26, r28
    31ca:	ab 58       	subi	r26, 0x8B	; 139
    31cc:	bf 4f       	sbci	r27, 0xFF	; 255
    31ce:	01 90       	ld	r0, Z+
    31d0:	0d 92       	st	X+, r0
    31d2:	8a 95       	dec	r24
    31d4:	e1 f7       	brne	.-8      	; 0x31ce <get_MOTOR+0x44>
    31d6:	68 94       	set
    31d8:	bb 24       	eor	r11, r11
    31da:	b1 f8       	bld	r11, 1
    31dc:	b2 0e       	add	r11, r18
    31de:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    31e2:	b0 92 39 2b 	sts	0x2B39, r11	; 0x802b39 <ser_recv1+0xfe>
    31e6:	62 96       	adiw	r28, 0x12	; 18
    31e8:	ef ae       	std	Y+63, r14	; 0x3f
    31ea:	62 97       	sbiw	r28, 0x12	; 18
    31ec:	63 96       	adiw	r28, 0x13	; 19
    31ee:	6f af       	std	Y+63, r22	; 0x3f
    31f0:	63 97       	sbiw	r28, 0x13	; 19
    31f2:	62 e0       	ldi	r22, 0x02	; 2
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	ce 01       	movw	r24, r28
    31f8:	8f 5a       	subi	r24, 0xAF	; 175
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <crc16>
    3200:	64 96       	adiw	r28, 0x14	; 20
    3202:	9f af       	std	Y+63, r25	; 0x3f
    3204:	64 97       	sbiw	r28, 0x14	; 20
    3206:	65 96       	adiw	r28, 0x15	; 21
    3208:	8f af       	std	Y+63, r24	; 0x3f
    320a:	65 97       	sbiw	r28, 0x15	; 21
    320c:	62 e0       	ldi	r22, 0x02	; 2
    320e:	ce 01       	movw	r24, r28
    3210:	8f 5a       	subi	r24, 0xAF	; 175
    3212:	9f 4f       	sbci	r25, 0xFF	; 255
    3214:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <send_USART1>
    3218:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    321c:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    3220:	24 c0       	rjmp	.+72     	; 0x326a <get_MOTOR+0xe0>
    3222:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3226:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    322a:	85 36       	cpi	r24, 0x65	; 101
    322c:	91 05       	cpc	r25, r1
    322e:	e8 f0       	brcs	.+58     	; 0x326a <get_MOTOR+0xe0>
    3230:	81 ec       	ldi	r24, 0xC1	; 193
    3232:	8e 0d       	add	r24, r14
    3234:	1f 92       	push	r1
    3236:	8f 93       	push	r24
    3238:	ce 01       	movw	r24, r28
    323a:	8b 5a       	subi	r24, 0xAB	; 171
    323c:	9f 4f       	sbci	r25, 0xFF	; 255
    323e:	9f 93       	push	r25
    3240:	8f 93       	push	r24
    3242:	8e 01       	movw	r16, r28
    3244:	0f 5f       	subi	r16, 0xFF	; 255
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	1f 93       	push	r17
    324a:	0f 93       	push	r16
    324c:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3250:	b8 01       	movw	r22, r16
    3252:	80 e3       	ldi	r24, 0x30	; 48
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	83 e6       	ldi	r24, 0x63	; 99
    3268:	5d c0       	rjmp	.+186    	; 0x3324 <get_MOTOR+0x19a>
    326a:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    326e:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    3272:	98 17       	cp	r25, r24
    3274:	b0 f2       	brcs	.-84     	; 0x3222 <get_MOTOR+0x98>
    3276:	8f 2d       	mov	r24, r15
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	fc 01       	movw	r30, r24
    327c:	e5 5c       	subi	r30, 0xC5	; 197
    327e:	f5 4d       	sbci	r31, 0xD5	; 213
    3280:	c0 80       	ld	r12, Z
    3282:	d1 2c       	mov	r13, r1
    3284:	dc 2c       	mov	r13, r12
    3286:	cc 24       	eor	r12, r12
    3288:	fc 01       	movw	r30, r24
    328a:	e4 5c       	subi	r30, 0xC4	; 196
    328c:	f5 4d       	sbci	r31, 0xD5	; 213
    328e:	80 81       	ld	r24, Z
    3290:	c8 2a       	or	r12, r24
    3292:	82 e0       	ldi	r24, 0x02	; 2
    3294:	0e c0       	rjmp	.+28     	; 0x32b2 <get_MOTOR+0x128>
    3296:	28 2f       	mov	r18, r24
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	f9 01       	movw	r30, r18
    329c:	e7 5c       	subi	r30, 0xC7	; 199
    329e:	f5 4d       	sbci	r31, 0xD5	; 213
    32a0:	90 81       	ld	r25, Z
    32a2:	e1 e5       	ldi	r30, 0x51	; 81
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	ec 0f       	add	r30, r28
    32a8:	fd 1f       	adc	r31, r29
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	90 83       	st	Z, r25
    32b0:	8f 5f       	subi	r24, 0xFF	; 255
    32b2:	8b 15       	cp	r24, r11
    32b4:	80 f3       	brcs	.-32     	; 0x3296 <get_MOTOR+0x10c>
    32b6:	6b 2d       	mov	r22, r11
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	ce 01       	movw	r24, r28
    32bc:	8f 5a       	subi	r24, 0xAF	; 175
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <crc16>
    32c4:	c8 16       	cp	r12, r24
    32c6:	d9 06       	cpc	r13, r25
    32c8:	49 f1       	breq	.+82     	; 0x331c <get_MOTOR+0x192>
    32ca:	81 ec       	ldi	r24, 0xC1	; 193
    32cc:	8e 0d       	add	r24, r14
    32ce:	1f 92       	push	r1
    32d0:	8f 93       	push	r24
    32d2:	ce 01       	movw	r24, r28
    32d4:	8b 58       	subi	r24, 0x8B	; 139
    32d6:	9f 4f       	sbci	r25, 0xFF	; 255
    32d8:	9f 93       	push	r25
    32da:	8f 93       	push	r24
    32dc:	8e 01       	movw	r16, r28
    32de:	0f 5f       	subi	r16, 0xFF	; 255
    32e0:	1f 4f       	sbci	r17, 0xFF	; 255
    32e2:	1f 93       	push	r17
    32e4:	0f 93       	push	r16
    32e6:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    32ea:	b8 01       	movw	r22, r16
    32ec:	81 e3       	ldi	r24, 0x31	; 49
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	83 e6       	ldi	r24, 0x63	; 99
    3302:	10 c0       	rjmp	.+32     	; 0x3324 <get_MOTOR+0x19a>
    3304:	82 2f       	mov	r24, r18
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	f8 01       	movw	r30, r16
    330a:	e8 0f       	add	r30, r24
    330c:	f9 1f       	adc	r31, r25
    330e:	dc 01       	movw	r26, r24
    3310:	a5 5c       	subi	r26, 0xC5	; 197
    3312:	b5 4d       	sbci	r27, 0xD5	; 213
    3314:	8c 91       	ld	r24, X
    3316:	80 83       	st	Z, r24
    3318:	2f 5f       	subi	r18, 0xFF	; 255
    331a:	01 c0       	rjmp	.+2      	; 0x331e <get_MOTOR+0x194>
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	2f 15       	cp	r18, r15
    3320:	88 f3       	brcs	.-30     	; 0x3304 <get_MOTOR+0x17a>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	ce 56       	subi	r28, 0x6E	; 110
    3326:	df 4f       	sbci	r29, 0xFF	; 255
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	df 90       	pop	r13
    333a:	cf 90       	pop	r12
    333c:	bf 90       	pop	r11
    333e:	08 95       	ret

00003340 <get_MOTOR_CURRENT>:
    3340:	cf 92       	push	r12
    3342:	df 92       	push	r13
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	cd 57       	subi	r28, 0x7D	; 125
    3356:	d1 09       	sbc	r29, r1
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	e8 2e       	mov	r14, r24
    335e:	8b 01       	movw	r16, r22
    3360:	89 e2       	ldi	r24, 0x29	; 41
    3362:	e4 ef       	ldi	r30, 0xF4	; 244
    3364:	f9 ea       	ldi	r31, 0xA9	; 169
    3366:	de 01       	movw	r26, r28
    3368:	11 96       	adiw	r26, 0x01	; 1
    336a:	01 90       	ld	r0, Z+
    336c:	0d 92       	st	X+, r0
    336e:	8a 95       	dec	r24
    3370:	e1 f7       	brne	.-8      	; 0x336a <get_MOTOR_CURRENT+0x2a>
    3372:	24 e0       	ldi	r18, 0x04	; 4
    3374:	ae 01       	movw	r20, r28
    3376:	46 58       	subi	r20, 0x86	; 134
    3378:	5f 4f       	sbci	r21, 0xFF	; 255
    337a:	61 e3       	ldi	r22, 0x31	; 49
    337c:	8e 2d       	mov	r24, r14
    337e:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    3382:	f8 2e       	mov	r15, r24
    3384:	83 e6       	ldi	r24, 0x63	; 99
    3386:	f8 12       	cpse	r15, r24
    3388:	21 c0       	rjmp	.+66     	; 0x33cc <get_MOTOR_CURRENT+0x8c>
    338a:	81 ec       	ldi	r24, 0xC1	; 193
    338c:	8e 0d       	add	r24, r14
    338e:	1f 92       	push	r1
    3390:	8f 93       	push	r24
    3392:	ce 01       	movw	r24, r28
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	9f 93       	push	r25
    3398:	8f 93       	push	r24
    339a:	6e 01       	movw	r12, r28
    339c:	ea e2       	ldi	r30, 0x2A	; 42
    339e:	ce 0e       	add	r12, r30
    33a0:	d1 1c       	adc	r13, r1
    33a2:	df 92       	push	r13
    33a4:	cf 92       	push	r12
    33a6:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    33aa:	b6 01       	movw	r22, r12
    33ac:	86 e3       	ldi	r24, 0x36	; 54
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    33b4:	8f ef       	ldi	r24, 0xFF	; 255
    33b6:	9f ef       	ldi	r25, 0xFF	; 255
    33b8:	f8 01       	movw	r30, r16
    33ba:	80 83       	st	Z, r24
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	19 c0       	rjmp	.+50     	; 0x33fe <get_MOTOR_CURRENT+0xbe>
    33cc:	eb 96       	adiw	r28, 0x3b	; 59
    33ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    33d0:	eb 97       	sbiw	r28, 0x3b	; 59
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	98 2f       	mov	r25, r24
    33d6:	88 27       	eor	r24, r24
    33d8:	ec 96       	adiw	r28, 0x3c	; 60
    33da:	2f ad       	ldd	r18, Y+63	; 0x3f
    33dc:	ec 97       	sbiw	r28, 0x3c	; 60
    33de:	82 2b       	or	r24, r18
    33e0:	9c 01       	movw	r18, r24
    33e2:	22 0f       	add	r18, r18
    33e4:	33 1f       	adc	r19, r19
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	82 0f       	add	r24, r18
    33f4:	93 1f       	adc	r25, r19
    33f6:	f8 01       	movw	r30, r16
    33f8:	80 83       	st	Z, r24
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	f1 2c       	mov	r15, r1
    33fe:	8f 2d       	mov	r24, r15
    3400:	c3 58       	subi	r28, 0x83	; 131
    3402:	df 4f       	sbci	r29, 0xFF	; 255
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ff 90       	pop	r15
    3412:	ef 90       	pop	r14
    3414:	df 90       	pop	r13
    3416:	cf 90       	pop	r12
    3418:	08 95       	ret

0000341a <get_MOTOR_ENCODER>:
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	ce 57       	subi	r28, 0x7E	; 126
    342c:	d1 09       	sbc	r29, r1
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	e8 2e       	mov	r14, r24
    3434:	8b 01       	movw	r16, r22
    3436:	89 e2       	ldi	r24, 0x29	; 41
    3438:	ed e1       	ldi	r30, 0x1D	; 29
    343a:	fa ea       	ldi	r31, 0xAA	; 170
    343c:	de 01       	movw	r26, r28
    343e:	aa 5a       	subi	r26, 0xAA	; 170
    3440:	bf 4f       	sbci	r27, 0xFF	; 255
    3442:	01 90       	ld	r0, Z+
    3444:	0d 92       	st	X+, r0
    3446:	8a 95       	dec	r24
    3448:	e1 f7       	brne	.-8      	; 0x3442 <get_MOTOR_ENCODER+0x28>
    344a:	25 e0       	ldi	r18, 0x05	; 5
    344c:	ae 01       	movw	r20, r28
    344e:	4f 5a       	subi	r20, 0xAF	; 175
    3450:	5f 4f       	sbci	r21, 0xFF	; 255
    3452:	60 e1       	ldi	r22, 0x10	; 16
    3454:	8e 2d       	mov	r24, r14
    3456:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    345a:	f8 2e       	mov	r15, r24
    345c:	83 e6       	ldi	r24, 0x63	; 99
    345e:	f8 12       	cpse	r15, r24
    3460:	1c c0       	rjmp	.+56     	; 0x349a <get_MOTOR_ENCODER+0x80>
    3462:	81 ec       	ldi	r24, 0xC1	; 193
    3464:	8e 0d       	add	r24, r14
    3466:	1f 92       	push	r1
    3468:	8f 93       	push	r24
    346a:	ce 01       	movw	r24, r28
    346c:	8a 5a       	subi	r24, 0xAA	; 170
    346e:	9f 4f       	sbci	r25, 0xFF	; 255
    3470:	9f 93       	push	r25
    3472:	8f 93       	push	r24
    3474:	8e 01       	movw	r16, r28
    3476:	0f 5f       	subi	r16, 0xFF	; 255
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	1f 93       	push	r17
    347c:	0f 93       	push	r16
    347e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3482:	b8 01       	movw	r22, r16
    3484:	86 e3       	ldi	r24, 0x36	; 54
    3486:	91 e0       	ldi	r25, 0x01	; 1
    3488:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	30 c0       	rjmp	.+96     	; 0x34fa <get_MOTOR_ENCODER+0xe0>
    349a:	62 96       	adiw	r28, 0x12	; 18
    349c:	8f ad       	ldd	r24, Y+63	; 0x3f
    349e:	62 97       	sbiw	r28, 0x12	; 18
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	a0 e0       	ldi	r26, 0x00	; 0
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	78 2f       	mov	r23, r24
    34a8:	66 27       	eor	r22, r22
    34aa:	55 27       	eor	r21, r21
    34ac:	44 27       	eor	r20, r20
    34ae:	63 96       	adiw	r28, 0x13	; 19
    34b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    34b2:	63 97       	sbiw	r28, 0x13	; 19
    34b4:	89 2f       	mov	r24, r25
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	a0 e0       	ldi	r26, 0x00	; 0
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	dc 01       	movw	r26, r24
    34be:	99 27       	eor	r25, r25
    34c0:	88 27       	eor	r24, r24
    34c2:	84 2b       	or	r24, r20
    34c4:	95 2b       	or	r25, r21
    34c6:	a6 2b       	or	r26, r22
    34c8:	b7 2b       	or	r27, r23
    34ca:	64 96       	adiw	r28, 0x14	; 20
    34cc:	4f ad       	ldd	r20, Y+63	; 0x3f
    34ce:	64 97       	sbiw	r28, 0x14	; 20
    34d0:	50 e0       	ldi	r21, 0x00	; 0
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	76 2f       	mov	r23, r22
    34d8:	65 2f       	mov	r22, r21
    34da:	54 2f       	mov	r21, r20
    34dc:	44 27       	eor	r20, r20
    34de:	84 2b       	or	r24, r20
    34e0:	95 2b       	or	r25, r21
    34e2:	a6 2b       	or	r26, r22
    34e4:	b7 2b       	or	r27, r23
    34e6:	65 96       	adiw	r28, 0x15	; 21
    34e8:	2f ad       	ldd	r18, Y+63	; 0x3f
    34ea:	65 97       	sbiw	r28, 0x15	; 21
    34ec:	82 2b       	or	r24, r18
    34ee:	f8 01       	movw	r30, r16
    34f0:	80 83       	st	Z, r24
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	a2 83       	std	Z+2, r26	; 0x02
    34f6:	b3 83       	std	Z+3, r27	; 0x03
    34f8:	f1 2c       	mov	r15, r1
    34fa:	8f 2d       	mov	r24, r15
    34fc:	c2 58       	subi	r28, 0x82	; 130
    34fe:	df 4f       	sbci	r29, 0xFF	; 255
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	08 95       	ret

00003512 <get_MOTOR_FLOAT>:
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	c9 57       	subi	r28, 0x79	; 121
    3528:	d1 09       	sbc	r29, r1
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	e8 2e       	mov	r14, r24
    3530:	8a 01       	movw	r16, r20
    3532:	87 e2       	ldi	r24, 0x27	; 39
    3534:	e6 e4       	ldi	r30, 0x46	; 70
    3536:	fa ea       	ldi	r31, 0xAA	; 170
    3538:	de 01       	movw	r26, r28
    353a:	ad 5a       	subi	r26, 0xAD	; 173
    353c:	bf 4f       	sbci	r27, 0xFF	; 255
    353e:	01 90       	ld	r0, Z+
    3540:	0d 92       	st	X+, r0
    3542:	8a 95       	dec	r24
    3544:	e1 f7       	brne	.-8      	; 0x353e <get_MOTOR_FLOAT+0x2c>
    3546:	22 e0       	ldi	r18, 0x02	; 2
    3548:	ae 01       	movw	r20, r28
    354a:	4f 5a       	subi	r20, 0xAF	; 175
    354c:	5f 4f       	sbci	r21, 0xFF	; 255
    354e:	8e 2d       	mov	r24, r14
    3550:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    3554:	f8 2e       	mov	r15, r24
    3556:	83 e6       	ldi	r24, 0x63	; 99
    3558:	f8 12       	cpse	r15, r24
    355a:	25 c0       	rjmp	.+74     	; 0x35a6 <get_MOTOR_FLOAT+0x94>
    355c:	81 ec       	ldi	r24, 0xC1	; 193
    355e:	8e 0d       	add	r24, r14
    3560:	1f 92       	push	r1
    3562:	8f 93       	push	r24
    3564:	ce 01       	movw	r24, r28
    3566:	8d 5a       	subi	r24, 0xAD	; 173
    3568:	9f 4f       	sbci	r25, 0xFF	; 255
    356a:	9f 93       	push	r25
    356c:	8f 93       	push	r24
    356e:	fe 01       	movw	r30, r28
    3570:	31 96       	adiw	r30, 0x01	; 1
    3572:	6f 01       	movw	r12, r30
    3574:	ff 93       	push	r31
    3576:	ef 93       	push	r30
    3578:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    357c:	b6 01       	movw	r22, r12
    357e:	86 e3       	ldi	r24, 0x36	; 54
    3580:	91 e0       	ldi	r25, 0x01	; 1
    3582:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e8       	ldi	r25, 0x80	; 128
    358a:	a6 e2       	ldi	r26, 0x26	; 38
    358c:	b4 ec       	ldi	r27, 0xC4	; 196
    358e:	f8 01       	movw	r30, r16
    3590:	80 83       	st	Z, r24
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	a2 83       	std	Z+2, r26	; 0x02
    3596:	b3 83       	std	Z+3, r27	; 0x03
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	1c c0       	rjmp	.+56     	; 0x35de <get_MOTOR_FLOAT+0xcc>
    35a6:	62 96       	adiw	r28, 0x12	; 18
    35a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    35aa:	62 97       	sbiw	r28, 0x12	; 18
    35ac:	70 e0       	ldi	r23, 0x00	; 0
    35ae:	76 2f       	mov	r23, r22
    35b0:	66 27       	eor	r22, r22
    35b2:	63 96       	adiw	r28, 0x13	; 19
    35b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35b6:	63 97       	sbiw	r28, 0x13	; 19
    35b8:	68 2b       	or	r22, r24
    35ba:	07 2e       	mov	r0, r23
    35bc:	00 0c       	add	r0, r0
    35be:	88 0b       	sbc	r24, r24
    35c0:	99 0b       	sbc	r25, r25
    35c2:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e2       	ldi	r20, 0x20	; 32
    35cc:	51 e4       	ldi	r21, 0x41	; 65
    35ce:	0e 94 a5 29 	call	0x534a	; 0x534a <__divsf3>
    35d2:	f8 01       	movw	r30, r16
    35d4:	60 83       	st	Z, r22
    35d6:	71 83       	std	Z+1, r23	; 0x01
    35d8:	82 83       	std	Z+2, r24	; 0x02
    35da:	93 83       	std	Z+3, r25	; 0x03
    35dc:	f1 2c       	mov	r15, r1
    35de:	8f 2d       	mov	r24, r15
    35e0:	c7 58       	subi	r28, 0x87	; 135
    35e2:	df 4f       	sbci	r29, 0xFF	; 255
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	ff 90       	pop	r15
    35f2:	ef 90       	pop	r14
    35f4:	df 90       	pop	r13
    35f6:	cf 90       	pop	r12
    35f8:	08 95       	ret

000035fa <get_MOTOR_MAXCURRENT>:
    35fa:	cf 92       	push	r12
    35fc:	df 92       	push	r13
    35fe:	ef 92       	push	r14
    3600:	ff 92       	push	r15
    3602:	0f 93       	push	r16
    3604:	1f 93       	push	r17
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	c4 58       	subi	r28, 0x84	; 132
    3610:	d1 09       	sbc	r29, r1
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	e8 2e       	mov	r14, r24
    3618:	8b 01       	movw	r16, r22
    361a:	8c e2       	ldi	r24, 0x2C	; 44
    361c:	ed e6       	ldi	r30, 0x6D	; 109
    361e:	fa ea       	ldi	r31, 0xAA	; 170
    3620:	de 01       	movw	r26, r28
    3622:	11 96       	adiw	r26, 0x01	; 1
    3624:	01 90       	ld	r0, Z+
    3626:	0d 92       	st	X+, r0
    3628:	8a 95       	dec	r24
    362a:	e1 f7       	brne	.-8      	; 0x3624 <get_MOTOR_MAXCURRENT+0x2a>
    362c:	28 e0       	ldi	r18, 0x08	; 8
    362e:	ae 01       	movw	r20, r28
    3630:	43 58       	subi	r20, 0x83	; 131
    3632:	5f 4f       	sbci	r21, 0xFF	; 255
    3634:	67 e8       	ldi	r22, 0x87	; 135
    3636:	8e 2d       	mov	r24, r14
    3638:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    363c:	f8 2e       	mov	r15, r24
    363e:	83 e6       	ldi	r24, 0x63	; 99
    3640:	f8 12       	cpse	r15, r24
    3642:	1b c0       	rjmp	.+54     	; 0x367a <get_MOTOR_MAXCURRENT+0x80>
    3644:	81 ec       	ldi	r24, 0xC1	; 193
    3646:	8e 0d       	add	r24, r14
    3648:	1f 92       	push	r1
    364a:	8f 93       	push	r24
    364c:	ce 01       	movw	r24, r28
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	9f 93       	push	r25
    3652:	8f 93       	push	r24
    3654:	8e 01       	movw	r16, r28
    3656:	03 5d       	subi	r16, 0xD3	; 211
    3658:	1f 4f       	sbci	r17, 0xFF	; 255
    365a:	1f 93       	push	r17
    365c:	0f 93       	push	r16
    365e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3662:	b8 01       	movw	r22, r16
    3664:	86 e3       	ldi	r24, 0x36	; 54
    3666:	91 e0       	ldi	r25, 0x01	; 1
    3668:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	45 c0       	rjmp	.+138    	; 0x3704 <get_MOTOR_MAXCURRENT+0x10a>
    367a:	ee 96       	adiw	r28, 0x3e	; 62
    367c:	8f ad       	ldd	r24, Y+63	; 0x3f
    367e:	ee 97       	sbiw	r28, 0x3e	; 62
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	a0 e0       	ldi	r26, 0x00	; 0
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	f8 2e       	mov	r15, r24
    3688:	ee 24       	eor	r14, r14
    368a:	dd 24       	eor	r13, r13
    368c:	cc 24       	eor	r12, r12
    368e:	ef 96       	adiw	r28, 0x3f	; 63
    3690:	4f ad       	ldd	r20, Y+63	; 0x3f
    3692:	ef 97       	sbiw	r28, 0x3f	; 63
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	da 01       	movw	r26, r20
    369c:	99 27       	eor	r25, r25
    369e:	88 27       	eor	r24, r24
    36a0:	8c 29       	or	r24, r12
    36a2:	9d 29       	or	r25, r13
    36a4:	ae 29       	or	r26, r14
    36a6:	bf 29       	or	r27, r15
    36a8:	c1 58       	subi	r28, 0x81	; 129
    36aa:	df 4f       	sbci	r29, 0xFF	; 255
    36ac:	48 81       	ld	r20, Y
    36ae:	cf 57       	subi	r28, 0x7F	; 127
    36b0:	d0 40       	sbci	r29, 0x00	; 0
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	70 e0       	ldi	r23, 0x00	; 0
    36b8:	76 2f       	mov	r23, r22
    36ba:	65 2f       	mov	r22, r21
    36bc:	54 2f       	mov	r21, r20
    36be:	44 27       	eor	r20, r20
    36c0:	84 2b       	or	r24, r20
    36c2:	95 2b       	or	r25, r21
    36c4:	a6 2b       	or	r26, r22
    36c6:	b7 2b       	or	r27, r23
    36c8:	c0 58       	subi	r28, 0x80	; 128
    36ca:	df 4f       	sbci	r29, 0xFF	; 255
    36cc:	28 81       	ld	r18, Y
    36ce:	c0 58       	subi	r28, 0x80	; 128
    36d0:	d0 40       	sbci	r29, 0x00	; 0
    36d2:	82 2b       	or	r24, r18
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	aa 1f       	adc	r26, r26
    36da:	bb 1f       	adc	r27, r27
    36dc:	ac 01       	movw	r20, r24
    36de:	bd 01       	movw	r22, r26
    36e0:	44 0f       	add	r20, r20
    36e2:	55 1f       	adc	r21, r21
    36e4:	66 1f       	adc	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	44 0f       	add	r20, r20
    36ea:	55 1f       	adc	r21, r21
    36ec:	66 1f       	adc	r22, r22
    36ee:	77 1f       	adc	r23, r23
    36f0:	84 0f       	add	r24, r20
    36f2:	95 1f       	adc	r25, r21
    36f4:	a6 1f       	adc	r26, r22
    36f6:	b7 1f       	adc	r27, r23
    36f8:	f8 01       	movw	r30, r16
    36fa:	80 83       	st	Z, r24
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	a2 83       	std	Z+2, r26	; 0x02
    3700:	b3 83       	std	Z+3, r27	; 0x03
    3702:	f1 2c       	mov	r15, r1
    3704:	8f 2d       	mov	r24, r15
    3706:	cc 57       	subi	r28, 0x7C	; 124
    3708:	df 4f       	sbci	r29, 0xFF	; 255
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	08 95       	ret

00003720 <get_MOTOR_PID>:
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	c1 59       	subi	r28, 0x91	; 145
    3732:	d1 09       	sbc	r29, r1
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	f8 2e       	mov	r15, r24
    373a:	8b 01       	movw	r16, r22
    373c:	85 e2       	ldi	r24, 0x25	; 37
    373e:	e9 e9       	ldi	r30, 0x99	; 153
    3740:	fa ea       	ldi	r31, 0xAA	; 170
    3742:	de 01       	movw	r26, r28
    3744:	11 96       	adiw	r26, 0x01	; 1
    3746:	01 90       	ld	r0, Z+
    3748:	0d 92       	st	X+, r0
    374a:	8a 95       	dec	r24
    374c:	e1 f7       	brne	.-8      	; 0x3746 <get_MOTOR_PID+0x26>
    374e:	2c e1       	ldi	r18, 0x1C	; 28
    3750:	ae 01       	movw	r20, r28
    3752:	4a 58       	subi	r20, 0x8A	; 138
    3754:	5f 4f       	sbci	r21, 0xFF	; 255
    3756:	6f e3       	ldi	r22, 0x3F	; 63
    3758:	8f 2d       	mov	r24, r15
    375a:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    375e:	e8 2e       	mov	r14, r24
    3760:	83 e6       	ldi	r24, 0x63	; 99
    3762:	e8 12       	cpse	r14, r24
    3764:	1b c0       	rjmp	.+54     	; 0x379c <get_MOTOR_PID+0x7c>
    3766:	81 ec       	ldi	r24, 0xC1	; 193
    3768:	8f 0d       	add	r24, r15
    376a:	1f 92       	push	r1
    376c:	8f 93       	push	r24
    376e:	ce 01       	movw	r24, r28
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	9f 93       	push	r25
    3774:	8f 93       	push	r24
    3776:	8e 01       	movw	r16, r28
    3778:	0a 5d       	subi	r16, 0xDA	; 218
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	1f 93       	push	r17
    377e:	0f 93       	push	r16
    3780:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3784:	b8 01       	movw	r22, r16
    3786:	86 e3       	ldi	r24, 0x36	; 54
    3788:	91 e0       	ldi	r25, 0x01	; 1
    378a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	e5 c1       	rjmp	.+970    	; 0x3b66 <get_MOTOR_PID+0x446>
    379c:	e7 96       	adiw	r28, 0x37	; 55
    379e:	4f ad       	ldd	r20, Y+63	; 0x3f
    37a0:	e7 97       	sbiw	r28, 0x37	; 55
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	74 2f       	mov	r23, r20
    37aa:	66 27       	eor	r22, r22
    37ac:	55 27       	eor	r21, r21
    37ae:	44 27       	eor	r20, r20
    37b0:	e8 96       	adiw	r28, 0x38	; 56
    37b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    37b4:	e8 97       	sbiw	r28, 0x38	; 56
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	a0 e0       	ldi	r26, 0x00	; 0
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	dc 01       	movw	r26, r24
    37be:	99 27       	eor	r25, r25
    37c0:	88 27       	eor	r24, r24
    37c2:	48 2b       	or	r20, r24
    37c4:	59 2b       	or	r21, r25
    37c6:	6a 2b       	or	r22, r26
    37c8:	7b 2b       	or	r23, r27
    37ca:	e9 96       	adiw	r28, 0x39	; 57
    37cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    37ce:	e9 97       	sbiw	r28, 0x39	; 57
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	a0 e0       	ldi	r26, 0x00	; 0
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	ba 2f       	mov	r27, r26
    37d8:	a9 2f       	mov	r26, r25
    37da:	98 2f       	mov	r25, r24
    37dc:	88 27       	eor	r24, r24
    37de:	84 2b       	or	r24, r20
    37e0:	95 2b       	or	r25, r21
    37e2:	a6 2b       	or	r26, r22
    37e4:	b7 2b       	or	r27, r23
    37e6:	ea 96       	adiw	r28, 0x3a	; 58
    37e8:	2f ad       	ldd	r18, Y+63	; 0x3f
    37ea:	ea 97       	sbiw	r28, 0x3a	; 58
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	62 2b       	or	r22, r18
    37f2:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5a e3       	ldi	r21, 0x3A	; 58
    37fe:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    3802:	f8 01       	movw	r30, r16
    3804:	60 83       	st	Z, r22
    3806:	71 83       	std	Z+1, r23	; 0x01
    3808:	82 83       	std	Z+2, r24	; 0x02
    380a:	93 83       	std	Z+3, r25	; 0x03
    380c:	eb 96       	adiw	r28, 0x3b	; 59
    380e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3810:	eb 97       	sbiw	r28, 0x3b	; 59
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	74 2f       	mov	r23, r20
    381a:	66 27       	eor	r22, r22
    381c:	55 27       	eor	r21, r21
    381e:	44 27       	eor	r20, r20
    3820:	ec 96       	adiw	r28, 0x3c	; 60
    3822:	8f ad       	ldd	r24, Y+63	; 0x3f
    3824:	ec 97       	sbiw	r28, 0x3c	; 60
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	a0 e0       	ldi	r26, 0x00	; 0
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	dc 01       	movw	r26, r24
    382e:	99 27       	eor	r25, r25
    3830:	88 27       	eor	r24, r24
    3832:	48 2b       	or	r20, r24
    3834:	59 2b       	or	r21, r25
    3836:	6a 2b       	or	r22, r26
    3838:	7b 2b       	or	r23, r27
    383a:	ed 96       	adiw	r28, 0x3d	; 61
    383c:	8f ad       	ldd	r24, Y+63	; 0x3f
    383e:	ed 97       	sbiw	r28, 0x3d	; 61
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	a0 e0       	ldi	r26, 0x00	; 0
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	ba 2f       	mov	r27, r26
    3848:	a9 2f       	mov	r26, r25
    384a:	98 2f       	mov	r25, r24
    384c:	88 27       	eor	r24, r24
    384e:	84 2b       	or	r24, r20
    3850:	95 2b       	or	r25, r21
    3852:	a6 2b       	or	r26, r22
    3854:	b7 2b       	or	r27, r23
    3856:	ee 96       	adiw	r28, 0x3e	; 62
    3858:	2f ad       	ldd	r18, Y+63	; 0x3f
    385a:	ee 97       	sbiw	r28, 0x3e	; 62
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	62 2b       	or	r22, r18
    3862:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e8       	ldi	r20, 0x80	; 128
    386c:	5a e3       	ldi	r21, 0x3A	; 58
    386e:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    3872:	f8 01       	movw	r30, r16
    3874:	64 83       	std	Z+4, r22	; 0x04
    3876:	75 83       	std	Z+5, r23	; 0x05
    3878:	86 83       	std	Z+6, r24	; 0x06
    387a:	97 83       	std	Z+7, r25	; 0x07
    387c:	ef 96       	adiw	r28, 0x3f	; 63
    387e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3880:	ef 97       	sbiw	r28, 0x3f	; 63
    3882:	50 e0       	ldi	r21, 0x00	; 0
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	74 2f       	mov	r23, r20
    388a:	66 27       	eor	r22, r22
    388c:	55 27       	eor	r21, r21
    388e:	44 27       	eor	r20, r20
    3890:	c1 58       	subi	r28, 0x81	; 129
    3892:	df 4f       	sbci	r29, 0xFF	; 255
    3894:	88 81       	ld	r24, Y
    3896:	cf 57       	subi	r28, 0x7F	; 127
    3898:	d0 40       	sbci	r29, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a0 e0       	ldi	r26, 0x00	; 0
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	dc 01       	movw	r26, r24
    38a2:	99 27       	eor	r25, r25
    38a4:	88 27       	eor	r24, r24
    38a6:	48 2b       	or	r20, r24
    38a8:	59 2b       	or	r21, r25
    38aa:	6a 2b       	or	r22, r26
    38ac:	7b 2b       	or	r23, r27
    38ae:	c0 58       	subi	r28, 0x80	; 128
    38b0:	df 4f       	sbci	r29, 0xFF	; 255
    38b2:	88 81       	ld	r24, Y
    38b4:	c0 58       	subi	r28, 0x80	; 128
    38b6:	d0 40       	sbci	r29, 0x00	; 0
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	a0 e0       	ldi	r26, 0x00	; 0
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	ba 2f       	mov	r27, r26
    38c0:	a9 2f       	mov	r26, r25
    38c2:	98 2f       	mov	r25, r24
    38c4:	88 27       	eor	r24, r24
    38c6:	84 2b       	or	r24, r20
    38c8:	95 2b       	or	r25, r21
    38ca:	a6 2b       	or	r26, r22
    38cc:	b7 2b       	or	r27, r23
    38ce:	cf 57       	subi	r28, 0x7F	; 127
    38d0:	df 4f       	sbci	r29, 0xFF	; 255
    38d2:	28 81       	ld	r18, Y
    38d4:	c1 58       	subi	r28, 0x81	; 129
    38d6:	d0 40       	sbci	r29, 0x00	; 0
    38d8:	bc 01       	movw	r22, r24
    38da:	cd 01       	movw	r24, r26
    38dc:	62 2b       	or	r22, r18
    38de:	0e 94 19 2a 	call	0x5432	; 0x5432 <__floatsisf>
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5a e3       	ldi	r21, 0x3A	; 58
    38ea:	0e 94 ce 2a 	call	0x559c	; 0x559c <__mulsf3>
    38ee:	f8 01       	movw	r30, r16
    38f0:	60 87       	std	Z+8, r22	; 0x08
    38f2:	71 87       	std	Z+9, r23	; 0x09
    38f4:	82 87       	std	Z+10, r24	; 0x0a
    38f6:	93 87       	std	Z+11, r25	; 0x0b
    38f8:	ce 57       	subi	r28, 0x7E	; 126
    38fa:	df 4f       	sbci	r29, 0xFF	; 255
    38fc:	88 81       	ld	r24, Y
    38fe:	c2 58       	subi	r28, 0x82	; 130
    3900:	d0 40       	sbci	r29, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	78 2f       	mov	r23, r24
    390a:	66 27       	eor	r22, r22
    390c:	55 27       	eor	r21, r21
    390e:	44 27       	eor	r20, r20
    3910:	cd 57       	subi	r28, 0x7D	; 125
    3912:	df 4f       	sbci	r29, 0xFF	; 255
    3914:	98 81       	ld	r25, Y
    3916:	c3 58       	subi	r28, 0x83	; 131
    3918:	d0 40       	sbci	r29, 0x00	; 0
    391a:	89 2f       	mov	r24, r25
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	a0 e0       	ldi	r26, 0x00	; 0
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	dc 01       	movw	r26, r24
    3924:	99 27       	eor	r25, r25
    3926:	88 27       	eor	r24, r24
    3928:	84 2b       	or	r24, r20
    392a:	95 2b       	or	r25, r21
    392c:	a6 2b       	or	r26, r22
    392e:	b7 2b       	or	r27, r23
    3930:	cc 57       	subi	r28, 0x7C	; 124
    3932:	df 4f       	sbci	r29, 0xFF	; 255
    3934:	48 81       	ld	r20, Y
    3936:	c4 58       	subi	r28, 0x84	; 132
    3938:	d0 40       	sbci	r29, 0x00	; 0
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	76 2f       	mov	r23, r22
    3942:	65 2f       	mov	r22, r21
    3944:	54 2f       	mov	r21, r20
    3946:	44 27       	eor	r20, r20
    3948:	84 2b       	or	r24, r20
    394a:	95 2b       	or	r25, r21
    394c:	a6 2b       	or	r26, r22
    394e:	b7 2b       	or	r27, r23
    3950:	cb 57       	subi	r28, 0x7B	; 123
    3952:	df 4f       	sbci	r29, 0xFF	; 255
    3954:	28 81       	ld	r18, Y
    3956:	c5 58       	subi	r28, 0x85	; 133
    3958:	d0 40       	sbci	r29, 0x00	; 0
    395a:	82 2b       	or	r24, r18
    395c:	84 87       	std	Z+12, r24	; 0x0c
    395e:	95 87       	std	Z+13, r25	; 0x0d
    3960:	a6 87       	std	Z+14, r26	; 0x0e
    3962:	b7 87       	std	Z+15, r27	; 0x0f
    3964:	ca 57       	subi	r28, 0x7A	; 122
    3966:	df 4f       	sbci	r29, 0xFF	; 255
    3968:	88 81       	ld	r24, Y
    396a:	c6 58       	subi	r28, 0x86	; 134
    396c:	d0 40       	sbci	r29, 0x00	; 0
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	a0 e0       	ldi	r26, 0x00	; 0
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	78 2f       	mov	r23, r24
    3976:	66 27       	eor	r22, r22
    3978:	55 27       	eor	r21, r21
    397a:	44 27       	eor	r20, r20
    397c:	c9 57       	subi	r28, 0x79	; 121
    397e:	df 4f       	sbci	r29, 0xFF	; 255
    3980:	98 81       	ld	r25, Y
    3982:	c7 58       	subi	r28, 0x87	; 135
    3984:	d0 40       	sbci	r29, 0x00	; 0
    3986:	89 2f       	mov	r24, r25
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	a0 e0       	ldi	r26, 0x00	; 0
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	dc 01       	movw	r26, r24
    3990:	99 27       	eor	r25, r25
    3992:	88 27       	eor	r24, r24
    3994:	84 2b       	or	r24, r20
    3996:	95 2b       	or	r25, r21
    3998:	a6 2b       	or	r26, r22
    399a:	b7 2b       	or	r27, r23
    399c:	c8 57       	subi	r28, 0x78	; 120
    399e:	df 4f       	sbci	r29, 0xFF	; 255
    39a0:	48 81       	ld	r20, Y
    39a2:	c8 58       	subi	r28, 0x88	; 136
    39a4:	d0 40       	sbci	r29, 0x00	; 0
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	76 2f       	mov	r23, r22
    39ae:	65 2f       	mov	r22, r21
    39b0:	54 2f       	mov	r21, r20
    39b2:	44 27       	eor	r20, r20
    39b4:	84 2b       	or	r24, r20
    39b6:	95 2b       	or	r25, r21
    39b8:	a6 2b       	or	r26, r22
    39ba:	b7 2b       	or	r27, r23
    39bc:	c7 57       	subi	r28, 0x77	; 119
    39be:	df 4f       	sbci	r29, 0xFF	; 255
    39c0:	28 81       	ld	r18, Y
    39c2:	c9 58       	subi	r28, 0x89	; 137
    39c4:	d0 40       	sbci	r29, 0x00	; 0
    39c6:	82 2b       	or	r24, r18
    39c8:	80 8b       	std	Z+16, r24	; 0x10
    39ca:	91 8b       	std	Z+17, r25	; 0x11
    39cc:	a2 8b       	std	Z+18, r26	; 0x12
    39ce:	b3 8b       	std	Z+19, r27	; 0x13
    39d0:	c6 57       	subi	r28, 0x76	; 118
    39d2:	df 4f       	sbci	r29, 0xFF	; 255
    39d4:	88 81       	ld	r24, Y
    39d6:	ca 58       	subi	r28, 0x8A	; 138
    39d8:	d0 40       	sbci	r29, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e0       	ldi	r26, 0x00	; 0
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	78 2f       	mov	r23, r24
    39e2:	66 27       	eor	r22, r22
    39e4:	55 27       	eor	r21, r21
    39e6:	44 27       	eor	r20, r20
    39e8:	c5 57       	subi	r28, 0x75	; 117
    39ea:	df 4f       	sbci	r29, 0xFF	; 255
    39ec:	98 81       	ld	r25, Y
    39ee:	cb 58       	subi	r28, 0x8B	; 139
    39f0:	d0 40       	sbci	r29, 0x00	; 0
    39f2:	89 2f       	mov	r24, r25
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	a0 e0       	ldi	r26, 0x00	; 0
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	dc 01       	movw	r26, r24
    39fc:	99 27       	eor	r25, r25
    39fe:	88 27       	eor	r24, r24
    3a00:	84 2b       	or	r24, r20
    3a02:	95 2b       	or	r25, r21
    3a04:	a6 2b       	or	r26, r22
    3a06:	b7 2b       	or	r27, r23
    3a08:	c4 57       	subi	r28, 0x74	; 116
    3a0a:	df 4f       	sbci	r29, 0xFF	; 255
    3a0c:	48 81       	ld	r20, Y
    3a0e:	cc 58       	subi	r28, 0x8C	; 140
    3a10:	d0 40       	sbci	r29, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	76 2f       	mov	r23, r22
    3a1a:	65 2f       	mov	r22, r21
    3a1c:	54 2f       	mov	r21, r20
    3a1e:	44 27       	eor	r20, r20
    3a20:	84 2b       	or	r24, r20
    3a22:	95 2b       	or	r25, r21
    3a24:	a6 2b       	or	r26, r22
    3a26:	b7 2b       	or	r27, r23
    3a28:	c3 57       	subi	r28, 0x73	; 115
    3a2a:	df 4f       	sbci	r29, 0xFF	; 255
    3a2c:	28 81       	ld	r18, Y
    3a2e:	cd 58       	subi	r28, 0x8D	; 141
    3a30:	d0 40       	sbci	r29, 0x00	; 0
    3a32:	82 2b       	or	r24, r18
    3a34:	84 8b       	std	Z+20, r24	; 0x14
    3a36:	95 8b       	std	Z+21, r25	; 0x15
    3a38:	a6 8b       	std	Z+22, r26	; 0x16
    3a3a:	b7 8b       	std	Z+23, r27	; 0x17
    3a3c:	c2 57       	subi	r28, 0x72	; 114
    3a3e:	df 4f       	sbci	r29, 0xFF	; 255
    3a40:	88 81       	ld	r24, Y
    3a42:	ce 58       	subi	r28, 0x8E	; 142
    3a44:	d0 40       	sbci	r29, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a0 e0       	ldi	r26, 0x00	; 0
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	78 2f       	mov	r23, r24
    3a4e:	66 27       	eor	r22, r22
    3a50:	55 27       	eor	r21, r21
    3a52:	44 27       	eor	r20, r20
    3a54:	c1 57       	subi	r28, 0x71	; 113
    3a56:	df 4f       	sbci	r29, 0xFF	; 255
    3a58:	98 81       	ld	r25, Y
    3a5a:	cf 58       	subi	r28, 0x8F	; 143
    3a5c:	d0 40       	sbci	r29, 0x00	; 0
    3a5e:	89 2f       	mov	r24, r25
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	dc 01       	movw	r26, r24
    3a68:	99 27       	eor	r25, r25
    3a6a:	88 27       	eor	r24, r24
    3a6c:	84 2b       	or	r24, r20
    3a6e:	95 2b       	or	r25, r21
    3a70:	a6 2b       	or	r26, r22
    3a72:	b7 2b       	or	r27, r23
    3a74:	c0 57       	subi	r28, 0x70	; 112
    3a76:	df 4f       	sbci	r29, 0xFF	; 255
    3a78:	48 81       	ld	r20, Y
    3a7a:	c0 59       	subi	r28, 0x90	; 144
    3a7c:	d0 40       	sbci	r29, 0x00	; 0
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	76 2f       	mov	r23, r22
    3a86:	65 2f       	mov	r22, r21
    3a88:	54 2f       	mov	r21, r20
    3a8a:	44 27       	eor	r20, r20
    3a8c:	84 2b       	or	r24, r20
    3a8e:	95 2b       	or	r25, r21
    3a90:	a6 2b       	or	r26, r22
    3a92:	b7 2b       	or	r27, r23
    3a94:	cf 56       	subi	r28, 0x6F	; 111
    3a96:	df 4f       	sbci	r29, 0xFF	; 255
    3a98:	28 81       	ld	r18, Y
    3a9a:	c1 59       	subi	r28, 0x91	; 145
    3a9c:	d0 40       	sbci	r29, 0x00	; 0
    3a9e:	82 2b       	or	r24, r18
    3aa0:	80 8f       	std	Z+24, r24	; 0x18
    3aa2:	91 8f       	std	Z+25, r25	; 0x19
    3aa4:	a2 8f       	std	Z+26, r26	; 0x1a
    3aa6:	b3 8f       	std	Z+27, r27	; 0x1b
    3aa8:	20 e1       	ldi	r18, 0x10	; 16
    3aaa:	ae 01       	movw	r20, r28
    3aac:	4a 58       	subi	r20, 0x8A	; 138
    3aae:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab0:	67 e3       	ldi	r22, 0x37	; 55
    3ab2:	8f 2d       	mov	r24, r15
    3ab4:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    3ab8:	e8 2e       	mov	r14, r24
    3aba:	f3 e6       	ldi	r31, 0x63	; 99
    3abc:	8f 13       	cpse	r24, r31
    3abe:	1b c0       	rjmp	.+54     	; 0x3af6 <get_MOTOR_PID+0x3d6>
    3ac0:	81 ec       	ldi	r24, 0xC1	; 193
    3ac2:	8f 0d       	add	r24, r15
    3ac4:	1f 92       	push	r1
    3ac6:	8f 93       	push	r24
    3ac8:	ce 01       	movw	r24, r28
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	9f 93       	push	r25
    3ace:	8f 93       	push	r24
    3ad0:	8e 01       	movw	r16, r28
    3ad2:	0a 5d       	subi	r16, 0xDA	; 218
    3ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad6:	1f 93       	push	r17
    3ad8:	0f 93       	push	r16
    3ada:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3ade:	b8 01       	movw	r22, r16
    3ae0:	86 e3       	ldi	r24, 0x36	; 54
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	38 c0       	rjmp	.+112    	; 0x3b66 <get_MOTOR_PID+0x446>
    3af6:	ce 57       	subi	r28, 0x7E	; 126
    3af8:	df 4f       	sbci	r29, 0xFF	; 255
    3afa:	88 81       	ld	r24, Y
    3afc:	c2 58       	subi	r28, 0x82	; 130
    3afe:	d0 40       	sbci	r29, 0x00	; 0
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 e0       	ldi	r26, 0x00	; 0
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	78 2f       	mov	r23, r24
    3b08:	66 27       	eor	r22, r22
    3b0a:	55 27       	eor	r21, r21
    3b0c:	44 27       	eor	r20, r20
    3b0e:	cd 57       	subi	r28, 0x7D	; 125
    3b10:	df 4f       	sbci	r29, 0xFF	; 255
    3b12:	98 81       	ld	r25, Y
    3b14:	c3 58       	subi	r28, 0x83	; 131
    3b16:	d0 40       	sbci	r29, 0x00	; 0
    3b18:	89 2f       	mov	r24, r25
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	dc 01       	movw	r26, r24
    3b22:	99 27       	eor	r25, r25
    3b24:	88 27       	eor	r24, r24
    3b26:	84 2b       	or	r24, r20
    3b28:	95 2b       	or	r25, r21
    3b2a:	a6 2b       	or	r26, r22
    3b2c:	b7 2b       	or	r27, r23
    3b2e:	cc 57       	subi	r28, 0x7C	; 124
    3b30:	df 4f       	sbci	r29, 0xFF	; 255
    3b32:	48 81       	ld	r20, Y
    3b34:	c4 58       	subi	r28, 0x84	; 132
    3b36:	d0 40       	sbci	r29, 0x00	; 0
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	76 2f       	mov	r23, r22
    3b40:	65 2f       	mov	r22, r21
    3b42:	54 2f       	mov	r21, r20
    3b44:	44 27       	eor	r20, r20
    3b46:	84 2b       	or	r24, r20
    3b48:	95 2b       	or	r25, r21
    3b4a:	a6 2b       	or	r26, r22
    3b4c:	b7 2b       	or	r27, r23
    3b4e:	cb 57       	subi	r28, 0x7B	; 123
    3b50:	df 4f       	sbci	r29, 0xFF	; 255
    3b52:	28 81       	ld	r18, Y
    3b54:	c5 58       	subi	r28, 0x85	; 133
    3b56:	d0 40       	sbci	r29, 0x00	; 0
    3b58:	82 2b       	or	r24, r18
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	84 8f       	std	Z+28, r24	; 0x1c
    3b5e:	95 8f       	std	Z+29, r25	; 0x1d
    3b60:	a6 8f       	std	Z+30, r26	; 0x1e
    3b62:	b7 8f       	std	Z+31, r27	; 0x1f
    3b64:	e1 2c       	mov	r14, r1
    3b66:	8e 2d       	mov	r24, r14
    3b68:	cf 56       	subi	r28, 0x6F	; 111
    3b6a:	df 4f       	sbci	r29, 0xFF	; 255
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	ff 90       	pop	r15
    3b7a:	ef 90       	pop	r14
    3b7c:	08 95       	ret

00003b7e <get_MOTOR_S4MODE>:
    3b7e:	cf 92       	push	r12
    3b80:	df 92       	push	r13
    3b82:	ef 92       	push	r14
    3b84:	ff 92       	push	r15
    3b86:	0f 93       	push	r16
    3b88:	1f 93       	push	r17
    3b8a:	cf 93       	push	r28
    3b8c:	df 93       	push	r29
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	c7 57       	subi	r28, 0x77	; 119
    3b94:	d1 09       	sbc	r29, r1
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	08 2f       	mov	r16, r24
    3b9c:	7b 01       	movw	r14, r22
    3b9e:	84 e2       	ldi	r24, 0x24	; 36
    3ba0:	ee eb       	ldi	r30, 0xBE	; 190
    3ba2:	fa ea       	ldi	r31, 0xAA	; 170
    3ba4:	de 01       	movw	r26, r28
    3ba6:	11 96       	adiw	r26, 0x01	; 1
    3ba8:	01 90       	ld	r0, Z+
    3baa:	0d 92       	st	X+, r0
    3bac:	8a 95       	dec	r24
    3bae:	e1 f7       	brne	.-8      	; 0x3ba8 <get_MOTOR_S4MODE+0x2a>
    3bb0:	23 e0       	ldi	r18, 0x03	; 3
    3bb2:	ae 01       	movw	r20, r28
    3bb4:	4b 58       	subi	r20, 0x8B	; 139
    3bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bb8:	6b e4       	ldi	r22, 0x4B	; 75
    3bba:	80 2f       	mov	r24, r16
    3bbc:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    3bc0:	18 2f       	mov	r17, r24
    3bc2:	83 36       	cpi	r24, 0x63	; 99
    3bc4:	f1 f4       	brne	.+60     	; 0x3c02 <get_MOTOR_S4MODE+0x84>
    3bc6:	0f 53       	subi	r16, 0x3F	; 63
    3bc8:	1f 92       	push	r1
    3bca:	0f 93       	push	r16
    3bcc:	ce 01       	movw	r24, r28
    3bce:	01 96       	adiw	r24, 0x01	; 1
    3bd0:	9f 93       	push	r25
    3bd2:	8f 93       	push	r24
    3bd4:	6e 01       	movw	r12, r28
    3bd6:	85 e2       	ldi	r24, 0x25	; 37
    3bd8:	c8 0e       	add	r12, r24
    3bda:	d1 1c       	adc	r13, r1
    3bdc:	df 92       	push	r13
    3bde:	cf 92       	push	r12
    3be0:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3be4:	b6 01       	movw	r22, r12
    3be6:	86 e3       	ldi	r24, 0x36	; 54
    3be8:	91 e0       	ldi	r25, 0x01	; 1
    3bea:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3bee:	8f ef       	ldi	r24, 0xFF	; 255
    3bf0:	f7 01       	movw	r30, r14
    3bf2:	80 83       	st	Z, r24
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	06 c0       	rjmp	.+12     	; 0x3c0e <get_MOTOR_S4MODE+0x90>
    3c02:	e7 96       	adiw	r28, 0x37	; 55
    3c04:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c06:	e7 97       	sbiw	r28, 0x37	; 55
    3c08:	f7 01       	movw	r30, r14
    3c0a:	80 83       	st	Z, r24
    3c0c:	10 e0       	ldi	r17, 0x00	; 0
    3c0e:	81 2f       	mov	r24, r17
    3c10:	c9 58       	subi	r28, 0x89	; 137
    3c12:	df 4f       	sbci	r29, 0xFF	; 255
    3c14:	cd bf       	out	0x3d, r28	; 61
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	ff 90       	pop	r15
    3c22:	ef 90       	pop	r14
    3c24:	df 90       	pop	r13
    3c26:	cf 90       	pop	r12
    3c28:	08 95       	ret

00003c2a <get_MOTOR_SPEED>:
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	c1 58       	subi	r28, 0x81	; 129
    3c3c:	d1 09       	sbc	r29, r1
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	de bf       	out	0x3e, r29	; 62
    3c42:	e8 2e       	mov	r14, r24
    3c44:	8b 01       	movw	r16, r22
    3c46:	8c e2       	ldi	r24, 0x2C	; 44
    3c48:	e2 ee       	ldi	r30, 0xE2	; 226
    3c4a:	fa ea       	ldi	r31, 0xAA	; 170
    3c4c:	de 01       	movw	r26, r28
    3c4e:	aa 5a       	subi	r26, 0xAA	; 170
    3c50:	bf 4f       	sbci	r27, 0xFF	; 255
    3c52:	01 90       	ld	r0, Z+
    3c54:	0d 92       	st	X+, r0
    3c56:	8a 95       	dec	r24
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <get_MOTOR_SPEED+0x28>
    3c5a:	25 e0       	ldi	r18, 0x05	; 5
    3c5c:	ae 01       	movw	r20, r28
    3c5e:	4f 5a       	subi	r20, 0xAF	; 175
    3c60:	5f 4f       	sbci	r21, 0xFF	; 255
    3c62:	62 e1       	ldi	r22, 0x12	; 18
    3c64:	8e 2d       	mov	r24, r14
    3c66:	0e 94 c5 18 	call	0x318a	; 0x318a <get_MOTOR>
    3c6a:	f8 2e       	mov	r15, r24
    3c6c:	83 e6       	ldi	r24, 0x63	; 99
    3c6e:	f8 12       	cpse	r15, r24
    3c70:	1c c0       	rjmp	.+56     	; 0x3caa <get_MOTOR_SPEED+0x80>
    3c72:	81 ec       	ldi	r24, 0xC1	; 193
    3c74:	8e 0d       	add	r24, r14
    3c76:	1f 92       	push	r1
    3c78:	8f 93       	push	r24
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	8a 5a       	subi	r24, 0xAA	; 170
    3c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c80:	9f 93       	push	r25
    3c82:	8f 93       	push	r24
    3c84:	8e 01       	movw	r16, r28
    3c86:	0f 5f       	subi	r16, 0xFF	; 255
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8a:	1f 93       	push	r17
    3c8c:	0f 93       	push	r16
    3c8e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3c92:	b8 01       	movw	r22, r16
    3c94:	86 e3       	ldi	r24, 0x36	; 54
    3c96:	91 e0       	ldi	r25, 0x01	; 1
    3c98:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	30 c0       	rjmp	.+96     	; 0x3d0a <get_MOTOR_SPEED+0xe0>
    3caa:	62 96       	adiw	r28, 0x12	; 18
    3cac:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cae:	62 97       	sbiw	r28, 0x12	; 18
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	a0 e0       	ldi	r26, 0x00	; 0
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	78 2f       	mov	r23, r24
    3cb8:	66 27       	eor	r22, r22
    3cba:	55 27       	eor	r21, r21
    3cbc:	44 27       	eor	r20, r20
    3cbe:	63 96       	adiw	r28, 0x13	; 19
    3cc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cc2:	63 97       	sbiw	r28, 0x13	; 19
    3cc4:	89 2f       	mov	r24, r25
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	a0 e0       	ldi	r26, 0x00	; 0
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	dc 01       	movw	r26, r24
    3cce:	99 27       	eor	r25, r25
    3cd0:	88 27       	eor	r24, r24
    3cd2:	84 2b       	or	r24, r20
    3cd4:	95 2b       	or	r25, r21
    3cd6:	a6 2b       	or	r26, r22
    3cd8:	b7 2b       	or	r27, r23
    3cda:	64 96       	adiw	r28, 0x14	; 20
    3cdc:	4f ad       	ldd	r20, Y+63	; 0x3f
    3cde:	64 97       	sbiw	r28, 0x14	; 20
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	76 2f       	mov	r23, r22
    3ce8:	65 2f       	mov	r22, r21
    3cea:	54 2f       	mov	r21, r20
    3cec:	44 27       	eor	r20, r20
    3cee:	84 2b       	or	r24, r20
    3cf0:	95 2b       	or	r25, r21
    3cf2:	a6 2b       	or	r26, r22
    3cf4:	b7 2b       	or	r27, r23
    3cf6:	65 96       	adiw	r28, 0x15	; 21
    3cf8:	2f ad       	ldd	r18, Y+63	; 0x3f
    3cfa:	65 97       	sbiw	r28, 0x15	; 21
    3cfc:	82 2b       	or	r24, r18
    3cfe:	f8 01       	movw	r30, r16
    3d00:	80 83       	st	Z, r24
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	a2 83       	std	Z+2, r26	; 0x02
    3d06:	b3 83       	std	Z+3, r27	; 0x03
    3d08:	f1 2c       	mov	r15, r1
    3d0a:	8f 2d       	mov	r24, r15
    3d0c:	cf 57       	subi	r28, 0x7F	; 127
    3d0e:	df 4f       	sbci	r29, 0xFF	; 255
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	08 95       	ret

00003d22 <motorsMoving>:
    3d22:	ef 92       	push	r14
    3d24:	ff 92       	push	r15
    3d26:	0f 93       	push	r16
    3d28:	1f 93       	push	r17
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	ce 57       	subi	r28, 0x7E	; 126
    3d34:	d1 09       	sbc	r29, r1
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	8a e2       	ldi	r24, 0x2A	; 42
    3d3c:	e7 e3       	ldi	r30, 0x37	; 55
    3d3e:	fb ea       	ldi	r31, 0xAB	; 171
    3d40:	de 01       	movw	r26, r28
    3d42:	11 96       	adiw	r26, 0x01	; 1
    3d44:	01 90       	ld	r0, Z+
    3d46:	0d 92       	st	X+, r0
    3d48:	8a 95       	dec	r24
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <motorsMoving+0x22>
    3d4c:	ef 96       	adiw	r28, 0x3f	; 63
    3d4e:	1c ae       	std	Y+60, r1	; 0x3c
    3d50:	1d ae       	std	Y+61, r1	; 0x3d
    3d52:	1e ae       	std	Y+62, r1	; 0x3e
    3d54:	1f ae       	std	Y+63, r1	; 0x3f
    3d56:	ef 97       	sbiw	r28, 0x3f	; 63
    3d58:	00 e0       	ldi	r16, 0x00	; 0
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	31 c0       	rjmp	.+98     	; 0x3dc0 <motorsMoving+0x9e>
    3d5e:	be 01       	movw	r22, r28
    3d60:	65 58       	subi	r22, 0x85	; 133
    3d62:	7f 4f       	sbci	r23, 0xFF	; 255
    3d64:	80 e8       	ldi	r24, 0x80	; 128
    3d66:	81 0f       	add	r24, r17
    3d68:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <get_MOTOR_SPEED>
    3d6c:	83 36       	cpi	r24, 0x63	; 99
    3d6e:	e1 f4       	brne	.+56     	; 0x3da8 <motorsMoving+0x86>
    3d70:	1f 92       	push	r1
    3d72:	81 e4       	ldi	r24, 0x41	; 65
    3d74:	81 0f       	add	r24, r17
    3d76:	8f 93       	push	r24
    3d78:	ce 01       	movw	r24, r28
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	9f 93       	push	r25
    3d7e:	8f 93       	push	r24
    3d80:	7e 01       	movw	r14, r28
    3d82:	8b e2       	ldi	r24, 0x2B	; 43
    3d84:	e8 0e       	add	r14, r24
    3d86:	f1 1c       	adc	r15, r1
    3d88:	ff 92       	push	r15
    3d8a:	ef 92       	push	r14
    3d8c:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3d90:	b7 01       	movw	r22, r14
    3d92:	86 e3       	ldi	r24, 0x36	; 54
    3d94:	91 e0       	ldi	r25, 0x01	; 1
    3d96:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	0b c0       	rjmp	.+22     	; 0x3dbe <motorsMoving+0x9c>
    3da8:	ef 96       	adiw	r28, 0x3f	; 63
    3daa:	8c ad       	ldd	r24, Y+60	; 0x3c
    3dac:	9d ad       	ldd	r25, Y+61	; 0x3d
    3dae:	ae ad       	ldd	r26, Y+62	; 0x3e
    3db0:	bf ad       	ldd	r27, Y+63	; 0x3f
    3db2:	ef 97       	sbiw	r28, 0x3f	; 63
    3db4:	89 2b       	or	r24, r25
    3db6:	8a 2b       	or	r24, r26
    3db8:	8b 2b       	or	r24, r27
    3dba:	09 f0       	breq	.+2      	; 0x3dbe <motorsMoving+0x9c>
    3dbc:	0f 5f       	subi	r16, 0xFF	; 255
    3dbe:	1f 5f       	subi	r17, 0xFF	; 255
    3dc0:	11 23       	and	r17, r17
    3dc2:	69 f2       	breq	.-102    	; 0x3d5e <motorsMoving+0x3c>
    3dc4:	00 23       	and	r16, r16
    3dc6:	11 f0       	breq	.+4      	; 0x3dcc <motorsMoving+0xaa>
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <motorsMoving+0xac>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	c2 58       	subi	r28, 0x82	; 130
    3dd0:	df 4f       	sbci	r29, 0xFF	; 255
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	1f 91       	pop	r17
    3ddc:	0f 91       	pop	r16
    3dde:	ff 90       	pop	r15
    3de0:	ef 90       	pop	r14
    3de2:	08 95       	ret

00003de4 <put_FRAM_ENCODERS>:
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	a2 97       	sbiw	r28, 0x22	; 34
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	86 e0       	ldi	r24, 0x06	; 6
    3df6:	ec ea       	ldi	r30, 0xAC	; 172
    3df8:	f3 ea       	ldi	r31, 0xA3	; 163
    3dfa:	de 01       	movw	r26, r28
    3dfc:	59 96       	adiw	r26, 0x19	; 25
    3dfe:	01 90       	ld	r0, Z+
    3e00:	0d 92       	st	X+, r0
    3e02:	8a 95       	dec	r24
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <put_FRAM_ENCODERS+0x1a>
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	27 c0       	rjmp	.+78     	; 0x3e58 <put_FRAM_ENCODERS+0x74>
    3e0a:	be 01       	movw	r22, r28
    3e0c:	61 5e       	subi	r22, 0xE1	; 225
    3e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e10:	80 e8       	ldi	r24, 0x80	; 128
    3e12:	81 0f       	add	r24, r17
    3e14:	0e 94 0d 1a 	call	0x341a	; 0x341a <get_MOTOR_ENCODER>
    3e18:	83 36       	cpi	r24, 0x63	; 99
    3e1a:	71 f1       	breq	.+92     	; 0x3e78 <put_FRAM_ENCODERS+0x94>
    3e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e1e:	98 a1       	ldd	r25, Y+32	; 0x20
    3e20:	29 a1       	ldd	r18, Y+33	; 0x21
    3e22:	3a a1       	ldd	r19, Y+34	; 0x22
    3e24:	3d 8b       	std	Y+21, r19	; 0x15
    3e26:	2e 8b       	std	Y+22, r18	; 0x16
    3e28:	9f 8b       	std	Y+23, r25	; 0x17
    3e2a:	88 8f       	std	Y+24, r24	; 0x18
    3e2c:	e1 2f       	mov	r30, r17
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	ee 0f       	add	r30, r30
    3e32:	ff 1f       	adc	r31, r31
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	8c 0f       	add	r24, r28
    3e3a:	9d 1f       	adc	r25, r29
    3e3c:	e8 0f       	add	r30, r24
    3e3e:	f9 1f       	adc	r31, r25
    3e40:	60 8d       	ldd	r22, Z+24	; 0x18
    3e42:	71 8d       	ldd	r23, Z+25	; 0x19
    3e44:	24 e0       	ldi	r18, 0x04	; 4
    3e46:	ae 01       	movw	r20, r28
    3e48:	4b 5e       	subi	r20, 0xEB	; 235
    3e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e4c:	80 e5       	ldi	r24, 0x50	; 80
    3e4e:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    3e52:	83 36       	cpi	r24, 0x63	; 99
    3e54:	89 f0       	breq	.+34     	; 0x3e78 <put_FRAM_ENCODERS+0x94>
    3e56:	1f 5f       	subi	r17, 0xFF	; 255
    3e58:	11 23       	and	r17, r17
    3e5a:	b9 f2       	breq	.-82     	; 0x3e0a <put_FRAM_ENCODERS+0x26>
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
    3e64:	24 e1       	ldi	r18, 0x14	; 20
    3e66:	ae 01       	movw	r20, r28
    3e68:	4f 5f       	subi	r20, 0xFF	; 255
    3e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e6c:	60 e2       	ldi	r22, 0x20	; 32
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	80 e5       	ldi	r24, 0x50	; 80
    3e72:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	a2 96       	adiw	r28, 0x22	; 34
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	1f 91       	pop	r17
    3e84:	08 95       	ret

00003e86 <put_MOTOR>:
    3e86:	8f 92       	push	r8
    3e88:	9f 92       	push	r9
    3e8a:	af 92       	push	r10
    3e8c:	bf 92       	push	r11
    3e8e:	cf 92       	push	r12
    3e90:	df 92       	push	r13
    3e92:	ef 92       	push	r14
    3e94:	ff 92       	push	r15
    3e96:	0f 93       	push	r16
    3e98:	1f 93       	push	r17
    3e9a:	cf 93       	push	r28
    3e9c:	df 93       	push	r29
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	c5 59       	subi	r28, 0x95	; 149
    3ea4:	d1 09       	sbc	r29, r1
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	a8 2e       	mov	r10, r24
    3eac:	b2 2e       	mov	r11, r18
    3eae:	cd b6       	in	r12, 0x3d	; 61
    3eb0:	de b6       	in	r13, 0x3e	; 62
    3eb2:	80 e2       	ldi	r24, 0x20	; 32
    3eb4:	e1 e6       	ldi	r30, 0x61	; 97
    3eb6:	fb ea       	ldi	r31, 0xAB	; 171
    3eb8:	de 01       	movw	r26, r28
    3eba:	11 96       	adiw	r26, 0x01	; 1
    3ebc:	01 90       	ld	r0, Z+
    3ebe:	0d 92       	st	X+, r0
    3ec0:	8a 95       	dec	r24
    3ec2:	e1 f7       	brne	.-8      	; 0x3ebc <put_MOTOR+0x36>
    3ec4:	85 e2       	ldi	r24, 0x25	; 37
    3ec6:	e1 e8       	ldi	r30, 0x81	; 129
    3ec8:	fb ea       	ldi	r31, 0xAB	; 171
    3eca:	de 01       	movw	r26, r28
    3ecc:	91 96       	adiw	r26, 0x21	; 33
    3ece:	01 90       	ld	r0, Z+
    3ed0:	0d 92       	st	X+, r0
    3ed2:	8a 95       	dec	r24
    3ed4:	e1 f7       	brne	.-8      	; 0x3ece <put_MOTOR+0x48>
    3ed6:	82 2e       	mov	r8, r18
    3ed8:	91 2c       	mov	r9, r1
    3eda:	c4 01       	movw	r24, r8
    3edc:	04 96       	adiw	r24, 0x04	; 4
    3ede:	74 01       	movw	r14, r8
    3ee0:	23 e0       	ldi	r18, 0x03	; 3
    3ee2:	e2 0e       	add	r14, r18
    3ee4:	f1 1c       	adc	r15, r1
    3ee6:	ad b7       	in	r26, 0x3d	; 61
    3ee8:	be b7       	in	r27, 0x3e	; 62
    3eea:	a8 1b       	sub	r26, r24
    3eec:	b9 0b       	sbc	r27, r25
    3eee:	ad bf       	out	0x3d, r26	; 61
    3ef0:	be bf       	out	0x3e, r27	; 62
    3ef2:	0d b7       	in	r16, 0x3d	; 61
    3ef4:	1e b7       	in	r17, 0x3e	; 62
    3ef6:	0f 5f       	subi	r16, 0xFF	; 255
    3ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    3efa:	f8 01       	movw	r30, r16
    3efc:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	80 93 39 2b 	sts	0x2B39, r24	; 0x802b39 <ser_recv1+0xfe>
    3f06:	11 96       	adiw	r26, 0x01	; 1
    3f08:	ac 92       	st	X, r10
    3f0a:	61 83       	std	Z+1, r22	; 0x01
    3f0c:	60 e0       	ldi	r22, 0x00	; 0
    3f0e:	0e c0       	rjmp	.+28     	; 0x3f2c <put_MOTOR+0xa6>
    3f10:	86 2f       	mov	r24, r22
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	9c 01       	movw	r18, r24
    3f16:	2e 5f       	subi	r18, 0xFE	; 254
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	da 01       	movw	r26, r20
    3f1c:	a8 0f       	add	r26, r24
    3f1e:	b9 1f       	adc	r27, r25
    3f20:	8c 91       	ld	r24, X
    3f22:	df 01       	movw	r26, r30
    3f24:	a2 0f       	add	r26, r18
    3f26:	b3 1f       	adc	r27, r19
    3f28:	8c 93       	st	X, r24
    3f2a:	6f 5f       	subi	r22, 0xFF	; 255
    3f2c:	6b 15       	cp	r22, r11
    3f2e:	80 f3       	brcs	.-32     	; 0x3f10 <put_MOTOR+0x8a>
    3f30:	b2 e0       	ldi	r27, 0x02	; 2
    3f32:	8b 0e       	add	r8, r27
    3f34:	91 1c       	adc	r9, r1
    3f36:	b4 01       	movw	r22, r8
    3f38:	c8 01       	movw	r24, r16
    3f3a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <crc16>
    3f3e:	d8 01       	movw	r26, r16
    3f40:	a8 0d       	add	r26, r8
    3f42:	b9 1d       	adc	r27, r9
    3f44:	9c 93       	st	X, r25
    3f46:	f8 01       	movw	r30, r16
    3f48:	ee 0d       	add	r30, r14
    3f4a:	ff 1d       	adc	r31, r15
    3f4c:	80 83       	st	Z, r24
    3f4e:	64 e0       	ldi	r22, 0x04	; 4
    3f50:	6b 0d       	add	r22, r11
    3f52:	c8 01       	movw	r24, r16
    3f54:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <send_USART1>
    3f58:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    3f5c:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    3f60:	24 c0       	rjmp	.+72     	; 0x3faa <put_MOTOR+0x124>
    3f62:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3f66:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3f6a:	85 36       	cpi	r24, 0x65	; 101
    3f6c:	91 05       	cpc	r25, r1
    3f6e:	e0 f0       	brcs	.+56     	; 0x3fa8 <put_MOTOR+0x122>
    3f70:	81 ec       	ldi	r24, 0xC1	; 193
    3f72:	8a 0d       	add	r24, r10
    3f74:	1f 92       	push	r1
    3f76:	8f 93       	push	r24
    3f78:	ce 01       	movw	r24, r28
    3f7a:	01 96       	adiw	r24, 0x01	; 1
    3f7c:	9f 93       	push	r25
    3f7e:	8f 93       	push	r24
    3f80:	8e 01       	movw	r16, r28
    3f82:	0a 5b       	subi	r16, 0xBA	; 186
    3f84:	1f 4f       	sbci	r17, 0xFF	; 255
    3f86:	1f 93       	push	r17
    3f88:	0f 93       	push	r16
    3f8a:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3f8e:	b8 01       	movw	r22, r16
    3f90:	86 e3       	ldi	r24, 0x36	; 54
    3f92:	91 e0       	ldi	r25, 0x01	; 1
    3f94:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	83 e6       	ldi	r24, 0x63	; 99
    3fa6:	2a c0       	rjmp	.+84     	; 0x3ffc <put_MOTOR+0x176>
    3fa8:	00 00       	nop
    3faa:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    3fae:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    3fb2:	98 17       	cp	r25, r24
    3fb4:	b0 f2       	brcs	.-84     	; 0x3f62 <put_MOTOR+0xdc>
    3fb6:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <ser_recv1>
    3fba:	9f 3f       	cpi	r25, 0xFF	; 255
    3fbc:	f1 f0       	breq	.+60     	; 0x3ffa <put_MOTOR+0x174>
    3fbe:	81 ec       	ldi	r24, 0xC1	; 193
    3fc0:	8a 0d       	add	r24, r10
    3fc2:	1f 92       	push	r1
    3fc4:	9f 93       	push	r25
    3fc6:	1f 92       	push	r1
    3fc8:	8f 93       	push	r24
    3fca:	ce 01       	movw	r24, r28
    3fcc:	81 96       	adiw	r24, 0x21	; 33
    3fce:	9f 93       	push	r25
    3fd0:	8f 93       	push	r24
    3fd2:	8e 01       	movw	r16, r28
    3fd4:	0a 5b       	subi	r16, 0xBA	; 186
    3fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd8:	1f 93       	push	r17
    3fda:	0f 93       	push	r16
    3fdc:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    3fe0:	b8 01       	movw	r22, r16
    3fe2:	86 e3       	ldi	r24, 0x36	; 54
    3fe4:	91 e0       	ldi	r25, 0x01	; 1
    3fe6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3fea:	2d b7       	in	r18, 0x3d	; 61
    3fec:	3e b7       	in	r19, 0x3e	; 62
    3fee:	28 5f       	subi	r18, 0xF8	; 248
    3ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff2:	2d bf       	out	0x3d, r18	; 61
    3ff4:	3e bf       	out	0x3e, r19	; 62
    3ff6:	83 e6       	ldi	r24, 0x63	; 99
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <put_MOTOR+0x176>
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	cd be       	out	0x3d, r12	; 61
    3ffe:	de be       	out	0x3e, r13	; 62
    4000:	cb 56       	subi	r28, 0x6B	; 107
    4002:	df 4f       	sbci	r29, 0xFF	; 255
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	df 90       	pop	r13
    4016:	cf 90       	pop	r12
    4018:	bf 90       	pop	r11
    401a:	af 90       	pop	r10
    401c:	9f 90       	pop	r9
    401e:	8f 90       	pop	r8
    4020:	08 95       	ret

00004022 <move_MOTOR>:
    4022:	ef 92       	push	r14
    4024:	ff 92       	push	r15
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	c3 58       	subi	r28, 0x83	; 131
    4034:	d1 09       	sbc	r29, r1
    4036:	cd bf       	out	0x3d, r28	; 61
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	08 2f       	mov	r16, r24
    403c:	82 e2       	ldi	r24, 0x22	; 34
    403e:	e6 ea       	ldi	r30, 0xA6	; 166
    4040:	fb ea       	ldi	r31, 0xAB	; 171
    4042:	de 01       	movw	r26, r28
    4044:	11 96       	adiw	r26, 0x01	; 1
    4046:	01 90       	ld	r0, Z+
    4048:	0d 92       	st	X+, r0
    404a:	8a 95       	dec	r24
    404c:	e1 f7       	brne	.-8      	; 0x4046 <move_MOTOR+0x24>
    404e:	e4 96       	adiw	r28, 0x34	; 52
    4050:	1f ae       	std	Y+63, r1	; 0x3f
    4052:	e4 97       	sbiw	r28, 0x34	; 52
    4054:	e5 96       	adiw	r28, 0x35	; 53
    4056:	1f ae       	std	Y+63, r1	; 0x3f
    4058:	e5 97       	sbiw	r28, 0x35	; 53
    405a:	9b e1       	ldi	r25, 0x1B	; 27
    405c:	e6 96       	adiw	r28, 0x36	; 54
    405e:	9f af       	std	Y+63, r25	; 0x3f
    4060:	e6 97       	sbiw	r28, 0x36	; 54
    4062:	85 ea       	ldi	r24, 0xA5	; 165
    4064:	e7 96       	adiw	r28, 0x37	; 55
    4066:	8f af       	std	Y+63, r24	; 0x3f
    4068:	e7 97       	sbiw	r28, 0x37	; 55
    406a:	e8 96       	adiw	r28, 0x38	; 56
    406c:	1f ae       	std	Y+63, r1	; 0x3f
    406e:	e8 97       	sbiw	r28, 0x38	; 56
    4070:	e9 96       	adiw	r28, 0x39	; 57
    4072:	1f ae       	std	Y+63, r1	; 0x3f
    4074:	e9 97       	sbiw	r28, 0x39	; 57
    4076:	ea 96       	adiw	r28, 0x3a	; 58
    4078:	9f af       	std	Y+63, r25	; 0x3f
    407a:	ea 97       	sbiw	r28, 0x3a	; 58
    407c:	eb 96       	adiw	r28, 0x3b	; 59
    407e:	8f af       	std	Y+63, r24	; 0x3f
    4080:	eb 97       	sbiw	r28, 0x3b	; 59
    4082:	ec 96       	adiw	r28, 0x3c	; 60
    4084:	1f ae       	std	Y+63, r1	; 0x3f
    4086:	ec 97       	sbiw	r28, 0x3c	; 60
    4088:	ed 96       	adiw	r28, 0x3d	; 61
    408a:	1f ae       	std	Y+63, r1	; 0x3f
    408c:	ed 97       	sbiw	r28, 0x3d	; 61
    408e:	8d e0       	ldi	r24, 0x0D	; 13
    4090:	ee 96       	adiw	r28, 0x3e	; 62
    4092:	8f af       	std	Y+63, r24	; 0x3f
    4094:	ee 97       	sbiw	r28, 0x3e	; 62
    4096:	82 ed       	ldi	r24, 0xD2	; 210
    4098:	ef 96       	adiw	r28, 0x3f	; 63
    409a:	8f af       	std	Y+63, r24	; 0x3f
    409c:	ef 97       	sbiw	r28, 0x3f	; 63
    409e:	c1 58       	subi	r28, 0x81	; 129
    40a0:	df 4f       	sbci	r29, 0xFF	; 255
    40a2:	78 83       	st	Y, r23
    40a4:	cf 57       	subi	r28, 0x7F	; 127
    40a6:	d0 40       	sbci	r29, 0x00	; 0
    40a8:	c0 58       	subi	r28, 0x80	; 128
    40aa:	df 4f       	sbci	r29, 0xFF	; 255
    40ac:	68 83       	st	Y, r22
    40ae:	c0 58       	subi	r28, 0x80	; 128
    40b0:	d0 40       	sbci	r29, 0x00	; 0
    40b2:	cf 57       	subi	r28, 0x7F	; 127
    40b4:	df 4f       	sbci	r29, 0xFF	; 255
    40b6:	58 83       	st	Y, r21
    40b8:	c1 58       	subi	r28, 0x81	; 129
    40ba:	d0 40       	sbci	r29, 0x00	; 0
    40bc:	ce 57       	subi	r28, 0x7E	; 126
    40be:	df 4f       	sbci	r29, 0xFF	; 255
    40c0:	48 83       	st	Y, r20
    40c2:	c2 58       	subi	r28, 0x82	; 130
    40c4:	d0 40       	sbci	r29, 0x00	; 0
    40c6:	cd 57       	subi	r28, 0x7D	; 125
    40c8:	df 4f       	sbci	r29, 0xFF	; 255
    40ca:	18 82       	st	Y, r1
    40cc:	c3 58       	subi	r28, 0x83	; 131
    40ce:	d0 40       	sbci	r29, 0x00	; 0
    40d0:	21 e1       	ldi	r18, 0x11	; 17
    40d2:	ae 01       	movw	r20, r28
    40d4:	4d 58       	subi	r20, 0x8D	; 141
    40d6:	5f 4f       	sbci	r21, 0xFF	; 255
    40d8:	61 e4       	ldi	r22, 0x41	; 65
    40da:	80 2f       	mov	r24, r16
    40dc:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <put_MOTOR>
    40e0:	18 2f       	mov	r17, r24
    40e2:	83 36       	cpi	r24, 0x63	; 99
    40e4:	d9 f4       	brne	.+54     	; 0x411c <move_MOTOR+0xfa>
    40e6:	0f 53       	subi	r16, 0x3F	; 63
    40e8:	1f 92       	push	r1
    40ea:	0f 93       	push	r16
    40ec:	ce 01       	movw	r24, r28
    40ee:	01 96       	adiw	r24, 0x01	; 1
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
    40f4:	7e 01       	movw	r14, r28
    40f6:	83 e2       	ldi	r24, 0x23	; 35
    40f8:	e8 0e       	add	r14, r24
    40fa:	f1 1c       	adc	r15, r1
    40fc:	ff 92       	push	r15
    40fe:	ef 92       	push	r14
    4100:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
    4104:	b7 01       	movw	r22, r14
    4106:	86 e3       	ldi	r24, 0x36	; 54
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	01 c0       	rjmp	.+2      	; 0x411e <move_MOTOR+0xfc>
    411c:	10 e0       	ldi	r17, 0x00	; 0
    411e:	81 2f       	mov	r24, r17
    4120:	cd 57       	subi	r28, 0x7D	; 125
    4122:	df 4f       	sbci	r29, 0xFF	; 255
    4124:	cd bf       	out	0x3d, r28	; 61
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	ff 90       	pop	r15
    4132:	ef 90       	pop	r14
    4134:	08 95       	ret

00004136 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    4136:	8f 92       	push	r8
    4138:	9f 92       	push	r9
    413a:	af 92       	push	r10
    413c:	bf 92       	push	r11
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	c9 5b       	subi	r28, 0xB9	; 185
    4152:	d1 09       	sbc	r29, r1
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	4b 01       	movw	r8, r22
    415a:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    415c:	82 e3       	ldi	r24, 0x32	; 50
    415e:	ed e5       	ldi	r30, 0x5D	; 93
    4160:	fc ea       	ldi	r31, 0xAC	; 172
    4162:	de 01       	movw	r26, r28
    4164:	a3 5a       	subi	r26, 0xA3	; 163
    4166:	bf 4f       	sbci	r27, 0xFF	; 255
    4168:	01 90       	ld	r0, Z+
    416a:	0d 92       	st	X+, r0
    416c:	8a 95       	dec	r24
    416e:	e1 f7       	brne	.-8      	; 0x4168 <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    4170:	8b e2       	ldi	r24, 0x2B	; 43
    4172:	ef e8       	ldi	r30, 0x8F	; 143
    4174:	fc ea       	ldi	r31, 0xAC	; 172
    4176:	de 01       	movw	r26, r28
    4178:	a1 57       	subi	r26, 0x71	; 113
    417a:	bf 4f       	sbci	r27, 0xFF	; 255
    417c:	01 90       	ld	r0, Z+
    417e:	0d 92       	st	X+, r0
    4180:	8a 95       	dec	r24
    4182:	e1 f7       	brne	.-8      	; 0x417c <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    4184:	10 e0       	ldi	r17, 0x00	; 0
    4186:	6a c0       	rjmp	.+212    	; 0x425c <move_MOTORS_PISTON+0x126>
		mtraddr = i + MOTOR_A;
    4188:	68 94       	set
    418a:	dd 24       	eor	r13, r13
    418c:	d7 f8       	bld	r13, 7
    418e:	d1 0e       	add	r13, r17
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    4190:	e1 2e       	mov	r14, r17
    4192:	f1 2c       	mov	r15, r1
    4194:	b7 01       	movw	r22, r14
    4196:	66 0f       	add	r22, r22
    4198:	77 1f       	adc	r23, r23
    419a:	66 0f       	add	r22, r22
    419c:	77 1f       	adc	r23, r23
    419e:	81 e5       	ldi	r24, 0x51	; 81
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	8c 0f       	add	r24, r28
    41a4:	9d 1f       	adc	r25, r29
    41a6:	68 0f       	add	r22, r24
    41a8:	79 1f       	adc	r23, r25
    41aa:	8d 2d       	mov	r24, r13
    41ac:	0e 94 0d 1a 	call	0x341a	; 0x341a <get_MOTOR_ENCODER>
    41b0:	08 2f       	mov	r16, r24
    41b2:	83 36       	cpi	r24, 0x63	; 99
    41b4:	e9 f4       	brne	.+58     	; 0x41f0 <move_MOTORS_PISTON+0xba>
			sprintf(strbuf, fmt0, mtraddr-63);
    41b6:	8d 2d       	mov	r24, r13
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	cf 97       	sbiw	r24, 0x3f	; 63
    41bc:	9f 93       	push	r25
    41be:	8f 93       	push	r24
    41c0:	ce 01       	movw	r24, r28
    41c2:	83 5a       	subi	r24, 0xA3	; 163
    41c4:	9f 4f       	sbci	r25, 0xFF	; 255
    41c6:	9f 93       	push	r25
    41c8:	8f 93       	push	r24
    41ca:	8c 55       	subi	r24, 0x5C	; 92
    41cc:	91 09       	sbc	r25, r1
    41ce:	7c 01       	movw	r14, r24
    41d0:	9f 93       	push	r25
    41d2:	8f 93       	push	r24
    41d4:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printError(ERR_MTR, strbuf);
    41d8:	b7 01       	movw	r22, r14
    41da:	86 e3       	ldi	r24, 0x36	; 54
    41dc:	91 e0       	ldi	r25, 0x01	; 1
    41de:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	0f 90       	pop	r0
    41ee:	3a c0       	rjmp	.+116    	; 0x4264 <move_MOTORS_PISTON+0x12e>
		}

		newPos[i] = curPos[i] + deltaValue;
    41f0:	ee 0c       	add	r14, r14
    41f2:	ff 1c       	adc	r15, r15
    41f4:	ee 0c       	add	r14, r14
    41f6:	ff 1c       	adc	r15, r15
    41f8:	e1 e5       	ldi	r30, 0x51	; 81
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	ec 0f       	add	r30, r28
    41fe:	fd 1f       	adc	r31, r29
    4200:	ee 0d       	add	r30, r14
    4202:	ff 1d       	adc	r31, r15
    4204:	40 81       	ld	r20, Z
    4206:	51 81       	ldd	r21, Z+1	; 0x01
    4208:	62 81       	ldd	r22, Z+2	; 0x02
    420a:	73 81       	ldd	r23, Z+3	; 0x03
    420c:	48 0d       	add	r20, r8
    420e:	59 1d       	adc	r21, r9
    4210:	6a 1d       	adc	r22, r10
    4212:	7b 1d       	adc	r23, r11

		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    4214:	8d 2d       	mov	r24, r13
    4216:	0e 94 11 20 	call	0x4022	; 0x4022 <move_MOTOR>
    421a:	08 2f       	mov	r16, r24
    421c:	83 36       	cpi	r24, 0x63	; 99
    421e:	e9 f4       	brne	.+58     	; 0x425a <move_MOTORS_PISTON+0x124>
			sprintf(strbuf, fmt1, mtraddr-63);
    4220:	8d 2d       	mov	r24, r13
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	cf 97       	sbiw	r24, 0x3f	; 63
    4226:	9f 93       	push	r25
    4228:	8f 93       	push	r24
    422a:	ce 01       	movw	r24, r28
    422c:	81 57       	subi	r24, 0x71	; 113
    422e:	9f 4f       	sbci	r25, 0xFF	; 255
    4230:	9f 93       	push	r25
    4232:	8f 93       	push	r24
    4234:	8e 58       	subi	r24, 0x8E	; 142
    4236:	91 09       	sbc	r25, r1
    4238:	7c 01       	movw	r14, r24
    423a:	9f 93       	push	r25
    423c:	8f 93       	push	r24
    423e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printError(ERR_MTR, strbuf);
    4242:	b7 01       	movw	r22, r14
    4244:	86 e3       	ldi	r24, 0x36	; 54
    4246:	91 e0       	ldi	r25, 0x01	; 1
    4248:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	05 c0       	rjmp	.+10     	; 0x4264 <move_MOTORS_PISTON+0x12e>
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    425a:	1f 5f       	subi	r17, 0xFF	; 255
    425c:	11 23       	and	r17, r17
    425e:	09 f4       	brne	.+2      	; 0x4262 <move_MOTORS_PISTON+0x12c>
    4260:	93 cf       	rjmp	.-218    	; 0x4188 <move_MOTORS_PISTON+0x52>
			printError(ERR_MTR, strbuf);
			return(ERROR);
		}
	}

	return(NOERROR);
    4262:	00 e0       	ldi	r16, 0x00	; 0

}
    4264:	80 2f       	mov	r24, r16
    4266:	c7 54       	subi	r28, 0x47	; 71
    4268:	df 4f       	sbci	r29, 0xFF	; 255
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	de bf       	out	0x3e, r29	; 62
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	ff 90       	pop	r15
    4278:	ef 90       	pop	r14
    427a:	df 90       	pop	r13
    427c:	bf 90       	pop	r11
    427e:	af 90       	pop	r10
    4280:	9f 90       	pop	r9
    4282:	8f 90       	pop	r8
    4284:	08 95       	ret

00004286 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	cd 57       	subi	r28, 0x7D	; 125
    4298:	d1 09       	sbc	r29, r1
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    42a0:	89 e2       	ldi	r24, 0x29	; 41
    42a2:	ea eb       	ldi	r30, 0xBA	; 186
    42a4:	fc ea       	ldi	r31, 0xAC	; 172
    42a6:	de 01       	movw	r26, r28
    42a8:	11 96       	adiw	r26, 0x01	; 1
    42aa:	01 90       	ld	r0, Z+
    42ac:	0d 92       	st	X+, r0
    42ae:	8a 95       	dec	r24
    42b0:	e1 f7       	brne	.-8      	; 0x42aa <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    42b2:	eb 96       	adiw	r28, 0x3b	; 59
    42b4:	7f af       	std	Y+63, r23	; 0x3f
    42b6:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    42b8:	ec 96       	adiw	r28, 0x3c	; 60
    42ba:	6f af       	std	Y+63, r22	; 0x3f
    42bc:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    42be:	ed 96       	adiw	r28, 0x3d	; 61
    42c0:	5f af       	std	Y+63, r21	; 0x3f
    42c2:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    42c4:	ee 96       	adiw	r28, 0x3e	; 62
    42c6:	4f af       	std	Y+63, r20	; 0x3f
    42c8:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    42ca:	24 e0       	ldi	r18, 0x04	; 4
    42cc:	ae 01       	movw	r20, r28
    42ce:	46 58       	subi	r20, 0x86	; 134
    42d0:	5f 4f       	sbci	r21, 0xFF	; 255
    42d2:	66 e1       	ldi	r22, 0x16	; 22
    42d4:	80 2f       	mov	r24, r16
    42d6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <put_MOTOR>
    42da:	18 2f       	mov	r17, r24
    42dc:	83 36       	cpi	r24, 0x63	; 99
    42de:	d9 f4       	brne	.+54     	; 0x4316 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    42e0:	0f 53       	subi	r16, 0x3F	; 63
    42e2:	1f 92       	push	r1
    42e4:	0f 93       	push	r16
    42e6:	ce 01       	movw	r24, r28
    42e8:	01 96       	adiw	r24, 0x01	; 1
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	7e 01       	movw	r14, r28
    42f0:	8a e2       	ldi	r24, 0x2A	; 42
    42f2:	e8 0e       	add	r14, r24
    42f4:	f1 1c       	adc	r15, r1
    42f6:	ff 92       	push	r15
    42f8:	ef 92       	push	r14
    42fa:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_MTR, strbuf);
    42fe:	b7 01       	movw	r22, r14
    4300:	86 e3       	ldi	r24, 0x36	; 54
    4302:	91 e0       	ldi	r25, 0x01	; 1
    4304:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	01 c0       	rjmp	.+2      	; 0x4318 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4316:	10 e0       	ldi	r17, 0x00	; 0

}
    4318:	81 2f       	mov	r24, r17
    431a:	c3 58       	subi	r28, 0x83	; 131
    431c:	df 4f       	sbci	r29, 0xFF	; 255
    431e:	cd bf       	out	0x3d, r28	; 61
    4320:	de bf       	out	0x3e, r29	; 62
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	1f 91       	pop	r17
    4328:	0f 91       	pop	r16
    432a:	ff 90       	pop	r15
    432c:	ef 90       	pop	r14
    432e:	08 95       	ret

00004330 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	00 d0       	rcall	.+0      	; 0x433a <init_MOTORS+0xa>
    433a:	00 d0       	rcall	.+0      	; 0x433c <init_MOTORS+0xc>
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	2a e6       	ldi	r18, 0x6A	; 106
    4342:	84 e0       	ldi	r24, 0x04	; 4
    4344:	91 e0       	ldi	r25, 0x01	; 1
    4346:	21 50       	subi	r18, 0x01	; 1
    4348:	80 40       	sbci	r24, 0x00	; 0
    434a:	90 40       	sbci	r25, 0x00	; 0
    434c:	e1 f7       	brne	.-8      	; 0x4346 <init_MOTORS+0x16>
    434e:	00 c0       	rjmp	.+0      	; 0x4350 <init_MOTORS+0x20>

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4350:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    4354:	8b e0       	ldi	r24, 0x0B	; 11
    4356:	80 93 39 2a 	sts	0x2A39, r24	; 0x802a39 <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    435a:	10 e0       	ldi	r17, 0x00	; 0
    435c:	10 c0       	rjmp	.+32     	; 0x437e <init_MOTORS+0x4e>
		mtraddr = i + MOTOR_A;
    435e:	00 e8       	ldi	r16, 0x80	; 128
    4360:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    4362:	be 01       	movw	r22, r28
    4364:	6f 5f       	subi	r22, 0xFF	; 255
    4366:	7f 4f       	sbci	r23, 0xFF	; 255
    4368:	80 2f       	mov	r24, r16
    436a:	0e 94 2a 18 	call	0x3054	; 0x3054 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    436e:	49 81       	ldd	r20, Y+1	; 0x01
    4370:	5a 81       	ldd	r21, Y+2	; 0x02
    4372:	6b 81       	ldd	r22, Y+3	; 0x03
    4374:	7c 81       	ldd	r23, Y+4	; 0x04
    4376:	80 2f       	mov	r24, r16
    4378:	0e 94 43 21 	call	0x4286	; 0x4286 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (i = 0; i < NMOTORS; i++) {
    437c:	1f 5f       	subi	r17, 0xFF	; 255
    437e:	11 23       	and	r17, r17
    4380:	71 f3       	breq	.-36     	; 0x435e <init_MOTORS+0x2e>

	}

	return(NOERROR);

}
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	24 96       	adiw	r28, 0x04	; 4
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	de bf       	out	0x3e, r29	; 62
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	08 95       	ret

00004394 <stop_MOTORS>:

	Returns:
		ERROR if the stop_MOTOR command fails
------------------------------------------------------------------------------*/
uint8_t stop_MOTORS(void)
{
    4394:	ef 92       	push	r14
    4396:	ff 92       	push	r15
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
    43a4:	c4 57       	subi	r28, 0x74	; 116
    43a6:	d1 09       	sbc	r29, r1
    43a8:	cd bf       	out	0x3d, r28	; 61
    43aa:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";
    43ac:	83 e2       	ldi	r24, 0x23	; 35
    43ae:	e3 ee       	ldi	r30, 0xE3	; 227
    43b0:	fc ea       	ldi	r31, 0xAC	; 172
    43b2:	de 01       	movw	r26, r28
    43b4:	ae 5a       	subi	r26, 0xAE	; 174
    43b6:	bf 4f       	sbci	r27, 0xFF	; 255
    43b8:	01 90       	ld	r0, Z+
    43ba:	0d 92       	st	X+, r0
    43bc:	8a 95       	dec	r24
    43be:	e1 f7       	brne	.-8      	; 0x43b8 <stop_MOTORS+0x24>

	tbuf[0] = STOP;
    43c0:	62 96       	adiw	r28, 0x12	; 18
    43c2:	1f ae       	std	Y+63, r1	; 0x3f
    43c4:	62 97       	sbiw	r28, 0x12	; 18
	errflag = 0;
    43c6:	00 e0       	ldi	r16, 0x00	; 0
	for (i = 0; i < NMOTORS; i++) {
    43c8:	10 e0       	ldi	r17, 0x00	; 0
    43ca:	28 c0       	rjmp	.+80     	; 0x441c <stop_MOTORS+0x88>
		mtraddr = i + MOTOR_A;
		if (put_MOTOR(mtraddr, STOP, tbuf, 1) == ERROR) {
    43cc:	21 e0       	ldi	r18, 0x01	; 1
    43ce:	ae 01       	movw	r20, r28
    43d0:	4f 5a       	subi	r20, 0xAF	; 175
    43d2:	5f 4f       	sbci	r21, 0xFF	; 255
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	80 e8       	ldi	r24, 0x80	; 128
    43d8:	81 0f       	add	r24, r17
    43da:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <put_MOTOR>
    43de:	83 36       	cpi	r24, 0x63	; 99
    43e0:	e1 f4       	brne	.+56     	; 0x441a <stop_MOTORS+0x86>
			sprintf(strbuf, fmt, (char) (mtraddr-63));
    43e2:	1f 92       	push	r1
    43e4:	81 e4       	ldi	r24, 0x41	; 65
    43e6:	81 0f       	add	r24, r17
    43e8:	8f 93       	push	r24
    43ea:	ce 01       	movw	r24, r28
    43ec:	8e 5a       	subi	r24, 0xAE	; 174
    43ee:	9f 4f       	sbci	r25, 0xFF	; 255
    43f0:	9f 93       	push	r25
    43f2:	8f 93       	push	r24
    43f4:	81 55       	subi	r24, 0x51	; 81
    43f6:	91 09       	sbc	r25, r1
    43f8:	7c 01       	movw	r14, r24
    43fa:	9f 93       	push	r25
    43fc:	8f 93       	push	r24
    43fe:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printError(ERR_MTR, strbuf);
    4402:	b7 01       	movw	r22, r14
    4404:	86 e3       	ldi	r24, 0x36	; 54
    4406:	91 e0       	ldi	r25, 0x01	; 1
    4408:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			errflag++;
    440c:	0f 5f       	subi	r16, 0xFF	; 255
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";

	tbuf[0] = STOP;
	errflag = 0;
	for (i = 0; i < NMOTORS; i++) {
    441a:	1f 5f       	subi	r17, 0xFF	; 255
    441c:	11 23       	and	r17, r17
    441e:	b1 f2       	breq	.-84     	; 0x43cc <stop_MOTORS+0x38>
			printError(ERR_MTR, strbuf);
			errflag++;
		}
	}

	if (errflag) {
    4420:	00 23       	and	r16, r16
    4422:	11 f0       	breq	.+4      	; 0x4428 <stop_MOTORS+0x94>
		return(ERROR);
    4424:	83 e6       	ldi	r24, 0x63	; 99
    4426:	01 c0       	rjmp	.+2      	; 0x442a <stop_MOTORS+0x96>
	} else {
		return(NOERROR);
    4428:	80 e0       	ldi	r24, 0x00	; 0
	}

}
    442a:	cc 58       	subi	r28, 0x8C	; 140
    442c:	df 4f       	sbci	r29, 0xFF	; 255
    442e:	cd bf       	out	0x3d, r28	; 61
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	1f 91       	pop	r17
    4438:	0f 91       	pop	r16
    443a:	ff 90       	pop	r15
    443c:	ef 90       	pop	r14
    443e:	08 95       	ret

00004440 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	c4 5e       	subi	r28, 0xE4	; 228
    4456:	d1 09       	sbc	r29, r1
    4458:	cd bf       	out	0x3d, r28	; 61
    445a:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, motor, mtraddr, controller, retval;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    445c:	98 e2       	ldi	r25, 0x28	; 40
    445e:	e6 e0       	ldi	r30, 0x06	; 6
    4460:	fd ea       	ldi	r31, 0xAD	; 173
    4462:	de 01       	movw	r26, r28
    4464:	ab 5a       	subi	r26, 0xAB	; 171
    4466:	bf 4f       	sbci	r27, 0xFF	; 255
    4468:	01 90       	ld	r0, Z+
    446a:	0d 92       	st	X+, r0
    446c:	9a 95       	dec	r25
    446e:	e1 f7       	brne	.-8      	; 0x4468 <move_MOTOR_CMD+0x28>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    4470:	9e e1       	ldi	r25, 0x1E	; 30
    4472:	ee e2       	ldi	r30, 0x2E	; 46
    4474:	fd ea       	ldi	r31, 0xAD	; 173
    4476:	de 01       	movw	r26, r28
    4478:	a3 58       	subi	r26, 0x83	; 131
    447a:	bf 4f       	sbci	r27, 0xFF	; 255
    447c:	01 90       	ld	r0, Z+
    447e:	0d 92       	st	X+, r0
    4480:	9a 95       	dec	r25
    4482:	e1 f7       	brne	.-8      	; 0x447c <move_MOTOR_CMD+0x3c>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    4484:	91 e2       	ldi	r25, 0x21	; 33
    4486:	ec e4       	ldi	r30, 0x4C	; 76
    4488:	fd ea       	ldi	r31, 0xAD	; 173
    448a:	de 01       	movw	r26, r28
    448c:	a5 56       	subi	r26, 0x65	; 101
    448e:	bf 4f       	sbci	r27, 0xFF	; 255
    4490:	01 90       	ld	r0, Z+
    4492:	0d 92       	st	X+, r0
    4494:	9a 95       	dec	r25
    4496:	e1 f7       	brne	.-8      	; 0x4490 <move_MOTOR_CMD+0x50>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    4498:	99 e2       	ldi	r25, 0x29	; 41
    449a:	ed e6       	ldi	r30, 0x6D	; 109
    449c:	fd ea       	ldi	r31, 0xAD	; 173
    449e:	de 01       	movw	r26, r28
    44a0:	a4 54       	subi	r26, 0x44	; 68
    44a2:	bf 4f       	sbci	r27, 0xFF	; 255
    44a4:	01 90       	ld	r0, Z+
    44a6:	0d 92       	st	X+, r0
    44a8:	9a 95       	dec	r25
    44aa:	e1 f7       	brne	.-8      	; 0x44a4 <move_MOTOR_CMD+0x64>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    44ac:	08 2f       	mov	r16, r24
    44ae:	10 e0       	ldi	r17, 0x00	; 0
    44b0:	84 e3       	ldi	r24, 0x34	; 52
    44b2:	80 9f       	mul	r24, r16
    44b4:	f0 01       	movw	r30, r0
    44b6:	81 9f       	mul	r24, r17
    44b8:	f0 0d       	add	r31, r0
    44ba:	11 24       	eor	r1, r1
    44bc:	e3 5f       	subi	r30, 0xF3	; 243
    44be:	f7 4d       	sbci	r31, 0xD7	; 215
    44c0:	82 81       	ldd	r24, Z+2	; 0x02
    44c2:	88 23       	and	r24, r24
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <move_MOTOR_CMD+0x88>
    44c6:	fe c0       	rjmp	.+508    	; 0x46c4 <move_MOTOR_CMD+0x284>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    44c8:	84 e3       	ldi	r24, 0x34	; 52
    44ca:	80 9f       	mul	r24, r16
    44cc:	f0 01       	movw	r30, r0
    44ce:	81 9f       	mul	r24, r17
    44d0:	f0 0d       	add	r31, r0
    44d2:	11 24       	eor	r1, r1
    44d4:	e3 5f       	subi	r30, 0xF3	; 243
    44d6:	f7 4d       	sbci	r31, 0xD7	; 215
    44d8:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    44da:	48 2f       	mov	r20, r24
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	fa 01       	movw	r30, r20
    44e0:	e1 54       	subi	r30, 0x41	; 65
    44e2:	f1 09       	sbc	r31, r1
    44e4:	e8 33       	cpi	r30, 0x38	; 56
    44e6:	f1 05       	cpc	r31, r1
    44e8:	08 f0       	brcs	.+2      	; 0x44ec <move_MOTOR_CMD+0xac>
    44ea:	9d c0       	rjmp	.+314    	; 0x4626 <move_MOTOR_CMD+0x1e6>
    44ec:	ee 54       	subi	r30, 0x4E	; 78
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__tablejump2__>
		case 'x':			// Immediate halt
			stop_MOTORS();
    44f4:	0e 94 ca 21 	call	0x4394	; 0x4394 <stop_MOTORS>
			return(NOERROR);
    44f8:	10 e0       	ldi	r17, 0x00	; 0
    44fa:	e9 c0       	rjmp	.+466    	; 0x46ce <move_MOTOR_CMD+0x28e>

		case 'A':			// Move to absolute position
		case 'B':
		case 'C':
			controller = motor + 63;
    44fc:	0f 2e       	mov	r0, r31
    44fe:	ff e3       	ldi	r31, 0x3F	; 63
    4500:	ff 2e       	mov	r15, r31
    4502:	f0 2d       	mov	r31, r0
    4504:	f8 0e       	add	r15, r24
			currentPosition = 0;
    4506:	65 96       	adiw	r28, 0x15	; 21
    4508:	1c ae       	std	Y+60, r1	; 0x3c
    450a:	1d ae       	std	Y+61, r1	; 0x3d
    450c:	1e ae       	std	Y+62, r1	; 0x3e
    450e:	1f ae       	std	Y+63, r1	; 0x3f
    4510:	65 97       	sbiw	r28, 0x15	; 21
			break;
    4512:	a0 c0       	rjmp	.+320    	; 0x4654 <move_MOTOR_CMD+0x214>

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4514:	24 e3       	ldi	r18, 0x34	; 52
    4516:	20 9f       	mul	r18, r16
    4518:	c0 01       	movw	r24, r0
    451a:	21 9f       	mul	r18, r17
    451c:	90 0d       	add	r25, r0
    451e:	11 24       	eor	r1, r1
    4520:	81 5f       	subi	r24, 0xF1	; 241
    4522:	97 4d       	sbci	r25, 0xD7	; 215
    4524:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <atol>
    4528:	9b 01       	movw	r18, r22
    452a:	ac 01       	movw	r20, r24
    452c:	ab e1       	ldi	r26, 0x1B	; 27
    452e:	b1 e0       	ldi	r27, 0x01	; 1
    4530:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__muluhisi3>
    4534:	6b 01       	movw	r12, r22
    4536:	7c 01       	movw	r14, r24
			for (i = 0; i < NMOTORS; i++) {
    4538:	00 e0       	ldi	r16, 0x00	; 0
    453a:	20 c0       	rjmp	.+64     	; 0x457c <move_MOTOR_CMD+0x13c>
				mtraddr = i + MOTOR_A;
				if (move_MOTOR(mtraddr, newPosition) == ERROR) {
    453c:	b7 01       	movw	r22, r14
    453e:	a6 01       	movw	r20, r12
    4540:	80 e8       	ldi	r24, 0x80	; 128
    4542:	80 0f       	add	r24, r16
    4544:	0e 94 11 20 	call	0x4022	; 0x4022 <move_MOTOR>
    4548:	18 2f       	mov	r17, r24
    454a:	83 36       	cpi	r24, 0x63	; 99
    454c:	b1 f4       	brne	.+44     	; 0x457a <move_MOTOR_CMD+0x13a>
					sprintf(strbuf, fmt2);
    454e:	ce 01       	movw	r24, r28
    4550:	85 56       	subi	r24, 0x65	; 101
    4552:	9f 4f       	sbci	r25, 0xFF	; 255
    4554:	9f 93       	push	r25
    4556:	8f 93       	push	r24
    4558:	8a 59       	subi	r24, 0x9A	; 154
    455a:	91 09       	sbc	r25, r1
    455c:	7c 01       	movw	r14, r24
    455e:	9f 93       	push	r25
    4560:	8f 93       	push	r24
    4562:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
					printError(ERR_MTR, strbuf);
    4566:	b7 01       	movw	r22, r14
    4568:	86 e3       	ldi	r24, 0x36	; 54
    456a:	91 e0       	ldi	r25, 0x01	; 1
    456c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
					return(ERROR);
    4570:	0f 90       	pop	r0
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	0f 90       	pop	r0
    4578:	aa c0       	rjmp	.+340    	; 0x46ce <move_MOTOR_CMD+0x28e>
			currentPosition = 0;
			break;

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
			for (i = 0; i < NMOTORS; i++) {
    457a:	0f 5f       	subi	r16, 0xFF	; 255
    457c:	00 23       	and	r16, r16
    457e:	f1 f2       	breq	.-68     	; 0x453c <move_MOTOR_CMD+0xfc>
					sprintf(strbuf, fmt2);
					printError(ERR_MTR, strbuf);
					return(ERROR);
				}
			}
			return(NOERROR);
    4580:	10 e0       	ldi	r17, 0x00	; 0
    4582:	a5 c0       	rjmp	.+330    	; 0x46ce <move_MOTOR_CMD+0x28e>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    4584:	0f 2e       	mov	r0, r31
    4586:	ff e1       	ldi	r31, 0x1F	; 31
    4588:	ff 2e       	mov	r15, r31
    458a:	f0 2d       	mov	r31, r0
    458c:	f8 0e       	add	r15, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    458e:	be 01       	movw	r22, r28
    4590:	6f 5a       	subi	r22, 0xAF	; 175
    4592:	7f 4f       	sbci	r23, 0xFF	; 255
    4594:	8f 2d       	mov	r24, r15
    4596:	0e 94 0d 1a 	call	0x341a	; 0x341a <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    459a:	83 36       	cpi	r24, 0x63	; 99
    459c:	09 f0       	breq	.+2      	; 0x45a0 <move_MOTOR_CMD+0x160>
    459e:	5a c0       	rjmp	.+180    	; 0x4654 <move_MOTOR_CMD+0x214>
				sprintf(strbuf, fmt0);
    45a0:	ce 01       	movw	r24, r28
    45a2:	8b 5a       	subi	r24, 0xAB	; 171
    45a4:	9f 4f       	sbci	r25, 0xFF	; 255
    45a6:	9f 93       	push	r25
    45a8:	8f 93       	push	r24
    45aa:	8e 01       	movw	r16, r28
    45ac:	0f 5f       	subi	r16, 0xFF	; 255
    45ae:	1f 4f       	sbci	r17, 0xFF	; 255
    45b0:	1f 93       	push	r17
    45b2:	0f 93       	push	r16
    45b4:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    45b8:	b8 01       	movw	r22, r16
    45ba:	85 e3       	ldi	r24, 0x35	; 53
    45bc:	91 e0       	ldi	r25, 0x01	; 1
    45be:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    45c2:	0f 90       	pop	r0
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	13 e6       	ldi	r17, 0x63	; 99
    45cc:	80 c0       	rjmp	.+256    	; 0x46ce <move_MOTOR_CMD+0x28e>
			}
			break;

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    45ce:	24 e3       	ldi	r18, 0x34	; 52
    45d0:	20 9f       	mul	r18, r16
    45d2:	c0 01       	movw	r24, r0
    45d4:	21 9f       	mul	r18, r17
    45d6:	90 0d       	add	r25, r0
    45d8:	11 24       	eor	r1, r1
    45da:	81 5f       	subi	r24, 0xF1	; 241
    45dc:	97 4d       	sbci	r25, 0xD7	; 215
    45de:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <atol>
    45e2:	9b 01       	movw	r18, r22
    45e4:	ac 01       	movw	r20, r24
    45e6:	ab e1       	ldi	r26, 0x1B	; 27
    45e8:	b1 e0       	ldi	r27, 0x01	; 1
    45ea:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    45ee:	0e 94 9b 20 	call	0x4136	; 0x4136 <move_MOTORS_PISTON>
    45f2:	18 2f       	mov	r17, r24
    45f4:	83 36       	cpi	r24, 0x63	; 99
    45f6:	09 f0       	breq	.+2      	; 0x45fa <move_MOTOR_CMD+0x1ba>
    45f8:	67 c0       	rjmp	.+206    	; 0x46c8 <move_MOTOR_CMD+0x288>
				sprintf(strbuf, fmt3);
    45fa:	ce 01       	movw	r24, r28
    45fc:	84 54       	subi	r24, 0x44	; 68
    45fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4600:	9f 93       	push	r25
    4602:	8f 93       	push	r24
    4604:	8b 5b       	subi	r24, 0xBB	; 187
    4606:	91 09       	sbc	r25, r1
    4608:	7c 01       	movw	r14, r24
    460a:	9f 93       	push	r25
    460c:	8f 93       	push	r24
    460e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_MTR, strbuf);
    4612:	b7 01       	movw	r22, r14
    4614:	86 e3       	ldi	r24, 0x36	; 54
    4616:	91 e0       	ldi	r25, 0x01	; 1
    4618:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	54 c0       	rjmp	.+168    	; 0x46ce <move_MOTOR_CMD+0x28e>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    4626:	ce 01       	movw	r24, r28
    4628:	83 58       	subi	r24, 0x83	; 131
    462a:	9f 4f       	sbci	r25, 0xFF	; 255
    462c:	9f 93       	push	r25
    462e:	8f 93       	push	r24
    4630:	8e 01       	movw	r16, r28
    4632:	0f 5f       	subi	r16, 0xFF	; 255
    4634:	1f 4f       	sbci	r17, 0xFF	; 255
    4636:	1f 93       	push	r17
    4638:	0f 93       	push	r16
    463a:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printError(ERR_MTR, strbuf);
    463e:	b8 01       	movw	r22, r16
    4640:	86 e3       	ldi	r24, 0x36	; 54
    4642:	91 e0       	ldi	r25, 0x01	; 1
    4644:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    4648:	0f 90       	pop	r0
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	13 e6       	ldi	r17, 0x63	; 99
    4652:	3d c0       	rjmp	.+122    	; 0x46ce <move_MOTOR_CMD+0x28e>
/*
	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
	}
*/
	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4654:	24 e3       	ldi	r18, 0x34	; 52
    4656:	20 9f       	mul	r18, r16
    4658:	c0 01       	movw	r24, r0
    465a:	21 9f       	mul	r18, r17
    465c:	90 0d       	add	r25, r0
    465e:	11 24       	eor	r1, r1
    4660:	81 5f       	subi	r24, 0xF1	; 241
    4662:	97 4d       	sbci	r25, 0xD7	; 215
    4664:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <atol>
    4668:	9b 01       	movw	r18, r22
    466a:	ac 01       	movw	r20, r24
    466c:	ab e1       	ldi	r26, 0x1B	; 27
    466e:	b1 e0       	ldi	r27, 0x01	; 1
    4670:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__muluhisi3>
    4674:	65 96       	adiw	r28, 0x15	; 21
    4676:	0c ad       	ldd	r16, Y+60	; 0x3c
    4678:	1d ad       	ldd	r17, Y+61	; 0x3d
    467a:	2e ad       	ldd	r18, Y+62	; 0x3e
    467c:	3f ad       	ldd	r19, Y+63	; 0x3f
    467e:	65 97       	sbiw	r28, 0x15	; 21
    4680:	ab 01       	movw	r20, r22
    4682:	bc 01       	movw	r22, r24
    4684:	40 0f       	add	r20, r16
    4686:	51 1f       	adc	r21, r17
    4688:	62 1f       	adc	r22, r18
    468a:	73 1f       	adc	r23, r19

	if (move_MOTOR(controller, newPosition) == ERROR) {
    468c:	8f 2d       	mov	r24, r15
    468e:	0e 94 11 20 	call	0x4022	; 0x4022 <move_MOTOR>
    4692:	18 2f       	mov	r17, r24
    4694:	83 36       	cpi	r24, 0x63	; 99
    4696:	d1 f4       	brne	.+52     	; 0x46cc <move_MOTOR_CMD+0x28c>
		sprintf(strbuf, fmt2);
    4698:	ce 01       	movw	r24, r28
    469a:	85 56       	subi	r24, 0x65	; 101
    469c:	9f 4f       	sbci	r25, 0xFF	; 255
    469e:	9f 93       	push	r25
    46a0:	8f 93       	push	r24
    46a2:	8a 59       	subi	r24, 0x9A	; 154
    46a4:	91 09       	sbc	r25, r1
    46a6:	7c 01       	movw	r14, r24
    46a8:	9f 93       	push	r25
    46aa:	8f 93       	push	r24
    46ac:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
		printError(ERR_MTR, strbuf);
    46b0:	b7 01       	movw	r22, r14
    46b2:	86 e3       	ldi	r24, 0x36	; 54
    46b4:	91 e0       	ldi	r25, 0x01	; 1
    46b6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	0f 90       	pop	r0
    46c2:	05 c0       	rjmp	.+10     	; 0x46ce <move_MOTOR_CMD+0x28e>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    46c4:	10 e0       	ldi	r17, 0x00	; 0
    46c6:	03 c0       	rjmp	.+6      	; 0x46ce <move_MOTOR_CMD+0x28e>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    46c8:	10 e0       	ldi	r17, 0x00	; 0
    46ca:	01 c0       	rjmp	.+2      	; 0x46ce <move_MOTOR_CMD+0x28e>
		sprintf(strbuf, fmt2);
		printError(ERR_MTR, strbuf);
		return(ERROR);
	}

	return(NOERROR);
    46cc:	10 e0       	ldi	r17, 0x00	; 0

}
    46ce:	81 2f       	mov	r24, r17
    46d0:	cc 51       	subi	r28, 0x1C	; 28
    46d2:	df 4f       	sbci	r29, 0xFF	; 255
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	de bf       	out	0x3e, r29	; 62
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	ff 90       	pop	r15
    46e2:	ef 90       	pop	r14
    46e4:	df 90       	pop	r13
    46e6:	cf 90       	pop	r12
    46e8:	08 95       	ret

000046ea <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    46ea:	cf 92       	push	r12
    46ec:	df 92       	push	r13
    46ee:	ef 92       	push	r14
    46f0:	ff 92       	push	r15
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	c1 5e       	subi	r28, 0xE1	; 225
    4700:	d1 09       	sbc	r29, r1
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	char object;
	uint8_t mtraddr;
	int32_t newEncoderValue;
	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
    4706:	93 e2       	ldi	r25, 0x23	; 35
    4708:	e6 e9       	ldi	r30, 0x96	; 150
    470a:	fd ea       	ldi	r31, 0xAD	; 173
    470c:	de 01       	movw	r26, r28
    470e:	af 5a       	subi	r26, 0xAF	; 175
    4710:	bf 4f       	sbci	r27, 0xFF	; 255
    4712:	01 90       	ld	r0, Z+
    4714:	0d 92       	st	X+, r0
    4716:	9a 95       	dec	r25
    4718:	e1 f7       	brne	.-8      	; 0x4712 <set+0x28>
	const char fmt1[] = "set: bad time format";
    471a:	95 e1       	ldi	r25, 0x15	; 21
    471c:	e9 eb       	ldi	r30, 0xB9	; 185
    471e:	fd ea       	ldi	r31, 0xAD	; 173
    4720:	de 01       	movw	r26, r28
    4722:	ac 58       	subi	r26, 0x8C	; 140
    4724:	bf 4f       	sbci	r27, 0xFF	; 255
    4726:	01 90       	ld	r0, Z+
    4728:	0d 92       	st	X+, r0
    472a:	9a 95       	dec	r25
    472c:	e1 f7       	brne	.-8      	; 0x4726 <set+0x3c>
	const char fmt2[] = "set: put_time error";
    472e:	94 e1       	ldi	r25, 0x14	; 20
    4730:	ee ec       	ldi	r30, 0xCE	; 206
    4732:	fd ea       	ldi	r31, 0xAD	; 173
    4734:	de 01       	movw	r26, r28
    4736:	a7 57       	subi	r26, 0x77	; 119
    4738:	bf 4f       	sbci	r27, 0xFF	; 255
    473a:	01 90       	ld	r0, Z+
    473c:	0d 92       	st	X+, r0
    473e:	9a 95       	dec	r25
    4740:	e1 f7       	brne	.-8      	; 0x473a <set+0x50>
	const char fmt3[] = "set: write_FRAM error";
    4742:	96 e1       	ldi	r25, 0x16	; 22
    4744:	e2 ee       	ldi	r30, 0xE2	; 226
    4746:	fd ea       	ldi	r31, 0xAD	; 173
    4748:	de 01       	movw	r26, r28
    474a:	a3 56       	subi	r26, 0x63	; 99
    474c:	bf 4f       	sbci	r27, 0xFF	; 255
    474e:	01 90       	ld	r0, Z+
    4750:	0d 92       	st	X+, r0
    4752:	9a 95       	dec	r25
    4754:	e1 f7       	brne	.-8      	; 0x474e <set+0x64>
	const char fmt4[] = "set: what?";
    4756:	9b e0       	ldi	r25, 0x0B	; 11
    4758:	e8 ef       	ldi	r30, 0xF8	; 248
    475a:	fd ea       	ldi	r31, 0xAD	; 173
    475c:	de 01       	movw	r26, r28
    475e:	ad 54       	subi	r26, 0x4D	; 77
    4760:	bf 4f       	sbci	r27, 0xFF	; 255
    4762:	01 90       	ld	r0, Z+
    4764:	0d 92       	st	X+, r0
    4766:	9a 95       	dec	r25
    4768:	e1 f7       	brne	.-8      	; 0x4762 <set+0x78>
	const char fmt5[] = "set: encoder value out of range %ld";
    476a:	94 e2       	ldi	r25, 0x24	; 36
    476c:	e3 e0       	ldi	r30, 0x03	; 3
    476e:	fe ea       	ldi	r31, 0xAE	; 174
    4770:	de 01       	movw	r26, r28
    4772:	a2 54       	subi	r26, 0x42	; 66
    4774:	bf 4f       	sbci	r27, 0xFF	; 255
    4776:	01 90       	ld	r0, Z+
    4778:	0d 92       	st	X+, r0
    477a:	9a 95       	dec	r25
    477c:	e1 f7       	brne	.-8      	; 0x4776 <set+0x8c>

	object = pcmd[cstack].cobject;
    477e:	28 2f       	mov	r18, r24
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	84 e3       	ldi	r24, 0x34	; 52
    4784:	82 9f       	mul	r24, r18
    4786:	f0 01       	movw	r30, r0
    4788:	83 9f       	mul	r24, r19
    478a:	f0 0d       	add	r31, r0
    478c:	11 24       	eor	r1, r1
    478e:	e3 5f       	subi	r30, 0xF3	; 243
    4790:	f7 4d       	sbci	r31, 0xD7	; 215
    4792:	01 81       	ldd	r16, Z+1	; 0x01
	switch(object) {
    4794:	01 36       	cpi	r16, 0x61	; 97
    4796:	08 f4       	brcc	.+2      	; 0x479a <set+0xb0>
    4798:	de c0       	rjmp	.+444    	; 0x4956 <set+0x26c>
    479a:	04 36       	cpi	r16, 0x64	; 100
    479c:	20 f0       	brcs	.+8      	; 0x47a6 <set+0xbc>
    479e:	04 37       	cpi	r16, 0x74	; 116
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <set+0xba>
    47a2:	72 c0       	rjmp	.+228    	; 0x4888 <set+0x19e>
    47a4:	d8 c0       	rjmp	.+432    	; 0x4956 <set+0x26c>
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    47a6:	84 e3       	ldi	r24, 0x34	; 52
    47a8:	82 9f       	mul	r24, r18
    47aa:	f0 01       	movw	r30, r0
    47ac:	83 9f       	mul	r24, r19
    47ae:	f0 0d       	add	r31, r0
    47b0:	11 24       	eor	r1, r1
    47b2:	e3 5f       	subi	r30, 0xF3	; 243
    47b4:	f7 4d       	sbci	r31, 0xD7	; 215
    47b6:	82 81       	ldd	r24, Z+2	; 0x02
    47b8:	88 23       	and	r24, r24
    47ba:	09 f4       	brne	.+2      	; 0x47be <set+0xd4>
    47bc:	e3 c0       	rjmp	.+454    	; 0x4984 <set+0x29a>
				return(NOERROR);
			}
			newEncoderValue = atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON;
    47be:	44 e3       	ldi	r20, 0x34	; 52
    47c0:	42 9f       	mul	r20, r18
    47c2:	c0 01       	movw	r24, r0
    47c4:	43 9f       	mul	r20, r19
    47c6:	90 0d       	add	r25, r0
    47c8:	11 24       	eor	r1, r1
    47ca:	81 5f       	subi	r24, 0xF1	; 241
    47cc:	97 4d       	sbci	r25, 0xD7	; 215
    47ce:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <atol>
    47d2:	9b 01       	movw	r18, r22
    47d4:	ac 01       	movw	r20, r24
    47d6:	ab e1       	ldi	r26, 0x1B	; 27
    47d8:	b1 e0       	ldi	r27, 0x01	; 1
    47da:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__muluhisi3>
			if (newEncoderValue > PID_MAXPOS || newEncoderValue < PID_MINPOS) {
    47de:	6b 01       	movw	r12, r22
    47e0:	7c 01       	movw	r14, r24
    47e2:	20 e5       	ldi	r18, 0x50	; 80
    47e4:	c2 0e       	add	r12, r18
    47e6:	28 ef       	ldi	r18, 0xF8	; 248
    47e8:	d2 1e       	adc	r13, r18
    47ea:	2c e0       	ldi	r18, 0x0C	; 12
    47ec:	e2 1e       	adc	r14, r18
    47ee:	f1 1c       	adc	r15, r1
    47f0:	31 ea       	ldi	r19, 0xA1	; 161
    47f2:	c3 16       	cp	r12, r19
    47f4:	30 ef       	ldi	r19, 0xF0	; 240
    47f6:	d3 06       	cpc	r13, r19
    47f8:	39 e1       	ldi	r19, 0x19	; 25
    47fa:	e3 06       	cpc	r14, r19
    47fc:	f1 04       	cpc	r15, r1
    47fe:	f8 f0       	brcs	.+62     	; 0x483e <set+0x154>
				sprintf(strbuf, fmt5, newEncoderValue/ENC_COUNTS_PER_MICRON);
    4800:	2b e1       	ldi	r18, 0x1B	; 27
    4802:	31 e0       	ldi	r19, 0x01	; 1
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	50 e0       	ldi	r21, 0x00	; 0
    4808:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__divmodsi4>
    480c:	5f 93       	push	r21
    480e:	4f 93       	push	r20
    4810:	3f 93       	push	r19
    4812:	2f 93       	push	r18
    4814:	ce 01       	movw	r24, r28
    4816:	82 54       	subi	r24, 0x42	; 66
    4818:	9f 4f       	sbci	r25, 0xFF	; 255
    481a:	9f 93       	push	r25
    481c:	8f 93       	push	r24
    481e:	8e 01       	movw	r16, r28
    4820:	0f 5f       	subi	r16, 0xFF	; 255
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
    4824:	1f 93       	push	r17
    4826:	0f 93       	push	r16
    4828:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_MTR, strbuf);
    482c:	b8 01       	movw	r22, r16
    482e:	86 e3       	ldi	r24, 0x36	; 54
    4830:	91 e0       	ldi	r25, 0x01	; 1
    4832:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    4836:	cd bf       	out	0x3d, r28	; 61
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	13 e6       	ldi	r17, 0x63	; 99
    483c:	a8 c0       	rjmp	.+336    	; 0x498e <set+0x2a4>
			}
			mtraddr = object + 31;
			if (put_MOTOR_ENCODER(mtraddr, newEncoderValue) == ERROR) {
    483e:	ab 01       	movw	r20, r22
    4840:	bc 01       	movw	r22, r24
    4842:	8f e1       	ldi	r24, 0x1F	; 31
    4844:	80 0f       	add	r24, r16
    4846:	0e 94 43 21 	call	0x4286	; 0x4286 <put_MOTOR_ENCODER>
    484a:	18 2f       	mov	r17, r24
    484c:	83 36       	cpi	r24, 0x63	; 99
    484e:	09 f0       	breq	.+2      	; 0x4852 <set+0x168>
    4850:	9b c0       	rjmp	.+310    	; 0x4988 <set+0x29e>
				sprintf(strbuf, fmt0, object);
    4852:	1f 92       	push	r1
    4854:	0f 93       	push	r16
    4856:	ce 01       	movw	r24, r28
    4858:	8f 5a       	subi	r24, 0xAF	; 175
    485a:	9f 4f       	sbci	r25, 0xFF	; 255
    485c:	9f 93       	push	r25
    485e:	8f 93       	push	r24
    4860:	9e 01       	movw	r18, r28
    4862:	2f 5f       	subi	r18, 0xFF	; 255
    4864:	3f 4f       	sbci	r19, 0xFF	; 255
    4866:	79 01       	movw	r14, r18
    4868:	3f 93       	push	r19
    486a:	2f 93       	push	r18
    486c:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_MTR, strbuf);
    4870:	b7 01       	movw	r22, r14
    4872:	86 e3       	ldi	r24, 0x36	; 54
    4874:	91 e0       	ldi	r25, 0x01	; 1
    4876:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	83 c0       	rjmp	.+262    	; 0x498e <set+0x2a4>
			}
			break;

		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    4888:	44 e3       	ldi	r20, 0x34	; 52
    488a:	42 9f       	mul	r20, r18
    488c:	c0 01       	movw	r24, r0
    488e:	43 9f       	mul	r20, r19
    4890:	90 0d       	add	r25, r0
    4892:	11 24       	eor	r1, r1
    4894:	9c 01       	movw	r18, r24
    4896:	21 5f       	subi	r18, 0xF1	; 241
    4898:	37 4d       	sbci	r19, 0xD7	; 215
    489a:	79 01       	movw	r14, r18
    489c:	f9 01       	movw	r30, r18
    489e:	01 90       	ld	r0, Z+
    48a0:	00 20       	and	r0, r0
    48a2:	e9 f7       	brne	.-6      	; 0x489e <set+0x1b4>
    48a4:	31 97       	sbiw	r30, 0x01	; 1
    48a6:	e2 1b       	sub	r30, r18
    48a8:	f3 0b       	sbc	r31, r19
    48aa:	73 97       	sbiw	r30, 0x13	; 19
    48ac:	b9 f0       	breq	.+46     	; 0x48dc <set+0x1f2>
				sprintf(strbuf, fmt1);
    48ae:	ce 01       	movw	r24, r28
    48b0:	8c 58       	subi	r24, 0x8C	; 140
    48b2:	9f 4f       	sbci	r25, 0xFF	; 255
    48b4:	9f 93       	push	r25
    48b6:	8f 93       	push	r24
    48b8:	8e 01       	movw	r16, r28
    48ba:	0f 5f       	subi	r16, 0xFF	; 255
    48bc:	1f 4f       	sbci	r17, 0xFF	; 255
    48be:	1f 93       	push	r17
    48c0:	0f 93       	push	r16
    48c2:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_SETTIME, strbuf);
    48c6:	b8 01       	movw	r22, r16
    48c8:	8a e5       	ldi	r24, 0x5A	; 90
    48ca:	92 e0       	ldi	r25, 0x02	; 2
    48cc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	13 e6       	ldi	r17, 0x63	; 99
    48da:	59 c0       	rjmp	.+178    	; 0x498e <set+0x2a4>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    48dc:	c9 01       	movw	r24, r18
    48de:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <put_time>
    48e2:	18 2f       	mov	r17, r24
    48e4:	83 36       	cpi	r24, 0x63	; 99
    48e6:	b1 f4       	brne	.+44     	; 0x4914 <set+0x22a>
				sprintf(strbuf, fmt2);
    48e8:	ce 01       	movw	r24, r28
    48ea:	87 57       	subi	r24, 0x77	; 119
    48ec:	9f 4f       	sbci	r25, 0xFF	; 255
    48ee:	9f 93       	push	r25
    48f0:	8f 93       	push	r24
    48f2:	88 58       	subi	r24, 0x88	; 136
    48f4:	91 09       	sbc	r25, r1
    48f6:	7c 01       	movw	r14, r24
    48f8:	9f 93       	push	r25
    48fa:	8f 93       	push	r24
    48fc:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_ISO, strbuf);
    4900:	b7 01       	movw	r22, r14
    4902:	8b e5       	ldi	r24, 0x5B	; 91
    4904:	92 e0       	ldi	r25, 0x02	; 2
    4906:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    490a:	0f 90       	pop	r0
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	3d c0       	rjmp	.+122    	; 0x498e <set+0x2a4>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    4914:	24 e1       	ldi	r18, 0x14	; 20
    4916:	a7 01       	movw	r20, r14
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	70 e0       	ldi	r23, 0x00	; 0
    491c:	80 e5       	ldi	r24, 0x50	; 80
    491e:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    4922:	18 2f       	mov	r17, r24
    4924:	83 36       	cpi	r24, 0x63	; 99
    4926:	91 f5       	brne	.+100    	; 0x498c <set+0x2a2>
				sprintf(strbuf, fmt3);
    4928:	ce 01       	movw	r24, r28
    492a:	83 56       	subi	r24, 0x63	; 99
    492c:	9f 4f       	sbci	r25, 0xFF	; 255
    492e:	9f 93       	push	r25
    4930:	8f 93       	push	r24
    4932:	9e 01       	movw	r18, r28
    4934:	2f 5f       	subi	r18, 0xFF	; 255
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	79 01       	movw	r14, r18
    493a:	3f 93       	push	r19
    493c:	2f 93       	push	r18
    493e:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
				printError(ERR_ISO, strbuf);
    4942:	b7 01       	movw	r22, r14
    4944:	8b e5       	ldi	r24, 0x5B	; 91
    4946:	92 e0       	ldi	r25, 0x02	; 2
    4948:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	0f 90       	pop	r0
    4952:	0f 90       	pop	r0
    4954:	1c c0       	rjmp	.+56     	; 0x498e <set+0x2a4>
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    4956:	ce 01       	movw	r24, r28
    4958:	8d 54       	subi	r24, 0x4D	; 77
    495a:	9f 4f       	sbci	r25, 0xFF	; 255
    495c:	9f 93       	push	r25
    495e:	8f 93       	push	r24
    4960:	8e 01       	movw	r16, r28
    4962:	0f 5f       	subi	r16, 0xFF	; 255
    4964:	1f 4f       	sbci	r17, 0xFF	; 255
    4966:	1f 93       	push	r17
    4968:	0f 93       	push	r16
    496a:	0e 94 10 31 	call	0x6220	; 0x6220 <sprintf>
			printError(ERR_SET, strbuf);
    496e:	b8 01       	movw	r22, r16
    4970:	89 e5       	ldi	r24, 0x59	; 89
    4972:	92 e0       	ldi	r25, 0x02	; 2
    4974:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	13 e6       	ldi	r17, 0x63	; 99
    4982:	05 c0       	rjmp	.+10     	; 0x498e <set+0x2a4>
	switch(object) {
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
				return(NOERROR);
    4984:	10 e0       	ldi	r17, 0x00	; 0
    4986:	03 c0       	rjmp	.+6      	; 0x498e <set+0x2a4>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    4988:	10 e0       	ldi	r17, 0x00	; 0
    498a:	01 c0       	rjmp	.+2      	; 0x498e <set+0x2a4>
    498c:	10 e0       	ldi	r17, 0x00	; 0

}
    498e:	81 2f       	mov	r24, r17
    4990:	cf 51       	subi	r28, 0x1F	; 31
    4992:	df 4f       	sbci	r29, 0xFF	; 255
    4994:	cd bf       	out	0x3d, r28	; 61
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	df 91       	pop	r29
    499a:	cf 91       	pop	r28
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ff 90       	pop	r15
    49a2:	ef 90       	pop	r14
    49a4:	df 90       	pop	r13
    49a6:	cf 90       	pop	r12
    49a8:	08 95       	ret

000049aa <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    49aa:	cf 93       	push	r28
    49ac:	df 93       	push	r29
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <get_temperature+0x6>
    49b0:	00 d0       	rcall	.+0      	; 0x49b2 <get_temperature+0x8>
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    49b6:	83 30       	cpi	r24, 0x03	; 3
    49b8:	18 f0       	brcs	.+6      	; 0x49c0 <get_temperature+0x16>
    49ba:	83 30       	cpi	r24, 0x03	; 3
    49bc:	39 f0       	breq	.+14     	; 0x49cc <get_temperature+0x22>
    49be:	0b c0       	rjmp	.+22     	; 0x49d6 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    49c0:	be 01       	movw	r22, r28
    49c2:	6f 5f       	subi	r22, 0xFF	; 255
    49c4:	7f 4f       	sbci	r23, 0xFF	; 255
    49c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <read_AD590>
			break;
    49ca:	0d c0       	rjmp	.+26     	; 0x49e6 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    49cc:	ce 01       	movw	r24, r28
    49ce:	01 96       	adiw	r24, 0x01	; 1
    49d0:	0e 94 2f 0b 	call	0x165e	; 0x165e <read_MCP9808>
			break;
    49d4:	08 c0       	rjmp	.+16     	; 0x49e6 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	90 e8       	ldi	r25, 0x80	; 128
    49da:	a6 e2       	ldi	r26, 0x26	; 38
    49dc:	b4 ec       	ldi	r27, 0xC4	; 196
    49de:	89 83       	std	Y+1, r24	; 0x01
    49e0:	9a 83       	std	Y+2, r25	; 0x02
    49e2:	ab 83       	std	Y+3, r26	; 0x03
    49e4:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    49e6:	69 81       	ldd	r22, Y+1	; 0x01
    49e8:	7a 81       	ldd	r23, Y+2	; 0x02
    49ea:	8b 81       	ldd	r24, Y+3	; 0x03
    49ec:	9c 81       	ldd	r25, Y+4	; 0x04
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	48 e4       	ldi	r20, 0x48	; 72
    49f4:	52 ec       	ldi	r21, 0xC2	; 194
    49f6:	0e 94 a0 29 	call	0x5340	; 0x5340 <__cmpsf2>
    49fa:	88 23       	and	r24, r24
    49fc:	44 f4       	brge	.+16     	; 0x4a0e <get_temperature+0x64>
		temperature = BADFLOAT;
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e8       	ldi	r25, 0x80	; 128
    4a02:	a6 e2       	ldi	r26, 0x26	; 38
    4a04:	b4 ec       	ldi	r27, 0xC4	; 196
    4a06:	89 83       	std	Y+1, r24	; 0x01
    4a08:	9a 83       	std	Y+2, r25	; 0x02
    4a0a:	ab 83       	std	Y+3, r26	; 0x03
    4a0c:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    4a0e:	69 81       	ldd	r22, Y+1	; 0x01
    4a10:	7a 81       	ldd	r23, Y+2	; 0x02
    4a12:	8b 81       	ldd	r24, Y+3	; 0x03
    4a14:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4a16:	24 96       	adiw	r28, 0x04	; 4
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <testroutine>:
#include "initialize.h"
#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    4a22:	1f 93       	push	r17
    4a24:	cf 93       	push	r28
    4a26:	df 93       	push	r29
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
    4a2c:	c0 55       	subi	r28, 0x50	; 80
    4a2e:	d1 09       	sbc	r29, r1
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	de bf       	out	0x3e, r29	; 62
	
	char strbuf[80];
	uint8_t i;

//	write_MCP23008(HIGHCURRENT, IODIR, 0x00);
	for (i = 0; i < 5; i++) {
    4a34:	10 e0       	ldi	r17, 0x00	; 0
    4a36:	2a c0       	rjmp	.+84     	; 0x4a8c <testroutine+0x6a>
		if (write_MCP23008(HIGHCURRENT, OLAT, 0xFF) == ERROR) {
    4a38:	4f ef       	ldi	r20, 0xFF	; 255
    4a3a:	6a e0       	ldi	r22, 0x0A	; 10
    4a3c:	84 e2       	ldi	r24, 0x24	; 36
    4a3e:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    4a42:	83 36       	cpi	r24, 0x63	; 99
    4a44:	69 f4       	brne	.+26     	; 0x4a60 <testroutine+0x3e>
			sprintf(strbuf, "test routine error");
    4a46:	83 e1       	ldi	r24, 0x13	; 19
    4a48:	e7 e2       	ldi	r30, 0x27	; 39
    4a4a:	fe ea       	ldi	r31, 0xAE	; 174
    4a4c:	de 01       	movw	r26, r28
    4a4e:	11 96       	adiw	r26, 0x01	; 1
    4a50:	01 90       	ld	r0, Z+
    4a52:	0d 92       	st	X+, r0
    4a54:	8a 95       	dec	r24
    4a56:	e1 f7       	brne	.-8      	; 0x4a50 <testroutine+0x2e>
			printLine(strbuf);
    4a58:	ce 01       	movw	r24, r28
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
    4a60:	2a e2       	ldi	r18, 0x2A	; 42
    4a62:	8c e2       	ldi	r24, 0x2C	; 44
    4a64:	9a e0       	ldi	r25, 0x0A	; 10
    4a66:	21 50       	subi	r18, 0x01	; 1
    4a68:	80 40       	sbci	r24, 0x00	; 0
    4a6a:	90 40       	sbci	r25, 0x00	; 0
    4a6c:	e1 f7       	brne	.-8      	; 0x4a66 <testroutine+0x44>
    4a6e:	00 00       	nop
		}
		_delay_ms(1000);
		write_MCP23008(HIGHCURRENT, OLAT, 0x00);
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	6a e0       	ldi	r22, 0x0A	; 10
    4a74:	84 e2       	ldi	r24, 0x24	; 36
    4a76:	0e 94 01 0b 	call	0x1602	; 0x1602 <write_MCP23008>
    4a7a:	2a e2       	ldi	r18, 0x2A	; 42
    4a7c:	8c e2       	ldi	r24, 0x2C	; 44
    4a7e:	9a e0       	ldi	r25, 0x0A	; 10
    4a80:	21 50       	subi	r18, 0x01	; 1
    4a82:	80 40       	sbci	r24, 0x00	; 0
    4a84:	90 40       	sbci	r25, 0x00	; 0
    4a86:	e1 f7       	brne	.-8      	; 0x4a80 <testroutine+0x5e>
    4a88:	00 00       	nop
	
	char strbuf[80];
	uint8_t i;

//	write_MCP23008(HIGHCURRENT, IODIR, 0x00);
	for (i = 0; i < 5; i++) {
    4a8a:	1f 5f       	subi	r17, 0xFF	; 255
    4a8c:	15 30       	cpi	r17, 0x05	; 5
    4a8e:	a0 f2       	brcs	.-88     	; 0x4a38 <testroutine+0x16>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    4a90:	c0 5b       	subi	r28, 0xB0	; 176
    4a92:	df 4f       	sbci	r29, 0xFF	; 255
    4a94:	cd bf       	out	0x3d, r28	; 61
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	08 95       	ret

00004aa0 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    4aa0:	ac 01       	movw	r20, r24
    4aa2:	e0 e6       	ldi	r30, 0x60	; 96
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	94 8d       	ldd	r25, Z+28	; 0x1c
    4aa8:	9e 7f       	andi	r25, 0xFE	; 254
    4aaa:	88 ed       	ldi	r24, 0xD8	; 216
    4aac:	84 bf       	out	0x34, r24	; 52
    4aae:	94 8f       	std	Z+28, r25	; 0x1c
    4ab0:	01 c0       	rjmp	.+2      	; 0x4ab4 <init_RTC+0x14>
    4ab2:	00 00       	nop
    4ab4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    4ab8:	96 fd       	sbrc	r25, 6
    4aba:	fb cf       	rjmp	.-10     	; 0x4ab2 <init_RTC+0x12>
    4abc:	e0 e6       	ldi	r30, 0x60	; 96
    4abe:	f0 e0       	ldi	r31, 0x00	; 0
    4ac0:	94 8d       	ldd	r25, Z+28	; 0x1c
    4ac2:	9b 7f       	andi	r25, 0xFB	; 251
    4ac4:	28 ed       	ldi	r18, 0xD8	; 216
    4ac6:	24 bf       	out	0x34, r18	; 52
    4ac8:	94 8f       	std	Z+28, r25	; 0x1c
    4aca:	94 8d       	ldd	r25, Z+28	; 0x1c
    4acc:	91 60       	ori	r25, 0x01	; 1
    4ace:	24 bf       	out	0x34, r18	; 52
    4ad0:	94 8f       	std	Z+28, r25	; 0x1c
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <init_RTC+0x36>
    4ad4:	00 00       	nop
    4ad6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    4ada:	91 11       	cpse	r25, r1
    4adc:	fb cf       	rjmp	.-10     	; 0x4ad4 <init_RTC+0x34>
    4ade:	e0 e4       	ldi	r30, 0x40	; 64
    4ae0:	f1 e0       	ldi	r31, 0x01	; 1
    4ae2:	42 87       	std	Z+10, r20	; 0x0a
    4ae4:	53 87       	std	Z+11, r21	; 0x0b
    4ae6:	82 e0       	ldi	r24, 0x02	; 2
    4ae8:	87 83       	std	Z+7, r24	; 0x07
    4aea:	85 81       	ldd	r24, Z+5	; 0x05
    4aec:	81 60       	ori	r24, 0x01	; 1
    4aee:	85 83       	std	Z+5, r24	; 0x05
    4af0:	81 eb       	ldi	r24, 0xB1	; 177
    4af2:	80 83       	st	Z, r24
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	81 60       	ori	r24, 0x01	; 1
    4af8:	82 83       	std	Z+2, r24	; 0x02
    4afa:	08 95       	ret

00004afc <__vector_3>:
    4afc:	1f 92       	push	r1
    4afe:	0f 92       	push	r0
    4b00:	0f b6       	in	r0, 0x3f	; 63
    4b02:	0f 92       	push	r0
    4b04:	11 24       	eor	r1, r1
    4b06:	8f 93       	push	r24
    4b08:	9f 93       	push	r25
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    4b10:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerOLED>
    4b14:	90 91 17 2a 	lds	r25, 0x2A17	; 0x802a17 <timerOLED+0x1>
    4b18:	01 96       	adiw	r24, 0x01	; 1
    4b1a:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    4b1e:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>
    4b22:	80 e2       	ldi	r24, 0x20	; 32
    4b24:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    4b28:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <timerSAVEENCODER>
    4b32:	9f 91       	pop	r25
    4b34:	8f 91       	pop	r24
    4b36:	0f 90       	pop	r0
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <start_TCB0>:
    4b40:	25 e0       	ldi	r18, 0x05	; 5
    4b42:	3d e0       	ldi	r19, 0x0D	; 13
    4b44:	ac 01       	movw	r20, r24
    4b46:	42 9f       	mul	r20, r18
    4b48:	c0 01       	movw	r24, r0
    4b4a:	43 9f       	mul	r20, r19
    4b4c:	90 0d       	add	r25, r0
    4b4e:	52 9f       	mul	r21, r18
    4b50:	90 0d       	add	r25, r0
    4b52:	11 24       	eor	r1, r1
    4b54:	e0 e8       	ldi	r30, 0x80	; 128
    4b56:	fa e0       	ldi	r31, 0x0A	; 10
    4b58:	84 87       	std	Z+12, r24	; 0x0c
    4b5a:	95 87       	std	Z+13, r25	; 0x0d
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	85 83       	std	Z+5, r24	; 0x05
    4b60:	80 83       	st	Z, r24
    4b62:	08 95       	ret

00004b64 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    4b64:	1f 92       	push	r1
    4b66:	0f 92       	push	r0
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	0f 92       	push	r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	8f 93       	push	r24
    4b70:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	USART0_ticks++;
    4b78:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4b7c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4b80:	01 96       	adiw	r24, 0x01	; 1
    4b82:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    4b86:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
	USART1_ticks++;
    4b8a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4b8e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4b92:	01 96       	adiw	r24, 0x01	; 1
    4b94:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    4b98:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
	USART3_ticks++;
    4b9c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    4ba0:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    4ba4:	01 96       	adiw	r24, 0x01	; 1
    4ba6:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    4baa:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
	TWI_ticks++;
    4bae:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4bb2:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    4bbc:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>

    4bc0:	9f 91       	pop	r25
    4bc2:	8f 91       	pop	r24
    4bc4:	0f 90       	pop	r0
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	0f 90       	pop	r0
    4bca:	1f 90       	pop	r1
    4bcc:	18 95       	reti

00004bce <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    4bce:	e0 ea       	ldi	r30, 0xA0	; 160
    4bd0:	f8 e0       	ldi	r31, 0x08	; 8
    4bd2:	8b e0       	ldi	r24, 0x0B	; 11
    4bd4:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    4bd6:	83 81       	ldd	r24, Z+3	; 0x03
    4bd8:	81 60       	ori	r24, 0x01	; 1
    4bda:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    4bdc:	85 81       	ldd	r24, Z+5	; 0x05
    4bde:	81 60       	ori	r24, 0x01	; 1
    4be0:	85 83       	std	Z+5, r24	; 0x05
    4be2:	08 95       	ret

00004be4 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4be4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4be8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4bec:	0f c0       	rjmp	.+30     	; 0x4c0c <read_TWI+0x28>
		asm("nop");
    4bee:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    4bf0:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4bf4:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4bf8:	c3 97       	sbiw	r24, 0x33	; 51
    4bfa:	40 f0       	brcs	.+16     	; 0x4c0c <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    4bfc:	6a e3       	ldi	r22, 0x3A	; 58
    4bfe:	7e ea       	ldi	r23, 0xAE	; 174
    4c00:	81 e9       	ldi	r24, 0x91	; 145
    4c02:	91 e0       	ldi	r25, 0x01	; 1
    4c04:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(0xFF);
    4c08:	8f ef       	ldi	r24, 0xFF	; 255
    4c0a:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4c0c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c10:	88 23       	and	r24, r24
    4c12:	6c f7       	brge	.-38     	; 0x4bee <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    4c14:	e0 ea       	ldi	r30, 0xA0	; 160
    4c16:	f8 e0       	ldi	r31, 0x08	; 8
    4c18:	84 81       	ldd	r24, Z+4	; 0x04
    4c1a:	8b 7f       	andi	r24, 0xFB	; 251
    4c1c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    4c1e:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    4c20:	94 81       	ldd	r25, Z+4	; 0x04
    4c22:	92 60       	ori	r25, 0x02	; 2
    4c24:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    4c26:	08 95       	ret

00004c28 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4c28:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c2c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4c30:	0f c0       	rjmp	.+30     	; 0x4c50 <readlast_TWI+0x28>
		asm("nop");
    4c32:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    4c34:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c38:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c3c:	c3 97       	sbiw	r24, 0x33	; 51
    4c3e:	40 f0       	brcs	.+16     	; 0x4c50 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    4c40:	6b e4       	ldi	r22, 0x4B	; 75
    4c42:	7e ea       	ldi	r23, 0xAE	; 174
    4c44:	81 e9       	ldi	r24, 0x91	; 145
    4c46:	91 e0       	ldi	r25, 0x01	; 1
    4c48:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(0xFF);
    4c4c:	8f ef       	ldi	r24, 0xFF	; 255
    4c4e:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4c50:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c54:	88 23       	and	r24, r24
    4c56:	6c f7       	brge	.-38     	; 0x4c32 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    4c58:	e0 ea       	ldi	r30, 0xA0	; 160
    4c5a:	f8 e0       	ldi	r31, 0x08	; 8
    4c5c:	84 81       	ldd	r24, Z+4	; 0x04
    4c5e:	84 60       	ori	r24, 0x04	; 4
    4c60:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    4c62:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    4c64:	08 95       	ret

00004c66 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    4c66:	61 30       	cpi	r22, 0x01	; 1
    4c68:	39 f4       	brne	.+14     	; 0x4c78 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	88 0f       	add	r24, r24
    4c6e:	99 1f       	adc	r25, r25
    4c70:	81 60       	ori	r24, 0x01	; 1
    4c72:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    4c76:	03 c0       	rjmp	.+6      	; 0x4c7e <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    4c78:	88 0f       	add	r24, r24
    4c7a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    4c7e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c82:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4c86:	0f c0       	rjmp	.+30     	; 0x4ca6 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    4c88:	00 00       	nop
		if (TWI_ticks > 50) {
    4c8a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c8e:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c92:	c3 97       	sbiw	r24, 0x33	; 51
    4c94:	40 f0       	brcs	.+16     	; 0x4ca6 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    4c96:	6c e5       	ldi	r22, 0x5C	; 92
    4c98:	7e ea       	ldi	r23, 0xAE	; 174
    4c9a:	81 e9       	ldi	r24, 0x91	; 145
    4c9c:	91 e0       	ldi	r25, 0x01	; 1
    4c9e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4ca2:	83 e6       	ldi	r24, 0x63	; 99
    4ca4:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4ca6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4caa:	80 7c       	andi	r24, 0xC0	; 192
    4cac:	69 f3       	breq	.-38     	; 0x4c88 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    4cae:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4cb2:	82 ff       	sbrs	r24, 2
    4cb4:	08 c0       	rjmp	.+16     	; 0x4cc6 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    4cb6:	6e e6       	ldi	r22, 0x6E	; 110
    4cb8:	7e ea       	ldi	r23, 0xAE	; 174
    4cba:	81 e9       	ldi	r24, 0x91	; 145
    4cbc:	91 e0       	ldi	r25, 0x01	; 1
    4cbe:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4cc2:	83 e6       	ldi	r24, 0x63	; 99
    4cc4:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    4cc6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4cca:	83 ff       	sbrs	r24, 3
    4ccc:	08 c0       	rjmp	.+16     	; 0x4cde <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    4cce:	66 e7       	ldi	r22, 0x76	; 118
    4cd0:	7e ea       	ldi	r23, 0xAE	; 174
    4cd2:	81 e9       	ldi	r24, 0x91	; 145
    4cd4:	91 e0       	ldi	r25, 0x01	; 1
    4cd6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4cda:	83 e6       	ldi	r24, 0x63	; 99
    4cdc:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    4cde:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4ce2:	89 2f       	mov	r24, r25
    4ce4:	80 71       	andi	r24, 0x10	; 16
    4ce6:	94 ff       	sbrs	r25, 4
    4ce8:	07 c0       	rjmp	.+14     	; 0x4cf8 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    4cea:	66 e8       	ldi	r22, 0x86	; 134
    4cec:	7e ea       	ldi	r23, 0xAE	; 174
    4cee:	81 e9       	ldi	r24, 0x91	; 145
    4cf0:	91 e0       	ldi	r25, 0x01	; 1
    4cf2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4cf6:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    4cf8:	08 95       	ret

00004cfa <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    4cfa:	87 e0       	ldi	r24, 0x07	; 7
    4cfc:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    4d00:	08 95       	ret

00004d02 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    4d02:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4d06:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4d0a:	10 c0       	rjmp	.+32     	; 0x4d2c <write_TWI+0x2a>
		asm("nop");
    4d0c:	00 00       	nop
		if (TWI_ticks > 50) {
    4d0e:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    4d12:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4d16:	23 33       	cpi	r18, 0x33	; 51
    4d18:	31 05       	cpc	r19, r1
    4d1a:	40 f0       	brcs	.+16     	; 0x4d2c <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    4d1c:	6e e9       	ldi	r22, 0x9E	; 158
    4d1e:	7e ea       	ldi	r23, 0xAE	; 174
    4d20:	81 e9       	ldi	r24, 0x91	; 145
    4d22:	91 e0       	ldi	r25, 0x01	; 1
    4d24:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4d28:	83 e6       	ldi	r24, 0x63	; 99
    4d2a:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4d2c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d30:	96 ff       	sbrs	r25, 6
    4d32:	ec cf       	rjmp	.-40     	; 0x4d0c <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    4d34:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    4d38:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4d3c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4d40:	0f c0       	rjmp	.+30     	; 0x4d60 <write_TWI+0x5e>
		asm("nop");
    4d42:	00 00       	nop
		if (TWI_ticks > 50) {
    4d44:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4d48:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4d4c:	c3 97       	sbiw	r24, 0x33	; 51
    4d4e:	40 f0       	brcs	.+16     	; 0x4d60 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    4d50:	6f ea       	ldi	r22, 0xAF	; 175
    4d52:	7e ea       	ldi	r23, 0xAE	; 174
    4d54:	81 e9       	ldi	r24, 0x91	; 145
    4d56:	91 e0       	ldi	r25, 0x01	; 1
    4d58:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4d5c:	83 e6       	ldi	r24, 0x63	; 99
    4d5e:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4d60:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d64:	86 ff       	sbrs	r24, 6
    4d66:	ed cf       	rjmp	.-38     	; 0x4d42 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    4d68:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d6c:	89 2f       	mov	r24, r25
    4d6e:	80 71       	andi	r24, 0x10	; 16
    4d70:	94 ff       	sbrs	r25, 4
    4d72:	07 c0       	rjmp	.+14     	; 0x4d82 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    4d74:	60 ec       	ldi	r22, 0xC0	; 192
    4d76:	7e ea       	ldi	r23, 0xAE	; 174
    4d78:	81 e9       	ldi	r24, 0x91	; 145
    4d7a:	91 e0       	ldi	r25, 0x01	; 1
    4d7c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4d80:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    4d82:	08 95       	ret

00004d84 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    4d84:	e0 e0       	ldi	r30, 0x00	; 0
    4d86:	f4 e0       	ldi	r31, 0x04	; 4
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    4d8c:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    4d8e:	e0 e0       	ldi	r30, 0x00	; 0
    4d90:	f8 e0       	ldi	r31, 0x08	; 8
    4d92:	24 e7       	ldi	r18, 0x74	; 116
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	20 87       	std	Z+8, r18	; 0x08
    4d98:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4d9a:	95 81       	ldd	r25, Z+5	; 0x05
    4d9c:	90 68       	ori	r25, 0x80	; 128
    4d9e:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4da0:	96 81       	ldd	r25, Z+6	; 0x06
    4da2:	90 64       	ori	r25, 0x40	; 64
    4da4:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4da6:	96 81       	ldd	r25, Z+6	; 0x06
    4da8:	90 68       	ori	r25, 0x80	; 128
    4daa:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    4dac:	10 92 41 2f 	sts	0x2F41, r1	; 0x802f41 <send0_buf+0xfe>
	send0_buf.tail = 0;
    4db0:	10 92 42 2f 	sts	0x2F42, r1	; 0x802f42 <send0_buf+0xff>
	send0_buf.done = YES;
    4db4:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	recv0_buf.head = 0;
    4db8:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    4dbc:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    4dc0:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
	recv0_buf.length = 0;
    4dc4:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
	recv0_buf.done = NO;
    4dc8:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    4dcc:	e0 e4       	ldi	r30, 0x40	; 64
    4dce:	f4 e0       	ldi	r31, 0x04	; 4
    4dd0:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    4dd2:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4dd4:	e0 e2       	ldi	r30, 0x20	; 32
    4dd6:	f8 e0       	ldi	r31, 0x08	; 8
    4dd8:	2d e6       	ldi	r18, 0x6D	; 109
    4dda:	35 e0       	ldi	r19, 0x05	; 5
    4ddc:	20 87       	std	Z+8, r18	; 0x08
    4dde:	31 87       	std	Z+9, r19	; 0x09
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4de0:	95 81       	ldd	r25, Z+5	; 0x05
    4de2:	90 68       	ori	r25, 0x80	; 128
    4de4:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4de6:	96 81       	ldd	r25, Z+6	; 0x06
    4de8:	90 64       	ori	r25, 0x40	; 64
    4dea:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4dec:	96 81       	ldd	r25, Z+6	; 0x06
    4dee:	90 68       	ori	r25, 0x80	; 128
    4df0:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    4df2:	e0 e2       	ldi	r30, 0x20	; 32
    4df4:	f4 e0       	ldi	r31, 0x04	; 4
    4df6:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    4df8:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4dfa:	e0 e6       	ldi	r30, 0x60	; 96
    4dfc:	f8 e0       	ldi	r31, 0x08	; 8
    4dfe:	20 87       	std	Z+8, r18	; 0x08
    4e00:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    4e02:	96 81       	ldd	r25, Z+6	; 0x06
    4e04:	90 64       	ori	r25, 0x40	; 64
    4e06:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    4e08:	96 81       	ldd	r25, Z+6	; 0x06
    4e0a:	90 68       	ori	r25, 0x80	; 128
    4e0c:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    4e0e:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	recv3_buf.done = NO;
    4e12:	10 92 4a 30 	sts	0x304A, r1	; 0x80304a <recv3_buf+0x103>
    4e16:	08 95       	ret

00004e18 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    4e18:	0f 93       	push	r16
    4e1a:	1f 93       	push	r17
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	eb 01       	movw	r28, r22
    4e22:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4e24:	81 30       	cpi	r24, 0x01	; 1
    4e26:	b1 f1       	breq	.+108    	; 0x4e94 <send_USART+0x7c>
    4e28:	20 f0       	brcs	.+8      	; 0x4e32 <send_USART+0x1a>
    4e2a:	83 30       	cpi	r24, 0x03	; 3
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <send_USART+0x18>
    4e2e:	81 c0       	rjmp	.+258    	; 0x4f32 <send_USART+0x11a>
    4e30:	88 c0       	rjmp	.+272    	; 0x4f42 <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    4e32:	10 92 46 2f 	sts	0x2F46, r1	; 0x802f46 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	11 c0       	rjmp	.+34     	; 0x4e5c <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    4e3a:	e1 e4       	ldi	r30, 0x41	; 65
    4e3c:	ff e2       	ldi	r31, 0x2F	; 47
    4e3e:	80 81       	ld	r24, Z
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	38 81       	ld	r19, Y
    4e44:	dc 01       	movw	r26, r24
    4e46:	ad 5b       	subi	r26, 0xBD	; 189
    4e48:	b1 4d       	sbci	r27, 0xD1	; 209
    4e4a:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    4e4c:	01 96       	adiw	r24, 0x01	; 1
    4e4e:	6e ef       	ldi	r22, 0xFE	; 254
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
    4e56:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4e58:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    4e5a:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4e5c:	21 17       	cp	r18, r17
    4e5e:	68 f3       	brcs	.-38     	; 0x4e3a <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4e60:	e0 e0       	ldi	r30, 0x00	; 0
    4e62:	f8 e0       	ldi	r31, 0x08	; 8
    4e64:	85 81       	ldd	r24, Z+5	; 0x05
    4e66:	80 62       	ori	r24, 0x20	; 32
    4e68:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    4e6a:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    4e6e:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    4e72:	0b c0       	rjmp	.+22     	; 0x4e8a <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    4e74:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4e78:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4e7c:	85 36       	cpi	r24, 0x65	; 101
    4e7e:	91 05       	cpc	r25, r1
    4e80:	20 f0       	brcs	.+8      	; 0x4e8a <send_USART+0x72>
					send0_buf.done = YES;
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
					return;
    4e88:	5c c0       	rjmp	.+184    	; 0x4f42 <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    4e8a:	80 91 46 2f 	lds	r24, 0x2F46	; 0x802f46 <send0_buf+0x103>
    4e8e:	88 23       	and	r24, r24
    4e90:	89 f3       	breq	.-30     	; 0x4e74 <send_USART+0x5c>
    4e92:	57 c0       	rjmp	.+174    	; 0x4f42 <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    4e94:	64 2f       	mov	r22, r20
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	ce 01       	movw	r24, r28
    4e9a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <crc16>
    4e9e:	48 2f       	mov	r20, r24
    4ea0:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	11 c0       	rjmp	.+34     	; 0x4ec8 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    4ea6:	ed e4       	ldi	r30, 0x4D	; 77
    4ea8:	f2 e3       	ldi	r31, 0x32	; 50
    4eaa:	80 81       	ld	r24, Z
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	38 81       	ld	r19, Y
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	a1 5b       	subi	r26, 0xB1	; 177
    4eb4:	be 4c       	sbci	r27, 0xCE	; 206
    4eb6:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	6e ef       	ldi	r22, 0xFE	; 254
    4ebc:	70 e0       	ldi	r23, 0x00	; 0
    4ebe:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
    4ec2:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4ec4:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    4ec6:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4ec8:	21 17       	cp	r18, r17
    4eca:	68 f3       	brcs	.-38     	; 0x4ea6 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    4ecc:	ed e4       	ldi	r30, 0x4D	; 77
    4ece:	f2 e3       	ldi	r31, 0x32	; 50
    4ed0:	80 81       	ld	r24, Z
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	a1 5b       	subi	r26, 0xB1	; 177
    4ed8:	be 4c       	sbci	r27, 0xCE	; 206
    4eda:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4edc:	01 96       	adiw	r24, 0x01	; 1
    4ede:	2e ef       	ldi	r18, 0xFE	; 254
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	b9 01       	movw	r22, r18
    4ee4:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	dc 01       	movw	r26, r24
    4eec:	a1 5b       	subi	r26, 0xB1	; 177
    4eee:	be 4c       	sbci	r27, 0xCE	; 206
    4ef0:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4ef2:	01 96       	adiw	r24, 0x01	; 1
    4ef4:	b9 01       	movw	r22, r18
    4ef6:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
    4efa:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    4efc:	1e 5f       	subi	r17, 0xFE	; 254
    4efe:	10 93 4f 32 	sts	0x324F, r17	; 0x80324f <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f02:	e0 e2       	ldi	r30, 0x20	; 32
    4f04:	f8 e0       	ldi	r31, 0x08	; 8
    4f06:	85 81       	ldd	r24, Z+5	; 0x05
    4f08:	80 62       	ori	r24, 0x20	; 32
    4f0a:	85 83       	std	Z+5, r24	; 0x05
			break;
    4f0c:	1a c0       	rjmp	.+52     	; 0x4f42 <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    4f0e:	e9 e4       	ldi	r30, 0x49	; 73
    4f10:	f1 e3       	ldi	r31, 0x31	; 49
    4f12:	80 81       	ld	r24, Z
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	38 81       	ld	r19, Y
    4f18:	dc 01       	movw	r26, r24
    4f1a:	a5 5b       	subi	r26, 0xB5	; 181
    4f1c:	bf 4c       	sbci	r27, 0xCF	; 207
    4f1e:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    4f20:	01 96       	adiw	r24, 0x01	; 1
    4f22:	6e ef       	ldi	r22, 0xFE	; 254
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
    4f2a:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4f2c:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    4f2e:	21 96       	adiw	r28, 0x01	; 1
    4f30:	01 c0       	rjmp	.+2      	; 0x4f34 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4f32:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4f34:	21 17       	cp	r18, r17
    4f36:	58 f3       	brcs	.-42     	; 0x4f0e <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f38:	e0 e6       	ldi	r30, 0x60	; 96
    4f3a:	f8 e0       	ldi	r31, 0x08	; 8
    4f3c:	85 81       	ldd	r24, Z+5	; 0x05
    4f3e:	80 62       	ori	r24, 0x20	; 32
    4f40:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	1f 91       	pop	r17
    4f48:	0f 91       	pop	r16
    4f4a:	08 95       	ret

00004f4c <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    4f4c:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    4f4e:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    4f52:	60 93 39 2c 	sts	0x2C39, r22	; 0x802c39 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	08 c0       	rjmp	.+16     	; 0x4f6a <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    4f5a:	e9 2f       	mov	r30, r25
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	8c 91       	ld	r24, X
    4f60:	e5 5c       	subi	r30, 0xC5	; 197
    4f62:	f4 4d       	sbci	r31, 0xD4	; 212
    4f64:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    4f66:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    4f68:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    4f6a:	96 17       	cp	r25, r22
    4f6c:	b0 f3       	brcs	.-20     	; 0x4f5a <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    4f6e:	e0 e2       	ldi	r30, 0x20	; 32
    4f70:	f8 e0       	ldi	r31, 0x08	; 8
    4f72:	85 81       	ldd	r24, Z+5	; 0x05
    4f74:	80 62       	ori	r24, 0x20	; 32
    4f76:	85 83       	std	Z+5, r24	; 0x05
    4f78:	08 95       	ret

00004f7a <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    4f7a:	1f 92       	push	r1
    4f7c:	0f 92       	push	r0
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	0f 92       	push	r0
    4f82:	11 24       	eor	r1, r1
    4f84:	8f 93       	push	r24
    4f86:	af 93       	push	r26
    4f88:	bf 93       	push	r27
    4f8a:	ef 93       	push	r30
    4f8c:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    4f8e:	aa e3       	ldi	r26, 0x3A	; 58
    4f90:	bb e2       	ldi	r27, 0x2B	; 43
    4f92:	ec 91       	ld	r30, X
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	8e 0f       	add	r24, r30
    4f98:	8c 93       	st	X, r24
    4f9a:	f0 e0       	ldi	r31, 0x00	; 0
    4f9c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    4fa0:	e5 5c       	subi	r30, 0xC5	; 197
    4fa2:	f5 4d       	sbci	r31, 0xD5	; 213
    4fa4:	80 83       	st	Z, r24

}
    4fa6:	ff 91       	pop	r31
    4fa8:	ef 91       	pop	r30
    4faa:	bf 91       	pop	r27
    4fac:	af 91       	pop	r26
    4fae:	8f 91       	pop	r24
    4fb0:	0f 90       	pop	r0
    4fb2:	0f be       	out	0x3f, r0	; 63
    4fb4:	0f 90       	pop	r0
    4fb6:	1f 90       	pop	r1
    4fb8:	18 95       	reti

00004fba <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    4fba:	1f 92       	push	r1
    4fbc:	0f 92       	push	r0
    4fbe:	0f b6       	in	r0, 0x3f	; 63
    4fc0:	0f 92       	push	r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	8f 93       	push	r24
    4fc6:	9f 93       	push	r25
    4fc8:	af 93       	push	r26
    4fca:	bf 93       	push	r27
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	ef 93       	push	r30
    4fd2:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    4fd4:	a0 e2       	ldi	r26, 0x20	; 32
    4fd6:	b8 e0       	ldi	r27, 0x08	; 8
    4fd8:	15 96       	adiw	r26, 0x05	; 5
    4fda:	8c 91       	ld	r24, X
    4fdc:	15 97       	sbiw	r26, 0x05	; 5
    4fde:	8f 7d       	andi	r24, 0xDF	; 223
    4fe0:	15 96       	adiw	r26, 0x05	; 5
    4fe2:	8c 93       	st	X, r24
    4fe4:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    4fe6:	ca e3       	ldi	r28, 0x3A	; 58
    4fe8:	dc e2       	ldi	r29, 0x2C	; 44
    4fea:	e8 81       	ld	r30, Y
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	8e 0f       	add	r24, r30
    4ff0:	88 83       	st	Y, r24
    4ff2:	f0 e0       	ldi	r31, 0x00	; 0
    4ff4:	e5 5c       	subi	r30, 0xC5	; 197
    4ff6:	f4 4d       	sbci	r31, 0xD4	; 212
    4ff8:	90 81       	ld	r25, Z
    4ffa:	12 96       	adiw	r26, 0x02	; 2
    4ffc:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    4ffe:	90 91 39 2c 	lds	r25, 0x2C39	; 0x802c39 <ser_send1+0xfe>
    5002:	89 17       	cp	r24, r25
    5004:	28 f4       	brcc	.+10     	; 0x5010 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    5006:	e0 e2       	ldi	r30, 0x20	; 32
    5008:	f8 e0       	ldi	r31, 0x08	; 8
    500a:	85 81       	ldd	r24, Z+5	; 0x05
    500c:	80 62       	ori	r24, 0x20	; 32
    500e:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5010:	ff 91       	pop	r31
    5012:	ef 91       	pop	r30
    5014:	df 91       	pop	r29
    5016:	cf 91       	pop	r28
    5018:	bf 91       	pop	r27
    501a:	af 91       	pop	r26
    501c:	9f 91       	pop	r25
    501e:	8f 91       	pop	r24
    5020:	0f 90       	pop	r0
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	0f 90       	pop	r0
    5026:	1f 90       	pop	r1
    5028:	18 95       	reti

0000502a <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    502a:	1f 92       	push	r1
    502c:	0f 92       	push	r0
    502e:	0f b6       	in	r0, 0x3f	; 63
    5030:	0f 92       	push	r0
    5032:	11 24       	eor	r1, r1
    5034:	5f 93       	push	r21
    5036:	6f 93       	push	r22
    5038:	7f 93       	push	r23
    503a:	8f 93       	push	r24
    503c:	9f 93       	push	r25
    503e:	af 93       	push	r26
    5040:	bf 93       	push	r27
    5042:	ef 93       	push	r30
    5044:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5046:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    504a:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
    504e:	8d 3f       	cpi	r24, 0xFD	; 253
    5050:	10 f5       	brcc	.+68     	; 0x5096 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5052:	9d 30       	cpi	r25, 0x0D	; 13
    5054:	51 f4       	brne	.+20     	; 0x506a <__vector_17+0x40>
			recv0_buf.done = YES;
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	80 93 42 2e 	sts	0x2E42, r24	; 0x802e42 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    505c:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	e1 5c       	subi	r30, 0xC1	; 193
    5064:	f2 4d       	sbci	r31, 0xD2	; 210
    5066:	10 82       	st	Z, r1
    5068:	06 c0       	rjmp	.+12     	; 0x5076 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    506a:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	e1 5c       	subi	r30, 0xC1	; 193
    5072:	f2 4d       	sbci	r31, 0xD2	; 210
    5074:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5076:	e0 e4       	ldi	r30, 0x40	; 64
    5078:	fe e2       	ldi	r31, 0x2E	; 46
    507a:	80 81       	ld	r24, Z
    507c:	8f 5f       	subi	r24, 0xFF	; 255
    507e:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5080:	ed e3       	ldi	r30, 0x3D	; 61
    5082:	fe e2       	ldi	r31, 0x2E	; 46
    5084:	80 81       	ld	r24, Z
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	01 96       	adiw	r24, 0x01	; 1
    508a:	6e ef       	ldi	r22, 0xFE	; 254
    508c:	70 e0       	ldi	r23, 0x00	; 0
    508e:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__divmodhi4>
    5092:	80 83       	st	Z, r24
    5094:	0a c0       	rjmp	.+20     	; 0x50aa <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5096:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    509a:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    509e:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
		recv0_buf.length = 0;
    50a2:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
		recv0_buf.done = NO;
    50a6:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
	}
}
    50aa:	ff 91       	pop	r31
    50ac:	ef 91       	pop	r30
    50ae:	bf 91       	pop	r27
    50b0:	af 91       	pop	r26
    50b2:	9f 91       	pop	r25
    50b4:	8f 91       	pop	r24
    50b6:	7f 91       	pop	r23
    50b8:	6f 91       	pop	r22
    50ba:	5f 91       	pop	r21
    50bc:	0f 90       	pop	r0
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	0f 90       	pop	r0
    50c2:	1f 90       	pop	r1
    50c4:	18 95       	reti

000050c6 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    50c6:	1f 92       	push	r1
    50c8:	0f 92       	push	r0
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	0f 92       	push	r0
    50ce:	11 24       	eor	r1, r1
    50d0:	2f 93       	push	r18
    50d2:	8f 93       	push	r24
    50d4:	9f 93       	push	r25
    50d6:	ef 93       	push	r30
    50d8:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    50da:	e0 e0       	ldi	r30, 0x00	; 0
    50dc:	f8 e0       	ldi	r31, 0x08	; 8
    50de:	85 81       	ldd	r24, Z+5	; 0x05
    50e0:	8f 7d       	andi	r24, 0xDF	; 223
    50e2:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    50e4:	80 91 41 2f 	lds	r24, 0x2F41	; 0x802f41 <send0_buf+0xfe>
    50e8:	e0 91 42 2f 	lds	r30, 0x2F42	; 0x802f42 <send0_buf+0xff>
    50ec:	8e 17       	cp	r24, r30
    50ee:	d1 f0       	breq	.+52     	; 0x5124 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    50f0:	81 e0       	ldi	r24, 0x01	; 1
    50f2:	8e 0f       	add	r24, r30
    50f4:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
    50f8:	f0 e0       	ldi	r31, 0x00	; 0
    50fa:	ed 5b       	subi	r30, 0xBD	; 189
    50fc:	f1 4d       	sbci	r31, 0xD1	; 209
    50fe:	90 81       	ld	r25, Z
    5100:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5104:	91 e0       	ldi	r25, 0x01	; 1
    5106:	8e 3f       	cpi	r24, 0xFE	; 254
    5108:	08 f4       	brcc	.+2      	; 0x510c <__vector_18+0x46>
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	91 95       	neg	r25
    510e:	29 2f       	mov	r18, r25
    5110:	22 0f       	add	r18, r18
    5112:	82 1b       	sub	r24, r18
    5114:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5118:	e0 e0       	ldi	r30, 0x00	; 0
    511a:	f8 e0       	ldi	r31, 0x08	; 8
    511c:	85 81       	ldd	r24, Z+5	; 0x05
    511e:	80 62       	ori	r24, 0x20	; 32
    5120:	85 83       	std	Z+5, r24	; 0x05
    5122:	03 c0       	rjmp	.+6      	; 0x512a <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	}

}
    512a:	ff 91       	pop	r31
    512c:	ef 91       	pop	r30
    512e:	9f 91       	pop	r25
    5130:	8f 91       	pop	r24
    5132:	2f 91       	pop	r18
    5134:	0f 90       	pop	r0
    5136:	0f be       	out	0x3f, r0	; 63
    5138:	0f 90       	pop	r0
    513a:	1f 90       	pop	r1
    513c:	18 95       	reti

0000513e <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    513e:	1f 92       	push	r1
    5140:	0f 92       	push	r0
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	0f 92       	push	r0
    5146:	11 24       	eor	r1, r1
    5148:	8f 93       	push	r24
    514a:	9f 93       	push	r25
    514c:	af 93       	push	r26
    514e:	bf 93       	push	r27
    5150:	ef 93       	push	r30
    5152:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5154:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    5158:	8d 30       	cpi	r24, 0x0D	; 13
    515a:	21 f0       	breq	.+8      	; 0x5164 <__vector_37+0x26>
    515c:	e0 91 49 30 	lds	r30, 0x3049	; 0x803049 <recv3_buf+0x102>
    5160:	ed 3f       	cpi	r30, 0xFD	; 253
    5162:	78 f0       	brcs	.+30     	; 0x5182 <__vector_37+0x44>
		recv3_buf.done = YES;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    516a:	a9 e4       	ldi	r26, 0x49	; 73
    516c:	b0 e3       	ldi	r27, 0x30	; 48
    516e:	8c 91       	ld	r24, X
    5170:	e8 2f       	mov	r30, r24
    5172:	f0 e0       	ldi	r31, 0x00	; 0
    5174:	e9 5b       	subi	r30, 0xB9	; 185
    5176:	f0 4d       	sbci	r31, 0xD0	; 208
    5178:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    517a:	80 93 47 30 	sts	0x3047, r24	; 0x803047 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    517e:	1c 92       	st	X, r1
		return;
    5180:	08 c0       	rjmp	.+16     	; 0x5192 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    5182:	91 e0       	ldi	r25, 0x01	; 1
    5184:	9e 0f       	add	r25, r30
    5186:	90 93 49 30 	sts	0x3049, r25	; 0x803049 <recv3_buf+0x102>
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	e9 5b       	subi	r30, 0xB9	; 185
    518e:	f0 4d       	sbci	r31, 0xD0	; 208
    5190:	80 83       	st	Z, r24
	}

}
    5192:	ff 91       	pop	r31
    5194:	ef 91       	pop	r30
    5196:	bf 91       	pop	r27
    5198:	af 91       	pop	r26
    519a:	9f 91       	pop	r25
    519c:	8f 91       	pop	r24
    519e:	0f 90       	pop	r0
    51a0:	0f be       	out	0x3f, r0	; 63
    51a2:	0f 90       	pop	r0
    51a4:	1f 90       	pop	r1
    51a6:	18 95       	reti

000051a8 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    51a8:	1f 92       	push	r1
    51aa:	0f 92       	push	r0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	0f 92       	push	r0
    51b0:	11 24       	eor	r1, r1
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	af 93       	push	r26
    51b8:	bf 93       	push	r27
    51ba:	ef 93       	push	r30
    51bc:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    51be:	ad e4       	ldi	r26, 0x4D	; 77
    51c0:	b1 e3       	ldi	r27, 0x31	; 49
    51c2:	ec 91       	ld	r30, X
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	8e 0f       	add	r24, r30
    51c8:	8c 93       	st	X, r24
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	e5 5b       	subi	r30, 0xB5	; 181
    51ce:	ff 4c       	sbci	r31, 0xCF	; 207
    51d0:	90 81       	ld	r25, Z
    51d2:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    51d6:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <send3_buf+0x100>
    51da:	89 17       	cp	r24, r25
    51dc:	40 f0       	brcs	.+16     	; 0x51ee <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    51de:	e0 e6       	ldi	r30, 0x60	; 96
    51e0:	f8 e0       	ldi	r31, 0x08	; 8
    51e2:	85 81       	ldd	r24, Z+5	; 0x05
    51e4:	8f 7d       	andi	r24, 0xDF	; 223
    51e6:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	}

}
    51ee:	ff 91       	pop	r31
    51f0:	ef 91       	pop	r30
    51f2:	bf 91       	pop	r27
    51f4:	af 91       	pop	r26
    51f6:	9f 91       	pop	r25
    51f8:	8f 91       	pop	r24
    51fa:	0f 90       	pop	r0
    51fc:	0f be       	out	0x3f, r0	; 63
    51fe:	0f 90       	pop	r0
    5200:	1f 90       	pop	r1
    5202:	18 95       	reti

00005204 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    5204:	88 ed       	ldi	r24, 0xD8	; 216
    5206:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    520e:	08 95       	ret

00005210 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    5210:	1f 92       	push	r1
    5212:	0f 92       	push	r0
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	0f 92       	push	r0
    5218:	11 24       	eor	r1, r1
    521a:	2f 93       	push	r18
    521c:	3f 93       	push	r19
    521e:	4f 93       	push	r20
    5220:	5f 93       	push	r21
    5222:	6f 93       	push	r22
    5224:	7f 93       	push	r23
    5226:	8f 93       	push	r24
    5228:	9f 93       	push	r25
    522a:	af 93       	push	r26
    522c:	bf 93       	push	r27
    522e:	ef 93       	push	r30
    5230:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    5232:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    5236:	86 ff       	sbrs	r24, 6
    5238:	05 c0       	rjmp	.+10     	; 0x5244 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    523a:	80 e4       	ldi	r24, 0x40	; 64
    523c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    5240:	0e 94 02 29 	call	0x5204	; 0x5204 <reboot>
	}

}
    5244:	ff 91       	pop	r31
    5246:	ef 91       	pop	r30
    5248:	bf 91       	pop	r27
    524a:	af 91       	pop	r26
    524c:	9f 91       	pop	r25
    524e:	8f 91       	pop	r24
    5250:	7f 91       	pop	r23
    5252:	6f 91       	pop	r22
    5254:	5f 91       	pop	r21
    5256:	4f 91       	pop	r20
    5258:	3f 91       	pop	r19
    525a:	2f 91       	pop	r18
    525c:	0f 90       	pop	r0
    525e:	0f be       	out	0x3f, r0	; 63
    5260:	0f 90       	pop	r0
    5262:	1f 90       	pop	r1
    5264:	18 95       	reti

00005266 <__subsf3>:
    5266:	50 58       	subi	r21, 0x80	; 128

00005268 <__addsf3>:
    5268:	bb 27       	eor	r27, r27
    526a:	aa 27       	eor	r26, r26
    526c:	0e 94 4b 29 	call	0x5296	; 0x5296 <__addsf3x>
    5270:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <__fp_round>
    5274:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fp_pscA>
    5278:	38 f0       	brcs	.+14     	; 0x5288 <__addsf3+0x20>
    527a:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_pscB>
    527e:	20 f0       	brcs	.+8      	; 0x5288 <__addsf3+0x20>
    5280:	39 f4       	brne	.+14     	; 0x5290 <__addsf3+0x28>
    5282:	9f 3f       	cpi	r25, 0xFF	; 255
    5284:	19 f4       	brne	.+6      	; 0x528c <__addsf3+0x24>
    5286:	26 f4       	brtc	.+8      	; 0x5290 <__addsf3+0x28>
    5288:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__fp_nan>
    528c:	0e f4       	brtc	.+2      	; 0x5290 <__addsf3+0x28>
    528e:	e0 95       	com	r30
    5290:	e7 fb       	bst	r30, 7
    5292:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__fp_inf>

00005296 <__addsf3x>:
    5296:	e9 2f       	mov	r30, r25
    5298:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__fp_split3>
    529c:	58 f3       	brcs	.-42     	; 0x5274 <__addsf3+0xc>
    529e:	ba 17       	cp	r27, r26
    52a0:	62 07       	cpc	r22, r18
    52a2:	73 07       	cpc	r23, r19
    52a4:	84 07       	cpc	r24, r20
    52a6:	95 07       	cpc	r25, r21
    52a8:	20 f0       	brcs	.+8      	; 0x52b2 <__addsf3x+0x1c>
    52aa:	79 f4       	brne	.+30     	; 0x52ca <__addsf3x+0x34>
    52ac:	a6 f5       	brtc	.+104    	; 0x5316 <__addsf3x+0x80>
    52ae:	0c 94 c2 2a 	jmp	0x5584	; 0x5584 <__fp_zero>
    52b2:	0e f4       	brtc	.+2      	; 0x52b6 <__addsf3x+0x20>
    52b4:	e0 95       	com	r30
    52b6:	0b 2e       	mov	r0, r27
    52b8:	ba 2f       	mov	r27, r26
    52ba:	a0 2d       	mov	r26, r0
    52bc:	0b 01       	movw	r0, r22
    52be:	b9 01       	movw	r22, r18
    52c0:	90 01       	movw	r18, r0
    52c2:	0c 01       	movw	r0, r24
    52c4:	ca 01       	movw	r24, r20
    52c6:	a0 01       	movw	r20, r0
    52c8:	11 24       	eor	r1, r1
    52ca:	ff 27       	eor	r31, r31
    52cc:	59 1b       	sub	r21, r25
    52ce:	99 f0       	breq	.+38     	; 0x52f6 <__addsf3x+0x60>
    52d0:	59 3f       	cpi	r21, 0xF9	; 249
    52d2:	50 f4       	brcc	.+20     	; 0x52e8 <__addsf3x+0x52>
    52d4:	50 3e       	cpi	r21, 0xE0	; 224
    52d6:	68 f1       	brcs	.+90     	; 0x5332 <__addsf3x+0x9c>
    52d8:	1a 16       	cp	r1, r26
    52da:	f0 40       	sbci	r31, 0x00	; 0
    52dc:	a2 2f       	mov	r26, r18
    52de:	23 2f       	mov	r18, r19
    52e0:	34 2f       	mov	r19, r20
    52e2:	44 27       	eor	r20, r20
    52e4:	58 5f       	subi	r21, 0xF8	; 248
    52e6:	f3 cf       	rjmp	.-26     	; 0x52ce <__addsf3x+0x38>
    52e8:	46 95       	lsr	r20
    52ea:	37 95       	ror	r19
    52ec:	27 95       	ror	r18
    52ee:	a7 95       	ror	r26
    52f0:	f0 40       	sbci	r31, 0x00	; 0
    52f2:	53 95       	inc	r21
    52f4:	c9 f7       	brne	.-14     	; 0x52e8 <__addsf3x+0x52>
    52f6:	7e f4       	brtc	.+30     	; 0x5316 <__addsf3x+0x80>
    52f8:	1f 16       	cp	r1, r31
    52fa:	ba 0b       	sbc	r27, r26
    52fc:	62 0b       	sbc	r22, r18
    52fe:	73 0b       	sbc	r23, r19
    5300:	84 0b       	sbc	r24, r20
    5302:	ba f0       	brmi	.+46     	; 0x5332 <__addsf3x+0x9c>
    5304:	91 50       	subi	r25, 0x01	; 1
    5306:	a1 f0       	breq	.+40     	; 0x5330 <__addsf3x+0x9a>
    5308:	ff 0f       	add	r31, r31
    530a:	bb 1f       	adc	r27, r27
    530c:	66 1f       	adc	r22, r22
    530e:	77 1f       	adc	r23, r23
    5310:	88 1f       	adc	r24, r24
    5312:	c2 f7       	brpl	.-16     	; 0x5304 <__addsf3x+0x6e>
    5314:	0e c0       	rjmp	.+28     	; 0x5332 <__addsf3x+0x9c>
    5316:	ba 0f       	add	r27, r26
    5318:	62 1f       	adc	r22, r18
    531a:	73 1f       	adc	r23, r19
    531c:	84 1f       	adc	r24, r20
    531e:	48 f4       	brcc	.+18     	; 0x5332 <__addsf3x+0x9c>
    5320:	87 95       	ror	r24
    5322:	77 95       	ror	r23
    5324:	67 95       	ror	r22
    5326:	b7 95       	ror	r27
    5328:	f7 95       	ror	r31
    532a:	9e 3f       	cpi	r25, 0xFE	; 254
    532c:	08 f0       	brcs	.+2      	; 0x5330 <__addsf3x+0x9a>
    532e:	b0 cf       	rjmp	.-160    	; 0x5290 <__addsf3+0x28>
    5330:	93 95       	inc	r25
    5332:	88 0f       	add	r24, r24
    5334:	08 f0       	brcs	.+2      	; 0x5338 <__addsf3x+0xa2>
    5336:	99 27       	eor	r25, r25
    5338:	ee 0f       	add	r30, r30
    533a:	97 95       	ror	r25
    533c:	87 95       	ror	r24
    533e:	08 95       	ret

00005340 <__cmpsf2>:
    5340:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <__fp_cmp>
    5344:	08 f4       	brcc	.+2      	; 0x5348 <__cmpsf2+0x8>
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	08 95       	ret

0000534a <__divsf3>:
    534a:	0e 94 b9 29 	call	0x5372	; 0x5372 <__divsf3x>
    534e:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <__fp_round>
    5352:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_pscB>
    5356:	58 f0       	brcs	.+22     	; 0x536e <__divsf3+0x24>
    5358:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fp_pscA>
    535c:	40 f0       	brcs	.+16     	; 0x536e <__divsf3+0x24>
    535e:	29 f4       	brne	.+10     	; 0x536a <__divsf3+0x20>
    5360:	5f 3f       	cpi	r21, 0xFF	; 255
    5362:	29 f0       	breq	.+10     	; 0x536e <__divsf3+0x24>
    5364:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__fp_inf>
    5368:	51 11       	cpse	r21, r1
    536a:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__fp_szero>
    536e:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__fp_nan>

00005372 <__divsf3x>:
    5372:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__fp_split3>
    5376:	68 f3       	brcs	.-38     	; 0x5352 <__divsf3+0x8>

00005378 <__divsf3_pse>:
    5378:	99 23       	and	r25, r25
    537a:	b1 f3       	breq	.-20     	; 0x5368 <__divsf3+0x1e>
    537c:	55 23       	and	r21, r21
    537e:	91 f3       	breq	.-28     	; 0x5364 <__divsf3+0x1a>
    5380:	95 1b       	sub	r25, r21
    5382:	55 0b       	sbc	r21, r21
    5384:	bb 27       	eor	r27, r27
    5386:	aa 27       	eor	r26, r26
    5388:	62 17       	cp	r22, r18
    538a:	73 07       	cpc	r23, r19
    538c:	84 07       	cpc	r24, r20
    538e:	38 f0       	brcs	.+14     	; 0x539e <__divsf3_pse+0x26>
    5390:	9f 5f       	subi	r25, 0xFF	; 255
    5392:	5f 4f       	sbci	r21, 0xFF	; 255
    5394:	22 0f       	add	r18, r18
    5396:	33 1f       	adc	r19, r19
    5398:	44 1f       	adc	r20, r20
    539a:	aa 1f       	adc	r26, r26
    539c:	a9 f3       	breq	.-22     	; 0x5388 <__divsf3_pse+0x10>
    539e:	35 d0       	rcall	.+106    	; 0x540a <__divsf3_pse+0x92>
    53a0:	0e 2e       	mov	r0, r30
    53a2:	3a f0       	brmi	.+14     	; 0x53b2 <__divsf3_pse+0x3a>
    53a4:	e0 e8       	ldi	r30, 0x80	; 128
    53a6:	32 d0       	rcall	.+100    	; 0x540c <__divsf3_pse+0x94>
    53a8:	91 50       	subi	r25, 0x01	; 1
    53aa:	50 40       	sbci	r21, 0x00	; 0
    53ac:	e6 95       	lsr	r30
    53ae:	00 1c       	adc	r0, r0
    53b0:	ca f7       	brpl	.-14     	; 0x53a4 <__divsf3_pse+0x2c>
    53b2:	2b d0       	rcall	.+86     	; 0x540a <__divsf3_pse+0x92>
    53b4:	fe 2f       	mov	r31, r30
    53b6:	29 d0       	rcall	.+82     	; 0x540a <__divsf3_pse+0x92>
    53b8:	66 0f       	add	r22, r22
    53ba:	77 1f       	adc	r23, r23
    53bc:	88 1f       	adc	r24, r24
    53be:	bb 1f       	adc	r27, r27
    53c0:	26 17       	cp	r18, r22
    53c2:	37 07       	cpc	r19, r23
    53c4:	48 07       	cpc	r20, r24
    53c6:	ab 07       	cpc	r26, r27
    53c8:	b0 e8       	ldi	r27, 0x80	; 128
    53ca:	09 f0       	breq	.+2      	; 0x53ce <__divsf3_pse+0x56>
    53cc:	bb 0b       	sbc	r27, r27
    53ce:	80 2d       	mov	r24, r0
    53d0:	bf 01       	movw	r22, r30
    53d2:	ff 27       	eor	r31, r31
    53d4:	93 58       	subi	r25, 0x83	; 131
    53d6:	5f 4f       	sbci	r21, 0xFF	; 255
    53d8:	3a f0       	brmi	.+14     	; 0x53e8 <__divsf3_pse+0x70>
    53da:	9e 3f       	cpi	r25, 0xFE	; 254
    53dc:	51 05       	cpc	r21, r1
    53de:	78 f0       	brcs	.+30     	; 0x53fe <__divsf3_pse+0x86>
    53e0:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__fp_inf>
    53e4:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__fp_szero>
    53e8:	5f 3f       	cpi	r21, 0xFF	; 255
    53ea:	e4 f3       	brlt	.-8      	; 0x53e4 <__divsf3_pse+0x6c>
    53ec:	98 3e       	cpi	r25, 0xE8	; 232
    53ee:	d4 f3       	brlt	.-12     	; 0x53e4 <__divsf3_pse+0x6c>
    53f0:	86 95       	lsr	r24
    53f2:	77 95       	ror	r23
    53f4:	67 95       	ror	r22
    53f6:	b7 95       	ror	r27
    53f8:	f7 95       	ror	r31
    53fa:	9f 5f       	subi	r25, 0xFF	; 255
    53fc:	c9 f7       	brne	.-14     	; 0x53f0 <__divsf3_pse+0x78>
    53fe:	88 0f       	add	r24, r24
    5400:	91 1d       	adc	r25, r1
    5402:	96 95       	lsr	r25
    5404:	87 95       	ror	r24
    5406:	97 f9       	bld	r25, 7
    5408:	08 95       	ret
    540a:	e1 e0       	ldi	r30, 0x01	; 1
    540c:	66 0f       	add	r22, r22
    540e:	77 1f       	adc	r23, r23
    5410:	88 1f       	adc	r24, r24
    5412:	bb 1f       	adc	r27, r27
    5414:	62 17       	cp	r22, r18
    5416:	73 07       	cpc	r23, r19
    5418:	84 07       	cpc	r24, r20
    541a:	ba 07       	cpc	r27, r26
    541c:	20 f0       	brcs	.+8      	; 0x5426 <__divsf3_pse+0xae>
    541e:	62 1b       	sub	r22, r18
    5420:	73 0b       	sbc	r23, r19
    5422:	84 0b       	sbc	r24, r20
    5424:	ba 0b       	sbc	r27, r26
    5426:	ee 1f       	adc	r30, r30
    5428:	88 f7       	brcc	.-30     	; 0x540c <__divsf3_pse+0x94>
    542a:	e0 95       	com	r30
    542c:	08 95       	ret

0000542e <__floatunsisf>:
    542e:	e8 94       	clt
    5430:	09 c0       	rjmp	.+18     	; 0x5444 <__floatsisf+0x12>

00005432 <__floatsisf>:
    5432:	97 fb       	bst	r25, 7
    5434:	3e f4       	brtc	.+14     	; 0x5444 <__floatsisf+0x12>
    5436:	90 95       	com	r25
    5438:	80 95       	com	r24
    543a:	70 95       	com	r23
    543c:	61 95       	neg	r22
    543e:	7f 4f       	sbci	r23, 0xFF	; 255
    5440:	8f 4f       	sbci	r24, 0xFF	; 255
    5442:	9f 4f       	sbci	r25, 0xFF	; 255
    5444:	99 23       	and	r25, r25
    5446:	a9 f0       	breq	.+42     	; 0x5472 <__floatsisf+0x40>
    5448:	f9 2f       	mov	r31, r25
    544a:	96 e9       	ldi	r25, 0x96	; 150
    544c:	bb 27       	eor	r27, r27
    544e:	93 95       	inc	r25
    5450:	f6 95       	lsr	r31
    5452:	87 95       	ror	r24
    5454:	77 95       	ror	r23
    5456:	67 95       	ror	r22
    5458:	b7 95       	ror	r27
    545a:	f1 11       	cpse	r31, r1
    545c:	f8 cf       	rjmp	.-16     	; 0x544e <__floatsisf+0x1c>
    545e:	fa f4       	brpl	.+62     	; 0x549e <__floatsisf+0x6c>
    5460:	bb 0f       	add	r27, r27
    5462:	11 f4       	brne	.+4      	; 0x5468 <__floatsisf+0x36>
    5464:	60 ff       	sbrs	r22, 0
    5466:	1b c0       	rjmp	.+54     	; 0x549e <__floatsisf+0x6c>
    5468:	6f 5f       	subi	r22, 0xFF	; 255
    546a:	7f 4f       	sbci	r23, 0xFF	; 255
    546c:	8f 4f       	sbci	r24, 0xFF	; 255
    546e:	9f 4f       	sbci	r25, 0xFF	; 255
    5470:	16 c0       	rjmp	.+44     	; 0x549e <__floatsisf+0x6c>
    5472:	88 23       	and	r24, r24
    5474:	11 f0       	breq	.+4      	; 0x547a <__floatsisf+0x48>
    5476:	96 e9       	ldi	r25, 0x96	; 150
    5478:	11 c0       	rjmp	.+34     	; 0x549c <__floatsisf+0x6a>
    547a:	77 23       	and	r23, r23
    547c:	21 f0       	breq	.+8      	; 0x5486 <__floatsisf+0x54>
    547e:	9e e8       	ldi	r25, 0x8E	; 142
    5480:	87 2f       	mov	r24, r23
    5482:	76 2f       	mov	r23, r22
    5484:	05 c0       	rjmp	.+10     	; 0x5490 <__floatsisf+0x5e>
    5486:	66 23       	and	r22, r22
    5488:	71 f0       	breq	.+28     	; 0x54a6 <__floatsisf+0x74>
    548a:	96 e8       	ldi	r25, 0x86	; 134
    548c:	86 2f       	mov	r24, r22
    548e:	70 e0       	ldi	r23, 0x00	; 0
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	2a f0       	brmi	.+10     	; 0x549e <__floatsisf+0x6c>
    5494:	9a 95       	dec	r25
    5496:	66 0f       	add	r22, r22
    5498:	77 1f       	adc	r23, r23
    549a:	88 1f       	adc	r24, r24
    549c:	da f7       	brpl	.-10     	; 0x5494 <__floatsisf+0x62>
    549e:	88 0f       	add	r24, r24
    54a0:	96 95       	lsr	r25
    54a2:	87 95       	ror	r24
    54a4:	97 f9       	bld	r25, 7
    54a6:	08 95       	ret

000054a8 <__fp_cmp>:
    54a8:	99 0f       	add	r25, r25
    54aa:	00 08       	sbc	r0, r0
    54ac:	55 0f       	add	r21, r21
    54ae:	aa 0b       	sbc	r26, r26
    54b0:	e0 e8       	ldi	r30, 0x80	; 128
    54b2:	fe ef       	ldi	r31, 0xFE	; 254
    54b4:	16 16       	cp	r1, r22
    54b6:	17 06       	cpc	r1, r23
    54b8:	e8 07       	cpc	r30, r24
    54ba:	f9 07       	cpc	r31, r25
    54bc:	c0 f0       	brcs	.+48     	; 0x54ee <__fp_cmp+0x46>
    54be:	12 16       	cp	r1, r18
    54c0:	13 06       	cpc	r1, r19
    54c2:	e4 07       	cpc	r30, r20
    54c4:	f5 07       	cpc	r31, r21
    54c6:	98 f0       	brcs	.+38     	; 0x54ee <__fp_cmp+0x46>
    54c8:	62 1b       	sub	r22, r18
    54ca:	73 0b       	sbc	r23, r19
    54cc:	84 0b       	sbc	r24, r20
    54ce:	95 0b       	sbc	r25, r21
    54d0:	39 f4       	brne	.+14     	; 0x54e0 <__fp_cmp+0x38>
    54d2:	0a 26       	eor	r0, r26
    54d4:	61 f0       	breq	.+24     	; 0x54ee <__fp_cmp+0x46>
    54d6:	23 2b       	or	r18, r19
    54d8:	24 2b       	or	r18, r20
    54da:	25 2b       	or	r18, r21
    54dc:	21 f4       	brne	.+8      	; 0x54e6 <__fp_cmp+0x3e>
    54de:	08 95       	ret
    54e0:	0a 26       	eor	r0, r26
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <__fp_cmp+0x3e>
    54e4:	a1 40       	sbci	r26, 0x01	; 1
    54e6:	a6 95       	lsr	r26
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	81 1d       	adc	r24, r1
    54ec:	81 1d       	adc	r24, r1
    54ee:	08 95       	ret

000054f0 <__fp_inf>:
    54f0:	97 f9       	bld	r25, 7
    54f2:	9f 67       	ori	r25, 0x7F	; 127
    54f4:	80 e8       	ldi	r24, 0x80	; 128
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	60 e0       	ldi	r22, 0x00	; 0
    54fa:	08 95       	ret

000054fc <__fp_nan>:
    54fc:	9f ef       	ldi	r25, 0xFF	; 255
    54fe:	80 ec       	ldi	r24, 0xC0	; 192
    5500:	08 95       	ret

00005502 <__fp_pscA>:
    5502:	00 24       	eor	r0, r0
    5504:	0a 94       	dec	r0
    5506:	16 16       	cp	r1, r22
    5508:	17 06       	cpc	r1, r23
    550a:	18 06       	cpc	r1, r24
    550c:	09 06       	cpc	r0, r25
    550e:	08 95       	ret

00005510 <__fp_pscB>:
    5510:	00 24       	eor	r0, r0
    5512:	0a 94       	dec	r0
    5514:	12 16       	cp	r1, r18
    5516:	13 06       	cpc	r1, r19
    5518:	14 06       	cpc	r1, r20
    551a:	05 06       	cpc	r0, r21
    551c:	08 95       	ret

0000551e <__fp_round>:
    551e:	09 2e       	mov	r0, r25
    5520:	03 94       	inc	r0
    5522:	00 0c       	add	r0, r0
    5524:	11 f4       	brne	.+4      	; 0x552a <__fp_round+0xc>
    5526:	88 23       	and	r24, r24
    5528:	52 f0       	brmi	.+20     	; 0x553e <__fp_round+0x20>
    552a:	bb 0f       	add	r27, r27
    552c:	40 f4       	brcc	.+16     	; 0x553e <__fp_round+0x20>
    552e:	bf 2b       	or	r27, r31
    5530:	11 f4       	brne	.+4      	; 0x5536 <__fp_round+0x18>
    5532:	60 ff       	sbrs	r22, 0
    5534:	04 c0       	rjmp	.+8      	; 0x553e <__fp_round+0x20>
    5536:	6f 5f       	subi	r22, 0xFF	; 255
    5538:	7f 4f       	sbci	r23, 0xFF	; 255
    553a:	8f 4f       	sbci	r24, 0xFF	; 255
    553c:	9f 4f       	sbci	r25, 0xFF	; 255
    553e:	08 95       	ret

00005540 <__fp_split3>:
    5540:	57 fd       	sbrc	r21, 7
    5542:	90 58       	subi	r25, 0x80	; 128
    5544:	44 0f       	add	r20, r20
    5546:	55 1f       	adc	r21, r21
    5548:	59 f0       	breq	.+22     	; 0x5560 <__fp_splitA+0x10>
    554a:	5f 3f       	cpi	r21, 0xFF	; 255
    554c:	71 f0       	breq	.+28     	; 0x556a <__fp_splitA+0x1a>
    554e:	47 95       	ror	r20

00005550 <__fp_splitA>:
    5550:	88 0f       	add	r24, r24
    5552:	97 fb       	bst	r25, 7
    5554:	99 1f       	adc	r25, r25
    5556:	61 f0       	breq	.+24     	; 0x5570 <__fp_splitA+0x20>
    5558:	9f 3f       	cpi	r25, 0xFF	; 255
    555a:	79 f0       	breq	.+30     	; 0x557a <__fp_splitA+0x2a>
    555c:	87 95       	ror	r24
    555e:	08 95       	ret
    5560:	12 16       	cp	r1, r18
    5562:	13 06       	cpc	r1, r19
    5564:	14 06       	cpc	r1, r20
    5566:	55 1f       	adc	r21, r21
    5568:	f2 cf       	rjmp	.-28     	; 0x554e <__fp_split3+0xe>
    556a:	46 95       	lsr	r20
    556c:	f1 df       	rcall	.-30     	; 0x5550 <__fp_splitA>
    556e:	08 c0       	rjmp	.+16     	; 0x5580 <__fp_splitA+0x30>
    5570:	16 16       	cp	r1, r22
    5572:	17 06       	cpc	r1, r23
    5574:	18 06       	cpc	r1, r24
    5576:	99 1f       	adc	r25, r25
    5578:	f1 cf       	rjmp	.-30     	; 0x555c <__fp_splitA+0xc>
    557a:	86 95       	lsr	r24
    557c:	71 05       	cpc	r23, r1
    557e:	61 05       	cpc	r22, r1
    5580:	08 94       	sec
    5582:	08 95       	ret

00005584 <__fp_zero>:
    5584:	e8 94       	clt

00005586 <__fp_szero>:
    5586:	bb 27       	eor	r27, r27
    5588:	66 27       	eor	r22, r22
    558a:	77 27       	eor	r23, r23
    558c:	cb 01       	movw	r24, r22
    558e:	97 f9       	bld	r25, 7
    5590:	08 95       	ret

00005592 <__gesf2>:
    5592:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <__fp_cmp>
    5596:	08 f4       	brcc	.+2      	; 0x559a <__gesf2+0x8>
    5598:	8f ef       	ldi	r24, 0xFF	; 255
    559a:	08 95       	ret

0000559c <__mulsf3>:
    559c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__mulsf3x>
    55a0:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <__fp_round>
    55a4:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fp_pscA>
    55a8:	38 f0       	brcs	.+14     	; 0x55b8 <__mulsf3+0x1c>
    55aa:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_pscB>
    55ae:	20 f0       	brcs	.+8      	; 0x55b8 <__mulsf3+0x1c>
    55b0:	95 23       	and	r25, r21
    55b2:	11 f0       	breq	.+4      	; 0x55b8 <__mulsf3+0x1c>
    55b4:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__fp_inf>
    55b8:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__fp_nan>
    55bc:	11 24       	eor	r1, r1
    55be:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__fp_szero>

000055c2 <__mulsf3x>:
    55c2:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__fp_split3>
    55c6:	70 f3       	brcs	.-36     	; 0x55a4 <__mulsf3+0x8>

000055c8 <__mulsf3_pse>:
    55c8:	95 9f       	mul	r25, r21
    55ca:	c1 f3       	breq	.-16     	; 0x55bc <__mulsf3+0x20>
    55cc:	95 0f       	add	r25, r21
    55ce:	50 e0       	ldi	r21, 0x00	; 0
    55d0:	55 1f       	adc	r21, r21
    55d2:	62 9f       	mul	r22, r18
    55d4:	f0 01       	movw	r30, r0
    55d6:	72 9f       	mul	r23, r18
    55d8:	bb 27       	eor	r27, r27
    55da:	f0 0d       	add	r31, r0
    55dc:	b1 1d       	adc	r27, r1
    55de:	63 9f       	mul	r22, r19
    55e0:	aa 27       	eor	r26, r26
    55e2:	f0 0d       	add	r31, r0
    55e4:	b1 1d       	adc	r27, r1
    55e6:	aa 1f       	adc	r26, r26
    55e8:	64 9f       	mul	r22, r20
    55ea:	66 27       	eor	r22, r22
    55ec:	b0 0d       	add	r27, r0
    55ee:	a1 1d       	adc	r26, r1
    55f0:	66 1f       	adc	r22, r22
    55f2:	82 9f       	mul	r24, r18
    55f4:	22 27       	eor	r18, r18
    55f6:	b0 0d       	add	r27, r0
    55f8:	a1 1d       	adc	r26, r1
    55fa:	62 1f       	adc	r22, r18
    55fc:	73 9f       	mul	r23, r19
    55fe:	b0 0d       	add	r27, r0
    5600:	a1 1d       	adc	r26, r1
    5602:	62 1f       	adc	r22, r18
    5604:	83 9f       	mul	r24, r19
    5606:	a0 0d       	add	r26, r0
    5608:	61 1d       	adc	r22, r1
    560a:	22 1f       	adc	r18, r18
    560c:	74 9f       	mul	r23, r20
    560e:	33 27       	eor	r19, r19
    5610:	a0 0d       	add	r26, r0
    5612:	61 1d       	adc	r22, r1
    5614:	23 1f       	adc	r18, r19
    5616:	84 9f       	mul	r24, r20
    5618:	60 0d       	add	r22, r0
    561a:	21 1d       	adc	r18, r1
    561c:	82 2f       	mov	r24, r18
    561e:	76 2f       	mov	r23, r22
    5620:	6a 2f       	mov	r22, r26
    5622:	11 24       	eor	r1, r1
    5624:	9f 57       	subi	r25, 0x7F	; 127
    5626:	50 40       	sbci	r21, 0x00	; 0
    5628:	9a f0       	brmi	.+38     	; 0x5650 <__mulsf3_pse+0x88>
    562a:	f1 f0       	breq	.+60     	; 0x5668 <__mulsf3_pse+0xa0>
    562c:	88 23       	and	r24, r24
    562e:	4a f0       	brmi	.+18     	; 0x5642 <__mulsf3_pse+0x7a>
    5630:	ee 0f       	add	r30, r30
    5632:	ff 1f       	adc	r31, r31
    5634:	bb 1f       	adc	r27, r27
    5636:	66 1f       	adc	r22, r22
    5638:	77 1f       	adc	r23, r23
    563a:	88 1f       	adc	r24, r24
    563c:	91 50       	subi	r25, 0x01	; 1
    563e:	50 40       	sbci	r21, 0x00	; 0
    5640:	a9 f7       	brne	.-22     	; 0x562c <__mulsf3_pse+0x64>
    5642:	9e 3f       	cpi	r25, 0xFE	; 254
    5644:	51 05       	cpc	r21, r1
    5646:	80 f0       	brcs	.+32     	; 0x5668 <__mulsf3_pse+0xa0>
    5648:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__fp_inf>
    564c:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__fp_szero>
    5650:	5f 3f       	cpi	r21, 0xFF	; 255
    5652:	e4 f3       	brlt	.-8      	; 0x564c <__mulsf3_pse+0x84>
    5654:	98 3e       	cpi	r25, 0xE8	; 232
    5656:	d4 f3       	brlt	.-12     	; 0x564c <__mulsf3_pse+0x84>
    5658:	86 95       	lsr	r24
    565a:	77 95       	ror	r23
    565c:	67 95       	ror	r22
    565e:	b7 95       	ror	r27
    5660:	f7 95       	ror	r31
    5662:	e7 95       	ror	r30
    5664:	9f 5f       	subi	r25, 0xFF	; 255
    5666:	c1 f7       	brne	.-16     	; 0x5658 <__mulsf3_pse+0x90>
    5668:	fe 2b       	or	r31, r30
    566a:	88 0f       	add	r24, r24
    566c:	91 1d       	adc	r25, r1
    566e:	96 95       	lsr	r25
    5670:	87 95       	ror	r24
    5672:	97 f9       	bld	r25, 7
    5674:	08 95       	ret

00005676 <vfprintf>:
    5676:	a0 e1       	ldi	r26, 0x10	; 16
    5678:	b0 e0       	ldi	r27, 0x00	; 0
    567a:	e1 e4       	ldi	r30, 0x41	; 65
    567c:	fb e2       	ldi	r31, 0x2B	; 43
    567e:	0c 94 fc 2e 	jmp	0x5df8	; 0x5df8 <__prologue_saves__>
    5682:	7c 01       	movw	r14, r24
    5684:	1b 01       	movw	r2, r22
    5686:	6a 01       	movw	r12, r20
    5688:	fc 01       	movw	r30, r24
    568a:	16 82       	std	Z+6, r1	; 0x06
    568c:	17 82       	std	Z+7, r1	; 0x07
    568e:	83 81       	ldd	r24, Z+3	; 0x03
    5690:	81 ff       	sbrs	r24, 1
    5692:	44 c3       	rjmp	.+1672   	; 0x5d1c <vfprintf+0x6a6>
    5694:	9e 01       	movw	r18, r28
    5696:	2f 5f       	subi	r18, 0xFF	; 255
    5698:	3f 4f       	sbci	r19, 0xFF	; 255
    569a:	39 01       	movw	r6, r18
    569c:	f7 01       	movw	r30, r14
    569e:	93 81       	ldd	r25, Z+3	; 0x03
    56a0:	f1 01       	movw	r30, r2
    56a2:	93 fd       	sbrc	r25, 3
    56a4:	85 91       	lpm	r24, Z+
    56a6:	93 ff       	sbrs	r25, 3
    56a8:	81 91       	ld	r24, Z+
    56aa:	1f 01       	movw	r2, r30
    56ac:	88 23       	and	r24, r24
    56ae:	09 f4       	brne	.+2      	; 0x56b2 <vfprintf+0x3c>
    56b0:	31 c3       	rjmp	.+1634   	; 0x5d14 <vfprintf+0x69e>
    56b2:	85 32       	cpi	r24, 0x25	; 37
    56b4:	39 f4       	brne	.+14     	; 0x56c4 <vfprintf+0x4e>
    56b6:	93 fd       	sbrc	r25, 3
    56b8:	85 91       	lpm	r24, Z+
    56ba:	93 ff       	sbrs	r25, 3
    56bc:	81 91       	ld	r24, Z+
    56be:	1f 01       	movw	r2, r30
    56c0:	85 32       	cpi	r24, 0x25	; 37
    56c2:	39 f4       	brne	.+14     	; 0x56d2 <vfprintf+0x5c>
    56c4:	b7 01       	movw	r22, r14
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    56cc:	56 01       	movw	r10, r12
    56ce:	65 01       	movw	r12, r10
    56d0:	e5 cf       	rjmp	.-54     	; 0x569c <vfprintf+0x26>
    56d2:	10 e0       	ldi	r17, 0x00	; 0
    56d4:	51 2c       	mov	r5, r1
    56d6:	91 2c       	mov	r9, r1
    56d8:	ff e1       	ldi	r31, 0x1F	; 31
    56da:	f9 15       	cp	r31, r9
    56dc:	d8 f0       	brcs	.+54     	; 0x5714 <vfprintf+0x9e>
    56de:	8b 32       	cpi	r24, 0x2B	; 43
    56e0:	79 f0       	breq	.+30     	; 0x5700 <vfprintf+0x8a>
    56e2:	38 f4       	brcc	.+14     	; 0x56f2 <vfprintf+0x7c>
    56e4:	80 32       	cpi	r24, 0x20	; 32
    56e6:	79 f0       	breq	.+30     	; 0x5706 <vfprintf+0x90>
    56e8:	83 32       	cpi	r24, 0x23	; 35
    56ea:	a1 f4       	brne	.+40     	; 0x5714 <vfprintf+0x9e>
    56ec:	f9 2d       	mov	r31, r9
    56ee:	f0 61       	ori	r31, 0x10	; 16
    56f0:	2e c0       	rjmp	.+92     	; 0x574e <vfprintf+0xd8>
    56f2:	8d 32       	cpi	r24, 0x2D	; 45
    56f4:	61 f0       	breq	.+24     	; 0x570e <vfprintf+0x98>
    56f6:	80 33       	cpi	r24, 0x30	; 48
    56f8:	69 f4       	brne	.+26     	; 0x5714 <vfprintf+0x9e>
    56fa:	29 2d       	mov	r18, r9
    56fc:	21 60       	ori	r18, 0x01	; 1
    56fe:	2d c0       	rjmp	.+90     	; 0x575a <vfprintf+0xe4>
    5700:	39 2d       	mov	r19, r9
    5702:	32 60       	ori	r19, 0x02	; 2
    5704:	93 2e       	mov	r9, r19
    5706:	89 2d       	mov	r24, r9
    5708:	84 60       	ori	r24, 0x04	; 4
    570a:	98 2e       	mov	r9, r24
    570c:	2a c0       	rjmp	.+84     	; 0x5762 <vfprintf+0xec>
    570e:	e9 2d       	mov	r30, r9
    5710:	e8 60       	ori	r30, 0x08	; 8
    5712:	15 c0       	rjmp	.+42     	; 0x573e <vfprintf+0xc8>
    5714:	97 fc       	sbrc	r9, 7
    5716:	2d c0       	rjmp	.+90     	; 0x5772 <vfprintf+0xfc>
    5718:	20 ed       	ldi	r18, 0xD0	; 208
    571a:	28 0f       	add	r18, r24
    571c:	2a 30       	cpi	r18, 0x0A	; 10
    571e:	88 f4       	brcc	.+34     	; 0x5742 <vfprintf+0xcc>
    5720:	96 fe       	sbrs	r9, 6
    5722:	06 c0       	rjmp	.+12     	; 0x5730 <vfprintf+0xba>
    5724:	3a e0       	ldi	r19, 0x0A	; 10
    5726:	13 9f       	mul	r17, r19
    5728:	20 0d       	add	r18, r0
    572a:	11 24       	eor	r1, r1
    572c:	12 2f       	mov	r17, r18
    572e:	19 c0       	rjmp	.+50     	; 0x5762 <vfprintf+0xec>
    5730:	8a e0       	ldi	r24, 0x0A	; 10
    5732:	58 9e       	mul	r5, r24
    5734:	20 0d       	add	r18, r0
    5736:	11 24       	eor	r1, r1
    5738:	52 2e       	mov	r5, r18
    573a:	e9 2d       	mov	r30, r9
    573c:	e0 62       	ori	r30, 0x20	; 32
    573e:	9e 2e       	mov	r9, r30
    5740:	10 c0       	rjmp	.+32     	; 0x5762 <vfprintf+0xec>
    5742:	8e 32       	cpi	r24, 0x2E	; 46
    5744:	31 f4       	brne	.+12     	; 0x5752 <vfprintf+0xdc>
    5746:	96 fc       	sbrc	r9, 6
    5748:	e5 c2       	rjmp	.+1482   	; 0x5d14 <vfprintf+0x69e>
    574a:	f9 2d       	mov	r31, r9
    574c:	f0 64       	ori	r31, 0x40	; 64
    574e:	9f 2e       	mov	r9, r31
    5750:	08 c0       	rjmp	.+16     	; 0x5762 <vfprintf+0xec>
    5752:	8c 36       	cpi	r24, 0x6C	; 108
    5754:	21 f4       	brne	.+8      	; 0x575e <vfprintf+0xe8>
    5756:	29 2d       	mov	r18, r9
    5758:	20 68       	ori	r18, 0x80	; 128
    575a:	92 2e       	mov	r9, r18
    575c:	02 c0       	rjmp	.+4      	; 0x5762 <vfprintf+0xec>
    575e:	88 36       	cpi	r24, 0x68	; 104
    5760:	41 f4       	brne	.+16     	; 0x5772 <vfprintf+0xfc>
    5762:	f1 01       	movw	r30, r2
    5764:	93 fd       	sbrc	r25, 3
    5766:	85 91       	lpm	r24, Z+
    5768:	93 ff       	sbrs	r25, 3
    576a:	81 91       	ld	r24, Z+
    576c:	1f 01       	movw	r2, r30
    576e:	81 11       	cpse	r24, r1
    5770:	b3 cf       	rjmp	.-154    	; 0x56d8 <vfprintf+0x62>
    5772:	9b eb       	ldi	r25, 0xBB	; 187
    5774:	98 0f       	add	r25, r24
    5776:	93 30       	cpi	r25, 0x03	; 3
    5778:	20 f4       	brcc	.+8      	; 0x5782 <vfprintf+0x10c>
    577a:	99 2d       	mov	r25, r9
    577c:	90 61       	ori	r25, 0x10	; 16
    577e:	80 5e       	subi	r24, 0xE0	; 224
    5780:	07 c0       	rjmp	.+14     	; 0x5790 <vfprintf+0x11a>
    5782:	9b e9       	ldi	r25, 0x9B	; 155
    5784:	98 0f       	add	r25, r24
    5786:	93 30       	cpi	r25, 0x03	; 3
    5788:	08 f0       	brcs	.+2      	; 0x578c <vfprintf+0x116>
    578a:	66 c1       	rjmp	.+716    	; 0x5a58 <vfprintf+0x3e2>
    578c:	99 2d       	mov	r25, r9
    578e:	9f 7e       	andi	r25, 0xEF	; 239
    5790:	96 ff       	sbrs	r25, 6
    5792:	16 e0       	ldi	r17, 0x06	; 6
    5794:	9f 73       	andi	r25, 0x3F	; 63
    5796:	99 2e       	mov	r9, r25
    5798:	85 36       	cpi	r24, 0x65	; 101
    579a:	19 f4       	brne	.+6      	; 0x57a2 <vfprintf+0x12c>
    579c:	90 64       	ori	r25, 0x40	; 64
    579e:	99 2e       	mov	r9, r25
    57a0:	08 c0       	rjmp	.+16     	; 0x57b2 <vfprintf+0x13c>
    57a2:	86 36       	cpi	r24, 0x66	; 102
    57a4:	21 f4       	brne	.+8      	; 0x57ae <vfprintf+0x138>
    57a6:	39 2f       	mov	r19, r25
    57a8:	30 68       	ori	r19, 0x80	; 128
    57aa:	93 2e       	mov	r9, r19
    57ac:	02 c0       	rjmp	.+4      	; 0x57b2 <vfprintf+0x13c>
    57ae:	11 11       	cpse	r17, r1
    57b0:	11 50       	subi	r17, 0x01	; 1
    57b2:	97 fe       	sbrs	r9, 7
    57b4:	07 c0       	rjmp	.+14     	; 0x57c4 <vfprintf+0x14e>
    57b6:	1c 33       	cpi	r17, 0x3C	; 60
    57b8:	50 f4       	brcc	.+20     	; 0x57ce <vfprintf+0x158>
    57ba:	44 24       	eor	r4, r4
    57bc:	43 94       	inc	r4
    57be:	41 0e       	add	r4, r17
    57c0:	27 e0       	ldi	r18, 0x07	; 7
    57c2:	0b c0       	rjmp	.+22     	; 0x57da <vfprintf+0x164>
    57c4:	18 30       	cpi	r17, 0x08	; 8
    57c6:	38 f0       	brcs	.+14     	; 0x57d6 <vfprintf+0x160>
    57c8:	27 e0       	ldi	r18, 0x07	; 7
    57ca:	17 e0       	ldi	r17, 0x07	; 7
    57cc:	05 c0       	rjmp	.+10     	; 0x57d8 <vfprintf+0x162>
    57ce:	27 e0       	ldi	r18, 0x07	; 7
    57d0:	9c e3       	ldi	r25, 0x3C	; 60
    57d2:	49 2e       	mov	r4, r25
    57d4:	02 c0       	rjmp	.+4      	; 0x57da <vfprintf+0x164>
    57d6:	21 2f       	mov	r18, r17
    57d8:	41 2c       	mov	r4, r1
    57da:	56 01       	movw	r10, r12
    57dc:	84 e0       	ldi	r24, 0x04	; 4
    57de:	a8 0e       	add	r10, r24
    57e0:	b1 1c       	adc	r11, r1
    57e2:	f6 01       	movw	r30, r12
    57e4:	60 81       	ld	r22, Z
    57e6:	71 81       	ldd	r23, Z+1	; 0x01
    57e8:	82 81       	ldd	r24, Z+2	; 0x02
    57ea:	93 81       	ldd	r25, Z+3	; 0x03
    57ec:	04 2d       	mov	r16, r4
    57ee:	a3 01       	movw	r20, r6
    57f0:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__ftoa_engine>
    57f4:	6c 01       	movw	r12, r24
    57f6:	f9 81       	ldd	r31, Y+1	; 0x01
    57f8:	fc 87       	std	Y+12, r31	; 0x0c
    57fa:	f0 ff       	sbrs	r31, 0
    57fc:	02 c0       	rjmp	.+4      	; 0x5802 <vfprintf+0x18c>
    57fe:	f3 ff       	sbrs	r31, 3
    5800:	06 c0       	rjmp	.+12     	; 0x580e <vfprintf+0x198>
    5802:	91 fc       	sbrc	r9, 1
    5804:	06 c0       	rjmp	.+12     	; 0x5812 <vfprintf+0x19c>
    5806:	92 fe       	sbrs	r9, 2
    5808:	06 c0       	rjmp	.+12     	; 0x5816 <vfprintf+0x1a0>
    580a:	00 e2       	ldi	r16, 0x20	; 32
    580c:	05 c0       	rjmp	.+10     	; 0x5818 <vfprintf+0x1a2>
    580e:	0d e2       	ldi	r16, 0x2D	; 45
    5810:	03 c0       	rjmp	.+6      	; 0x5818 <vfprintf+0x1a2>
    5812:	0b e2       	ldi	r16, 0x2B	; 43
    5814:	01 c0       	rjmp	.+2      	; 0x5818 <vfprintf+0x1a2>
    5816:	00 e0       	ldi	r16, 0x00	; 0
    5818:	8c 85       	ldd	r24, Y+12	; 0x0c
    581a:	8c 70       	andi	r24, 0x0C	; 12
    581c:	19 f0       	breq	.+6      	; 0x5824 <vfprintf+0x1ae>
    581e:	01 11       	cpse	r16, r1
    5820:	5a c2       	rjmp	.+1204   	; 0x5cd6 <vfprintf+0x660>
    5822:	9b c2       	rjmp	.+1334   	; 0x5d5a <vfprintf+0x6e4>
    5824:	97 fe       	sbrs	r9, 7
    5826:	10 c0       	rjmp	.+32     	; 0x5848 <vfprintf+0x1d2>
    5828:	4c 0c       	add	r4, r12
    582a:	fc 85       	ldd	r31, Y+12	; 0x0c
    582c:	f4 ff       	sbrs	r31, 4
    582e:	04 c0       	rjmp	.+8      	; 0x5838 <vfprintf+0x1c2>
    5830:	8a 81       	ldd	r24, Y+2	; 0x02
    5832:	81 33       	cpi	r24, 0x31	; 49
    5834:	09 f4       	brne	.+2      	; 0x5838 <vfprintf+0x1c2>
    5836:	4a 94       	dec	r4
    5838:	14 14       	cp	r1, r4
    583a:	74 f5       	brge	.+92     	; 0x5898 <vfprintf+0x222>
    583c:	28 e0       	ldi	r18, 0x08	; 8
    583e:	24 15       	cp	r18, r4
    5840:	78 f5       	brcc	.+94     	; 0x58a0 <vfprintf+0x22a>
    5842:	88 e0       	ldi	r24, 0x08	; 8
    5844:	48 2e       	mov	r4, r24
    5846:	2c c0       	rjmp	.+88     	; 0x58a0 <vfprintf+0x22a>
    5848:	96 fc       	sbrc	r9, 6
    584a:	2a c0       	rjmp	.+84     	; 0x58a0 <vfprintf+0x22a>
    584c:	81 2f       	mov	r24, r17
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	8c 15       	cp	r24, r12
    5852:	9d 05       	cpc	r25, r13
    5854:	9c f0       	brlt	.+38     	; 0x587c <vfprintf+0x206>
    5856:	3c ef       	ldi	r19, 0xFC	; 252
    5858:	c3 16       	cp	r12, r19
    585a:	3f ef       	ldi	r19, 0xFF	; 255
    585c:	d3 06       	cpc	r13, r19
    585e:	74 f0       	brlt	.+28     	; 0x587c <vfprintf+0x206>
    5860:	89 2d       	mov	r24, r9
    5862:	80 68       	ori	r24, 0x80	; 128
    5864:	98 2e       	mov	r9, r24
    5866:	0a c0       	rjmp	.+20     	; 0x587c <vfprintf+0x206>
    5868:	e2 e0       	ldi	r30, 0x02	; 2
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	ec 0f       	add	r30, r28
    586e:	fd 1f       	adc	r31, r29
    5870:	e1 0f       	add	r30, r17
    5872:	f1 1d       	adc	r31, r1
    5874:	80 81       	ld	r24, Z
    5876:	80 33       	cpi	r24, 0x30	; 48
    5878:	19 f4       	brne	.+6      	; 0x5880 <vfprintf+0x20a>
    587a:	11 50       	subi	r17, 0x01	; 1
    587c:	11 11       	cpse	r17, r1
    587e:	f4 cf       	rjmp	.-24     	; 0x5868 <vfprintf+0x1f2>
    5880:	97 fe       	sbrs	r9, 7
    5882:	0e c0       	rjmp	.+28     	; 0x58a0 <vfprintf+0x22a>
    5884:	44 24       	eor	r4, r4
    5886:	43 94       	inc	r4
    5888:	41 0e       	add	r4, r17
    588a:	81 2f       	mov	r24, r17
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	c8 16       	cp	r12, r24
    5890:	d9 06       	cpc	r13, r25
    5892:	2c f4       	brge	.+10     	; 0x589e <vfprintf+0x228>
    5894:	1c 19       	sub	r17, r12
    5896:	04 c0       	rjmp	.+8      	; 0x58a0 <vfprintf+0x22a>
    5898:	44 24       	eor	r4, r4
    589a:	43 94       	inc	r4
    589c:	01 c0       	rjmp	.+2      	; 0x58a0 <vfprintf+0x22a>
    589e:	10 e0       	ldi	r17, 0x00	; 0
    58a0:	97 fe       	sbrs	r9, 7
    58a2:	06 c0       	rjmp	.+12     	; 0x58b0 <vfprintf+0x23a>
    58a4:	1c 14       	cp	r1, r12
    58a6:	1d 04       	cpc	r1, r13
    58a8:	34 f4       	brge	.+12     	; 0x58b6 <vfprintf+0x240>
    58aa:	c6 01       	movw	r24, r12
    58ac:	01 96       	adiw	r24, 0x01	; 1
    58ae:	05 c0       	rjmp	.+10     	; 0x58ba <vfprintf+0x244>
    58b0:	85 e0       	ldi	r24, 0x05	; 5
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	02 c0       	rjmp	.+4      	; 0x58ba <vfprintf+0x244>
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	01 11       	cpse	r16, r1
    58bc:	01 96       	adiw	r24, 0x01	; 1
    58be:	11 23       	and	r17, r17
    58c0:	31 f0       	breq	.+12     	; 0x58ce <vfprintf+0x258>
    58c2:	21 2f       	mov	r18, r17
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	2f 5f       	subi	r18, 0xFF	; 255
    58c8:	3f 4f       	sbci	r19, 0xFF	; 255
    58ca:	82 0f       	add	r24, r18
    58cc:	93 1f       	adc	r25, r19
    58ce:	25 2d       	mov	r18, r5
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	82 17       	cp	r24, r18
    58d4:	93 07       	cpc	r25, r19
    58d6:	14 f4       	brge	.+4      	; 0x58dc <vfprintf+0x266>
    58d8:	58 1a       	sub	r5, r24
    58da:	01 c0       	rjmp	.+2      	; 0x58de <vfprintf+0x268>
    58dc:	51 2c       	mov	r5, r1
    58de:	89 2d       	mov	r24, r9
    58e0:	89 70       	andi	r24, 0x09	; 9
    58e2:	49 f4       	brne	.+18     	; 0x58f6 <vfprintf+0x280>
    58e4:	55 20       	and	r5, r5
    58e6:	39 f0       	breq	.+14     	; 0x58f6 <vfprintf+0x280>
    58e8:	b7 01       	movw	r22, r14
    58ea:	80 e2       	ldi	r24, 0x20	; 32
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    58f2:	5a 94       	dec	r5
    58f4:	f7 cf       	rjmp	.-18     	; 0x58e4 <vfprintf+0x26e>
    58f6:	00 23       	and	r16, r16
    58f8:	29 f0       	breq	.+10     	; 0x5904 <vfprintf+0x28e>
    58fa:	b7 01       	movw	r22, r14
    58fc:	80 2f       	mov	r24, r16
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5904:	93 fc       	sbrc	r9, 3
    5906:	09 c0       	rjmp	.+18     	; 0x591a <vfprintf+0x2a4>
    5908:	55 20       	and	r5, r5
    590a:	39 f0       	breq	.+14     	; 0x591a <vfprintf+0x2a4>
    590c:	b7 01       	movw	r22, r14
    590e:	80 e3       	ldi	r24, 0x30	; 48
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5916:	5a 94       	dec	r5
    5918:	f7 cf       	rjmp	.-18     	; 0x5908 <vfprintf+0x292>
    591a:	97 fe       	sbrs	r9, 7
    591c:	4c c0       	rjmp	.+152    	; 0x59b6 <vfprintf+0x340>
    591e:	46 01       	movw	r8, r12
    5920:	d7 fe       	sbrs	r13, 7
    5922:	02 c0       	rjmp	.+4      	; 0x5928 <vfprintf+0x2b2>
    5924:	81 2c       	mov	r8, r1
    5926:	91 2c       	mov	r9, r1
    5928:	c6 01       	movw	r24, r12
    592a:	88 19       	sub	r24, r8
    592c:	99 09       	sbc	r25, r9
    592e:	f3 01       	movw	r30, r6
    5930:	e8 0f       	add	r30, r24
    5932:	f9 1f       	adc	r31, r25
    5934:	ed 87       	std	Y+13, r30	; 0x0d
    5936:	fe 87       	std	Y+14, r31	; 0x0e
    5938:	96 01       	movw	r18, r12
    593a:	24 19       	sub	r18, r4
    593c:	31 09       	sbc	r19, r1
    593e:	2f 87       	std	Y+15, r18	; 0x0f
    5940:	38 8b       	std	Y+16, r19	; 0x10
    5942:	01 2f       	mov	r16, r17
    5944:	10 e0       	ldi	r17, 0x00	; 0
    5946:	11 95       	neg	r17
    5948:	01 95       	neg	r16
    594a:	11 09       	sbc	r17, r1
    594c:	3f ef       	ldi	r19, 0xFF	; 255
    594e:	83 16       	cp	r8, r19
    5950:	93 06       	cpc	r9, r19
    5952:	29 f4       	brne	.+10     	; 0x595e <vfprintf+0x2e8>
    5954:	b7 01       	movw	r22, r14
    5956:	8e e2       	ldi	r24, 0x2E	; 46
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    595e:	c8 14       	cp	r12, r8
    5960:	d9 04       	cpc	r13, r9
    5962:	4c f0       	brlt	.+18     	; 0x5976 <vfprintf+0x300>
    5964:	8f 85       	ldd	r24, Y+15	; 0x0f
    5966:	98 89       	ldd	r25, Y+16	; 0x10
    5968:	88 15       	cp	r24, r8
    596a:	99 05       	cpc	r25, r9
    596c:	24 f4       	brge	.+8      	; 0x5976 <vfprintf+0x300>
    596e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5970:	fe 85       	ldd	r31, Y+14	; 0x0e
    5972:	81 81       	ldd	r24, Z+1	; 0x01
    5974:	01 c0       	rjmp	.+2      	; 0x5978 <vfprintf+0x302>
    5976:	80 e3       	ldi	r24, 0x30	; 48
    5978:	f1 e0       	ldi	r31, 0x01	; 1
    597a:	8f 1a       	sub	r8, r31
    597c:	91 08       	sbc	r9, r1
    597e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5980:	3e 85       	ldd	r19, Y+14	; 0x0e
    5982:	2f 5f       	subi	r18, 0xFF	; 255
    5984:	3f 4f       	sbci	r19, 0xFF	; 255
    5986:	2d 87       	std	Y+13, r18	; 0x0d
    5988:	3e 87       	std	Y+14, r19	; 0x0e
    598a:	80 16       	cp	r8, r16
    598c:	91 06       	cpc	r9, r17
    598e:	2c f0       	brlt	.+10     	; 0x599a <vfprintf+0x324>
    5990:	b7 01       	movw	r22, r14
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5998:	d9 cf       	rjmp	.-78     	; 0x594c <vfprintf+0x2d6>
    599a:	c8 14       	cp	r12, r8
    599c:	d9 04       	cpc	r13, r9
    599e:	41 f4       	brne	.+16     	; 0x59b0 <vfprintf+0x33a>
    59a0:	9a 81       	ldd	r25, Y+2	; 0x02
    59a2:	96 33       	cpi	r25, 0x36	; 54
    59a4:	20 f4       	brcc	.+8      	; 0x59ae <vfprintf+0x338>
    59a6:	95 33       	cpi	r25, 0x35	; 53
    59a8:	19 f4       	brne	.+6      	; 0x59b0 <vfprintf+0x33a>
    59aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    59ac:	34 ff       	sbrs	r19, 4
    59ae:	81 e3       	ldi	r24, 0x31	; 49
    59b0:	b7 01       	movw	r22, r14
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	4e c0       	rjmp	.+156    	; 0x5a52 <vfprintf+0x3dc>
    59b6:	8a 81       	ldd	r24, Y+2	; 0x02
    59b8:	81 33       	cpi	r24, 0x31	; 49
    59ba:	19 f0       	breq	.+6      	; 0x59c2 <vfprintf+0x34c>
    59bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    59be:	9f 7e       	andi	r25, 0xEF	; 239
    59c0:	9c 87       	std	Y+12, r25	; 0x0c
    59c2:	b7 01       	movw	r22, r14
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    59ca:	11 11       	cpse	r17, r1
    59cc:	05 c0       	rjmp	.+10     	; 0x59d8 <vfprintf+0x362>
    59ce:	94 fc       	sbrc	r9, 4
    59d0:	18 c0       	rjmp	.+48     	; 0x5a02 <vfprintf+0x38c>
    59d2:	85 e6       	ldi	r24, 0x65	; 101
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	17 c0       	rjmp	.+46     	; 0x5a06 <vfprintf+0x390>
    59d8:	b7 01       	movw	r22, r14
    59da:	8e e2       	ldi	r24, 0x2E	; 46
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    59e2:	1e 5f       	subi	r17, 0xFE	; 254
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	01 e0       	ldi	r16, 0x01	; 1
    59e8:	08 0f       	add	r16, r24
    59ea:	f3 01       	movw	r30, r6
    59ec:	e8 0f       	add	r30, r24
    59ee:	f1 1d       	adc	r31, r1
    59f0:	80 81       	ld	r24, Z
    59f2:	b7 01       	movw	r22, r14
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    59fa:	80 2f       	mov	r24, r16
    59fc:	01 13       	cpse	r16, r17
    59fe:	f3 cf       	rjmp	.-26     	; 0x59e6 <vfprintf+0x370>
    5a00:	e6 cf       	rjmp	.-52     	; 0x59ce <vfprintf+0x358>
    5a02:	85 e4       	ldi	r24, 0x45	; 69
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	b7 01       	movw	r22, r14
    5a08:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5a0c:	d7 fc       	sbrc	r13, 7
    5a0e:	06 c0       	rjmp	.+12     	; 0x5a1c <vfprintf+0x3a6>
    5a10:	c1 14       	cp	r12, r1
    5a12:	d1 04       	cpc	r13, r1
    5a14:	41 f4       	brne	.+16     	; 0x5a26 <vfprintf+0x3b0>
    5a16:	ec 85       	ldd	r30, Y+12	; 0x0c
    5a18:	e4 ff       	sbrs	r30, 4
    5a1a:	05 c0       	rjmp	.+10     	; 0x5a26 <vfprintf+0x3b0>
    5a1c:	d1 94       	neg	r13
    5a1e:	c1 94       	neg	r12
    5a20:	d1 08       	sbc	r13, r1
    5a22:	8d e2       	ldi	r24, 0x2D	; 45
    5a24:	01 c0       	rjmp	.+2      	; 0x5a28 <vfprintf+0x3b2>
    5a26:	8b e2       	ldi	r24, 0x2B	; 43
    5a28:	b7 01       	movw	r22, r14
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5a30:	80 e3       	ldi	r24, 0x30	; 48
    5a32:	2a e0       	ldi	r18, 0x0A	; 10
    5a34:	c2 16       	cp	r12, r18
    5a36:	d1 04       	cpc	r13, r1
    5a38:	2c f0       	brlt	.+10     	; 0x5a44 <vfprintf+0x3ce>
    5a3a:	8f 5f       	subi	r24, 0xFF	; 255
    5a3c:	fa e0       	ldi	r31, 0x0A	; 10
    5a3e:	cf 1a       	sub	r12, r31
    5a40:	d1 08       	sbc	r13, r1
    5a42:	f7 cf       	rjmp	.-18     	; 0x5a32 <vfprintf+0x3bc>
    5a44:	b7 01       	movw	r22, r14
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5a4c:	b7 01       	movw	r22, r14
    5a4e:	c6 01       	movw	r24, r12
    5a50:	c0 96       	adiw	r24, 0x30	; 48
    5a52:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5a56:	54 c1       	rjmp	.+680    	; 0x5d00 <vfprintf+0x68a>
    5a58:	83 36       	cpi	r24, 0x63	; 99
    5a5a:	31 f0       	breq	.+12     	; 0x5a68 <vfprintf+0x3f2>
    5a5c:	83 37       	cpi	r24, 0x73	; 115
    5a5e:	79 f0       	breq	.+30     	; 0x5a7e <vfprintf+0x408>
    5a60:	83 35       	cpi	r24, 0x53	; 83
    5a62:	09 f0       	breq	.+2      	; 0x5a66 <vfprintf+0x3f0>
    5a64:	56 c0       	rjmp	.+172    	; 0x5b12 <vfprintf+0x49c>
    5a66:	20 c0       	rjmp	.+64     	; 0x5aa8 <vfprintf+0x432>
    5a68:	56 01       	movw	r10, r12
    5a6a:	32 e0       	ldi	r19, 0x02	; 2
    5a6c:	a3 0e       	add	r10, r19
    5a6e:	b1 1c       	adc	r11, r1
    5a70:	f6 01       	movw	r30, r12
    5a72:	80 81       	ld	r24, Z
    5a74:	89 83       	std	Y+1, r24	; 0x01
    5a76:	01 e0       	ldi	r16, 0x01	; 1
    5a78:	10 e0       	ldi	r17, 0x00	; 0
    5a7a:	63 01       	movw	r12, r6
    5a7c:	12 c0       	rjmp	.+36     	; 0x5aa2 <vfprintf+0x42c>
    5a7e:	56 01       	movw	r10, r12
    5a80:	f2 e0       	ldi	r31, 0x02	; 2
    5a82:	af 0e       	add	r10, r31
    5a84:	b1 1c       	adc	r11, r1
    5a86:	f6 01       	movw	r30, r12
    5a88:	c0 80       	ld	r12, Z
    5a8a:	d1 80       	ldd	r13, Z+1	; 0x01
    5a8c:	96 fe       	sbrs	r9, 6
    5a8e:	03 c0       	rjmp	.+6      	; 0x5a96 <vfprintf+0x420>
    5a90:	61 2f       	mov	r22, r17
    5a92:	70 e0       	ldi	r23, 0x00	; 0
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <vfprintf+0x424>
    5a96:	6f ef       	ldi	r22, 0xFF	; 255
    5a98:	7f ef       	ldi	r23, 0xFF	; 255
    5a9a:	c6 01       	movw	r24, r12
    5a9c:	0e 94 ac 30 	call	0x6158	; 0x6158 <strnlen>
    5aa0:	8c 01       	movw	r16, r24
    5aa2:	f9 2d       	mov	r31, r9
    5aa4:	ff 77       	andi	r31, 0x7F	; 127
    5aa6:	14 c0       	rjmp	.+40     	; 0x5ad0 <vfprintf+0x45a>
    5aa8:	56 01       	movw	r10, r12
    5aaa:	22 e0       	ldi	r18, 0x02	; 2
    5aac:	a2 0e       	add	r10, r18
    5aae:	b1 1c       	adc	r11, r1
    5ab0:	f6 01       	movw	r30, r12
    5ab2:	c0 80       	ld	r12, Z
    5ab4:	d1 80       	ldd	r13, Z+1	; 0x01
    5ab6:	96 fe       	sbrs	r9, 6
    5ab8:	03 c0       	rjmp	.+6      	; 0x5ac0 <vfprintf+0x44a>
    5aba:	61 2f       	mov	r22, r17
    5abc:	70 e0       	ldi	r23, 0x00	; 0
    5abe:	02 c0       	rjmp	.+4      	; 0x5ac4 <vfprintf+0x44e>
    5ac0:	6f ef       	ldi	r22, 0xFF	; 255
    5ac2:	7f ef       	ldi	r23, 0xFF	; 255
    5ac4:	c6 01       	movw	r24, r12
    5ac6:	0e 94 8f 30 	call	0x611e	; 0x611e <strnlen_P>
    5aca:	8c 01       	movw	r16, r24
    5acc:	f9 2d       	mov	r31, r9
    5ace:	f0 68       	ori	r31, 0x80	; 128
    5ad0:	9f 2e       	mov	r9, r31
    5ad2:	f3 fd       	sbrc	r31, 3
    5ad4:	1a c0       	rjmp	.+52     	; 0x5b0a <vfprintf+0x494>
    5ad6:	85 2d       	mov	r24, r5
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	08 17       	cp	r16, r24
    5adc:	19 07       	cpc	r17, r25
    5ade:	a8 f4       	brcc	.+42     	; 0x5b0a <vfprintf+0x494>
    5ae0:	b7 01       	movw	r22, r14
    5ae2:	80 e2       	ldi	r24, 0x20	; 32
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5aea:	5a 94       	dec	r5
    5aec:	f4 cf       	rjmp	.-24     	; 0x5ad6 <vfprintf+0x460>
    5aee:	f6 01       	movw	r30, r12
    5af0:	97 fc       	sbrc	r9, 7
    5af2:	85 91       	lpm	r24, Z+
    5af4:	97 fe       	sbrs	r9, 7
    5af6:	81 91       	ld	r24, Z+
    5af8:	6f 01       	movw	r12, r30
    5afa:	b7 01       	movw	r22, r14
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5b02:	51 10       	cpse	r5, r1
    5b04:	5a 94       	dec	r5
    5b06:	01 50       	subi	r16, 0x01	; 1
    5b08:	11 09       	sbc	r17, r1
    5b0a:	01 15       	cp	r16, r1
    5b0c:	11 05       	cpc	r17, r1
    5b0e:	79 f7       	brne	.-34     	; 0x5aee <vfprintf+0x478>
    5b10:	f7 c0       	rjmp	.+494    	; 0x5d00 <vfprintf+0x68a>
    5b12:	84 36       	cpi	r24, 0x64	; 100
    5b14:	11 f0       	breq	.+4      	; 0x5b1a <vfprintf+0x4a4>
    5b16:	89 36       	cpi	r24, 0x69	; 105
    5b18:	61 f5       	brne	.+88     	; 0x5b72 <vfprintf+0x4fc>
    5b1a:	56 01       	movw	r10, r12
    5b1c:	97 fe       	sbrs	r9, 7
    5b1e:	09 c0       	rjmp	.+18     	; 0x5b32 <vfprintf+0x4bc>
    5b20:	24 e0       	ldi	r18, 0x04	; 4
    5b22:	a2 0e       	add	r10, r18
    5b24:	b1 1c       	adc	r11, r1
    5b26:	f6 01       	movw	r30, r12
    5b28:	60 81       	ld	r22, Z
    5b2a:	71 81       	ldd	r23, Z+1	; 0x01
    5b2c:	82 81       	ldd	r24, Z+2	; 0x02
    5b2e:	93 81       	ldd	r25, Z+3	; 0x03
    5b30:	0a c0       	rjmp	.+20     	; 0x5b46 <vfprintf+0x4d0>
    5b32:	f2 e0       	ldi	r31, 0x02	; 2
    5b34:	af 0e       	add	r10, r31
    5b36:	b1 1c       	adc	r11, r1
    5b38:	f6 01       	movw	r30, r12
    5b3a:	60 81       	ld	r22, Z
    5b3c:	71 81       	ldd	r23, Z+1	; 0x01
    5b3e:	07 2e       	mov	r0, r23
    5b40:	00 0c       	add	r0, r0
    5b42:	88 0b       	sbc	r24, r24
    5b44:	99 0b       	sbc	r25, r25
    5b46:	f9 2d       	mov	r31, r9
    5b48:	ff 76       	andi	r31, 0x6F	; 111
    5b4a:	9f 2e       	mov	r9, r31
    5b4c:	97 ff       	sbrs	r25, 7
    5b4e:	09 c0       	rjmp	.+18     	; 0x5b62 <vfprintf+0x4ec>
    5b50:	90 95       	com	r25
    5b52:	80 95       	com	r24
    5b54:	70 95       	com	r23
    5b56:	61 95       	neg	r22
    5b58:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5e:	f0 68       	ori	r31, 0x80	; 128
    5b60:	9f 2e       	mov	r9, r31
    5b62:	2a e0       	ldi	r18, 0x0A	; 10
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	a3 01       	movw	r20, r6
    5b68:	0e 94 32 31 	call	0x6264	; 0x6264 <__ultoa_invert>
    5b6c:	c8 2e       	mov	r12, r24
    5b6e:	c6 18       	sub	r12, r6
    5b70:	3f c0       	rjmp	.+126    	; 0x5bf0 <vfprintf+0x57a>
    5b72:	09 2d       	mov	r16, r9
    5b74:	85 37       	cpi	r24, 0x75	; 117
    5b76:	21 f4       	brne	.+8      	; 0x5b80 <vfprintf+0x50a>
    5b78:	0f 7e       	andi	r16, 0xEF	; 239
    5b7a:	2a e0       	ldi	r18, 0x0A	; 10
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	1d c0       	rjmp	.+58     	; 0x5bba <vfprintf+0x544>
    5b80:	09 7f       	andi	r16, 0xF9	; 249
    5b82:	8f 36       	cpi	r24, 0x6F	; 111
    5b84:	91 f0       	breq	.+36     	; 0x5baa <vfprintf+0x534>
    5b86:	18 f4       	brcc	.+6      	; 0x5b8e <vfprintf+0x518>
    5b88:	88 35       	cpi	r24, 0x58	; 88
    5b8a:	59 f0       	breq	.+22     	; 0x5ba2 <vfprintf+0x52c>
    5b8c:	c3 c0       	rjmp	.+390    	; 0x5d14 <vfprintf+0x69e>
    5b8e:	80 37       	cpi	r24, 0x70	; 112
    5b90:	19 f0       	breq	.+6      	; 0x5b98 <vfprintf+0x522>
    5b92:	88 37       	cpi	r24, 0x78	; 120
    5b94:	11 f0       	breq	.+4      	; 0x5b9a <vfprintf+0x524>
    5b96:	be c0       	rjmp	.+380    	; 0x5d14 <vfprintf+0x69e>
    5b98:	00 61       	ori	r16, 0x10	; 16
    5b9a:	04 ff       	sbrs	r16, 4
    5b9c:	09 c0       	rjmp	.+18     	; 0x5bb0 <vfprintf+0x53a>
    5b9e:	04 60       	ori	r16, 0x04	; 4
    5ba0:	07 c0       	rjmp	.+14     	; 0x5bb0 <vfprintf+0x53a>
    5ba2:	94 fe       	sbrs	r9, 4
    5ba4:	08 c0       	rjmp	.+16     	; 0x5bb6 <vfprintf+0x540>
    5ba6:	06 60       	ori	r16, 0x06	; 6
    5ba8:	06 c0       	rjmp	.+12     	; 0x5bb6 <vfprintf+0x540>
    5baa:	28 e0       	ldi	r18, 0x08	; 8
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	05 c0       	rjmp	.+10     	; 0x5bba <vfprintf+0x544>
    5bb0:	20 e1       	ldi	r18, 0x10	; 16
    5bb2:	30 e0       	ldi	r19, 0x00	; 0
    5bb4:	02 c0       	rjmp	.+4      	; 0x5bba <vfprintf+0x544>
    5bb6:	20 e1       	ldi	r18, 0x10	; 16
    5bb8:	32 e0       	ldi	r19, 0x02	; 2
    5bba:	56 01       	movw	r10, r12
    5bbc:	07 ff       	sbrs	r16, 7
    5bbe:	09 c0       	rjmp	.+18     	; 0x5bd2 <vfprintf+0x55c>
    5bc0:	84 e0       	ldi	r24, 0x04	; 4
    5bc2:	a8 0e       	add	r10, r24
    5bc4:	b1 1c       	adc	r11, r1
    5bc6:	f6 01       	movw	r30, r12
    5bc8:	60 81       	ld	r22, Z
    5bca:	71 81       	ldd	r23, Z+1	; 0x01
    5bcc:	82 81       	ldd	r24, Z+2	; 0x02
    5bce:	93 81       	ldd	r25, Z+3	; 0x03
    5bd0:	08 c0       	rjmp	.+16     	; 0x5be2 <vfprintf+0x56c>
    5bd2:	f2 e0       	ldi	r31, 0x02	; 2
    5bd4:	af 0e       	add	r10, r31
    5bd6:	b1 1c       	adc	r11, r1
    5bd8:	f6 01       	movw	r30, r12
    5bda:	60 81       	ld	r22, Z
    5bdc:	71 81       	ldd	r23, Z+1	; 0x01
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	a3 01       	movw	r20, r6
    5be4:	0e 94 32 31 	call	0x6264	; 0x6264 <__ultoa_invert>
    5be8:	c8 2e       	mov	r12, r24
    5bea:	c6 18       	sub	r12, r6
    5bec:	0f 77       	andi	r16, 0x7F	; 127
    5bee:	90 2e       	mov	r9, r16
    5bf0:	96 fe       	sbrs	r9, 6
    5bf2:	0b c0       	rjmp	.+22     	; 0x5c0a <vfprintf+0x594>
    5bf4:	09 2d       	mov	r16, r9
    5bf6:	0e 7f       	andi	r16, 0xFE	; 254
    5bf8:	c1 16       	cp	r12, r17
    5bfa:	50 f4       	brcc	.+20     	; 0x5c10 <vfprintf+0x59a>
    5bfc:	94 fe       	sbrs	r9, 4
    5bfe:	0a c0       	rjmp	.+20     	; 0x5c14 <vfprintf+0x59e>
    5c00:	92 fc       	sbrc	r9, 2
    5c02:	08 c0       	rjmp	.+16     	; 0x5c14 <vfprintf+0x59e>
    5c04:	09 2d       	mov	r16, r9
    5c06:	0e 7e       	andi	r16, 0xEE	; 238
    5c08:	05 c0       	rjmp	.+10     	; 0x5c14 <vfprintf+0x59e>
    5c0a:	dc 2c       	mov	r13, r12
    5c0c:	09 2d       	mov	r16, r9
    5c0e:	03 c0       	rjmp	.+6      	; 0x5c16 <vfprintf+0x5a0>
    5c10:	dc 2c       	mov	r13, r12
    5c12:	01 c0       	rjmp	.+2      	; 0x5c16 <vfprintf+0x5a0>
    5c14:	d1 2e       	mov	r13, r17
    5c16:	04 ff       	sbrs	r16, 4
    5c18:	0d c0       	rjmp	.+26     	; 0x5c34 <vfprintf+0x5be>
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	ec 0d       	add	r30, r12
    5c1e:	f1 1d       	adc	r31, r1
    5c20:	80 81       	ld	r24, Z
    5c22:	80 33       	cpi	r24, 0x30	; 48
    5c24:	11 f4       	brne	.+4      	; 0x5c2a <vfprintf+0x5b4>
    5c26:	09 7e       	andi	r16, 0xE9	; 233
    5c28:	09 c0       	rjmp	.+18     	; 0x5c3c <vfprintf+0x5c6>
    5c2a:	02 ff       	sbrs	r16, 2
    5c2c:	06 c0       	rjmp	.+12     	; 0x5c3a <vfprintf+0x5c4>
    5c2e:	d3 94       	inc	r13
    5c30:	d3 94       	inc	r13
    5c32:	04 c0       	rjmp	.+8      	; 0x5c3c <vfprintf+0x5c6>
    5c34:	80 2f       	mov	r24, r16
    5c36:	86 78       	andi	r24, 0x86	; 134
    5c38:	09 f0       	breq	.+2      	; 0x5c3c <vfprintf+0x5c6>
    5c3a:	d3 94       	inc	r13
    5c3c:	03 fd       	sbrc	r16, 3
    5c3e:	11 c0       	rjmp	.+34     	; 0x5c62 <vfprintf+0x5ec>
    5c40:	00 ff       	sbrs	r16, 0
    5c42:	06 c0       	rjmp	.+12     	; 0x5c50 <vfprintf+0x5da>
    5c44:	1c 2d       	mov	r17, r12
    5c46:	d5 14       	cp	r13, r5
    5c48:	80 f4       	brcc	.+32     	; 0x5c6a <vfprintf+0x5f4>
    5c4a:	15 0d       	add	r17, r5
    5c4c:	1d 19       	sub	r17, r13
    5c4e:	0d c0       	rjmp	.+26     	; 0x5c6a <vfprintf+0x5f4>
    5c50:	d5 14       	cp	r13, r5
    5c52:	58 f4       	brcc	.+22     	; 0x5c6a <vfprintf+0x5f4>
    5c54:	b7 01       	movw	r22, r14
    5c56:	80 e2       	ldi	r24, 0x20	; 32
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5c5e:	d3 94       	inc	r13
    5c60:	f7 cf       	rjmp	.-18     	; 0x5c50 <vfprintf+0x5da>
    5c62:	d5 14       	cp	r13, r5
    5c64:	10 f4       	brcc	.+4      	; 0x5c6a <vfprintf+0x5f4>
    5c66:	5d 18       	sub	r5, r13
    5c68:	01 c0       	rjmp	.+2      	; 0x5c6c <vfprintf+0x5f6>
    5c6a:	51 2c       	mov	r5, r1
    5c6c:	04 ff       	sbrs	r16, 4
    5c6e:	10 c0       	rjmp	.+32     	; 0x5c90 <vfprintf+0x61a>
    5c70:	b7 01       	movw	r22, r14
    5c72:	80 e3       	ldi	r24, 0x30	; 48
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5c7a:	02 ff       	sbrs	r16, 2
    5c7c:	17 c0       	rjmp	.+46     	; 0x5cac <vfprintf+0x636>
    5c7e:	01 fd       	sbrc	r16, 1
    5c80:	03 c0       	rjmp	.+6      	; 0x5c88 <vfprintf+0x612>
    5c82:	88 e7       	ldi	r24, 0x78	; 120
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	02 c0       	rjmp	.+4      	; 0x5c8c <vfprintf+0x616>
    5c88:	88 e5       	ldi	r24, 0x58	; 88
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	b7 01       	movw	r22, r14
    5c8e:	0c c0       	rjmp	.+24     	; 0x5ca8 <vfprintf+0x632>
    5c90:	80 2f       	mov	r24, r16
    5c92:	86 78       	andi	r24, 0x86	; 134
    5c94:	59 f0       	breq	.+22     	; 0x5cac <vfprintf+0x636>
    5c96:	01 ff       	sbrs	r16, 1
    5c98:	02 c0       	rjmp	.+4      	; 0x5c9e <vfprintf+0x628>
    5c9a:	8b e2       	ldi	r24, 0x2B	; 43
    5c9c:	01 c0       	rjmp	.+2      	; 0x5ca0 <vfprintf+0x62a>
    5c9e:	80 e2       	ldi	r24, 0x20	; 32
    5ca0:	07 fd       	sbrc	r16, 7
    5ca2:	8d e2       	ldi	r24, 0x2D	; 45
    5ca4:	b7 01       	movw	r22, r14
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5cac:	c1 16       	cp	r12, r17
    5cae:	38 f4       	brcc	.+14     	; 0x5cbe <vfprintf+0x648>
    5cb0:	b7 01       	movw	r22, r14
    5cb2:	80 e3       	ldi	r24, 0x30	; 48
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5cba:	11 50       	subi	r17, 0x01	; 1
    5cbc:	f7 cf       	rjmp	.-18     	; 0x5cac <vfprintf+0x636>
    5cbe:	ca 94       	dec	r12
    5cc0:	f3 01       	movw	r30, r6
    5cc2:	ec 0d       	add	r30, r12
    5cc4:	f1 1d       	adc	r31, r1
    5cc6:	80 81       	ld	r24, Z
    5cc8:	b7 01       	movw	r22, r14
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5cd0:	c1 10       	cpse	r12, r1
    5cd2:	f5 cf       	rjmp	.-22     	; 0x5cbe <vfprintf+0x648>
    5cd4:	15 c0       	rjmp	.+42     	; 0x5d00 <vfprintf+0x68a>
    5cd6:	f4 e0       	ldi	r31, 0x04	; 4
    5cd8:	f5 15       	cp	r31, r5
    5cda:	60 f5       	brcc	.+88     	; 0x5d34 <vfprintf+0x6be>
    5cdc:	84 e0       	ldi	r24, 0x04	; 4
    5cde:	58 1a       	sub	r5, r24
    5ce0:	93 fe       	sbrs	r9, 3
    5ce2:	1f c0       	rjmp	.+62     	; 0x5d22 <vfprintf+0x6ac>
    5ce4:	01 11       	cpse	r16, r1
    5ce6:	27 c0       	rjmp	.+78     	; 0x5d36 <vfprintf+0x6c0>
    5ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
    5cea:	23 ff       	sbrs	r18, 3
    5cec:	2a c0       	rjmp	.+84     	; 0x5d42 <vfprintf+0x6cc>
    5cee:	04 ed       	ldi	r16, 0xD4	; 212
    5cf0:	11 e0       	ldi	r17, 0x01	; 1
    5cf2:	39 2d       	mov	r19, r9
    5cf4:	30 71       	andi	r19, 0x10	; 16
    5cf6:	93 2e       	mov	r9, r19
    5cf8:	f8 01       	movw	r30, r16
    5cfa:	84 91       	lpm	r24, Z
    5cfc:	81 11       	cpse	r24, r1
    5cfe:	24 c0       	rjmp	.+72     	; 0x5d48 <vfprintf+0x6d2>
    5d00:	55 20       	and	r5, r5
    5d02:	09 f4       	brne	.+2      	; 0x5d06 <vfprintf+0x690>
    5d04:	e4 cc       	rjmp	.-1592   	; 0x56ce <vfprintf+0x58>
    5d06:	b7 01       	movw	r22, r14
    5d08:	80 e2       	ldi	r24, 0x20	; 32
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5d10:	5a 94       	dec	r5
    5d12:	f6 cf       	rjmp	.-20     	; 0x5d00 <vfprintf+0x68a>
    5d14:	f7 01       	movw	r30, r14
    5d16:	86 81       	ldd	r24, Z+6	; 0x06
    5d18:	97 81       	ldd	r25, Z+7	; 0x07
    5d1a:	26 c0       	rjmp	.+76     	; 0x5d68 <vfprintf+0x6f2>
    5d1c:	8f ef       	ldi	r24, 0xFF	; 255
    5d1e:	9f ef       	ldi	r25, 0xFF	; 255
    5d20:	23 c0       	rjmp	.+70     	; 0x5d68 <vfprintf+0x6f2>
    5d22:	b7 01       	movw	r22, r14
    5d24:	80 e2       	ldi	r24, 0x20	; 32
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5d2c:	5a 94       	dec	r5
    5d2e:	51 10       	cpse	r5, r1
    5d30:	f8 cf       	rjmp	.-16     	; 0x5d22 <vfprintf+0x6ac>
    5d32:	d8 cf       	rjmp	.-80     	; 0x5ce4 <vfprintf+0x66e>
    5d34:	51 2c       	mov	r5, r1
    5d36:	b7 01       	movw	r22, r14
    5d38:	80 2f       	mov	r24, r16
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5d40:	d3 cf       	rjmp	.-90     	; 0x5ce8 <vfprintf+0x672>
    5d42:	08 ed       	ldi	r16, 0xD8	; 216
    5d44:	11 e0       	ldi	r17, 0x01	; 1
    5d46:	d5 cf       	rjmp	.-86     	; 0x5cf2 <vfprintf+0x67c>
    5d48:	91 10       	cpse	r9, r1
    5d4a:	80 52       	subi	r24, 0x20	; 32
    5d4c:	b7 01       	movw	r22, r14
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <fputc>
    5d54:	0f 5f       	subi	r16, 0xFF	; 255
    5d56:	1f 4f       	sbci	r17, 0xFF	; 255
    5d58:	cf cf       	rjmp	.-98     	; 0x5cf8 <vfprintf+0x682>
    5d5a:	23 e0       	ldi	r18, 0x03	; 3
    5d5c:	25 15       	cp	r18, r5
    5d5e:	10 f4       	brcc	.+4      	; 0x5d64 <vfprintf+0x6ee>
    5d60:	83 e0       	ldi	r24, 0x03	; 3
    5d62:	bd cf       	rjmp	.-134    	; 0x5cde <vfprintf+0x668>
    5d64:	51 2c       	mov	r5, r1
    5d66:	c0 cf       	rjmp	.-128    	; 0x5ce8 <vfprintf+0x672>
    5d68:	60 96       	adiw	r28, 0x10	; 16
    5d6a:	e2 e1       	ldi	r30, 0x12	; 18
    5d6c:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <__epilogue_restores__>

00005d70 <__divmodhi4>:
    5d70:	97 fb       	bst	r25, 7
    5d72:	07 2e       	mov	r0, r23
    5d74:	16 f4       	brtc	.+4      	; 0x5d7a <__divmodhi4+0xa>
    5d76:	00 94       	com	r0
    5d78:	07 d0       	rcall	.+14     	; 0x5d88 <__divmodhi4_neg1>
    5d7a:	77 fd       	sbrc	r23, 7
    5d7c:	09 d0       	rcall	.+18     	; 0x5d90 <__divmodhi4_neg2>
    5d7e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <__udivmodhi4>
    5d82:	07 fc       	sbrc	r0, 7
    5d84:	05 d0       	rcall	.+10     	; 0x5d90 <__divmodhi4_neg2>
    5d86:	3e f4       	brtc	.+14     	; 0x5d96 <__divmodhi4_exit>

00005d88 <__divmodhi4_neg1>:
    5d88:	90 95       	com	r25
    5d8a:	81 95       	neg	r24
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	08 95       	ret

00005d90 <__divmodhi4_neg2>:
    5d90:	70 95       	com	r23
    5d92:	61 95       	neg	r22
    5d94:	7f 4f       	sbci	r23, 0xFF	; 255

00005d96 <__divmodhi4_exit>:
    5d96:	08 95       	ret

00005d98 <__divmodsi4>:
    5d98:	05 2e       	mov	r0, r21
    5d9a:	97 fb       	bst	r25, 7
    5d9c:	1e f4       	brtc	.+6      	; 0x5da4 <__divmodsi4+0xc>
    5d9e:	00 94       	com	r0
    5da0:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__negsi2>
    5da4:	57 fd       	sbrc	r21, 7
    5da6:	07 d0       	rcall	.+14     	; 0x5db6 <__divmodsi4_neg2>
    5da8:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__udivmodsi4>
    5dac:	07 fc       	sbrc	r0, 7
    5dae:	03 d0       	rcall	.+6      	; 0x5db6 <__divmodsi4_neg2>
    5db0:	4e f4       	brtc	.+18     	; 0x5dc4 <__divmodsi4_exit>
    5db2:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__negsi2>

00005db6 <__divmodsi4_neg2>:
    5db6:	50 95       	com	r21
    5db8:	40 95       	com	r20
    5dba:	30 95       	com	r19
    5dbc:	21 95       	neg	r18
    5dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc0:	4f 4f       	sbci	r20, 0xFF	; 255
    5dc2:	5f 4f       	sbci	r21, 0xFF	; 255

00005dc4 <__divmodsi4_exit>:
    5dc4:	08 95       	ret

00005dc6 <__negsi2>:
    5dc6:	90 95       	com	r25
    5dc8:	80 95       	com	r24
    5dca:	70 95       	com	r23
    5dcc:	61 95       	neg	r22
    5dce:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    5dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd4:	08 95       	ret

00005dd6 <__tablejump2__>:
    5dd6:	ee 0f       	add	r30, r30
    5dd8:	ff 1f       	adc	r31, r31
    5dda:	05 90       	lpm	r0, Z+
    5ddc:	f4 91       	lpm	r31, Z
    5dde:	e0 2d       	mov	r30, r0
    5de0:	09 94       	ijmp

00005de2 <__muluhisi3>:
    5de2:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <__umulhisi3>
    5de6:	a5 9f       	mul	r26, r21
    5de8:	90 0d       	add	r25, r0
    5dea:	b4 9f       	mul	r27, r20
    5dec:	90 0d       	add	r25, r0
    5dee:	a4 9f       	mul	r26, r20
    5df0:	80 0d       	add	r24, r0
    5df2:	91 1d       	adc	r25, r1
    5df4:	11 24       	eor	r1, r1
    5df6:	08 95       	ret

00005df8 <__prologue_saves__>:
    5df8:	2f 92       	push	r2
    5dfa:	3f 92       	push	r3
    5dfc:	4f 92       	push	r4
    5dfe:	5f 92       	push	r5
    5e00:	6f 92       	push	r6
    5e02:	7f 92       	push	r7
    5e04:	8f 92       	push	r8
    5e06:	9f 92       	push	r9
    5e08:	af 92       	push	r10
    5e0a:	bf 92       	push	r11
    5e0c:	cf 92       	push	r12
    5e0e:	df 92       	push	r13
    5e10:	ef 92       	push	r14
    5e12:	ff 92       	push	r15
    5e14:	0f 93       	push	r16
    5e16:	1f 93       	push	r17
    5e18:	cf 93       	push	r28
    5e1a:	df 93       	push	r29
    5e1c:	cd b7       	in	r28, 0x3d	; 61
    5e1e:	de b7       	in	r29, 0x3e	; 62
    5e20:	ca 1b       	sub	r28, r26
    5e22:	db 0b       	sbc	r29, r27
    5e24:	cd bf       	out	0x3d, r28	; 61
    5e26:	de bf       	out	0x3e, r29	; 62
    5e28:	09 94       	ijmp

00005e2a <__epilogue_restores__>:
    5e2a:	2a 88       	ldd	r2, Y+18	; 0x12
    5e2c:	39 88       	ldd	r3, Y+17	; 0x11
    5e2e:	48 88       	ldd	r4, Y+16	; 0x10
    5e30:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e32:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e34:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e36:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e38:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e3c:	b9 84       	ldd	r11, Y+9	; 0x09
    5e3e:	c8 84       	ldd	r12, Y+8	; 0x08
    5e40:	df 80       	ldd	r13, Y+7	; 0x07
    5e42:	ee 80       	ldd	r14, Y+6	; 0x06
    5e44:	fd 80       	ldd	r15, Y+5	; 0x05
    5e46:	0c 81       	ldd	r16, Y+4	; 0x04
    5e48:	1b 81       	ldd	r17, Y+3	; 0x03
    5e4a:	aa 81       	ldd	r26, Y+2	; 0x02
    5e4c:	b9 81       	ldd	r27, Y+1	; 0x01
    5e4e:	ce 0f       	add	r28, r30
    5e50:	d1 1d       	adc	r29, r1
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	de bf       	out	0x3e, r29	; 62
    5e56:	ed 01       	movw	r28, r26
    5e58:	08 95       	ret

00005e5a <__udivmodhi4>:
    5e5a:	aa 1b       	sub	r26, r26
    5e5c:	bb 1b       	sub	r27, r27
    5e5e:	51 e1       	ldi	r21, 0x11	; 17
    5e60:	07 c0       	rjmp	.+14     	; 0x5e70 <__udivmodhi4_ep>

00005e62 <__udivmodhi4_loop>:
    5e62:	aa 1f       	adc	r26, r26
    5e64:	bb 1f       	adc	r27, r27
    5e66:	a6 17       	cp	r26, r22
    5e68:	b7 07       	cpc	r27, r23
    5e6a:	10 f0       	brcs	.+4      	; 0x5e70 <__udivmodhi4_ep>
    5e6c:	a6 1b       	sub	r26, r22
    5e6e:	b7 0b       	sbc	r27, r23

00005e70 <__udivmodhi4_ep>:
    5e70:	88 1f       	adc	r24, r24
    5e72:	99 1f       	adc	r25, r25
    5e74:	5a 95       	dec	r21
    5e76:	a9 f7       	brne	.-22     	; 0x5e62 <__udivmodhi4_loop>
    5e78:	80 95       	com	r24
    5e7a:	90 95       	com	r25
    5e7c:	bc 01       	movw	r22, r24
    5e7e:	cd 01       	movw	r24, r26
    5e80:	08 95       	ret

00005e82 <__udivmodsi4>:
    5e82:	a1 e2       	ldi	r26, 0x21	; 33
    5e84:	1a 2e       	mov	r1, r26
    5e86:	aa 1b       	sub	r26, r26
    5e88:	bb 1b       	sub	r27, r27
    5e8a:	fd 01       	movw	r30, r26
    5e8c:	0d c0       	rjmp	.+26     	; 0x5ea8 <__udivmodsi4_ep>

00005e8e <__udivmodsi4_loop>:
    5e8e:	aa 1f       	adc	r26, r26
    5e90:	bb 1f       	adc	r27, r27
    5e92:	ee 1f       	adc	r30, r30
    5e94:	ff 1f       	adc	r31, r31
    5e96:	a2 17       	cp	r26, r18
    5e98:	b3 07       	cpc	r27, r19
    5e9a:	e4 07       	cpc	r30, r20
    5e9c:	f5 07       	cpc	r31, r21
    5e9e:	20 f0       	brcs	.+8      	; 0x5ea8 <__udivmodsi4_ep>
    5ea0:	a2 1b       	sub	r26, r18
    5ea2:	b3 0b       	sbc	r27, r19
    5ea4:	e4 0b       	sbc	r30, r20
    5ea6:	f5 0b       	sbc	r31, r21

00005ea8 <__udivmodsi4_ep>:
    5ea8:	66 1f       	adc	r22, r22
    5eaa:	77 1f       	adc	r23, r23
    5eac:	88 1f       	adc	r24, r24
    5eae:	99 1f       	adc	r25, r25
    5eb0:	1a 94       	dec	r1
    5eb2:	69 f7       	brne	.-38     	; 0x5e8e <__udivmodsi4_loop>
    5eb4:	60 95       	com	r22
    5eb6:	70 95       	com	r23
    5eb8:	80 95       	com	r24
    5eba:	90 95       	com	r25
    5ebc:	9b 01       	movw	r18, r22
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	bd 01       	movw	r22, r26
    5ec2:	cf 01       	movw	r24, r30
    5ec4:	08 95       	ret

00005ec6 <__umulhisi3>:
    5ec6:	a2 9f       	mul	r26, r18
    5ec8:	b0 01       	movw	r22, r0
    5eca:	b3 9f       	mul	r27, r19
    5ecc:	c0 01       	movw	r24, r0
    5ece:	a3 9f       	mul	r26, r19
    5ed0:	70 0d       	add	r23, r0
    5ed2:	81 1d       	adc	r24, r1
    5ed4:	11 24       	eor	r1, r1
    5ed6:	91 1d       	adc	r25, r1
    5ed8:	b2 9f       	mul	r27, r18
    5eda:	70 0d       	add	r23, r0
    5edc:	81 1d       	adc	r24, r1
    5ede:	11 24       	eor	r1, r1
    5ee0:	91 1d       	adc	r25, r1
    5ee2:	08 95       	ret

00005ee4 <atoi>:
    5ee4:	fc 01       	movw	r30, r24
    5ee6:	88 27       	eor	r24, r24
    5ee8:	99 27       	eor	r25, r25
    5eea:	e8 94       	clt
    5eec:	21 91       	ld	r18, Z+
    5eee:	20 32       	cpi	r18, 0x20	; 32
    5ef0:	e9 f3       	breq	.-6      	; 0x5eec <atoi+0x8>
    5ef2:	29 30       	cpi	r18, 0x09	; 9
    5ef4:	10 f0       	brcs	.+4      	; 0x5efa <atoi+0x16>
    5ef6:	2e 30       	cpi	r18, 0x0E	; 14
    5ef8:	c8 f3       	brcs	.-14     	; 0x5eec <atoi+0x8>
    5efa:	2b 32       	cpi	r18, 0x2B	; 43
    5efc:	41 f0       	breq	.+16     	; 0x5f0e <atoi+0x2a>
    5efe:	2d 32       	cpi	r18, 0x2D	; 45
    5f00:	39 f4       	brne	.+14     	; 0x5f10 <atoi+0x2c>
    5f02:	68 94       	set
    5f04:	04 c0       	rjmp	.+8      	; 0x5f0e <atoi+0x2a>
    5f06:	0e 94 cc 30 	call	0x6198	; 0x6198 <__mulhi_const_10>
    5f0a:	82 0f       	add	r24, r18
    5f0c:	91 1d       	adc	r25, r1
    5f0e:	21 91       	ld	r18, Z+
    5f10:	20 53       	subi	r18, 0x30	; 48
    5f12:	2a 30       	cpi	r18, 0x0A	; 10
    5f14:	c0 f3       	brcs	.-16     	; 0x5f06 <atoi+0x22>
    5f16:	1e f4       	brtc	.+6      	; 0x5f1e <atoi+0x3a>
    5f18:	90 95       	com	r25
    5f1a:	81 95       	neg	r24
    5f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1e:	08 95       	ret

00005f20 <atol>:
    5f20:	1f 93       	push	r17
    5f22:	fc 01       	movw	r30, r24
    5f24:	99 27       	eor	r25, r25
    5f26:	88 27       	eor	r24, r24
    5f28:	bc 01       	movw	r22, r24
    5f2a:	e8 94       	clt
    5f2c:	11 91       	ld	r17, Z+
    5f2e:	10 32       	cpi	r17, 0x20	; 32
    5f30:	e9 f3       	breq	.-6      	; 0x5f2c <atol+0xc>
    5f32:	19 30       	cpi	r17, 0x09	; 9
    5f34:	10 f0       	brcs	.+4      	; 0x5f3a <atol+0x1a>
    5f36:	1e 30       	cpi	r17, 0x0E	; 14
    5f38:	c8 f3       	brcs	.-14     	; 0x5f2c <atol+0xc>
    5f3a:	1b 32       	cpi	r17, 0x2B	; 43
    5f3c:	51 f0       	breq	.+20     	; 0x5f52 <atol+0x32>
    5f3e:	1d 32       	cpi	r17, 0x2D	; 45
    5f40:	49 f4       	brne	.+18     	; 0x5f54 <atol+0x34>
    5f42:	68 94       	set
    5f44:	06 c0       	rjmp	.+12     	; 0x5f52 <atol+0x32>
    5f46:	0e 94 b7 30 	call	0x616e	; 0x616e <__mulsi_const_10>
    5f4a:	61 0f       	add	r22, r17
    5f4c:	71 1d       	adc	r23, r1
    5f4e:	81 1d       	adc	r24, r1
    5f50:	91 1d       	adc	r25, r1
    5f52:	11 91       	ld	r17, Z+
    5f54:	10 53       	subi	r17, 0x30	; 48
    5f56:	1a 30       	cpi	r17, 0x0A	; 10
    5f58:	b0 f3       	brcs	.-20     	; 0x5f46 <atol+0x26>
    5f5a:	3e f4       	brtc	.+14     	; 0x5f6a <atol+0x4a>
    5f5c:	90 95       	com	r25
    5f5e:	80 95       	com	r24
    5f60:	70 95       	com	r23
    5f62:	61 95       	neg	r22
    5f64:	7f 4f       	sbci	r23, 0xFF	; 255
    5f66:	8f 4f       	sbci	r24, 0xFF	; 255
    5f68:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6a:	1f 91       	pop	r17
    5f6c:	08 95       	ret

00005f6e <__ftoa_engine>:
    5f6e:	28 30       	cpi	r18, 0x08	; 8
    5f70:	08 f0       	brcs	.+2      	; 0x5f74 <__ftoa_engine+0x6>
    5f72:	27 e0       	ldi	r18, 0x07	; 7
    5f74:	33 27       	eor	r19, r19
    5f76:	da 01       	movw	r26, r20
    5f78:	99 0f       	add	r25, r25
    5f7a:	31 1d       	adc	r19, r1
    5f7c:	87 fd       	sbrc	r24, 7
    5f7e:	91 60       	ori	r25, 0x01	; 1
    5f80:	00 96       	adiw	r24, 0x00	; 0
    5f82:	61 05       	cpc	r22, r1
    5f84:	71 05       	cpc	r23, r1
    5f86:	39 f4       	brne	.+14     	; 0x5f96 <__ftoa_engine+0x28>
    5f88:	32 60       	ori	r19, 0x02	; 2
    5f8a:	2e 5f       	subi	r18, 0xFE	; 254
    5f8c:	3d 93       	st	X+, r19
    5f8e:	30 e3       	ldi	r19, 0x30	; 48
    5f90:	2a 95       	dec	r18
    5f92:	e1 f7       	brne	.-8      	; 0x5f8c <__ftoa_engine+0x1e>
    5f94:	08 95       	ret
    5f96:	9f 3f       	cpi	r25, 0xFF	; 255
    5f98:	30 f0       	brcs	.+12     	; 0x5fa6 <__ftoa_engine+0x38>
    5f9a:	80 38       	cpi	r24, 0x80	; 128
    5f9c:	71 05       	cpc	r23, r1
    5f9e:	61 05       	cpc	r22, r1
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <__ftoa_engine+0x36>
    5fa2:	3c 5f       	subi	r19, 0xFC	; 252
    5fa4:	3c 5f       	subi	r19, 0xFC	; 252
    5fa6:	3d 93       	st	X+, r19
    5fa8:	91 30       	cpi	r25, 0x01	; 1
    5faa:	08 f0       	brcs	.+2      	; 0x5fae <__ftoa_engine+0x40>
    5fac:	80 68       	ori	r24, 0x80	; 128
    5fae:	91 1d       	adc	r25, r1
    5fb0:	df 93       	push	r29
    5fb2:	cf 93       	push	r28
    5fb4:	1f 93       	push	r17
    5fb6:	0f 93       	push	r16
    5fb8:	ff 92       	push	r15
    5fba:	ef 92       	push	r14
    5fbc:	19 2f       	mov	r17, r25
    5fbe:	98 7f       	andi	r25, 0xF8	; 248
    5fc0:	96 95       	lsr	r25
    5fc2:	e9 2f       	mov	r30, r25
    5fc4:	96 95       	lsr	r25
    5fc6:	96 95       	lsr	r25
    5fc8:	e9 0f       	add	r30, r25
    5fca:	ff 27       	eor	r31, r31
    5fcc:	ea 5c       	subi	r30, 0xCA	; 202
    5fce:	fd 4f       	sbci	r31, 0xFD	; 253
    5fd0:	99 27       	eor	r25, r25
    5fd2:	33 27       	eor	r19, r19
    5fd4:	ee 24       	eor	r14, r14
    5fd6:	ff 24       	eor	r15, r15
    5fd8:	a7 01       	movw	r20, r14
    5fda:	e7 01       	movw	r28, r14
    5fdc:	05 90       	lpm	r0, Z+
    5fde:	08 94       	sec
    5fe0:	07 94       	ror	r0
    5fe2:	28 f4       	brcc	.+10     	; 0x5fee <__ftoa_engine+0x80>
    5fe4:	36 0f       	add	r19, r22
    5fe6:	e7 1e       	adc	r14, r23
    5fe8:	f8 1e       	adc	r15, r24
    5fea:	49 1f       	adc	r20, r25
    5fec:	51 1d       	adc	r21, r1
    5fee:	66 0f       	add	r22, r22
    5ff0:	77 1f       	adc	r23, r23
    5ff2:	88 1f       	adc	r24, r24
    5ff4:	99 1f       	adc	r25, r25
    5ff6:	06 94       	lsr	r0
    5ff8:	a1 f7       	brne	.-24     	; 0x5fe2 <__ftoa_engine+0x74>
    5ffa:	05 90       	lpm	r0, Z+
    5ffc:	07 94       	ror	r0
    5ffe:	28 f4       	brcc	.+10     	; 0x600a <__ftoa_engine+0x9c>
    6000:	e7 0e       	add	r14, r23
    6002:	f8 1e       	adc	r15, r24
    6004:	49 1f       	adc	r20, r25
    6006:	56 1f       	adc	r21, r22
    6008:	c1 1d       	adc	r28, r1
    600a:	77 0f       	add	r23, r23
    600c:	88 1f       	adc	r24, r24
    600e:	99 1f       	adc	r25, r25
    6010:	66 1f       	adc	r22, r22
    6012:	06 94       	lsr	r0
    6014:	a1 f7       	brne	.-24     	; 0x5ffe <__ftoa_engine+0x90>
    6016:	05 90       	lpm	r0, Z+
    6018:	07 94       	ror	r0
    601a:	28 f4       	brcc	.+10     	; 0x6026 <__ftoa_engine+0xb8>
    601c:	f8 0e       	add	r15, r24
    601e:	49 1f       	adc	r20, r25
    6020:	56 1f       	adc	r21, r22
    6022:	c7 1f       	adc	r28, r23
    6024:	d1 1d       	adc	r29, r1
    6026:	88 0f       	add	r24, r24
    6028:	99 1f       	adc	r25, r25
    602a:	66 1f       	adc	r22, r22
    602c:	77 1f       	adc	r23, r23
    602e:	06 94       	lsr	r0
    6030:	a1 f7       	brne	.-24     	; 0x601a <__ftoa_engine+0xac>
    6032:	05 90       	lpm	r0, Z+
    6034:	07 94       	ror	r0
    6036:	20 f4       	brcc	.+8      	; 0x6040 <__ftoa_engine+0xd2>
    6038:	49 0f       	add	r20, r25
    603a:	56 1f       	adc	r21, r22
    603c:	c7 1f       	adc	r28, r23
    603e:	d8 1f       	adc	r29, r24
    6040:	99 0f       	add	r25, r25
    6042:	66 1f       	adc	r22, r22
    6044:	77 1f       	adc	r23, r23
    6046:	88 1f       	adc	r24, r24
    6048:	06 94       	lsr	r0
    604a:	a9 f7       	brne	.-22     	; 0x6036 <__ftoa_engine+0xc8>
    604c:	84 91       	lpm	r24, Z
    604e:	10 95       	com	r17
    6050:	17 70       	andi	r17, 0x07	; 7
    6052:	41 f0       	breq	.+16     	; 0x6064 <__ftoa_engine+0xf6>
    6054:	d6 95       	lsr	r29
    6056:	c7 95       	ror	r28
    6058:	57 95       	ror	r21
    605a:	47 95       	ror	r20
    605c:	f7 94       	ror	r15
    605e:	e7 94       	ror	r14
    6060:	1a 95       	dec	r17
    6062:	c1 f7       	brne	.-16     	; 0x6054 <__ftoa_engine+0xe6>
    6064:	ec ed       	ldi	r30, 0xDC	; 220
    6066:	f1 e0       	ldi	r31, 0x01	; 1
    6068:	68 94       	set
    606a:	15 90       	lpm	r1, Z+
    606c:	15 91       	lpm	r17, Z+
    606e:	35 91       	lpm	r19, Z+
    6070:	65 91       	lpm	r22, Z+
    6072:	95 91       	lpm	r25, Z+
    6074:	05 90       	lpm	r0, Z+
    6076:	7f e2       	ldi	r23, 0x2F	; 47
    6078:	73 95       	inc	r23
    607a:	e1 18       	sub	r14, r1
    607c:	f1 0a       	sbc	r15, r17
    607e:	43 0b       	sbc	r20, r19
    6080:	56 0b       	sbc	r21, r22
    6082:	c9 0b       	sbc	r28, r25
    6084:	d0 09       	sbc	r29, r0
    6086:	c0 f7       	brcc	.-16     	; 0x6078 <__ftoa_engine+0x10a>
    6088:	e1 0c       	add	r14, r1
    608a:	f1 1e       	adc	r15, r17
    608c:	43 1f       	adc	r20, r19
    608e:	56 1f       	adc	r21, r22
    6090:	c9 1f       	adc	r28, r25
    6092:	d0 1d       	adc	r29, r0
    6094:	7e f4       	brtc	.+30     	; 0x60b4 <__ftoa_engine+0x146>
    6096:	70 33       	cpi	r23, 0x30	; 48
    6098:	11 f4       	brne	.+4      	; 0x609e <__ftoa_engine+0x130>
    609a:	8a 95       	dec	r24
    609c:	e6 cf       	rjmp	.-52     	; 0x606a <__ftoa_engine+0xfc>
    609e:	e8 94       	clt
    60a0:	01 50       	subi	r16, 0x01	; 1
    60a2:	30 f0       	brcs	.+12     	; 0x60b0 <__ftoa_engine+0x142>
    60a4:	08 0f       	add	r16, r24
    60a6:	0a f4       	brpl	.+2      	; 0x60aa <__ftoa_engine+0x13c>
    60a8:	00 27       	eor	r16, r16
    60aa:	02 17       	cp	r16, r18
    60ac:	08 f4       	brcc	.+2      	; 0x60b0 <__ftoa_engine+0x142>
    60ae:	20 2f       	mov	r18, r16
    60b0:	23 95       	inc	r18
    60b2:	02 2f       	mov	r16, r18
    60b4:	7a 33       	cpi	r23, 0x3A	; 58
    60b6:	28 f0       	brcs	.+10     	; 0x60c2 <__ftoa_engine+0x154>
    60b8:	79 e3       	ldi	r23, 0x39	; 57
    60ba:	7d 93       	st	X+, r23
    60bc:	2a 95       	dec	r18
    60be:	e9 f7       	brne	.-6      	; 0x60ba <__ftoa_engine+0x14c>
    60c0:	10 c0       	rjmp	.+32     	; 0x60e2 <__ftoa_engine+0x174>
    60c2:	7d 93       	st	X+, r23
    60c4:	2a 95       	dec	r18
    60c6:	89 f6       	brne	.-94     	; 0x606a <__ftoa_engine+0xfc>
    60c8:	06 94       	lsr	r0
    60ca:	97 95       	ror	r25
    60cc:	67 95       	ror	r22
    60ce:	37 95       	ror	r19
    60d0:	17 95       	ror	r17
    60d2:	17 94       	ror	r1
    60d4:	e1 18       	sub	r14, r1
    60d6:	f1 0a       	sbc	r15, r17
    60d8:	43 0b       	sbc	r20, r19
    60da:	56 0b       	sbc	r21, r22
    60dc:	c9 0b       	sbc	r28, r25
    60de:	d0 09       	sbc	r29, r0
    60e0:	98 f0       	brcs	.+38     	; 0x6108 <__ftoa_engine+0x19a>
    60e2:	23 95       	inc	r18
    60e4:	7e 91       	ld	r23, -X
    60e6:	73 95       	inc	r23
    60e8:	7a 33       	cpi	r23, 0x3A	; 58
    60ea:	08 f0       	brcs	.+2      	; 0x60ee <__ftoa_engine+0x180>
    60ec:	70 e3       	ldi	r23, 0x30	; 48
    60ee:	7c 93       	st	X, r23
    60f0:	20 13       	cpse	r18, r16
    60f2:	b8 f7       	brcc	.-18     	; 0x60e2 <__ftoa_engine+0x174>
    60f4:	7e 91       	ld	r23, -X
    60f6:	70 61       	ori	r23, 0x10	; 16
    60f8:	7d 93       	st	X+, r23
    60fa:	30 f0       	brcs	.+12     	; 0x6108 <__ftoa_engine+0x19a>
    60fc:	83 95       	inc	r24
    60fe:	71 e3       	ldi	r23, 0x31	; 49
    6100:	7d 93       	st	X+, r23
    6102:	70 e3       	ldi	r23, 0x30	; 48
    6104:	2a 95       	dec	r18
    6106:	e1 f7       	brne	.-8      	; 0x6100 <__ftoa_engine+0x192>
    6108:	11 24       	eor	r1, r1
    610a:	ef 90       	pop	r14
    610c:	ff 90       	pop	r15
    610e:	0f 91       	pop	r16
    6110:	1f 91       	pop	r17
    6112:	cf 91       	pop	r28
    6114:	df 91       	pop	r29
    6116:	99 27       	eor	r25, r25
    6118:	87 fd       	sbrc	r24, 7
    611a:	90 95       	com	r25
    611c:	08 95       	ret

0000611e <strnlen_P>:
    611e:	fc 01       	movw	r30, r24
    6120:	05 90       	lpm	r0, Z+
    6122:	61 50       	subi	r22, 0x01	; 1
    6124:	70 40       	sbci	r23, 0x00	; 0
    6126:	01 10       	cpse	r0, r1
    6128:	d8 f7       	brcc	.-10     	; 0x6120 <strnlen_P+0x2>
    612a:	80 95       	com	r24
    612c:	90 95       	com	r25
    612e:	8e 0f       	add	r24, r30
    6130:	9f 1f       	adc	r25, r31
    6132:	08 95       	ret

00006134 <strcat>:
    6134:	fb 01       	movw	r30, r22
    6136:	dc 01       	movw	r26, r24
    6138:	0d 90       	ld	r0, X+
    613a:	00 20       	and	r0, r0
    613c:	e9 f7       	brne	.-6      	; 0x6138 <strcat+0x4>
    613e:	11 97       	sbiw	r26, 0x01	; 1
    6140:	01 90       	ld	r0, Z+
    6142:	0d 92       	st	X+, r0
    6144:	00 20       	and	r0, r0
    6146:	e1 f7       	brne	.-8      	; 0x6140 <strcat+0xc>
    6148:	08 95       	ret

0000614a <strcpy>:
    614a:	fb 01       	movw	r30, r22
    614c:	dc 01       	movw	r26, r24
    614e:	01 90       	ld	r0, Z+
    6150:	0d 92       	st	X+, r0
    6152:	00 20       	and	r0, r0
    6154:	e1 f7       	brne	.-8      	; 0x614e <strcpy+0x4>
    6156:	08 95       	ret

00006158 <strnlen>:
    6158:	fc 01       	movw	r30, r24
    615a:	61 50       	subi	r22, 0x01	; 1
    615c:	70 40       	sbci	r23, 0x00	; 0
    615e:	01 90       	ld	r0, Z+
    6160:	01 10       	cpse	r0, r1
    6162:	d8 f7       	brcc	.-10     	; 0x615a <strnlen+0x2>
    6164:	80 95       	com	r24
    6166:	90 95       	com	r25
    6168:	8e 0f       	add	r24, r30
    616a:	9f 1f       	adc	r25, r31
    616c:	08 95       	ret

0000616e <__mulsi_const_10>:
    616e:	59 2f       	mov	r21, r25
    6170:	48 2f       	mov	r20, r24
    6172:	37 2f       	mov	r19, r23
    6174:	26 2f       	mov	r18, r22
    6176:	66 0f       	add	r22, r22
    6178:	77 1f       	adc	r23, r23
    617a:	88 1f       	adc	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	66 0f       	add	r22, r22
    6180:	77 1f       	adc	r23, r23
    6182:	88 1f       	adc	r24, r24
    6184:	99 1f       	adc	r25, r25
    6186:	62 0f       	add	r22, r18
    6188:	73 1f       	adc	r23, r19
    618a:	84 1f       	adc	r24, r20
    618c:	95 1f       	adc	r25, r21
    618e:	66 0f       	add	r22, r22
    6190:	77 1f       	adc	r23, r23
    6192:	88 1f       	adc	r24, r24
    6194:	99 1f       	adc	r25, r25
    6196:	08 95       	ret

00006198 <__mulhi_const_10>:
    6198:	7a e0       	ldi	r23, 0x0A	; 10
    619a:	97 9f       	mul	r25, r23
    619c:	90 2d       	mov	r25, r0
    619e:	87 9f       	mul	r24, r23
    61a0:	80 2d       	mov	r24, r0
    61a2:	91 0d       	add	r25, r1
    61a4:	11 24       	eor	r1, r1
    61a6:	08 95       	ret

000061a8 <fputc>:
    61a8:	0f 93       	push	r16
    61aa:	1f 93       	push	r17
    61ac:	cf 93       	push	r28
    61ae:	df 93       	push	r29
    61b0:	fb 01       	movw	r30, r22
    61b2:	23 81       	ldd	r18, Z+3	; 0x03
    61b4:	21 fd       	sbrc	r18, 1
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <fputc+0x16>
    61b8:	8f ef       	ldi	r24, 0xFF	; 255
    61ba:	9f ef       	ldi	r25, 0xFF	; 255
    61bc:	2c c0       	rjmp	.+88     	; 0x6216 <fputc+0x6e>
    61be:	22 ff       	sbrs	r18, 2
    61c0:	16 c0       	rjmp	.+44     	; 0x61ee <fputc+0x46>
    61c2:	46 81       	ldd	r20, Z+6	; 0x06
    61c4:	57 81       	ldd	r21, Z+7	; 0x07
    61c6:	24 81       	ldd	r18, Z+4	; 0x04
    61c8:	35 81       	ldd	r19, Z+5	; 0x05
    61ca:	42 17       	cp	r20, r18
    61cc:	53 07       	cpc	r21, r19
    61ce:	44 f4       	brge	.+16     	; 0x61e0 <fputc+0x38>
    61d0:	a0 81       	ld	r26, Z
    61d2:	b1 81       	ldd	r27, Z+1	; 0x01
    61d4:	9d 01       	movw	r18, r26
    61d6:	2f 5f       	subi	r18, 0xFF	; 255
    61d8:	3f 4f       	sbci	r19, 0xFF	; 255
    61da:	20 83       	st	Z, r18
    61dc:	31 83       	std	Z+1, r19	; 0x01
    61de:	8c 93       	st	X, r24
    61e0:	26 81       	ldd	r18, Z+6	; 0x06
    61e2:	37 81       	ldd	r19, Z+7	; 0x07
    61e4:	2f 5f       	subi	r18, 0xFF	; 255
    61e6:	3f 4f       	sbci	r19, 0xFF	; 255
    61e8:	26 83       	std	Z+6, r18	; 0x06
    61ea:	37 83       	std	Z+7, r19	; 0x07
    61ec:	14 c0       	rjmp	.+40     	; 0x6216 <fputc+0x6e>
    61ee:	8b 01       	movw	r16, r22
    61f0:	ec 01       	movw	r28, r24
    61f2:	fb 01       	movw	r30, r22
    61f4:	00 84       	ldd	r0, Z+8	; 0x08
    61f6:	f1 85       	ldd	r31, Z+9	; 0x09
    61f8:	e0 2d       	mov	r30, r0
    61fa:	09 95       	icall
    61fc:	89 2b       	or	r24, r25
    61fe:	e1 f6       	brne	.-72     	; 0x61b8 <fputc+0x10>
    6200:	d8 01       	movw	r26, r16
    6202:	16 96       	adiw	r26, 0x06	; 6
    6204:	8d 91       	ld	r24, X+
    6206:	9c 91       	ld	r25, X
    6208:	17 97       	sbiw	r26, 0x07	; 7
    620a:	01 96       	adiw	r24, 0x01	; 1
    620c:	16 96       	adiw	r26, 0x06	; 6
    620e:	8d 93       	st	X+, r24
    6210:	9c 93       	st	X, r25
    6212:	17 97       	sbiw	r26, 0x07	; 7
    6214:	ce 01       	movw	r24, r28
    6216:	df 91       	pop	r29
    6218:	cf 91       	pop	r28
    621a:	1f 91       	pop	r17
    621c:	0f 91       	pop	r16
    621e:	08 95       	ret

00006220 <sprintf>:
    6220:	ae e0       	ldi	r26, 0x0E	; 14
    6222:	b0 e0       	ldi	r27, 0x00	; 0
    6224:	e6 e1       	ldi	r30, 0x16	; 22
    6226:	f1 e3       	ldi	r31, 0x31	; 49
    6228:	0c 94 0a 2f 	jmp	0x5e14	; 0x5e14 <__prologue_saves__+0x1c>
    622c:	0d 89       	ldd	r16, Y+21	; 0x15
    622e:	1e 89       	ldd	r17, Y+22	; 0x16
    6230:	86 e0       	ldi	r24, 0x06	; 6
    6232:	8c 83       	std	Y+4, r24	; 0x04
    6234:	09 83       	std	Y+1, r16	; 0x01
    6236:	1a 83       	std	Y+2, r17	; 0x02
    6238:	8f ef       	ldi	r24, 0xFF	; 255
    623a:	9f e7       	ldi	r25, 0x7F	; 127
    623c:	8d 83       	std	Y+5, r24	; 0x05
    623e:	9e 83       	std	Y+6, r25	; 0x06
    6240:	ae 01       	movw	r20, r28
    6242:	47 5e       	subi	r20, 0xE7	; 231
    6244:	5f 4f       	sbci	r21, 0xFF	; 255
    6246:	6f 89       	ldd	r22, Y+23	; 0x17
    6248:	78 8d       	ldd	r23, Y+24	; 0x18
    624a:	ce 01       	movw	r24, r28
    624c:	01 96       	adiw	r24, 0x01	; 1
    624e:	0e 94 3b 2b 	call	0x5676	; 0x5676 <vfprintf>
    6252:	ef 81       	ldd	r30, Y+7	; 0x07
    6254:	f8 85       	ldd	r31, Y+8	; 0x08
    6256:	e0 0f       	add	r30, r16
    6258:	f1 1f       	adc	r31, r17
    625a:	10 82       	st	Z, r1
    625c:	2e 96       	adiw	r28, 0x0e	; 14
    625e:	e4 e0       	ldi	r30, 0x04	; 4
    6260:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <__epilogue_restores__+0x1c>

00006264 <__ultoa_invert>:
    6264:	fa 01       	movw	r30, r20
    6266:	aa 27       	eor	r26, r26
    6268:	28 30       	cpi	r18, 0x08	; 8
    626a:	51 f1       	breq	.+84     	; 0x62c0 <__ultoa_invert+0x5c>
    626c:	20 31       	cpi	r18, 0x10	; 16
    626e:	81 f1       	breq	.+96     	; 0x62d0 <__ultoa_invert+0x6c>
    6270:	e8 94       	clt
    6272:	6f 93       	push	r22
    6274:	6e 7f       	andi	r22, 0xFE	; 254
    6276:	6e 5f       	subi	r22, 0xFE	; 254
    6278:	7f 4f       	sbci	r23, 0xFF	; 255
    627a:	8f 4f       	sbci	r24, 0xFF	; 255
    627c:	9f 4f       	sbci	r25, 0xFF	; 255
    627e:	af 4f       	sbci	r26, 0xFF	; 255
    6280:	b1 e0       	ldi	r27, 0x01	; 1
    6282:	3e d0       	rcall	.+124    	; 0x6300 <__ultoa_invert+0x9c>
    6284:	b4 e0       	ldi	r27, 0x04	; 4
    6286:	3c d0       	rcall	.+120    	; 0x6300 <__ultoa_invert+0x9c>
    6288:	67 0f       	add	r22, r23
    628a:	78 1f       	adc	r23, r24
    628c:	89 1f       	adc	r24, r25
    628e:	9a 1f       	adc	r25, r26
    6290:	a1 1d       	adc	r26, r1
    6292:	68 0f       	add	r22, r24
    6294:	79 1f       	adc	r23, r25
    6296:	8a 1f       	adc	r24, r26
    6298:	91 1d       	adc	r25, r1
    629a:	a1 1d       	adc	r26, r1
    629c:	6a 0f       	add	r22, r26
    629e:	71 1d       	adc	r23, r1
    62a0:	81 1d       	adc	r24, r1
    62a2:	91 1d       	adc	r25, r1
    62a4:	a1 1d       	adc	r26, r1
    62a6:	20 d0       	rcall	.+64     	; 0x62e8 <__ultoa_invert+0x84>
    62a8:	09 f4       	brne	.+2      	; 0x62ac <__ultoa_invert+0x48>
    62aa:	68 94       	set
    62ac:	3f 91       	pop	r19
    62ae:	2a e0       	ldi	r18, 0x0A	; 10
    62b0:	26 9f       	mul	r18, r22
    62b2:	11 24       	eor	r1, r1
    62b4:	30 19       	sub	r19, r0
    62b6:	30 5d       	subi	r19, 0xD0	; 208
    62b8:	31 93       	st	Z+, r19
    62ba:	de f6       	brtc	.-74     	; 0x6272 <__ultoa_invert+0xe>
    62bc:	cf 01       	movw	r24, r30
    62be:	08 95       	ret
    62c0:	46 2f       	mov	r20, r22
    62c2:	47 70       	andi	r20, 0x07	; 7
    62c4:	40 5d       	subi	r20, 0xD0	; 208
    62c6:	41 93       	st	Z+, r20
    62c8:	b3 e0       	ldi	r27, 0x03	; 3
    62ca:	0f d0       	rcall	.+30     	; 0x62ea <__ultoa_invert+0x86>
    62cc:	c9 f7       	brne	.-14     	; 0x62c0 <__ultoa_invert+0x5c>
    62ce:	f6 cf       	rjmp	.-20     	; 0x62bc <__ultoa_invert+0x58>
    62d0:	46 2f       	mov	r20, r22
    62d2:	4f 70       	andi	r20, 0x0F	; 15
    62d4:	40 5d       	subi	r20, 0xD0	; 208
    62d6:	4a 33       	cpi	r20, 0x3A	; 58
    62d8:	18 f0       	brcs	.+6      	; 0x62e0 <__ultoa_invert+0x7c>
    62da:	49 5d       	subi	r20, 0xD9	; 217
    62dc:	31 fd       	sbrc	r19, 1
    62de:	40 52       	subi	r20, 0x20	; 32
    62e0:	41 93       	st	Z+, r20
    62e2:	02 d0       	rcall	.+4      	; 0x62e8 <__ultoa_invert+0x84>
    62e4:	a9 f7       	brne	.-22     	; 0x62d0 <__ultoa_invert+0x6c>
    62e6:	ea cf       	rjmp	.-44     	; 0x62bc <__ultoa_invert+0x58>
    62e8:	b4 e0       	ldi	r27, 0x04	; 4
    62ea:	a6 95       	lsr	r26
    62ec:	97 95       	ror	r25
    62ee:	87 95       	ror	r24
    62f0:	77 95       	ror	r23
    62f2:	67 95       	ror	r22
    62f4:	ba 95       	dec	r27
    62f6:	c9 f7       	brne	.-14     	; 0x62ea <__ultoa_invert+0x86>
    62f8:	00 97       	sbiw	r24, 0x00	; 0
    62fa:	61 05       	cpc	r22, r1
    62fc:	71 05       	cpc	r23, r1
    62fe:	08 95       	ret
    6300:	9b 01       	movw	r18, r22
    6302:	ac 01       	movw	r20, r24
    6304:	0a 2e       	mov	r0, r26
    6306:	06 94       	lsr	r0
    6308:	57 95       	ror	r21
    630a:	47 95       	ror	r20
    630c:	37 95       	ror	r19
    630e:	27 95       	ror	r18
    6310:	ba 95       	dec	r27
    6312:	c9 f7       	brne	.-14     	; 0x6306 <__ultoa_invert+0xa2>
    6314:	62 0f       	add	r22, r18
    6316:	73 1f       	adc	r23, r19
    6318:	84 1f       	adc	r24, r20
    631a:	95 1f       	adc	r25, r21
    631c:	a0 1d       	adc	r26, r0
    631e:	08 95       	ret

00006320 <eeprom_read_block>:
    6320:	60 50       	subi	r22, 0x00	; 0
    6322:	7c 4e       	sbci	r23, 0xEC	; 236
    6324:	0c 94 cb 31 	jmp	0x6396	; 0x6396 <memcpy>

00006328 <eeprom_update_block>:
    6328:	dc 01       	movw	r26, r24
    632a:	a4 0f       	add	r26, r20
    632c:	b5 1f       	adc	r27, r21
    632e:	41 50       	subi	r20, 0x01	; 1
    6330:	50 40       	sbci	r21, 0x00	; 0
    6332:	48 f0       	brcs	.+18     	; 0x6346 <eeprom_update_block+0x1e>
    6334:	cb 01       	movw	r24, r22
    6336:	84 0f       	add	r24, r20
    6338:	95 1f       	adc	r25, r21
    633a:	2e 91       	ld	r18, -X
    633c:	0e 94 a5 31 	call	0x634a	; 0x634a <eeprom_update_r18>
    6340:	41 50       	subi	r20, 0x01	; 1
    6342:	50 40       	sbci	r21, 0x00	; 0
    6344:	d0 f7       	brcc	.-12     	; 0x633a <eeprom_update_block+0x12>
    6346:	08 95       	ret

00006348 <eeprom_update_byte>:
    6348:	26 2f       	mov	r18, r22

0000634a <eeprom_update_r18>:
    634a:	0e 94 c7 31 	call	0x638e	; 0x638e <eeprom_mapen>
    634e:	00 80       	ld	r0, Z
    6350:	02 16       	cp	r0, r18
    6352:	19 f0       	breq	.+6      	; 0x635a <eeprom_update_r18+0x10>
    6354:	0e 94 b0 31 	call	0x6360	; 0x6360 <eeprom_write_r18>
    6358:	01 97       	sbiw	r24, 0x01	; 1
    635a:	01 97       	sbiw	r24, 0x01	; 1
    635c:	08 95       	ret

0000635e <eeprom_write_byte>:
    635e:	26 2f       	mov	r18, r22

00006360 <eeprom_write_r18>:
    6360:	af 93       	push	r26
    6362:	bf 93       	push	r27
    6364:	e0 e0       	ldi	r30, 0x00	; 0
    6366:	f0 e1       	ldi	r31, 0x10	; 16
    6368:	32 81       	ldd	r19, Z+2	; 0x02
    636a:	31 fd       	sbrc	r19, 1
    636c:	fd cf       	rjmp	.-6      	; 0x6368 <eeprom_write_r18+0x8>
    636e:	dc 01       	movw	r26, r24
    6370:	a0 50       	subi	r26, 0x00	; 0
    6372:	bc 4e       	sbci	r27, 0xEC	; 236
    6374:	2c 93       	st	X, r18
    6376:	2d e9       	ldi	r18, 0x9D	; 157
    6378:	24 bf       	out	0x34, r18	; 52
    637a:	23 e0       	ldi	r18, 0x03	; 3
    637c:	20 83       	st	Z, r18
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	bf 91       	pop	r27
    6382:	af 91       	pop	r26
    6384:	08 95       	ret

00006386 <eeprom_read_byte>:
    6386:	03 d0       	rcall	.+6      	; 0x638e <eeprom_mapen>
    6388:	80 81       	ld	r24, Z
    638a:	99 27       	eor	r25, r25
    638c:	08 95       	ret

0000638e <eeprom_mapen>:
    638e:	fc 01       	movw	r30, r24
    6390:	e0 50       	subi	r30, 0x00	; 0
    6392:	fc 4e       	sbci	r31, 0xEC	; 236
    6394:	08 95       	ret

00006396 <memcpy>:
    6396:	fb 01       	movw	r30, r22
    6398:	dc 01       	movw	r26, r24
    639a:	02 c0       	rjmp	.+4      	; 0x63a0 <memcpy+0xa>
    639c:	01 90       	ld	r0, Z+
    639e:	0d 92       	st	X+, r0
    63a0:	41 50       	subi	r20, 0x01	; 1
    63a2:	50 40       	sbci	r21, 0x00	; 0
    63a4:	d8 f7       	brcc	.-10     	; 0x639c <memcpy+0x6>
    63a6:	08 95       	ret

000063a8 <_exit>:
    63a8:	f8 94       	cli

000063aa <__stop_program>:
    63aa:	ff cf       	rjmp	.-2      	; 0x63aa <__stop_program>
