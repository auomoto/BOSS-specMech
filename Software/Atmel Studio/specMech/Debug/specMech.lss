
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000073eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000676a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bed  0000a76a  0000676a  000067fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a5b  00802800  00802800  000073eb  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000073eb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007448  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000670  00000000  00000000  00007488  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bfca  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004563  00000000  00000000  00013ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004d60  00000000  00000000  00018025  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001428  00000000  00000000  0001cd88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002692  00000000  00000000  0001e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b3c  00000000  00000000  00020842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  0002637e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       c:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__vector_3>
      10:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <__vector_4>
      14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      18:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      1c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      20:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      24:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      28:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      2c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      30:	0c 94 b7 27 	jmp	0x4f6e	; 0x4f6e <__vector_12>
      34:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      38:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      3c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      40:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      44:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <__vector_17>
      48:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__vector_18>
      4c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      50:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_20>
      54:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      58:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      5c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      60:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      64:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      68:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__vector_26>
      6c:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__vector_27>
      70:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      74:	0c 94 e7 2a 	jmp	0x55ce	; 0x55ce <__vector_29>
      78:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      7c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      80:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      84:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      88:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      8c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      90:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      94:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__vector_37>
      98:	0c 94 b3 2a 	jmp	0x5566	; 0x5566 <__vector_38>
      9c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      a0:	e5 04       	cpc	r14, r5
      a2:	0f 05       	cpc	r16, r15
      a4:	0f 05       	cpc	r16, r15
      a6:	0f 05       	cpc	r16, r15
      a8:	0f 05       	cpc	r16, r15
      aa:	0f 05       	cpc	r16, r15
      ac:	0f 05       	cpc	r16, r15
      ae:	0f 05       	cpc	r16, r15
      b0:	0f 05       	cpc	r16, r15
      b2:	e8 04       	cpc	r14, r8
      b4:	0f 05       	cpc	r16, r15
      b6:	0f 05       	cpc	r16, r15
      b8:	0f 05       	cpc	r16, r15
      ba:	0f 05       	cpc	r16, r15
      bc:	0f 05       	cpc	r16, r15
      be:	0f 05       	cpc	r16, r15
      c0:	0f 05       	cpc	r16, r15
      c2:	0c 05       	cpc	r16, r12
      c4:	0f 05       	cpc	r16, r15
      c6:	0f 05       	cpc	r16, r15
      c8:	0f 05       	cpc	r16, r15
      ca:	0f 05       	cpc	r16, r15
      cc:	0f 05       	cpc	r16, r15
      ce:	0f 05       	cpc	r16, r15
      d0:	0f 05       	cpc	r16, r15
      d2:	0f 05       	cpc	r16, r15
      d4:	d3 04       	cpc	r13, r3
      d6:	0f 05       	cpc	r16, r15
      d8:	0f 05       	cpc	r16, r15
      da:	0f 05       	cpc	r16, r15
      dc:	0f 05       	cpc	r16, r15
      de:	0f 05       	cpc	r16, r15
      e0:	0f 05       	cpc	r16, r15
      e2:	0f 05       	cpc	r16, r15
      e4:	0f 05       	cpc	r16, r15
      e6:	0f 05       	cpc	r16, r15
      e8:	d9 04       	cpc	r13, r9
      ea:	0f 05       	cpc	r16, r15
      ec:	d6 04       	cpc	r13, r6
      ee:	0f 05       	cpc	r16, r15
      f0:	0f 05       	cpc	r16, r15
      f2:	dc 04       	cpc	r13, r12
      f4:	df 04       	cpc	r13, r15
      f6:	e2 04       	cpc	r14, r2
      f8:	9e 11       	cpse	r25, r14
      fa:	9e 11       	cpse	r25, r14
      fc:	9e 11       	cpse	r25, r14
      fe:	f1 17       	cp	r31, r17
     100:	f1 17       	cp	r31, r17
     102:	f1 17       	cp	r31, r17
     104:	f1 17       	cp	r31, r17
     106:	f1 17       	cp	r31, r17
     108:	f1 17       	cp	r31, r17
     10a:	f1 17       	cp	r31, r17
     10c:	f1 17       	cp	r31, r17
     10e:	f1 17       	cp	r31, r17
     110:	f1 17       	cp	r31, r17
     112:	f1 17       	cp	r31, r17
     114:	f1 17       	cp	r31, r17
     116:	f1 17       	cp	r31, r17
     118:	f1 17       	cp	r31, r17
     11a:	f1 17       	cp	r31, r17
     11c:	f1 17       	cp	r31, r17
     11e:	f1 17       	cp	r31, r17
     120:	f1 17       	cp	r31, r17
     122:	b3 17       	cp	r27, r19
     124:	f1 17       	cp	r31, r17
     126:	f1 17       	cp	r31, r17
     128:	f1 17       	cp	r31, r17
     12a:	f1 17       	cp	r31, r17
     12c:	f1 17       	cp	r31, r17
     12e:	f1 17       	cp	r31, r17
     130:	f1 17       	cp	r31, r17
     132:	f1 17       	cp	r31, r17
     134:	f1 17       	cp	r31, r17
     136:	f1 17       	cp	r31, r17
     138:	95 13       	cpse	r25, r21
     13a:	95 13       	cpse	r25, r21
     13c:	95 13       	cpse	r25, r21
     13e:	f1 17       	cp	r31, r17
     140:	76 14       	cp	r7, r6
     142:	f1 17       	cp	r31, r17
     144:	f1 17       	cp	r31, r17
     146:	f1 17       	cp	r31, r17
     148:	f1 17       	cp	r31, r17
     14a:	f1 17       	cp	r31, r17
     14c:	f1 17       	cp	r31, r17
     14e:	f1 17       	cp	r31, r17
     150:	f1 17       	cp	r31, r17
     152:	f1 17       	cp	r31, r17
     154:	b3 15       	cp	r27, r3
     156:	89 16       	cp	r8, r25
     158:	f1 17       	cp	r31, r17
     15a:	f1 17       	cp	r31, r17
     15c:	f1 17       	cp	r31, r17
     15e:	12 17       	cp	r17, r18
     160:	f1 17       	cp	r31, r17
     162:	5a 17       	cp	r21, r26
     164:	ad 23       	and	r26, r29
     166:	ad 23       	and	r26, r29
     168:	ad 23       	and	r26, r29
     16a:	b9 23       	and	r27, r25
     16c:	42 24       	eor	r4, r2
     16e:	42 24       	eor	r4, r2
     170:	42 24       	eor	r4, r2
     172:	42 24       	eor	r4, r2
     174:	42 24       	eor	r4, r2
     176:	42 24       	eor	r4, r2
     178:	42 24       	eor	r4, r2
     17a:	42 24       	eor	r4, r2
     17c:	42 24       	eor	r4, r2
     17e:	42 24       	eor	r4, r2
     180:	42 24       	eor	r4, r2
     182:	42 24       	eor	r4, r2
     184:	42 24       	eor	r4, r2
     186:	42 24       	eor	r4, r2
     188:	42 24       	eor	r4, r2
     18a:	42 24       	eor	r4, r2
     18c:	42 24       	eor	r4, r2
     18e:	42 24       	eor	r4, r2
     190:	42 24       	eor	r4, r2
     192:	42 24       	eor	r4, r2
     194:	42 24       	eor	r4, r2
     196:	42 24       	eor	r4, r2
     198:	42 24       	eor	r4, r2
     19a:	42 24       	eor	r4, r2
     19c:	42 24       	eor	r4, r2
     19e:	42 24       	eor	r4, r2
     1a0:	42 24       	eor	r4, r2
     1a2:	42 24       	eor	r4, r2
     1a4:	f1 23       	and	r31, r17
     1a6:	f1 23       	and	r31, r17
     1a8:	f1 23       	and	r31, r17
     1aa:	16 24       	eor	r1, r6
     1ac:	42 24       	eor	r4, r2
     1ae:	42 24       	eor	r4, r2
     1b0:	42 24       	eor	r4, r2
     1b2:	42 24       	eor	r4, r2
     1b4:	42 24       	eor	r4, r2
     1b6:	42 24       	eor	r4, r2
     1b8:	42 24       	eor	r4, r2
     1ba:	42 24       	eor	r4, r2
     1bc:	42 24       	eor	r4, r2
     1be:	42 24       	eor	r4, r2
     1c0:	42 24       	eor	r4, r2
     1c2:	42 24       	eor	r4, r2
     1c4:	42 24       	eor	r4, r2
     1c6:	42 24       	eor	r4, r2
     1c8:	42 24       	eor	r4, r2
     1ca:	42 24       	eor	r4, r2
     1cc:	42 24       	eor	r4, r2
     1ce:	42 24       	eor	r4, r2
     1d0:	42 24       	eor	r4, r2
     1d2:	a9 23       	and	r26, r25

000001d4 <__trampolines_end>:
     1d4:	6e 61       	ori	r22, 0x1E	; 30
     1d6:	6e 00       	.word	0x006e	; ????

000001d8 <__c.2332>:
     1d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     208:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     218:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     228:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     238:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     248:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     258:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     268:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     278:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     288:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     298:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf ef       	ldi	r28, 0xFF	; 255
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df e3       	ldi	r29, 0x3F	; 63
     2e0:	de bf       	out	0x3e, r29	; 62

000002e2 <__do_clear_bss>:
     2e2:	22 e3       	ldi	r18, 0x32	; 50
     2e4:	a0 e0       	ldi	r26, 0x00	; 0
     2e6:	b8 e2       	ldi	r27, 0x28	; 40
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <.do_clear_bss_start>

000002ea <.do_clear_bss_loop>:
     2ea:	1d 92       	st	X+, r1

000002ec <.do_clear_bss_start>:
     2ec:	ab 35       	cpi	r26, 0x5B	; 91
     2ee:	b2 07       	cpc	r27, r18
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <.do_clear_bss_loop>
     2f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <main>
     2f6:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <_exit>

000002fa <__bad_interrupt>:
     2fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fe <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     2fe:	8f 92       	push	r8
     300:	9f 92       	push	r9
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <read_AD590+0x16>
     314:	00 d0       	rcall	.+0      	; 0x316 <read_AD590+0x18>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	c9 f0       	breq	.+50     	; 0x352 <read_AD590+0x54>
     320:	18 f0       	brcs	.+6      	; 0x328 <read_AD590+0x2a>
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	61 f0       	breq	.+24     	; 0x33e <read_AD590+0x40>
     326:	10 c0       	rjmp	.+32     	; 0x348 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     328:	0f 2e       	mov	r0, r31
     32a:	f3 e3       	ldi	r31, 0x33	; 51
     32c:	8f 2e       	mov	r8, r31
     32e:	98 2c       	mov	r9, r8
     330:	f3 ef       	ldi	r31, 0xF3	; 243
     332:	af 2e       	mov	r10, r31
     334:	f0 e4       	ldi	r31, 0x40	; 64
     336:	bf 2e       	mov	r11, r31
     338:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     33a:	11 e0       	ldi	r17, 0x01	; 1
     33c:	0e c0       	rjmp	.+28     	; 0x35a <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     33e:	81 2c       	mov	r8, r1
     340:	91 2c       	mov	r9, r1
     342:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     344:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     346:	09 c0       	rjmp	.+18     	; 0x35a <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     348:	81 2c       	mov	r8, r1
     34a:	91 2c       	mov	r9, r1
     34c:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     34e:	10 e0       	ldi	r17, 0x00	; 0
			break;
     350:	04 c0       	rjmp	.+8      	; 0x35a <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     352:	81 2c       	mov	r8, r1
     354:	91 2c       	mov	r9, r1
     356:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     358:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	66 e0       	ldi	r22, 0x06	; 6
     35e:	87 e2       	ldi	r24, 0x27	; 39
     360:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     364:	41 2f       	mov	r20, r17
     366:	40 95       	com	r20
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	87 e2       	ldi	r24, 0x27	; 39
     36c:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     370:	41 2f       	mov	r20, r17
     372:	6a e0       	ldi	r22, 0x0A	; 10
     374:	87 e2       	ldi	r24, 0x27	; 39
     376:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	86 e1       	ldi	r24, 0x16	; 22
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <read_AD590+0x7e>
     380:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     382:	8e 01       	movw	r16, r28
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	20 e8       	ldi	r18, 0x80	; 128
     38a:	40 e7       	ldi	r20, 0x70	; 112
     38c:	68 e0       	ldi	r22, 0x08	; 8
     38e:	88 e4       	ldi	r24, 0x48	; 72
     390:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	51 f4       	brne	.+20     	; 0x3ac <read_AD590+0xae>
		*temperature = BADFLOAT;
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e8       	ldi	r21, 0x80	; 128
     39c:	66 e2       	ldi	r22, 0x26	; 38
     39e:	74 ec       	ldi	r23, 0xC4	; 196
     3a0:	f7 01       	movw	r30, r14
     3a2:	40 83       	st	Z, r20
     3a4:	51 83       	std	Z+1, r21	; 0x01
     3a6:	62 83       	std	Z+2, r22	; 0x02
     3a8:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     3aa:	1c c0       	rjmp	.+56     	; 0x3e4 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	4a e7       	ldi	r20, 0x7A	; 122
     3b2:	54 e4       	ldi	r21, 0x44	; 68
     3b4:	69 81       	ldd	r22, Y+1	; 0x01
     3b6:	7a 81       	ldd	r23, Y+2	; 0x02
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e9       	ldi	r19, 0x93	; 147
     3c4:	48 e8       	ldi	r20, 0x88	; 136
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 12 2b 	call	0x5624	; 0x5624 <__subsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c5 01       	movw	r24, r10
     3d2:	b4 01       	movw	r22, r8
     3d4:	0e 94 13 2b 	call	0x5626	; 0x5626 <__addsf3>
     3d8:	f7 01       	movw	r30, r14
     3da:	60 83       	st	Z, r22
     3dc:	71 83       	std	Z+1, r23	; 0x01
     3de:	82 83       	std	Z+2, r24	; 0x02
     3e0:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     3e2:	80 e0       	ldi	r24, 0x00	; 0

}
     3e4:	24 96       	adiw	r28, 0x04	; 4
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	08 95       	ret

00000400 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	f8 2e       	mov	r15, r24
     41a:	e6 2e       	mov	r14, r22
     41c:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     41e:	46 2b       	or	r20, r22
     420:	c4 2f       	mov	r28, r20
     422:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     424:	d2 2f       	mov	r29, r18
     426:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e8       	ldi	r25, 0x80	; 128
     42c:	a6 e2       	ldi	r26, 0x26	; 38
     42e:	b4 ec       	ldi	r27, 0xC4	; 196
     430:	f8 01       	movw	r30, r16
     432:	80 83       	st	Z, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	a2 83       	std	Z+2, r26	; 0x02
     438:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8f 2d       	mov	r24, r15
     43e:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
     442:	08 2f       	mov	r16, r24
     444:	88 23       	and	r24, r24
     446:	21 f0       	breq	.+8      	; 0x450 <read_ADS1115+0x50>
		stop_TWI();
     448:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     44c:	13 e6       	ldi	r17, 0x63	; 99
     44e:	b4 c0       	rjmp	.+360    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     456:	18 2f       	mov	r17, r24
     458:	83 36       	cpi	r24, 0x63	; 99
     45a:	19 f4       	brne	.+6      	; 0x462 <read_ADS1115+0x62>
		stop_TWI();
     45c:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     460:	ab c0       	rjmp	.+342    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     468:	18 2f       	mov	r17, r24
     46a:	83 36       	cpi	r24, 0x63	; 99
     46c:	19 f4       	brne	.+6      	; 0x474 <read_ADS1115+0x74>
		stop_TWI();
     46e:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     472:	a2 c0       	rjmp	.+324    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     474:	8d 2f       	mov	r24, r29
     476:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     47a:	18 2f       	mov	r17, r24
     47c:	83 36       	cpi	r24, 0x63	; 99
     47e:	19 f4       	brne	.+6      	; 0x486 <read_ADS1115+0x86>
		stop_TWI();
     480:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     484:	99 c0       	rjmp	.+306    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	stop_TWI();
     486:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
     48a:	fc e1       	ldi	r31, 0x1C	; 28
     48c:	fa 95       	dec	r31
     48e:	f1 f7       	brne	.-4      	; 0x48c <read_ADS1115+0x8c>

	_delay_us(25);									// Power-up time

	converting = YES;
     490:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <read_ADS1115+0xa6>
		start_TWI(addr, TWIREAD);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8f 2d       	mov	r24, r15
     498:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
		flag = readlast_TWI();
     49c:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
		if (flag & 0b10000000) {
     4a0:	88 23       	and	r24, r24
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <read_ADS1115+0xa6>
			converting = NO;
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     4a6:	c1 11       	cpse	r28, r1
     4a8:	f5 cf       	rjmp	.-22     	; 0x494 <read_ADS1115+0x94>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     4aa:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	8f 2d       	mov	r24, r15
     4b2:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8f 2d       	mov	r24, r15
     4c0:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
	highbyte = read_TWI();
     4c4:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <read_TWI>
     4c8:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     4ca:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
     4ce:	d8 2f       	mov	r29, r24
	stop_TWI();
     4d0:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	value = highbyte;
     4d4:	6c 2f       	mov	r22, r28
     4d6:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     4d8:	76 2f       	mov	r23, r22
     4da:	66 27       	eor	r22, r22
	value |= lowbyte;
     4dc:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	e8 16       	cp	r14, r24
     4e2:	49 f1       	breq	.+82     	; 0x536 <read_ADS1115+0x136>
     4e4:	8e 15       	cp	r24, r14
     4e6:	30 f0       	brcs	.+12     	; 0x4f4 <read_ADS1115+0xf4>
     4e8:	ee 20       	and	r14, r14
     4ea:	d9 f1       	breq	.+118    	; 0x562 <read_ADS1115+0x162>
     4ec:	e2 e0       	ldi	r30, 0x02	; 2
     4ee:	ee 16       	cp	r14, r30
     4f0:	69 f1       	breq	.+90     	; 0x54c <read_ADS1115+0x14c>
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <read_ADS1115+0x178>
     4f4:	f8 e0       	ldi	r31, 0x08	; 8
     4f6:	ef 16       	cp	r14, r31
     4f8:	09 f4       	brne	.+2      	; 0x4fc <read_ADS1115+0xfc>
     4fa:	42 c0       	rjmp	.+132    	; 0x580 <read_ADS1115+0x180>
     4fc:	8a e0       	ldi	r24, 0x0A	; 10
     4fe:	e8 16       	cp	r14, r24
     500:	21 f0       	breq	.+8      	; 0x50a <read_ADS1115+0x10a>
     502:	e6 e0       	ldi	r30, 0x06	; 6
     504:	ee 12       	cpse	r14, r30
     506:	38 c0       	rjmp	.+112    	; 0x578 <read_ADS1115+0x178>
     508:	0b c0       	rjmp	.+22     	; 0x520 <read_ADS1115+0x120>
		case PGA0256:
			scale = SCA0256;
     50a:	0f 2e       	mov	r0, r31
     50c:	f4 e7       	ldi	r31, 0x74	; 116
     50e:	8f 2e       	mov	r8, r31
     510:	f3 e1       	ldi	r31, 0x13	; 19
     512:	9f 2e       	mov	r9, r31
     514:	f3 e0       	ldi	r31, 0x03	; 3
     516:	af 2e       	mov	r10, r31
     518:	f7 e3       	ldi	r31, 0x37	; 55
     51a:	bf 2e       	mov	r11, r31
     51c:	f0 2d       	mov	r31, r0
     51e:	3a c0       	rjmp	.+116    	; 0x594 <read_ADS1115+0x194>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     520:	0f 2e       	mov	r0, r31
     522:	f4 e7       	ldi	r31, 0x74	; 116
     524:	8f 2e       	mov	r8, r31
     526:	f3 e1       	ldi	r31, 0x13	; 19
     528:	9f 2e       	mov	r9, r31
     52a:	f3 e0       	ldi	r31, 0x03	; 3
     52c:	af 2e       	mov	r10, r31
     52e:	f8 e3       	ldi	r31, 0x38	; 56
     530:	bf 2e       	mov	r11, r31
     532:	f0 2d       	mov	r31, r0
			break;
     534:	2f c0       	rjmp	.+94     	; 0x594 <read_ADS1115+0x194>
		case PGA2048:
			scale = SCA2048;
     536:	0f 2e       	mov	r0, r31
     538:	f2 e1       	ldi	r31, 0x12	; 18
     53a:	8f 2e       	mov	r8, r31
     53c:	f3 e1       	ldi	r31, 0x13	; 19
     53e:	9f 2e       	mov	r9, r31
     540:	f3 e8       	ldi	r31, 0x83	; 131
     542:	af 2e       	mov	r10, r31
     544:	f8 e3       	ldi	r31, 0x38	; 56
     546:	bf 2e       	mov	r11, r31
     548:	f0 2d       	mov	r31, r0
			break;
     54a:	24 c0       	rjmp	.+72     	; 0x594 <read_ADS1115+0x194>
		case PGA4096:
			scale = SCA4096;
     54c:	0f 2e       	mov	r0, r31
     54e:	f4 e7       	ldi	r31, 0x74	; 116
     550:	8f 2e       	mov	r8, r31
     552:	f3 e1       	ldi	r31, 0x13	; 19
     554:	9f 2e       	mov	r9, r31
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	af 2e       	mov	r10, r31
     55a:	f9 e3       	ldi	r31, 0x39	; 57
     55c:	bf 2e       	mov	r11, r31
     55e:	f0 2d       	mov	r31, r0
			break;
     560:	19 c0       	rjmp	.+50     	; 0x594 <read_ADS1115+0x194>
		case PGA6144:
			scale = SCA6144;
     562:	0f 2e       	mov	r0, r31
     564:	fe e2       	ldi	r31, 0x2E	; 46
     566:	8f 2e       	mov	r8, r31
     568:	fd e9       	ldi	r31, 0x9D	; 157
     56a:	9f 2e       	mov	r9, r31
     56c:	f4 e4       	ldi	r31, 0x44	; 68
     56e:	af 2e       	mov	r10, r31
     570:	f9 e3       	ldi	r31, 0x39	; 57
     572:	bf 2e       	mov	r11, r31
     574:	f0 2d       	mov	r31, r0
			break;
     576:	0e c0       	rjmp	.+28     	; 0x594 <read_ADS1115+0x194>
		default:
			scale = 0.0;
     578:	81 2c       	mov	r8, r1
     57a:	91 2c       	mov	r9, r1
     57c:	54 01       	movw	r10, r8
			break;
     57e:	0a c0       	rjmp	.+20     	; 0x594 <read_ADS1115+0x194>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     580:	0f 2e       	mov	r0, r31
     582:	f1 e7       	ldi	r31, 0x71	; 113
     584:	8f 2e       	mov	r8, r31
     586:	f3 e1       	ldi	r31, 0x13	; 19
     588:	9f 2e       	mov	r9, r31
     58a:	f3 e8       	ldi	r31, 0x83	; 131
     58c:	af 2e       	mov	r10, r31
     58e:	f7 e3       	ldi	r31, 0x37	; 55
     590:	bf 2e       	mov	r11, r31
     592:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
     5ac:	f6 01       	movw	r30, r12
     5ae:	60 83       	st	Z, r22
     5b0:	71 83       	std	Z+1, r23	; 0x01
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     5b6:	10 2f       	mov	r17, r16

}
     5b8:	81 2f       	mov	r24, r17
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	9c 01       	movw	r18, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <get_cmdline+0x42>
     5de:	c6 e4       	ldi	r28, 0x46	; 70
     5e0:	de e2       	ldi	r29, 0x2E	; 46
     5e2:	e8 81       	ld	r30, Y
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e9 5b       	subi	r30, 0xB9	; 185
     5e8:	f2 4d       	sbci	r31, 0xD2	; 210
     5ea:	80 81       	ld	r24, Z
     5ec:	f9 01       	movw	r30, r18
     5ee:	e4 0f       	add	r30, r20
     5f0:	f1 1d       	adc	r31, r1
     5f2:	80 83       	st	Z, r24
     5f4:	a8 e4       	ldi	r26, 0x48	; 72
     5f6:	be e2       	ldi	r27, 0x2E	; 46
     5f8:	8c 91       	ld	r24, X
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	8c 93       	st	X, r24
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	6e ef       	ldi	r22, 0xFE	; 254
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
     60c:	88 83       	st	Y, r24
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <get_cmdline+0x4a>
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
     61a:	81 11       	cpse	r24, r1
     61c:	e0 cf       	rjmp	.-64     	; 0x5de <get_cmdline+0xa>
     61e:	f9 01       	movw	r30, r18
     620:	e4 0f       	add	r30, r20
     622:	f1 1d       	adc	r31, r1
     624:	10 82       	st	Z, r1
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     62c:	9f e9       	ldi	r25, 0x9F	; 159
     62e:	98 0f       	add	r25, r24
     630:	9a 31       	cpi	r25, 0x1A	; 26
     632:	28 f0       	brcs	.+10     	; 0x63e <isaletter+0x12>
     634:	81 54       	subi	r24, 0x41	; 65
     636:	8a 31       	cpi	r24, 0x1A	; 26
     638:	20 f4       	brcc	.+8      	; 0x642 <isaletter+0x16>
		return(ERROR);
     63a:	83 e6       	ldi	r24, 0x63	; 99
     63c:	08 95       	ret
     63e:	83 e6       	ldi	r24, 0x63	; 99
     640:	08 95       	ret
	}
	return(NOERROR);
     642:	80 e0       	ldi	r24, 0x00	; 0

}
     644:	08 95       	ret

00000646 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     652:	e6 2e       	mov	r14, r22
     654:	f1 2c       	mov	r15, r1
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	8e 9d       	mul	r24, r14
     65a:	f0 01       	movw	r30, r0
     65c:	8f 9d       	mul	r24, r15
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	e1 5f       	subi	r30, 0xF1	; 241
     664:	f7 4d       	sbci	r31, 0xD7	; 215
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     66a:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     66c:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     66e:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x34>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x32>
     676:	75 c0       	rjmp	.+234    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	e1 5f       	subi	r30, 0xF1	; 241
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     69c:	11 23       	and	r17, r17
     69e:	09 f4       	brne	.+2      	; 0x6a2 <parse_cmd+0x5c>
     6a0:	60 c0       	rjmp	.+192    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6a4:	18 81       	ld	r17, Y
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     6ac:	88 23       	and	r24, r24
     6ae:	b1 f3       	breq	.-20     	; 0x69c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	84 e3       	ldi	r24, 0x34	; 52
     6b4:	8e 9d       	mul	r24, r14
     6b6:	f0 01       	movw	r30, r0
     6b8:	8f 9d       	mul	r24, r15
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	e1 5f       	subi	r30, 0xF1	; 241
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	2a c0       	rjmp	.+84     	; 0x71c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e1 5f       	subi	r30, 0xF1	; 241
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	12 82       	std	Z+2, r1	; 0x02
			return;
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     6e6:	9b 33       	cpi	r25, 0x3B	; 59
     6e8:	61 f4       	brne	.+24     	; 0x702 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6ea:	94 e3       	ldi	r25, 0x34	; 52
     6ec:	9e 9d       	mul	r25, r14
     6ee:	f0 01       	movw	r30, r0
     6f0:	9f 9d       	mul	r25, r15
     6f2:	f0 0d       	add	r31, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	e1 5f       	subi	r30, 0xF1	; 241
     6f8:	f7 4d       	sbci	r31, 0xD7	; 215
     6fa:	e8 0f       	add	r30, r24
     6fc:	f1 1d       	adc	r31, r1
     6fe:	12 82       	std	Z+2, r1	; 0x02
			break;
     700:	0f c0       	rjmp	.+30     	; 0x720 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	24 e3       	ldi	r18, 0x34	; 52
     706:	2e 9d       	mul	r18, r14
     708:	f0 01       	movw	r30, r0
     70a:	2f 9d       	mul	r18, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	e1 5f       	subi	r30, 0xF1	; 241
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	89 32       	cpi	r24, 0x29	; 41
     71e:	a0 f2       	brcs	.-88     	; 0x6c8 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     720:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	1c c0       	rjmp	.+56     	; 0x75e <parse_cmd+0x118>
		if (*ptr == '\0') {
     726:	98 81       	ld	r25, Y
     728:	91 11       	cpse	r25, r1
     72a:	0c c0       	rjmp	.+24     	; 0x744 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     72c:	94 e3       	ldi	r25, 0x34	; 52
     72e:	9e 9d       	mul	r25, r14
     730:	f0 01       	movw	r30, r0
     732:	9f 9d       	mul	r25, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e1 5f       	subi	r30, 0xF1	; 241
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     742:	0f c0       	rjmp	.+30     	; 0x762 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	24 e3       	ldi	r18, 0x34	; 52
     748:	2e 9d       	mul	r18, r14
     74a:	f0 01       	movw	r30, r0
     74c:	2f 9d       	mul	r18, r15
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	e1 5f       	subi	r30, 0xF1	; 241
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	e8 0f       	add	r30, r24
     758:	f1 1d       	adc	r31, r1
     75a:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f3       	brcs	.-60     	; 0x726 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	08 95       	ret

0000076e <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	c5 50       	subi	r28, 0x05	; 5
     77c:	d1 40       	sbci	r29, 0x01	; 1
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     782:	27 e0       	ldi	r18, 0x07	; 7
     784:	e0 e7       	ldi	r30, 0x70	; 112
     786:	f7 ea       	ldi	r31, 0xA7	; 167
     788:	de 01       	movw	r26, r28
     78a:	a1 50       	subi	r26, 0x01	; 1
     78c:	bf 4f       	sbci	r27, 0xFF	; 255
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	2a 95       	dec	r18
     794:	e1 f7       	brne	.-8      	; 0x78e <printLine+0x20>

	if (firstpass) {
     796:	20 91 17 2a 	lds	r18, 0x2A17	; 0x802a17 <firstpass>
     79a:	21 11       	cpse	r18, r1
     79c:	2a c0       	rjmp	.+84     	; 0x7f2 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     79e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     7a2:	22 ff       	sbrs	r18, 2
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <printLine+0x3e>
     7a6:	22 e0       	ldi	r18, 0x02	; 2
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <printLine+0x42>
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	3f 93       	push	r19
     7b6:	2f 93       	push	r18
     7b8:	ce 01       	movw	r24, r28
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
	checksum_NMEA(strbuf);
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7d6:	f8 01       	movw	r30, r16
     7d8:	01 90       	ld	r0, Z+
     7da:	00 20       	and	r0, r0
     7dc:	e9 f7       	brne	.-6      	; 0x7d8 <printLine+0x6a>
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	af 01       	movw	r20, r30
     7e2:	40 1b       	sub	r20, r16
     7e4:	51 0b       	sbc	r21, r17
     7e6:	b8 01       	movw	r22, r16
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <send_USART>
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	de bf       	out	0x3e, r29	; 62

}
     7f2:	cb 5f       	subi	r28, 0xFB	; 251
     7f4:	de 4f       	sbci	r29, 0xFE	; 254
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	cc 51       	subi	r28, 0x1C	; 28
     81a:	d1 40       	sbci	r29, 0x01	; 1
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	de bf       	out	0x3e, r29	; 62
     820:	d8 2e       	mov	r13, r24
     822:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	e7 e7       	ldi	r30, 0x77	; 119
     828:	f7 ea       	ldi	r31, 0xA7	; 167
     82a:	9e 01       	movw	r18, r28
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	79 01       	movw	r14, r18
     832:	d9 01       	movw	r26, r18
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	8a 95       	dec	r24
     83a:	e1 f7       	brne	.-8      	; 0x834 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     83c:	8e 01       	movw	r16, r28
     83e:	05 5f       	subi	r16, 0xF5	; 245
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	c8 01       	movw	r24, r16
     844:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	1f 93       	push	r17
     84e:	0f 93       	push	r16
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	0c 5e       	subi	r16, 0xEC	; 236
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
	printLine(strbuf);
     860:	c8 01       	movw	r24, r16
     862:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

}
     866:	cd bf       	out	0x3d, r28	; 61
     868:	de bf       	out	0x3e, r29	; 62
     86a:	c4 5e       	subi	r28, 0xE4	; 228
     86c:	de 4f       	sbci	r29, 0xFE	; 254
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	de bf       	out	0x3e, r29	; 62
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	08 95       	ret

00000884 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <send_EXprompt+0x6>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     88e:	81 e2       	ldi	r24, 0x21	; 33
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	be 01       	movw	r22, r28
     89a:	6f 5f       	subi	r22, 0xFF	; 255
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <send_USART>

}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     8ae:	cf 93       	push	r28

	if (!rebootackd) {
     8b0:	c0 91 0e 28 	lds	r28, 0x280E	; 0x80280e <rebootackd>
     8b4:	c1 11       	cpse	r28, r1
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <rebootACKd+0x4c>
     8b8:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     8ba:	80 81       	ld	r24, Z
     8bc:	81 32       	cpi	r24, 0x21	; 33
     8be:	91 f4       	brne	.+36     	; 0x8e4 <rebootACKd+0x36>
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	91 11       	cpse	r25, r1
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8d6:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <rebootackd>
			return(YES);
     8e0:	c1 e0       	ldi	r28, 0x01	; 1
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     8e4:	81 32       	cpi	r24, 0x21	; 33
     8e6:	31 f4       	brne	.+12     	; 0x8f4 <rebootACKd+0x46>
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	88 23       	and	r24, r24
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <rebootACKd+0x46>
			reboot();
     8ee:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <reboot>
			return(NO);
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     8f4:	0e 94 42 04 	call	0x884	; 0x884 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <rebootACKd+0x4e>
		}
	}

	return(YES);
     8fa:	c1 e0       	ldi	r28, 0x01	; 1

}
     8fc:	8c 2f       	mov	r24, r28
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <send_GTprompt+0x6>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     90c:	8e e3       	ldi	r24, 0x3E	; 62
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	be 01       	movw	r22, r28
     918:	6f 5f       	subi	r22, 0xFF	; 255
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <send_USART>

}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	d1 09       	sbc	r29, r1
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	0e 94 57 04 	call	0x8ae	; 0x8ae <rebootACKd>
     94c:	88 23       	and	r24, r24
     94e:	09 f4       	brne	.+2      	; 0x952 <commands+0x26>
     950:	78 c0       	rjmp	.+240    	; 0xa42 <commands+0x116>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	88 23       	and	r24, r24
     956:	11 f0       	breq	.+4      	; 0x95c <commands+0x30>
     958:	81 32       	cpi	r24, 0x21	; 33
     95a:	29 f4       	brne	.+10     	; 0x966 <commands+0x3a>
		firstpass = NO;
     95c:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <firstpass>
		send_GTprompt();
     960:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
		return;
     964:	6e c0       	rjmp	.+220    	; 0xa42 <commands+0x116>
	}

	echo_cmd(cmdline);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 02 04 	call	0x804	; 0x804 <echo_cmd>
	parse_cmd(cmdline, cstack);
     96e:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	0e 94 23 03 	call	0x646	; 0x646 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     97a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     97e:	24 e3       	ldi	r18, 0x34	; 52
     980:	82 9f       	mul	r24, r18
     982:	f0 01       	movw	r30, r0
     984:	11 24       	eor	r1, r1
     986:	e1 5f       	subi	r30, 0xF1	; 241
     988:	f7 4d       	sbci	r31, 0xD7	; 215
     98a:	e0 81       	ld	r30, Z
     98c:	4e 2f       	mov	r20, r30
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	fa 01       	movw	r30, r20
     992:	e9 54       	subi	r30, 0x49	; 73
     994:	f1 09       	sbc	r31, r1
     996:	ec 32       	cpi	r30, 0x2C	; 44
     998:	f1 05       	cpc	r31, r1
     99a:	08 f0       	brcs	.+2      	; 0x99e <commands+0x72>
     99c:	40 c0       	rjmp	.+128    	; 0xa1e <commands+0xf2>
     99e:	e0 5b       	subi	r30, 0xB0	; 176
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     9a6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <close_PNEU>
			break;
     9aa:	3f c0       	rjmp	.+126    	; 0xa2a <commands+0xfe>

		case 'o':				// open
			open_PNEU(cstack);
     9ac:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <open_PNEU>
			break;
     9b0:	3c c0       	rjmp	.+120    	; 0xa2a <commands+0xfe>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     9b2:	0e 94 4e 23 	call	0x469c	; 0x469c <move_MOTOR_CMD>
			break;
     9b6:	39 c0       	rjmp	.+114    	; 0xa2a <commands+0xfe>

		case 'r':				// report
			report(cstack);
     9b8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <report>
			break;
     9bc:	36 c0       	rjmp	.+108    	; 0xa2a <commands+0xfe>

		case 's':				// set
			set(cstack);
     9be:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <set>
			break;
     9c2:	33 c0       	rjmp	.+102    	; 0xa2a <commands+0xfe>

		case 't':
			testroutine();
     9c4:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <testroutine>
			break;
     9c8:	30 c0       	rjmp	.+96     	; 0xa2a <commands+0xfe>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9ca:	0e 94 bb 22 	call	0x4576	; 0x4576 <init_MOTORS>
			break;
     9ce:	2d c0       	rjmp	.+90     	; 0xa2a <commands+0xfe>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9d0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <motorsMoving>
     9d4:	88 23       	and	r24, r24
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <commands+0xba>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     9d8:	61 e8       	ldi	r22, 0x81	; 129
     9da:	77 ea       	ldi	r23, 0xA7	; 167
     9dc:	86 e3       	ldi	r24, 0x36	; 54
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				break;
     9e4:	22 c0       	rjmp	.+68     	; 0xa2a <commands+0xfe>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     9e6:	0e 94 12 20 	call	0x4024	; 0x4024 <put_FRAM_ENCODERS>
     9ea:	83 36       	cpi	r24, 0x63	; 99
     9ec:	31 f4       	brne	.+12     	; 0x9fa <commands+0xce>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     9ee:	66 ea       	ldi	r22, 0xA6	; 166
     9f0:	77 ea       	ldi	r23, 0xA7	; 167
     9f2:	83 e9       	ldi	r24, 0x93	; 147
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				}
				timerSAVEENCODER = 0;
     9fa:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     9fe:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a02:	8a e6       	ldi	r24, 0x6A	; 106
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	20 40       	sbci	r18, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <commands+0xdc>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <commands+0xe6>
				_delay_ms(100);
				reboot();			// in wdt.c
     a12:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <reboot>
				return;
     a16:	15 c0       	rjmp	.+42     	; 0xa42 <commands+0x116>
			}

		case 'Z':				// Write zero to encoder
			zero_MOTOR_CMD(cstack);
     a18:	0e 94 cd 24 	call	0x499a	; 0x499a <zero_MOTOR_CMD>
			break;
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <commands+0xfe>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     a1e:	68 ec       	ldi	r22, 0xC8	; 200
     a20:	77 ea       	ldi	r23, 0xA7	; 167
     a22:	89 ec       	ldi	r24, 0xC9	; 201
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a2a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	6a e0       	ldi	r22, 0x0A	; 10
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
     a3a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a3e:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>

}
     a42:	c1 50       	subi	r28, 0x01	; 1
     a44:	df 4f       	sbci	r29, 0xFF	; 255
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	c0 5f       	subi	r28, 0xF0	; 240
     a5e:	d1 09       	sbc	r29, r1
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a66:	88 e1       	ldi	r24, 0x18	; 24
     a68:	e6 ed       	ldi	r30, 0xD6	; 214
     a6a:	f7 ea       	ldi	r31, 0xA7	; 167
     a6c:	de 01       	movw	r26, r28
     a6e:	a5 5a       	subi	r26, 0xA5	; 165
     a70:	bf 4f       	sbci	r27, 0xFF	; 255
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	8a 95       	dec	r24
     a78:	e1 f7       	brne	.-8      	; 0xa72 <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     a7a:	89 e1       	ldi	r24, 0x19	; 25
     a7c:	ee ee       	ldi	r30, 0xEE	; 238
     a7e:	f7 ea       	ldi	r31, 0xA7	; 167
     a80:	de 01       	movw	r26, r28
     a82:	ad 58       	subi	r26, 0x8D	; 141
     a84:	bf 4f       	sbci	r27, 0xFF	; 255
     a86:	01 90       	ld	r0, Z+
     a88:	0d 92       	st	X+, r0
     a8a:	8a 95       	dec	r24
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     a8e:	87 e1       	ldi	r24, 0x17	; 23
     a90:	e7 e0       	ldi	r30, 0x07	; 7
     a92:	f8 ea       	ldi	r31, 0xA8	; 168
     a94:	de 01       	movw	r26, r28
     a96:	a4 57       	subi	r26, 0x74	; 116
     a98:	bf 4f       	sbci	r27, 0xFF	; 255
     a9a:	01 90       	ld	r0, Z+
     a9c:	0d 92       	st	X+, r0
     a9e:	8a 95       	dec	r24
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     aa2:	88 e1       	ldi	r24, 0x18	; 24
     aa4:	ee e1       	ldi	r30, 0x1E	; 30
     aa6:	f8 ea       	ldi	r31, 0xA8	; 168
     aa8:	de 01       	movw	r26, r28
     aaa:	ad 55       	subi	r26, 0x5D	; 93
     aac:	bf 4f       	sbci	r27, 0xFF	; 255
     aae:	01 90       	ld	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	8a 95       	dec	r24
     ab4:	e1 f7       	brne	.-8      	; 0xaae <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     ab6:	8b e1       	ldi	r24, 0x1B	; 27
     ab8:	e6 e3       	ldi	r30, 0x36	; 54
     aba:	f8 ea       	ldi	r31, 0xA8	; 168
     abc:	de 01       	movw	r26, r28
     abe:	a5 54       	subi	r26, 0x45	; 69
     ac0:	bf 4f       	sbci	r27, 0xFF	; 255
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	8a 95       	dec	r24
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     aca:	8b e1       	ldi	r24, 0x1B	; 27
     acc:	e1 e5       	ldi	r30, 0x51	; 81
     ace:	f8 ea       	ldi	r31, 0xA8	; 168
     ad0:	de 01       	movw	r26, r28
     ad2:	aa 52       	subi	r26, 0x2A	; 42
     ad4:	bf 4f       	sbci	r27, 0xFF	; 255
     ad6:	01 90       	ld	r0, Z+
     ad8:	0d 92       	st	X+, r0
     ada:	8a 95       	dec	r24
     adc:	e1 f7       	brne	.-8      	; 0xad6 <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <check_isotime+0xae>
		sbuf[i] = isotime[i];
     ae2:	82 2f       	mov	r24, r18
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	f8 01       	movw	r30, r16
     ae8:	e8 0f       	add	r30, r24
     aea:	f9 1f       	adc	r31, r25
     aec:	30 81       	ld	r19, Z
     aee:	e1 e0       	ldi	r30, 0x01	; 1
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ec 0f       	add	r30, r28
     af4:	fd 1f       	adc	r31, r29
     af6:	e8 0f       	add	r30, r24
     af8:	f9 1f       	adc	r31, r25
     afa:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     afc:	2f 5f       	subi	r18, 0xFF	; 255
     afe:	24 30       	cpi	r18, 0x04	; 4
     b00:	80 f3       	brcs	.-32     	; 0xae2 <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     b02:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((year < 2021) || year > 2030) {
     b0c:	85 5e       	subi	r24, 0xE5	; 229
     b0e:	97 40       	sbci	r25, 0x07	; 7
     b10:	0a 97       	sbiw	r24, 0x0a	; 10
     b12:	40 f1       	brcs	.+80     	; 0xb64 <check_isotime+0x114>
		sprintf(strbuf, msg0);
     b14:	ce 01       	movw	r24, r28
     b16:	85 5a       	subi	r24, 0xA5	; 165
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	8e 01       	movw	r16, r28
     b20:	05 5f       	subi	r16, 0xF5	; 245
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
     b24:	1f 93       	push	r17
     b26:	0f 93       	push	r16
     b28:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     b2c:	b8 01       	movw	r22, r16
     b2e:	8b e5       	ldi	r24, 0x5B	; 91
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	83 e6       	ldi	r24, 0x63	; 99
     b40:	fd c0       	rjmp	.+506    	; 0xd3c <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	35 97       	sbiw	r30, 0x05	; 5
     b4a:	d8 01       	movw	r26, r16
     b4c:	a2 0f       	add	r26, r18
     b4e:	b3 1f       	adc	r27, r19
     b50:	9c 91       	ld	r25, X
     b52:	21 e0       	ldi	r18, 0x01	; 1
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	2c 0f       	add	r18, r28
     b58:	3d 1f       	adc	r19, r29
     b5a:	e2 0f       	add	r30, r18
     b5c:	f3 1f       	adc	r31, r19
     b5e:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <check_isotime+0x116>
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	87 30       	cpi	r24, 0x07	; 7
     b68:	60 f3       	brcs	.-40     	; 0xb42 <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b6a:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((month < 1) || (month > 12)) {
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	0c 97       	sbiw	r24, 0x0c	; 12
     b78:	40 f1       	brcs	.+80     	; 0xbca <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     b7a:	ce 01       	movw	r24, r28
     b7c:	8d 58       	subi	r24, 0x8D	; 141
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	8e 01       	movw	r16, r28
     b86:	05 5f       	subi	r16, 0xF5	; 245
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	1f 93       	push	r17
     b8c:	0f 93       	push	r16
     b8e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     b92:	b8 01       	movw	r22, r16
     b94:	8b e5       	ldi	r24, 0x5B	; 91
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	83 e6       	ldi	r24, 0x63	; 99
     ba6:	ca c0       	rjmp	.+404    	; 0xd3c <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	f9 01       	movw	r30, r18
     bae:	38 97       	sbiw	r30, 0x08	; 8
     bb0:	d8 01       	movw	r26, r16
     bb2:	a2 0f       	add	r26, r18
     bb4:	b3 1f       	adc	r27, r19
     bb6:	9c 91       	ld	r25, X
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	2c 0f       	add	r18, r28
     bbe:	3d 1f       	adc	r19, r29
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <check_isotime+0x17c>
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	8a 30       	cpi	r24, 0x0A	; 10
     bce:	60 f3       	brcs	.-40     	; 0xba8 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     bd0:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((day < 1) || (day > 31)) {
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	4f 97       	sbiw	r24, 0x1f	; 31
     bde:	40 f1       	brcs	.+80     	; 0xc30 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     be0:	ce 01       	movw	r24, r28
     be2:	84 57       	subi	r24, 0x74	; 116
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	8e 01       	movw	r16, r28
     bec:	05 5f       	subi	r16, 0xF5	; 245
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	1f 93       	push	r17
     bf2:	0f 93       	push	r16
     bf4:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     bf8:	b8 01       	movw	r22, r16
     bfa:	8b e5       	ldi	r24, 0x5B	; 91
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	83 e6       	ldi	r24, 0x63	; 99
     c0c:	97 c0       	rjmp	.+302    	; 0xd3c <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	3b 97       	sbiw	r30, 0x0b	; 11
     c16:	d8 01       	movw	r26, r16
     c18:	a2 0f       	add	r26, r18
     c1a:	b3 1f       	adc	r27, r19
     c1c:	9c 91       	ld	r25, X
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	2c 0f       	add	r18, r28
     c24:	3d 1f       	adc	r19, r29
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <check_isotime+0x1e2>
     c30:	8b e0       	ldi	r24, 0x0B	; 11
     c32:	8d 30       	cpi	r24, 0x0D	; 13
     c34:	60 f3       	brcs	.-40     	; 0xc0e <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     c36:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((hours < 0) || (hours > 23)) {
     c40:	48 97       	sbiw	r24, 0x18	; 24
     c42:	40 f1       	brcs	.+80     	; 0xc94 <check_isotime+0x244>
		sprintf(strbuf, msg3);
     c44:	ce 01       	movw	r24, r28
     c46:	8d 55       	subi	r24, 0x5D	; 93
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	8e 01       	movw	r16, r28
     c50:	05 5f       	subi	r16, 0xF5	; 245
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	1f 93       	push	r17
     c56:	0f 93       	push	r16
     c58:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     c5c:	b8 01       	movw	r22, r16
     c5e:	8b e5       	ldi	r24, 0x5B	; 91
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	83 e6       	ldi	r24, 0x63	; 99
     c70:	65 c0       	rjmp	.+202    	; 0xd3c <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	3e 97       	sbiw	r30, 0x0e	; 14
     c7a:	d8 01       	movw	r26, r16
     c7c:	a2 0f       	add	r26, r18
     c7e:	b3 1f       	adc	r27, r19
     c80:	9c 91       	ld	r25, X
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	2c 0f       	add	r18, r28
     c88:	3d 1f       	adc	r19, r29
     c8a:	e2 0f       	add	r30, r18
     c8c:	f3 1f       	adc	r31, r19
     c8e:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <check_isotime+0x246>
     c94:	8e e0       	ldi	r24, 0x0E	; 14
     c96:	80 31       	cpi	r24, 0x10	; 16
     c98:	60 f3       	brcs	.-40     	; 0xc72 <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     c9a:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     ca4:	cc 97       	sbiw	r24, 0x3c	; 60
     ca6:	40 f1       	brcs	.+80     	; 0xcf8 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     ca8:	ce 01       	movw	r24, r28
     caa:	85 54       	subi	r24, 0x45	; 69
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	8e 01       	movw	r16, r28
     cb4:	05 5f       	subi	r16, 0xF5	; 245
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	1f 93       	push	r17
     cba:	0f 93       	push	r16
     cbc:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     cc0:	b8 01       	movw	r22, r16
     cc2:	8b e5       	ldi	r24, 0x5B	; 91
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	83 e6       	ldi	r24, 0x63	; 99
     cd4:	33 c0       	rjmp	.+102    	; 0xd3c <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	f9 01       	movw	r30, r18
     cdc:	71 97       	sbiw	r30, 0x11	; 17
     cde:	d8 01       	movw	r26, r16
     ce0:	a2 0f       	add	r26, r18
     ce2:	b3 1f       	adc	r27, r19
     ce4:	9c 91       	ld	r25, X
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	2c 0f       	add	r18, r28
     cec:	3d 1f       	adc	r19, r29
     cee:	e2 0f       	add	r30, r18
     cf0:	f3 1f       	adc	r31, r19
     cf2:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <check_isotime+0x2aa>
     cf8:	81 e1       	ldi	r24, 0x11	; 17
     cfa:	83 31       	cpi	r24, 0x13	; 19
     cfc:	60 f3       	brcs	.-40     	; 0xcd6 <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     cfe:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	0e 94 51 31 	call	0x62a2	; 0x62a2 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     d08:	cc 97       	sbiw	r24, 0x3c	; 60
     d0a:	b8 f0       	brcs	.+46     	; 0xd3a <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     d0c:	ce 01       	movw	r24, r28
     d0e:	8a 52       	subi	r24, 0x2A	; 42
     d10:	9f 4f       	sbci	r25, 0xFF	; 255
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	8e 01       	movw	r16, r28
     d18:	05 5f       	subi	r16, 0xF5	; 245
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	1f 93       	push	r17
     d1e:	0f 93       	push	r16
     d20:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_ISO, strbuf);
     d24:	b8 01       	movw	r22, r16
     d26:	8b e5       	ldi	r24, 0x5B	; 91
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	83 e6       	ldi	r24, 0x63	; 99
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <check_isotime+0x2ec>
	}
	return(NOERROR);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
}
     d3c:	c0 51       	subi	r28, 0x10	; 16
     d3e:	df 4f       	sbci	r29, 0xFF	; 255
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	08 95       	ret

00000d4e <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	a0 97       	sbiw	r28, 0x20	; 32
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	ec e6       	ldi	r30, 0x6C	; 108
     d64:	f8 ea       	ldi	r31, 0xA8	; 168
     d66:	9e 01       	movw	r18, r28
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	d9 01       	movw	r26, r18
     d6e:	01 90       	ld	r0, Z+
     d70:	0d 92       	st	X+, r0
     d72:	4a 95       	dec	r20
     d74:	e1 f7       	brne	.-8      	; 0xd6e <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     d76:	fb 01       	movw	r30, r22
     d78:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     d7a:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     d7c:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     d7e:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     d80:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     d82:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     d84:	1f 92       	push	r1
     d86:	bf 93       	push	r27
     d88:	1f 92       	push	r1
     d8a:	af 93       	push	r26
     d8c:	1f 92       	push	r1
     d8e:	1f 93       	push	r17
     d90:	1f 92       	push	r1
     d92:	0f 93       	push	r16
     d94:	1f 92       	push	r1
     d96:	5f 93       	push	r21
     d98:	1f 92       	push	r1
     d9a:	4f 93       	push	r20
     d9c:	3f 93       	push	r19
     d9e:	2f 93       	push	r18
     da0:	9f 93       	push	r25
     da2:	8f 93       	push	r24
     da4:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>

}
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	a0 96       	adiw	r28, 0x20	; 32
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     dbc:	dc 01       	movw	r26, r24
     dbe:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     dc0:	81 89       	ldd	r24, Z+17	; 0x11
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	c0 97       	sbiw	r24, 0x30	; 48
     dc6:	82 95       	swap	r24
     dc8:	92 95       	swap	r25
     dca:	90 7f       	andi	r25, 0xF0	; 240
     dcc:	98 27       	eor	r25, r24
     dce:	80 7f       	andi	r24, 0xF0	; 240
     dd0:	98 27       	eor	r25, r24
     dd2:	92 89       	ldd	r25, Z+18	; 0x12
     dd4:	90 53       	subi	r25, 0x30	; 48
     dd6:	89 2b       	or	r24, r25
     dd8:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     dda:	86 85       	ldd	r24, Z+14	; 0x0e
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	c0 97       	sbiw	r24, 0x30	; 48
     de0:	82 95       	swap	r24
     de2:	92 95       	swap	r25
     de4:	90 7f       	andi	r25, 0xF0	; 240
     de6:	98 27       	eor	r25, r24
     de8:	80 7f       	andi	r24, 0xF0	; 240
     dea:	98 27       	eor	r25, r24
     dec:	97 85       	ldd	r25, Z+15	; 0x0f
     dee:	90 53       	subi	r25, 0x30	; 48
     df0:	89 2b       	or	r24, r25
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	8c 93       	st	X, r24
     df6:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     df8:	83 85       	ldd	r24, Z+11	; 0x0b
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	c0 97       	sbiw	r24, 0x30	; 48
     dfe:	82 95       	swap	r24
     e00:	92 95       	swap	r25
     e02:	90 7f       	andi	r25, 0xF0	; 240
     e04:	98 27       	eor	r25, r24
     e06:	80 7f       	andi	r24, 0xF0	; 240
     e08:	98 27       	eor	r25, r24
     e0a:	94 85       	ldd	r25, Z+12	; 0x0c
     e0c:	90 53       	subi	r25, 0x30	; 48
     e0e:	89 2b       	or	r24, r25
     e10:	12 96       	adiw	r26, 0x02	; 2
     e12:	8c 93       	st	X, r24
     e14:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	13 96       	adiw	r26, 0x03	; 3
     e1a:	8c 93       	st	X, r24
     e1c:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     e1e:	80 85       	ldd	r24, Z+8	; 0x08
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	c0 97       	sbiw	r24, 0x30	; 48
     e24:	82 95       	swap	r24
     e26:	92 95       	swap	r25
     e28:	90 7f       	andi	r25, 0xF0	; 240
     e2a:	98 27       	eor	r25, r24
     e2c:	80 7f       	andi	r24, 0xF0	; 240
     e2e:	98 27       	eor	r25, r24
     e30:	91 85       	ldd	r25, Z+9	; 0x09
     e32:	90 53       	subi	r25, 0x30	; 48
     e34:	89 2b       	or	r24, r25
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	8c 93       	st	X, r24
     e3a:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     e3c:	25 81       	ldd	r18, Z+5	; 0x05
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	20 53       	subi	r18, 0x30	; 48
     e42:	31 09       	sbc	r19, r1
     e44:	22 95       	swap	r18
     e46:	32 95       	swap	r19
     e48:	30 7f       	andi	r19, 0xF0	; 240
     e4a:	32 27       	eor	r19, r18
     e4c:	20 7f       	andi	r18, 0xF0	; 240
     e4e:	32 27       	eor	r19, r18
     e50:	86 81       	ldd	r24, Z+6	; 0x06
     e52:	80 53       	subi	r24, 0x30	; 48
     e54:	28 2b       	or	r18, r24
     e56:	15 96       	adiw	r26, 0x05	; 5
     e58:	2c 93       	st	X, r18
     e5a:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     e5c:	22 81       	ldd	r18, Z+2	; 0x02
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	20 53       	subi	r18, 0x30	; 48
     e62:	31 09       	sbc	r19, r1
     e64:	22 95       	swap	r18
     e66:	32 95       	swap	r19
     e68:	30 7f       	andi	r19, 0xF0	; 240
     e6a:	32 27       	eor	r19, r18
     e6c:	20 7f       	andi	r18, 0xF0	; 240
     e6e:	32 27       	eor	r19, r18
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	80 53       	subi	r24, 0x30	; 48
     e74:	28 2b       	or	r18, r24
     e76:	16 96       	adiw	r26, 0x06	; 6
     e78:	2c 93       	st	X, r18
     e7a:	08 95       	ret

00000e7c <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
     e8e:	c8 2f       	mov	r28, r24
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	19 f4       	brne	.+6      	; 0xe9a <read_DS3231+0x1e>
		stop_TWI();
     e94:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     e98:	26 c0       	rjmp	.+76     	; 0xee6 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     ea0:	c8 2f       	mov	r28, r24
     ea2:	83 36       	cpi	r24, 0x63	; 99
     ea4:	19 f4       	brne	.+6      	; 0xeac <read_DS3231+0x30>
		stop_TWI();
     ea6:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     eaa:	1d c0       	rjmp	.+58     	; 0xee6 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	88 e6       	ldi	r24, 0x68	; 104
     eb0:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
     eb4:	c8 2f       	mov	r28, r24
     eb6:	83 36       	cpi	r24, 0x63	; 99
     eb8:	61 f4       	brne	.+24     	; 0xed2 <read_DS3231+0x56>
		stop_TWI();
     eba:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     ec0:	87 01       	movw	r16, r14
     ec2:	0c 0f       	add	r16, r28
     ec4:	11 1d       	adc	r17, r1
     ec6:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <read_TWI>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     ece:	cf 5f       	subi	r28, 0xFF	; 255
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <read_DS3231+0x58>
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	c6 30       	cpi	r28, 0x06	; 6
     ed6:	a0 f3       	brcs	.-24     	; 0xec0 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     ed8:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
     edc:	f7 01       	movw	r30, r14
     ede:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ee0:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	return(NOERROR);
     ee4:	c0 e0       	ldi	r28, 0x00	; 0

}
     ee6:	8c 2f       	mov	r24, r28
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	27 97       	sbiw	r28, 0x07	; 7
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	88 e6       	ldi	r24, 0x68	; 104
     f12:	0e 94 3e 07 	call	0xe7c	; 0xe7c <read_DS3231>
     f16:	18 2f       	mov	r17, r24
     f18:	83 36       	cpi	r24, 0x63	; 99
     f1a:	79 f4       	brne	.+30     	; 0xf3a <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     f1c:	6c e8       	ldi	r22, 0x8C	; 140
     f1e:	78 ea       	ldi	r23, 0xA8	; 168
     f20:	85 e6       	ldi	r24, 0x65	; 101
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		strcpy(isotime, "DateTime?");
     f28:	8a e0       	ldi	r24, 0x0A	; 10
     f2a:	ec e9       	ldi	r30, 0x9C	; 156
     f2c:	f8 ea       	ldi	r31, 0xA8	; 168
     f2e:	d7 01       	movw	r26, r14
     f30:	01 90       	ld	r0, Z+
     f32:	0d 92       	st	X+, r0
     f34:	8a 95       	dec	r24
     f36:	e1 f7       	brne	.-8      	; 0xf30 <get_time+0x3c>
		return(ERROR);
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	c7 01       	movw	r24, r14
     f42:	0e 94 a7 06 	call	0xd4e	; 0xd4e <convert_ds2iso>
	return(NOERROR);
     f46:	10 e0       	ldi	r17, 0x00	; 0

}
     f48:	81 2f       	mov	r24, r17
     f4a:	27 96       	adiw	r28, 0x07	; 7
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
     f70:	c8 2f       	mov	r28, r24
     f72:	83 36       	cpi	r24, 0x63	; 99
     f74:	19 f4       	brne	.+6      	; 0xf7c <write_DS3231+0x20>
		stop_TWI();
     f76:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     f7a:	20 c0       	rjmp	.+64     	; 0xfbc <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     f82:	c8 2f       	mov	r28, r24
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	a1 f4       	brne	.+40     	; 0xfb0 <write_DS3231+0x54>
		stop_TWI();
     f88:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f8e:	78 01       	movw	r14, r16
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	e8 1a       	sub	r14, r24
     f94:	f8 0a       	sbc	r15, r24
     f96:	f8 01       	movw	r30, r16
     f98:	80 81       	ld	r24, Z
     f9a:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
     f9e:	c8 2f       	mov	r28, r24
     fa0:	83 36       	cpi	r24, 0x63	; 99
     fa2:	19 f4       	brne	.+6      	; 0xfaa <write_DS3231+0x4e>
			stop_TWI();
     fa4:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
			return(ERROR);
     fa8:	09 c0       	rjmp	.+18     	; 0xfbc <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     faa:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fac:	87 01       	movw	r16, r14
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <write_DS3231+0x56>
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fb2:	d7 30       	cpi	r29, 0x07	; 7
     fb4:	60 f3       	brcs	.-40     	; 0xf8e <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     fb6:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	return(NOERROR);
     fba:	c0 e0       	ldi	r28, 0x00	; 0

}
     fbc:	8c 2f       	mov	r24, r28
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	08 95       	ret

00000fcc <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	27 97       	sbiw	r28, 0x07	; 7
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     fe2:	0e 94 28 05 	call	0xa50	; 0xa50 <check_isotime>
     fe6:	18 2f       	mov	r17, r24
     fe8:	83 36       	cpi	r24, 0x63	; 99
     fea:	39 f4       	brne	.+14     	; 0xffa <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     fec:	66 ea       	ldi	r22, 0xA6	; 166
     fee:	78 ea       	ldi	r23, 0xA8	; 168
     ff0:	8b e5       	ldi	r24, 0x5B	; 91
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     ffa:	b7 01       	movw	r22, r14
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 de 06 	call	0xdbc	; 0xdbc <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	88 e6       	ldi	r24, 0x68	; 104
    100c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <write_DS3231>
    1010:	18 2f       	mov	r17, r24
    1012:	83 36       	cpi	r24, 0x63	; 99
    1014:	39 f4       	brne	.+14     	; 0x1024 <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
    1016:	64 ec       	ldi	r22, 0xC4	; 196
    1018:	78 ea       	ldi	r23, 0xA8	; 168
    101a:	86 e6       	ldi	r24, 0x66	; 102
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <put_time+0x5a>
	}
	return(NOERROR);
    1024:	10 e0       	ldi	r17, 0x00	; 0

}
    1026:	81 2f       	mov	r24, r17
    1028:	27 96       	adiw	r28, 0x07	; 7
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	08 95       	ret

0000103a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
    103a:	45 e1       	ldi	r20, 0x15	; 21
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	6b e0       	ldi	r22, 0x0B	; 11
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	0e 94 6f 33 	call	0x66de	; 0x66de <eeprom_read_block>
    1046:	08 95       	ret

00001048 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
    1048:	4b e0       	ldi	r20, 0x0B	; 11
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	0e 94 6f 33 	call	0x66de	; 0x66de <eeprom_read_block>
    1054:	08 95       	ret

00001056 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	65 97       	sbiw	r28, 0x15	; 21
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    106c:	45 e1       	ldi	r20, 0x15	; 21
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	6b e0       	ldi	r22, 0x0B	; 11
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	0e 94 73 33 	call	0x66e6	; 0x66e6 <eeprom_update_block>

}
    107c:	65 96       	adiw	r28, 0x15	; 21
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <update_VERSION>:

void update_VERSION(void)
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2b 97       	sbiw	r28, 0x0b	; 11
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    1096:	8b e0       	ldi	r24, 0x0B	; 11
    1098:	e1 ee       	ldi	r30, 0xE1	; 225
    109a:	f8 ea       	ldi	r31, 0xA8	; 168
    109c:	de 01       	movw	r26, r28
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	8a 95       	dec	r24
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    10a8:	4b e0       	ldi	r20, 0x0B	; 11
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	0e 94 73 33 	call	0x66e6	; 0x66e6 <eeprom_update_block>

}
    10b8:	2b 96       	adiw	r28, 0x0b	; 11
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    10c4:	0e 94 2b 08 	call	0x1056	; 0x1056 <update_BOOTTIME>
	update_VERSION();
    10c8:	0e 94 44 08 	call	0x1088	; 0x1088 <update_VERSION>
    10cc:	08 95       	ret

000010ce <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	c8 50       	subi	r28, 0x08	; 8
    10dc:	d1 40       	sbci	r29, 0x01	; 1
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    10e2:	2a e0       	ldi	r18, 0x0A	; 10
    10e4:	ec ee       	ldi	r30, 0xEC	; 236
    10e6:	f8 ea       	ldi	r31, 0xA8	; 168
    10e8:	de 01       	movw	r26, r28
    10ea:	a1 50       	subi	r26, 0x01	; 1
    10ec:	bf 4f       	sbci	r27, 0xFF	; 255
    10ee:	01 90       	ld	r0, Z+
    10f0:	0d 92       	st	X+, r0
    10f2:	2a 95       	dec	r18
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <printError+0x20>

	if (!squelchErrors) {
    10f6:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <squelchErrors>
    10fa:	21 11       	cpse	r18, r1
    10fc:	15 c0       	rjmp	.+42     	; 0x1128 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    10fe:	7f 93       	push	r23
    1100:	6f 93       	push	r22
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	ce 01       	movw	r24, r28
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	8e 01       	movw	r16, r28
    1112:	0f 5f       	subi	r16, 0xFF	; 255
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	1f 93       	push	r17
    1118:	0f 93       	push	r16
    111a:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printLine(strbuf);
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	de bf       	out	0x3e, r29	; 62
	}

}
    1128:	c8 5f       	subi	r28, 0xF8	; 248
    112a:	de 4f       	sbci	r29, 0xFE	; 254
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	d8 2f       	mov	r29, r24
    114c:	d6 2e       	mov	r13, r22
    114e:	07 2f       	mov	r16, r23
    1150:	7a 01       	movw	r14, r20
    1152:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    115a:	c8 2f       	mov	r28, r24
    115c:	83 36       	cpi	r24, 0x63	; 99
    115e:	19 f4       	brne	.+6      	; 0x1166 <read_FRAM+0x2c>
		stop_TWI();
    1160:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    1164:	2e c0       	rjmp	.+92     	; 0x11c2 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    1166:	80 2f       	mov	r24, r16
    1168:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    116c:	c8 2f       	mov	r28, r24
    116e:	83 36       	cpi	r24, 0x63	; 99
    1170:	41 f1       	breq	.+80     	; 0x11c2 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    1172:	8d 2d       	mov	r24, r13
    1174:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    1178:	c8 2f       	mov	r28, r24
    117a:	83 36       	cpi	r24, 0x63	; 99
    117c:	11 f1       	breq	.+68     	; 0x11c2 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	8d 2f       	mov	r24, r29
    1182:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1186:	c8 2f       	mov	r28, r24
    1188:	83 36       	cpi	r24, 0x63	; 99
    118a:	d9 f0       	breq	.+54     	; 0x11c2 <read_FRAM+0x88>
    118c:	c0 e0       	ldi	r28, 0x00	; 0
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    1190:	67 01       	movw	r12, r14
    1192:	cc 0e       	add	r12, r28
    1194:	d1 1c       	adc	r13, r1
    1196:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <read_TWI>
    119a:	f6 01       	movw	r30, r12
    119c:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    119e:	cf 5f       	subi	r28, 0xFF	; 255
    11a0:	2c 2f       	mov	r18, r28
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 2f       	mov	r24, r17
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	28 17       	cp	r18, r24
    11ac:	39 07       	cpc	r19, r25
    11ae:	84 f3       	brlt	.-32     	; 0x1190 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    11b0:	ec 01       	movw	r28, r24
    11b2:	ce 0d       	add	r28, r14
    11b4:	df 1d       	adc	r29, r15
    11b6:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
    11ba:	88 83       	st	Y, r24

	stop_TWI();
    11bc:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	return(NOERROR);
    11c0:	c0 e0       	ldi	r28, 0x00	; 0

}
    11c2:	8c 2f       	mov	r24, r28
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	08 95       	ret

000011d6 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	2a 97       	sbiw	r28, 0x0a	; 10
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    11ec:	8a e0       	ldi	r24, 0x0A	; 10
    11ee:	e6 ef       	ldi	r30, 0xF6	; 246
    11f0:	f8 ea       	ldi	r31, 0xA8	; 168
    11f2:	de 01       	movw	r26, r28
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	8a 95       	dec	r24
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    11fe:	24 e1       	ldi	r18, 0x14	; 20
    1200:	a7 01       	movw	r20, r14
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e5       	ldi	r24, 0x50	; 80
    1208:	0e 94 9d 08 	call	0x113a	; 0x113a <read_FRAM>
    120c:	18 2f       	mov	r17, r24
    120e:	83 36       	cpi	r24, 0x63	; 99
    1210:	39 f4       	brne	.+14     	; 0x1220 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    1212:	be 01       	movw	r22, r28
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	c7 01       	movw	r24, r14
    121a:	0e 94 84 32 	call	0x6508	; 0x6508 <strcpy>
		return(ERROR);
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <get_SETTIME+0x4c>
	}
	return(NOERROR);
    1220:	10 e0       	ldi	r17, 0x00	; 0
}
    1222:	81 2f       	mov	r24, r17
    1224:	2a 96       	adiw	r28, 0x0a	; 10
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	f6 2e       	mov	r15, r22
    1244:	17 2f       	mov	r17, r23
    1246:	ea 01       	movw	r28, r20
    1248:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1250:	83 36       	cpi	r24, 0x63	; 99
    1252:	e1 f0       	breq	.+56     	; 0x128c <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    1254:	81 2f       	mov	r24, r17
    1256:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    125a:	83 36       	cpi	r24, 0x63	; 99
    125c:	b9 f0       	breq	.+46     	; 0x128c <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    125e:	8f 2d       	mov	r24, r15
    1260:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    1264:	83 36       	cpi	r24, 0x63	; 99
    1266:	91 f0       	breq	.+36     	; 0x128c <write_FRAM+0x56>
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    126c:	7e 01       	movw	r14, r28
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	e8 1a       	sub	r14, r24
    1272:	f8 0a       	sbc	r15, r24
    1274:	88 81       	ld	r24, Y
    1276:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    127a:	83 36       	cpi	r24, 0x63	; 99
    127c:	39 f0       	breq	.+14     	; 0x128c <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    127e:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1280:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    1282:	10 17       	cp	r17, r16
    1284:	98 f3       	brcs	.-26     	; 0x126c <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    1286:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	return(NOERROR);
    128a:	80 e0       	ldi	r24, 0x00	; 0

}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	08 95       	ret

0000129a <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <get_humidity+0x1a>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <get_humidity+0x1c>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	59 f0       	breq	.+22     	; 0x12d4 <get_humidity+0x3a>
    12be:	18 f0       	brcs	.+6      	; 0x12c6 <get_humidity+0x2c>
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <get_humidity+0x48>
    12c4:	15 c0       	rjmp	.+42     	; 0x12f0 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    12cc:	6b 01       	movw	r12, r22
    12ce:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    12d0:	40 e4       	ldi	r20, 0x40	; 64
			break;
    12d2:	17 c0       	rjmp	.+46     	; 0x1302 <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    12da:	6b 01       	movw	r12, r22
    12dc:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    12de:	40 e5       	ldi	r20, 0x50	; 80
			break;
    12e0:	10 c0       	rjmp	.+32     	; 0x1302 <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    12ec:	40 e6       	ldi	r20, 0x60	; 96
			break;
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    12f0:	0f 2e       	mov	r0, r31
    12f2:	c1 2c       	mov	r12, r1
    12f4:	d1 2c       	mov	r13, r1
    12f6:	f0 ea       	ldi	r31, 0xA0	; 160
    12f8:	ef 2e       	mov	r14, r31
    12fa:	f1 e4       	ldi	r31, 0x41	; 65
    12fc:	ff 2e       	mov	r15, r31
    12fe:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    1300:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    1302:	8e 01       	movw	r16, r28
    1304:	0f 5f       	subi	r16, 0xFF	; 255
    1306:	1f 4f       	sbci	r17, 0xFF	; 255
    1308:	20 e8       	ldi	r18, 0x80	; 128
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	88 e4       	ldi	r24, 0x48	; 72
    130e:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    1312:	83 36       	cpi	r24, 0x63	; 99
    1314:	89 f1       	breq	.+98     	; 0x1378 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 ea       	ldi	r20, 0xA0	; 160
    131c:	50 e4       	ldi	r21, 0x40	; 64
    131e:	69 81       	ldd	r22, Y+1	; 0x01
    1320:	7a 81       	ldd	r23, Y+2	; 0x02
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    132a:	2a e0       	ldi	r18, 0x0A	; 10
    132c:	37 ed       	ldi	r19, 0xD7	; 215
    132e:	43 e2       	ldi	r20, 0x23	; 35
    1330:	5e e3       	ldi	r21, 0x3E	; 62
    1332:	0e 94 12 2b 	call	0x5624	; 0x5624 <__subsf3>
    1336:	2f e5       	ldi	r18, 0x5F	; 95
    1338:	39 e2       	ldi	r19, 0x29	; 41
    133a:	4b ec       	ldi	r20, 0xCB	; 203
    133c:	5b e3       	ldi	r21, 0x3B	; 59
    133e:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    1342:	4b 01       	movw	r8, r22
    1344:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    1346:	29 ec       	ldi	r18, 0xC9	; 201
    1348:	3e e8       	ldi	r19, 0x8E	; 142
    134a:	4d e0       	ldi	r20, 0x0D	; 13
    134c:	5b e3       	ldi	r21, 0x3B	; 59
    134e:	c7 01       	movw	r24, r14
    1350:	b6 01       	movw	r22, r12
    1352:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	62 e2       	ldi	r22, 0x22	; 34
    135c:	7d ef       	ldi	r23, 0xFD	; 253
    135e:	86 e8       	ldi	r24, 0x86	; 134
    1360:	9f e3       	ldi	r25, 0x3F	; 63
    1362:	0e 94 12 2b 	call	0x5624	; 0x5624 <__subsf3>
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	c5 01       	movw	r24, r10
    136c:	b4 01       	movw	r22, r8
    136e:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    1372:	6b 01       	movw	r12, r22
    1374:	7c 01       	movw	r14, r24
    1376:	09 c0       	rjmp	.+18     	; 0x138a <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1378:	0f 2e       	mov	r0, r31
    137a:	c1 2c       	mov	r12, r1
    137c:	f0 e8       	ldi	r31, 0x80	; 128
    137e:	df 2e       	mov	r13, r31
    1380:	f6 e2       	ldi	r31, 0x26	; 38
    1382:	ef 2e       	mov	r14, r31
    1384:	f4 ec       	ldi	r31, 0xC4	; 196
    1386:	ff 2e       	mov	r15, r31
    1388:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <__cmpsf2>
    1398:	88 23       	and	r24, r24
    139a:	4c f4       	brge	.+18     	; 0x13ae <get_humidity+0x114>
		humidity = BADFLOAT;
    139c:	0f 2e       	mov	r0, r31
    139e:	c1 2c       	mov	r12, r1
    13a0:	f0 e8       	ldi	r31, 0x80	; 128
    13a2:	df 2e       	mov	r13, r31
    13a4:	f6 e2       	ldi	r31, 0x26	; 38
    13a6:	ef 2e       	mov	r14, r31
    13a8:	f4 ec       	ldi	r31, 0xC4	; 196
    13aa:	ff 2e       	mov	r15, r31
    13ac:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	24 96       	adiw	r28, 0x04	; 4
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	9f 90       	pop	r9
    13ce:	8f 90       	pop	r8
    13d0:	08 95       	ret

000013d2 <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	2b 97       	sbiw	r28, 0x0b	; 11
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    13e0:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <rebootackd>
	timerOLED = 0;					// See oled.h
    13e4:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    13e8:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    13ec:	80 ee       	ldi	r24, 0xE0	; 224
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    13f4:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    13f8:	0e 94 b1 10 	call	0x2162	; 0x2162 <init_PORTS>
	init_TWI();
    13fc:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <init_TWI>
	init_PNEU();
    1400:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    140c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <init_MMA8451>
	init_OLED();	// Needs TWI
    1410:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    1414:	0e 94 62 08 	call	0x10c4	; 0x10c4 <init_EEPROM>
	init_USART();
    1418:	0e 94 a1 28 	call	0x5142	; 0x5142 <init_USART>
//	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
	sei();
    141c:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    141e:	0e 94 bb 22 	call	0x4576	; 0x4576 <init_MOTORS>
	get_VERSION(versionstr);
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 24 08 	call	0x1048	; 0x1048 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	79 ea       	ldi	r23, 0xA9	; 169
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1436:	42 e0       	ldi	r20, 0x02	; 2
    1438:	be 01       	movw	r22, r28
    143a:	6f 5f       	subi	r22, 0xFF	; 255
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>

}
    1444:	2b 96       	adiw	r28, 0x0b	; 11
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <read_ionpump+0x12>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <read_ionpump+0x14>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	21 f0       	breq	.+8      	; 0x1474 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	c1 f5       	brne	.+112    	; 0x14e0 <read_ionpump+0x90>
		pins = AIN23;
    1470:	40 e3       	ldi	r20, 0x30	; 48
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1474:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1476:	8e 01       	movw	r16, r28
    1478:	0f 5f       	subi	r16, 0xFF	; 255
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	20 e8       	ldi	r18, 0x80	; 128
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	89 e4       	ldi	r24, 0x49	; 73
    1482:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    1486:	83 36       	cpi	r24, 0x63	; 99
    1488:	81 f1       	breq	.+96     	; 0x14ea <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    148a:	c9 80       	ldd	r12, Y+1	; 0x01
    148c:	da 80       	ldd	r13, Y+2	; 0x02
    148e:	eb 80       	ldd	r14, Y+3	; 0x03
    1490:	fc 80       	ldd	r15, Y+4	; 0x04
    1492:	2d ec       	ldi	r18, 0xCD	; 205
    1494:	3c ec       	ldi	r19, 0xCC	; 204
    1496:	4c ec       	ldi	r20, 0xCC	; 204
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	c7 01       	movw	r24, r14
    149c:	b6 01       	movw	r22, r12
    149e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <__cmpsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	3c f1       	brlt	.+78     	; 0x14f4 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e4       	ldi	r21, 0x40	; 64
    14ae:	c7 01       	movw	r24, r14
    14b0:	b6 01       	movw	r22, r12
    14b2:	0e 94 a8 2c 	call	0x5950	; 0x5950 <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	14 f1       	brlt	.+68     	; 0x14fe <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    14ba:	29 e7       	ldi	r18, 0x79	; 121
    14bc:	39 ee       	ldi	r19, 0xE9	; 233
    14be:	42 e0       	ldi	r20, 0x02	; 2
    14c0:	50 e4       	ldi	r21, 0x40	; 64
    14c2:	c7 01       	movw	r24, r14
    14c4:	b6 01       	movw	r22, r12
    14c6:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    14ca:	2e e6       	ldi	r18, 0x6E	; 110
    14cc:	33 ea       	ldi	r19, 0xA3	; 163
    14ce:	4b ed       	ldi	r20, 0xDB	; 219
    14d0:	50 e4       	ldi	r21, 0x40	; 64
    14d2:	0e 94 12 2b 	call	0x5624	; 0x5624 <__subsf3>
	return(vacuum);
    14d6:	56 2f       	mov	r21, r22
    14d8:	47 2f       	mov	r20, r23
    14da:	38 2f       	mov	r19, r24
    14dc:	29 2f       	mov	r18, r25
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	36 e2       	ldi	r19, 0x26	; 38
    14e6:	24 ec       	ldi	r18, 0xC4	; 196
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	36 e2       	ldi	r19, 0x26	; 38
    14f0:	24 ec       	ldi	r18, 0xC4	; 196
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	36 e2       	ldi	r19, 0x26	; 38
    14fa:	24 ec       	ldi	r18, 0xC4	; 196
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	36 e2       	ldi	r19, 0x26	; 38
    1504:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1506:	65 2f       	mov	r22, r21
    1508:	74 2f       	mov	r23, r20
    150a:	83 2f       	mov	r24, r19
    150c:	92 2f       	mov	r25, r18
    150e:	24 96       	adiw	r28, 0x04	; 4
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	08 95       	ret

00001526 <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <firstpass>
	squelchErrors = YES;
    152c:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
	initialize();
    1530:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <initialize>
	squelchErrors = NO;
    1534:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1538:	80 91 4a 2e 	lds	r24, 0x2E4A	; 0x802e4a <recv0_buf+0x103>
    153c:	88 23       	and	r24, r24
    153e:	21 f0       	breq	.+8      	; 0x1548 <main+0x22>
			recv0_buf.done = NO;
    1540:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
			commands();
    1544:	0e 94 96 04 	call	0x92c	; 0x92c <commands>
		}
if (testTicks > 2000) {
    1548:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    154c:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    1550:	81 3d       	cpi	r24, 0xD1	; 209
    1552:	97 40       	sbci	r25, 0x07	; 7
    1554:	38 f0       	brcs	.+14     	; 0x1564 <main+0x3e>
	testTicks = 0;
    1556:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <testTicks>
    155a:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <testTicks+0x1>
	PORTB.OUTTGL = PIN5_bm;
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1564:	20 91 18 2a 	lds	r18, 0x2A18	; 0x802a18 <timerOLED>
    1568:	30 91 19 2a 	lds	r19, 0x2A19	; 0x802a19 <timerOLED+0x1>
    156c:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    1570:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    1574:	82 17       	cp	r24, r18
    1576:	93 07       	cpc	r25, r19
    1578:	78 f4       	brcc	.+30     	; 0x1598 <main+0x72>
			squelchErrors = YES;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			clear_OLED(0);
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 55 0e 	call	0x1caa	; 0x1caa <clear_OLED>
			clear_OLED(1);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 55 0e 	call	0x1caa	; 0x1caa <clear_OLED>
			timerOLED = 0;
    158c:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1590:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
			squelchErrors = NO;
    1594:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    1598:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    159c:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <timeoutSAVEENCODER>
    15a0:	89 17       	cp	r24, r25
    15a2:	50 f6       	brcc	.-108    	; 0x1538 <main+0x12>
    15a4:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <rebootackd>
    15a8:	88 23       	and	r24, r24
    15aa:	31 f2       	breq	.-116    	; 0x1538 <main+0x12>
			squelchErrors = YES;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    15b2:	0e 94 12 20 	call	0x4024	; 0x4024 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    15b6:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
			squelchErrors = NO;
    15ba:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
    15be:	bc cf       	rjmp	.-136    	; 0x1538 <main+0x12>

000015c0 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	c8 2f       	mov	r28, r24
    15c6:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    15ce:	83 36       	cpi	r24, 0x63	; 99
    15d0:	51 f4       	brne	.+20     	; 0x15e6 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    15d2:	61 e1       	ldi	r22, 0x11	; 17
    15d4:	79 ea       	ldi	r23, 0xA9	; 169
    15d6:	82 e9       	ldi	r24, 0x92	; 146
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		stop_TWI();
    15de:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(0xFF);
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	19 c0       	rjmp	.+50     	; 0x1618 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    15e6:	8d 2f       	mov	r24, r29
    15e8:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	8c 2f       	mov	r24, r28
    15f0:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    15f4:	83 36       	cpi	r24, 0x63	; 99
    15f6:	51 f4       	brne	.+20     	; 0x160c <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    15f8:	61 e1       	ldi	r22, 0x11	; 17
    15fa:	79 ea       	ldi	r23, 0xA9	; 169
    15fc:	82 e9       	ldi	r24, 0x92	; 146
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		stop_TWI();
    1604:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(0xFF);
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    160c:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
    1610:	c8 2f       	mov	r28, r24
	stop_TWI();
    1612:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
	return(value);
    1616:	8c 2f       	mov	r24, r28

}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	d6 2f       	mov	r29, r22
    1626:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    162e:	c8 2f       	mov	r28, r24
    1630:	83 36       	cpi	r24, 0x63	; 99
    1632:	49 f4       	brne	.+18     	; 0x1646 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1634:	65 e2       	ldi	r22, 0x25	; 37
    1636:	79 ea       	ldi	r23, 0xA9	; 169
    1638:	82 e9       	ldi	r24, 0x92	; 146
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		stop_TWI();
    1640:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    1644:	15 c0       	rjmp	.+42     	; 0x1670 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1646:	8d 2f       	mov	r24, r29
    1648:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    164c:	88 23       	and	r24, r24
    164e:	21 f0       	breq	.+8      	; 0x1658 <write_MCP23008+0x3a>
		stop_TWI();
    1650:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    1654:	c3 e6       	ldi	r28, 0x63	; 99
    1656:	0c c0       	rjmp	.+24     	; 0x1670 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1658:	81 2f       	mov	r24, r17
    165a:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    165e:	88 23       	and	r24, r24
    1660:	21 f0       	breq	.+8      	; 0x166a <write_MCP23008+0x4c>
		stop_TWI();
    1662:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    1666:	c3 e6       	ldi	r28, 0x63	; 99
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <write_MCP23008+0x52>
	}
	stop_TWI();
    166a:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
	return(NOERROR);
    166e:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1670:	8c 2f       	mov	r24, r28
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	08 95       	ret

0000167a <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    167a:	8f 92       	push	r8
    167c:	9f 92       	push	r9
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	88 e1       	ldi	r24, 0x18	; 24
    1692:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1696:	83 36       	cpi	r24, 0x63	; 99
    1698:	51 f4       	brne	.+20     	; 0x16ae <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e8       	ldi	r21, 0x80	; 128
    169e:	66 e2       	ldi	r22, 0x26	; 38
    16a0:	74 ec       	ldi	r23, 0xC4	; 196
    16a2:	f8 01       	movw	r30, r16
    16a4:	40 83       	st	Z, r20
    16a6:	51 83       	std	Z+1, r21	; 0x01
    16a8:	62 83       	std	Z+2, r22	; 0x02
    16aa:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    16ac:	43 c0       	rjmp	.+134    	; 0x1734 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    16ae:	85 e0       	ldi	r24, 0x05	; 5
    16b0:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	88 e1       	ldi	r24, 0x18	; 24
    16b8:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
	highbyte = read_TWI();
    16bc:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <read_TWI>
    16c0:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    16c2:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
    16c6:	d8 2f       	mov	r29, r24
	stop_TWI();
    16c8:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    16cc:	fc 2f       	mov	r31, r28
    16ce:	f0 71       	andi	r31, 0x10	; 16
    16d0:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    16d2:	6c 2f       	mov	r22, r28
    16d4:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__floatunsisf>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    16ec:	4b 01       	movw	r8, r22
    16ee:	5c 01       	movw	r10, r24
    16f0:	6d 2f       	mov	r22, r29
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__floatunsisf>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5d e3       	ldi	r21, 0x3D	; 61
    1704:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	c5 01       	movw	r24, r10
    170e:	b4 01       	movw	r22, r8
    1710:	0e 94 13 2b 	call	0x5626	; 0x5626 <__addsf3>
	if (sign) {
    1714:	ff 20       	and	r15, r15
    1716:	41 f0       	breq	.+16     	; 0x1728 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	93 e4       	ldi	r25, 0x43	; 67
    1724:	0e 94 12 2b 	call	0x5624	; 0x5624 <__subsf3>
	}
	*temperature = temp;
    1728:	f8 01       	movw	r30, r16
    172a:	60 83       	st	Z, r22
    172c:	71 83       	std	Z+1, r23	; 0x01
    172e:	82 83       	std	Z+2, r24	; 0x02
    1730:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1732:	80 e0       	ldi	r24, 0x00	; 0
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	08 95       	ret

00001748 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	f8 2e       	mov	r15, r24
    1756:	e6 2e       	mov	r14, r22
    1758:	ea 01       	movw	r28, r20
    175a:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1762:	18 2f       	mov	r17, r24
    1764:	83 36       	cpi	r24, 0x63	; 99
    1766:	19 f4       	brne	.+6      	; 0x176e <read_MMA8451+0x26>
		stop_TWI();
    1768:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    176c:	23 c0       	rjmp	.+70     	; 0x17b4 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    176e:	8e 2d       	mov	r24, r14
    1770:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    1774:	18 2f       	mov	r17, r24
    1776:	83 36       	cpi	r24, 0x63	; 99
    1778:	e9 f0       	breq	.+58     	; 0x17b4 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	8f 2d       	mov	r24, r15
    177e:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1782:	18 2f       	mov	r17, r24
    1784:	83 36       	cpi	r24, 0x63	; 99
    1786:	69 f4       	brne	.+26     	; 0x17a2 <read_MMA8451+0x5a>
		stop_TWI();
    1788:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(ERROR);
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    178e:	7e 01       	movw	r14, r28
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	e8 1a       	sub	r14, r24
    1794:	f8 0a       	sbc	r15, r24
    1796:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <read_TWI>
    179a:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    179c:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    179e:	e7 01       	movw	r28, r14
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <read_MMA8451+0x5c>
    17a2:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    17a4:	10 17       	cp	r17, r16
    17a6:	98 f3       	brcs	.-26     	; 0x178e <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    17a8:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <readlast_TWI>
    17ac:	88 83       	st	Y, r24
	stop_TWI();
    17ae:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
	return(NOERROR);
    17b2:	10 e0       	ldi	r17, 0x00	; 0

}
    17b4:	81 2f       	mov	r24, r17
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	08 95       	ret

000017c4 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	26 97       	sbiw	r28, 0x06	; 6
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	6c 01       	movw	r12, r24
    17e0:	7b 01       	movw	r14, r22
    17e2:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e8       	ldi	r25, 0x80	; 128
    17e8:	a6 e2       	ldi	r26, 0x26	; 38
    17ea:	b4 ec       	ldi	r27, 0xC4	; 196
    17ec:	fa 01       	movw	r30, r20
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
    17f6:	fb 01       	movw	r30, r22
    17f8:	80 83       	st	Z, r24
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	a2 83       	std	Z+2, r26	; 0x02
    17fe:	b3 83       	std	Z+3, r27	; 0x03
    1800:	f6 01       	movw	r30, r12
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    180a:	26 e0       	ldi	r18, 0x06	; 6
    180c:	ae 01       	movw	r20, r28
    180e:	4f 5f       	subi	r20, 0xFF	; 255
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	8d e1       	ldi	r24, 0x1D	; 29
    1816:	0e 94 a4 0b 	call	0x1748	; 0x1748 <read_MMA8451>
    181a:	83 36       	cpi	r24, 0x63	; 99
    181c:	09 f4       	brne	.+2      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
    181e:	64 c0       	rjmp	.+200    	; 0x18e8 <__DATA_REGION_LENGTH__+0xe8>
		return(ERROR);
	}

	ix = datain[0];
    1820:	69 81       	ldd	r22, Y+1	; 0x01
    1822:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1824:	76 2f       	mov	r23, r22
    1826:	66 27       	eor	r22, r22
	ix |= datain[1];
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	68 2b       	or	r22, r24
	ix >>= 2;
    182c:	75 95       	asr	r23
    182e:	67 95       	ror	r22
    1830:	75 95       	asr	r23
    1832:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1834:	07 2e       	mov	r0, r23
    1836:	00 0c       	add	r0, r0
    1838:	88 0b       	sbc	r24, r24
    183a:	99 0b       	sbc	r25, r25
    183c:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	59 e3       	ldi	r21, 0x39	; 57
    1848:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    184c:	26 e6       	ldi	r18, 0x66	; 102
    184e:	36 e2       	ldi	r19, 0x26	; 38
    1850:	45 e7       	ldi	r20, 0x75	; 117
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    1858:	f6 01       	movw	r30, r12
    185a:	60 83       	st	Z, r22
    185c:	71 83       	std	Z+1, r23	; 0x01
    185e:	82 83       	std	Z+2, r24	; 0x02
    1860:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1862:	6b 81       	ldd	r22, Y+3	; 0x03
    1864:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    1866:	76 2f       	mov	r23, r22
    1868:	66 27       	eor	r22, r22
	iy |= datain[3];
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	68 2b       	or	r22, r24
	iy >>= 2;
    186e:	75 95       	asr	r23
    1870:	67 95       	ror	r22
    1872:	75 95       	asr	r23
    1874:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1876:	07 2e       	mov	r0, r23
    1878:	00 0c       	add	r0, r0
    187a:	88 0b       	sbc	r24, r24
    187c:	99 0b       	sbc	r25, r25
    187e:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	59 e3       	ldi	r21, 0x39	; 57
    188a:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    188e:	26 e6       	ldi	r18, 0x66	; 102
    1890:	36 e2       	ldi	r19, 0x26	; 38
    1892:	45 e7       	ldi	r20, 0x75	; 117
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    189a:	f7 01       	movw	r30, r14
    189c:	60 83       	st	Z, r22
    189e:	71 83       	std	Z+1, r23	; 0x01
    18a0:	82 83       	std	Z+2, r24	; 0x02
    18a2:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    18a4:	6d 81       	ldd	r22, Y+5	; 0x05
    18a6:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    18a8:	76 2f       	mov	r23, r22
    18aa:	66 27       	eor	r22, r22
	iz |= datain[5];
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	68 2b       	or	r22, r24
	iz >>= 2;
    18b0:	75 95       	asr	r23
    18b2:	67 95       	ror	r22
    18b4:	75 95       	asr	r23
    18b6:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    18b8:	07 2e       	mov	r0, r23
    18ba:	00 0c       	add	r0, r0
    18bc:	88 0b       	sbc	r24, r24
    18be:	99 0b       	sbc	r25, r25
    18c0:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	59 e3       	ldi	r21, 0x39	; 57
    18cc:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    18d0:	26 e6       	ldi	r18, 0x66	; 102
    18d2:	36 e2       	ldi	r19, 0x26	; 38
    18d4:	45 e7       	ldi	r20, 0x75	; 117
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    18dc:	f8 01       	movw	r30, r16
    18de:	60 83       	st	Z, r22
    18e0:	71 83       	std	Z+1, r23	; 0x01
    18e2:	82 83       	std	Z+2, r24	; 0x02
    18e4:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    18e6:	80 e0       	ldi	r24, 0x00	; 0

}
    18e8:	26 96       	adiw	r28, 0x06	; 6
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	d6 2f       	mov	r29, r22
    1908:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
    1910:	c8 2f       	mov	r28, r24
    1912:	88 23       	and	r24, r24
    1914:	21 f0       	breq	.+8      	; 0x191e <write_MMA8451+0x1e>
		stop_TWI();
    1916:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(retval);
    191a:	8c 2f       	mov	r24, r28
    191c:	17 c0       	rjmp	.+46     	; 0x194c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    191e:	8d 2f       	mov	r24, r29
    1920:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    1924:	c8 2f       	mov	r28, r24
    1926:	88 23       	and	r24, r24
    1928:	21 f0       	breq	.+8      	; 0x1932 <write_MMA8451+0x32>
		stop_TWI();
    192a:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(retval);
    192e:	8c 2f       	mov	r24, r28
    1930:	0d c0       	rjmp	.+26     	; 0x194c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1932:	81 2f       	mov	r24, r17
    1934:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
    1938:	c8 2f       	mov	r28, r24
    193a:	88 23       	and	r24, r24
    193c:	21 f0       	breq	.+8      	; 0x1946 <write_MMA8451+0x46>
		stop_TWI();
    193e:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
		return(retval);
    1942:	8c 2f       	mov	r24, r28
    1944:	03 c0       	rjmp	.+6      	; 0x194c <write_MMA8451+0x4c>
	}
	stop_TWI();
    1946:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>
	return(0);
    194a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	08 95       	ret

00001954 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	1f 92       	push	r1
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    195e:	40 e4       	ldi	r20, 0x40	; 64
    1960:	6b e2       	ldi	r22, 0x2B	; 43
    1962:	8d e1       	ldi	r24, 0x1D	; 29
    1964:	0e 94 80 0c 	call	0x1900	; 0x1900 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	ae 01       	movw	r20, r28
    196c:	4f 5f       	subi	r20, 0xFF	; 255
    196e:	5f 4f       	sbci	r21, 0xFF	; 255
    1970:	6b e2       	ldi	r22, 0x2B	; 43
    1972:	8d e1       	ldi	r24, 0x1D	; 29
    1974:	0e 94 a4 0b 	call	0x1748	; 0x1748 <read_MMA8451>
	while (retval & 0x40) {
    1978:	08 c0       	rjmp	.+16     	; 0x198a <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	ae 01       	movw	r20, r28
    197e:	4f 5f       	subi	r20, 0xFF	; 255
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	6b e2       	ldi	r22, 0x2B	; 43
    1984:	8d e1       	ldi	r24, 0x1D	; 29
    1986:	0e 94 a4 0b 	call	0x1748	; 0x1748 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	86 fd       	sbrc	r24, 6
    198e:	f5 cf       	rjmp	.-22     	; 0x197a <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1990:	40 ec       	ldi	r20, 0xC0	; 192
    1992:	6f e0       	ldi	r22, 0x0F	; 15
    1994:	8d e1       	ldi	r24, 0x1D	; 29
    1996:	0e 94 80 0c 	call	0x1900	; 0x1900 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    199a:	42 e0       	ldi	r20, 0x02	; 2
    199c:	6b e2       	ldi	r22, 0x2B	; 43
    199e:	8d e1       	ldi	r24, 0x1D	; 29
    19a0:	0e 94 80 0c 	call	0x1900	; 0x1900 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    19a4:	4d e3       	ldi	r20, 0x3D	; 61
    19a6:	6a e2       	ldi	r22, 0x2A	; 42
    19a8:	8d e1       	ldi	r24, 0x1D	; 29
    19aa:	0e 94 80 0c 	call	0x1900	; 0x1900 <write_MMA8451>

	return(retval);

}
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	0f 90       	pop	r0
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	2e 97       	sbiw	r28, 0x0e	; 14
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	ea e3       	ldi	r30, 0x3A	; 58
    19d4:	f9 ea       	ldi	r31, 0xA9	; 169
    19d6:	de 01       	movw	r26, r28
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	8a 95       	dec	r24
    19e0:	e1 f7       	brne	.-8      	; 0x19da <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    19e2:	f8 01       	movw	r30, r16
    19e4:	01 90       	ld	r0, Z+
    19e6:	00 20       	and	r0, r0
    19e8:	e9 f7       	brne	.-6      	; 0x19e4 <checksum_NMEA+0x2c>
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	3e 2f       	mov	r19, r30
    19ee:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    19f0:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    19f6:	f8 01       	movw	r30, r16
    19f8:	e8 0f       	add	r30, r24
    19fa:	f1 1d       	adc	r31, r1
    19fc:	20 81       	ld	r18, Z
    19fe:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	83 17       	cp	r24, r19
    1a04:	c0 f3       	brcs	.-16     	; 0x19f6 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1a06:	1f 92       	push	r1
    1a08:	9f 93       	push	r25
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	9f 93       	push	r25
    1a10:	8f 93       	push	r24
    1a12:	7e 01       	movw	r14, r28
    1a14:	89 e0       	ldi	r24, 0x09	; 9
    1a16:	e8 0e       	add	r14, r24
    1a18:	f1 1c       	adc	r15, r1
    1a1a:	ff 92       	push	r15
    1a1c:	ef 92       	push	r14
    1a1e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
	strcat(str, chksum);
    1a22:	b7 01       	movw	r22, r14
    1a24:	c8 01       	movw	r24, r16
    1a26:	0e 94 79 32 	call	0x64f2	; 0x64f2 <strcat>

}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	2e 96       	adiw	r28, 0x0e	; 14
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	08 95       	ret

00001a4a <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1a4a:	e0 e6       	ldi	r30, 0x60	; 96
    1a4c:	f4 e0       	ldi	r31, 0x04	; 4
    1a4e:	80 e4       	ldi	r24, 0x40	; 64
    1a50:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1a52:	81 83       	std	Z+1, r24	; 0x01
    1a54:	a1 e4       	ldi	r26, 0x41	; 65
    1a56:	b3 e0       	ldi	r27, 0x03	; 3
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <reset_OLED+0xe>
    1a5c:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1a5e:	85 83       	std	Z+5, r24	; 0x05
    1a60:	08 95       	ret

00001a62 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	d6 2f       	mov	r29, r22
    1a68:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	0e 94 12 28 	call	0x5024	; 0x5024 <start_TWI>
	write_TWI(type);
    1a70:	8d 2f       	mov	r24, r29
    1a72:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
	write_TWI(byteToSend);
    1a76:	8c 2f       	mov	r24, r28
    1a78:	0e 94 60 28 	call	0x50c0	; 0x50c0 <write_TWI>
	stop_TWI();
    1a7c:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <stop_TWI>

}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1a86:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1a88:	88 23       	and	r24, r24
    1a8a:	29 f0       	breq	.+10     	; 0x1a96 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <init_OLEDDISPLAY+0xc>
    1a90:	9e c0       	rjmp	.+316    	; 0x1bce <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1a92:	cd e3       	ldi	r28, 0x3D	; 61
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1a96:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1a98:	4a e2       	ldi	r20, 0x2A	; 42
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	8c 2f       	mov	r24, r28
    1a9e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1aa2:	41 e7       	ldi	r20, 0x71	; 113
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	8c 2f       	mov	r24, r28
    1aa8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1aac:	4c e5       	ldi	r20, 0x5C	; 92
    1aae:	60 e4       	ldi	r22, 0x40	; 64
    1ab0:	8c 2f       	mov	r24, r28
    1ab2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1ab6:	48 e2       	ldi	r20, 0x28	; 40
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	8c 2f       	mov	r24, r28
    1abc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1ac0:	48 e0       	ldi	r20, 0x08	; 8
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	8c 2f       	mov	r24, r28
    1ac6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1aca:	4a e2       	ldi	r20, 0x2A	; 42
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	8c 2f       	mov	r24, r28
    1ad0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ad4:	49 e7       	ldi	r20, 0x79	; 121
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	8c 2f       	mov	r24, r28
    1ada:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1ade:	45 ed       	ldi	r20, 0xD5	; 213
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	8c 2f       	mov	r24, r28
    1ae4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1ae8:	40 e7       	ldi	r20, 0x70	; 112
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	8c 2f       	mov	r24, r28
    1aee:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1af2:	48 e7       	ldi	r20, 0x78	; 120
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	8c 2f       	mov	r24, r28
    1af8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1afc:	48 e0       	ldi	r20, 0x08	; 8
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	8c 2f       	mov	r24, r28
    1b02:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1b06:	46 e0       	ldi	r20, 0x06	; 6
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	8c 2f       	mov	r24, r28
    1b0c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1b10:	42 e7       	ldi	r20, 0x72	; 114
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	8c 2f       	mov	r24, r28
    1b16:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	60 e4       	ldi	r22, 0x40	; 64
    1b1e:	8c 2f       	mov	r24, r28
    1b20:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b24:	4a e2       	ldi	r20, 0x2A	; 42
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	8c 2f       	mov	r24, r28
    1b2a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1b2e:	49 e7       	ldi	r20, 0x79	; 121
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	8c 2f       	mov	r24, r28
    1b34:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1b38:	4a ed       	ldi	r20, 0xDA	; 218
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	8c 2f       	mov	r24, r28
    1b3e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	8c 2f       	mov	r24, r28
    1b48:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1b4c:	4c ed       	ldi	r20, 0xDC	; 220
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	8c 2f       	mov	r24, r28
    1b52:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	8c 2f       	mov	r24, r28
    1b5c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1b60:	41 e8       	ldi	r20, 0x81	; 129
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	8c 2f       	mov	r24, r28
    1b66:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	8c 2f       	mov	r24, r28
    1b70:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1b74:	49 ed       	ldi	r20, 0xD9	; 217
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	8c 2f       	mov	r24, r28
    1b7a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1b7e:	41 ef       	ldi	r20, 0xF1	; 241
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	8c 2f       	mov	r24, r28
    1b84:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1b88:	4b ed       	ldi	r20, 0xDB	; 219
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	8c 2f       	mov	r24, r28
    1b8e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1b92:	40 e4       	ldi	r20, 0x40	; 64
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	8c 2f       	mov	r24, r28
    1b98:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b9c:	48 e7       	ldi	r20, 0x78	; 120
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	8c 2f       	mov	r24, r28
    1ba2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1ba6:	48 e2       	ldi	r20, 0x28	; 40
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	8c 2f       	mov	r24, r28
    1bac:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	8c 2f       	mov	r24, r28
    1bb6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	8c 2f       	mov	r24, r28
    1bc0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1bc4:	4c e0       	ldi	r20, 0x0C	; 12
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	8c 2f       	mov	r24, r28
    1bca:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>

}
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1bd2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <reset_OLED>
	init_OLEDDISPLAY(0);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <init_OLEDDISPLAY>
    1be2:	2a e6       	ldi	r18, 0x6A	; 106
    1be4:	84 e0       	ldi	r24, 0x04	; 4
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	80 40       	sbci	r24, 0x00	; 0
    1bec:	90 40       	sbci	r25, 0x00	; 0
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <init_OLED+0x16>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <init_OLED+0x20>
    1bf2:	08 95       	ret

00001bf4 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	e2 97       	sbiw	r28, 0x32	; 50
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1c0c:	91 e1       	ldi	r25, 0x11	; 17
    1c0e:	e2 e4       	ldi	r30, 0x42	; 66
    1c10:	f9 ea       	ldi	r31, 0xA9	; 169
    1c12:	de 01       	movw	r26, r28
    1c14:	92 96       	adiw	r26, 0x22	; 34
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	9a 95       	dec	r25
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1c1e:	81 11       	cpse	r24, r1
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1c22:	0c e3       	ldi	r16, 0x3C	; 60
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1c26:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	0e 94 84 32 	call	0x6508	; 0x6508 <strcpy>
	if (strlen(strbuf) > 16) {
    1c32:	f7 01       	movw	r30, r14
    1c34:	01 90       	ld	r0, Z+
    1c36:	00 20       	and	r0, r0
    1c38:	e9 f7       	brne	.-6      	; 0x1c34 <writestr_OLED+0x40>
    1c3a:	31 97       	sbiw	r30, 0x01	; 1
    1c3c:	ee 19       	sub	r30, r14
    1c3e:	ff 09       	sbc	r31, r15
    1c40:	71 97       	sbiw	r30, 0x11	; 17
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1c44:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1c46:	be 01       	movw	r22, r28
    1c48:	6e 5d       	subi	r22, 0xDE	; 222
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	0e 94 79 32 	call	0x64f2	; 0x64f2 <strcat>

	if (lineno == 1) {
    1c54:	11 30       	cpi	r17, 0x01	; 1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	80 2f       	mov	r24, r16
    1c5e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	12 c0       	rjmp	.+36     	; 0x1c8a <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1c66:	40 ec       	ldi	r20, 0xC0	; 192
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	80 2f       	mov	r24, r16
    1c6c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>
    1c70:	f8 cf       	rjmp	.-16     	; 0x1c62 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1c72:	e1 e0       	ldi	r30, 0x01	; 1
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	ec 0f       	add	r30, r28
    1c78:	fd 1f       	adc	r31, r29
    1c7a:	e1 0f       	add	r30, r17
    1c7c:	f1 1d       	adc	r31, r1
    1c7e:	40 81       	ld	r20, Z
    1c80:	60 e4       	ldi	r22, 0x40	; 64
    1c82:	80 2f       	mov	r24, r16
    1c84:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1c88:	1f 5f       	subi	r17, 0xFF	; 255
    1c8a:	10 31       	cpi	r17, 0x10	; 16
    1c8c:	90 f3       	brcs	.-28     	; 0x1c72 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1c8e:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1c92:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1c96:	e2 96       	adiw	r28, 0x32	; 50
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	08 95       	ret

00001caa <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	1f 92       	push	r1
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1cb8:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	be 01       	movw	r22, r28
    1cbe:	6f 5f       	subi	r22, 0xFF	; 255
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1cc6:	42 e0       	ldi	r20, 0x02	; 2
    1cc8:	be 01       	movw	r22, r28
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	81 2f       	mov	r24, r17
    1cd0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
	timerOLED = 0;
    1cd4:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1cd8:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1cdc:	0f 90       	pop	r0
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	08 95       	ret

00001ce6 <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	84 e2       	ldi	r24, 0x24	; 36
    1cec:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1cf0:	83 36       	cpi	r24, 0x63	; 99
    1cf2:	a9 f1       	breq	.+106    	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	6a e0       	ldi	r22, 0x0A	; 10
    1cf8:	84 e2       	ldi	r24, 0x24	; 36
    1cfa:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1cfe:	83 36       	cpi	r24, 0x63	; 99
    1d00:	71 f1       	breq	.+92     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1d02:	4e ef       	ldi	r20, 0xFE	; 254
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	81 e2       	ldi	r24, 0x21	; 33
    1d08:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d0c:	83 36       	cpi	r24, 0x63	; 99
    1d0e:	39 f1       	breq	.+78     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	81 e2       	ldi	r24, 0x21	; 33
    1d16:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d1a:	83 36       	cpi	r24, 0x63	; 99
    1d1c:	01 f1       	breq	.+64     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1d1e:	4c ef       	ldi	r20, 0xFC	; 252
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	81 e2       	ldi	r24, 0x21	; 33
    1d24:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d28:	83 36       	cpi	r24, 0x63	; 99
    1d2a:	c9 f0       	breq	.+50     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	81 e2       	ldi	r24, 0x21	; 33
    1d32:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d36:	83 36       	cpi	r24, 0x63	; 99
    1d38:	91 f0       	breq	.+36     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	65 e0       	ldi	r22, 0x05	; 5
    1d3e:	81 e2       	ldi	r24, 0x21	; 33
    1d40:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d44:	83 36       	cpi	r24, 0x63	; 99
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	66 e0       	ldi	r22, 0x06	; 6
    1d4c:	81 e2       	ldi	r24, 0x21	; 33
    1d4e:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
    1d52:	83 36       	cpi	r24, 0x63	; 99
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <init_PNEU+0x78>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1d56:	89 e0       	ldi	r24, 0x09	; 9
    1d58:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	return(NOERROR);
    1d5c:	80 e0       	ldi	r24, 0x00	; 0

}
    1d5e:	08 95       	ret

00001d60 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	6c 01       	movw	r12, r24
    1d72:	8b 01       	movw	r16, r22
    1d74:	7a 01       	movw	r14, r20
    1d76:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d78:	69 e0       	ldi	r22, 0x09	; 9
    1d7a:	81 e2       	ldi	r24, 0x21	; 33
    1d7c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d80:	98 2f       	mov	r25, r24
    1d82:	92 95       	swap	r25
    1d84:	96 95       	lsr	r25
    1d86:	96 95       	lsr	r25
    1d88:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d8a:	91 30       	cpi	r25, 0x01	; 1
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d8e:	93 e6       	ldi	r25, 0x63	; 99
    1d90:	f6 01       	movw	r30, r12
    1d92:	90 83       	st	Z, r25
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d96:	92 30       	cpi	r25, 0x02	; 2
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d9a:	9f e6       	ldi	r25, 0x6F	; 111
    1d9c:	f6 01       	movw	r30, r12
    1d9e:	90 83       	st	Z, r25
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1da2:	93 30       	cpi	r25, 0x03	; 3
    1da4:	21 f4       	brne	.+8      	; 0x1dae <read_PNEUSensors+0x4e>
		*shutter = 't';
    1da6:	94 e7       	ldi	r25, 0x74	; 116
    1da8:	f6 01       	movw	r30, r12
    1daa:	90 83       	st	Z, r25
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1dae:	98 e7       	ldi	r25, 0x78	; 120
    1db0:	f6 01       	movw	r30, r12
    1db2:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1db4:	98 2f       	mov	r25, r24
    1db6:	96 95       	lsr	r25
    1db8:	96 95       	lsr	r25
	state &= 0b00000011;
    1dba:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dbc:	91 30       	cpi	r25, 0x01	; 1
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <read_PNEUSensors+0x68>
		*right = 'c';
    1dc0:	93 e6       	ldi	r25, 0x63	; 99
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	90 83       	st	Z, r25
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1dc8:	92 30       	cpi	r25, 0x02	; 2
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <read_PNEUSensors+0x74>
		*right = 'o';
    1dcc:	9f e6       	ldi	r25, 0x6F	; 111
    1dce:	f7 01       	movw	r30, r14
    1dd0:	90 83       	st	Z, r25
    1dd2:	09 c0       	rjmp	.+18     	; 0x1de6 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1dd4:	93 30       	cpi	r25, 0x03	; 3
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <read_PNEUSensors+0x80>
		*right = 't';
    1dd8:	94 e7       	ldi	r25, 0x74	; 116
    1dda:	f7 01       	movw	r30, r14
    1ddc:	90 83       	st	Z, r25
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1de0:	98 e7       	ldi	r25, 0x78	; 120
    1de2:	f7 01       	movw	r30, r14
    1de4:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1de6:	98 2f       	mov	r25, r24
    1de8:	92 95       	swap	r25
    1dea:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1dec:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dee:	91 30       	cpi	r25, 0x01	; 1
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <read_PNEUSensors+0x9a>
		*left = 'o';
    1df2:	9f e6       	ldi	r25, 0x6F	; 111
    1df4:	f8 01       	movw	r30, r16
    1df6:	90 83       	st	Z, r25
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1dfa:	92 30       	cpi	r25, 0x02	; 2
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <read_PNEUSensors+0xa6>
		*left = 'c';
    1dfe:	93 e6       	ldi	r25, 0x63	; 99
    1e00:	f8 01       	movw	r30, r16
    1e02:	90 83       	st	Z, r25
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1e06:	93 30       	cpi	r25, 0x03	; 3
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <read_PNEUSensors+0xb2>
		*left = 't';
    1e0a:	94 e7       	ldi	r25, 0x74	; 116
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	90 83       	st	Z, r25
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1e12:	98 e7       	ldi	r25, 0x78	; 120
    1e14:	f8 01       	movw	r30, r16
    1e16:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1e18:	81 ff       	sbrs	r24, 1
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <read_PNEUSensors+0xc2>
		*air = '0';
    1e1c:	80 e3       	ldi	r24, 0x30	; 48
    1e1e:	88 83       	st	Y, r24
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1e22:	81 e3       	ldi	r24, 0x31	; 49
    1e24:	88 83       	st	Y, r24
	}
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	08 95       	ret

00001e38 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	d8 2f       	mov	r29, r24
    1e3e:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1e40:	69 e0       	ldi	r22, 0x09	; 9
    1e42:	84 e2       	ldi	r24, 0x24	; 36
    1e44:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1e48:	8d 2b       	or	r24, r29
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1e4e:	6a e0       	ldi	r22, 0x0A	; 10
    1e50:	84 e2       	ldi	r24, 0x24	; 36
    1e52:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	6a 97       	sbiw	r28, 0x1a	; 26
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1e6a:	99 e0       	ldi	r25, 0x09	; 9
    1e6c:	ed e8       	ldi	r30, 0x8D	; 141
    1e6e:	f9 ea       	ldi	r31, 0xA9	; 169
    1e70:	de 01       	movw	r26, r28
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	01 90       	ld	r0, Z+
    1e76:	0d 92       	st	X+, r0
    1e78:	9a 95       	dec	r25
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e7c:	24 e3       	ldi	r18, 0x34	; 52
    1e7e:	82 9f       	mul	r24, r18
    1e80:	c0 01       	movw	r24, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	fc 01       	movw	r30, r24
    1e86:	e1 5f       	subi	r30, 0xF1	; 241
    1e88:	f7 4d       	sbci	r31, 0xD7	; 215
    1e8a:	81 81       	ldd	r24, Z+1	; 0x01
    1e8c:	8c 36       	cpi	r24, 0x6C	; 108
    1e8e:	31 f1       	breq	.+76     	; 0x1edc <close_PNEU+0x80>
    1e90:	18 f4       	brcc	.+6      	; 0x1e98 <close_PNEU+0x3c>
    1e92:	82 36       	cpi	r24, 0x62	; 98
    1e94:	39 f0       	breq	.+14     	; 0x1ea4 <close_PNEU+0x48>
    1e96:	6a c0       	rjmp	.+212    	; 0x1f6c <close_PNEU+0x110>
    1e98:	82 37       	cpi	r24, 0x72	; 114
    1e9a:	c1 f1       	breq	.+112    	; 0x1f0c <close_PNEU+0xb0>
    1e9c:	83 37       	cpi	r24, 0x73	; 115
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <close_PNEU+0x46>
    1ea0:	4d c0       	rjmp	.+154    	; 0x1f3c <close_PNEU+0xe0>
    1ea2:	64 c0       	rjmp	.+200    	; 0x1f6c <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ea4:	6a ee       	ldi	r22, 0xEA	; 234
    1ea6:	84 e4       	ldi	r24, 0x44	; 68
    1ea8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1eac:	66 ee       	ldi	r22, 0xE6	; 230
    1eae:	88 e8       	ldi	r24, 0x88	; 136
    1eb0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1eb4:	83 e5       	ldi	r24, 0x53	; 83
    1eb6:	99 ea       	ldi	r25, 0xA9	; 169
    1eb8:	9f 93       	push	r25
    1eba:	8f 93       	push	r24
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	9f 93       	push	r25
    1ec2:	8f 93       	push	r24
    1ec4:	09 96       	adiw	r24, 0x09	; 9
    1ec6:	9f 93       	push	r25
    1ec8:	8f 93       	push	r24
    1eca:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	59 c0       	rjmp	.+178    	; 0x1f8e <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1edc:	6a ee       	ldi	r22, 0xEA	; 234
    1ede:	84 e4       	ldi	r24, 0x44	; 68
    1ee0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ee4:	88 e5       	ldi	r24, 0x58	; 88
    1ee6:	99 ea       	ldi	r25, 0xA9	; 169
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	ce 01       	movw	r24, r28
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	9f 93       	push	r25
    1ef2:	8f 93       	push	r24
    1ef4:	09 96       	adiw	r24, 0x09	; 9
    1ef6:	9f 93       	push	r25
    1ef8:	8f 93       	push	r24
    1efa:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	41 c0       	rjmp	.+130    	; 0x1f8e <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1f0c:	66 ee       	ldi	r22, 0xE6	; 230
    1f0e:	88 e8       	ldi	r24, 0x88	; 136
    1f10:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1f14:	8d e5       	ldi	r24, 0x5D	; 93
    1f16:	99 ea       	ldi	r25, 0xA9	; 169
    1f18:	9f 93       	push	r25
    1f1a:	8f 93       	push	r24
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	9f 93       	push	r25
    1f22:	8f 93       	push	r24
    1f24:	09 96       	adiw	r24, 0x09	; 9
    1f26:	9f 93       	push	r25
    1f28:	8f 93       	push	r24
    1f2a:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	29 c0       	rjmp	.+82     	; 0x1f8e <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1f3c:	6c ee       	ldi	r22, 0xEC	; 236
    1f3e:	82 e2       	ldi	r24, 0x22	; 34
    1f40:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1f44:	83 e6       	ldi	r24, 0x63	; 99
    1f46:	99 ea       	ldi	r25, 0xA9	; 169
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	9f 93       	push	r25
    1f52:	8f 93       	push	r24
    1f54:	09 96       	adiw	r24, 0x09	; 9
    1f56:	9f 93       	push	r25
    1f58:	8f 93       	push	r24
    1f5a:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1f6c:	6b e6       	ldi	r22, 0x6B	; 107
    1f6e:	79 ea       	ldi	r23, 0xA9	; 169
    1f70:	85 ef       	ldi	r24, 0xF5	; 245
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			strcpy(outbuf, "close what?");
    1f78:	8c e0       	ldi	r24, 0x0C	; 12
    1f7a:	e1 e8       	ldi	r30, 0x81	; 129
    1f7c:	f9 ea       	ldi	r31, 0xA9	; 169
    1f7e:	de 01       	movw	r26, r28
    1f80:	1a 96       	adiw	r26, 0x0a	; 10
    1f82:	01 90       	ld	r0, Z+
    1f84:	0d 92       	st	X+, r0
    1f86:	8a 95       	dec	r24
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <close_PNEU+0x126>
			return(ERROR);
    1f8a:	83 e6       	ldi	r24, 0x63	; 99
    1f8c:	0b c0       	rjmp	.+22     	; 0x1fa4 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	0e 94 55 0e 	call	0x1caa	; 0x1caa <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	be 01       	movw	r22, r28
    1f98:	66 5f       	subi	r22, 0xF6	; 246
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
	return(NOERROR);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0

}
    1fa4:	6a 96       	adiw	r28, 0x1a	; 26
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	69 97       	sbiw	r28, 0x19	; 25
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1fbe:	98 e0       	ldi	r25, 0x08	; 8
    1fc0:	e6 eb       	ldi	r30, 0xB6	; 182
    1fc2:	f9 ea       	ldi	r31, 0xA9	; 169
    1fc4:	de 01       	movw	r26, r28
    1fc6:	11 96       	adiw	r26, 0x01	; 1
    1fc8:	01 90       	ld	r0, Z+
    1fca:	0d 92       	st	X+, r0
    1fcc:	9a 95       	dec	r25
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1fd0:	24 e3       	ldi	r18, 0x34	; 52
    1fd2:	82 9f       	mul	r24, r18
    1fd4:	c0 01       	movw	r24, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e1 5f       	subi	r30, 0xF1	; 241
    1fdc:	f7 4d       	sbci	r31, 0xD7	; 215
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	8c 36       	cpi	r24, 0x6C	; 108
    1fe2:	31 f1       	breq	.+76     	; 0x2030 <open_PNEU+0x80>
    1fe4:	18 f4       	brcc	.+6      	; 0x1fec <open_PNEU+0x3c>
    1fe6:	82 36       	cpi	r24, 0x62	; 98
    1fe8:	39 f0       	breq	.+14     	; 0x1ff8 <open_PNEU+0x48>
    1fea:	6a c0       	rjmp	.+212    	; 0x20c0 <open_PNEU+0x110>
    1fec:	82 37       	cpi	r24, 0x72	; 114
    1fee:	c1 f1       	breq	.+112    	; 0x2060 <open_PNEU+0xb0>
    1ff0:	83 37       	cpi	r24, 0x73	; 115
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <open_PNEU+0x46>
    1ff4:	4d c0       	rjmp	.+154    	; 0x2090 <open_PNEU+0xe0>
    1ff6:	64 c0       	rjmp	.+200    	; 0x20c0 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1ff8:	6e ea       	ldi	r22, 0xAE	; 174
    1ffa:	84 e4       	ldi	r24, 0x44	; 68
    1ffc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    2000:	6e e6       	ldi	r22, 0x6E	; 110
    2002:	88 e8       	ldi	r24, 0x88	; 136
    2004:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    2008:	83 e5       	ldi	r24, 0x53	; 83
    200a:	99 ea       	ldi	r25, 0xA9	; 169
    200c:	9f 93       	push	r25
    200e:	8f 93       	push	r24
    2010:	ce 01       	movw	r24, r28
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	9f 93       	push	r25
    2016:	8f 93       	push	r24
    2018:	08 96       	adiw	r24, 0x08	; 8
    201a:	9f 93       	push	r25
    201c:	8f 93       	push	r24
    201e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	59 c0       	rjmp	.+178    	; 0x20e2 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    2030:	6e ea       	ldi	r22, 0xAE	; 174
    2032:	84 e4       	ldi	r24, 0x44	; 68
    2034:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    2038:	88 e5       	ldi	r24, 0x58	; 88
    203a:	99 ea       	ldi	r25, 0xA9	; 169
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	9f 93       	push	r25
    2046:	8f 93       	push	r24
    2048:	08 96       	adiw	r24, 0x08	; 8
    204a:	9f 93       	push	r25
    204c:	8f 93       	push	r24
    204e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	41 c0       	rjmp	.+130    	; 0x20e2 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    2060:	6e e6       	ldi	r22, 0x6E	; 110
    2062:	88 e8       	ldi	r24, 0x88	; 136
    2064:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    2068:	8d e5       	ldi	r24, 0x5D	; 93
    206a:	99 ea       	ldi	r25, 0xA9	; 169
    206c:	9f 93       	push	r25
    206e:	8f 93       	push	r24
    2070:	ce 01       	movw	r24, r28
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	9f 93       	push	r25
    2076:	8f 93       	push	r24
    2078:	08 96       	adiw	r24, 0x08	; 8
    207a:	9f 93       	push	r25
    207c:	8f 93       	push	r24
    207e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	29 c0       	rjmp	.+82     	; 0x20e2 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    2090:	6e ec       	ldi	r22, 0xCE	; 206
    2092:	82 e2       	ldi	r24, 0x22	; 34
    2094:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    2098:	83 e6       	ldi	r24, 0x63	; 99
    209a:	99 ea       	ldi	r25, 0xA9	; 169
    209c:	9f 93       	push	r25
    209e:	8f 93       	push	r24
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	9f 93       	push	r25
    20a6:	8f 93       	push	r24
    20a8:	08 96       	adiw	r24, 0x08	; 8
    20aa:	9f 93       	push	r25
    20ac:	8f 93       	push	r24
    20ae:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			break;
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	11 c0       	rjmp	.+34     	; 0x20e2 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    20c0:	66 e9       	ldi	r22, 0x96	; 150
    20c2:	79 ea       	ldi	r23, 0xA9	; 169
    20c4:	85 ef       	ldi	r24, 0xF5	; 245
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			strcpy(outbuf, "open what?");
    20cc:	8b e0       	ldi	r24, 0x0B	; 11
    20ce:	eb ea       	ldi	r30, 0xAB	; 171
    20d0:	f9 ea       	ldi	r31, 0xA9	; 169
    20d2:	de 01       	movw	r26, r28
    20d4:	19 96       	adiw	r26, 0x09	; 9
    20d6:	01 90       	ld	r0, Z+
    20d8:	0d 92       	st	X+, r0
    20da:	8a 95       	dec	r24
    20dc:	e1 f7       	brne	.-8      	; 0x20d6 <open_PNEU+0x126>
			return(ERROR);
    20de:	83 e6       	ldi	r24, 0x63	; 99
    20e0:	0b c0       	rjmp	.+22     	; 0x20f8 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	be 01       	movw	r22, r28
    20ec:	67 5f       	subi	r22, 0xF7	; 247
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
	return(NOERROR);
    20f6:	80 e0       	ldi	r24, 0x00	; 0

}
    20f8:	69 96       	adiw	r28, 0x19	; 25
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// MCP23008 interrupt
    2126:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    212a:	88 23       	and	r24, r24
    212c:	4c f4       	brge	.+18     	; 0x2140 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    212e:	80 e8       	ldi	r24, 0x80	; 128
    2130:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    2134:	68 e0       	ldi	r22, 0x08	; 8
    2136:	81 e2       	ldi	r24, 0x21	; 33
    2138:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <read_MCP23008>
    213c:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pneuState>
	}

}
    2140:	ff 91       	pop	r31
    2142:	ef 91       	pop	r30
    2144:	bf 91       	pop	r27
    2146:	af 91       	pop	r26
    2148:	9f 91       	pop	r25
    214a:	8f 91       	pop	r24
    214c:	7f 91       	pop	r23
    214e:	6f 91       	pop	r22
    2150:	5f 91       	pop	r21
    2152:	4f 91       	pop	r20
    2154:	3f 91       	pop	r19
    2156:	2f 91       	pop	r18
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <init_PORTS>:

/*------------------------------------------------------------------------------
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29

	PORTB.DIRSET = PIN2_bm;		// Beeper
    2166:	e0 e2       	ldi	r30, 0x20	; 32
    2168:	f4 e0       	ldi	r31, 0x04	; 4
    216a:	84 e0       	ldi	r24, 0x04	; 4
    216c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    216e:	a0 ea       	ldi	r26, 0xA0	; 160
    2170:	b4 e0       	ldi	r27, 0x04	; 4
    2172:	12 96       	adiw	r26, 0x02	; 2
    2174:	8c 93       	st	X, r24
    2176:	12 97       	sbiw	r26, 0x02	; 2
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    2178:	80 e2       	ldi	r24, 0x20	; 32
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	8c 93       	st	X, r24
    217e:	11 97       	sbiw	r26, 0x01	; 1
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2180:	9b e0       	ldi	r25, 0x0B	; 11
    2182:	56 96       	adiw	r26, 0x16	; 22
    2184:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    2186:	a0 e4       	ldi	r26, 0x40	; 64
    2188:	b4 e0       	ldi	r27, 0x04	; 4
    218a:	98 e0       	ldi	r25, 0x08	; 8
    218c:	16 96       	adiw	r26, 0x06	; 6
    218e:	9c 93       	st	X, r25
    2190:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    2192:	11 96       	adiw	r26, 0x01	; 1
    2194:	9c 93       	st	X, r25
    2196:	11 97       	sbiw	r26, 0x01	; 1
    2198:	cd e8       	ldi	r28, 0x8D	; 141
    219a:	d0 e2       	ldi	r29, 0x20	; 32
    219c:	21 97       	sbiw	r28, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <init_PORTS+0x3a>
    21a0:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    21a2:	15 96       	adiw	r26, 0x05	; 5
    21a4:	9c 93       	st	X, r25

PORTB.DIRSET = PIN5_bm;	// test pin
    21a6:	81 83       	std	Z+1, r24	; 0x01
PORTB.OUTCLR = PIN5_bm;
    21a8:	86 83       	std	Z+6, r24	; 0x06

}
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    21b0:	2f 92       	push	r2
    21b2:	3f 92       	push	r3
    21b4:	4f 92       	push	r4
    21b6:	5f 92       	push	r5
    21b8:	6f 92       	push	r6
    21ba:	7f 92       	push	r7
    21bc:	8f 92       	push	r8
    21be:	9f 92       	push	r9
    21c0:	af 92       	push	r10
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	cf 5a       	subi	r28, 0xAF	; 175
    21da:	d3 40       	sbci	r29, 0x03	; 3
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air, mlimit, mdir;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    21e0:	95 e4       	ldi	r25, 0x45	; 69
    21e2:	e9 e4       	ldi	r30, 0x49	; 73
    21e4:	fb ea       	ldi	r31, 0xAB	; 171
    21e6:	de 01       	movw	r26, r28
    21e8:	a2 5a       	subi	r26, 0xA2	; 162
    21ea:	be 4f       	sbci	r27, 0xFE	; 254
    21ec:	01 90       	ld	r0, Z+
    21ee:	0d 92       	st	X+, r0
    21f0:	9a 95       	dec	r25
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%c,dir,%c,lim,%s";
    21f4:	91 e3       	ldi	r25, 0x31	; 49
    21f6:	ee e8       	ldi	r30, 0x8E	; 142
    21f8:	fb ea       	ldi	r31, 0xAB	; 171
    21fa:	de 01       	movw	r26, r28
    21fc:	ad 55       	subi	r26, 0x5D	; 93
    21fe:	be 4f       	sbci	r27, 0xFE	; 254
    2200:	01 90       	ld	r0, Z+
    2202:	0d 92       	st	X+, r0
    2204:	9a 95       	dec	r25
    2206:	e1 f7       	brne	.-8      	; 0x2200 <report+0x50>
	const char format_MT0[] = "ETI,%s,Mtr%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";
    2208:	9f e2       	ldi	r25, 0x2F	; 47
    220a:	ef eb       	ldi	r30, 0xBF	; 191
    220c:	fb ea       	ldi	r31, 0xAB	; 171
    220e:	de 01       	movw	r26, r28
    2210:	ac 52       	subi	r26, 0x2C	; 44
    2212:	be 4f       	sbci	r27, 0xFE	; 254
    2214:	01 90       	ld	r0, Z+
    2216:	0d 92       	st	X+, r0
    2218:	9a 95       	dec	r25
    221a:	e1 f7       	brne	.-8      	; 0x2214 <report+0x64>
	const char format_MT1[] = "PID,%s,Mtr%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    221c:	90 e3       	ldi	r25, 0x30	; 48
    221e:	ee ee       	ldi	r30, 0xEE	; 238
    2220:	fb ea       	ldi	r31, 0xAB	; 171
    2222:	de 01       	movw	r26, r28
    2224:	ad 5f       	subi	r26, 0xFD	; 253
    2226:	bd 4f       	sbci	r27, 0xFD	; 253
    2228:	01 90       	ld	r0, Z+
    222a:	0d 92       	st	X+, r0
    222c:	9a 95       	dec	r25
    222e:	e1 f7       	brne	.-8      	; 0x2228 <report+0x78>
	const char format_MT2[] = "DMM,%s,Mtr%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    2230:	94 e3       	ldi	r25, 0x34	; 52
    2232:	ee e1       	ldi	r30, 0x1E	; 30
    2234:	fc ea       	ldi	r31, 0xAC	; 172
    2236:	de 01       	movw	r26, r28
    2238:	ad 5c       	subi	r26, 0xCD	; 205
    223a:	bd 4f       	sbci	r27, 0xFD	; 253
    223c:	01 90       	ld	r0, Z+
    223e:	0d 92       	st	X+, r0
    2240:	9a 95       	dec	r25
    2242:	e1 f7       	brne	.-8      	; 0x223c <report+0x8c>
	const char format_MT3[] = "MTC,%s,Mtr%c,%ld,mA,0x%02x,S4,%s";
    2244:	91 e2       	ldi	r25, 0x21	; 33
    2246:	e2 e5       	ldi	r30, 0x52	; 82
    2248:	fc ea       	ldi	r31, 0xAC	; 172
    224a:	de 01       	movw	r26, r28
    224c:	a9 59       	subi	r26, 0x99	; 153
    224e:	bd 4f       	sbci	r27, 0xFD	; 253
    2250:	01 90       	ld	r0, Z+
    2252:	0d 92       	st	X+, r0
    2254:	9a 95       	dec	r25
    2256:	e1 f7       	brne	.-8      	; 0x2250 <report+0xa0>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    2258:	9c e1       	ldi	r25, 0x1C	; 28
    225a:	e3 e7       	ldi	r30, 0x73	; 115
    225c:	fc ea       	ldi	r31, 0xAC	; 172
    225e:	de 01       	movw	r26, r28
    2260:	a8 57       	subi	r26, 0x78	; 120
    2262:	bd 4f       	sbci	r27, 0xFD	; 253
    2264:	01 90       	ld	r0, Z+
    2266:	0d 92       	st	X+, r0
    2268:	9a 95       	dec	r25
    226a:	e1 f7       	brne	.-8      	; 0x2264 <report+0xb4>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    226c:	92 e1       	ldi	r25, 0x12	; 18
    226e:	ef e8       	ldi	r30, 0x8F	; 143
    2270:	fc ea       	ldi	r31, 0xAC	; 172
    2272:	de 01       	movw	r26, r28
    2274:	ac 55       	subi	r26, 0x5C	; 92
    2276:	bd 4f       	sbci	r27, 0xFD	; 253
    2278:	01 90       	ld	r0, Z+
    227a:	0d 92       	st	X+, r0
    227c:	9a 95       	dec	r25
    227e:	e1 f7       	brne	.-8      	; 0x2278 <report+0xc8>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    2280:	9d e2       	ldi	r25, 0x2D	; 45
    2282:	e1 ea       	ldi	r30, 0xA1	; 161
    2284:	fc ea       	ldi	r31, 0xAC	; 172
    2286:	de 01       	movw	r26, r28
    2288:	aa 54       	subi	r26, 0x4A	; 74
    228a:	bd 4f       	sbci	r27, 0xFD	; 253
    228c:	01 90       	ld	r0, Z+
    228e:	0d 92       	st	X+, r0
    2290:	9a 95       	dec	r25
    2292:	e1 f7       	brne	.-8      	; 0x228c <report+0xdc>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2294:	93 e1       	ldi	r25, 0x13	; 19
    2296:	ee ec       	ldi	r30, 0xCE	; 206
    2298:	fc ea       	ldi	r31, 0xAC	; 172
    229a:	de 01       	movw	r26, r28
    229c:	ad 51       	subi	r26, 0x1D	; 29
    229e:	bd 4f       	sbci	r27, 0xFD	; 253
    22a0:	01 90       	ld	r0, Z+
    22a2:	0d 92       	st	X+, r0
    22a4:	9a 95       	dec	r25
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <report+0xf0>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    22a8:	93 e1       	ldi	r25, 0x13	; 19
    22aa:	e1 ee       	ldi	r30, 0xE1	; 225
    22ac:	fc ea       	ldi	r31, 0xAC	; 172
    22ae:	de 01       	movw	r26, r28
    22b0:	aa 50       	subi	r26, 0x0A	; 10
    22b2:	bd 4f       	sbci	r27, 0xFD	; 253
    22b4:	01 90       	ld	r0, Z+
    22b6:	0d 92       	st	X+, r0
    22b8:	9a 95       	dec	r25
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <report+0x104>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    22bc:	99 e1       	ldi	r25, 0x19	; 25
    22be:	e4 ef       	ldi	r30, 0xF4	; 244
    22c0:	fc ea       	ldi	r31, 0xAC	; 172
    22c2:	de 01       	movw	r26, r28
    22c4:	a7 5f       	subi	r26, 0xF7	; 247
    22c6:	bc 4f       	sbci	r27, 0xFC	; 252
    22c8:	01 90       	ld	r0, Z+
    22ca:	0d 92       	st	X+, r0
    22cc:	9a 95       	dec	r25
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <report+0x118>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    22d0:	95 e2       	ldi	r25, 0x25	; 37
    22d2:	ed e0       	ldi	r30, 0x0D	; 13
    22d4:	fd ea       	ldi	r31, 0xAD	; 173
    22d6:	de 01       	movw	r26, r28
    22d8:	ae 5d       	subi	r26, 0xDE	; 222
    22da:	bc 4f       	sbci	r27, 0xFC	; 252
    22dc:	01 90       	ld	r0, Z+
    22de:	0d 92       	st	X+, r0
    22e0:	9a 95       	dec	r25
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <report+0x12c>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    22e4:	9d e0       	ldi	r25, 0x0D	; 13
    22e6:	e2 e3       	ldi	r30, 0x32	; 50
    22e8:	fd ea       	ldi	r31, 0xAD	; 173
    22ea:	de 01       	movw	r26, r28
    22ec:	a9 5b       	subi	r26, 0xB9	; 185
    22ee:	bc 4f       	sbci	r27, 0xFC	; 252
    22f0:	01 90       	ld	r0, Z+
    22f2:	0d 92       	st	X+, r0
    22f4:	9a 95       	dec	r25
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <report+0x140>
	const char format_VER[] = "VER,%s,%s,%s";
    22f8:	9d e0       	ldi	r25, 0x0D	; 13
    22fa:	ef e3       	ldi	r30, 0x3F	; 63
    22fc:	fd ea       	ldi	r31, 0xAD	; 173
    22fe:	de 01       	movw	r26, r28
    2300:	ac 5a       	subi	r26, 0xAC	; 172
    2302:	bc 4f       	sbci	r27, 0xFC	; 252
    2304:	01 90       	ld	r0, Z+
    2306:	0d 92       	st	X+, r0
    2308:	9a 95       	dec	r25
    230a:	e1 f7       	brne	.-8      	; 0x2304 <report+0x154>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    230c:	08 2f       	mov	r16, r24
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	84 e3       	ldi	r24, 0x34	; 52
    2312:	80 9f       	mul	r24, r16
    2314:	f0 01       	movw	r30, r0
    2316:	81 9f       	mul	r24, r17
    2318:	f0 0d       	add	r31, r0
    231a:	11 24       	eor	r1, r1
    231c:	e1 5f       	subi	r30, 0xF1	; 241
    231e:	f7 4d       	sbci	r31, 0xD7	; 215
    2320:	e1 81       	ldd	r30, Z+1	; 0x01
    2322:	8e 2f       	mov	r24, r30
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	fc 01       	movw	r30, r24
    2328:	e1 54       	subi	r30, 0x41	; 65
    232a:	f1 09       	sbc	r31, r1
    232c:	e6 33       	cpi	r30, 0x36	; 54
    232e:	f1 05       	cpc	r31, r1
    2330:	08 f0       	brcs	.+2      	; 0x2334 <report+0x184>
    2332:	57 c6       	rjmp	.+3246   	; 0x2fe2 <report+0xe32>
    2334:	e4 58       	subi	r30, 0x84	; 132
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    233c:	ce 01       	movw	r24, r28
    233e:	86 5f       	subi	r24, 0xF6	; 246
    2340:	9e 4f       	sbci	r25, 0xFE	; 254
    2342:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			controller = pcmd[cstack].cobject + 63;
    2346:	84 e3       	ldi	r24, 0x34	; 52
    2348:	80 9f       	mul	r24, r16
    234a:	f0 01       	movw	r30, r0
    234c:	81 9f       	mul	r24, r17
    234e:	f0 0d       	add	r31, r0
    2350:	11 24       	eor	r1, r1
    2352:	e1 5f       	subi	r30, 0xF1	; 241
    2354:	f7 4d       	sbci	r31, 0xD7	; 215
    2356:	d1 80       	ldd	r13, Z+1	; 0x01
    2358:	0f 2e       	mov	r0, r31
    235a:	ff e3       	ldi	r31, 0x3F	; 63
    235c:	ef 2e       	mov	r14, r31
    235e:	f0 2d       	mov	r31, r0
    2360:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    2362:	ae 01       	movw	r20, r28
    2364:	4e 58       	subi	r20, 0x8E	; 142
    2366:	5c 4f       	sbci	r21, 0xFC	; 252
    2368:	68 e1       	ldi	r22, 0x18	; 24
    236a:	8e 2d       	mov	r24, r14
    236c:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <get_MOTOR_FLOAT>
    2370:	f8 2e       	mov	r15, r24
    2372:	83 e6       	ldi	r24, 0x63	; 99
    2374:	f8 12       	cpse	r15, r24
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <report+0x1d6>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    2378:	6e eb       	ldi	r22, 0xBE	; 190
    237a:	79 ea       	ldi	r23, 0xA9	; 169
    237c:	86 e3       	ldi	r24, 0x36	; 54
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    2384:	38 c6       	rjmp	.+3184   	; 0x2ff6 <report+0xe46>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    2386:	ce 01       	movw	r24, r28
    2388:	8a 5b       	subi	r24, 0xBA	; 186
    238a:	9e 4f       	sbci	r25, 0xFE	; 254
    238c:	0e 94 38 18 	call	0x3070	; 0x3070 <get_FRAM_ENCSAVETIME>
    2390:	f8 2e       	mov	r15, r24
    2392:	93 e6       	ldi	r25, 0x63	; 99
    2394:	89 13       	cpse	r24, r25
    2396:	11 c0       	rjmp	.+34     	; 0x23ba <report+0x20a>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    2398:	82 e2       	ldi	r24, 0x22	; 34
    239a:	e2 ee       	ldi	r30, 0xE2	; 226
    239c:	f9 ea       	ldi	r31, 0xA9	; 169
    239e:	de 01       	movw	r26, r28
    23a0:	11 96       	adiw	r26, 0x01	; 1
    23a2:	01 90       	ld	r0, Z+
    23a4:	0d 92       	st	X+, r0
    23a6:	8a 95       	dec	r24
    23a8:	e1 f7       	brne	.-8      	; 0x23a2 <report+0x1f2>
				printError(ERR_MTR, outbuf);
    23aa:	be 01       	movw	r22, r28
    23ac:	6f 5f       	subi	r22, 0xFF	; 255
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	86 e3       	ldi	r24, 0x36	; 54
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    23b8:	1e c6       	rjmp	.+3132   	; 0x2ff6 <report+0xe46>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    23ba:	ae 01       	movw	r20, r28
    23bc:	42 59       	subi	r20, 0x92	; 146
    23be:	5c 4f       	sbci	r21, 0xFC	; 252
    23c0:	62 e5       	ldi	r22, 0x52	; 82
    23c2:	8e 2d       	mov	r24, r14
    23c4:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <get_MOTOR_FLOAT>
    23c8:	f8 2e       	mov	r15, r24
    23ca:	83 e6       	ldi	r24, 0x63	; 99
    23cc:	f8 12       	cpse	r15, r24
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <report+0x22e>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    23d0:	64 e0       	ldi	r22, 0x04	; 4
    23d2:	7a ea       	ldi	r23, 0xAA	; 170
    23d4:	86 e3       	ldi	r24, 0x36	; 54
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    23dc:	0c c6       	rjmp	.+3096   	; 0x2ff6 <report+0xe46>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    23de:	be 01       	movw	r22, r28
    23e0:	66 59       	subi	r22, 0x96	; 150
    23e2:	7c 4f       	sbci	r23, 0xFC	; 252
    23e4:	8e 2d       	mov	r24, r14
    23e6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <get_MOTOR_MAXCURRENT>
    23ea:	f8 2e       	mov	r15, r24
    23ec:	93 e6       	ldi	r25, 0x63	; 99
    23ee:	89 13       	cpse	r24, r25
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <report+0x250>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    23f2:	6e e2       	ldi	r22, 0x2E	; 46
    23f4:	7a ea       	ldi	r23, 0xAA	; 170
    23f6:	86 e3       	ldi	r24, 0x36	; 54
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    23fe:	fb c5       	rjmp	.+3062   	; 0x2ff6 <report+0xe46>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    2400:	be 01       	movw	r22, r28
    2402:	6f 59       	subi	r22, 0x9F	; 159
    2404:	7c 4f       	sbci	r23, 0xFC	; 252
    2406:	8e 2d       	mov	r24, r14
    2408:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <get_MOTOR_S4MODE>
    240c:	f8 2e       	mov	r15, r24
    240e:	83 e6       	ldi	r24, 0x63	; 99
    2410:	f8 12       	cpse	r15, r24
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <report+0x272>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    2414:	61 e5       	ldi	r22, 0x51	; 81
    2416:	7a ea       	ldi	r23, 0xAA	; 170
    2418:	86 e3       	ldi	r24, 0x36	; 54
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    2420:	ea c5       	rjmp	.+3028   	; 0x2ff6 <report+0xe46>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2422:	be 01       	movw	r22, r28
    2424:	6c 57       	subi	r22, 0x7C	; 124
    2426:	7c 4f       	sbci	r23, 0xFC	; 252
    2428:	8e 2d       	mov	r24, r14
    242a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <get_MOTOR_PID>
    242e:	f8 2e       	mov	r15, r24
    2430:	93 e6       	ldi	r25, 0x63	; 99
    2432:	89 13       	cpse	r24, r25
    2434:	07 c0       	rjmp	.+14     	; 0x2444 <report+0x294>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    2436:	60 e7       	ldi	r22, 0x70	; 112
    2438:	7a ea       	ldi	r23, 0xAA	; 170
    243a:	86 e3       	ldi	r24, 0x36	; 54
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    2442:	d9 c5       	rjmp	.+2994   	; 0x2ff6 <report+0xe46>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    2444:	24 e3       	ldi	r18, 0x34	; 52
    2446:	20 9f       	mul	r18, r16
    2448:	c0 01       	movw	r24, r0
    244a:	21 9f       	mul	r18, r17
    244c:	90 0d       	add	r25, r0
    244e:	11 24       	eor	r1, r1
    2450:	8c 01       	movw	r16, r24
    2452:	06 5c       	subi	r16, 0xC6	; 198
    2454:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    2456:	1f 93       	push	r17
    2458:	0f 93       	push	r16
    245a:	ce 01       	movw	r24, r28
    245c:	8a 5b       	subi	r24, 0xBA	; 186
    245e:	9e 4f       	sbci	r25, 0xFE	; 254
    2460:	9f 93       	push	r25
    2462:	8f 93       	push	r24
    2464:	cf 58       	subi	r28, 0x8F	; 143
    2466:	dc 4f       	sbci	r29, 0xFC	; 252
    2468:	88 81       	ld	r24, Y
    246a:	c1 57       	subi	r28, 0x71	; 113
    246c:	d3 40       	sbci	r29, 0x03	; 3
    246e:	8f 93       	push	r24
    2470:	c0 59       	subi	r28, 0x90	; 144
    2472:	dc 4f       	sbci	r29, 0xFC	; 252
    2474:	88 81       	ld	r24, Y
    2476:	c0 57       	subi	r28, 0x70	; 112
    2478:	d3 40       	sbci	r29, 0x03	; 3
    247a:	8f 93       	push	r24
    247c:	c1 59       	subi	r28, 0x91	; 145
    247e:	dc 4f       	sbci	r29, 0xFC	; 252
    2480:	88 81       	ld	r24, Y
    2482:	cf 56       	subi	r28, 0x6F	; 111
    2484:	d3 40       	sbci	r29, 0x03	; 3
    2486:	8f 93       	push	r24
    2488:	c2 59       	subi	r28, 0x92	; 146
    248a:	dc 4f       	sbci	r29, 0xFC	; 252
    248c:	88 81       	ld	r24, Y
    248e:	ce 56       	subi	r28, 0x6E	; 110
    2490:	d3 40       	sbci	r29, 0x03	; 3
    2492:	8f 93       	push	r24
    2494:	cb 58       	subi	r28, 0x8B	; 139
    2496:	dc 4f       	sbci	r29, 0xFC	; 252
    2498:	88 81       	ld	r24, Y
    249a:	c5 57       	subi	r28, 0x75	; 117
    249c:	d3 40       	sbci	r29, 0x03	; 3
    249e:	8f 93       	push	r24
    24a0:	cc 58       	subi	r28, 0x8C	; 140
    24a2:	dc 4f       	sbci	r29, 0xFC	; 252
    24a4:	88 81       	ld	r24, Y
    24a6:	c4 57       	subi	r28, 0x74	; 116
    24a8:	d3 40       	sbci	r29, 0x03	; 3
    24aa:	8f 93       	push	r24
    24ac:	cd 58       	subi	r28, 0x8D	; 141
    24ae:	dc 4f       	sbci	r29, 0xFC	; 252
    24b0:	88 81       	ld	r24, Y
    24b2:	c3 57       	subi	r28, 0x73	; 115
    24b4:	d3 40       	sbci	r29, 0x03	; 3
    24b6:	8f 93       	push	r24
    24b8:	ce 58       	subi	r28, 0x8E	; 142
    24ba:	dc 4f       	sbci	r29, 0xFC	; 252
    24bc:	88 81       	ld	r24, Y
    24be:	c2 57       	subi	r28, 0x72	; 114
    24c0:	d3 40       	sbci	r29, 0x03	; 3
    24c2:	8f 93       	push	r24
    24c4:	1f 92       	push	r1
    24c6:	df 92       	push	r13
    24c8:	5e 01       	movw	r10, r28
    24ca:	86 ef       	ldi	r24, 0xF6	; 246
    24cc:	a8 1a       	sub	r10, r24
    24ce:	8e ef       	ldi	r24, 0xFE	; 254
    24d0:	b8 0a       	sbc	r11, r24
    24d2:	bf 92       	push	r11
    24d4:	af 92       	push	r10
    24d6:	ce 01       	movw	r24, r28
    24d8:	8c 52       	subi	r24, 0x2C	; 44
    24da:	9e 4f       	sbci	r25, 0xFE	; 254
    24dc:	9f 93       	push	r25
    24de:	8f 93       	push	r24
    24e0:	83 5d       	subi	r24, 0xD3	; 211
    24e2:	91 40       	sbci	r25, 0x01	; 1
    24e4:	7c 01       	movw	r14, r24
    24e6:	9f 93       	push	r25
    24e8:	8f 93       	push	r24
    24ea:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    24ee:	c7 01       	movw	r24, r14
    24f0:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    24f4:	1f 93       	push	r17
    24f6:	0f 93       	push	r16
    24f8:	cf 59       	subi	r28, 0x9F	; 159
    24fa:	dc 4f       	sbci	r29, 0xFC	; 252
    24fc:	88 81       	ld	r24, Y
    24fe:	c1 56       	subi	r28, 0x61	; 97
    2500:	d3 40       	sbci	r29, 0x03	; 3
    2502:	1f 92       	push	r1
    2504:	8f 93       	push	r24
    2506:	c3 59       	subi	r28, 0x93	; 147
    2508:	dc 4f       	sbci	r29, 0xFC	; 252
    250a:	88 81       	ld	r24, Y
    250c:	cd 56       	subi	r28, 0x6D	; 109
    250e:	d3 40       	sbci	r29, 0x03	; 3
    2510:	8f 93       	push	r24
    2512:	c4 59       	subi	r28, 0x94	; 148
    2514:	dc 4f       	sbci	r29, 0xFC	; 252
    2516:	88 81       	ld	r24, Y
    2518:	cc 56       	subi	r28, 0x6C	; 108
    251a:	d3 40       	sbci	r29, 0x03	; 3
    251c:	8f 93       	push	r24
    251e:	c5 59       	subi	r28, 0x95	; 149
    2520:	dc 4f       	sbci	r29, 0xFC	; 252
    2522:	88 81       	ld	r24, Y
    2524:	cb 56       	subi	r28, 0x6B	; 107
    2526:	d3 40       	sbci	r29, 0x03	; 3
    2528:	8f 93       	push	r24
    252a:	c6 59       	subi	r28, 0x96	; 150
    252c:	dc 4f       	sbci	r29, 0xFC	; 252
    252e:	88 81       	ld	r24, Y
    2530:	ca 56       	subi	r28, 0x6A	; 106
    2532:	d3 40       	sbci	r29, 0x03	; 3
    2534:	8f 93       	push	r24
    2536:	1f 92       	push	r1
    2538:	df 92       	push	r13
    253a:	bf 92       	push	r11
    253c:	af 92       	push	r10
    253e:	ce 01       	movw	r24, r28
    2540:	89 59       	subi	r24, 0x99	; 153
    2542:	9d 4f       	sbci	r25, 0xFD	; 253
    2544:	9f 93       	push	r25
    2546:	8f 93       	push	r24
    2548:	ff 92       	push	r15
    254a:	ef 92       	push	r14
    254c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	c7 01       	movw	r24, r14
    2556:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    255a:	c4 57       	subi	r28, 0x74	; 116
    255c:	dc 4f       	sbci	r29, 0xFC	; 252
    255e:	e8 81       	ld	r30, Y
    2560:	cc 58       	subi	r28, 0x8C	; 140
    2562:	d3 40       	sbci	r29, 0x03	; 3
    2564:	c3 57       	subi	r28, 0x73	; 115
    2566:	dc 4f       	sbci	r29, 0xFC	; 252
    2568:	f8 81       	ld	r31, Y
    256a:	cd 58       	subi	r28, 0x8D	; 141
    256c:	d3 40       	sbci	r29, 0x03	; 3
    256e:	c2 57       	subi	r28, 0x72	; 114
    2570:	dc 4f       	sbci	r29, 0xFC	; 252
    2572:	a8 81       	ld	r26, Y
    2574:	ce 58       	subi	r28, 0x8E	; 142
    2576:	d3 40       	sbci	r29, 0x03	; 3
    2578:	c1 57       	subi	r28, 0x71	; 113
    257a:	dc 4f       	sbci	r29, 0xFC	; 252
    257c:	b8 81       	ld	r27, Y
    257e:	cf 58       	subi	r28, 0x8F	; 143
    2580:	d3 40       	sbci	r29, 0x03	; 3
    2582:	c8 57       	subi	r28, 0x78	; 120
    2584:	dc 4f       	sbci	r29, 0xFC	; 252
    2586:	48 81       	ld	r20, Y
    2588:	c8 58       	subi	r28, 0x88	; 136
    258a:	d3 40       	sbci	r29, 0x03	; 3
    258c:	c7 57       	subi	r28, 0x77	; 119
    258e:	dc 4f       	sbci	r29, 0xFC	; 252
    2590:	58 81       	ld	r21, Y
    2592:	c9 58       	subi	r28, 0x89	; 137
    2594:	d3 40       	sbci	r29, 0x03	; 3
    2596:	c6 57       	subi	r28, 0x76	; 118
    2598:	dc 4f       	sbci	r29, 0xFC	; 252
    259a:	68 81       	ld	r22, Y
    259c:	ca 58       	subi	r28, 0x8A	; 138
    259e:	d3 40       	sbci	r29, 0x03	; 3
    25a0:	c5 57       	subi	r28, 0x75	; 117
    25a2:	dc 4f       	sbci	r29, 0xFC	; 252
    25a4:	78 81       	ld	r23, Y
    25a6:	cb 58       	subi	r28, 0x8B	; 139
    25a8:	d3 40       	sbci	r29, 0x03	; 3
    25aa:	cc 57       	subi	r28, 0x7C	; 124
    25ac:	dc 4f       	sbci	r29, 0xFC	; 252
    25ae:	88 81       	ld	r24, Y
    25b0:	c4 58       	subi	r28, 0x84	; 132
    25b2:	d3 40       	sbci	r29, 0x03	; 3
    25b4:	cb 57       	subi	r28, 0x7B	; 123
    25b6:	dc 4f       	sbci	r29, 0xFC	; 252
    25b8:	98 81       	ld	r25, Y
    25ba:	c5 58       	subi	r28, 0x85	; 133
    25bc:	d3 40       	sbci	r29, 0x03	; 3
    25be:	ca 57       	subi	r28, 0x7A	; 122
    25c0:	dc 4f       	sbci	r29, 0xFC	; 252
    25c2:	28 81       	ld	r18, Y
    25c4:	c6 58       	subi	r28, 0x86	; 134
    25c6:	d3 40       	sbci	r29, 0x03	; 3
    25c8:	c9 57       	subi	r28, 0x79	; 121
    25ca:	dc 4f       	sbci	r29, 0xFC	; 252
    25cc:	38 81       	ld	r19, Y
    25ce:	c7 58       	subi	r28, 0x87	; 135
    25d0:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    25d2:	1f 93       	push	r17
    25d4:	0f 93       	push	r16
    25d6:	cd 56       	subi	r28, 0x6D	; 109
    25d8:	dc 4f       	sbci	r29, 0xFC	; 252
    25da:	c8 80       	ld	r12, Y
    25dc:	c3 59       	subi	r28, 0x93	; 147
    25de:	d3 40       	sbci	r29, 0x03	; 3
    25e0:	cf 92       	push	r12
    25e2:	ce 56       	subi	r28, 0x6E	; 110
    25e4:	dc 4f       	sbci	r29, 0xFC	; 252
    25e6:	c8 80       	ld	r12, Y
    25e8:	c2 59       	subi	r28, 0x92	; 146
    25ea:	d3 40       	sbci	r29, 0x03	; 3
    25ec:	cf 92       	push	r12
    25ee:	cf 56       	subi	r28, 0x6F	; 111
    25f0:	dc 4f       	sbci	r29, 0xFC	; 252
    25f2:	c8 80       	ld	r12, Y
    25f4:	c1 59       	subi	r28, 0x91	; 145
    25f6:	d3 40       	sbci	r29, 0x03	; 3
    25f8:	cf 92       	push	r12
    25fa:	c0 57       	subi	r28, 0x70	; 112
    25fc:	dc 4f       	sbci	r29, 0xFC	; 252
    25fe:	c8 80       	ld	r12, Y
    2600:	c0 59       	subi	r28, 0x90	; 144
    2602:	d3 40       	sbci	r29, 0x03	; 3
    2604:	cf 92       	push	r12
    2606:	bf 93       	push	r27
    2608:	af 93       	push	r26
    260a:	ff 93       	push	r31
    260c:	ef 93       	push	r30
    260e:	7f 93       	push	r23
    2610:	6f 93       	push	r22
    2612:	5f 93       	push	r21
    2614:	4f 93       	push	r20
    2616:	3f 93       	push	r19
    2618:	2f 93       	push	r18
    261a:	9f 93       	push	r25
    261c:	8f 93       	push	r24
    261e:	1f 92       	push	r1
    2620:	df 92       	push	r13
    2622:	bf 92       	push	r11
    2624:	af 92       	push	r10
    2626:	ce 01       	movw	r24, r28
    2628:	8d 5f       	subi	r24, 0xFD	; 253
    262a:	9d 4f       	sbci	r25, 0xFD	; 253
    262c:	9f 93       	push	r25
    262e:	8f 93       	push	r24
    2630:	ff 92       	push	r15
    2632:	ef 92       	push	r14
    2634:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    2638:	c7 01       	movw	r24, r14
    263a:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    263e:	1f 93       	push	r17
    2640:	0f 93       	push	r16
    2642:	cd 55       	subi	r28, 0x5D	; 93
    2644:	dc 4f       	sbci	r29, 0xFC	; 252
    2646:	88 81       	ld	r24, Y
    2648:	c3 5a       	subi	r28, 0xA3	; 163
    264a:	d3 40       	sbci	r29, 0x03	; 3
    264c:	8f 93       	push	r24
    264e:	ce 55       	subi	r28, 0x5E	; 94
    2650:	dc 4f       	sbci	r29, 0xFC	; 252
    2652:	88 81       	ld	r24, Y
    2654:	c2 5a       	subi	r28, 0xA2	; 162
    2656:	d3 40       	sbci	r29, 0x03	; 3
    2658:	8f 93       	push	r24
    265a:	cf 55       	subi	r28, 0x5F	; 95
    265c:	dc 4f       	sbci	r29, 0xFC	; 252
    265e:	88 81       	ld	r24, Y
    2660:	c1 5a       	subi	r28, 0xA1	; 161
    2662:	d3 40       	sbci	r29, 0x03	; 3
    2664:	8f 93       	push	r24
    2666:	c0 56       	subi	r28, 0x60	; 96
    2668:	dc 4f       	sbci	r29, 0xFC	; 252
    266a:	88 81       	ld	r24, Y
    266c:	c0 5a       	subi	r28, 0xA0	; 160
    266e:	d3 40       	sbci	r29, 0x03	; 3
    2670:	8f 93       	push	r24
    2672:	c1 56       	subi	r28, 0x61	; 97
    2674:	dc 4f       	sbci	r29, 0xFC	; 252
    2676:	88 81       	ld	r24, Y
    2678:	cf 59       	subi	r28, 0x9F	; 159
    267a:	d3 40       	sbci	r29, 0x03	; 3
    267c:	8f 93       	push	r24
    267e:	c2 56       	subi	r28, 0x62	; 98
    2680:	dc 4f       	sbci	r29, 0xFC	; 252
    2682:	88 81       	ld	r24, Y
    2684:	ce 59       	subi	r28, 0x9E	; 158
    2686:	d3 40       	sbci	r29, 0x03	; 3
    2688:	8f 93       	push	r24
    268a:	c3 56       	subi	r28, 0x63	; 99
    268c:	dc 4f       	sbci	r29, 0xFC	; 252
    268e:	88 81       	ld	r24, Y
    2690:	cd 59       	subi	r28, 0x9D	; 157
    2692:	d3 40       	sbci	r29, 0x03	; 3
    2694:	8f 93       	push	r24
    2696:	c4 56       	subi	r28, 0x64	; 100
    2698:	dc 4f       	sbci	r29, 0xFC	; 252
    269a:	88 81       	ld	r24, Y
    269c:	cc 59       	subi	r28, 0x9C	; 156
    269e:	d3 40       	sbci	r29, 0x03	; 3
    26a0:	8f 93       	push	r24
    26a2:	c5 56       	subi	r28, 0x65	; 101
    26a4:	dc 4f       	sbci	r29, 0xFC	; 252
    26a6:	88 81       	ld	r24, Y
    26a8:	cb 59       	subi	r28, 0x9B	; 155
    26aa:	d3 40       	sbci	r29, 0x03	; 3
    26ac:	8f 93       	push	r24
    26ae:	c6 56       	subi	r28, 0x66	; 102
    26b0:	dc 4f       	sbci	r29, 0xFC	; 252
    26b2:	88 81       	ld	r24, Y
    26b4:	ca 59       	subi	r28, 0x9A	; 154
    26b6:	d3 40       	sbci	r29, 0x03	; 3
    26b8:	8f 93       	push	r24
    26ba:	c7 56       	subi	r28, 0x67	; 103
    26bc:	dc 4f       	sbci	r29, 0xFC	; 252
    26be:	88 81       	ld	r24, Y
    26c0:	c9 59       	subi	r28, 0x99	; 153
    26c2:	d3 40       	sbci	r29, 0x03	; 3
    26c4:	8f 93       	push	r24
    26c6:	c8 56       	subi	r28, 0x68	; 104
    26c8:	dc 4f       	sbci	r29, 0xFC	; 252
    26ca:	88 81       	ld	r24, Y
    26cc:	c8 59       	subi	r28, 0x98	; 152
    26ce:	d3 40       	sbci	r29, 0x03	; 3
    26d0:	8f 93       	push	r24
    26d2:	c9 56       	subi	r28, 0x69	; 105
    26d4:	dc 4f       	sbci	r29, 0xFC	; 252
    26d6:	88 81       	ld	r24, Y
    26d8:	c7 59       	subi	r28, 0x97	; 151
    26da:	d3 40       	sbci	r29, 0x03	; 3
    26dc:	8f 93       	push	r24
    26de:	ca 56       	subi	r28, 0x6A	; 106
    26e0:	dc 4f       	sbci	r29, 0xFC	; 252
    26e2:	88 81       	ld	r24, Y
    26e4:	c6 59       	subi	r28, 0x96	; 150
    26e6:	d3 40       	sbci	r29, 0x03	; 3
    26e8:	8f 93       	push	r24
    26ea:	cb 56       	subi	r28, 0x6B	; 107
    26ec:	dc 4f       	sbci	r29, 0xFC	; 252
    26ee:	88 81       	ld	r24, Y
    26f0:	c5 59       	subi	r28, 0x95	; 149
    26f2:	d3 40       	sbci	r29, 0x03	; 3
    26f4:	8f 93       	push	r24
    26f6:	cc 56       	subi	r28, 0x6C	; 108
    26f8:	dc 4f       	sbci	r29, 0xFC	; 252
    26fa:	88 81       	ld	r24, Y
    26fc:	c4 59       	subi	r28, 0x94	; 148
    26fe:	d3 40       	sbci	r29, 0x03	; 3
    2700:	8f 93       	push	r24
    2702:	1f 92       	push	r1
    2704:	df 92       	push	r13
    2706:	bf 92       	push	r11
    2708:	af 92       	push	r10
    270a:	ce 01       	movw	r24, r28
    270c:	8d 5c       	subi	r24, 0xCD	; 205
    270e:	9d 4f       	sbci	r25, 0xFD	; 253
    2710:	9f 93       	push	r25
    2712:	8f 93       	push	r24
    2714:	ff 92       	push	r15
    2716:	ef 92       	push	r14
    2718:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	c7 01       	movw	r24, r14
    2722:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2726:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    2728:	66 c4       	rjmp	.+2252   	; 0x2ff6 <report+0xe46>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    272a:	ce 01       	movw	r24, r28
    272c:	86 5f       	subi	r24, 0xF6	; 246
    272e:	9e 4f       	sbci	r25, 0xFE	; 254
    2730:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			controller = pcmd[cstack].cobject + 31;
    2734:	84 e3       	ldi	r24, 0x34	; 52
    2736:	80 9f       	mul	r24, r16
    2738:	f0 01       	movw	r30, r0
    273a:	81 9f       	mul	r24, r17
    273c:	f0 0d       	add	r31, r0
    273e:	11 24       	eor	r1, r1
    2740:	e1 5f       	subi	r30, 0xF1	; 241
    2742:	f7 4d       	sbci	r31, 0xD7	; 215
    2744:	81 81       	ldd	r24, Z+1	; 0x01
    2746:	0f 2e       	mov	r0, r31
    2748:	ff e1       	ldi	r31, 0x1F	; 31
    274a:	ef 2e       	mov	r14, r31
    274c:	f0 2d       	mov	r31, r0
    274e:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2750:	be 01       	movw	r22, r28
    2752:	6e 59       	subi	r22, 0x9E	; 158
    2754:	7c 4f       	sbci	r23, 0xFC	; 252
    2756:	8e 2d       	mov	r24, r14
    2758:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <get_MOTOR_ENCODER>
    275c:	f8 2e       	mov	r15, r24
    275e:	93 e6       	ldi	r25, 0x63	; 99
    2760:	89 13       	cpse	r24, r25
    2762:	07 c0       	rjmp	.+14     	; 0x2772 <report+0x5c2>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    2764:	6c e8       	ldi	r22, 0x8C	; 140
    2766:	7a ea       	ldi	r23, 0xAA	; 170
    2768:	86 e3       	ldi	r24, 0x36	; 54
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    2770:	42 c4       	rjmp	.+2180   	; 0x2ff6 <report+0xe46>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    2772:	ce 59       	subi	r28, 0x9E	; 158
    2774:	dc 4f       	sbci	r29, 0xFC	; 252
    2776:	68 81       	ld	r22, Y
    2778:	79 81       	ldd	r23, Y+1	; 0x01
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	c2 56       	subi	r28, 0x62	; 98
    2780:	d3 40       	sbci	r29, 0x03	; 3
    2782:	2b e1       	ldi	r18, 0x1B	; 27
    2784:	31 e0       	ldi	r19, 0x01	; 1
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	0e 94 ab 30 	call	0x6156	; 0x6156 <__divmodsi4>
    278e:	d2 2e       	mov	r13, r18
    2790:	c3 2e       	mov	r12, r19
    2792:	b4 2e       	mov	r11, r20
    2794:	a5 2e       	mov	r10, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2796:	be 01       	movw	r22, r28
    2798:	6a 59       	subi	r22, 0x9A	; 154
    279a:	7c 4f       	sbci	r23, 0xFC	; 252
    279c:	8e 2d       	mov	r24, r14
    279e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <get_MOTOR_SPEED>
    27a2:	83 36       	cpi	r24, 0x63	; 99
    27a4:	61 f4       	brne	.+24     	; 0x27be <report+0x60e>
				encoderSpeed = 0x7FFFFFFF;
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	9f ef       	ldi	r25, 0xFF	; 255
    27aa:	af ef       	ldi	r26, 0xFF	; 255
    27ac:	bf e7       	ldi	r27, 0x7F	; 127
    27ae:	ca 59       	subi	r28, 0x9A	; 154
    27b0:	dc 4f       	sbci	r29, 0xFC	; 252
    27b2:	88 83       	st	Y, r24
    27b4:	99 83       	std	Y+1, r25	; 0x01
    27b6:	aa 83       	std	Y+2, r26	; 0x02
    27b8:	bb 83       	std	Y+3, r27	; 0x03
    27ba:	c6 56       	subi	r28, 0x66	; 102
    27bc:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    27be:	ca 59       	subi	r28, 0x9A	; 154
    27c0:	dc 4f       	sbci	r29, 0xFC	; 252
    27c2:	68 81       	ld	r22, Y
    27c4:	79 81       	ldd	r23, Y+1	; 0x01
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	c6 56       	subi	r28, 0x66	; 102
    27cc:	d3 40       	sbci	r29, 0x03	; 3
    27ce:	2b e1       	ldi	r18, 0x1B	; 27
    27d0:	31 e0       	ldi	r19, 0x01	; 1
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	0e 94 ab 30 	call	0x6156	; 0x6156 <__divmodsi4>
    27da:	92 2e       	mov	r9, r18
    27dc:	83 2e       	mov	r8, r19
    27de:	74 2e       	mov	r7, r20
    27e0:	65 2e       	mov	r6, r21
			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    27e2:	be 01       	movw	r22, r28
    27e4:	6a 58       	subi	r22, 0x8A	; 138
    27e6:	7c 4f       	sbci	r23, 0xFC	; 252
    27e8:	8e 2d       	mov	r24, r14
    27ea:	0e 94 0b 1a 	call	0x3416	; 0x3416 <get_MOTOR_CURRENT>
    27ee:	83 36       	cpi	r24, 0x63	; 99
    27f0:	71 f4       	brne	.+28     	; 0x280e <report+0x65e>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    27f2:	6c ea       	ldi	r22, 0xAC	; 172
    27f4:	7a ea       	ldi	r23, 0xAA	; 170
    27f6:	86 e3       	ldi	r24, 0x36	; 54
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				motorCurrent = 0xFFFF;
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	9f ef       	ldi	r25, 0xFF	; 255
    2802:	ca 58       	subi	r28, 0x8A	; 138
    2804:	dc 4f       	sbci	r29, 0xFC	; 252
    2806:	88 83       	st	Y, r24
    2808:	99 83       	std	Y+1, r25	; 0x01
    280a:	c6 57       	subi	r28, 0x76	; 118
    280c:	d3 40       	sbci	r29, 0x03	; 3
			}

			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    280e:	f1 2c       	mov	r15, r1
    2810:	80 e8       	ldi	r24, 0x80	; 128
    2812:	e8 1a       	sub	r14, r24
    2814:	f1 08       	sbc	r15, r1
    2816:	f7 01       	movw	r30, r14
    2818:	e3 5c       	subi	r30, 0xC3	; 195
    281a:	f5 4d       	sbci	r31, 0xD5	; 213
    281c:	80 81       	ld	r24, Z
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	39 f0       	breq	.+14     	; 0x2830 <report+0x680>
				mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    2822:	81 11       	cpse	r24, r1
    2824:	0a c0       	rjmp	.+20     	; 0x283a <report+0x68a>
				mdir = 'R';
    2826:	0f 2e       	mov	r0, r31
    2828:	f2 e5       	ldi	r31, 0x52	; 82
    282a:	5f 2e       	mov	r5, r31
    282c:	f0 2d       	mov	r31, r0
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <report+0x692>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}

			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
				mdir = 'F';
    2830:	0f 2e       	mov	r0, r31
    2832:	f6 e4       	ldi	r31, 0x46	; 70
    2834:	5f 2e       	mov	r5, r31
    2836:	f0 2d       	mov	r31, r0
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <report+0x692>
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
				} else {
				mdir = '?';
    283a:	0f 2e       	mov	r0, r31
    283c:	ff e3       	ldi	r31, 0x3F	; 63
    283e:	5f 2e       	mov	r5, r31
    2840:	f0 2d       	mov	r31, r0
			}

			mlimit = '?';
			if (get_MOTOR_LIMITS() == ERROR) {
    2842:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <get_MOTOR_LIMITS>
    2846:	83 36       	cpi	r24, 0x63	; 99
    2848:	41 f4       	brne	.+16     	; 0x285a <report+0x6aa>
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    284a:	6c ec       	ldi	r22, 0xCC	; 204
    284c:	7a ea       	ldi	r23, 0xAA	; 170
    284e:	86 e3       	ldi	r24, 0x36	; 54
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				mdir = 'R';
				} else {
				mdir = '?';
			}

			mlimit = '?';
    2856:	4f e3       	ldi	r20, 0x3F	; 63
    2858:	09 c0       	rjmp	.+18     	; 0x286c <report+0x6bc>
			if (get_MOTOR_LIMITS() == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
			} else {
				if (motorLim[controller - MOTOR_A] == MTRLIMYES) {
    285a:	f7 01       	movw	r30, r14
    285c:	e0 5c       	subi	r30, 0xC0	; 192
    285e:	f5 4d       	sbci	r31, 0xD5	; 213
    2860:	80 81       	ld	r24, Z
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	11 f4       	brne	.+4      	; 0x286a <report+0x6ba>
					mlimit = 'Y';
    2866:	49 e5       	ldi	r20, 0x59	; 89
    2868:	01 c0       	rjmp	.+2      	; 0x286c <report+0x6bc>
				mdir = 'R';
				} else {
				mdir = '?';
			}

			mlimit = '?';
    286a:	4f e3       	ldi	r20, 0x3F	; 63
				} else if (motorLim[controller - MOTOR_A] == MTRLIMNO) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    286c:	24 e3       	ldi	r18, 0x34	; 52
    286e:	20 9f       	mul	r18, r16
    2870:	c0 01       	movw	r24, r0
    2872:	21 9f       	mul	r18, r17
    2874:	90 0d       	add	r25, r0
    2876:	11 24       	eor	r1, r1
    2878:	9c 01       	movw	r18, r24
    287a:	26 5c       	subi	r18, 0xC6	; 198
    287c:	37 4d       	sbci	r19, 0xD7	; 215
					mlimit = 'Y';
				} else if (motorLim[controller - MOTOR_A] == MTRLIMNO) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    287e:	fc 01       	movw	r30, r24
    2880:	e1 5f       	subi	r30, 0xF1	; 241
    2882:	f7 4d       	sbci	r31, 0xD7	; 215
    2884:	81 81       	ldd	r24, Z+1	; 0x01
    2886:	3f 93       	push	r19
    2888:	2f 93       	push	r18
    288a:	1f 92       	push	r1
    288c:	4f 93       	push	r20
    288e:	1f 92       	push	r1
    2890:	5f 92       	push	r5
    2892:	c9 58       	subi	r28, 0x89	; 137
    2894:	dc 4f       	sbci	r29, 0xFC	; 252
    2896:	98 81       	ld	r25, Y
    2898:	c7 57       	subi	r28, 0x77	; 119
    289a:	d3 40       	sbci	r29, 0x03	; 3
    289c:	9f 93       	push	r25
    289e:	ca 58       	subi	r28, 0x8A	; 138
    28a0:	dc 4f       	sbci	r29, 0xFC	; 252
    28a2:	98 81       	ld	r25, Y
    28a4:	c6 57       	subi	r28, 0x76	; 118
    28a6:	d3 40       	sbci	r29, 0x03	; 3
    28a8:	9f 93       	push	r25
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	8f 92       	push	r8
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	1f 92       	push	r1
    28bc:	8f 93       	push	r24
    28be:	ce 01       	movw	r24, r28
    28c0:	86 5f       	subi	r24, 0xF6	; 246
    28c2:	9e 4f       	sbci	r25, 0xFE	; 254
    28c4:	9f 93       	push	r25
    28c6:	8f 93       	push	r24
    28c8:	87 56       	subi	r24, 0x67	; 103
    28ca:	9f 4f       	sbci	r25, 0xFF	; 255
    28cc:	9f 93       	push	r25
    28ce:	8f 93       	push	r24
    28d0:	8e 01       	movw	r16, r28
    28d2:	0f 5f       	subi	r16, 0xFF	; 255
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	1f 93       	push	r17
    28d8:	0f 93       	push	r16
    28da:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
    28de:	c8 01       	movw	r24, r16
    28e0:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			break;
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    28e8:	f1 2c       	mov	r15, r1
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    28ea:	85 c3       	rjmp	.+1802   	; 0x2ff6 <report+0xe46>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    28f2:	c2 59       	subi	r28, 0x92	; 146
    28f4:	dc 4f       	sbci	r29, 0xFC	; 252
    28f6:	68 83       	st	Y, r22
    28f8:	79 83       	std	Y+1, r23	; 0x01
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	ce 56       	subi	r28, 0x6E	; 110
    2900:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	0e 94 4d 09 	call	0x129a	; 0x129a <get_humidity>
    2908:	d6 2e       	mov	r13, r22
    290a:	c7 2e       	mov	r12, r23
    290c:	b8 2e       	mov	r11, r24
    290e:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    2916:	cc 55       	subi	r28, 0x5C	; 92
    2918:	dc 4f       	sbci	r29, 0xFC	; 252
    291a:	68 83       	st	Y, r22
    291c:	c4 5a       	subi	r28, 0xA4	; 164
    291e:	d3 40       	sbci	r29, 0x03	; 3
    2920:	cb 55       	subi	r28, 0x5B	; 91
    2922:	dc 4f       	sbci	r29, 0xFC	; 252
    2924:	78 83       	st	Y, r23
    2926:	c5 5a       	subi	r28, 0xA5	; 165
    2928:	d3 40       	sbci	r29, 0x03	; 3
    292a:	ca 55       	subi	r28, 0x5A	; 90
    292c:	dc 4f       	sbci	r29, 0xFC	; 252
    292e:	88 83       	st	Y, r24
    2930:	c6 5a       	subi	r28, 0xA6	; 166
    2932:	d3 40       	sbci	r29, 0x03	; 3
    2934:	c9 55       	subi	r28, 0x59	; 89
    2936:	dc 4f       	sbci	r29, 0xFC	; 252
    2938:	98 83       	st	Y, r25
    293a:	c7 5a       	subi	r28, 0xA7	; 167
    293c:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	0e 94 4d 09 	call	0x129a	; 0x129a <get_humidity>
    2944:	c8 55       	subi	r28, 0x58	; 88
    2946:	dc 4f       	sbci	r29, 0xFC	; 252
    2948:	68 83       	st	Y, r22
    294a:	c8 5a       	subi	r28, 0xA8	; 168
    294c:	d3 40       	sbci	r29, 0x03	; 3
    294e:	c7 55       	subi	r28, 0x57	; 87
    2950:	dc 4f       	sbci	r29, 0xFC	; 252
    2952:	78 83       	st	Y, r23
    2954:	c9 5a       	subi	r28, 0xA9	; 169
    2956:	d3 40       	sbci	r29, 0x03	; 3
    2958:	c6 55       	subi	r28, 0x56	; 86
    295a:	dc 4f       	sbci	r29, 0xFC	; 252
    295c:	88 83       	st	Y, r24
    295e:	ca 5a       	subi	r28, 0xAA	; 170
    2960:	d3 40       	sbci	r29, 0x03	; 3
    2962:	c5 55       	subi	r28, 0x55	; 85
    2964:	dc 4f       	sbci	r29, 0xFC	; 252
    2966:	98 83       	st	Y, r25
    2968:	cb 5a       	subi	r28, 0xAB	; 171
    296a:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    2972:	c4 55       	subi	r28, 0x54	; 84
    2974:	dc 4f       	sbci	r29, 0xFC	; 252
    2976:	68 83       	st	Y, r22
    2978:	cc 5a       	subi	r28, 0xAC	; 172
    297a:	d3 40       	sbci	r29, 0x03	; 3
    297c:	c3 55       	subi	r28, 0x53	; 83
    297e:	dc 4f       	sbci	r29, 0xFC	; 252
    2980:	78 83       	st	Y, r23
    2982:	cd 5a       	subi	r28, 0xAD	; 173
    2984:	d3 40       	sbci	r29, 0x03	; 3
    2986:	98 2e       	mov	r9, r24
    2988:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	0e 94 4d 09 	call	0x129a	; 0x129a <get_humidity>
    2990:	76 2e       	mov	r7, r22
    2992:	67 2e       	mov	r6, r23
    2994:	58 2e       	mov	r5, r24
    2996:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <get_temperature>
    299e:	c2 55       	subi	r28, 0x52	; 82
    29a0:	dc 4f       	sbci	r29, 0xFC	; 252
    29a2:	68 83       	st	Y, r22
    29a4:	ce 5a       	subi	r28, 0xAE	; 174
    29a6:	d3 40       	sbci	r29, 0x03	; 3
    29a8:	c1 55       	subi	r28, 0x51	; 81
    29aa:	dc 4f       	sbci	r29, 0xFC	; 252
    29ac:	78 83       	st	Y, r23
    29ae:	cf 5a       	subi	r28, 0xAF	; 175
    29b0:	d3 40       	sbci	r29, 0x03	; 3
    29b2:	38 2e       	mov	r3, r24
    29b4:	29 2e       	mov	r2, r25
			get_time(currenttime);
    29b6:	7e 01       	movw	r14, r28
    29b8:	96 ef       	ldi	r25, 0xF6	; 246
    29ba:	e9 1a       	sub	r14, r25
    29bc:	9e ef       	ldi	r25, 0xFE	; 254
    29be:	f9 0a       	sbc	r15, r25
    29c0:	c7 01       	movw	r24, r14
    29c2:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    29c6:	24 e3       	ldi	r18, 0x34	; 52
    29c8:	20 9f       	mul	r18, r16
    29ca:	c0 01       	movw	r24, r0
    29cc:	21 9f       	mul	r18, r17
    29ce:	90 0d       	add	r25, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	86 5c       	subi	r24, 0xC6	; 198
    29d4:	97 4d       	sbci	r25, 0xD7	; 215
    29d6:	9f 93       	push	r25
    29d8:	8f 93       	push	r24
    29da:	2f 92       	push	r2
    29dc:	3f 92       	push	r3
    29de:	c1 55       	subi	r28, 0x51	; 81
    29e0:	dc 4f       	sbci	r29, 0xFC	; 252
    29e2:	88 81       	ld	r24, Y
    29e4:	cf 5a       	subi	r28, 0xAF	; 175
    29e6:	d3 40       	sbci	r29, 0x03	; 3
    29e8:	8f 93       	push	r24
    29ea:	c2 55       	subi	r28, 0x52	; 82
    29ec:	dc 4f       	sbci	r29, 0xFC	; 252
    29ee:	98 81       	ld	r25, Y
    29f0:	ce 5a       	subi	r28, 0xAE	; 174
    29f2:	d3 40       	sbci	r29, 0x03	; 3
    29f4:	9f 93       	push	r25
    29f6:	4f 92       	push	r4
    29f8:	5f 92       	push	r5
    29fa:	6f 92       	push	r6
    29fc:	7f 92       	push	r7
    29fe:	8f 92       	push	r8
    2a00:	9f 92       	push	r9
    2a02:	c3 55       	subi	r28, 0x53	; 83
    2a04:	dc 4f       	sbci	r29, 0xFC	; 252
    2a06:	88 81       	ld	r24, Y
    2a08:	cd 5a       	subi	r28, 0xAD	; 173
    2a0a:	d3 40       	sbci	r29, 0x03	; 3
    2a0c:	8f 93       	push	r24
    2a0e:	c4 55       	subi	r28, 0x54	; 84
    2a10:	dc 4f       	sbci	r29, 0xFC	; 252
    2a12:	98 81       	ld	r25, Y
    2a14:	cc 5a       	subi	r28, 0xAC	; 172
    2a16:	d3 40       	sbci	r29, 0x03	; 3
    2a18:	9f 93       	push	r25
    2a1a:	c5 55       	subi	r28, 0x55	; 85
    2a1c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a1e:	88 81       	ld	r24, Y
    2a20:	cb 5a       	subi	r28, 0xAB	; 171
    2a22:	d3 40       	sbci	r29, 0x03	; 3
    2a24:	8f 93       	push	r24
    2a26:	c6 55       	subi	r28, 0x56	; 86
    2a28:	dc 4f       	sbci	r29, 0xFC	; 252
    2a2a:	98 81       	ld	r25, Y
    2a2c:	ca 5a       	subi	r28, 0xAA	; 170
    2a2e:	d3 40       	sbci	r29, 0x03	; 3
    2a30:	9f 93       	push	r25
    2a32:	c7 55       	subi	r28, 0x57	; 87
    2a34:	dc 4f       	sbci	r29, 0xFC	; 252
    2a36:	88 81       	ld	r24, Y
    2a38:	c9 5a       	subi	r28, 0xA9	; 169
    2a3a:	d3 40       	sbci	r29, 0x03	; 3
    2a3c:	8f 93       	push	r24
    2a3e:	c8 55       	subi	r28, 0x58	; 88
    2a40:	dc 4f       	sbci	r29, 0xFC	; 252
    2a42:	98 81       	ld	r25, Y
    2a44:	c8 5a       	subi	r28, 0xA8	; 168
    2a46:	d3 40       	sbci	r29, 0x03	; 3
    2a48:	9f 93       	push	r25
    2a4a:	c9 55       	subi	r28, 0x59	; 89
    2a4c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a4e:	88 81       	ld	r24, Y
    2a50:	c7 5a       	subi	r28, 0xA7	; 167
    2a52:	d3 40       	sbci	r29, 0x03	; 3
    2a54:	8f 93       	push	r24
    2a56:	ca 55       	subi	r28, 0x5A	; 90
    2a58:	dc 4f       	sbci	r29, 0xFC	; 252
    2a5a:	98 81       	ld	r25, Y
    2a5c:	c6 5a       	subi	r28, 0xA6	; 166
    2a5e:	d3 40       	sbci	r29, 0x03	; 3
    2a60:	9f 93       	push	r25
    2a62:	cb 55       	subi	r28, 0x5B	; 91
    2a64:	dc 4f       	sbci	r29, 0xFC	; 252
    2a66:	88 81       	ld	r24, Y
    2a68:	c5 5a       	subi	r28, 0xA5	; 165
    2a6a:	d3 40       	sbci	r29, 0x03	; 3
    2a6c:	8f 93       	push	r24
    2a6e:	cc 55       	subi	r28, 0x5C	; 92
    2a70:	dc 4f       	sbci	r29, 0xFC	; 252
    2a72:	98 81       	ld	r25, Y
    2a74:	c4 5a       	subi	r28, 0xA4	; 164
    2a76:	d3 40       	sbci	r29, 0x03	; 3
    2a78:	9f 93       	push	r25
    2a7a:	af 92       	push	r10
    2a7c:	bf 92       	push	r11
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	cf 58       	subi	r28, 0x8F	; 143
    2a84:	dc 4f       	sbci	r29, 0xFC	; 252
    2a86:	88 81       	ld	r24, Y
    2a88:	c1 57       	subi	r28, 0x71	; 113
    2a8a:	d3 40       	sbci	r29, 0x03	; 3
    2a8c:	8f 93       	push	r24
    2a8e:	c0 59       	subi	r28, 0x90	; 144
    2a90:	dc 4f       	sbci	r29, 0xFC	; 252
    2a92:	88 81       	ld	r24, Y
    2a94:	c0 57       	subi	r28, 0x70	; 112
    2a96:	d3 40       	sbci	r29, 0x03	; 3
    2a98:	8f 93       	push	r24
    2a9a:	c1 59       	subi	r28, 0x91	; 145
    2a9c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a9e:	88 81       	ld	r24, Y
    2aa0:	cf 56       	subi	r28, 0x6F	; 111
    2aa2:	d3 40       	sbci	r29, 0x03	; 3
    2aa4:	8f 93       	push	r24
    2aa6:	c2 59       	subi	r28, 0x92	; 146
    2aa8:	dc 4f       	sbci	r29, 0xFC	; 252
    2aaa:	88 81       	ld	r24, Y
    2aac:	ce 56       	subi	r28, 0x6E	; 110
    2aae:	d3 40       	sbci	r29, 0x03	; 3
    2ab0:	8f 93       	push	r24
    2ab2:	ff 92       	push	r15
    2ab4:	ef 92       	push	r14
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	82 5a       	subi	r24, 0xA2	; 162
    2aba:	9e 4f       	sbci	r25, 0xFE	; 254
    2abc:	9f 93       	push	r25
    2abe:	8f 93       	push	r24
    2ac0:	8e 01       	movw	r16, r28
    2ac2:	0f 5f       	subi	r16, 0xFF	; 255
    2ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac6:	1f 93       	push	r17
    2ac8:	0f 93       	push	r16
    2aca:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printLine(outbuf);
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2ad8:	41 e0       	ldi	r20, 0x01	; 1
    2ada:	6b ee       	ldi	r22, 0xEB	; 235
    2adc:	7a ea       	ldi	r23, 0xAA	; 170
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2ae4:	c2 59       	subi	r28, 0x92	; 146
    2ae6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ae8:	f8 80       	ld	r15, Y
    2aea:	ce 56       	subi	r28, 0x6E	; 110
    2aec:	d3 40       	sbci	r29, 0x03	; 3
    2aee:	c1 59       	subi	r28, 0x91	; 145
    2af0:	dc 4f       	sbci	r29, 0xFC	; 252
    2af2:	e8 80       	ld	r14, Y
    2af4:	cf 56       	subi	r28, 0x6F	; 111
    2af6:	d3 40       	sbci	r29, 0x03	; 3
    2af8:	c0 59       	subi	r28, 0x90	; 144
    2afa:	dc 4f       	sbci	r29, 0xFC	; 252
    2afc:	98 80       	ld	r9, Y
    2afe:	c0 57       	subi	r28, 0x70	; 112
    2b00:	d3 40       	sbci	r29, 0x03	; 3
    2b02:	cf 58       	subi	r28, 0x8F	; 143
    2b04:	dc 4f       	sbci	r29, 0xFC	; 252
    2b06:	88 80       	ld	r8, Y
    2b08:	c1 57       	subi	r28, 0x71	; 113
    2b0a:	d3 40       	sbci	r29, 0x03	; 3
    2b0c:	26 e6       	ldi	r18, 0x66	; 102
    2b0e:	36 e6       	ldi	r19, 0x66	; 102
    2b10:	46 ee       	ldi	r20, 0xE6	; 230
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	6f 2d       	mov	r22, r15
    2b16:	7e 2d       	mov	r23, r14
    2b18:	89 2d       	mov	r24, r9
    2b1a:	98 2d       	mov	r25, r8
    2b1c:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    2b20:	af 92       	push	r10
    2b22:	bf 92       	push	r11
    2b24:	cf 92       	push	r12
    2b26:	df 92       	push	r13
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	52 e4       	ldi	r21, 0x42	; 66
    2b30:	0e 94 13 2b 	call	0x5626	; 0x5626 <__addsf3>
    2b34:	9f 93       	push	r25
    2b36:	8f 93       	push	r24
    2b38:	7f 93       	push	r23
    2b3a:	6f 93       	push	r22
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	8b ef       	ldi	r24, 0xFB	; 251
    2b46:	9a ea       	ldi	r25, 0xAA	; 170
    2b48:	9f 93       	push	r25
    2b4a:	8f 93       	push	r24
    2b4c:	1f 93       	push	r17
    2b4e:	0f 93       	push	r16
    2b50:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			writestr_OLED(1, outbuf, 2);
    2b54:	42 e0       	ldi	r20, 0x02	; 2
    2b56:	b8 01       	movw	r22, r16
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			break;
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b62:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2b64:	48 c2       	rjmp	.+1168   	; 0x2ff6 <report+0xe46>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2b66:	ae 01       	movw	r20, r28
    2b68:	40 58       	subi	r20, 0x80	; 128
    2b6a:	5c 4f       	sbci	r21, 0xFC	; 252
    2b6c:	be 01       	movw	r22, r28
    2b6e:	64 58       	subi	r22, 0x84	; 132
    2b70:	7c 4f       	sbci	r23, 0xFC	; 252
    2b72:	ce 01       	movw	r24, r28
    2b74:	88 58       	subi	r24, 0x88	; 136
    2b76:	9c 4f       	sbci	r25, 0xFC	; 252
    2b78:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_orientation>
			get_time(currenttime);
    2b7c:	7e 01       	movw	r14, r28
    2b7e:	96 ef       	ldi	r25, 0xF6	; 246
    2b80:	e9 1a       	sub	r14, r25
    2b82:	9e ef       	ldi	r25, 0xFE	; 254
    2b84:	f9 0a       	sbc	r15, r25
    2b86:	c7 01       	movw	r24, r14
    2b88:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2b8c:	24 e3       	ldi	r18, 0x34	; 52
    2b8e:	20 9f       	mul	r18, r16
    2b90:	c0 01       	movw	r24, r0
    2b92:	21 9f       	mul	r18, r17
    2b94:	90 0d       	add	r25, r0
    2b96:	11 24       	eor	r1, r1
    2b98:	86 5c       	subi	r24, 0xC6	; 198
    2b9a:	97 4d       	sbci	r25, 0xD7	; 215
    2b9c:	9f 93       	push	r25
    2b9e:	8f 93       	push	r24
    2ba0:	cd 57       	subi	r28, 0x7D	; 125
    2ba2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ba4:	88 81       	ld	r24, Y
    2ba6:	c3 58       	subi	r28, 0x83	; 131
    2ba8:	d3 40       	sbci	r29, 0x03	; 3
    2baa:	8f 93       	push	r24
    2bac:	ce 57       	subi	r28, 0x7E	; 126
    2bae:	dc 4f       	sbci	r29, 0xFC	; 252
    2bb0:	88 81       	ld	r24, Y
    2bb2:	c2 58       	subi	r28, 0x82	; 130
    2bb4:	d3 40       	sbci	r29, 0x03	; 3
    2bb6:	8f 93       	push	r24
    2bb8:	cf 57       	subi	r28, 0x7F	; 127
    2bba:	dc 4f       	sbci	r29, 0xFC	; 252
    2bbc:	88 81       	ld	r24, Y
    2bbe:	c1 58       	subi	r28, 0x81	; 129
    2bc0:	d3 40       	sbci	r29, 0x03	; 3
    2bc2:	8f 93       	push	r24
    2bc4:	c0 58       	subi	r28, 0x80	; 128
    2bc6:	dc 4f       	sbci	r29, 0xFC	; 252
    2bc8:	88 81       	ld	r24, Y
    2bca:	c0 58       	subi	r28, 0x80	; 128
    2bcc:	d3 40       	sbci	r29, 0x03	; 3
    2bce:	8f 93       	push	r24
    2bd0:	c1 58       	subi	r28, 0x81	; 129
    2bd2:	dc 4f       	sbci	r29, 0xFC	; 252
    2bd4:	88 81       	ld	r24, Y
    2bd6:	cf 57       	subi	r28, 0x7F	; 127
    2bd8:	d3 40       	sbci	r29, 0x03	; 3
    2bda:	8f 93       	push	r24
    2bdc:	c2 58       	subi	r28, 0x82	; 130
    2bde:	dc 4f       	sbci	r29, 0xFC	; 252
    2be0:	88 81       	ld	r24, Y
    2be2:	ce 57       	subi	r28, 0x7E	; 126
    2be4:	d3 40       	sbci	r29, 0x03	; 3
    2be6:	8f 93       	push	r24
    2be8:	c3 58       	subi	r28, 0x83	; 131
    2bea:	dc 4f       	sbci	r29, 0xFC	; 252
    2bec:	88 81       	ld	r24, Y
    2bee:	cd 57       	subi	r28, 0x7D	; 125
    2bf0:	d3 40       	sbci	r29, 0x03	; 3
    2bf2:	8f 93       	push	r24
    2bf4:	c4 58       	subi	r28, 0x84	; 132
    2bf6:	dc 4f       	sbci	r29, 0xFC	; 252
    2bf8:	88 81       	ld	r24, Y
    2bfa:	cc 57       	subi	r28, 0x7C	; 124
    2bfc:	d3 40       	sbci	r29, 0x03	; 3
    2bfe:	8f 93       	push	r24
    2c00:	c5 58       	subi	r28, 0x85	; 133
    2c02:	dc 4f       	sbci	r29, 0xFC	; 252
    2c04:	88 81       	ld	r24, Y
    2c06:	cb 57       	subi	r28, 0x7B	; 123
    2c08:	d3 40       	sbci	r29, 0x03	; 3
    2c0a:	8f 93       	push	r24
    2c0c:	c6 58       	subi	r28, 0x86	; 134
    2c0e:	dc 4f       	sbci	r29, 0xFC	; 252
    2c10:	88 81       	ld	r24, Y
    2c12:	ca 57       	subi	r28, 0x7A	; 122
    2c14:	d3 40       	sbci	r29, 0x03	; 3
    2c16:	8f 93       	push	r24
    2c18:	c7 58       	subi	r28, 0x87	; 135
    2c1a:	dc 4f       	sbci	r29, 0xFC	; 252
    2c1c:	88 81       	ld	r24, Y
    2c1e:	c9 57       	subi	r28, 0x79	; 121
    2c20:	d3 40       	sbci	r29, 0x03	; 3
    2c22:	8f 93       	push	r24
    2c24:	c8 58       	subi	r28, 0x88	; 136
    2c26:	dc 4f       	sbci	r29, 0xFC	; 252
    2c28:	88 81       	ld	r24, Y
    2c2a:	c8 57       	subi	r28, 0x78	; 120
    2c2c:	d3 40       	sbci	r29, 0x03	; 3
    2c2e:	8f 93       	push	r24
    2c30:	ff 92       	push	r15
    2c32:	ef 92       	push	r14
    2c34:	ce 01       	movw	r24, r28
    2c36:	88 57       	subi	r24, 0x78	; 120
    2c38:	9d 4f       	sbci	r25, 0xFD	; 253
    2c3a:	9f 93       	push	r25
    2c3c:	8f 93       	push	r24
    2c3e:	8e 01       	movw	r16, r28
    2c40:	0f 5f       	subi	r16, 0xFF	; 255
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	1f 93       	push	r17
    2c46:	0f 93       	push	r16
    2c48:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printLine(outbuf);
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Orientation", 1);
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	61 e1       	ldi	r22, 0x11	; 17
    2c56:	7b ea       	ldi	r23, 0xAB	; 171
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2c5e:	cd 57       	subi	r28, 0x7D	; 125
    2c60:	dc 4f       	sbci	r29, 0xFC	; 252
    2c62:	88 81       	ld	r24, Y
    2c64:	c3 58       	subi	r28, 0x83	; 131
    2c66:	d3 40       	sbci	r29, 0x03	; 3
    2c68:	8f 93       	push	r24
    2c6a:	ce 57       	subi	r28, 0x7E	; 126
    2c6c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c6e:	88 81       	ld	r24, Y
    2c70:	c2 58       	subi	r28, 0x82	; 130
    2c72:	d3 40       	sbci	r29, 0x03	; 3
    2c74:	8f 93       	push	r24
    2c76:	cf 57       	subi	r28, 0x7F	; 127
    2c78:	dc 4f       	sbci	r29, 0xFC	; 252
    2c7a:	88 81       	ld	r24, Y
    2c7c:	c1 58       	subi	r28, 0x81	; 129
    2c7e:	d3 40       	sbci	r29, 0x03	; 3
    2c80:	8f 93       	push	r24
    2c82:	c0 58       	subi	r28, 0x80	; 128
    2c84:	dc 4f       	sbci	r29, 0xFC	; 252
    2c86:	88 81       	ld	r24, Y
    2c88:	c0 58       	subi	r28, 0x80	; 128
    2c8a:	d3 40       	sbci	r29, 0x03	; 3
    2c8c:	8f 93       	push	r24
    2c8e:	c1 58       	subi	r28, 0x81	; 129
    2c90:	dc 4f       	sbci	r29, 0xFC	; 252
    2c92:	88 81       	ld	r24, Y
    2c94:	cf 57       	subi	r28, 0x7F	; 127
    2c96:	d3 40       	sbci	r29, 0x03	; 3
    2c98:	8f 93       	push	r24
    2c9a:	c2 58       	subi	r28, 0x82	; 130
    2c9c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c9e:	88 81       	ld	r24, Y
    2ca0:	ce 57       	subi	r28, 0x7E	; 126
    2ca2:	d3 40       	sbci	r29, 0x03	; 3
    2ca4:	8f 93       	push	r24
    2ca6:	c3 58       	subi	r28, 0x83	; 131
    2ca8:	dc 4f       	sbci	r29, 0xFC	; 252
    2caa:	88 81       	ld	r24, Y
    2cac:	cd 57       	subi	r28, 0x7D	; 125
    2cae:	d3 40       	sbci	r29, 0x03	; 3
    2cb0:	8f 93       	push	r24
    2cb2:	c4 58       	subi	r28, 0x84	; 132
    2cb4:	dc 4f       	sbci	r29, 0xFC	; 252
    2cb6:	88 81       	ld	r24, Y
    2cb8:	cc 57       	subi	r28, 0x7C	; 124
    2cba:	d3 40       	sbci	r29, 0x03	; 3
    2cbc:	8f 93       	push	r24
    2cbe:	c5 58       	subi	r28, 0x85	; 133
    2cc0:	dc 4f       	sbci	r29, 0xFC	; 252
    2cc2:	88 81       	ld	r24, Y
    2cc4:	cb 57       	subi	r28, 0x7B	; 123
    2cc6:	d3 40       	sbci	r29, 0x03	; 3
    2cc8:	8f 93       	push	r24
    2cca:	c6 58       	subi	r28, 0x86	; 134
    2ccc:	dc 4f       	sbci	r29, 0xFC	; 252
    2cce:	88 81       	ld	r24, Y
    2cd0:	ca 57       	subi	r28, 0x7A	; 122
    2cd2:	d3 40       	sbci	r29, 0x03	; 3
    2cd4:	8f 93       	push	r24
    2cd6:	c7 58       	subi	r28, 0x87	; 135
    2cd8:	dc 4f       	sbci	r29, 0xFC	; 252
    2cda:	88 81       	ld	r24, Y
    2cdc:	c9 57       	subi	r28, 0x79	; 121
    2cde:	d3 40       	sbci	r29, 0x03	; 3
    2ce0:	8f 93       	push	r24
    2ce2:	c8 58       	subi	r28, 0x88	; 136
    2ce4:	dc 4f       	sbci	r29, 0xFC	; 252
    2ce6:	88 81       	ld	r24, Y
    2ce8:	c8 57       	subi	r28, 0x78	; 120
    2cea:	d3 40       	sbci	r29, 0x03	; 3
    2cec:	8f 93       	push	r24
    2cee:	ce 01       	movw	r24, r28
    2cf0:	8c 55       	subi	r24, 0x5C	; 92
    2cf2:	9d 4f       	sbci	r25, 0xFD	; 253
    2cf4:	9f 93       	push	r25
    2cf6:	8f 93       	push	r24
    2cf8:	1f 93       	push	r17
    2cfa:	0f 93       	push	r16
    2cfc:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			writestr_OLED(1, outbuf, 2);
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	42 e0       	ldi	r20, 0x02	; 2
    2d06:	b8 01       	movw	r22, r16
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2d0e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2d10:	72 c1       	rjmp	.+740    	; 0x2ff6 <report+0xe46>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2d12:	7e 01       	movw	r14, r28
    2d14:	96 ef       	ldi	r25, 0xF6	; 246
    2d16:	e9 1a       	sub	r14, r25
    2d18:	9e ef       	ldi	r25, 0xFE	; 254
    2d1a:	f9 0a       	sbc	r15, r25
    2d1c:	c7 01       	movw	r24, r14
    2d1e:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2d22:	9e 01       	movw	r18, r28
    2d24:	23 5a       	subi	r18, 0xA3	; 163
    2d26:	3e 4f       	sbci	r19, 0xFE	; 254
    2d28:	ae 01       	movw	r20, r28
    2d2a:	44 5a       	subi	r20, 0xA4	; 164
    2d2c:	5e 4f       	sbci	r21, 0xFE	; 254
    2d2e:	be 01       	movw	r22, r28
    2d30:	65 5a       	subi	r22, 0xA5	; 165
    2d32:	7e 4f       	sbci	r23, 0xFE	; 254
    2d34:	ce 01       	movw	r24, r28
    2d36:	86 5a       	subi	r24, 0xA6	; 166
    2d38:	9e 4f       	sbci	r25, 0xFE	; 254
    2d3a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2d3e:	24 e3       	ldi	r18, 0x34	; 52
    2d40:	20 9f       	mul	r18, r16
    2d42:	c0 01       	movw	r24, r0
    2d44:	21 9f       	mul	r18, r17
    2d46:	90 0d       	add	r25, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	86 5c       	subi	r24, 0xC6	; 198
    2d4c:	97 4d       	sbci	r25, 0xD7	; 215
    2d4e:	9f 93       	push	r25
    2d50:	8f 93       	push	r24
    2d52:	c3 5a       	subi	r28, 0xA3	; 163
    2d54:	de 4f       	sbci	r29, 0xFE	; 254
    2d56:	88 81       	ld	r24, Y
    2d58:	cd 55       	subi	r28, 0x5D	; 93
    2d5a:	d1 40       	sbci	r29, 0x01	; 1
    2d5c:	1f 92       	push	r1
    2d5e:	8f 93       	push	r24
    2d60:	c4 5a       	subi	r28, 0xA4	; 164
    2d62:	de 4f       	sbci	r29, 0xFE	; 254
    2d64:	88 81       	ld	r24, Y
    2d66:	cc 55       	subi	r28, 0x5C	; 92
    2d68:	d1 40       	sbci	r29, 0x01	; 1
    2d6a:	1f 92       	push	r1
    2d6c:	8f 93       	push	r24
    2d6e:	c5 5a       	subi	r28, 0xA5	; 165
    2d70:	de 4f       	sbci	r29, 0xFE	; 254
    2d72:	88 81       	ld	r24, Y
    2d74:	cb 55       	subi	r28, 0x5B	; 91
    2d76:	d1 40       	sbci	r29, 0x01	; 1
    2d78:	1f 92       	push	r1
    2d7a:	8f 93       	push	r24
    2d7c:	c6 5a       	subi	r28, 0xA6	; 166
    2d7e:	de 4f       	sbci	r29, 0xFE	; 254
    2d80:	88 81       	ld	r24, Y
    2d82:	ca 55       	subi	r28, 0x5A	; 90
    2d84:	d1 40       	sbci	r29, 0x01	; 1
    2d86:	1f 92       	push	r1
    2d88:	8f 93       	push	r24
    2d8a:	ff 92       	push	r15
    2d8c:	ef 92       	push	r14
    2d8e:	ce 01       	movw	r24, r28
    2d90:	8a 54       	subi	r24, 0x4A	; 74
    2d92:	9d 4f       	sbci	r25, 0xFD	; 253
    2d94:	9f 93       	push	r25
    2d96:	8f 93       	push	r24
    2d98:	8e 01       	movw	r16, r28
    2d9a:	0f 5f       	subi	r16, 0xFF	; 255
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	1f 93       	push	r17
    2da0:	0f 93       	push	r16
    2da2:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printLine(outbuf);
    2da6:	c8 01       	movw	r24, r16
    2da8:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2dac:	c4 5a       	subi	r28, 0xA4	; 164
    2dae:	de 4f       	sbci	r29, 0xFE	; 254
    2db0:	88 81       	ld	r24, Y
    2db2:	cc 55       	subi	r28, 0x5C	; 92
    2db4:	d1 40       	sbci	r29, 0x01	; 1
    2db6:	1f 92       	push	r1
    2db8:	8f 93       	push	r24
    2dba:	c5 5a       	subi	r28, 0xA5	; 165
    2dbc:	de 4f       	sbci	r29, 0xFE	; 254
    2dbe:	88 81       	ld	r24, Y
    2dc0:	cb 55       	subi	r28, 0x5B	; 91
    2dc2:	d1 40       	sbci	r29, 0x01	; 1
    2dc4:	1f 92       	push	r1
    2dc6:	8f 93       	push	r24
    2dc8:	ce 01       	movw	r24, r28
    2dca:	8d 51       	subi	r24, 0x1D	; 29
    2dcc:	9d 4f       	sbci	r25, 0xFD	; 253
    2dce:	9f 93       	push	r25
    2dd0:	8f 93       	push	r24
    2dd2:	1f 93       	push	r17
    2dd4:	0f 93       	push	r16
    2dd6:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			writestr_OLED(1, outbuf, 1);
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	b8 01       	movw	r22, r16
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2de4:	c3 5a       	subi	r28, 0xA3	; 163
    2de6:	de 4f       	sbci	r29, 0xFE	; 254
    2de8:	88 81       	ld	r24, Y
    2dea:	cd 55       	subi	r28, 0x5D	; 93
    2dec:	d1 40       	sbci	r29, 0x01	; 1
    2dee:	1f 92       	push	r1
    2df0:	8f 93       	push	r24
    2df2:	c6 5a       	subi	r28, 0xA6	; 166
    2df4:	de 4f       	sbci	r29, 0xFE	; 254
    2df6:	88 81       	ld	r24, Y
    2df8:	ca 55       	subi	r28, 0x5A	; 90
    2dfa:	d1 40       	sbci	r29, 0x01	; 1
    2dfc:	1f 92       	push	r1
    2dfe:	8f 93       	push	r24
    2e00:	ce 01       	movw	r24, r28
    2e02:	8a 50       	subi	r24, 0x0A	; 10
    2e04:	9d 4f       	sbci	r25, 0xFD	; 253
    2e06:	9f 93       	push	r25
    2e08:	8f 93       	push	r24
    2e0a:	1f 93       	push	r17
    2e0c:	0f 93       	push	r16
    2e0e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			writestr_OLED(1, outbuf, 2);
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	42 e0       	ldi	r20, 0x02	; 2
    2e18:	b8 01       	movw	r22, r16
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e20:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2e22:	e9 c0       	rjmp	.+466    	; 0x2ff6 <report+0xe46>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2e24:	7e 01       	movw	r14, r28
    2e26:	96 ef       	ldi	r25, 0xF6	; 246
    2e28:	e9 1a       	sub	r14, r25
    2e2a:	9e ef       	ldi	r25, 0xFE	; 254
    2e2c:	f9 0a       	sbc	r15, r25
    2e2e:	c7 01       	movw	r24, r14
    2e30:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			get_SETTIME(lastsettime);
    2e34:	6e 01       	movw	r12, r28
    2e36:	82 ee       	ldi	r24, 0xE2	; 226
    2e38:	c8 1a       	sub	r12, r24
    2e3a:	8e ef       	ldi	r24, 0xFE	; 254
    2e3c:	d8 0a       	sbc	r13, r24
    2e3e:	c6 01       	movw	r24, r12
    2e40:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <get_SETTIME>
			get_BOOTTIME(boottime);
    2e44:	5e 01       	movw	r10, r28
    2e46:	9e ec       	ldi	r25, 0xCE	; 206
    2e48:	a9 1a       	sub	r10, r25
    2e4a:	9e ef       	ldi	r25, 0xFE	; 254
    2e4c:	b9 0a       	sbc	r11, r25
    2e4e:	c5 01       	movw	r24, r10
    2e50:	0e 94 1d 08 	call	0x103a	; 0x103a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2e54:	24 e3       	ldi	r18, 0x34	; 52
    2e56:	20 9f       	mul	r18, r16
    2e58:	c0 01       	movw	r24, r0
    2e5a:	21 9f       	mul	r18, r17
    2e5c:	90 0d       	add	r25, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	86 5c       	subi	r24, 0xC6	; 198
    2e62:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2e64:	9f 93       	push	r25
    2e66:	8f 93       	push	r24
    2e68:	bf 92       	push	r11
    2e6a:	af 92       	push	r10
    2e6c:	df 92       	push	r13
    2e6e:	cf 92       	push	r12
    2e70:	ff 92       	push	r15
    2e72:	ef 92       	push	r14
    2e74:	ce 01       	movw	r24, r28
    2e76:	87 5f       	subi	r24, 0xF7	; 247
    2e78:	9c 4f       	sbci	r25, 0xFC	; 252
    2e7a:	9f 93       	push	r25
    2e7c:	8f 93       	push	r24
    2e7e:	8e 01       	movw	r16, r28
    2e80:	0f 5f       	subi	r16, 0xFF	; 255
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	1f 93       	push	r17
    2e86:	0f 93       	push	r16
    2e88:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Time", 1);
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	6d e1       	ldi	r22, 0x1D	; 29
    2e96:	7b ea       	ldi	r23, 0xAB	; 171
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	65 5f       	subi	r22, 0xF5	; 245
    2ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea4:	42 e0       	ldi	r20, 0x02	; 2
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			break;
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2eb0:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2eb2:	a1 c0       	rjmp	.+322    	; 0x2ff6 <report+0xe46>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	0e 94 28 0a 	call	0x1450	; 0x1450 <read_ionpump>
    2eba:	d6 2e       	mov	r13, r22
    2ebc:	c7 2e       	mov	r12, r23
    2ebe:	b8 2e       	mov	r11, r24
    2ec0:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	0e 94 28 0a 	call	0x1450	; 0x1450 <read_ionpump>
    2ec8:	96 2e       	mov	r9, r22
    2eca:	87 2e       	mov	r8, r23
    2ecc:	78 2e       	mov	r7, r24
    2ece:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2ed0:	7e 01       	movw	r14, r28
    2ed2:	96 ef       	ldi	r25, 0xF6	; 246
    2ed4:	e9 1a       	sub	r14, r25
    2ed6:	9e ef       	ldi	r25, 0xFE	; 254
    2ed8:	f9 0a       	sbc	r15, r25
    2eda:	c7 01       	movw	r24, r14
    2edc:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2ee0:	24 e3       	ldi	r18, 0x34	; 52
    2ee2:	20 9f       	mul	r18, r16
    2ee4:	c0 01       	movw	r24, r0
    2ee6:	21 9f       	mul	r18, r17
    2ee8:	90 0d       	add	r25, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	86 5c       	subi	r24, 0xC6	; 198
    2eee:	97 4d       	sbci	r25, 0xD7	; 215
    2ef0:	9f 93       	push	r25
    2ef2:	8f 93       	push	r24
    2ef4:	6f 92       	push	r6
    2ef6:	7f 92       	push	r7
    2ef8:	8f 92       	push	r8
    2efa:	9f 92       	push	r9
    2efc:	af 92       	push	r10
    2efe:	bf 92       	push	r11
    2f00:	cf 92       	push	r12
    2f02:	df 92       	push	r13
    2f04:	ff 92       	push	r15
    2f06:	ef 92       	push	r14
    2f08:	ce 01       	movw	r24, r28
    2f0a:	8e 5d       	subi	r24, 0xDE	; 222
    2f0c:	9c 4f       	sbci	r25, 0xFC	; 252
    2f0e:	9f 93       	push	r25
    2f10:	8f 93       	push	r24
    2f12:	8e 01       	movw	r16, r28
    2f14:	0f 5f       	subi	r16, 0xFF	; 255
    2f16:	1f 4f       	sbci	r17, 0xFF	; 255
    2f18:	1f 93       	push	r17
    2f1a:	0f 93       	push	r16
    2f1c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printLine(outbuf);
    2f20:	c8 01       	movw	r24, r16
    2f22:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	62 e2       	ldi	r22, 0x22	; 34
    2f2a:	7b ea       	ldi	r23, 0xAB	; 171
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2f32:	6f 92       	push	r6
    2f34:	7f 92       	push	r7
    2f36:	8f 92       	push	r8
    2f38:	9f 92       	push	r9
    2f3a:	af 92       	push	r10
    2f3c:	bf 92       	push	r11
    2f3e:	cf 92       	push	r12
    2f40:	df 92       	push	r13
    2f42:	ce 01       	movw	r24, r28
    2f44:	89 5b       	subi	r24, 0xB9	; 185
    2f46:	9c 4f       	sbci	r25, 0xFC	; 252
    2f48:	9f 93       	push	r25
    2f4a:	8f 93       	push	r24
    2f4c:	1f 93       	push	r17
    2f4e:	0f 93       	push	r16
    2f50:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			writestr_OLED(1, outbuf, 2);
    2f54:	42 e0       	ldi	r20, 0x02	; 2
    2f56:	b8 01       	movw	r22, r16
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			break;
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2f62:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2f64:	48 c0       	rjmp	.+144    	; 0x2ff6 <report+0xe46>

		case 'V':					// Version
			get_VERSION(version);
    2f66:	6e 01       	movw	r12, r28
    2f68:	9f ef       	ldi	r25, 0xFF	; 255
    2f6a:	c9 0e       	add	r12, r25
    2f6c:	d1 1c       	adc	r13, r1
    2f6e:	c6 01       	movw	r24, r12
    2f70:	0e 94 24 08 	call	0x1048	; 0x1048 <get_VERSION>
			get_time(currenttime);
    2f74:	7e 01       	movw	r14, r28
    2f76:	86 ef       	ldi	r24, 0xF6	; 246
    2f78:	e8 1a       	sub	r14, r24
    2f7a:	8e ef       	ldi	r24, 0xFE	; 254
    2f7c:	f8 0a       	sbc	r15, r24
    2f7e:	c7 01       	movw	r24, r14
    2f80:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2f84:	24 e3       	ldi	r18, 0x34	; 52
    2f86:	20 9f       	mul	r18, r16
    2f88:	c0 01       	movw	r24, r0
    2f8a:	21 9f       	mul	r18, r17
    2f8c:	90 0d       	add	r25, r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	86 5c       	subi	r24, 0xC6	; 198
    2f92:	97 4d       	sbci	r25, 0xD7	; 215
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	df 92       	push	r13
    2f9a:	cf 92       	push	r12
    2f9c:	ff 92       	push	r15
    2f9e:	ef 92       	push	r14
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	8c 5a       	subi	r24, 0xAC	; 172
    2fa4:	9c 4f       	sbci	r25, 0xFC	; 252
    2fa6:	9f 93       	push	r25
    2fa8:	8f 93       	push	r24
    2faa:	8e 01       	movw	r16, r28
    2fac:	0f 5f       	subi	r16, 0xFF	; 255
    2fae:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb0:	1f 93       	push	r17
    2fb2:	0f 93       	push	r16
    2fb4:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printLine(outbuf);
    2fb8:	c8 01       	movw	r24, r16
    2fba:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2fbe:	41 e0       	ldi	r20, 0x01	; 1
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	79 ea       	ldi	r23, 0xA9	; 169
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			get_VERSION(outbuf);
    2fca:	c8 01       	movw	r24, r16
    2fcc:	0e 94 24 08 	call	0x1048	; 0x1048 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2fd0:	42 e0       	ldi	r20, 0x02	; 2
    2fd2:	b8 01       	movw	r22, r16
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <writestr_OLED>
			break;
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2fde:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2fe0:	0a c0       	rjmp	.+20     	; 0x2ff6 <report+0xe46>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2fe2:	62 e3       	ldi	r22, 0x32	; 50
    2fe4:	7b ea       	ldi	r23, 0xAB	; 171
    2fe6:	8a ec       	ldi	r24, 0xCA	; 202
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			return(ERROR);
    2fee:	0f 2e       	mov	r0, r31
    2ff0:	f3 e6       	ldi	r31, 0x63	; 99
    2ff2:	ff 2e       	mov	r15, r31
    2ff4:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2ff6:	8f 2d       	mov	r24, r15
    2ff8:	c1 55       	subi	r28, 0x51	; 81
    2ffa:	dc 4f       	sbci	r29, 0xFC	; 252
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	bf 90       	pop	r11
    3012:	af 90       	pop	r10
    3014:	9f 90       	pop	r9
    3016:	8f 90       	pop	r8
    3018:	7f 90       	pop	r7
    301a:	6f 90       	pop	r6
    301c:	5f 90       	pop	r5
    301e:	4f 90       	pop	r4
    3020:	3f 90       	pop	r3
    3022:	2f 90       	pop	r2
    3024:	08 95       	ret

00003026 <crc16>:

-------------*/

	return(NOERROR);

}
    3026:	dc 01       	movw	r26, r24
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	1b c0       	rjmp	.+54     	; 0x3068 <crc16+0x42>
    3032:	fd 01       	movw	r30, r26
    3034:	e4 0f       	add	r30, r20
    3036:	f5 1f       	adc	r31, r21
    3038:	20 81       	ld	r18, Z
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	32 2f       	mov	r19, r18
    303e:	22 27       	eor	r18, r18
    3040:	82 27       	eor	r24, r18
    3042:	93 27       	eor	r25, r19
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	0c c0       	rjmp	.+24     	; 0x3060 <crc16+0x3a>
    3048:	99 23       	and	r25, r25
    304a:	3c f4       	brge	.+14     	; 0x305a <crc16+0x34>
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	31 e2       	ldi	r19, 0x21	; 33
    3052:	83 27       	eor	r24, r19
    3054:	30 e1       	ldi	r19, 0x10	; 16
    3056:	93 27       	eor	r25, r19
    3058:	02 c0       	rjmp	.+4      	; 0x305e <crc16+0x38>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	28 30       	cpi	r18, 0x08	; 8
    3062:	90 f3       	brcs	.-28     	; 0x3048 <crc16+0x22>
    3064:	4f 5f       	subi	r20, 0xFF	; 255
    3066:	5f 4f       	sbci	r21, 0xFF	; 255
    3068:	46 17       	cp	r20, r22
    306a:	57 07       	cpc	r21, r23
    306c:	10 f3       	brcs	.-60     	; 0x3032 <crc16+0xc>
    306e:	08 95       	ret

00003070 <get_FRAM_ENCSAVETIME>:
    3070:	ef 92       	push	r14
    3072:	ff 92       	push	r15
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	c6 57       	subi	r28, 0x76	; 118
    3080:	d1 09       	sbc	r29, r1
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	7c 01       	movw	r14, r24
    3088:	86 e2       	ldi	r24, 0x26	; 38
    308a:	ec e4       	ldi	r30, 0x4C	; 76
    308c:	fd ea       	ldi	r31, 0xAD	; 173
    308e:	de 01       	movw	r26, r28
    3090:	af 5a       	subi	r26, 0xAF	; 175
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	01 90       	ld	r0, Z+
    3096:	0d 92       	st	X+, r0
    3098:	8a 95       	dec	r24
    309a:	e1 f7       	brne	.-8      	; 0x3094 <get_FRAM_ENCSAVETIME+0x24>
    309c:	24 e1       	ldi	r18, 0x14	; 20
    309e:	a7 01       	movw	r20, r14
    30a0:	60 e2       	ldi	r22, 0x20	; 32
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	80 e5       	ldi	r24, 0x50	; 80
    30a6:	0e 94 9d 08 	call	0x113a	; 0x113a <read_FRAM>
    30aa:	18 2f       	mov	r17, r24
    30ac:	83 36       	cpi	r24, 0x63	; 99
    30ae:	b1 f4       	brne	.+44     	; 0x30dc <get_FRAM_ENCSAVETIME+0x6c>
    30b0:	ce 01       	movw	r24, r28
    30b2:	8f 5a       	subi	r24, 0xAF	; 175
    30b4:	9f 4f       	sbci	r25, 0xFF	; 255
    30b6:	9f 93       	push	r25
    30b8:	8f 93       	push	r24
    30ba:	80 55       	subi	r24, 0x50	; 80
    30bc:	91 09       	sbc	r25, r1
    30be:	7c 01       	movw	r14, r24
    30c0:	9f 93       	push	r25
    30c2:	8f 93       	push	r24
    30c4:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    30c8:	b7 01       	movw	r22, r14
    30ca:	86 e3       	ldi	r24, 0x36	; 54
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	03 c0       	rjmp	.+6      	; 0x30e2 <get_FRAM_ENCSAVETIME+0x72>
    30dc:	f7 01       	movw	r30, r14
    30de:	13 8a       	std	Z+19, r1	; 0x13
    30e0:	10 e0       	ldi	r17, 0x00	; 0
    30e2:	81 2f       	mov	r24, r17
    30e4:	ca 58       	subi	r28, 0x8A	; 138
    30e6:	df 4f       	sbci	r29, 0xFF	; 255
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	08 95       	ret

000030f8 <get_FRAM_MOTOR_ENCODER>:
    30f8:	cf 92       	push	r12
    30fa:	df 92       	push	r13
    30fc:	ef 92       	push	r14
    30fe:	ff 92       	push	r15
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	c3 58       	subi	r28, 0x83	; 131
    310e:	d1 09       	sbc	r29, r1
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	8b 01       	movw	r16, r22
    3116:	9f e2       	ldi	r25, 0x2F	; 47
    3118:	e2 e7       	ldi	r30, 0x72	; 114
    311a:	fd ea       	ldi	r31, 0xAD	; 173
    311c:	de 01       	movw	r26, r28
    311e:	ab 5a       	subi	r26, 0xAB	; 171
    3120:	bf 4f       	sbci	r27, 0xFF	; 255
    3122:	01 90       	ld	r0, Z+
    3124:	0d 92       	st	X+, r0
    3126:	9a 95       	dec	r25
    3128:	e1 f7       	brne	.-8      	; 0x3122 <get_FRAM_MOTOR_ENCODER+0x2a>
    312a:	81 38       	cpi	r24, 0x81	; 129
    312c:	59 f0       	breq	.+22     	; 0x3144 <get_FRAM_MOTOR_ENCODER+0x4c>
    312e:	82 38       	cpi	r24, 0x82	; 130
    3130:	31 f0       	breq	.+12     	; 0x313e <get_FRAM_MOTOR_ENCODER+0x46>
    3132:	80 38       	cpi	r24, 0x80	; 128
    3134:	09 f0       	breq	.+2      	; 0x3138 <get_FRAM_MOTOR_ENCODER+0x40>
    3136:	69 c0       	rjmp	.+210    	; 0x320a <get_FRAM_MOTOR_ENCODER+0x112>
    3138:	64 e1       	ldi	r22, 0x14	; 20
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	05 c0       	rjmp	.+10     	; 0x3148 <get_FRAM_MOTOR_ENCODER+0x50>
    313e:	6c e1       	ldi	r22, 0x1C	; 28
    3140:	70 e0       	ldi	r23, 0x00	; 0
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <get_FRAM_MOTOR_ENCODER+0x50>
    3144:	68 e1       	ldi	r22, 0x18	; 24
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	f8 2e       	mov	r15, r24
    314a:	24 e0       	ldi	r18, 0x04	; 4
    314c:	ae 01       	movw	r20, r28
    314e:	4f 5a       	subi	r20, 0xAF	; 175
    3150:	5f 4f       	sbci	r21, 0xFF	; 255
    3152:	80 e5       	ldi	r24, 0x50	; 80
    3154:	0e 94 9d 08 	call	0x113a	; 0x113a <read_FRAM>
    3158:	e8 2e       	mov	r14, r24
    315a:	83 e6       	ldi	r24, 0x63	; 99
    315c:	e8 12       	cpse	r14, r24
    315e:	24 c0       	rjmp	.+72     	; 0x31a8 <get_FRAM_MOTOR_ENCODER+0xb0>
    3160:	81 ec       	ldi	r24, 0xC1	; 193
    3162:	8f 0d       	add	r24, r15
    3164:	1f 92       	push	r1
    3166:	8f 93       	push	r24
    3168:	ce 01       	movw	r24, r28
    316a:	8b 5a       	subi	r24, 0xAB	; 171
    316c:	9f 4f       	sbci	r25, 0xFF	; 255
    316e:	9f 93       	push	r25
    3170:	8f 93       	push	r24
    3172:	fe 01       	movw	r30, r28
    3174:	31 96       	adiw	r30, 0x01	; 1
    3176:	6f 01       	movw	r12, r30
    3178:	ff 93       	push	r31
    317a:	ef 93       	push	r30
    317c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3180:	b6 01       	movw	r22, r12
    3182:	83 e9       	ldi	r24, 0x93	; 147
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	dc 01       	movw	r26, r24
    3190:	f8 01       	movw	r30, r16
    3192:	80 83       	st	Z, r24
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	a2 83       	std	Z+2, r26	; 0x02
    3198:	b3 83       	std	Z+3, r27	; 0x03
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	35 c0       	rjmp	.+106    	; 0x3212 <get_FRAM_MOTOR_ENCODER+0x11a>
    31a8:	62 96       	adiw	r28, 0x12	; 18
    31aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    31ac:	62 97       	sbiw	r28, 0x12	; 18
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	78 2f       	mov	r23, r24
    31b6:	66 27       	eor	r22, r22
    31b8:	55 27       	eor	r21, r21
    31ba:	44 27       	eor	r20, r20
    31bc:	63 96       	adiw	r28, 0x13	; 19
    31be:	9f ad       	ldd	r25, Y+63	; 0x3f
    31c0:	63 97       	sbiw	r28, 0x13	; 19
    31c2:	89 2f       	mov	r24, r25
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e0       	ldi	r26, 0x00	; 0
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	dc 01       	movw	r26, r24
    31cc:	99 27       	eor	r25, r25
    31ce:	88 27       	eor	r24, r24
    31d0:	84 2b       	or	r24, r20
    31d2:	95 2b       	or	r25, r21
    31d4:	a6 2b       	or	r26, r22
    31d6:	b7 2b       	or	r27, r23
    31d8:	64 96       	adiw	r28, 0x14	; 20
    31da:	4f ad       	ldd	r20, Y+63	; 0x3f
    31dc:	64 97       	sbiw	r28, 0x14	; 20
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	76 2f       	mov	r23, r22
    31e6:	65 2f       	mov	r22, r21
    31e8:	54 2f       	mov	r21, r20
    31ea:	44 27       	eor	r20, r20
    31ec:	84 2b       	or	r24, r20
    31ee:	95 2b       	or	r25, r21
    31f0:	a6 2b       	or	r26, r22
    31f2:	b7 2b       	or	r27, r23
    31f4:	65 96       	adiw	r28, 0x15	; 21
    31f6:	2f ad       	ldd	r18, Y+63	; 0x3f
    31f8:	65 97       	sbiw	r28, 0x15	; 21
    31fa:	82 2b       	or	r24, r18
    31fc:	f8 01       	movw	r30, r16
    31fe:	80 83       	st	Z, r24
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	a2 83       	std	Z+2, r26	; 0x02
    3204:	b3 83       	std	Z+3, r27	; 0x03
    3206:	e1 2c       	mov	r14, r1
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <get_FRAM_MOTOR_ENCODER+0x11a>
    320a:	0f 2e       	mov	r0, r31
    320c:	f3 e6       	ldi	r31, 0x63	; 99
    320e:	ef 2e       	mov	r14, r31
    3210:	f0 2d       	mov	r31, r0
    3212:	8e 2d       	mov	r24, r14
    3214:	cd 57       	subi	r28, 0x7D	; 125
    3216:	df 4f       	sbci	r29, 0xFF	; 255
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	ff 90       	pop	r15
    3226:	ef 90       	pop	r14
    3228:	df 90       	pop	r13
    322a:	cf 90       	pop	r12
    322c:	08 95       	ret

0000322e <get_MOTOR>:
    322e:	3f 92       	push	r3
    3230:	4f 92       	push	r4
    3232:	5f 92       	push	r5
    3234:	6f 92       	push	r6
    3236:	7f 92       	push	r7
    3238:	8f 92       	push	r8
    323a:	9f 92       	push	r9
    323c:	af 92       	push	r10
    323e:	bf 92       	push	r11
    3240:	cf 92       	push	r12
    3242:	df 92       	push	r13
    3244:	ef 92       	push	r14
    3246:	ff 92       	push	r15
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	ce 58       	subi	r28, 0x8E	; 142
    3256:	d1 09       	sbc	r29, r1
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	38 2e       	mov	r3, r24
    325e:	7a 01       	movw	r14, r20
    3260:	42 2e       	mov	r4, r18
    3262:	8d b6       	in	r8, 0x3d	; 61
    3264:	9e b6       	in	r9, 0x3e	; 62
    3266:	a2 2e       	mov	r10, r18
    3268:	b1 2c       	mov	r11, r1
    326a:	c5 01       	movw	r24, r10
    326c:	02 96       	adiw	r24, 0x02	; 2
    326e:	35 01       	movw	r6, r10
    3270:	2f ef       	ldi	r18, 0xFF	; 255
    3272:	62 1a       	sub	r6, r18
    3274:	72 0a       	sbc	r7, r18
    3276:	ed b7       	in	r30, 0x3d	; 61
    3278:	fe b7       	in	r31, 0x3e	; 62
    327a:	e8 1b       	sub	r30, r24
    327c:	f9 0b       	sbc	r31, r25
    327e:	ed bf       	out	0x3d, r30	; 61
    3280:	fe bf       	out	0x3e, r31	; 62
    3282:	2d b7       	in	r18, 0x3d	; 61
    3284:	3e b7       	in	r19, 0x3e	; 62
    3286:	2f 5f       	subi	r18, 0xFF	; 255
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	69 01       	movw	r12, r18
    328c:	89 01       	movw	r16, r18
    328e:	80 e2       	ldi	r24, 0x20	; 32
    3290:	e1 ea       	ldi	r30, 0xA1	; 161
    3292:	fd ea       	ldi	r31, 0xAD	; 173
    3294:	de 01       	movw	r26, r28
    3296:	af 5a       	subi	r26, 0xAF	; 175
    3298:	bf 4f       	sbci	r27, 0xFF	; 255
    329a:	01 90       	ld	r0, Z+
    329c:	0d 92       	st	X+, r0
    329e:	8a 95       	dec	r24
    32a0:	e1 f7       	brne	.-8      	; 0x329a <get_MOTOR+0x6c>
    32a2:	8e e1       	ldi	r24, 0x1E	; 30
    32a4:	e1 ec       	ldi	r30, 0xC1	; 193
    32a6:	fd ea       	ldi	r31, 0xAD	; 173
    32a8:	de 01       	movw	r26, r28
    32aa:	af 58       	subi	r26, 0x8F	; 143
    32ac:	bf 4f       	sbci	r27, 0xFF	; 255
    32ae:	01 90       	ld	r0, Z+
    32b0:	0d 92       	st	X+, r0
    32b2:	8a 95       	dec	r24
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <get_MOTOR+0x80>
    32b6:	68 94       	set
    32b8:	55 24       	eor	r5, r5
    32ba:	51 f8       	bld	r5, 1
    32bc:	54 0c       	add	r5, r4
    32be:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    32c2:	50 92 41 2b 	sts	0x2B41, r5	; 0x802b41 <ser_recv1+0xfe>
    32c6:	ed b7       	in	r30, 0x3d	; 61
    32c8:	fe b7       	in	r31, 0x3e	; 62
    32ca:	31 82       	std	Z+1, r3	; 0x01
    32cc:	f9 01       	movw	r30, r18
    32ce:	61 83       	std	Z+1, r22	; 0x01
    32d0:	62 e0       	ldi	r22, 0x02	; 2
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	c9 01       	movw	r24, r18
    32d6:	0e 94 13 18 	call	0x3026	; 0x3026 <crc16>
    32da:	f6 01       	movw	r30, r12
    32dc:	92 83       	std	Z+2, r25	; 0x02
    32de:	83 83       	std	Z+3, r24	; 0x03
    32e0:	62 e0       	ldi	r22, 0x02	; 2
    32e2:	c6 01       	movw	r24, r12
    32e4:	0e 94 85 29 	call	0x530a	; 0x530a <send_USART1>
    32e8:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    32ec:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    32f0:	24 c0       	rjmp	.+72     	; 0x333a <get_MOTOR+0x10c>
    32f2:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    32f6:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    32fa:	85 36       	cpi	r24, 0x65	; 101
    32fc:	91 05       	cpc	r25, r1
    32fe:	e8 f0       	brcs	.+58     	; 0x333a <get_MOTOR+0x10c>
    3300:	81 ec       	ldi	r24, 0xC1	; 193
    3302:	83 0d       	add	r24, r3
    3304:	1f 92       	push	r1
    3306:	8f 93       	push	r24
    3308:	ce 01       	movw	r24, r28
    330a:	8f 5a       	subi	r24, 0xAF	; 175
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	9f 93       	push	r25
    3310:	8f 93       	push	r24
    3312:	8e 01       	movw	r16, r28
    3314:	0f 5f       	subi	r16, 0xFF	; 255
    3316:	1f 4f       	sbci	r17, 0xFF	; 255
    3318:	1f 93       	push	r17
    331a:	0f 93       	push	r16
    331c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3320:	b8 01       	movw	r22, r16
    3322:	80 e3       	ldi	r24, 0x30	; 48
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	83 e6       	ldi	r24, 0x63	; 99
    3338:	56 c0       	rjmp	.+172    	; 0x33e6 <get_MOTOR+0x1b8>
    333a:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    333e:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    3342:	98 17       	cp	r25, r24
    3344:	b0 f2       	brcs	.-84     	; 0x32f2 <get_MOTOR+0xc4>
    3346:	f5 01       	movw	r30, r10
    3348:	ed 5b       	subi	r30, 0xBD	; 189
    334a:	f5 4d       	sbci	r31, 0xD5	; 213
    334c:	a0 80       	ld	r10, Z
    334e:	b1 2c       	mov	r11, r1
    3350:	ba 2c       	mov	r11, r10
    3352:	aa 24       	eor	r10, r10
    3354:	f3 01       	movw	r30, r6
    3356:	ed 5b       	subi	r30, 0xBD	; 189
    3358:	f5 4d       	sbci	r31, 0xD5	; 213
    335a:	80 81       	ld	r24, Z
    335c:	a8 2a       	or	r10, r24
    335e:	22 e0       	ldi	r18, 0x02	; 2
    3360:	0b c0       	rjmp	.+22     	; 0x3378 <get_MOTOR+0x14a>
    3362:	82 2f       	mov	r24, r18
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	fc 01       	movw	r30, r24
    3368:	ef 5b       	subi	r30, 0xBF	; 191
    336a:	f5 4d       	sbci	r31, 0xD5	; 213
    336c:	30 81       	ld	r19, Z
    336e:	f8 01       	movw	r30, r16
    3370:	e8 0f       	add	r30, r24
    3372:	f9 1f       	adc	r31, r25
    3374:	30 83       	st	Z, r19
    3376:	2f 5f       	subi	r18, 0xFF	; 255
    3378:	25 15       	cp	r18, r5
    337a:	98 f3       	brcs	.-26     	; 0x3362 <get_MOTOR+0x134>
    337c:	65 2d       	mov	r22, r5
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	c6 01       	movw	r24, r12
    3382:	0e 94 13 18 	call	0x3026	; 0x3026 <crc16>
    3386:	a8 16       	cp	r10, r24
    3388:	b9 06       	cpc	r11, r25
    338a:	49 f1       	breq	.+82     	; 0x33de <get_MOTOR+0x1b0>
    338c:	81 ec       	ldi	r24, 0xC1	; 193
    338e:	83 0d       	add	r24, r3
    3390:	1f 92       	push	r1
    3392:	8f 93       	push	r24
    3394:	ce 01       	movw	r24, r28
    3396:	8f 58       	subi	r24, 0x8F	; 143
    3398:	9f 4f       	sbci	r25, 0xFF	; 255
    339a:	9f 93       	push	r25
    339c:	8f 93       	push	r24
    339e:	8e 01       	movw	r16, r28
    33a0:	0f 5f       	subi	r16, 0xFF	; 255
    33a2:	1f 4f       	sbci	r17, 0xFF	; 255
    33a4:	1f 93       	push	r17
    33a6:	0f 93       	push	r16
    33a8:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    33ac:	b8 01       	movw	r22, r16
    33ae:	81 e3       	ldi	r24, 0x31	; 49
    33b0:	91 e0       	ldi	r25, 0x01	; 1
    33b2:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	83 e6       	ldi	r24, 0x63	; 99
    33c4:	10 c0       	rjmp	.+32     	; 0x33e6 <get_MOTOR+0x1b8>
    33c6:	82 2f       	mov	r24, r18
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	f7 01       	movw	r30, r14
    33cc:	e8 0f       	add	r30, r24
    33ce:	f9 1f       	adc	r31, r25
    33d0:	dc 01       	movw	r26, r24
    33d2:	ad 5b       	subi	r26, 0xBD	; 189
    33d4:	b5 4d       	sbci	r27, 0xD5	; 213
    33d6:	8c 91       	ld	r24, X
    33d8:	80 83       	st	Z, r24
    33da:	2f 5f       	subi	r18, 0xFF	; 255
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <get_MOTOR+0x1b2>
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	24 15       	cp	r18, r4
    33e2:	88 f3       	brcs	.-30     	; 0x33c6 <get_MOTOR+0x198>
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	8d be       	out	0x3d, r8	; 61
    33e8:	9e be       	out	0x3e, r9	; 62
    33ea:	c2 57       	subi	r28, 0x72	; 114
    33ec:	df 4f       	sbci	r29, 0xFF	; 255
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	1f 91       	pop	r17
    33f8:	0f 91       	pop	r16
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	df 90       	pop	r13
    3400:	cf 90       	pop	r12
    3402:	bf 90       	pop	r11
    3404:	af 90       	pop	r10
    3406:	9f 90       	pop	r9
    3408:	8f 90       	pop	r8
    340a:	7f 90       	pop	r7
    340c:	6f 90       	pop	r6
    340e:	5f 90       	pop	r5
    3410:	4f 90       	pop	r4
    3412:	3f 90       	pop	r3
    3414:	08 95       	ret

00003416 <get_MOTOR_CURRENT>:
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	cd 57       	subi	r28, 0x7D	; 125
    342c:	d1 09       	sbc	r29, r1
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	e8 2e       	mov	r14, r24
    3434:	8b 01       	movw	r16, r22
    3436:	89 e2       	ldi	r24, 0x29	; 41
    3438:	ef ed       	ldi	r30, 0xDF	; 223
    343a:	fd ea       	ldi	r31, 0xAD	; 173
    343c:	de 01       	movw	r26, r28
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	01 90       	ld	r0, Z+
    3442:	0d 92       	st	X+, r0
    3444:	8a 95       	dec	r24
    3446:	e1 f7       	brne	.-8      	; 0x3440 <get_MOTOR_CURRENT+0x2a>
    3448:	24 e0       	ldi	r18, 0x04	; 4
    344a:	ae 01       	movw	r20, r28
    344c:	46 58       	subi	r20, 0x86	; 134
    344e:	5f 4f       	sbci	r21, 0xFF	; 255
    3450:	61 e3       	ldi	r22, 0x31	; 49
    3452:	8e 2d       	mov	r24, r14
    3454:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3458:	f8 2e       	mov	r15, r24
    345a:	83 e6       	ldi	r24, 0x63	; 99
    345c:	f8 12       	cpse	r15, r24
    345e:	21 c0       	rjmp	.+66     	; 0x34a2 <get_MOTOR_CURRENT+0x8c>
    3460:	81 ec       	ldi	r24, 0xC1	; 193
    3462:	8e 0d       	add	r24, r14
    3464:	1f 92       	push	r1
    3466:	8f 93       	push	r24
    3468:	ce 01       	movw	r24, r28
    346a:	01 96       	adiw	r24, 0x01	; 1
    346c:	9f 93       	push	r25
    346e:	8f 93       	push	r24
    3470:	6e 01       	movw	r12, r28
    3472:	ea e2       	ldi	r30, 0x2A	; 42
    3474:	ce 0e       	add	r12, r30
    3476:	d1 1c       	adc	r13, r1
    3478:	df 92       	push	r13
    347a:	cf 92       	push	r12
    347c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3480:	b6 01       	movw	r22, r12
    3482:	86 e3       	ldi	r24, 0x36	; 54
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    348a:	8f ef       	ldi	r24, 0xFF	; 255
    348c:	9f ef       	ldi	r25, 0xFF	; 255
    348e:	f8 01       	movw	r30, r16
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	19 c0       	rjmp	.+50     	; 0x34d4 <get_MOTOR_CURRENT+0xbe>
    34a2:	eb 96       	adiw	r28, 0x3b	; 59
    34a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    34a6:	eb 97       	sbiw	r28, 0x3b	; 59
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	98 2f       	mov	r25, r24
    34ac:	88 27       	eor	r24, r24
    34ae:	ec 96       	adiw	r28, 0x3c	; 60
    34b0:	2f ad       	ldd	r18, Y+63	; 0x3f
    34b2:	ec 97       	sbiw	r28, 0x3c	; 60
    34b4:	82 2b       	or	r24, r18
    34b6:	9c 01       	movw	r18, r24
    34b8:	22 0f       	add	r18, r18
    34ba:	33 1f       	adc	r19, r19
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	82 0f       	add	r24, r18
    34ca:	93 1f       	adc	r25, r19
    34cc:	f8 01       	movw	r30, r16
    34ce:	80 83       	st	Z, r24
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	f1 2c       	mov	r15, r1
    34d4:	8f 2d       	mov	r24, r15
    34d6:	c3 58       	subi	r28, 0x83	; 131
    34d8:	df 4f       	sbci	r29, 0xFF	; 255
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	df 90       	pop	r13
    34ec:	cf 90       	pop	r12
    34ee:	08 95       	ret

000034f0 <get_MOTOR_ENCODER>:
    34f0:	ef 92       	push	r14
    34f2:	ff 92       	push	r15
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	ce 57       	subi	r28, 0x7E	; 126
    3502:	d1 09       	sbc	r29, r1
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	e8 2e       	mov	r14, r24
    350a:	8b 01       	movw	r16, r22
    350c:	89 e2       	ldi	r24, 0x29	; 41
    350e:	e8 e0       	ldi	r30, 0x08	; 8
    3510:	fe ea       	ldi	r31, 0xAE	; 174
    3512:	de 01       	movw	r26, r28
    3514:	aa 5a       	subi	r26, 0xAA	; 170
    3516:	bf 4f       	sbci	r27, 0xFF	; 255
    3518:	01 90       	ld	r0, Z+
    351a:	0d 92       	st	X+, r0
    351c:	8a 95       	dec	r24
    351e:	e1 f7       	brne	.-8      	; 0x3518 <get_MOTOR_ENCODER+0x28>
    3520:	25 e0       	ldi	r18, 0x05	; 5
    3522:	ae 01       	movw	r20, r28
    3524:	4f 5a       	subi	r20, 0xAF	; 175
    3526:	5f 4f       	sbci	r21, 0xFF	; 255
    3528:	60 e1       	ldi	r22, 0x10	; 16
    352a:	8e 2d       	mov	r24, r14
    352c:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3530:	f8 2e       	mov	r15, r24
    3532:	83 e6       	ldi	r24, 0x63	; 99
    3534:	f8 12       	cpse	r15, r24
    3536:	1c c0       	rjmp	.+56     	; 0x3570 <get_MOTOR_ENCODER+0x80>
    3538:	81 ec       	ldi	r24, 0xC1	; 193
    353a:	8e 0d       	add	r24, r14
    353c:	1f 92       	push	r1
    353e:	8f 93       	push	r24
    3540:	ce 01       	movw	r24, r28
    3542:	8a 5a       	subi	r24, 0xAA	; 170
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	9f 93       	push	r25
    3548:	8f 93       	push	r24
    354a:	8e 01       	movw	r16, r28
    354c:	0f 5f       	subi	r16, 0xFF	; 255
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	1f 93       	push	r17
    3552:	0f 93       	push	r16
    3554:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3558:	b8 01       	movw	r22, r16
    355a:	86 e3       	ldi	r24, 0x36	; 54
    355c:	91 e0       	ldi	r25, 0x01	; 1
    355e:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	30 c0       	rjmp	.+96     	; 0x35d0 <get_MOTOR_ENCODER+0xe0>
    3570:	62 96       	adiw	r28, 0x12	; 18
    3572:	8f ad       	ldd	r24, Y+63	; 0x3f
    3574:	62 97       	sbiw	r28, 0x12	; 18
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a0 e0       	ldi	r26, 0x00	; 0
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	78 2f       	mov	r23, r24
    357e:	66 27       	eor	r22, r22
    3580:	55 27       	eor	r21, r21
    3582:	44 27       	eor	r20, r20
    3584:	63 96       	adiw	r28, 0x13	; 19
    3586:	9f ad       	ldd	r25, Y+63	; 0x3f
    3588:	63 97       	sbiw	r28, 0x13	; 19
    358a:	89 2f       	mov	r24, r25
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a0 e0       	ldi	r26, 0x00	; 0
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	dc 01       	movw	r26, r24
    3594:	99 27       	eor	r25, r25
    3596:	88 27       	eor	r24, r24
    3598:	84 2b       	or	r24, r20
    359a:	95 2b       	or	r25, r21
    359c:	a6 2b       	or	r26, r22
    359e:	b7 2b       	or	r27, r23
    35a0:	64 96       	adiw	r28, 0x14	; 20
    35a2:	4f ad       	ldd	r20, Y+63	; 0x3f
    35a4:	64 97       	sbiw	r28, 0x14	; 20
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	76 2f       	mov	r23, r22
    35ae:	65 2f       	mov	r22, r21
    35b0:	54 2f       	mov	r21, r20
    35b2:	44 27       	eor	r20, r20
    35b4:	84 2b       	or	r24, r20
    35b6:	95 2b       	or	r25, r21
    35b8:	a6 2b       	or	r26, r22
    35ba:	b7 2b       	or	r27, r23
    35bc:	65 96       	adiw	r28, 0x15	; 21
    35be:	2f ad       	ldd	r18, Y+63	; 0x3f
    35c0:	65 97       	sbiw	r28, 0x15	; 21
    35c2:	82 2b       	or	r24, r18
    35c4:	f8 01       	movw	r30, r16
    35c6:	80 83       	st	Z, r24
    35c8:	91 83       	std	Z+1, r25	; 0x01
    35ca:	a2 83       	std	Z+2, r26	; 0x02
    35cc:	b3 83       	std	Z+3, r27	; 0x03
    35ce:	f1 2c       	mov	r15, r1
    35d0:	8f 2d       	mov	r24, r15
    35d2:	c2 58       	subi	r28, 0x82	; 130
    35d4:	df 4f       	sbci	r29, 0xFF	; 255
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	08 95       	ret

000035e8 <get_MOTOR_FLOAT>:
    35e8:	cf 92       	push	r12
    35ea:	df 92       	push	r13
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	c9 57       	subi	r28, 0x79	; 121
    35fe:	d1 09       	sbc	r29, r1
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	e8 2e       	mov	r14, r24
    3606:	8a 01       	movw	r16, r20
    3608:	87 e2       	ldi	r24, 0x27	; 39
    360a:	e1 e3       	ldi	r30, 0x31	; 49
    360c:	fe ea       	ldi	r31, 0xAE	; 174
    360e:	de 01       	movw	r26, r28
    3610:	ad 5a       	subi	r26, 0xAD	; 173
    3612:	bf 4f       	sbci	r27, 0xFF	; 255
    3614:	01 90       	ld	r0, Z+
    3616:	0d 92       	st	X+, r0
    3618:	8a 95       	dec	r24
    361a:	e1 f7       	brne	.-8      	; 0x3614 <get_MOTOR_FLOAT+0x2c>
    361c:	22 e0       	ldi	r18, 0x02	; 2
    361e:	ae 01       	movw	r20, r28
    3620:	4f 5a       	subi	r20, 0xAF	; 175
    3622:	5f 4f       	sbci	r21, 0xFF	; 255
    3624:	8e 2d       	mov	r24, r14
    3626:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    362a:	f8 2e       	mov	r15, r24
    362c:	83 e6       	ldi	r24, 0x63	; 99
    362e:	f8 12       	cpse	r15, r24
    3630:	25 c0       	rjmp	.+74     	; 0x367c <get_MOTOR_FLOAT+0x94>
    3632:	81 ec       	ldi	r24, 0xC1	; 193
    3634:	8e 0d       	add	r24, r14
    3636:	1f 92       	push	r1
    3638:	8f 93       	push	r24
    363a:	ce 01       	movw	r24, r28
    363c:	8d 5a       	subi	r24, 0xAD	; 173
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	9f 93       	push	r25
    3642:	8f 93       	push	r24
    3644:	fe 01       	movw	r30, r28
    3646:	31 96       	adiw	r30, 0x01	; 1
    3648:	6f 01       	movw	r12, r30
    364a:	ff 93       	push	r31
    364c:	ef 93       	push	r30
    364e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3652:	b6 01       	movw	r22, r12
    3654:	86 e3       	ldi	r24, 0x36	; 54
    3656:	91 e0       	ldi	r25, 0x01	; 1
    3658:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e8       	ldi	r25, 0x80	; 128
    3660:	a6 e2       	ldi	r26, 0x26	; 38
    3662:	b4 ec       	ldi	r27, 0xC4	; 196
    3664:	f8 01       	movw	r30, r16
    3666:	80 83       	st	Z, r24
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	a2 83       	std	Z+2, r26	; 0x02
    366c:	b3 83       	std	Z+3, r27	; 0x03
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	1c c0       	rjmp	.+56     	; 0x36b4 <get_MOTOR_FLOAT+0xcc>
    367c:	62 96       	adiw	r28, 0x12	; 18
    367e:	6f ad       	ldd	r22, Y+63	; 0x3f
    3680:	62 97       	sbiw	r28, 0x12	; 18
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	76 2f       	mov	r23, r22
    3686:	66 27       	eor	r22, r22
    3688:	63 96       	adiw	r28, 0x13	; 19
    368a:	8f ad       	ldd	r24, Y+63	; 0x3f
    368c:	63 97       	sbiw	r28, 0x13	; 19
    368e:	68 2b       	or	r22, r24
    3690:	07 2e       	mov	r0, r23
    3692:	00 0c       	add	r0, r0
    3694:	88 0b       	sbc	r24, r24
    3696:	99 0b       	sbc	r25, r25
    3698:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    36a8:	f8 01       	movw	r30, r16
    36aa:	60 83       	st	Z, r22
    36ac:	71 83       	std	Z+1, r23	; 0x01
    36ae:	82 83       	std	Z+2, r24	; 0x02
    36b0:	93 83       	std	Z+3, r25	; 0x03
    36b2:	f1 2c       	mov	r15, r1
    36b4:	8f 2d       	mov	r24, r15
    36b6:	c7 58       	subi	r28, 0x87	; 135
    36b8:	df 4f       	sbci	r29, 0xFF	; 255
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	ff 90       	pop	r15
    36c8:	ef 90       	pop	r14
    36ca:	df 90       	pop	r13
    36cc:	cf 90       	pop	r12
    36ce:	08 95       	ret

000036d0 <get_MOTOR_MAXCURRENT>:
    36d0:	cf 92       	push	r12
    36d2:	df 92       	push	r13
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	c4 58       	subi	r28, 0x84	; 132
    36e6:	d1 09       	sbc	r29, r1
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	e8 2e       	mov	r14, r24
    36ee:	8b 01       	movw	r16, r22
    36f0:	8c e2       	ldi	r24, 0x2C	; 44
    36f2:	e8 e5       	ldi	r30, 0x58	; 88
    36f4:	fe ea       	ldi	r31, 0xAE	; 174
    36f6:	de 01       	movw	r26, r28
    36f8:	11 96       	adiw	r26, 0x01	; 1
    36fa:	01 90       	ld	r0, Z+
    36fc:	0d 92       	st	X+, r0
    36fe:	8a 95       	dec	r24
    3700:	e1 f7       	brne	.-8      	; 0x36fa <get_MOTOR_MAXCURRENT+0x2a>
    3702:	28 e0       	ldi	r18, 0x08	; 8
    3704:	ae 01       	movw	r20, r28
    3706:	43 58       	subi	r20, 0x83	; 131
    3708:	5f 4f       	sbci	r21, 0xFF	; 255
    370a:	67 e8       	ldi	r22, 0x87	; 135
    370c:	8e 2d       	mov	r24, r14
    370e:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3712:	f8 2e       	mov	r15, r24
    3714:	83 e6       	ldi	r24, 0x63	; 99
    3716:	f8 12       	cpse	r15, r24
    3718:	1b c0       	rjmp	.+54     	; 0x3750 <get_MOTOR_MAXCURRENT+0x80>
    371a:	81 ec       	ldi	r24, 0xC1	; 193
    371c:	8e 0d       	add	r24, r14
    371e:	1f 92       	push	r1
    3720:	8f 93       	push	r24
    3722:	ce 01       	movw	r24, r28
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	8e 01       	movw	r16, r28
    372c:	03 5d       	subi	r16, 0xD3	; 211
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	1f 93       	push	r17
    3732:	0f 93       	push	r16
    3734:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3738:	b8 01       	movw	r22, r16
    373a:	86 e3       	ldi	r24, 0x36	; 54
    373c:	91 e0       	ldi	r25, 0x01	; 1
    373e:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	45 c0       	rjmp	.+138    	; 0x37da <get_MOTOR_MAXCURRENT+0x10a>
    3750:	ee 96       	adiw	r28, 0x3e	; 62
    3752:	8f ad       	ldd	r24, Y+63	; 0x3f
    3754:	ee 97       	sbiw	r28, 0x3e	; 62
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a0 e0       	ldi	r26, 0x00	; 0
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	f8 2e       	mov	r15, r24
    375e:	ee 24       	eor	r14, r14
    3760:	dd 24       	eor	r13, r13
    3762:	cc 24       	eor	r12, r12
    3764:	ef 96       	adiw	r28, 0x3f	; 63
    3766:	4f ad       	ldd	r20, Y+63	; 0x3f
    3768:	ef 97       	sbiw	r28, 0x3f	; 63
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	da 01       	movw	r26, r20
    3772:	99 27       	eor	r25, r25
    3774:	88 27       	eor	r24, r24
    3776:	8c 29       	or	r24, r12
    3778:	9d 29       	or	r25, r13
    377a:	ae 29       	or	r26, r14
    377c:	bf 29       	or	r27, r15
    377e:	c1 58       	subi	r28, 0x81	; 129
    3780:	df 4f       	sbci	r29, 0xFF	; 255
    3782:	48 81       	ld	r20, Y
    3784:	cf 57       	subi	r28, 0x7F	; 127
    3786:	d0 40       	sbci	r29, 0x00	; 0
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	76 2f       	mov	r23, r22
    3790:	65 2f       	mov	r22, r21
    3792:	54 2f       	mov	r21, r20
    3794:	44 27       	eor	r20, r20
    3796:	84 2b       	or	r24, r20
    3798:	95 2b       	or	r25, r21
    379a:	a6 2b       	or	r26, r22
    379c:	b7 2b       	or	r27, r23
    379e:	c0 58       	subi	r28, 0x80	; 128
    37a0:	df 4f       	sbci	r29, 0xFF	; 255
    37a2:	28 81       	ld	r18, Y
    37a4:	c0 58       	subi	r28, 0x80	; 128
    37a6:	d0 40       	sbci	r29, 0x00	; 0
    37a8:	82 2b       	or	r24, r18
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	aa 1f       	adc	r26, r26
    37b0:	bb 1f       	adc	r27, r27
    37b2:	ac 01       	movw	r20, r24
    37b4:	bd 01       	movw	r22, r26
    37b6:	44 0f       	add	r20, r20
    37b8:	55 1f       	adc	r21, r21
    37ba:	66 1f       	adc	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	44 0f       	add	r20, r20
    37c0:	55 1f       	adc	r21, r21
    37c2:	66 1f       	adc	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	84 0f       	add	r24, r20
    37c8:	95 1f       	adc	r25, r21
    37ca:	a6 1f       	adc	r26, r22
    37cc:	b7 1f       	adc	r27, r23
    37ce:	f8 01       	movw	r30, r16
    37d0:	80 83       	st	Z, r24
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	a2 83       	std	Z+2, r26	; 0x02
    37d6:	b3 83       	std	Z+3, r27	; 0x03
    37d8:	f1 2c       	mov	r15, r1
    37da:	8f 2d       	mov	r24, r15
    37dc:	cc 57       	subi	r28, 0x7C	; 124
    37de:	df 4f       	sbci	r29, 0xFF	; 255
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	df 90       	pop	r13
    37f2:	cf 90       	pop	r12
    37f4:	08 95       	ret

000037f6 <get_MOTOR_PID>:
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	c1 59       	subi	r28, 0x91	; 145
    3808:	d1 09       	sbc	r29, r1
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	f8 2e       	mov	r15, r24
    3810:	8b 01       	movw	r16, r22
    3812:	85 e2       	ldi	r24, 0x25	; 37
    3814:	e4 e8       	ldi	r30, 0x84	; 132
    3816:	fe ea       	ldi	r31, 0xAE	; 174
    3818:	de 01       	movw	r26, r28
    381a:	11 96       	adiw	r26, 0x01	; 1
    381c:	01 90       	ld	r0, Z+
    381e:	0d 92       	st	X+, r0
    3820:	8a 95       	dec	r24
    3822:	e1 f7       	brne	.-8      	; 0x381c <get_MOTOR_PID+0x26>
    3824:	2c e1       	ldi	r18, 0x1C	; 28
    3826:	ae 01       	movw	r20, r28
    3828:	4a 58       	subi	r20, 0x8A	; 138
    382a:	5f 4f       	sbci	r21, 0xFF	; 255
    382c:	6f e3       	ldi	r22, 0x3F	; 63
    382e:	8f 2d       	mov	r24, r15
    3830:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3834:	e8 2e       	mov	r14, r24
    3836:	83 e6       	ldi	r24, 0x63	; 99
    3838:	e8 12       	cpse	r14, r24
    383a:	1b c0       	rjmp	.+54     	; 0x3872 <get_MOTOR_PID+0x7c>
    383c:	81 ec       	ldi	r24, 0xC1	; 193
    383e:	8f 0d       	add	r24, r15
    3840:	1f 92       	push	r1
    3842:	8f 93       	push	r24
    3844:	ce 01       	movw	r24, r28
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	8e 01       	movw	r16, r28
    384e:	0a 5d       	subi	r16, 0xDA	; 218
    3850:	1f 4f       	sbci	r17, 0xFF	; 255
    3852:	1f 93       	push	r17
    3854:	0f 93       	push	r16
    3856:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    385a:	b8 01       	movw	r22, r16
    385c:	86 e3       	ldi	r24, 0x36	; 54
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	e5 c1       	rjmp	.+970    	; 0x3c3c <get_MOTOR_PID+0x446>
    3872:	e7 96       	adiw	r28, 0x37	; 55
    3874:	4f ad       	ldd	r20, Y+63	; 0x3f
    3876:	e7 97       	sbiw	r28, 0x37	; 55
    3878:	50 e0       	ldi	r21, 0x00	; 0
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	74 2f       	mov	r23, r20
    3880:	66 27       	eor	r22, r22
    3882:	55 27       	eor	r21, r21
    3884:	44 27       	eor	r20, r20
    3886:	e8 96       	adiw	r28, 0x38	; 56
    3888:	8f ad       	ldd	r24, Y+63	; 0x3f
    388a:	e8 97       	sbiw	r28, 0x38	; 56
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e0       	ldi	r26, 0x00	; 0
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	dc 01       	movw	r26, r24
    3894:	99 27       	eor	r25, r25
    3896:	88 27       	eor	r24, r24
    3898:	48 2b       	or	r20, r24
    389a:	59 2b       	or	r21, r25
    389c:	6a 2b       	or	r22, r26
    389e:	7b 2b       	or	r23, r27
    38a0:	e9 96       	adiw	r28, 0x39	; 57
    38a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    38a4:	e9 97       	sbiw	r28, 0x39	; 57
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	a0 e0       	ldi	r26, 0x00	; 0
    38aa:	b0 e0       	ldi	r27, 0x00	; 0
    38ac:	ba 2f       	mov	r27, r26
    38ae:	a9 2f       	mov	r26, r25
    38b0:	98 2f       	mov	r25, r24
    38b2:	88 27       	eor	r24, r24
    38b4:	84 2b       	or	r24, r20
    38b6:	95 2b       	or	r25, r21
    38b8:	a6 2b       	or	r26, r22
    38ba:	b7 2b       	or	r27, r23
    38bc:	ea 96       	adiw	r28, 0x3a	; 58
    38be:	2f ad       	ldd	r18, Y+63	; 0x3f
    38c0:	ea 97       	sbiw	r28, 0x3a	; 58
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	62 2b       	or	r22, r18
    38c8:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5a e3       	ldi	r21, 0x3A	; 58
    38d4:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    38d8:	f8 01       	movw	r30, r16
    38da:	60 83       	st	Z, r22
    38dc:	71 83       	std	Z+1, r23	; 0x01
    38de:	82 83       	std	Z+2, r24	; 0x02
    38e0:	93 83       	std	Z+3, r25	; 0x03
    38e2:	eb 96       	adiw	r28, 0x3b	; 59
    38e4:	4f ad       	ldd	r20, Y+63	; 0x3f
    38e6:	eb 97       	sbiw	r28, 0x3b	; 59
    38e8:	50 e0       	ldi	r21, 0x00	; 0
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	74 2f       	mov	r23, r20
    38f0:	66 27       	eor	r22, r22
    38f2:	55 27       	eor	r21, r21
    38f4:	44 27       	eor	r20, r20
    38f6:	ec 96       	adiw	r28, 0x3c	; 60
    38f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    38fa:	ec 97       	sbiw	r28, 0x3c	; 60
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	a0 e0       	ldi	r26, 0x00	; 0
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	dc 01       	movw	r26, r24
    3904:	99 27       	eor	r25, r25
    3906:	88 27       	eor	r24, r24
    3908:	48 2b       	or	r20, r24
    390a:	59 2b       	or	r21, r25
    390c:	6a 2b       	or	r22, r26
    390e:	7b 2b       	or	r23, r27
    3910:	ed 96       	adiw	r28, 0x3d	; 61
    3912:	8f ad       	ldd	r24, Y+63	; 0x3f
    3914:	ed 97       	sbiw	r28, 0x3d	; 61
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a0 e0       	ldi	r26, 0x00	; 0
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	ba 2f       	mov	r27, r26
    391e:	a9 2f       	mov	r26, r25
    3920:	98 2f       	mov	r25, r24
    3922:	88 27       	eor	r24, r24
    3924:	84 2b       	or	r24, r20
    3926:	95 2b       	or	r25, r21
    3928:	a6 2b       	or	r26, r22
    392a:	b7 2b       	or	r27, r23
    392c:	ee 96       	adiw	r28, 0x3e	; 62
    392e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3930:	ee 97       	sbiw	r28, 0x3e	; 62
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	62 2b       	or	r22, r18
    3938:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e8       	ldi	r20, 0x80	; 128
    3942:	5a e3       	ldi	r21, 0x3A	; 58
    3944:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    3948:	f8 01       	movw	r30, r16
    394a:	64 83       	std	Z+4, r22	; 0x04
    394c:	75 83       	std	Z+5, r23	; 0x05
    394e:	86 83       	std	Z+6, r24	; 0x06
    3950:	97 83       	std	Z+7, r25	; 0x07
    3952:	ef 96       	adiw	r28, 0x3f	; 63
    3954:	4f ad       	ldd	r20, Y+63	; 0x3f
    3956:	ef 97       	sbiw	r28, 0x3f	; 63
    3958:	50 e0       	ldi	r21, 0x00	; 0
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	74 2f       	mov	r23, r20
    3960:	66 27       	eor	r22, r22
    3962:	55 27       	eor	r21, r21
    3964:	44 27       	eor	r20, r20
    3966:	c1 58       	subi	r28, 0x81	; 129
    3968:	df 4f       	sbci	r29, 0xFF	; 255
    396a:	88 81       	ld	r24, Y
    396c:	cf 57       	subi	r28, 0x7F	; 127
    396e:	d0 40       	sbci	r29, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	a0 e0       	ldi	r26, 0x00	; 0
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	dc 01       	movw	r26, r24
    3978:	99 27       	eor	r25, r25
    397a:	88 27       	eor	r24, r24
    397c:	48 2b       	or	r20, r24
    397e:	59 2b       	or	r21, r25
    3980:	6a 2b       	or	r22, r26
    3982:	7b 2b       	or	r23, r27
    3984:	c0 58       	subi	r28, 0x80	; 128
    3986:	df 4f       	sbci	r29, 0xFF	; 255
    3988:	88 81       	ld	r24, Y
    398a:	c0 58       	subi	r28, 0x80	; 128
    398c:	d0 40       	sbci	r29, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	a0 e0       	ldi	r26, 0x00	; 0
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	ba 2f       	mov	r27, r26
    3996:	a9 2f       	mov	r26, r25
    3998:	98 2f       	mov	r25, r24
    399a:	88 27       	eor	r24, r24
    399c:	84 2b       	or	r24, r20
    399e:	95 2b       	or	r25, r21
    39a0:	a6 2b       	or	r26, r22
    39a2:	b7 2b       	or	r27, r23
    39a4:	cf 57       	subi	r28, 0x7F	; 127
    39a6:	df 4f       	sbci	r29, 0xFF	; 255
    39a8:	28 81       	ld	r18, Y
    39aa:	c1 58       	subi	r28, 0x81	; 129
    39ac:	d0 40       	sbci	r29, 0x00	; 0
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	62 2b       	or	r22, r18
    39b4:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__floatsisf>
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e8       	ldi	r20, 0x80	; 128
    39be:	5a e3       	ldi	r21, 0x3A	; 58
    39c0:	0e 94 ad 2c 	call	0x595a	; 0x595a <__mulsf3>
    39c4:	f8 01       	movw	r30, r16
    39c6:	60 87       	std	Z+8, r22	; 0x08
    39c8:	71 87       	std	Z+9, r23	; 0x09
    39ca:	82 87       	std	Z+10, r24	; 0x0a
    39cc:	93 87       	std	Z+11, r25	; 0x0b
    39ce:	ce 57       	subi	r28, 0x7E	; 126
    39d0:	df 4f       	sbci	r29, 0xFF	; 255
    39d2:	88 81       	ld	r24, Y
    39d4:	c2 58       	subi	r28, 0x82	; 130
    39d6:	d0 40       	sbci	r29, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	a0 e0       	ldi	r26, 0x00	; 0
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	78 2f       	mov	r23, r24
    39e0:	66 27       	eor	r22, r22
    39e2:	55 27       	eor	r21, r21
    39e4:	44 27       	eor	r20, r20
    39e6:	cd 57       	subi	r28, 0x7D	; 125
    39e8:	df 4f       	sbci	r29, 0xFF	; 255
    39ea:	98 81       	ld	r25, Y
    39ec:	c3 58       	subi	r28, 0x83	; 131
    39ee:	d0 40       	sbci	r29, 0x00	; 0
    39f0:	89 2f       	mov	r24, r25
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	a0 e0       	ldi	r26, 0x00	; 0
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	dc 01       	movw	r26, r24
    39fa:	99 27       	eor	r25, r25
    39fc:	88 27       	eor	r24, r24
    39fe:	84 2b       	or	r24, r20
    3a00:	95 2b       	or	r25, r21
    3a02:	a6 2b       	or	r26, r22
    3a04:	b7 2b       	or	r27, r23
    3a06:	cc 57       	subi	r28, 0x7C	; 124
    3a08:	df 4f       	sbci	r29, 0xFF	; 255
    3a0a:	48 81       	ld	r20, Y
    3a0c:	c4 58       	subi	r28, 0x84	; 132
    3a0e:	d0 40       	sbci	r29, 0x00	; 0
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	76 2f       	mov	r23, r22
    3a18:	65 2f       	mov	r22, r21
    3a1a:	54 2f       	mov	r21, r20
    3a1c:	44 27       	eor	r20, r20
    3a1e:	84 2b       	or	r24, r20
    3a20:	95 2b       	or	r25, r21
    3a22:	a6 2b       	or	r26, r22
    3a24:	b7 2b       	or	r27, r23
    3a26:	cb 57       	subi	r28, 0x7B	; 123
    3a28:	df 4f       	sbci	r29, 0xFF	; 255
    3a2a:	28 81       	ld	r18, Y
    3a2c:	c5 58       	subi	r28, 0x85	; 133
    3a2e:	d0 40       	sbci	r29, 0x00	; 0
    3a30:	82 2b       	or	r24, r18
    3a32:	84 87       	std	Z+12, r24	; 0x0c
    3a34:	95 87       	std	Z+13, r25	; 0x0d
    3a36:	a6 87       	std	Z+14, r26	; 0x0e
    3a38:	b7 87       	std	Z+15, r27	; 0x0f
    3a3a:	ca 57       	subi	r28, 0x7A	; 122
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	88 81       	ld	r24, Y
    3a40:	c6 58       	subi	r28, 0x86	; 134
    3a42:	d0 40       	sbci	r29, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	a0 e0       	ldi	r26, 0x00	; 0
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	78 2f       	mov	r23, r24
    3a4c:	66 27       	eor	r22, r22
    3a4e:	55 27       	eor	r21, r21
    3a50:	44 27       	eor	r20, r20
    3a52:	c9 57       	subi	r28, 0x79	; 121
    3a54:	df 4f       	sbci	r29, 0xFF	; 255
    3a56:	98 81       	ld	r25, Y
    3a58:	c7 58       	subi	r28, 0x87	; 135
    3a5a:	d0 40       	sbci	r29, 0x00	; 0
    3a5c:	89 2f       	mov	r24, r25
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	a0 e0       	ldi	r26, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	dc 01       	movw	r26, r24
    3a66:	99 27       	eor	r25, r25
    3a68:	88 27       	eor	r24, r24
    3a6a:	84 2b       	or	r24, r20
    3a6c:	95 2b       	or	r25, r21
    3a6e:	a6 2b       	or	r26, r22
    3a70:	b7 2b       	or	r27, r23
    3a72:	c8 57       	subi	r28, 0x78	; 120
    3a74:	df 4f       	sbci	r29, 0xFF	; 255
    3a76:	48 81       	ld	r20, Y
    3a78:	c8 58       	subi	r28, 0x88	; 136
    3a7a:	d0 40       	sbci	r29, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	70 e0       	ldi	r23, 0x00	; 0
    3a82:	76 2f       	mov	r23, r22
    3a84:	65 2f       	mov	r22, r21
    3a86:	54 2f       	mov	r21, r20
    3a88:	44 27       	eor	r20, r20
    3a8a:	84 2b       	or	r24, r20
    3a8c:	95 2b       	or	r25, r21
    3a8e:	a6 2b       	or	r26, r22
    3a90:	b7 2b       	or	r27, r23
    3a92:	c7 57       	subi	r28, 0x77	; 119
    3a94:	df 4f       	sbci	r29, 0xFF	; 255
    3a96:	28 81       	ld	r18, Y
    3a98:	c9 58       	subi	r28, 0x89	; 137
    3a9a:	d0 40       	sbci	r29, 0x00	; 0
    3a9c:	82 2b       	or	r24, r18
    3a9e:	80 8b       	std	Z+16, r24	; 0x10
    3aa0:	91 8b       	std	Z+17, r25	; 0x11
    3aa2:	a2 8b       	std	Z+18, r26	; 0x12
    3aa4:	b3 8b       	std	Z+19, r27	; 0x13
    3aa6:	c6 57       	subi	r28, 0x76	; 118
    3aa8:	df 4f       	sbci	r29, 0xFF	; 255
    3aaa:	88 81       	ld	r24, Y
    3aac:	ca 58       	subi	r28, 0x8A	; 138
    3aae:	d0 40       	sbci	r29, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a0 e0       	ldi	r26, 0x00	; 0
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	78 2f       	mov	r23, r24
    3ab8:	66 27       	eor	r22, r22
    3aba:	55 27       	eor	r21, r21
    3abc:	44 27       	eor	r20, r20
    3abe:	c5 57       	subi	r28, 0x75	; 117
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	98 81       	ld	r25, Y
    3ac4:	cb 58       	subi	r28, 0x8B	; 139
    3ac6:	d0 40       	sbci	r29, 0x00	; 0
    3ac8:	89 2f       	mov	r24, r25
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	a0 e0       	ldi	r26, 0x00	; 0
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	99 27       	eor	r25, r25
    3ad4:	88 27       	eor	r24, r24
    3ad6:	84 2b       	or	r24, r20
    3ad8:	95 2b       	or	r25, r21
    3ada:	a6 2b       	or	r26, r22
    3adc:	b7 2b       	or	r27, r23
    3ade:	c4 57       	subi	r28, 0x74	; 116
    3ae0:	df 4f       	sbci	r29, 0xFF	; 255
    3ae2:	48 81       	ld	r20, Y
    3ae4:	cc 58       	subi	r28, 0x8C	; 140
    3ae6:	d0 40       	sbci	r29, 0x00	; 0
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	76 2f       	mov	r23, r22
    3af0:	65 2f       	mov	r22, r21
    3af2:	54 2f       	mov	r21, r20
    3af4:	44 27       	eor	r20, r20
    3af6:	84 2b       	or	r24, r20
    3af8:	95 2b       	or	r25, r21
    3afa:	a6 2b       	or	r26, r22
    3afc:	b7 2b       	or	r27, r23
    3afe:	c3 57       	subi	r28, 0x73	; 115
    3b00:	df 4f       	sbci	r29, 0xFF	; 255
    3b02:	28 81       	ld	r18, Y
    3b04:	cd 58       	subi	r28, 0x8D	; 141
    3b06:	d0 40       	sbci	r29, 0x00	; 0
    3b08:	82 2b       	or	r24, r18
    3b0a:	84 8b       	std	Z+20, r24	; 0x14
    3b0c:	95 8b       	std	Z+21, r25	; 0x15
    3b0e:	a6 8b       	std	Z+22, r26	; 0x16
    3b10:	b7 8b       	std	Z+23, r27	; 0x17
    3b12:	c2 57       	subi	r28, 0x72	; 114
    3b14:	df 4f       	sbci	r29, 0xFF	; 255
    3b16:	88 81       	ld	r24, Y
    3b18:	ce 58       	subi	r28, 0x8E	; 142
    3b1a:	d0 40       	sbci	r29, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	a0 e0       	ldi	r26, 0x00	; 0
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	78 2f       	mov	r23, r24
    3b24:	66 27       	eor	r22, r22
    3b26:	55 27       	eor	r21, r21
    3b28:	44 27       	eor	r20, r20
    3b2a:	c1 57       	subi	r28, 0x71	; 113
    3b2c:	df 4f       	sbci	r29, 0xFF	; 255
    3b2e:	98 81       	ld	r25, Y
    3b30:	cf 58       	subi	r28, 0x8F	; 143
    3b32:	d0 40       	sbci	r29, 0x00	; 0
    3b34:	89 2f       	mov	r24, r25
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	a0 e0       	ldi	r26, 0x00	; 0
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	99 27       	eor	r25, r25
    3b40:	88 27       	eor	r24, r24
    3b42:	84 2b       	or	r24, r20
    3b44:	95 2b       	or	r25, r21
    3b46:	a6 2b       	or	r26, r22
    3b48:	b7 2b       	or	r27, r23
    3b4a:	c0 57       	subi	r28, 0x70	; 112
    3b4c:	df 4f       	sbci	r29, 0xFF	; 255
    3b4e:	48 81       	ld	r20, Y
    3b50:	c0 59       	subi	r28, 0x90	; 144
    3b52:	d0 40       	sbci	r29, 0x00	; 0
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	76 2f       	mov	r23, r22
    3b5c:	65 2f       	mov	r22, r21
    3b5e:	54 2f       	mov	r21, r20
    3b60:	44 27       	eor	r20, r20
    3b62:	84 2b       	or	r24, r20
    3b64:	95 2b       	or	r25, r21
    3b66:	a6 2b       	or	r26, r22
    3b68:	b7 2b       	or	r27, r23
    3b6a:	cf 56       	subi	r28, 0x6F	; 111
    3b6c:	df 4f       	sbci	r29, 0xFF	; 255
    3b6e:	28 81       	ld	r18, Y
    3b70:	c1 59       	subi	r28, 0x91	; 145
    3b72:	d0 40       	sbci	r29, 0x00	; 0
    3b74:	82 2b       	or	r24, r18
    3b76:	80 8f       	std	Z+24, r24	; 0x18
    3b78:	91 8f       	std	Z+25, r25	; 0x19
    3b7a:	a2 8f       	std	Z+26, r26	; 0x1a
    3b7c:	b3 8f       	std	Z+27, r27	; 0x1b
    3b7e:	20 e1       	ldi	r18, 0x10	; 16
    3b80:	ae 01       	movw	r20, r28
    3b82:	4a 58       	subi	r20, 0x8A	; 138
    3b84:	5f 4f       	sbci	r21, 0xFF	; 255
    3b86:	67 e3       	ldi	r22, 0x37	; 55
    3b88:	8f 2d       	mov	r24, r15
    3b8a:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3b8e:	e8 2e       	mov	r14, r24
    3b90:	f3 e6       	ldi	r31, 0x63	; 99
    3b92:	8f 13       	cpse	r24, r31
    3b94:	1b c0       	rjmp	.+54     	; 0x3bcc <get_MOTOR_PID+0x3d6>
    3b96:	81 ec       	ldi	r24, 0xC1	; 193
    3b98:	8f 0d       	add	r24, r15
    3b9a:	1f 92       	push	r1
    3b9c:	8f 93       	push	r24
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	9f 93       	push	r25
    3ba4:	8f 93       	push	r24
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	0a 5d       	subi	r16, 0xDA	; 218
    3baa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bac:	1f 93       	push	r17
    3bae:	0f 93       	push	r16
    3bb0:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3bb4:	b8 01       	movw	r22, r16
    3bb6:	86 e3       	ldi	r24, 0x36	; 54
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	38 c0       	rjmp	.+112    	; 0x3c3c <get_MOTOR_PID+0x446>
    3bcc:	ce 57       	subi	r28, 0x7E	; 126
    3bce:	df 4f       	sbci	r29, 0xFF	; 255
    3bd0:	88 81       	ld	r24, Y
    3bd2:	c2 58       	subi	r28, 0x82	; 130
    3bd4:	d0 40       	sbci	r29, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	a0 e0       	ldi	r26, 0x00	; 0
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	78 2f       	mov	r23, r24
    3bde:	66 27       	eor	r22, r22
    3be0:	55 27       	eor	r21, r21
    3be2:	44 27       	eor	r20, r20
    3be4:	cd 57       	subi	r28, 0x7D	; 125
    3be6:	df 4f       	sbci	r29, 0xFF	; 255
    3be8:	98 81       	ld	r25, Y
    3bea:	c3 58       	subi	r28, 0x83	; 131
    3bec:	d0 40       	sbci	r29, 0x00	; 0
    3bee:	89 2f       	mov	r24, r25
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	a0 e0       	ldi	r26, 0x00	; 0
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	99 27       	eor	r25, r25
    3bfa:	88 27       	eor	r24, r24
    3bfc:	84 2b       	or	r24, r20
    3bfe:	95 2b       	or	r25, r21
    3c00:	a6 2b       	or	r26, r22
    3c02:	b7 2b       	or	r27, r23
    3c04:	cc 57       	subi	r28, 0x7C	; 124
    3c06:	df 4f       	sbci	r29, 0xFF	; 255
    3c08:	48 81       	ld	r20, Y
    3c0a:	c4 58       	subi	r28, 0x84	; 132
    3c0c:	d0 40       	sbci	r29, 0x00	; 0
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	76 2f       	mov	r23, r22
    3c16:	65 2f       	mov	r22, r21
    3c18:	54 2f       	mov	r21, r20
    3c1a:	44 27       	eor	r20, r20
    3c1c:	84 2b       	or	r24, r20
    3c1e:	95 2b       	or	r25, r21
    3c20:	a6 2b       	or	r26, r22
    3c22:	b7 2b       	or	r27, r23
    3c24:	cb 57       	subi	r28, 0x7B	; 123
    3c26:	df 4f       	sbci	r29, 0xFF	; 255
    3c28:	28 81       	ld	r18, Y
    3c2a:	c5 58       	subi	r28, 0x85	; 133
    3c2c:	d0 40       	sbci	r29, 0x00	; 0
    3c2e:	82 2b       	or	r24, r18
    3c30:	f8 01       	movw	r30, r16
    3c32:	84 8f       	std	Z+28, r24	; 0x1c
    3c34:	95 8f       	std	Z+29, r25	; 0x1d
    3c36:	a6 8f       	std	Z+30, r26	; 0x1e
    3c38:	b7 8f       	std	Z+31, r27	; 0x1f
    3c3a:	e1 2c       	mov	r14, r1
    3c3c:	8e 2d       	mov	r24, r14
    3c3e:	cf 56       	subi	r28, 0x6F	; 111
    3c40:	df 4f       	sbci	r29, 0xFF	; 255
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	ff 90       	pop	r15
    3c50:	ef 90       	pop	r14
    3c52:	08 95       	ret

00003c54 <get_MOTOR_S4MODE>:
    3c54:	cf 92       	push	r12
    3c56:	df 92       	push	r13
    3c58:	ef 92       	push	r14
    3c5a:	ff 92       	push	r15
    3c5c:	0f 93       	push	r16
    3c5e:	1f 93       	push	r17
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	c7 57       	subi	r28, 0x77	; 119
    3c6a:	d1 09       	sbc	r29, r1
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	08 2f       	mov	r16, r24
    3c72:	7b 01       	movw	r14, r22
    3c74:	84 e2       	ldi	r24, 0x24	; 36
    3c76:	e9 ea       	ldi	r30, 0xA9	; 169
    3c78:	fe ea       	ldi	r31, 0xAE	; 174
    3c7a:	de 01       	movw	r26, r28
    3c7c:	11 96       	adiw	r26, 0x01	; 1
    3c7e:	01 90       	ld	r0, Z+
    3c80:	0d 92       	st	X+, r0
    3c82:	8a 95       	dec	r24
    3c84:	e1 f7       	brne	.-8      	; 0x3c7e <get_MOTOR_S4MODE+0x2a>
    3c86:	23 e0       	ldi	r18, 0x03	; 3
    3c88:	ae 01       	movw	r20, r28
    3c8a:	4b 58       	subi	r20, 0x8B	; 139
    3c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8e:	6b e4       	ldi	r22, 0x4B	; 75
    3c90:	80 2f       	mov	r24, r16
    3c92:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3c96:	18 2f       	mov	r17, r24
    3c98:	83 36       	cpi	r24, 0x63	; 99
    3c9a:	f1 f4       	brne	.+60     	; 0x3cd8 <get_MOTOR_S4MODE+0x84>
    3c9c:	0f 53       	subi	r16, 0x3F	; 63
    3c9e:	1f 92       	push	r1
    3ca0:	0f 93       	push	r16
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	9f 93       	push	r25
    3ca8:	8f 93       	push	r24
    3caa:	6e 01       	movw	r12, r28
    3cac:	85 e2       	ldi	r24, 0x25	; 37
    3cae:	c8 0e       	add	r12, r24
    3cb0:	d1 1c       	adc	r13, r1
    3cb2:	df 92       	push	r13
    3cb4:	cf 92       	push	r12
    3cb6:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3cba:	b6 01       	movw	r22, r12
    3cbc:	86 e3       	ldi	r24, 0x36	; 54
    3cbe:	91 e0       	ldi	r25, 0x01	; 1
    3cc0:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3cc4:	8f ef       	ldi	r24, 0xFF	; 255
    3cc6:	f7 01       	movw	r30, r14
    3cc8:	80 83       	st	Z, r24
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	06 c0       	rjmp	.+12     	; 0x3ce4 <get_MOTOR_S4MODE+0x90>
    3cd8:	e7 96       	adiw	r28, 0x37	; 55
    3cda:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cdc:	e7 97       	sbiw	r28, 0x37	; 55
    3cde:	f7 01       	movw	r30, r14
    3ce0:	80 83       	st	Z, r24
    3ce2:	10 e0       	ldi	r17, 0x00	; 0
    3ce4:	81 2f       	mov	r24, r17
    3ce6:	c9 58       	subi	r28, 0x89	; 137
    3ce8:	df 4f       	sbci	r29, 0xFF	; 255
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	ff 90       	pop	r15
    3cf8:	ef 90       	pop	r14
    3cfa:	df 90       	pop	r13
    3cfc:	cf 90       	pop	r12
    3cfe:	08 95       	ret

00003d00 <get_MOTOR_SPEED>:
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
    3d10:	c1 58       	subi	r28, 0x81	; 129
    3d12:	d1 09       	sbc	r29, r1
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	de bf       	out	0x3e, r29	; 62
    3d18:	e8 2e       	mov	r14, r24
    3d1a:	8b 01       	movw	r16, r22
    3d1c:	8c e2       	ldi	r24, 0x2C	; 44
    3d1e:	ed ec       	ldi	r30, 0xCD	; 205
    3d20:	fe ea       	ldi	r31, 0xAE	; 174
    3d22:	de 01       	movw	r26, r28
    3d24:	aa 5a       	subi	r26, 0xAA	; 170
    3d26:	bf 4f       	sbci	r27, 0xFF	; 255
    3d28:	01 90       	ld	r0, Z+
    3d2a:	0d 92       	st	X+, r0
    3d2c:	8a 95       	dec	r24
    3d2e:	e1 f7       	brne	.-8      	; 0x3d28 <get_MOTOR_SPEED+0x28>
    3d30:	25 e0       	ldi	r18, 0x05	; 5
    3d32:	ae 01       	movw	r20, r28
    3d34:	4f 5a       	subi	r20, 0xAF	; 175
    3d36:	5f 4f       	sbci	r21, 0xFF	; 255
    3d38:	62 e1       	ldi	r22, 0x12	; 18
    3d3a:	8e 2d       	mov	r24, r14
    3d3c:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3d40:	f8 2e       	mov	r15, r24
    3d42:	83 e6       	ldi	r24, 0x63	; 99
    3d44:	f8 12       	cpse	r15, r24
    3d46:	1c c0       	rjmp	.+56     	; 0x3d80 <get_MOTOR_SPEED+0x80>
    3d48:	81 ec       	ldi	r24, 0xC1	; 193
    3d4a:	8e 0d       	add	r24, r14
    3d4c:	1f 92       	push	r1
    3d4e:	8f 93       	push	r24
    3d50:	ce 01       	movw	r24, r28
    3d52:	8a 5a       	subi	r24, 0xAA	; 170
    3d54:	9f 4f       	sbci	r25, 0xFF	; 255
    3d56:	9f 93       	push	r25
    3d58:	8f 93       	push	r24
    3d5a:	8e 01       	movw	r16, r28
    3d5c:	0f 5f       	subi	r16, 0xFF	; 255
    3d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d60:	1f 93       	push	r17
    3d62:	0f 93       	push	r16
    3d64:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3d68:	b8 01       	movw	r22, r16
    3d6a:	86 e3       	ldi	r24, 0x36	; 54
    3d6c:	91 e0       	ldi	r25, 0x01	; 1
    3d6e:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	30 c0       	rjmp	.+96     	; 0x3de0 <get_MOTOR_SPEED+0xe0>
    3d80:	62 96       	adiw	r28, 0x12	; 18
    3d82:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d84:	62 97       	sbiw	r28, 0x12	; 18
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	a0 e0       	ldi	r26, 0x00	; 0
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	78 2f       	mov	r23, r24
    3d8e:	66 27       	eor	r22, r22
    3d90:	55 27       	eor	r21, r21
    3d92:	44 27       	eor	r20, r20
    3d94:	63 96       	adiw	r28, 0x13	; 19
    3d96:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d98:	63 97       	sbiw	r28, 0x13	; 19
    3d9a:	89 2f       	mov	r24, r25
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	a0 e0       	ldi	r26, 0x00	; 0
    3da0:	b0 e0       	ldi	r27, 0x00	; 0
    3da2:	dc 01       	movw	r26, r24
    3da4:	99 27       	eor	r25, r25
    3da6:	88 27       	eor	r24, r24
    3da8:	84 2b       	or	r24, r20
    3daa:	95 2b       	or	r25, r21
    3dac:	a6 2b       	or	r26, r22
    3dae:	b7 2b       	or	r27, r23
    3db0:	64 96       	adiw	r28, 0x14	; 20
    3db2:	4f ad       	ldd	r20, Y+63	; 0x3f
    3db4:	64 97       	sbiw	r28, 0x14	; 20
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	76 2f       	mov	r23, r22
    3dbe:	65 2f       	mov	r22, r21
    3dc0:	54 2f       	mov	r21, r20
    3dc2:	44 27       	eor	r20, r20
    3dc4:	84 2b       	or	r24, r20
    3dc6:	95 2b       	or	r25, r21
    3dc8:	a6 2b       	or	r26, r22
    3dca:	b7 2b       	or	r27, r23
    3dcc:	65 96       	adiw	r28, 0x15	; 21
    3dce:	2f ad       	ldd	r18, Y+63	; 0x3f
    3dd0:	65 97       	sbiw	r28, 0x15	; 21
    3dd2:	82 2b       	or	r24, r18
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
    3dde:	f1 2c       	mov	r15, r1
    3de0:	8f 2d       	mov	r24, r15
    3de2:	cf 57       	subi	r28, 0x7F	; 127
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	08 95       	ret

00003df8 <get_MOTOR_STATUS>:
    3df8:	ef 92       	push	r14
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	c9 57       	subi	r28, 0x79	; 121
    3e0a:	d1 09       	sbc	r29, r1
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	e8 2e       	mov	r14, r24
    3e12:	8b 01       	movw	r16, r22
    3e14:	85 e2       	ldi	r24, 0x25	; 37
    3e16:	e9 ef       	ldi	r30, 0xF9	; 249
    3e18:	fe ea       	ldi	r31, 0xAE	; 174
    3e1a:	de 01       	movw	r26, r28
    3e1c:	af 5a       	subi	r26, 0xAF	; 175
    3e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e20:	01 90       	ld	r0, Z+
    3e22:	0d 92       	st	X+, r0
    3e24:	8a 95       	dec	r24
    3e26:	e1 f7       	brne	.-8      	; 0x3e20 <get_MOTOR_STATUS+0x28>
    3e28:	24 e0       	ldi	r18, 0x04	; 4
    3e2a:	ae 01       	movw	r20, r28
    3e2c:	4a 58       	subi	r20, 0x8A	; 138
    3e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e30:	6a e5       	ldi	r22, 0x5A	; 90
    3e32:	8e 2d       	mov	r24, r14
    3e34:	0e 94 17 19 	call	0x322e	; 0x322e <get_MOTOR>
    3e38:	f8 2e       	mov	r15, r24
    3e3a:	83 e6       	ldi	r24, 0x63	; 99
    3e3c:	f8 12       	cpse	r15, r24
    3e3e:	1d c0       	rjmp	.+58     	; 0x3e7a <get_MOTOR_STATUS+0x82>
    3e40:	8e 2d       	mov	r24, r14
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	cf 97       	sbiw	r24, 0x3f	; 63
    3e46:	9f 93       	push	r25
    3e48:	8f 93       	push	r24
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	8f 5a       	subi	r24, 0xAF	; 175
    3e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e50:	9f 93       	push	r25
    3e52:	8f 93       	push	r24
    3e54:	8e 01       	movw	r16, r28
    3e56:	0f 5f       	subi	r16, 0xFF	; 255
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	1f 93       	push	r17
    3e5c:	0f 93       	push	r16
    3e5e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3e62:	b8 01       	movw	r22, r16
    3e64:	86 e3       	ldi	r24, 0x36	; 54
    3e66:	91 e0       	ldi	r25, 0x01	; 1
    3e68:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	30 c0       	rjmp	.+96     	; 0x3eda <get_MOTOR_STATUS+0xe2>
    3e7a:	e7 96       	adiw	r28, 0x37	; 55
    3e7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e7e:	e7 97       	sbiw	r28, 0x37	; 55
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	a0 e0       	ldi	r26, 0x00	; 0
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	78 2f       	mov	r23, r24
    3e88:	66 27       	eor	r22, r22
    3e8a:	55 27       	eor	r21, r21
    3e8c:	44 27       	eor	r20, r20
    3e8e:	e8 96       	adiw	r28, 0x38	; 56
    3e90:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e92:	e8 97       	sbiw	r28, 0x38	; 56
    3e94:	89 2f       	mov	r24, r25
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	a0 e0       	ldi	r26, 0x00	; 0
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	99 27       	eor	r25, r25
    3ea0:	88 27       	eor	r24, r24
    3ea2:	84 2b       	or	r24, r20
    3ea4:	95 2b       	or	r25, r21
    3ea6:	a6 2b       	or	r26, r22
    3ea8:	b7 2b       	or	r27, r23
    3eaa:	e9 96       	adiw	r28, 0x39	; 57
    3eac:	4f ad       	ldd	r20, Y+63	; 0x3f
    3eae:	e9 97       	sbiw	r28, 0x39	; 57
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	76 2f       	mov	r23, r22
    3eb8:	65 2f       	mov	r22, r21
    3eba:	54 2f       	mov	r21, r20
    3ebc:	44 27       	eor	r20, r20
    3ebe:	84 2b       	or	r24, r20
    3ec0:	95 2b       	or	r25, r21
    3ec2:	a6 2b       	or	r26, r22
    3ec4:	b7 2b       	or	r27, r23
    3ec6:	ea 96       	adiw	r28, 0x3a	; 58
    3ec8:	2f ad       	ldd	r18, Y+63	; 0x3f
    3eca:	ea 97       	sbiw	r28, 0x3a	; 58
    3ecc:	82 2b       	or	r24, r18
    3ece:	f8 01       	movw	r30, r16
    3ed0:	80 83       	st	Z, r24
    3ed2:	91 83       	std	Z+1, r25	; 0x01
    3ed4:	a2 83       	std	Z+2, r26	; 0x02
    3ed6:	b3 83       	std	Z+3, r27	; 0x03
    3ed8:	f1 2c       	mov	r15, r1
    3eda:	8f 2d       	mov	r24, r15
    3edc:	c7 58       	subi	r28, 0x87	; 135
    3ede:	df 4f       	sbci	r29, 0xFF	; 255
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	08 95       	ret

00003ef2 <get_MOTOR_LIMITS>:
    3ef2:	ef 92       	push	r14
    3ef4:	ff 92       	push	r15
    3ef6:	1f 93       	push	r17
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <get_MOTOR_LIMITS+0xc>
    3efe:	00 d0       	rcall	.+0      	; 0x3f00 <get_MOTOR_LIMITS+0xe>
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	10 e0       	ldi	r17, 0x00	; 0
    3f06:	21 c0       	rjmp	.+66     	; 0x3f4a <get_MOTOR_LIMITS+0x58>
    3f08:	e1 2e       	mov	r14, r17
    3f0a:	f1 2c       	mov	r15, r1
    3f0c:	f7 01       	movw	r30, r14
    3f0e:	e0 5c       	subi	r30, 0xC0	; 192
    3f10:	f5 4d       	sbci	r31, 0xD5	; 213
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	80 83       	st	Z, r24
    3f16:	be 01       	movw	r22, r28
    3f18:	6f 5f       	subi	r22, 0xFF	; 255
    3f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1c:	80 e8       	ldi	r24, 0x80	; 128
    3f1e:	81 0f       	add	r24, r17
    3f20:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <get_MOTOR_STATUS>
    3f24:	83 36       	cpi	r24, 0x63	; 99
    3f26:	81 f0       	breq	.+32     	; 0x3f48 <get_MOTOR_LIMITS+0x56>
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    3f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    3f30:	a6 ff       	sbrs	r26, 6
    3f32:	06 c0       	rjmp	.+12     	; 0x3f40 <get_MOTOR_LIMITS+0x4e>
    3f34:	f7 01       	movw	r30, r14
    3f36:	e0 5c       	subi	r30, 0xC0	; 192
    3f38:	f5 4d       	sbci	r31, 0xD5	; 213
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	80 83       	st	Z, r24
    3f3e:	04 c0       	rjmp	.+8      	; 0x3f48 <get_MOTOR_LIMITS+0x56>
    3f40:	f7 01       	movw	r30, r14
    3f42:	e0 5c       	subi	r30, 0xC0	; 192
    3f44:	f5 4d       	sbci	r31, 0xD5	; 213
    3f46:	10 82       	st	Z, r1
    3f48:	1f 5f       	subi	r17, 0xFF	; 255
    3f4a:	13 30       	cpi	r17, 0x03	; 3
    3f4c:	e8 f2       	brcs	.-70     	; 0x3f08 <get_MOTOR_LIMITS+0x16>
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	24 96       	adiw	r28, 0x04	; 4
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	1f 91       	pop	r17
    3f5c:	ff 90       	pop	r15
    3f5e:	ef 90       	pop	r14
    3f60:	08 95       	ret

00003f62 <motorsMoving>:
    3f62:	ef 92       	push	r14
    3f64:	ff 92       	push	r15
    3f66:	0f 93       	push	r16
    3f68:	1f 93       	push	r17
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	ce 57       	subi	r28, 0x7E	; 126
    3f74:	d1 09       	sbc	r29, r1
    3f76:	cd bf       	out	0x3d, r28	; 61
    3f78:	de bf       	out	0x3e, r29	; 62
    3f7a:	8a e2       	ldi	r24, 0x2A	; 42
    3f7c:	e7 e4       	ldi	r30, 0x47	; 71
    3f7e:	ff ea       	ldi	r31, 0xAF	; 175
    3f80:	de 01       	movw	r26, r28
    3f82:	11 96       	adiw	r26, 0x01	; 1
    3f84:	01 90       	ld	r0, Z+
    3f86:	0d 92       	st	X+, r0
    3f88:	8a 95       	dec	r24
    3f8a:	e1 f7       	brne	.-8      	; 0x3f84 <motorsMoving+0x22>
    3f8c:	ef 96       	adiw	r28, 0x3f	; 63
    3f8e:	1c ae       	std	Y+60, r1	; 0x3c
    3f90:	1d ae       	std	Y+61, r1	; 0x3d
    3f92:	1e ae       	std	Y+62, r1	; 0x3e
    3f94:	1f ae       	std	Y+63, r1	; 0x3f
    3f96:	ef 97       	sbiw	r28, 0x3f	; 63
    3f98:	00 e0       	ldi	r16, 0x00	; 0
    3f9a:	10 e0       	ldi	r17, 0x00	; 0
    3f9c:	31 c0       	rjmp	.+98     	; 0x4000 <__RODATA_PM_OFFSET__>
    3f9e:	be 01       	movw	r22, r28
    3fa0:	65 58       	subi	r22, 0x85	; 133
    3fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa4:	80 e8       	ldi	r24, 0x80	; 128
    3fa6:	81 0f       	add	r24, r17
    3fa8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <get_MOTOR_SPEED>
    3fac:	83 36       	cpi	r24, 0x63	; 99
    3fae:	e1 f4       	brne	.+56     	; 0x3fe8 <motorsMoving+0x86>
    3fb0:	1f 92       	push	r1
    3fb2:	81 e4       	ldi	r24, 0x41	; 65
    3fb4:	81 0f       	add	r24, r17
    3fb6:	8f 93       	push	r24
    3fb8:	ce 01       	movw	r24, r28
    3fba:	01 96       	adiw	r24, 0x01	; 1
    3fbc:	9f 93       	push	r25
    3fbe:	8f 93       	push	r24
    3fc0:	7e 01       	movw	r14, r28
    3fc2:	8b e2       	ldi	r24, 0x2B	; 43
    3fc4:	e8 0e       	add	r14, r24
    3fc6:	f1 1c       	adc	r15, r1
    3fc8:	ff 92       	push	r15
    3fca:	ef 92       	push	r14
    3fcc:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    3fd0:	b7 01       	movw	r22, r14
    3fd2:	86 e3       	ldi	r24, 0x36	; 54
    3fd4:	91 e0       	ldi	r25, 0x01	; 1
    3fd6:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
    3fde:	0f 90       	pop	r0
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0b c0       	rjmp	.+22     	; 0x3ffe <motorsMoving+0x9c>
    3fe8:	ef 96       	adiw	r28, 0x3f	; 63
    3fea:	8c ad       	ldd	r24, Y+60	; 0x3c
    3fec:	9d ad       	ldd	r25, Y+61	; 0x3d
    3fee:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ff0:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ff2:	ef 97       	sbiw	r28, 0x3f	; 63
    3ff4:	89 2b       	or	r24, r25
    3ff6:	8a 2b       	or	r24, r26
    3ff8:	8b 2b       	or	r24, r27
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <motorsMoving+0x9c>
    3ffc:	0f 5f       	subi	r16, 0xFF	; 255
    3ffe:	1f 5f       	subi	r17, 0xFF	; 255
    4000:	13 30       	cpi	r17, 0x03	; 3
    4002:	68 f2       	brcs	.-102    	; 0x3f9e <motorsMoving+0x3c>
    4004:	00 23       	and	r16, r16
    4006:	11 f0       	breq	.+4      	; 0x400c <__RODATA_PM_OFFSET__+0xc>
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	01 c0       	rjmp	.+2      	; 0x400e <__RODATA_PM_OFFSET__+0xe>
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	c2 58       	subi	r28, 0x82	; 130
    4010:	df 4f       	sbci	r29, 0xFF	; 255
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	1f 91       	pop	r17
    401c:	0f 91       	pop	r16
    401e:	ff 90       	pop	r15
    4020:	ef 90       	pop	r14
    4022:	08 95       	ret

00004024 <put_FRAM_ENCODERS>:
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	a2 97       	sbiw	r28, 0x22	; 34
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	de bf       	out	0x3e, r29	; 62
    4034:	86 e0       	ldi	r24, 0x06	; 6
    4036:	ea e6       	ldi	r30, 0x6A	; 106
    4038:	f7 ea       	ldi	r31, 0xA7	; 167
    403a:	de 01       	movw	r26, r28
    403c:	59 96       	adiw	r26, 0x19	; 25
    403e:	01 90       	ld	r0, Z+
    4040:	0d 92       	st	X+, r0
    4042:	8a 95       	dec	r24
    4044:	e1 f7       	brne	.-8      	; 0x403e <put_FRAM_ENCODERS+0x1a>
    4046:	10 e0       	ldi	r17, 0x00	; 0
    4048:	27 c0       	rjmp	.+78     	; 0x4098 <put_FRAM_ENCODERS+0x74>
    404a:	be 01       	movw	r22, r28
    404c:	61 5e       	subi	r22, 0xE1	; 225
    404e:	7f 4f       	sbci	r23, 0xFF	; 255
    4050:	80 e8       	ldi	r24, 0x80	; 128
    4052:	81 0f       	add	r24, r17
    4054:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <get_MOTOR_ENCODER>
    4058:	83 36       	cpi	r24, 0x63	; 99
    405a:	71 f1       	breq	.+92     	; 0x40b8 <put_FRAM_ENCODERS+0x94>
    405c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    405e:	98 a1       	ldd	r25, Y+32	; 0x20
    4060:	29 a1       	ldd	r18, Y+33	; 0x21
    4062:	3a a1       	ldd	r19, Y+34	; 0x22
    4064:	3d 8b       	std	Y+21, r19	; 0x15
    4066:	2e 8b       	std	Y+22, r18	; 0x16
    4068:	9f 8b       	std	Y+23, r25	; 0x17
    406a:	88 8f       	std	Y+24, r24	; 0x18
    406c:	e1 2f       	mov	r30, r17
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	ee 0f       	add	r30, r30
    4072:	ff 1f       	adc	r31, r31
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	8c 0f       	add	r24, r28
    407a:	9d 1f       	adc	r25, r29
    407c:	e8 0f       	add	r30, r24
    407e:	f9 1f       	adc	r31, r25
    4080:	60 8d       	ldd	r22, Z+24	; 0x18
    4082:	71 8d       	ldd	r23, Z+25	; 0x19
    4084:	24 e0       	ldi	r18, 0x04	; 4
    4086:	ae 01       	movw	r20, r28
    4088:	4b 5e       	subi	r20, 0xEB	; 235
    408a:	5f 4f       	sbci	r21, 0xFF	; 255
    408c:	80 e5       	ldi	r24, 0x50	; 80
    408e:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_FRAM>
    4092:	83 36       	cpi	r24, 0x63	; 99
    4094:	89 f0       	breq	.+34     	; 0x40b8 <put_FRAM_ENCODERS+0x94>
    4096:	1f 5f       	subi	r17, 0xFF	; 255
    4098:	13 30       	cpi	r17, 0x03	; 3
    409a:	b8 f2       	brcs	.-82     	; 0x404a <put_FRAM_ENCODERS+0x26>
    409c:	ce 01       	movw	r24, r28
    409e:	01 96       	adiw	r24, 0x01	; 1
    40a0:	0e 94 7a 07 	call	0xef4	; 0xef4 <get_time>
    40a4:	24 e1       	ldi	r18, 0x14	; 20
    40a6:	ae 01       	movw	r20, r28
    40a8:	4f 5f       	subi	r20, 0xFF	; 255
    40aa:	5f 4f       	sbci	r21, 0xFF	; 255
    40ac:	60 e2       	ldi	r22, 0x20	; 32
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	80 e5       	ldi	r24, 0x50	; 80
    40b2:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_FRAM>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	a2 96       	adiw	r28, 0x22	; 34
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	08 95       	ret

000040c6 <put_MOTOR>:
    40c6:	8f 92       	push	r8
    40c8:	9f 92       	push	r9
    40ca:	af 92       	push	r10
    40cc:	bf 92       	push	r11
    40ce:	cf 92       	push	r12
    40d0:	df 92       	push	r13
    40d2:	ef 92       	push	r14
    40d4:	ff 92       	push	r15
    40d6:	0f 93       	push	r16
    40d8:	1f 93       	push	r17
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	cd b7       	in	r28, 0x3d	; 61
    40e0:	de b7       	in	r29, 0x3e	; 62
    40e2:	c5 59       	subi	r28, 0x95	; 149
    40e4:	d1 09       	sbc	r29, r1
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	de bf       	out	0x3e, r29	; 62
    40ea:	a8 2e       	mov	r10, r24
    40ec:	b2 2e       	mov	r11, r18
    40ee:	cd b6       	in	r12, 0x3d	; 61
    40f0:	de b6       	in	r13, 0x3e	; 62
    40f2:	80 e2       	ldi	r24, 0x20	; 32
    40f4:	e1 e7       	ldi	r30, 0x71	; 113
    40f6:	ff ea       	ldi	r31, 0xAF	; 175
    40f8:	de 01       	movw	r26, r28
    40fa:	11 96       	adiw	r26, 0x01	; 1
    40fc:	01 90       	ld	r0, Z+
    40fe:	0d 92       	st	X+, r0
    4100:	8a 95       	dec	r24
    4102:	e1 f7       	brne	.-8      	; 0x40fc <put_MOTOR+0x36>
    4104:	85 e2       	ldi	r24, 0x25	; 37
    4106:	e1 e9       	ldi	r30, 0x91	; 145
    4108:	ff ea       	ldi	r31, 0xAF	; 175
    410a:	de 01       	movw	r26, r28
    410c:	91 96       	adiw	r26, 0x21	; 33
    410e:	01 90       	ld	r0, Z+
    4110:	0d 92       	st	X+, r0
    4112:	8a 95       	dec	r24
    4114:	e1 f7       	brne	.-8      	; 0x410e <put_MOTOR+0x48>
    4116:	82 2e       	mov	r8, r18
    4118:	91 2c       	mov	r9, r1
    411a:	c4 01       	movw	r24, r8
    411c:	04 96       	adiw	r24, 0x04	; 4
    411e:	74 01       	movw	r14, r8
    4120:	23 e0       	ldi	r18, 0x03	; 3
    4122:	e2 0e       	add	r14, r18
    4124:	f1 1c       	adc	r15, r1
    4126:	ad b7       	in	r26, 0x3d	; 61
    4128:	be b7       	in	r27, 0x3e	; 62
    412a:	a8 1b       	sub	r26, r24
    412c:	b9 0b       	sbc	r27, r25
    412e:	ad bf       	out	0x3d, r26	; 61
    4130:	be bf       	out	0x3e, r27	; 62
    4132:	0d b7       	in	r16, 0x3d	; 61
    4134:	1e b7       	in	r17, 0x3e	; 62
    4136:	0f 5f       	subi	r16, 0xFF	; 255
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
    413a:	f8 01       	movw	r30, r16
    413c:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <ser_recv1+0xfe>
    4146:	11 96       	adiw	r26, 0x01	; 1
    4148:	ac 92       	st	X, r10
    414a:	61 83       	std	Z+1, r22	; 0x01
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	0e c0       	rjmp	.+28     	; 0x416c <put_MOTOR+0xa6>
    4150:	86 2f       	mov	r24, r22
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	9c 01       	movw	r18, r24
    4156:	2e 5f       	subi	r18, 0xFE	; 254
    4158:	3f 4f       	sbci	r19, 0xFF	; 255
    415a:	da 01       	movw	r26, r20
    415c:	a8 0f       	add	r26, r24
    415e:	b9 1f       	adc	r27, r25
    4160:	8c 91       	ld	r24, X
    4162:	df 01       	movw	r26, r30
    4164:	a2 0f       	add	r26, r18
    4166:	b3 1f       	adc	r27, r19
    4168:	8c 93       	st	X, r24
    416a:	6f 5f       	subi	r22, 0xFF	; 255
    416c:	6b 15       	cp	r22, r11
    416e:	80 f3       	brcs	.-32     	; 0x4150 <put_MOTOR+0x8a>
    4170:	b2 e0       	ldi	r27, 0x02	; 2
    4172:	8b 0e       	add	r8, r27
    4174:	91 1c       	adc	r9, r1
    4176:	b4 01       	movw	r22, r8
    4178:	c8 01       	movw	r24, r16
    417a:	0e 94 13 18 	call	0x3026	; 0x3026 <crc16>
    417e:	d8 01       	movw	r26, r16
    4180:	a8 0d       	add	r26, r8
    4182:	b9 1d       	adc	r27, r9
    4184:	9c 93       	st	X, r25
    4186:	f8 01       	movw	r30, r16
    4188:	ee 0d       	add	r30, r14
    418a:	ff 1d       	adc	r31, r15
    418c:	80 83       	st	Z, r24
    418e:	64 e0       	ldi	r22, 0x04	; 4
    4190:	6b 0d       	add	r22, r11
    4192:	c8 01       	movw	r24, r16
    4194:	0e 94 85 29 	call	0x530a	; 0x530a <send_USART1>
    4198:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    419c:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    41a0:	24 c0       	rjmp	.+72     	; 0x41ea <put_MOTOR+0x124>
    41a2:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    41a6:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    41aa:	85 36       	cpi	r24, 0x65	; 101
    41ac:	91 05       	cpc	r25, r1
    41ae:	e0 f0       	brcs	.+56     	; 0x41e8 <put_MOTOR+0x122>
    41b0:	81 ec       	ldi	r24, 0xC1	; 193
    41b2:	8a 0d       	add	r24, r10
    41b4:	1f 92       	push	r1
    41b6:	8f 93       	push	r24
    41b8:	ce 01       	movw	r24, r28
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	9f 93       	push	r25
    41be:	8f 93       	push	r24
    41c0:	8e 01       	movw	r16, r28
    41c2:	0a 5b       	subi	r16, 0xBA	; 186
    41c4:	1f 4f       	sbci	r17, 0xFF	; 255
    41c6:	1f 93       	push	r17
    41c8:	0f 93       	push	r16
    41ca:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    41ce:	b8 01       	movw	r22, r16
    41d0:	86 e3       	ldi	r24, 0x36	; 54
    41d2:	91 e0       	ldi	r25, 0x01	; 1
    41d4:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	83 e6       	ldi	r24, 0x63	; 99
    41e6:	2a c0       	rjmp	.+84     	; 0x423c <put_MOTOR+0x176>
    41e8:	00 00       	nop
    41ea:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    41ee:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    41f2:	98 17       	cp	r25, r24
    41f4:	b0 f2       	brcs	.-84     	; 0x41a2 <put_MOTOR+0xdc>
    41f6:	90 91 43 2a 	lds	r25, 0x2A43	; 0x802a43 <ser_recv1>
    41fa:	9f 3f       	cpi	r25, 0xFF	; 255
    41fc:	f1 f0       	breq	.+60     	; 0x423a <put_MOTOR+0x174>
    41fe:	81 ec       	ldi	r24, 0xC1	; 193
    4200:	8a 0d       	add	r24, r10
    4202:	1f 92       	push	r1
    4204:	9f 93       	push	r25
    4206:	1f 92       	push	r1
    4208:	8f 93       	push	r24
    420a:	ce 01       	movw	r24, r28
    420c:	81 96       	adiw	r24, 0x21	; 33
    420e:	9f 93       	push	r25
    4210:	8f 93       	push	r24
    4212:	8e 01       	movw	r16, r28
    4214:	0a 5b       	subi	r16, 0xBA	; 186
    4216:	1f 4f       	sbci	r17, 0xFF	; 255
    4218:	1f 93       	push	r17
    421a:	0f 93       	push	r16
    421c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    4220:	b8 01       	movw	r22, r16
    4222:	86 e3       	ldi	r24, 0x36	; 54
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    422a:	2d b7       	in	r18, 0x3d	; 61
    422c:	3e b7       	in	r19, 0x3e	; 62
    422e:	28 5f       	subi	r18, 0xF8	; 248
    4230:	3f 4f       	sbci	r19, 0xFF	; 255
    4232:	2d bf       	out	0x3d, r18	; 61
    4234:	3e bf       	out	0x3e, r19	; 62
    4236:	83 e6       	ldi	r24, 0x63	; 99
    4238:	01 c0       	rjmp	.+2      	; 0x423c <put_MOTOR+0x176>
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	cd be       	out	0x3d, r12	; 61
    423e:	de be       	out	0x3e, r13	; 62
    4240:	cb 56       	subi	r28, 0x6B	; 107
    4242:	df 4f       	sbci	r29, 0xFF	; 255
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	1f 91       	pop	r17
    424e:	0f 91       	pop	r16
    4250:	ff 90       	pop	r15
    4252:	ef 90       	pop	r14
    4254:	df 90       	pop	r13
    4256:	cf 90       	pop	r12
    4258:	bf 90       	pop	r11
    425a:	af 90       	pop	r10
    425c:	9f 90       	pop	r9
    425e:	8f 90       	pop	r8
    4260:	08 95       	ret

00004262 <move_MOTOR>:
    4262:	ef 92       	push	r14
    4264:	ff 92       	push	r15
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	c3 58       	subi	r28, 0x83	; 131
    4274:	d1 09       	sbc	r29, r1
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	08 2f       	mov	r16, r24
    427c:	82 e2       	ldi	r24, 0x22	; 34
    427e:	e6 eb       	ldi	r30, 0xB6	; 182
    4280:	ff ea       	ldi	r31, 0xAF	; 175
    4282:	de 01       	movw	r26, r28
    4284:	11 96       	adiw	r26, 0x01	; 1
    4286:	01 90       	ld	r0, Z+
    4288:	0d 92       	st	X+, r0
    428a:	8a 95       	dec	r24
    428c:	e1 f7       	brne	.-8      	; 0x4286 <move_MOTOR+0x24>
    428e:	e4 96       	adiw	r28, 0x34	; 52
    4290:	1f ae       	std	Y+63, r1	; 0x3f
    4292:	e4 97       	sbiw	r28, 0x34	; 52
    4294:	e5 96       	adiw	r28, 0x35	; 53
    4296:	1f ae       	std	Y+63, r1	; 0x3f
    4298:	e5 97       	sbiw	r28, 0x35	; 53
    429a:	9b e1       	ldi	r25, 0x1B	; 27
    429c:	e6 96       	adiw	r28, 0x36	; 54
    429e:	9f af       	std	Y+63, r25	; 0x3f
    42a0:	e6 97       	sbiw	r28, 0x36	; 54
    42a2:	85 ea       	ldi	r24, 0xA5	; 165
    42a4:	e7 96       	adiw	r28, 0x37	; 55
    42a6:	8f af       	std	Y+63, r24	; 0x3f
    42a8:	e7 97       	sbiw	r28, 0x37	; 55
    42aa:	e8 96       	adiw	r28, 0x38	; 56
    42ac:	1f ae       	std	Y+63, r1	; 0x3f
    42ae:	e8 97       	sbiw	r28, 0x38	; 56
    42b0:	e9 96       	adiw	r28, 0x39	; 57
    42b2:	1f ae       	std	Y+63, r1	; 0x3f
    42b4:	e9 97       	sbiw	r28, 0x39	; 57
    42b6:	ea 96       	adiw	r28, 0x3a	; 58
    42b8:	9f af       	std	Y+63, r25	; 0x3f
    42ba:	ea 97       	sbiw	r28, 0x3a	; 58
    42bc:	eb 96       	adiw	r28, 0x3b	; 59
    42be:	8f af       	std	Y+63, r24	; 0x3f
    42c0:	eb 97       	sbiw	r28, 0x3b	; 59
    42c2:	ec 96       	adiw	r28, 0x3c	; 60
    42c4:	1f ae       	std	Y+63, r1	; 0x3f
    42c6:	ec 97       	sbiw	r28, 0x3c	; 60
    42c8:	ed 96       	adiw	r28, 0x3d	; 61
    42ca:	1f ae       	std	Y+63, r1	; 0x3f
    42cc:	ed 97       	sbiw	r28, 0x3d	; 61
    42ce:	8d e0       	ldi	r24, 0x0D	; 13
    42d0:	ee 96       	adiw	r28, 0x3e	; 62
    42d2:	8f af       	std	Y+63, r24	; 0x3f
    42d4:	ee 97       	sbiw	r28, 0x3e	; 62
    42d6:	82 ed       	ldi	r24, 0xD2	; 210
    42d8:	ef 96       	adiw	r28, 0x3f	; 63
    42da:	8f af       	std	Y+63, r24	; 0x3f
    42dc:	ef 97       	sbiw	r28, 0x3f	; 63
    42de:	c1 58       	subi	r28, 0x81	; 129
    42e0:	df 4f       	sbci	r29, 0xFF	; 255
    42e2:	78 83       	st	Y, r23
    42e4:	cf 57       	subi	r28, 0x7F	; 127
    42e6:	d0 40       	sbci	r29, 0x00	; 0
    42e8:	c0 58       	subi	r28, 0x80	; 128
    42ea:	df 4f       	sbci	r29, 0xFF	; 255
    42ec:	68 83       	st	Y, r22
    42ee:	c0 58       	subi	r28, 0x80	; 128
    42f0:	d0 40       	sbci	r29, 0x00	; 0
    42f2:	cf 57       	subi	r28, 0x7F	; 127
    42f4:	df 4f       	sbci	r29, 0xFF	; 255
    42f6:	58 83       	st	Y, r21
    42f8:	c1 58       	subi	r28, 0x81	; 129
    42fa:	d0 40       	sbci	r29, 0x00	; 0
    42fc:	ce 57       	subi	r28, 0x7E	; 126
    42fe:	df 4f       	sbci	r29, 0xFF	; 255
    4300:	48 83       	st	Y, r20
    4302:	c2 58       	subi	r28, 0x82	; 130
    4304:	d0 40       	sbci	r29, 0x00	; 0
    4306:	cd 57       	subi	r28, 0x7D	; 125
    4308:	df 4f       	sbci	r29, 0xFF	; 255
    430a:	18 82       	st	Y, r1
    430c:	c3 58       	subi	r28, 0x83	; 131
    430e:	d0 40       	sbci	r29, 0x00	; 0
    4310:	21 e1       	ldi	r18, 0x11	; 17
    4312:	ae 01       	movw	r20, r28
    4314:	4d 58       	subi	r20, 0x8D	; 141
    4316:	5f 4f       	sbci	r21, 0xFF	; 255
    4318:	61 e4       	ldi	r22, 0x41	; 65
    431a:	80 2f       	mov	r24, r16
    431c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <put_MOTOR>
    4320:	18 2f       	mov	r17, r24
    4322:	83 36       	cpi	r24, 0x63	; 99
    4324:	d9 f4       	brne	.+54     	; 0x435c <move_MOTOR+0xfa>
    4326:	0f 53       	subi	r16, 0x3F	; 63
    4328:	1f 92       	push	r1
    432a:	0f 93       	push	r16
    432c:	ce 01       	movw	r24, r28
    432e:	01 96       	adiw	r24, 0x01	; 1
    4330:	9f 93       	push	r25
    4332:	8f 93       	push	r24
    4334:	7e 01       	movw	r14, r28
    4336:	83 e2       	ldi	r24, 0x23	; 35
    4338:	e8 0e       	add	r14, r24
    433a:	f1 1c       	adc	r15, r1
    433c:	ff 92       	push	r15
    433e:	ef 92       	push	r14
    4340:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
    4344:	b7 01       	movw	r22, r14
    4346:	86 e3       	ldi	r24, 0x36	; 54
    4348:	91 e0       	ldi	r25, 0x01	; 1
    434a:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	0f 90       	pop	r0
    435a:	01 c0       	rjmp	.+2      	; 0x435e <move_MOTOR+0xfc>
    435c:	10 e0       	ldi	r17, 0x00	; 0
    435e:	81 2f       	mov	r24, r17
    4360:	cd 57       	subi	r28, 0x7D	; 125
    4362:	df 4f       	sbci	r29, 0xFF	; 255
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	ff 90       	pop	r15
    4372:	ef 90       	pop	r14
    4374:	08 95       	ret

00004376 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    4376:	8f 92       	push	r8
    4378:	9f 92       	push	r9
    437a:	af 92       	push	r10
    437c:	bf 92       	push	r11
    437e:	df 92       	push	r13
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	c9 5b       	subi	r28, 0xB9	; 185
    4392:	d1 09       	sbc	r29, r1
    4394:	cd bf       	out	0x3d, r28	; 61
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	4b 01       	movw	r8, r22
    439a:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    439c:	82 e3       	ldi	r24, 0x32	; 50
    439e:	ed e6       	ldi	r30, 0x6D	; 109
    43a0:	f0 eb       	ldi	r31, 0xB0	; 176
    43a2:	de 01       	movw	r26, r28
    43a4:	a3 5a       	subi	r26, 0xA3	; 163
    43a6:	bf 4f       	sbci	r27, 0xFF	; 255
    43a8:	01 90       	ld	r0, Z+
    43aa:	0d 92       	st	X+, r0
    43ac:	8a 95       	dec	r24
    43ae:	e1 f7       	brne	.-8      	; 0x43a8 <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    43b0:	8b e2       	ldi	r24, 0x2B	; 43
    43b2:	ef e9       	ldi	r30, 0x9F	; 159
    43b4:	f0 eb       	ldi	r31, 0xB0	; 176
    43b6:	de 01       	movw	r26, r28
    43b8:	a1 57       	subi	r26, 0x71	; 113
    43ba:	bf 4f       	sbci	r27, 0xFF	; 255
    43bc:	01 90       	ld	r0, Z+
    43be:	0d 92       	st	X+, r0
    43c0:	8a 95       	dec	r24
    43c2:	e1 f7       	brne	.-8      	; 0x43bc <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    43c4:	f1 2c       	mov	r15, r1
    43c6:	6c c0       	rjmp	.+216    	; 0x44a0 <move_MOTORS_PISTON+0x12a>
		mtraddr = i + MOTOR_A;
    43c8:	68 94       	set
    43ca:	dd 24       	eor	r13, r13
    43cc:	d7 f8       	bld	r13, 7
    43ce:	df 0c       	add	r13, r15
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    43d0:	0f 2d       	mov	r16, r15
    43d2:	10 e0       	ldi	r17, 0x00	; 0
    43d4:	b8 01       	movw	r22, r16
    43d6:	66 0f       	add	r22, r22
    43d8:	77 1f       	adc	r23, r23
    43da:	66 0f       	add	r22, r22
    43dc:	77 1f       	adc	r23, r23
    43de:	81 e5       	ldi	r24, 0x51	; 81
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	8c 0f       	add	r24, r28
    43e4:	9d 1f       	adc	r25, r29
    43e6:	68 0f       	add	r22, r24
    43e8:	79 1f       	adc	r23, r25
    43ea:	8d 2d       	mov	r24, r13
    43ec:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <get_MOTOR_ENCODER>
    43f0:	e8 2e       	mov	r14, r24
    43f2:	93 e6       	ldi	r25, 0x63	; 99
    43f4:	89 13       	cpse	r24, r25
    43f6:	1d c0       	rjmp	.+58     	; 0x4432 <move_MOTORS_PISTON+0xbc>
			sprintf(strbuf, fmt0, mtraddr-63);
    43f8:	8d 2d       	mov	r24, r13
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	cf 97       	sbiw	r24, 0x3f	; 63
    43fe:	9f 93       	push	r25
    4400:	8f 93       	push	r24
    4402:	ce 01       	movw	r24, r28
    4404:	83 5a       	subi	r24, 0xA3	; 163
    4406:	9f 4f       	sbci	r25, 0xFF	; 255
    4408:	9f 93       	push	r25
    440a:	8f 93       	push	r24
    440c:	8e 01       	movw	r16, r28
    440e:	0f 5f       	subi	r16, 0xFF	; 255
    4410:	1f 4f       	sbci	r17, 0xFF	; 255
    4412:	1f 93       	push	r17
    4414:	0f 93       	push	r16
    4416:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_MTR, strbuf);
    441a:	b8 01       	movw	r22, r16
    441c:	86 e3       	ldi	r24, 0x36	; 54
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			return(ERROR);
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	3c c0       	rjmp	.+120    	; 0x44aa <move_MOTORS_PISTON+0x134>
		}

		newPos[i] = curPos[i] + deltaValue;
    4432:	00 0f       	add	r16, r16
    4434:	11 1f       	adc	r17, r17
    4436:	00 0f       	add	r16, r16
    4438:	11 1f       	adc	r17, r17
    443a:	e1 e5       	ldi	r30, 0x51	; 81
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	ec 0f       	add	r30, r28
    4440:	fd 1f       	adc	r31, r29
    4442:	e0 0f       	add	r30, r16
    4444:	f1 1f       	adc	r31, r17
    4446:	40 81       	ld	r20, Z
    4448:	51 81       	ldd	r21, Z+1	; 0x01
    444a:	62 81       	ldd	r22, Z+2	; 0x02
    444c:	73 81       	ldd	r23, Z+3	; 0x03
    444e:	48 0d       	add	r20, r8
    4450:	59 1d       	adc	r21, r9
    4452:	6a 1d       	adc	r22, r10
    4454:	7b 1d       	adc	r23, r11

		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    4456:	8d 2d       	mov	r24, r13
    4458:	0e 94 31 21 	call	0x4262	; 0x4262 <move_MOTOR>
    445c:	e8 2e       	mov	r14, r24
    445e:	83 e6       	ldi	r24, 0x63	; 99
    4460:	e8 12       	cpse	r14, r24
    4462:	1d c0       	rjmp	.+58     	; 0x449e <move_MOTORS_PISTON+0x128>
			sprintf(strbuf, fmt1, mtraddr-63);
    4464:	8d 2d       	mov	r24, r13
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	cf 97       	sbiw	r24, 0x3f	; 63
    446a:	9f 93       	push	r25
    446c:	8f 93       	push	r24
    446e:	ce 01       	movw	r24, r28
    4470:	81 57       	subi	r24, 0x71	; 113
    4472:	9f 4f       	sbci	r25, 0xFF	; 255
    4474:	9f 93       	push	r25
    4476:	8f 93       	push	r24
    4478:	8e 01       	movw	r16, r28
    447a:	0f 5f       	subi	r16, 0xFF	; 255
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	1f 93       	push	r17
    4480:	0f 93       	push	r16
    4482:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_MTR, strbuf);
    4486:	b8 01       	movw	r22, r16
    4488:	86 e3       	ldi	r24, 0x36	; 54
    448a:	91 e0       	ldi	r25, 0x01	; 1
    448c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			return(ERROR);
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	06 c0       	rjmp	.+12     	; 0x44aa <move_MOTORS_PISTON+0x134>
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    449e:	f3 94       	inc	r15
    44a0:	92 e0       	ldi	r25, 0x02	; 2
    44a2:	9f 15       	cp	r25, r15
    44a4:	08 f0       	brcs	.+2      	; 0x44a8 <move_MOTORS_PISTON+0x132>
    44a6:	90 cf       	rjmp	.-224    	; 0x43c8 <move_MOTORS_PISTON+0x52>
			printError(ERR_MTR, strbuf);
			return(ERROR);
		}
	}

	return(NOERROR);
    44a8:	e1 2c       	mov	r14, r1

}
    44aa:	8e 2d       	mov	r24, r14
    44ac:	c7 54       	subi	r28, 0x47	; 71
    44ae:	df 4f       	sbci	r29, 0xFF	; 255
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	ff 90       	pop	r15
    44be:	ef 90       	pop	r14
    44c0:	df 90       	pop	r13
    44c2:	bf 90       	pop	r11
    44c4:	af 90       	pop	r10
    44c6:	9f 90       	pop	r9
    44c8:	8f 90       	pop	r8
    44ca:	08 95       	ret

000044cc <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	cd 57       	subi	r28, 0x7D	; 125
    44de:	d1 09       	sbc	r29, r1
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    44e6:	89 e2       	ldi	r24, 0x29	; 41
    44e8:	ea ec       	ldi	r30, 0xCA	; 202
    44ea:	f0 eb       	ldi	r31, 0xB0	; 176
    44ec:	de 01       	movw	r26, r28
    44ee:	11 96       	adiw	r26, 0x01	; 1
    44f0:	01 90       	ld	r0, Z+
    44f2:	0d 92       	st	X+, r0
    44f4:	8a 95       	dec	r24
    44f6:	e1 f7       	brne	.-8      	; 0x44f0 <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    44f8:	eb 96       	adiw	r28, 0x3b	; 59
    44fa:	7f af       	std	Y+63, r23	; 0x3f
    44fc:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    44fe:	ec 96       	adiw	r28, 0x3c	; 60
    4500:	6f af       	std	Y+63, r22	; 0x3f
    4502:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4504:	ed 96       	adiw	r28, 0x3d	; 61
    4506:	5f af       	std	Y+63, r21	; 0x3f
    4508:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    450a:	ee 96       	adiw	r28, 0x3e	; 62
    450c:	4f af       	std	Y+63, r20	; 0x3f
    450e:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4510:	24 e0       	ldi	r18, 0x04	; 4
    4512:	ae 01       	movw	r20, r28
    4514:	46 58       	subi	r20, 0x86	; 134
    4516:	5f 4f       	sbci	r21, 0xFF	; 255
    4518:	66 e1       	ldi	r22, 0x16	; 22
    451a:	80 2f       	mov	r24, r16
    451c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <put_MOTOR>
    4520:	18 2f       	mov	r17, r24
    4522:	83 36       	cpi	r24, 0x63	; 99
    4524:	d9 f4       	brne	.+54     	; 0x455c <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4526:	0f 53       	subi	r16, 0x3F	; 63
    4528:	1f 92       	push	r1
    452a:	0f 93       	push	r16
    452c:	ce 01       	movw	r24, r28
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	9f 93       	push	r25
    4532:	8f 93       	push	r24
    4534:	7e 01       	movw	r14, r28
    4536:	8a e2       	ldi	r24, 0x2A	; 42
    4538:	e8 0e       	add	r14, r24
    453a:	f1 1c       	adc	r15, r1
    453c:	ff 92       	push	r15
    453e:	ef 92       	push	r14
    4540:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_MTR, strbuf);
    4544:	b7 01       	movw	r22, r14
    4546:	86 e3       	ldi	r24, 0x36	; 54
    4548:	91 e0       	ldi	r25, 0x01	; 1
    454a:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	01 c0       	rjmp	.+2      	; 0x455e <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    455c:	10 e0       	ldi	r17, 0x00	; 0

}
    455e:	81 2f       	mov	r24, r17
    4560:	c3 58       	subi	r28, 0x83	; 131
    4562:	df 4f       	sbci	r29, 0xFF	; 255
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	1f 91       	pop	r17
    456e:	0f 91       	pop	r16
    4570:	ff 90       	pop	r15
    4572:	ef 90       	pop	r14
    4574:	08 95       	ret

00004576 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	00 d0       	rcall	.+0      	; 0x4580 <init_MOTORS+0xa>
    4580:	00 d0       	rcall	.+0      	; 0x4582 <init_MOTORS+0xc>
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	2a e6       	ldi	r18, 0x6A	; 106
    4588:	84 e0       	ldi	r24, 0x04	; 4
    458a:	91 e0       	ldi	r25, 0x01	; 1
    458c:	21 50       	subi	r18, 0x01	; 1
    458e:	80 40       	sbci	r24, 0x00	; 0
    4590:	90 40       	sbci	r25, 0x00	; 0
    4592:	e1 f7       	brne	.-8      	; 0x458c <init_MOTORS+0x16>
    4594:	00 c0       	rjmp	.+0      	; 0x4596 <init_MOTORS+0x20>

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4596:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERPERIOD;
    459a:	8b e0       	ldi	r24, 0x0B	; 11
    459c:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    45a0:	10 e0       	ldi	r17, 0x00	; 0
    45a2:	1b c0       	rjmp	.+54     	; 0x45da <init_MOTORS+0x64>
		motorDir[i] = MTRDIRUNKNOWN;
    45a4:	81 2f       	mov	r24, r17
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	fc 01       	movw	r30, r24
    45aa:	e3 5c       	subi	r30, 0xC3	; 195
    45ac:	f5 4d       	sbci	r31, 0xD5	; 213
    45ae:	22 e0       	ldi	r18, 0x02	; 2
    45b0:	20 83       	st	Z, r18
		motorLim[i] = MTRLIMUNKNOWN;
    45b2:	fc 01       	movw	r30, r24
    45b4:	e0 5c       	subi	r30, 0xC0	; 192
    45b6:	f5 4d       	sbci	r31, 0xD5	; 213
    45b8:	20 83       	st	Z, r18
		mtraddr = i + MOTOR_A;
    45ba:	00 e8       	ldi	r16, 0x80	; 128
    45bc:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    45be:	be 01       	movw	r22, r28
    45c0:	6f 5f       	subi	r22, 0xFF	; 255
    45c2:	7f 4f       	sbci	r23, 0xFF	; 255
    45c4:	80 2f       	mov	r24, r16
    45c6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    45ca:	49 81       	ldd	r20, Y+1	; 0x01
    45cc:	5a 81       	ldd	r21, Y+2	; 0x02
    45ce:	6b 81       	ldd	r22, Y+3	; 0x03
    45d0:	7c 81       	ldd	r23, Y+4	; 0x04
    45d2:	80 2f       	mov	r24, r16
    45d4:	0e 94 66 22 	call	0x44cc	; 0x44cc <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERPERIOD;

	for (i = 0; i < NMOTORS; i++) {
    45d8:	1f 5f       	subi	r17, 0xFF	; 255
    45da:	13 30       	cpi	r17, 0x03	; 3
    45dc:	18 f3       	brcs	.-58     	; 0x45a4 <init_MOTORS+0x2e>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
	}

	return(NOERROR);

}
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	24 96       	adiw	r28, 0x04	; 4
    45e2:	cd bf       	out	0x3d, r28	; 61
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	df 91       	pop	r29
    45e8:	cf 91       	pop	r28
    45ea:	1f 91       	pop	r17
    45ec:	0f 91       	pop	r16
    45ee:	08 95       	ret

000045f0 <stop_MOTORS>:

	Returns:
		ERROR if the stop_MOTOR command fails
------------------------------------------------------------------------------*/
uint8_t stop_MOTORS(void)
{
    45f0:	ef 92       	push	r14
    45f2:	ff 92       	push	r15
    45f4:	0f 93       	push	r16
    45f6:	1f 93       	push	r17
    45f8:	cf 93       	push	r28
    45fa:	df 93       	push	r29
    45fc:	cd b7       	in	r28, 0x3d	; 61
    45fe:	de b7       	in	r29, 0x3e	; 62
    4600:	c4 57       	subi	r28, 0x74	; 116
    4602:	d1 09       	sbc	r29, r1
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";
    4608:	83 e2       	ldi	r24, 0x23	; 35
    460a:	e3 ef       	ldi	r30, 0xF3	; 243
    460c:	f0 eb       	ldi	r31, 0xB0	; 176
    460e:	de 01       	movw	r26, r28
    4610:	ae 5a       	subi	r26, 0xAE	; 174
    4612:	bf 4f       	sbci	r27, 0xFF	; 255
    4614:	01 90       	ld	r0, Z+
    4616:	0d 92       	st	X+, r0
    4618:	8a 95       	dec	r24
    461a:	e1 f7       	brne	.-8      	; 0x4614 <stop_MOTORS+0x24>

	tbuf[0] = STOP;
    461c:	62 96       	adiw	r28, 0x12	; 18
    461e:	1f ae       	std	Y+63, r1	; 0x3f
    4620:	62 97       	sbiw	r28, 0x12	; 18
	errflag = 0;
    4622:	00 e0       	ldi	r16, 0x00	; 0
	for (i = 0; i < NMOTORS; i++) {
    4624:	10 e0       	ldi	r17, 0x00	; 0
    4626:	28 c0       	rjmp	.+80     	; 0x4678 <stop_MOTORS+0x88>
		mtraddr = i + MOTOR_A;
		if (put_MOTOR(mtraddr, STOP, tbuf, 1) == ERROR) {
    4628:	21 e0       	ldi	r18, 0x01	; 1
    462a:	ae 01       	movw	r20, r28
    462c:	4f 5a       	subi	r20, 0xAF	; 175
    462e:	5f 4f       	sbci	r21, 0xFF	; 255
    4630:	60 e0       	ldi	r22, 0x00	; 0
    4632:	80 e8       	ldi	r24, 0x80	; 128
    4634:	81 0f       	add	r24, r17
    4636:	0e 94 63 20 	call	0x40c6	; 0x40c6 <put_MOTOR>
    463a:	83 36       	cpi	r24, 0x63	; 99
    463c:	e1 f4       	brne	.+56     	; 0x4676 <stop_MOTORS+0x86>
			sprintf(strbuf, fmt, (char) (mtraddr-63));
    463e:	1f 92       	push	r1
    4640:	81 e4       	ldi	r24, 0x41	; 65
    4642:	81 0f       	add	r24, r17
    4644:	8f 93       	push	r24
    4646:	ce 01       	movw	r24, r28
    4648:	8e 5a       	subi	r24, 0xAE	; 174
    464a:	9f 4f       	sbci	r25, 0xFF	; 255
    464c:	9f 93       	push	r25
    464e:	8f 93       	push	r24
    4650:	81 55       	subi	r24, 0x51	; 81
    4652:	91 09       	sbc	r25, r1
    4654:	7c 01       	movw	r14, r24
    4656:	9f 93       	push	r25
    4658:	8f 93       	push	r24
    465a:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_MTR, strbuf);
    465e:	b7 01       	movw	r22, r14
    4660:	86 e3       	ldi	r24, 0x36	; 54
    4662:	91 e0       	ldi	r25, 0x01	; 1
    4664:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			errflag++;
    4668:	0f 5f       	subi	r16, 0xFF	; 255
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";

	tbuf[0] = STOP;
	errflag = 0;
	for (i = 0; i < NMOTORS; i++) {
    4676:	1f 5f       	subi	r17, 0xFF	; 255
    4678:	13 30       	cpi	r17, 0x03	; 3
    467a:	b0 f2       	brcs	.-84     	; 0x4628 <stop_MOTORS+0x38>
			printError(ERR_MTR, strbuf);
			errflag++;
		}
	}

	if (errflag) {
    467c:	00 23       	and	r16, r16
    467e:	11 f0       	breq	.+4      	; 0x4684 <stop_MOTORS+0x94>
		return(ERROR);
    4680:	83 e6       	ldi	r24, 0x63	; 99
    4682:	01 c0       	rjmp	.+2      	; 0x4686 <stop_MOTORS+0x96>
	} else {
		return(NOERROR);
    4684:	80 e0       	ldi	r24, 0x00	; 0
	}

}
    4686:	cc 58       	subi	r28, 0x8C	; 140
    4688:	df 4f       	sbci	r29, 0xFF	; 255
    468a:	cd bf       	out	0x3d, r28	; 61
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ff 90       	pop	r15
    4698:	ef 90       	pop	r14
    469a:	08 95       	ret

0000469c <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    469c:	8f 92       	push	r8
    469e:	9f 92       	push	r9
    46a0:	af 92       	push	r10
    46a2:	bf 92       	push	r11
    46a4:	ff 92       	push	r15
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	c4 5e       	subi	r28, 0xE4	; 228
    46b4:	d1 09       	sbc	r29, r1
    46b6:	cd bf       	out	0x3d, r28	; 61
    46b8:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, motor, mtraddr, controller, retval;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    46ba:	98 e2       	ldi	r25, 0x28	; 40
    46bc:	e6 e1       	ldi	r30, 0x16	; 22
    46be:	f1 eb       	ldi	r31, 0xB1	; 177
    46c0:	de 01       	movw	r26, r28
    46c2:	ab 5a       	subi	r26, 0xAB	; 171
    46c4:	bf 4f       	sbci	r27, 0xFF	; 255
    46c6:	01 90       	ld	r0, Z+
    46c8:	0d 92       	st	X+, r0
    46ca:	9a 95       	dec	r25
    46cc:	e1 f7       	brne	.-8      	; 0x46c6 <move_MOTOR_CMD+0x2a>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    46ce:	9e e1       	ldi	r25, 0x1E	; 30
    46d0:	ee e3       	ldi	r30, 0x3E	; 62
    46d2:	f1 eb       	ldi	r31, 0xB1	; 177
    46d4:	de 01       	movw	r26, r28
    46d6:	a3 58       	subi	r26, 0x83	; 131
    46d8:	bf 4f       	sbci	r27, 0xFF	; 255
    46da:	01 90       	ld	r0, Z+
    46dc:	0d 92       	st	X+, r0
    46de:	9a 95       	dec	r25
    46e0:	e1 f7       	brne	.-8      	; 0x46da <move_MOTOR_CMD+0x3e>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    46e2:	91 e2       	ldi	r25, 0x21	; 33
    46e4:	ec e5       	ldi	r30, 0x5C	; 92
    46e6:	f1 eb       	ldi	r31, 0xB1	; 177
    46e8:	de 01       	movw	r26, r28
    46ea:	a5 56       	subi	r26, 0x65	; 101
    46ec:	bf 4f       	sbci	r27, 0xFF	; 255
    46ee:	01 90       	ld	r0, Z+
    46f0:	0d 92       	st	X+, r0
    46f2:	9a 95       	dec	r25
    46f4:	e1 f7       	brne	.-8      	; 0x46ee <move_MOTOR_CMD+0x52>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    46f6:	99 e2       	ldi	r25, 0x29	; 41
    46f8:	ed e7       	ldi	r30, 0x7D	; 125
    46fa:	f1 eb       	ldi	r31, 0xB1	; 177
    46fc:	de 01       	movw	r26, r28
    46fe:	a4 54       	subi	r26, 0x44	; 68
    4700:	bf 4f       	sbci	r27, 0xFF	; 255
    4702:	01 90       	ld	r0, Z+
    4704:	0d 92       	st	X+, r0
    4706:	9a 95       	dec	r25
    4708:	e1 f7       	brne	.-8      	; 0x4702 <move_MOTOR_CMD+0x66>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    470a:	08 2f       	mov	r16, r24
    470c:	10 e0       	ldi	r17, 0x00	; 0
    470e:	84 e3       	ldi	r24, 0x34	; 52
    4710:	80 9f       	mul	r24, r16
    4712:	f0 01       	movw	r30, r0
    4714:	81 9f       	mul	r24, r17
    4716:	f0 0d       	add	r31, r0
    4718:	11 24       	eor	r1, r1
    471a:	e1 5f       	subi	r30, 0xF1	; 241
    471c:	f7 4d       	sbci	r31, 0xD7	; 215
    471e:	82 81       	ldd	r24, Z+2	; 0x02
    4720:	88 23       	and	r24, r24
    4722:	09 f4       	brne	.+2      	; 0x4726 <move_MOTOR_CMD+0x8a>
    4724:	26 c1       	rjmp	.+588    	; 0x4972 <move_MOTOR_CMD+0x2d6>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    4726:	84 e3       	ldi	r24, 0x34	; 52
    4728:	80 9f       	mul	r24, r16
    472a:	f0 01       	movw	r30, r0
    472c:	81 9f       	mul	r24, r17
    472e:	f0 0d       	add	r31, r0
    4730:	11 24       	eor	r1, r1
    4732:	e1 5f       	subi	r30, 0xF1	; 241
    4734:	f7 4d       	sbci	r31, 0xD7	; 215
    4736:	81 81       	ldd	r24, Z+1	; 0x01

	switch(motor) {
    4738:	48 2f       	mov	r20, r24
    473a:	50 e0       	ldi	r21, 0x00	; 0
    473c:	fa 01       	movw	r30, r20
    473e:	e1 54       	subi	r30, 0x41	; 65
    4740:	f1 09       	sbc	r31, r1
    4742:	e8 33       	cpi	r30, 0x38	; 56
    4744:	f1 05       	cpc	r31, r1
    4746:	08 f0       	brcs	.+2      	; 0x474a <move_MOTOR_CMD+0xae>
    4748:	9d c0       	rjmp	.+314    	; 0x4884 <move_MOTOR_CMD+0x1e8>
    474a:	ee 54       	subi	r30, 0x4E	; 78
    474c:	ff 4f       	sbci	r31, 0xFF	; 255
    474e:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__tablejump2__>
		case 'x':			// Immediate halt
			stop_MOTORS();
    4752:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <stop_MOTORS>
			return(NOERROR);
    4756:	10 e0       	ldi	r17, 0x00	; 0
    4758:	11 c1       	rjmp	.+546    	; 0x497c <move_MOTOR_CMD+0x2e0>

		case 'A':			// Move to absolute position
		case 'B':
		case 'C':
			controller = motor + 63;
    475a:	0f 2e       	mov	r0, r31
    475c:	ff e3       	ldi	r31, 0x3F	; 63
    475e:	ff 2e       	mov	r15, r31
    4760:	f0 2d       	mov	r31, r0
    4762:	f8 0e       	add	r15, r24
			currentPosition = 0;
    4764:	65 96       	adiw	r28, 0x15	; 21
    4766:	1c ae       	std	Y+60, r1	; 0x3c
    4768:	1d ae       	std	Y+61, r1	; 0x3d
    476a:	1e ae       	std	Y+62, r1	; 0x3e
    476c:	1f ae       	std	Y+63, r1	; 0x3f
    476e:	65 97       	sbiw	r28, 0x15	; 21
			break;
    4770:	a0 c0       	rjmp	.+320    	; 0x48b2 <move_MOTOR_CMD+0x216>

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4772:	24 e3       	ldi	r18, 0x34	; 52
    4774:	20 9f       	mul	r18, r16
    4776:	c0 01       	movw	r24, r0
    4778:	21 9f       	mul	r18, r17
    477a:	90 0d       	add	r25, r0
    477c:	11 24       	eor	r1, r1
    477e:	8f 5e       	subi	r24, 0xEF	; 239
    4780:	97 4d       	sbci	r25, 0xD7	; 215
    4782:	0e 94 6f 31 	call	0x62de	; 0x62de <atol>
    4786:	9b 01       	movw	r18, r22
    4788:	ac 01       	movw	r20, r24
    478a:	ab e1       	ldi	r26, 0x1B	; 27
    478c:	b1 e0       	ldi	r27, 0x01	; 1
    478e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__muluhisi3>
    4792:	4b 01       	movw	r8, r22
    4794:	5c 01       	movw	r10, r24
			for (i = 0; i < NMOTORS; i++) {
    4796:	00 e0       	ldi	r16, 0x00	; 0
    4798:	20 c0       	rjmp	.+64     	; 0x47da <move_MOTOR_CMD+0x13e>
				mtraddr = i + MOTOR_A;
				if (move_MOTOR(mtraddr, newPosition) == ERROR) {
    479a:	b5 01       	movw	r22, r10
    479c:	a4 01       	movw	r20, r8
    479e:	80 e8       	ldi	r24, 0x80	; 128
    47a0:	80 0f       	add	r24, r16
    47a2:	0e 94 31 21 	call	0x4262	; 0x4262 <move_MOTOR>
    47a6:	18 2f       	mov	r17, r24
    47a8:	83 36       	cpi	r24, 0x63	; 99
    47aa:	b1 f4       	brne	.+44     	; 0x47d8 <move_MOTOR_CMD+0x13c>
					sprintf(strbuf, fmt2);
    47ac:	ce 01       	movw	r24, r28
    47ae:	85 56       	subi	r24, 0x65	; 101
    47b0:	9f 4f       	sbci	r25, 0xFF	; 255
    47b2:	9f 93       	push	r25
    47b4:	8f 93       	push	r24
    47b6:	8a 59       	subi	r24, 0x9A	; 154
    47b8:	91 09       	sbc	r25, r1
    47ba:	5c 01       	movw	r10, r24
    47bc:	9f 93       	push	r25
    47be:	8f 93       	push	r24
    47c0:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
					printError(ERR_MTR, strbuf);
    47c4:	b5 01       	movw	r22, r10
    47c6:	86 e3       	ldi	r24, 0x36	; 54
    47c8:	91 e0       	ldi	r25, 0x01	; 1
    47ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
					return(ERROR);
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	d2 c0       	rjmp	.+420    	; 0x497c <move_MOTOR_CMD+0x2e0>
			currentPosition = 0;
			break;

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
			for (i = 0; i < NMOTORS; i++) {
    47d8:	0f 5f       	subi	r16, 0xFF	; 255
    47da:	03 30       	cpi	r16, 0x03	; 3
    47dc:	f0 f2       	brcs	.-68     	; 0x479a <move_MOTOR_CMD+0xfe>
					sprintf(strbuf, fmt2);
					printError(ERR_MTR, strbuf);
					return(ERROR);
				}
			}
			return(NOERROR);
    47de:	10 e0       	ldi	r17, 0x00	; 0
    47e0:	cd c0       	rjmp	.+410    	; 0x497c <move_MOTOR_CMD+0x2e0>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    47e2:	0f 2e       	mov	r0, r31
    47e4:	ff e1       	ldi	r31, 0x1F	; 31
    47e6:	ff 2e       	mov	r15, r31
    47e8:	f0 2d       	mov	r31, r0
    47ea:	f8 0e       	add	r15, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    47ec:	be 01       	movw	r22, r28
    47ee:	6f 5a       	subi	r22, 0xAF	; 175
    47f0:	7f 4f       	sbci	r23, 0xFF	; 255
    47f2:	8f 2d       	mov	r24, r15
    47f4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    47f8:	83 36       	cpi	r24, 0x63	; 99
    47fa:	09 f0       	breq	.+2      	; 0x47fe <move_MOTOR_CMD+0x162>
    47fc:	5a c0       	rjmp	.+180    	; 0x48b2 <move_MOTOR_CMD+0x216>
				sprintf(strbuf, fmt0);
    47fe:	ce 01       	movw	r24, r28
    4800:	8b 5a       	subi	r24, 0xAB	; 171
    4802:	9f 4f       	sbci	r25, 0xFF	; 255
    4804:	9f 93       	push	r25
    4806:	8f 93       	push	r24
    4808:	8e 01       	movw	r16, r28
    480a:	0f 5f       	subi	r16, 0xFF	; 255
    480c:	1f 4f       	sbci	r17, 0xFF	; 255
    480e:	1f 93       	push	r17
    4810:	0f 93       	push	r16
    4812:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    4816:	b8 01       	movw	r22, r16
    4818:	85 e3       	ldi	r24, 0x35	; 53
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	0f 90       	pop	r0
    4826:	0f 90       	pop	r0
    4828:	13 e6       	ldi	r17, 0x63	; 99
    482a:	a8 c0       	rjmp	.+336    	; 0x497c <move_MOTOR_CMD+0x2e0>
			}
			break;

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    482c:	24 e3       	ldi	r18, 0x34	; 52
    482e:	20 9f       	mul	r18, r16
    4830:	c0 01       	movw	r24, r0
    4832:	21 9f       	mul	r18, r17
    4834:	90 0d       	add	r25, r0
    4836:	11 24       	eor	r1, r1
    4838:	8f 5e       	subi	r24, 0xEF	; 239
    483a:	97 4d       	sbci	r25, 0xD7	; 215
    483c:	0e 94 6f 31 	call	0x62de	; 0x62de <atol>
    4840:	9b 01       	movw	r18, r22
    4842:	ac 01       	movw	r20, r24
    4844:	ab e1       	ldi	r26, 0x1B	; 27
    4846:	b1 e0       	ldi	r27, 0x01	; 1
    4848:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    484c:	0e 94 bb 21 	call	0x4376	; 0x4376 <move_MOTORS_PISTON>
    4850:	18 2f       	mov	r17, r24
    4852:	83 36       	cpi	r24, 0x63	; 99
    4854:	09 f0       	breq	.+2      	; 0x4858 <move_MOTOR_CMD+0x1bc>
    4856:	8f c0       	rjmp	.+286    	; 0x4976 <move_MOTOR_CMD+0x2da>
				sprintf(strbuf, fmt3);
    4858:	ce 01       	movw	r24, r28
    485a:	84 54       	subi	r24, 0x44	; 68
    485c:	9f 4f       	sbci	r25, 0xFF	; 255
    485e:	9f 93       	push	r25
    4860:	8f 93       	push	r24
    4862:	8b 5b       	subi	r24, 0xBB	; 187
    4864:	91 09       	sbc	r25, r1
    4866:	5c 01       	movw	r10, r24
    4868:	9f 93       	push	r25
    486a:	8f 93       	push	r24
    486c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_MTR, strbuf);
    4870:	b5 01       	movw	r22, r10
    4872:	86 e3       	ldi	r24, 0x36	; 54
    4874:	91 e0       	ldi	r25, 0x01	; 1
    4876:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	7c c0       	rjmp	.+248    	; 0x497c <move_MOTOR_CMD+0x2e0>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    4884:	ce 01       	movw	r24, r28
    4886:	83 58       	subi	r24, 0x83	; 131
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	9f 93       	push	r25
    488c:	8f 93       	push	r24
    488e:	8e 01       	movw	r16, r28
    4890:	0f 5f       	subi	r16, 0xFF	; 255
    4892:	1f 4f       	sbci	r17, 0xFF	; 255
    4894:	1f 93       	push	r17
    4896:	0f 93       	push	r16
    4898:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_MTR, strbuf);
    489c:	b8 01       	movw	r22, r16
    489e:	86 e3       	ldi	r24, 0x36	; 54
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			return(ERROR);
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	13 e6       	ldi	r17, 0x63	; 99
    48b0:	65 c0       	rjmp	.+202    	; 0x497c <move_MOTOR_CMD+0x2e0>
	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
	}
*/

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    48b2:	24 e3       	ldi	r18, 0x34	; 52
    48b4:	20 9f       	mul	r18, r16
    48b6:	c0 01       	movw	r24, r0
    48b8:	21 9f       	mul	r18, r17
    48ba:	90 0d       	add	r25, r0
    48bc:	11 24       	eor	r1, r1
    48be:	8f 5e       	subi	r24, 0xEF	; 239
    48c0:	97 4d       	sbci	r25, 0xD7	; 215
    48c2:	0e 94 6f 31 	call	0x62de	; 0x62de <atol>
    48c6:	9b 01       	movw	r18, r22
    48c8:	ac 01       	movw	r20, r24
    48ca:	ab e1       	ldi	r26, 0x1B	; 27
    48cc:	b1 e0       	ldi	r27, 0x01	; 1
    48ce:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__muluhisi3>
    48d2:	65 96       	adiw	r28, 0x15	; 21
    48d4:	0c ad       	ldd	r16, Y+60	; 0x3c
    48d6:	1d ad       	ldd	r17, Y+61	; 0x3d
    48d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    48da:	3f ad       	ldd	r19, Y+63	; 0x3f
    48dc:	65 97       	sbiw	r28, 0x15	; 21
    48de:	4b 01       	movw	r8, r22
    48e0:	5c 01       	movw	r10, r24
    48e2:	80 0e       	add	r8, r16
    48e4:	91 1e       	adc	r9, r17
    48e6:	a2 1e       	adc	r10, r18
    48e8:	b3 1e       	adc	r11, r19

	if (move_MOTOR(controller, newPosition) == ERROR) {
    48ea:	b5 01       	movw	r22, r10
    48ec:	a4 01       	movw	r20, r8
    48ee:	8f 2d       	mov	r24, r15
    48f0:	0e 94 31 21 	call	0x4262	; 0x4262 <move_MOTOR>
    48f4:	18 2f       	mov	r17, r24
    48f6:	83 36       	cpi	r24, 0x63	; 99
    48f8:	b1 f4       	brne	.+44     	; 0x4926 <move_MOTOR_CMD+0x28a>
		sprintf(strbuf, fmt2);
    48fa:	ce 01       	movw	r24, r28
    48fc:	85 56       	subi	r24, 0x65	; 101
    48fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4900:	9f 93       	push	r25
    4902:	8f 93       	push	r24
    4904:	8a 59       	subi	r24, 0x9A	; 154
    4906:	91 09       	sbc	r25, r1
    4908:	5c 01       	movw	r10, r24
    490a:	9f 93       	push	r25
    490c:	8f 93       	push	r24
    490e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printError(ERR_MTR, strbuf);
    4912:	b5 01       	movw	r22, r10
    4914:	86 e3       	ldi	r24, 0x36	; 54
    4916:	91 e0       	ldi	r25, 0x01	; 1
    4918:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	2b c0       	rjmp	.+86     	; 0x497c <move_MOTOR_CMD+0x2e0>
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
    4926:	8f 2d       	mov	r24, r15
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	80 58       	subi	r24, 0x80	; 128
    492c:	91 09       	sbc	r25, r1
    492e:	fc 01       	movw	r30, r24
    4930:	e3 5c       	subi	r30, 0xC3	; 195
    4932:	f5 4d       	sbci	r31, 0xD5	; 213
    4934:	22 e0       	ldi	r18, 0x02	; 2
    4936:	20 83       	st	Z, r18
	if (newPosition < currentPosition) {
    4938:	65 96       	adiw	r28, 0x15	; 21
    493a:	4c ad       	ldd	r20, Y+60	; 0x3c
    493c:	5d ad       	ldd	r21, Y+61	; 0x3d
    493e:	6e ad       	ldd	r22, Y+62	; 0x3e
    4940:	7f ad       	ldd	r23, Y+63	; 0x3f
    4942:	65 97       	sbiw	r28, 0x15	; 21
    4944:	84 16       	cp	r8, r20
    4946:	95 06       	cpc	r9, r21
    4948:	a6 06       	cpc	r10, r22
    494a:	b7 06       	cpc	r11, r23
    494c:	34 f4       	brge	.+12     	; 0x495a <move_MOTOR_CMD+0x2be>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
    494e:	fc 01       	movw	r30, r24
    4950:	e3 5c       	subi	r30, 0xC3	; 195
    4952:	f5 4d       	sbci	r31, 0xD5	; 213
    4954:	10 82       	st	Z, r1
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4956:	10 e0       	ldi	r17, 0x00	; 0
    4958:	11 c0       	rjmp	.+34     	; 0x497c <move_MOTOR_CMD+0x2e0>
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
	if (newPosition < currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
    495a:	48 15       	cp	r20, r8
    495c:	59 05       	cpc	r21, r9
    495e:	6a 05       	cpc	r22, r10
    4960:	7b 05       	cpc	r23, r11
    4962:	5c f4       	brge	.+22     	; 0x497a <move_MOTOR_CMD+0x2de>
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
    4964:	fc 01       	movw	r30, r24
    4966:	e3 5c       	subi	r30, 0xC3	; 195
    4968:	f5 4d       	sbci	r31, 0xD5	; 213
    496a:	21 e0       	ldi	r18, 0x01	; 1
    496c:	20 83       	st	Z, r18
	}

	return(NOERROR);
    496e:	10 e0       	ldi	r17, 0x00	; 0
    4970:	05 c0       	rjmp	.+10     	; 0x497c <move_MOTOR_CMD+0x2e0>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4972:	10 e0       	ldi	r17, 0x00	; 0
    4974:	03 c0       	rjmp	.+6      	; 0x497c <move_MOTOR_CMD+0x2e0>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    4976:	10 e0       	ldi	r17, 0x00	; 0
    4978:	01 c0       	rjmp	.+2      	; 0x497c <move_MOTOR_CMD+0x2e0>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    497a:	10 e0       	ldi	r17, 0x00	; 0

}
    497c:	81 2f       	mov	r24, r17
    497e:	cc 51       	subi	r28, 0x1C	; 28
    4980:	df 4f       	sbci	r29, 0xFF	; 255
    4982:	cd bf       	out	0x3d, r28	; 61
    4984:	de bf       	out	0x3e, r29	; 62
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	1f 91       	pop	r17
    498c:	0f 91       	pop	r16
    498e:	ff 90       	pop	r15
    4990:	bf 90       	pop	r11
    4992:	af 90       	pop	r10
    4994:	9f 90       	pop	r9
    4996:	8f 90       	pop	r8
    4998:	08 95       	ret

0000499a <zero_MOTOR_CMD>:

	Outputs:
		None
------------------------------------------------------------------------------*/
void zero_MOTOR_CMD(uint8_t cstack)
{
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	c5 5a       	subi	r28, 0xA5	; 165
    49a8:	d1 09       	sbc	r29, r1
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	const char fmt0[] = "zero_MOTOR_CMD: failed put_MOTOR_ENCODER on %c";
    49ae:	9f e2       	ldi	r25, 0x2F	; 47
    49b0:	e6 ea       	ldi	r30, 0xA6	; 166
    49b2:	f1 eb       	ldi	r31, 0xB1	; 177
    49b4:	de 01       	movw	r26, r28
    49b6:	af 5a       	subi	r26, 0xAF	; 175
    49b8:	bf 4f       	sbci	r27, 0xFF	; 255
    49ba:	01 90       	ld	r0, Z+
    49bc:	0d 92       	st	X+, r0
    49be:	9a 95       	dec	r25
    49c0:	e1 f7       	brne	.-8      	; 0x49ba <zero_MOTOR_CMD+0x20>
	const char fmt1[] = "zero_MOTOR_CMD: not a motor name (%c)";
    49c2:	96 e2       	ldi	r25, 0x26	; 38
    49c4:	e5 ed       	ldi	r30, 0xD5	; 213
    49c6:	f1 eb       	ldi	r31, 0xB1	; 177
    49c8:	de 01       	movw	r26, r28
    49ca:	a0 58       	subi	r26, 0x80	; 128
    49cc:	bf 4f       	sbci	r27, 0xFF	; 255
    49ce:	01 90       	ld	r0, Z+
    49d0:	0d 92       	st	X+, r0
    49d2:	9a 95       	dec	r25
    49d4:	e1 f7       	brne	.-8      	; 0x49ce <zero_MOTOR_CMD+0x34>
	uint8_t motor, mtraddr, retval;

	motor = pcmd[cstack].cobject;	// The char a, b, or c
    49d6:	24 e3       	ldi	r18, 0x34	; 52
    49d8:	82 9f       	mul	r24, r18
    49da:	c0 01       	movw	r24, r0
    49dc:	11 24       	eor	r1, r1
    49de:	fc 01       	movw	r30, r24
    49e0:	e1 5f       	subi	r30, 0xF1	; 241
    49e2:	f7 4d       	sbci	r31, 0xD7	; 215
    49e4:	11 81       	ldd	r17, Z+1	; 0x01

	switch (motor) {
    49e6:	8f e9       	ldi	r24, 0x9F	; 159
    49e8:	81 0f       	add	r24, r17
    49ea:	83 30       	cpi	r24, 0x03	; 3
    49ec:	18 f5       	brcc	.+70     	; 0x4a34 <zero_MOTOR_CMD+0x9a>
		case 'a':
		case 'b':
		case 'c':
			mtraddr = motor + 31;
			retval = put_MOTOR_ENCODER(mtraddr, 0L);
    49ee:	40 e0       	ldi	r20, 0x00	; 0
    49f0:	50 e0       	ldi	r21, 0x00	; 0
    49f2:	ba 01       	movw	r22, r20
    49f4:	8f e1       	ldi	r24, 0x1F	; 31
    49f6:	81 0f       	add	r24, r17
    49f8:	0e 94 66 22 	call	0x44cc	; 0x44cc <put_MOTOR_ENCODER>
			if (retval == ERROR) {
    49fc:	83 36       	cpi	r24, 0x63	; 99
    49fe:	99 f5       	brne	.+102    	; 0x4a66 <zero_MOTOR_CMD+0xcc>
				sprintf(strbuf, fmt0, motor);
    4a00:	1f 92       	push	r1
    4a02:	1f 93       	push	r17
    4a04:	ce 01       	movw	r24, r28
    4a06:	8f 5a       	subi	r24, 0xAF	; 175
    4a08:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0a:	9f 93       	push	r25
    4a0c:	8f 93       	push	r24
    4a0e:	8e 01       	movw	r16, r28
    4a10:	0f 5f       	subi	r16, 0xFF	; 255
    4a12:	1f 4f       	sbci	r17, 0xFF	; 255
    4a14:	1f 93       	push	r17
    4a16:	0f 93       	push	r16
    4a18:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_ZERMTR, strbuf);
    4a1c:	b8 01       	movw	r22, r16
    4a1e:	87 e3       	ldi	r24, 0x37	; 55
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return;
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	19 c0       	rjmp	.+50     	; 0x4a66 <zero_MOTOR_CMD+0xcc>
			}
			break;

		default:
			sprintf(strbuf, fmt1, motor);
    4a34:	1f 92       	push	r1
    4a36:	1f 93       	push	r17
    4a38:	ce 01       	movw	r24, r28
    4a3a:	80 58       	subi	r24, 0x80	; 128
    4a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3e:	9f 93       	push	r25
    4a40:	8f 93       	push	r24
    4a42:	8e 01       	movw	r16, r28
    4a44:	0f 5f       	subi	r16, 0xFF	; 255
    4a46:	1f 4f       	sbci	r17, 0xFF	; 255
    4a48:	1f 93       	push	r17
    4a4a:	0f 93       	push	r16
    4a4c:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_ZERMTR, strbuf);
    4a50:	b8 01       	movw	r22, r16
    4a52:	87 e3       	ldi	r24, 0x37	; 55
    4a54:	91 e0       	ldi	r25, 0x01	; 1
    4a56:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			break;
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
		
	}
    4a66:	cb 55       	subi	r28, 0x5B	; 91
    4a68:	df 4f       	sbci	r29, 0xFF	; 255
    4a6a:	cd bf       	out	0x3d, r28	; 61
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	df 91       	pop	r29
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	0f 93       	push	r16
    4a82:	1f 93       	push	r17
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	c1 5e       	subi	r28, 0xE1	; 225
    4a8e:	d1 09       	sbc	r29, r1
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	char object;
	uint8_t mtraddr;
	int32_t newEncoderValue;
	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
    4a94:	93 e2       	ldi	r25, 0x23	; 35
    4a96:	eb ef       	ldi	r30, 0xFB	; 251
    4a98:	f1 eb       	ldi	r31, 0xB1	; 177
    4a9a:	de 01       	movw	r26, r28
    4a9c:	af 5a       	subi	r26, 0xAF	; 175
    4a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4aa0:	01 90       	ld	r0, Z+
    4aa2:	0d 92       	st	X+, r0
    4aa4:	9a 95       	dec	r25
    4aa6:	e1 f7       	brne	.-8      	; 0x4aa0 <set+0x28>
	const char fmt1[] = "set: bad time format";
    4aa8:	95 e1       	ldi	r25, 0x15	; 21
    4aaa:	ee e1       	ldi	r30, 0x1E	; 30
    4aac:	f2 eb       	ldi	r31, 0xB2	; 178
    4aae:	de 01       	movw	r26, r28
    4ab0:	ac 58       	subi	r26, 0x8C	; 140
    4ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab4:	01 90       	ld	r0, Z+
    4ab6:	0d 92       	st	X+, r0
    4ab8:	9a 95       	dec	r25
    4aba:	e1 f7       	brne	.-8      	; 0x4ab4 <set+0x3c>
	const char fmt2[] = "set: put_time error";
    4abc:	94 e1       	ldi	r25, 0x14	; 20
    4abe:	e3 e3       	ldi	r30, 0x33	; 51
    4ac0:	f2 eb       	ldi	r31, 0xB2	; 178
    4ac2:	de 01       	movw	r26, r28
    4ac4:	a7 57       	subi	r26, 0x77	; 119
    4ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ac8:	01 90       	ld	r0, Z+
    4aca:	0d 92       	st	X+, r0
    4acc:	9a 95       	dec	r25
    4ace:	e1 f7       	brne	.-8      	; 0x4ac8 <set+0x50>
	const char fmt3[] = "set: write_FRAM error";
    4ad0:	96 e1       	ldi	r25, 0x16	; 22
    4ad2:	e7 e4       	ldi	r30, 0x47	; 71
    4ad4:	f2 eb       	ldi	r31, 0xB2	; 178
    4ad6:	de 01       	movw	r26, r28
    4ad8:	a3 56       	subi	r26, 0x63	; 99
    4ada:	bf 4f       	sbci	r27, 0xFF	; 255
    4adc:	01 90       	ld	r0, Z+
    4ade:	0d 92       	st	X+, r0
    4ae0:	9a 95       	dec	r25
    4ae2:	e1 f7       	brne	.-8      	; 0x4adc <set+0x64>
	const char fmt4[] = "set: what?";
    4ae4:	9b e0       	ldi	r25, 0x0B	; 11
    4ae6:	ed e5       	ldi	r30, 0x5D	; 93
    4ae8:	f2 eb       	ldi	r31, 0xB2	; 178
    4aea:	de 01       	movw	r26, r28
    4aec:	ad 54       	subi	r26, 0x4D	; 77
    4aee:	bf 4f       	sbci	r27, 0xFF	; 255
    4af0:	01 90       	ld	r0, Z+
    4af2:	0d 92       	st	X+, r0
    4af4:	9a 95       	dec	r25
    4af6:	e1 f7       	brne	.-8      	; 0x4af0 <set+0x78>
	const char fmt5[] = "set: encoder value out of range %ld";
    4af8:	94 e2       	ldi	r25, 0x24	; 36
    4afa:	e8 e6       	ldi	r30, 0x68	; 104
    4afc:	f2 eb       	ldi	r31, 0xB2	; 178
    4afe:	de 01       	movw	r26, r28
    4b00:	a2 54       	subi	r26, 0x42	; 66
    4b02:	bf 4f       	sbci	r27, 0xFF	; 255
    4b04:	01 90       	ld	r0, Z+
    4b06:	0d 92       	st	X+, r0
    4b08:	9a 95       	dec	r25
    4b0a:	e1 f7       	brne	.-8      	; 0x4b04 <set+0x8c>

	object = pcmd[cstack].cobject;
    4b0c:	28 2f       	mov	r18, r24
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	84 e3       	ldi	r24, 0x34	; 52
    4b12:	82 9f       	mul	r24, r18
    4b14:	f0 01       	movw	r30, r0
    4b16:	83 9f       	mul	r24, r19
    4b18:	f0 0d       	add	r31, r0
    4b1a:	11 24       	eor	r1, r1
    4b1c:	e1 5f       	subi	r30, 0xF1	; 241
    4b1e:	f7 4d       	sbci	r31, 0xD7	; 215
    4b20:	01 81       	ldd	r16, Z+1	; 0x01
	switch(object) {
    4b22:	01 36       	cpi	r16, 0x61	; 97
    4b24:	08 f4       	brcc	.+2      	; 0x4b28 <set+0xb0>
    4b26:	de c0       	rjmp	.+444    	; 0x4ce4 <set+0x26c>
    4b28:	04 36       	cpi	r16, 0x64	; 100
    4b2a:	20 f0       	brcs	.+8      	; 0x4b34 <set+0xbc>
    4b2c:	04 37       	cpi	r16, 0x74	; 116
    4b2e:	09 f4       	brne	.+2      	; 0x4b32 <set+0xba>
    4b30:	72 c0       	rjmp	.+228    	; 0x4c16 <set+0x19e>
    4b32:	d8 c0       	rjmp	.+432    	; 0x4ce4 <set+0x26c>
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    4b34:	84 e3       	ldi	r24, 0x34	; 52
    4b36:	82 9f       	mul	r24, r18
    4b38:	f0 01       	movw	r30, r0
    4b3a:	83 9f       	mul	r24, r19
    4b3c:	f0 0d       	add	r31, r0
    4b3e:	11 24       	eor	r1, r1
    4b40:	e1 5f       	subi	r30, 0xF1	; 241
    4b42:	f7 4d       	sbci	r31, 0xD7	; 215
    4b44:	82 81       	ldd	r24, Z+2	; 0x02
    4b46:	88 23       	and	r24, r24
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <set+0xd4>
    4b4a:	e3 c0       	rjmp	.+454    	; 0x4d12 <set+0x29a>
				return(NOERROR);
			}
			newEncoderValue = atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON;
    4b4c:	44 e3       	ldi	r20, 0x34	; 52
    4b4e:	42 9f       	mul	r20, r18
    4b50:	c0 01       	movw	r24, r0
    4b52:	43 9f       	mul	r20, r19
    4b54:	90 0d       	add	r25, r0
    4b56:	11 24       	eor	r1, r1
    4b58:	8f 5e       	subi	r24, 0xEF	; 239
    4b5a:	97 4d       	sbci	r25, 0xD7	; 215
    4b5c:	0e 94 6f 31 	call	0x62de	; 0x62de <atol>
    4b60:	9b 01       	movw	r18, r22
    4b62:	ac 01       	movw	r20, r24
    4b64:	ab e1       	ldi	r26, 0x1B	; 27
    4b66:	b1 e0       	ldi	r27, 0x01	; 1
    4b68:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__muluhisi3>
			if (newEncoderValue > PID_MAXPOS || newEncoderValue < PID_MINPOS) {
    4b6c:	6b 01       	movw	r12, r22
    4b6e:	7c 01       	movw	r14, r24
    4b70:	20 e5       	ldi	r18, 0x50	; 80
    4b72:	c2 0e       	add	r12, r18
    4b74:	28 ef       	ldi	r18, 0xF8	; 248
    4b76:	d2 1e       	adc	r13, r18
    4b78:	2c e0       	ldi	r18, 0x0C	; 12
    4b7a:	e2 1e       	adc	r14, r18
    4b7c:	f1 1c       	adc	r15, r1
    4b7e:	31 ea       	ldi	r19, 0xA1	; 161
    4b80:	c3 16       	cp	r12, r19
    4b82:	30 ef       	ldi	r19, 0xF0	; 240
    4b84:	d3 06       	cpc	r13, r19
    4b86:	39 e1       	ldi	r19, 0x19	; 25
    4b88:	e3 06       	cpc	r14, r19
    4b8a:	f1 04       	cpc	r15, r1
    4b8c:	f8 f0       	brcs	.+62     	; 0x4bcc <set+0x154>
				sprintf(strbuf, fmt5, newEncoderValue/ENC_COUNTS_PER_MICRON);
    4b8e:	2b e1       	ldi	r18, 0x1B	; 27
    4b90:	31 e0       	ldi	r19, 0x01	; 1
    4b92:	40 e0       	ldi	r20, 0x00	; 0
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	0e 94 ab 30 	call	0x6156	; 0x6156 <__divmodsi4>
    4b9a:	5f 93       	push	r21
    4b9c:	4f 93       	push	r20
    4b9e:	3f 93       	push	r19
    4ba0:	2f 93       	push	r18
    4ba2:	ce 01       	movw	r24, r28
    4ba4:	82 54       	subi	r24, 0x42	; 66
    4ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba8:	9f 93       	push	r25
    4baa:	8f 93       	push	r24
    4bac:	8e 01       	movw	r16, r28
    4bae:	0f 5f       	subi	r16, 0xFF	; 255
    4bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb2:	1f 93       	push	r17
    4bb4:	0f 93       	push	r16
    4bb6:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_MTR, strbuf);
    4bba:	b8 01       	movw	r22, r16
    4bbc:	86 e3       	ldi	r24, 0x36	; 54
    4bbe:	91 e0       	ldi	r25, 0x01	; 1
    4bc0:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4bc4:	cd bf       	out	0x3d, r28	; 61
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	13 e6       	ldi	r17, 0x63	; 99
    4bca:	a8 c0       	rjmp	.+336    	; 0x4d1c <set+0x2a4>
			}
			mtraddr = object + 31;
			if (put_MOTOR_ENCODER(mtraddr, newEncoderValue) == ERROR) {
    4bcc:	ab 01       	movw	r20, r22
    4bce:	bc 01       	movw	r22, r24
    4bd0:	8f e1       	ldi	r24, 0x1F	; 31
    4bd2:	80 0f       	add	r24, r16
    4bd4:	0e 94 66 22 	call	0x44cc	; 0x44cc <put_MOTOR_ENCODER>
    4bd8:	18 2f       	mov	r17, r24
    4bda:	83 36       	cpi	r24, 0x63	; 99
    4bdc:	09 f0       	breq	.+2      	; 0x4be0 <set+0x168>
    4bde:	9b c0       	rjmp	.+310    	; 0x4d16 <set+0x29e>
				sprintf(strbuf, fmt0, object);
    4be0:	1f 92       	push	r1
    4be2:	0f 93       	push	r16
    4be4:	ce 01       	movw	r24, r28
    4be6:	8f 5a       	subi	r24, 0xAF	; 175
    4be8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bea:	9f 93       	push	r25
    4bec:	8f 93       	push	r24
    4bee:	9e 01       	movw	r18, r28
    4bf0:	2f 5f       	subi	r18, 0xFF	; 255
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	79 01       	movw	r14, r18
    4bf6:	3f 93       	push	r19
    4bf8:	2f 93       	push	r18
    4bfa:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_MTR, strbuf);
    4bfe:	b7 01       	movw	r22, r14
    4c00:	86 e3       	ldi	r24, 0x36	; 54
    4c02:	91 e0       	ldi	r25, 0x01	; 1
    4c04:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	0f 90       	pop	r0
    4c12:	0f 90       	pop	r0
    4c14:	83 c0       	rjmp	.+262    	; 0x4d1c <set+0x2a4>
			}
			break;

		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    4c16:	44 e3       	ldi	r20, 0x34	; 52
    4c18:	42 9f       	mul	r20, r18
    4c1a:	c0 01       	movw	r24, r0
    4c1c:	43 9f       	mul	r20, r19
    4c1e:	90 0d       	add	r25, r0
    4c20:	11 24       	eor	r1, r1
    4c22:	9c 01       	movw	r18, r24
    4c24:	2f 5e       	subi	r18, 0xEF	; 239
    4c26:	37 4d       	sbci	r19, 0xD7	; 215
    4c28:	79 01       	movw	r14, r18
    4c2a:	f9 01       	movw	r30, r18
    4c2c:	01 90       	ld	r0, Z+
    4c2e:	00 20       	and	r0, r0
    4c30:	e9 f7       	brne	.-6      	; 0x4c2c <set+0x1b4>
    4c32:	31 97       	sbiw	r30, 0x01	; 1
    4c34:	e2 1b       	sub	r30, r18
    4c36:	f3 0b       	sbc	r31, r19
    4c38:	73 97       	sbiw	r30, 0x13	; 19
    4c3a:	b9 f0       	breq	.+46     	; 0x4c6a <set+0x1f2>
				sprintf(strbuf, fmt1);
    4c3c:	ce 01       	movw	r24, r28
    4c3e:	8c 58       	subi	r24, 0x8C	; 140
    4c40:	9f 4f       	sbci	r25, 0xFF	; 255
    4c42:	9f 93       	push	r25
    4c44:	8f 93       	push	r24
    4c46:	8e 01       	movw	r16, r28
    4c48:	0f 5f       	subi	r16, 0xFF	; 255
    4c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4c:	1f 93       	push	r17
    4c4e:	0f 93       	push	r16
    4c50:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_SETTIME, strbuf);
    4c54:	b8 01       	movw	r22, r16
    4c56:	8a e5       	ldi	r24, 0x5A	; 90
    4c58:	92 e0       	ldi	r25, 0x02	; 2
    4c5a:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4c5e:	0f 90       	pop	r0
    4c60:	0f 90       	pop	r0
    4c62:	0f 90       	pop	r0
    4c64:	0f 90       	pop	r0
    4c66:	13 e6       	ldi	r17, 0x63	; 99
    4c68:	59 c0       	rjmp	.+178    	; 0x4d1c <set+0x2a4>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    4c6a:	c9 01       	movw	r24, r18
    4c6c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <put_time>
    4c70:	18 2f       	mov	r17, r24
    4c72:	83 36       	cpi	r24, 0x63	; 99
    4c74:	b1 f4       	brne	.+44     	; 0x4ca2 <set+0x22a>
				sprintf(strbuf, fmt2);
    4c76:	ce 01       	movw	r24, r28
    4c78:	87 57       	subi	r24, 0x77	; 119
    4c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7c:	9f 93       	push	r25
    4c7e:	8f 93       	push	r24
    4c80:	88 58       	subi	r24, 0x88	; 136
    4c82:	91 09       	sbc	r25, r1
    4c84:	7c 01       	movw	r14, r24
    4c86:	9f 93       	push	r25
    4c88:	8f 93       	push	r24
    4c8a:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_ISO, strbuf);
    4c8e:	b7 01       	movw	r22, r14
    4c90:	8b e5       	ldi	r24, 0x5B	; 91
    4c92:	92 e0       	ldi	r25, 0x02	; 2
    4c94:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
    4ca0:	3d c0       	rjmp	.+122    	; 0x4d1c <set+0x2a4>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    4ca2:	24 e1       	ldi	r18, 0x14	; 20
    4ca4:	a7 01       	movw	r20, r14
    4ca6:	60 e0       	ldi	r22, 0x00	; 0
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	80 e5       	ldi	r24, 0x50	; 80
    4cac:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_FRAM>
    4cb0:	18 2f       	mov	r17, r24
    4cb2:	83 36       	cpi	r24, 0x63	; 99
    4cb4:	91 f5       	brne	.+100    	; 0x4d1a <set+0x2a2>
				sprintf(strbuf, fmt3);
    4cb6:	ce 01       	movw	r24, r28
    4cb8:	83 56       	subi	r24, 0x63	; 99
    4cba:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbc:	9f 93       	push	r25
    4cbe:	8f 93       	push	r24
    4cc0:	9e 01       	movw	r18, r28
    4cc2:	2f 5f       	subi	r18, 0xFF	; 255
    4cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc6:	79 01       	movw	r14, r18
    4cc8:	3f 93       	push	r19
    4cca:	2f 93       	push	r18
    4ccc:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
				printError(ERR_ISO, strbuf);
    4cd0:	b7 01       	movw	r22, r14
    4cd2:	8b e5       	ldi	r24, 0x5B	; 91
    4cd4:	92 e0       	ldi	r25, 0x02	; 2
    4cd6:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
				return(ERROR);
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
    4ce2:	1c c0       	rjmp	.+56     	; 0x4d1c <set+0x2a4>
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    4ce4:	ce 01       	movw	r24, r28
    4ce6:	8d 54       	subi	r24, 0x4D	; 77
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	9f 93       	push	r25
    4cec:	8f 93       	push	r24
    4cee:	8e 01       	movw	r16, r28
    4cf0:	0f 5f       	subi	r16, 0xFF	; 255
    4cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf4:	1f 93       	push	r17
    4cf6:	0f 93       	push	r16
    4cf8:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
			printError(ERR_SET, strbuf);
    4cfc:	b8 01       	movw	r22, r16
    4cfe:	89 e5       	ldi	r24, 0x59	; 89
    4d00:	92 e0       	ldi	r25, 0x02	; 2
    4d02:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
			return(ERROR);
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	0f 90       	pop	r0
    4d0e:	13 e6       	ldi	r17, 0x63	; 99
    4d10:	05 c0       	rjmp	.+10     	; 0x4d1c <set+0x2a4>
	switch(object) {
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
				return(NOERROR);
    4d12:	10 e0       	ldi	r17, 0x00	; 0
    4d14:	03 c0       	rjmp	.+6      	; 0x4d1c <set+0x2a4>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    4d16:	10 e0       	ldi	r17, 0x00	; 0
    4d18:	01 c0       	rjmp	.+2      	; 0x4d1c <set+0x2a4>
    4d1a:	10 e0       	ldi	r17, 0x00	; 0

}
    4d1c:	81 2f       	mov	r24, r17
    4d1e:	cf 51       	subi	r28, 0x1F	; 31
    4d20:	df 4f       	sbci	r29, 0xFF	; 255
    4d22:	cd bf       	out	0x3d, r28	; 61
    4d24:	de bf       	out	0x3e, r29	; 62
    4d26:	df 91       	pop	r29
    4d28:	cf 91       	pop	r28
    4d2a:	1f 91       	pop	r17
    4d2c:	0f 91       	pop	r16
    4d2e:	ff 90       	pop	r15
    4d30:	ef 90       	pop	r14
    4d32:	df 90       	pop	r13
    4d34:	cf 90       	pop	r12
    4d36:	08 95       	ret

00004d38 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <get_temperature+0x6>
    4d3e:	00 d0       	rcall	.+0      	; 0x4d40 <get_temperature+0x8>
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    4d44:	83 30       	cpi	r24, 0x03	; 3
    4d46:	18 f0       	brcs	.+6      	; 0x4d4e <get_temperature+0x16>
    4d48:	83 30       	cpi	r24, 0x03	; 3
    4d4a:	39 f0       	breq	.+14     	; 0x4d5a <get_temperature+0x22>
    4d4c:	0b c0       	rjmp	.+22     	; 0x4d64 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    4d4e:	be 01       	movw	r22, r28
    4d50:	6f 5f       	subi	r22, 0xFF	; 255
    4d52:	7f 4f       	sbci	r23, 0xFF	; 255
    4d54:	0e 94 7f 01 	call	0x2fe	; 0x2fe <read_AD590>
			break;
    4d58:	0d c0       	rjmp	.+26     	; 0x4d74 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	01 96       	adiw	r24, 0x01	; 1
    4d5e:	0e 94 3d 0b 	call	0x167a	; 0x167a <read_MCP9808>
			break;
    4d62:	08 c0       	rjmp	.+16     	; 0x4d74 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	90 e8       	ldi	r25, 0x80	; 128
    4d68:	a6 e2       	ldi	r26, 0x26	; 38
    4d6a:	b4 ec       	ldi	r27, 0xC4	; 196
    4d6c:	89 83       	std	Y+1, r24	; 0x01
    4d6e:	9a 83       	std	Y+2, r25	; 0x02
    4d70:	ab 83       	std	Y+3, r26	; 0x03
    4d72:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    4d74:	69 81       	ldd	r22, Y+1	; 0x01
    4d76:	7a 81       	ldd	r23, Y+2	; 0x02
    4d78:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	48 e4       	ldi	r20, 0x48	; 72
    4d82:	52 ec       	ldi	r21, 0xC2	; 194
    4d84:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <__cmpsf2>
    4d88:	88 23       	and	r24, r24
    4d8a:	44 f4       	brge	.+16     	; 0x4d9c <get_temperature+0x64>
		temperature = BADFLOAT;
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	90 e8       	ldi	r25, 0x80	; 128
    4d90:	a6 e2       	ldi	r26, 0x26	; 38
    4d92:	b4 ec       	ldi	r27, 0xC4	; 196
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	9a 83       	std	Y+2, r25	; 0x02
    4d98:	ab 83       	std	Y+3, r26	; 0x03
    4d9a:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    4d9c:	69 81       	ldd	r22, Y+1	; 0x01
    4d9e:	7a 81       	ldd	r23, Y+2	; 0x02
    4da0:	8b 81       	ldd	r24, Y+3	; 0x03
    4da2:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4da4:	24 96       	adiw	r28, 0x04	; 4
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	08 95       	ret

00004db0 <testroutine>:
#include "initialize.h"
#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    4db0:	cf 92       	push	r12
    4db2:	df 92       	push	r13
    4db4:	ef 92       	push	r14
    4db6:	ff 92       	push	r15
    4db8:	1f 93       	push	r17
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	cd b7       	in	r28, 0x3d	; 61
    4dc0:	de b7       	in	r29, 0x3e	; 62
    4dc2:	c0 55       	subi	r28, 0x50	; 80
    4dc4:	d1 09       	sbc	r29, r1
    4dc6:	cd bf       	out	0x3d, r28	; 61
    4dc8:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i;

	for (i = 0; i < 3; i++) {
    4dca:	10 e0       	ldi	r17, 0x00	; 0
    4dcc:	30 c0       	rjmp	.+96     	; 0x4e2e <testroutine+0x7e>
		get_MOTOR_LIMITS();
    4dce:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <get_MOTOR_LIMITS>
		sprintf(strbuf, "motor %d direction is %d", i, motorDir[i]);
    4dd2:	c1 2e       	mov	r12, r17
    4dd4:	d1 2c       	mov	r13, r1
    4dd6:	f6 01       	movw	r30, r12
    4dd8:	e3 5c       	subi	r30, 0xC3	; 195
    4dda:	f5 4d       	sbci	r31, 0xD5	; 213
    4ddc:	80 81       	ld	r24, Z
    4dde:	1f 92       	push	r1
    4de0:	8f 93       	push	r24
    4de2:	1f 92       	push	r1
    4de4:	1f 93       	push	r17
    4de6:	8c e8       	ldi	r24, 0x8C	; 140
    4de8:	92 eb       	ldi	r25, 0xB2	; 178
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	ce 01       	movw	r24, r28
    4df0:	01 96       	adiw	r24, 0x01	; 1
    4df2:	7c 01       	movw	r14, r24
    4df4:	9f 93       	push	r25
    4df6:	8f 93       	push	r24
    4df8:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printLine(strbuf);
    4dfc:	c7 01       	movw	r24, r14
    4dfe:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
		sprintf(strbuf, "motor %d limit state is %d", i, motorLim[i]);
    4e02:	f6 01       	movw	r30, r12
    4e04:	e0 5c       	subi	r30, 0xC0	; 192
    4e06:	f5 4d       	sbci	r31, 0xD5	; 213
    4e08:	80 81       	ld	r24, Z
    4e0a:	1f 92       	push	r1
    4e0c:	8f 93       	push	r24
    4e0e:	1f 92       	push	r1
    4e10:	1f 93       	push	r17
    4e12:	85 ea       	ldi	r24, 0xA5	; 165
    4e14:	92 eb       	ldi	r25, 0xB2	; 178
    4e16:	9f 93       	push	r25
    4e18:	8f 93       	push	r24
    4e1a:	ff 92       	push	r15
    4e1c:	ef 92       	push	r14
    4e1e:	0e 94 ef 32 	call	0x65de	; 0x65de <sprintf>
		printLine(strbuf);
    4e22:	c7 01       	movw	r24, r14
    4e24:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
{

	char strbuf[80];
	uint8_t i;

	for (i = 0; i < 3; i++) {
    4e28:	1f 5f       	subi	r17, 0xFF	; 255
    4e2a:	cd bf       	out	0x3d, r28	; 61
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	13 30       	cpi	r17, 0x03	; 3
    4e30:	70 f2       	brcs	.-100    	; 0x4dce <testroutine+0x1e>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    4e32:	c0 5b       	subi	r28, 0xB0	; 176
    4e34:	df 4f       	sbci	r29, 0xFF	; 255
    4e36:	cd bf       	out	0x3d, r28	; 61
    4e38:	de bf       	out	0x3e, r29	; 62
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	ff 90       	pop	r15
    4e42:	ef 90       	pop	r14
    4e44:	df 90       	pop	r13
    4e46:	cf 90       	pop	r12
    4e48:	08 95       	ret

00004e4a <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    4e4a:	ac 01       	movw	r20, r24
    4e4c:	e0 e6       	ldi	r30, 0x60	; 96
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	94 8d       	ldd	r25, Z+28	; 0x1c
    4e52:	9e 7f       	andi	r25, 0xFE	; 254
    4e54:	88 ed       	ldi	r24, 0xD8	; 216
    4e56:	84 bf       	out	0x34, r24	; 52
    4e58:	94 8f       	std	Z+28, r25	; 0x1c
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <init_RTC+0x14>
    4e5c:	00 00       	nop
    4e5e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    4e62:	96 fd       	sbrc	r25, 6
    4e64:	fb cf       	rjmp	.-10     	; 0x4e5c <init_RTC+0x12>
    4e66:	e0 e6       	ldi	r30, 0x60	; 96
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	94 8d       	ldd	r25, Z+28	; 0x1c
    4e6c:	9b 7f       	andi	r25, 0xFB	; 251
    4e6e:	28 ed       	ldi	r18, 0xD8	; 216
    4e70:	24 bf       	out	0x34, r18	; 52
    4e72:	94 8f       	std	Z+28, r25	; 0x1c
    4e74:	94 8d       	ldd	r25, Z+28	; 0x1c
    4e76:	91 60       	ori	r25, 0x01	; 1
    4e78:	24 bf       	out	0x34, r18	; 52
    4e7a:	94 8f       	std	Z+28, r25	; 0x1c
    4e7c:	01 c0       	rjmp	.+2      	; 0x4e80 <init_RTC+0x36>
    4e7e:	00 00       	nop
    4e80:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    4e84:	91 11       	cpse	r25, r1
    4e86:	fb cf       	rjmp	.-10     	; 0x4e7e <init_RTC+0x34>
    4e88:	e0 e4       	ldi	r30, 0x40	; 64
    4e8a:	f1 e0       	ldi	r31, 0x01	; 1
    4e8c:	42 87       	std	Z+10, r20	; 0x0a
    4e8e:	53 87       	std	Z+11, r21	; 0x0b
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	87 83       	std	Z+7, r24	; 0x07
    4e94:	85 81       	ldd	r24, Z+5	; 0x05
    4e96:	81 60       	ori	r24, 0x01	; 1
    4e98:	85 83       	std	Z+5, r24	; 0x05
    4e9a:	81 eb       	ldi	r24, 0xB1	; 177
    4e9c:	80 83       	st	Z, r24
    4e9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ea0:	81 60       	ori	r24, 0x01	; 1
    4ea2:	82 83       	std	Z+2, r24	; 0x02
    4ea4:	81 e2       	ldi	r24, 0x21	; 33
    4ea6:	80 8b       	std	Z+16, r24	; 0x10
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	82 8b       	std	Z+18, r24	; 0x12
    4eac:	08 95       	ret

00004eae <__vector_3>:
    4eae:	1f 92       	push	r1
    4eb0:	0f 92       	push	r0
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	0f 92       	push	r0
    4eb6:	11 24       	eor	r1, r1
    4eb8:	8f 93       	push	r24
    4eba:	9f 93       	push	r25
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    4ec2:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <timerOLED>
    4ec6:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <timerOLED+0x1>
    4eca:	01 96       	adiw	r24, 0x01	; 1
    4ecc:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <timerOLED>
    4ed0:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <timerOLED+0x1>
    4ed4:	80 e2       	ldi	r24, 0x20	; 32
    4ed6:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    4eda:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    4ede:	8f 5f       	subi	r24, 0xFF	; 255
    4ee0:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <timerSAVEENCODER>
    4ee4:	9f 91       	pop	r25
    4ee6:	8f 91       	pop	r24
    4ee8:	0f 90       	pop	r0
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	0f 90       	pop	r0
    4eee:	1f 90       	pop	r1
    4ef0:	18 95       	reti

00004ef2 <__vector_4>:
    4ef2:	1f 92       	push	r1
    4ef4:	0f 92       	push	r0
    4ef6:	0f b6       	in	r0, 0x3f	; 63
    4ef8:	0f 92       	push	r0
    4efa:	11 24       	eor	r1, r1
    4efc:	8f 93       	push	r24
    4efe:	9f 93       	push	r25
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    4f06:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    4f0a:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    4f0e:	01 96       	adiw	r24, 0x01	; 1
    4f10:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <testTicks>
    4f14:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <testTicks+0x1>
    4f18:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4f1c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4f20:	01 96       	adiw	r24, 0x01	; 1
    4f22:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    4f26:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
    4f2a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4f2e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4f32:	01 96       	adiw	r24, 0x01	; 1
    4f34:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    4f38:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
    4f3c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    4f40:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    4f44:	01 96       	adiw	r24, 0x01	; 1
    4f46:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    4f4a:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
    4f4e:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4f52:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4f56:	01 96       	adiw	r24, 0x01	; 1
    4f58:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    4f5c:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>
    4f60:	9f 91       	pop	r25
    4f62:	8f 91       	pop	r24
    4f64:	0f 90       	pop	r0
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	0f 90       	pop	r0
    4f6a:	1f 90       	pop	r1
    4f6c:	18 95       	reti

00004f6e <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    4f6e:	1f 92       	push	r1
    4f70:	0f 92       	push	r0
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	0f 92       	push	r0
    4f76:	11 24       	eor	r1, r1
    4f78:	8f 93       	push	r24

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>

    4f80:	8f 91       	pop	r24
    4f82:	0f 90       	pop	r0
    4f84:	0f be       	out	0x3f, r0	; 63
    4f86:	0f 90       	pop	r0
    4f88:	1f 90       	pop	r1
    4f8a:	18 95       	reti

00004f8c <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    4f8c:	e0 ea       	ldi	r30, 0xA0	; 160
    4f8e:	f8 e0       	ldi	r31, 0x08	; 8
    4f90:	8b e0       	ldi	r24, 0x0B	; 11
    4f92:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    4f94:	83 81       	ldd	r24, Z+3	; 0x03
    4f96:	81 60       	ori	r24, 0x01	; 1
    4f98:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    4f9a:	85 81       	ldd	r24, Z+5	; 0x05
    4f9c:	81 60       	ori	r24, 0x01	; 1
    4f9e:	85 83       	std	Z+5, r24	; 0x05
    4fa0:	08 95       	ret

00004fa2 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4fa2:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4fa6:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4faa:	0f c0       	rjmp	.+30     	; 0x4fca <read_TWI+0x28>
		asm("nop");
    4fac:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    4fae:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4fb2:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4fb6:	c3 97       	sbiw	r24, 0x33	; 51
    4fb8:	40 f0       	brcs	.+16     	; 0x4fca <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    4fba:	60 ec       	ldi	r22, 0xC0	; 192
    4fbc:	72 eb       	ldi	r23, 0xB2	; 178
    4fbe:	81 e9       	ldi	r24, 0x91	; 145
    4fc0:	91 e0       	ldi	r25, 0x01	; 1
    4fc2:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
//			stop_TCB0();
			return(0xFF);
    4fc6:	8f ef       	ldi	r24, 0xFF	; 255
    4fc8:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4fca:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4fce:	88 23       	and	r24, r24
    4fd0:	6c f7       	brge	.-38     	; 0x4fac <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    4fd2:	e0 ea       	ldi	r30, 0xA0	; 160
    4fd4:	f8 e0       	ldi	r31, 0x08	; 8
    4fd6:	84 81       	ldd	r24, Z+4	; 0x04
    4fd8:	8b 7f       	andi	r24, 0xFB	; 251
    4fda:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    4fdc:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    4fde:	94 81       	ldd	r25, Z+4	; 0x04
    4fe0:	92 60       	ori	r25, 0x02	; 2
    4fe2:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    4fe4:	08 95       	ret

00004fe6 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4fe6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4fea:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4fee:	0f c0       	rjmp	.+30     	; 0x500e <readlast_TWI+0x28>
		asm("nop");
    4ff0:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    4ff2:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4ff6:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4ffa:	c3 97       	sbiw	r24, 0x33	; 51
    4ffc:	40 f0       	brcs	.+16     	; 0x500e <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    4ffe:	61 ed       	ldi	r22, 0xD1	; 209
    5000:	72 eb       	ldi	r23, 0xB2	; 178
    5002:	81 e9       	ldi	r24, 0x91	; 145
    5004:	91 e0       	ldi	r25, 0x01	; 1
    5006:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
//			stop_TCB0();
			return(0xFF);
    500a:	8f ef       	ldi	r24, 0xFF	; 255
    500c:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    500e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5012:	88 23       	and	r24, r24
    5014:	6c f7       	brge	.-38     	; 0x4ff0 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    5016:	e0 ea       	ldi	r30, 0xA0	; 160
    5018:	f8 e0       	ldi	r31, 0x08	; 8
    501a:	84 81       	ldd	r24, Z+4	; 0x04
    501c:	84 60       	ori	r24, 0x04	; 4
    501e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    5020:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    5022:	08 95       	ret

00005024 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    5024:	61 30       	cpi	r22, 0x01	; 1
    5026:	39 f4       	brne	.+14     	; 0x5036 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	88 0f       	add	r24, r24
    502c:	99 1f       	adc	r25, r25
    502e:	81 60       	ori	r24, 0x01	; 1
    5030:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    5034:	03 c0       	rjmp	.+6      	; 0x503c <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    5036:	88 0f       	add	r24, r24
    5038:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    503c:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5040:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5044:	0f c0       	rjmp	.+30     	; 0x5064 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    5046:	00 00       	nop
		if (TWI_ticks > 50) {
    5048:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    504c:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5050:	c3 97       	sbiw	r24, 0x33	; 51
    5052:	40 f0       	brcs	.+16     	; 0x5064 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    5054:	62 ee       	ldi	r22, 0xE2	; 226
    5056:	72 eb       	ldi	r23, 0xB2	; 178
    5058:	81 e9       	ldi	r24, 0x91	; 145
    505a:	91 e0       	ldi	r25, 0x01	; 1
    505c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
//			stop_TCB0();
			return(ERROR);
    5060:	83 e6       	ldi	r24, 0x63	; 99
    5062:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5064:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5068:	80 7c       	andi	r24, 0xC0	; 192
    506a:	69 f3       	breq	.-38     	; 0x5046 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    506c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5070:	82 ff       	sbrs	r24, 2
    5072:	08 c0       	rjmp	.+16     	; 0x5084 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    5074:	64 ef       	ldi	r22, 0xF4	; 244
    5076:	72 eb       	ldi	r23, 0xB2	; 178
    5078:	81 e9       	ldi	r24, 0x91	; 145
    507a:	91 e0       	ldi	r25, 0x01	; 1
    507c:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    5080:	83 e6       	ldi	r24, 0x63	; 99
    5082:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    5084:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5088:	83 ff       	sbrs	r24, 3
    508a:	08 c0       	rjmp	.+16     	; 0x509c <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    508c:	6c ef       	ldi	r22, 0xFC	; 252
    508e:	72 eb       	ldi	r23, 0xB2	; 178
    5090:	81 e9       	ldi	r24, 0x91	; 145
    5092:	91 e0       	ldi	r25, 0x01	; 1
    5094:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    5098:	83 e6       	ldi	r24, 0x63	; 99
    509a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    509c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    50a0:	89 2f       	mov	r24, r25
    50a2:	80 71       	andi	r24, 0x10	; 16
    50a4:	94 ff       	sbrs	r25, 4
    50a6:	07 c0       	rjmp	.+14     	; 0x50b6 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    50a8:	6c e0       	ldi	r22, 0x0C	; 12
    50aa:	73 eb       	ldi	r23, 0xB3	; 179
    50ac:	81 e9       	ldi	r24, 0x91	; 145
    50ae:	91 e0       	ldi	r25, 0x01	; 1
    50b0:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    50b4:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    50b6:	08 95       	ret

000050b8 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    50b8:	87 e0       	ldi	r24, 0x07	; 7
    50ba:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    50be:	08 95       	ret

000050c0 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    50c0:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    50c4:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    50c8:	10 c0       	rjmp	.+32     	; 0x50ea <write_TWI+0x2a>
		asm("nop");
    50ca:	00 00       	nop
		if (TWI_ticks > 50) {
    50cc:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    50d0:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    50d4:	23 33       	cpi	r18, 0x33	; 51
    50d6:	31 05       	cpc	r19, r1
    50d8:	40 f0       	brcs	.+16     	; 0x50ea <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    50da:	64 e2       	ldi	r22, 0x24	; 36
    50dc:	73 eb       	ldi	r23, 0xB3	; 179
    50de:	81 e9       	ldi	r24, 0x91	; 145
    50e0:	91 e0       	ldi	r25, 0x01	; 1
    50e2:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
//			stop_TCB0();
			return(ERROR);
    50e6:	83 e6       	ldi	r24, 0x63	; 99
    50e8:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    50ea:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    50ee:	96 ff       	sbrs	r25, 6
    50f0:	ec cf       	rjmp	.-40     	; 0x50ca <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    50f2:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    50f6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    50fa:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    50fe:	0f c0       	rjmp	.+30     	; 0x511e <write_TWI+0x5e>
		asm("nop");
    5100:	00 00       	nop
		if (TWI_ticks > 50) {
    5102:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5106:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    510a:	c3 97       	sbiw	r24, 0x33	; 51
    510c:	40 f0       	brcs	.+16     	; 0x511e <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    510e:	65 e3       	ldi	r22, 0x35	; 53
    5110:	73 eb       	ldi	r23, 0xB3	; 179
    5112:	81 e9       	ldi	r24, 0x91	; 145
    5114:	91 e0       	ldi	r25, 0x01	; 1
    5116:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
//			stop_TCB0();
			return(ERROR);
    511a:	83 e6       	ldi	r24, 0x63	; 99
    511c:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    511e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5122:	86 ff       	sbrs	r24, 6
    5124:	ed cf       	rjmp	.-38     	; 0x5100 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    5126:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    512a:	89 2f       	mov	r24, r25
    512c:	80 71       	andi	r24, 0x10	; 16
    512e:	94 ff       	sbrs	r25, 4
    5130:	07 c0       	rjmp	.+14     	; 0x5140 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    5132:	66 e4       	ldi	r22, 0x46	; 70
    5134:	73 eb       	ldi	r23, 0xB3	; 179
    5136:	81 e9       	ldi	r24, 0x91	; 145
    5138:	91 e0       	ldi	r25, 0x01	; 1
    513a:	0e 94 67 08 	call	0x10ce	; 0x10ce <printError>
		return(ERROR);
    513e:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    5140:	08 95       	ret

00005142 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    5142:	e0 e0       	ldi	r30, 0x00	; 0
    5144:	f4 e0       	ldi	r31, 0x04	; 4
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    514a:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    514c:	e0 e0       	ldi	r30, 0x00	; 0
    514e:	f8 e0       	ldi	r31, 0x08	; 8
    5150:	24 e7       	ldi	r18, 0x74	; 116
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	20 87       	std	Z+8, r18	; 0x08
    5156:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5158:	95 81       	ldd	r25, Z+5	; 0x05
    515a:	90 68       	ori	r25, 0x80	; 128
    515c:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    515e:	96 81       	ldd	r25, Z+6	; 0x06
    5160:	90 64       	ori	r25, 0x40	; 64
    5162:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5164:	96 81       	ldd	r25, Z+6	; 0x06
    5166:	90 68       	ori	r25, 0x80	; 128
    5168:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    516a:	10 92 49 2f 	sts	0x2F49, r1	; 0x802f49 <send0_buf+0xfe>
	send0_buf.tail = 0;
    516e:	10 92 4a 2f 	sts	0x2F4A, r1	; 0x802f4a <send0_buf+0xff>
	send0_buf.done = YES;
    5172:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	recv0_buf.head = 0;
    5176:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    517a:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    517e:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
	recv0_buf.length = 0;
    5182:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
	recv0_buf.done = NO;
    5186:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    518a:	e0 e4       	ldi	r30, 0x40	; 64
    518c:	f4 e0       	ldi	r31, 0x04	; 4
    518e:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    5190:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5192:	e0 e2       	ldi	r30, 0x20	; 32
    5194:	f8 e0       	ldi	r31, 0x08	; 8
    5196:	2d e6       	ldi	r18, 0x6D	; 109
    5198:	35 e0       	ldi	r19, 0x05	; 5
    519a:	20 87       	std	Z+8, r18	; 0x08
    519c:	31 87       	std	Z+9, r19	; 0x09
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    519e:	95 81       	ldd	r25, Z+5	; 0x05
    51a0:	90 68       	ori	r25, 0x80	; 128
    51a2:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    51a4:	96 81       	ldd	r25, Z+6	; 0x06
    51a6:	90 64       	ori	r25, 0x40	; 64
    51a8:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    51aa:	96 81       	ldd	r25, Z+6	; 0x06
    51ac:	90 68       	ori	r25, 0x80	; 128
    51ae:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    51b0:	e0 e2       	ldi	r30, 0x20	; 32
    51b2:	f4 e0       	ldi	r31, 0x04	; 4
    51b4:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    51b6:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    51b8:	e0 e6       	ldi	r30, 0x60	; 96
    51ba:	f8 e0       	ldi	r31, 0x08	; 8
    51bc:	20 87       	std	Z+8, r18	; 0x08
    51be:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    51c0:	96 81       	ldd	r25, Z+6	; 0x06
    51c2:	90 64       	ori	r25, 0x40	; 64
    51c4:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    51c6:	96 81       	ldd	r25, Z+6	; 0x06
    51c8:	90 68       	ori	r25, 0x80	; 128
    51ca:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    51cc:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	recv3_buf.done = NO;
    51d0:	10 92 52 30 	sts	0x3052, r1	; 0x803052 <recv3_buf+0x103>
    51d4:	08 95       	ret

000051d6 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	eb 01       	movw	r28, r22
    51e0:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    51e2:	81 30       	cpi	r24, 0x01	; 1
    51e4:	b1 f1       	breq	.+108    	; 0x5252 <send_USART+0x7c>
    51e6:	20 f0       	brcs	.+8      	; 0x51f0 <send_USART+0x1a>
    51e8:	83 30       	cpi	r24, 0x03	; 3
    51ea:	09 f4       	brne	.+2      	; 0x51ee <send_USART+0x18>
    51ec:	81 c0       	rjmp	.+258    	; 0x52f0 <send_USART+0x11a>
    51ee:	88 c0       	rjmp	.+272    	; 0x5300 <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    51f0:	10 92 4e 2f 	sts	0x2F4E, r1	; 0x802f4e <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	11 c0       	rjmp	.+34     	; 0x521a <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    51f8:	e9 e4       	ldi	r30, 0x49	; 73
    51fa:	ff e2       	ldi	r31, 0x2F	; 47
    51fc:	80 81       	ld	r24, Z
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	38 81       	ld	r19, Y
    5202:	dc 01       	movw	r26, r24
    5204:	a5 5b       	subi	r26, 0xB5	; 181
    5206:	b1 4d       	sbci	r27, 0xD1	; 209
    5208:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    520a:	01 96       	adiw	r24, 0x01	; 1
    520c:	6e ef       	ldi	r22, 0xFE	; 254
    520e:	70 e0       	ldi	r23, 0x00	; 0
    5210:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
    5214:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5216:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    5218:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    521a:	21 17       	cp	r18, r17
    521c:	68 f3       	brcs	.-38     	; 0x51f8 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    521e:	e0 e0       	ldi	r30, 0x00	; 0
    5220:	f8 e0       	ldi	r31, 0x08	; 8
    5222:	85 81       	ldd	r24, Z+5	; 0x05
    5224:	80 62       	ori	r24, 0x20	; 32
    5226:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    5228:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    522c:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    5230:	0b c0       	rjmp	.+22     	; 0x5248 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    5232:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5236:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    523a:	85 36       	cpi	r24, 0x65	; 101
    523c:	91 05       	cpc	r25, r1
    523e:	20 f0       	brcs	.+8      	; 0x5248 <send_USART+0x72>
					send0_buf.done = YES;
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
					return;
    5246:	5c c0       	rjmp	.+184    	; 0x5300 <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    5248:	80 91 4e 2f 	lds	r24, 0x2F4E	; 0x802f4e <send0_buf+0x103>
    524c:	88 23       	and	r24, r24
    524e:	89 f3       	breq	.-30     	; 0x5232 <send_USART+0x5c>
    5250:	57 c0       	rjmp	.+174    	; 0x5300 <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    5252:	64 2f       	mov	r22, r20
    5254:	70 e0       	ldi	r23, 0x00	; 0
    5256:	ce 01       	movw	r24, r28
    5258:	0e 94 13 18 	call	0x3026	; 0x3026 <crc16>
    525c:	48 2f       	mov	r20, r24
    525e:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	11 c0       	rjmp	.+34     	; 0x5286 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    5264:	e5 e5       	ldi	r30, 0x55	; 85
    5266:	f2 e3       	ldi	r31, 0x32	; 50
    5268:	80 81       	ld	r24, Z
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	38 81       	ld	r19, Y
    526e:	dc 01       	movw	r26, r24
    5270:	a9 5a       	subi	r26, 0xA9	; 169
    5272:	be 4c       	sbci	r27, 0xCE	; 206
    5274:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5276:	01 96       	adiw	r24, 0x01	; 1
    5278:	6e ef       	ldi	r22, 0xFE	; 254
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
    5280:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5282:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    5284:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5286:	21 17       	cp	r18, r17
    5288:	68 f3       	brcs	.-38     	; 0x5264 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    528a:	e5 e5       	ldi	r30, 0x55	; 85
    528c:	f2 e3       	ldi	r31, 0x32	; 50
    528e:	80 81       	ld	r24, Z
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	dc 01       	movw	r26, r24
    5294:	a9 5a       	subi	r26, 0xA9	; 169
    5296:	be 4c       	sbci	r27, 0xCE	; 206
    5298:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    529a:	01 96       	adiw	r24, 0x01	; 1
    529c:	2e ef       	ldi	r18, 0xFE	; 254
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	b9 01       	movw	r22, r18
    52a2:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	dc 01       	movw	r26, r24
    52aa:	a9 5a       	subi	r26, 0xA9	; 169
    52ac:	be 4c       	sbci	r27, 0xCE	; 206
    52ae:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    52b0:	01 96       	adiw	r24, 0x01	; 1
    52b2:	b9 01       	movw	r22, r18
    52b4:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
    52b8:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    52ba:	1e 5f       	subi	r17, 0xFE	; 254
    52bc:	10 93 57 32 	sts	0x3257, r17	; 0x803257 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    52c0:	e0 e2       	ldi	r30, 0x20	; 32
    52c2:	f8 e0       	ldi	r31, 0x08	; 8
    52c4:	85 81       	ldd	r24, Z+5	; 0x05
    52c6:	80 62       	ori	r24, 0x20	; 32
    52c8:	85 83       	std	Z+5, r24	; 0x05
			break;
    52ca:	1a c0       	rjmp	.+52     	; 0x5300 <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    52cc:	e1 e5       	ldi	r30, 0x51	; 81
    52ce:	f1 e3       	ldi	r31, 0x31	; 49
    52d0:	80 81       	ld	r24, Z
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	38 81       	ld	r19, Y
    52d6:	dc 01       	movw	r26, r24
    52d8:	ad 5a       	subi	r26, 0xAD	; 173
    52da:	bf 4c       	sbci	r27, 0xCF	; 207
    52dc:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    52de:	01 96       	adiw	r24, 0x01	; 1
    52e0:	6e ef       	ldi	r22, 0xFE	; 254
    52e2:	70 e0       	ldi	r23, 0x00	; 0
    52e4:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
    52e8:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    52ea:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    52ec:	21 96       	adiw	r28, 0x01	; 1
    52ee:	01 c0       	rjmp	.+2      	; 0x52f2 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    52f0:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    52f2:	21 17       	cp	r18, r17
    52f4:	58 f3       	brcs	.-42     	; 0x52cc <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    52f6:	e0 e6       	ldi	r30, 0x60	; 96
    52f8:	f8 e0       	ldi	r31, 0x08	; 8
    52fa:	85 81       	ldd	r24, Z+5	; 0x05
    52fc:	80 62       	ori	r24, 0x20	; 32
    52fe:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	1f 91       	pop	r17
    5306:	0f 91       	pop	r16
    5308:	08 95       	ret

0000530a <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    530a:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    530c:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    5310:	60 93 41 2c 	sts	0x2C41, r22	; 0x802c41 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	08 c0       	rjmp	.+16     	; 0x5328 <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    5318:	e9 2f       	mov	r30, r25
    531a:	f0 e0       	ldi	r31, 0x00	; 0
    531c:	8c 91       	ld	r24, X
    531e:	ed 5b       	subi	r30, 0xBD	; 189
    5320:	f4 4d       	sbci	r31, 0xD4	; 212
    5322:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5324:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    5326:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5328:	96 17       	cp	r25, r22
    532a:	b0 f3       	brcs	.-20     	; 0x5318 <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    532c:	e0 e2       	ldi	r30, 0x20	; 32
    532e:	f8 e0       	ldi	r31, 0x08	; 8
    5330:	85 81       	ldd	r24, Z+5	; 0x05
    5332:	80 62       	ori	r24, 0x20	; 32
    5334:	85 83       	std	Z+5, r24	; 0x05
    5336:	08 95       	ret

00005338 <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    5338:	1f 92       	push	r1
    533a:	0f 92       	push	r0
    533c:	0f b6       	in	r0, 0x3f	; 63
    533e:	0f 92       	push	r0
    5340:	11 24       	eor	r1, r1
    5342:	8f 93       	push	r24
    5344:	af 93       	push	r26
    5346:	bf 93       	push	r27
    5348:	ef 93       	push	r30
    534a:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    534c:	a2 e4       	ldi	r26, 0x42	; 66
    534e:	bb e2       	ldi	r27, 0x2B	; 43
    5350:	ec 91       	ld	r30, X
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	8e 0f       	add	r24, r30
    5356:	8c 93       	st	X, r24
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    535e:	ed 5b       	subi	r30, 0xBD	; 189
    5360:	f5 4d       	sbci	r31, 0xD5	; 213
    5362:	80 83       	st	Z, r24

}
    5364:	ff 91       	pop	r31
    5366:	ef 91       	pop	r30
    5368:	bf 91       	pop	r27
    536a:	af 91       	pop	r26
    536c:	8f 91       	pop	r24
    536e:	0f 90       	pop	r0
    5370:	0f be       	out	0x3f, r0	; 63
    5372:	0f 90       	pop	r0
    5374:	1f 90       	pop	r1
    5376:	18 95       	reti

00005378 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    5378:	1f 92       	push	r1
    537a:	0f 92       	push	r0
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	0f 92       	push	r0
    5380:	11 24       	eor	r1, r1
    5382:	8f 93       	push	r24
    5384:	9f 93       	push	r25
    5386:	af 93       	push	r26
    5388:	bf 93       	push	r27
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ef 93       	push	r30
    5390:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5392:	a0 e2       	ldi	r26, 0x20	; 32
    5394:	b8 e0       	ldi	r27, 0x08	; 8
    5396:	15 96       	adiw	r26, 0x05	; 5
    5398:	8c 91       	ld	r24, X
    539a:	15 97       	sbiw	r26, 0x05	; 5
    539c:	8f 7d       	andi	r24, 0xDF	; 223
    539e:	15 96       	adiw	r26, 0x05	; 5
    53a0:	8c 93       	st	X, r24
    53a2:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    53a4:	c2 e4       	ldi	r28, 0x42	; 66
    53a6:	dc e2       	ldi	r29, 0x2C	; 44
    53a8:	e8 81       	ld	r30, Y
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	8e 0f       	add	r24, r30
    53ae:	88 83       	st	Y, r24
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	ed 5b       	subi	r30, 0xBD	; 189
    53b4:	f4 4d       	sbci	r31, 0xD4	; 212
    53b6:	90 81       	ld	r25, Z
    53b8:	12 96       	adiw	r26, 0x02	; 2
    53ba:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    53bc:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <ser_send1+0xfe>
    53c0:	89 17       	cp	r24, r25
    53c2:	28 f4       	brcc	.+10     	; 0x53ce <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    53c4:	e0 e2       	ldi	r30, 0x20	; 32
    53c6:	f8 e0       	ldi	r31, 0x08	; 8
    53c8:	85 81       	ldd	r24, Z+5	; 0x05
    53ca:	80 62       	ori	r24, 0x20	; 32
    53cc:	85 83       	std	Z+5, r24	; 0x05
	}

}
    53ce:	ff 91       	pop	r31
    53d0:	ef 91       	pop	r30
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	bf 91       	pop	r27
    53d8:	af 91       	pop	r26
    53da:	9f 91       	pop	r25
    53dc:	8f 91       	pop	r24
    53de:	0f 90       	pop	r0
    53e0:	0f be       	out	0x3f, r0	; 63
    53e2:	0f 90       	pop	r0
    53e4:	1f 90       	pop	r1
    53e6:	18 95       	reti

000053e8 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    53e8:	1f 92       	push	r1
    53ea:	0f 92       	push	r0
    53ec:	0f b6       	in	r0, 0x3f	; 63
    53ee:	0f 92       	push	r0
    53f0:	11 24       	eor	r1, r1
    53f2:	5f 93       	push	r21
    53f4:	6f 93       	push	r22
    53f6:	7f 93       	push	r23
    53f8:	8f 93       	push	r24
    53fa:	9f 93       	push	r25
    53fc:	af 93       	push	r26
    53fe:	bf 93       	push	r27
    5400:	ef 93       	push	r30
    5402:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5404:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5408:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
    540c:	8d 3f       	cpi	r24, 0xFD	; 253
    540e:	10 f5       	brcc	.+68     	; 0x5454 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5410:	9d 30       	cpi	r25, 0x0D	; 13
    5412:	51 f4       	brne	.+20     	; 0x5428 <__vector_17+0x40>
			recv0_buf.done = YES;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    541a:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	e9 5b       	subi	r30, 0xB9	; 185
    5422:	f2 4d       	sbci	r31, 0xD2	; 210
    5424:	10 82       	st	Z, r1
    5426:	06 c0       	rjmp	.+12     	; 0x5434 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5428:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    542c:	f0 e0       	ldi	r31, 0x00	; 0
    542e:	e9 5b       	subi	r30, 0xB9	; 185
    5430:	f2 4d       	sbci	r31, 0xD2	; 210
    5432:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5434:	e8 e4       	ldi	r30, 0x48	; 72
    5436:	fe e2       	ldi	r31, 0x2E	; 46
    5438:	80 81       	ld	r24, Z
    543a:	8f 5f       	subi	r24, 0xFF	; 255
    543c:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    543e:	e5 e4       	ldi	r30, 0x45	; 69
    5440:	fe e2       	ldi	r31, 0x2E	; 46
    5442:	80 81       	ld	r24, Z
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	01 96       	adiw	r24, 0x01	; 1
    5448:	6e ef       	ldi	r22, 0xFE	; 254
    544a:	70 e0       	ldi	r23, 0x00	; 0
    544c:	0e 94 97 30 	call	0x612e	; 0x612e <__divmodhi4>
    5450:	80 83       	st	Z, r24
    5452:	0a c0       	rjmp	.+20     	; 0x5468 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5454:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    5458:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    545c:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
		recv0_buf.length = 0;
    5460:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5464:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
	}
}
    5468:	ff 91       	pop	r31
    546a:	ef 91       	pop	r30
    546c:	bf 91       	pop	r27
    546e:	af 91       	pop	r26
    5470:	9f 91       	pop	r25
    5472:	8f 91       	pop	r24
    5474:	7f 91       	pop	r23
    5476:	6f 91       	pop	r22
    5478:	5f 91       	pop	r21
    547a:	0f 90       	pop	r0
    547c:	0f be       	out	0x3f, r0	; 63
    547e:	0f 90       	pop	r0
    5480:	1f 90       	pop	r1
    5482:	18 95       	reti

00005484 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5484:	1f 92       	push	r1
    5486:	0f 92       	push	r0
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	0f 92       	push	r0
    548c:	11 24       	eor	r1, r1
    548e:	2f 93       	push	r18
    5490:	8f 93       	push	r24
    5492:	9f 93       	push	r25
    5494:	ef 93       	push	r30
    5496:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5498:	e0 e0       	ldi	r30, 0x00	; 0
    549a:	f8 e0       	ldi	r31, 0x08	; 8
    549c:	85 81       	ldd	r24, Z+5	; 0x05
    549e:	8f 7d       	andi	r24, 0xDF	; 223
    54a0:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    54a2:	80 91 49 2f 	lds	r24, 0x2F49	; 0x802f49 <send0_buf+0xfe>
    54a6:	e0 91 4a 2f 	lds	r30, 0x2F4A	; 0x802f4a <send0_buf+0xff>
    54aa:	8e 17       	cp	r24, r30
    54ac:	d1 f0       	breq	.+52     	; 0x54e2 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	8e 0f       	add	r24, r30
    54b2:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
    54b6:	f0 e0       	ldi	r31, 0x00	; 0
    54b8:	e5 5b       	subi	r30, 0xB5	; 181
    54ba:	f1 4d       	sbci	r31, 0xD1	; 209
    54bc:	90 81       	ld	r25, Z
    54be:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    54c2:	91 e0       	ldi	r25, 0x01	; 1
    54c4:	8e 3f       	cpi	r24, 0xFE	; 254
    54c6:	08 f4       	brcc	.+2      	; 0x54ca <__vector_18+0x46>
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	91 95       	neg	r25
    54cc:	29 2f       	mov	r18, r25
    54ce:	22 0f       	add	r18, r18
    54d0:	82 1b       	sub	r24, r18
    54d2:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    54d6:	e0 e0       	ldi	r30, 0x00	; 0
    54d8:	f8 e0       	ldi	r31, 0x08	; 8
    54da:	85 81       	ldd	r24, Z+5	; 0x05
    54dc:	80 62       	ori	r24, 0x20	; 32
    54de:	85 83       	std	Z+5, r24	; 0x05
    54e0:	03 c0       	rjmp	.+6      	; 0x54e8 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	}

}
    54e8:	ff 91       	pop	r31
    54ea:	ef 91       	pop	r30
    54ec:	9f 91       	pop	r25
    54ee:	8f 91       	pop	r24
    54f0:	2f 91       	pop	r18
    54f2:	0f 90       	pop	r0
    54f4:	0f be       	out	0x3f, r0	; 63
    54f6:	0f 90       	pop	r0
    54f8:	1f 90       	pop	r1
    54fa:	18 95       	reti

000054fc <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    54fc:	1f 92       	push	r1
    54fe:	0f 92       	push	r0
    5500:	0f b6       	in	r0, 0x3f	; 63
    5502:	0f 92       	push	r0
    5504:	11 24       	eor	r1, r1
    5506:	8f 93       	push	r24
    5508:	9f 93       	push	r25
    550a:	af 93       	push	r26
    550c:	bf 93       	push	r27
    550e:	ef 93       	push	r30
    5510:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5512:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    5516:	8d 30       	cpi	r24, 0x0D	; 13
    5518:	21 f0       	breq	.+8      	; 0x5522 <__vector_37+0x26>
    551a:	e0 91 51 30 	lds	r30, 0x3051	; 0x803051 <recv3_buf+0x102>
    551e:	ed 3f       	cpi	r30, 0xFD	; 253
    5520:	78 f0       	brcs	.+30     	; 0x5540 <__vector_37+0x44>
		recv3_buf.done = YES;
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    5528:	a1 e5       	ldi	r26, 0x51	; 81
    552a:	b0 e3       	ldi	r27, 0x30	; 48
    552c:	8c 91       	ld	r24, X
    552e:	e8 2f       	mov	r30, r24
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	e1 5b       	subi	r30, 0xB1	; 177
    5534:	f0 4d       	sbci	r31, 0xD0	; 208
    5536:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    5538:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    553c:	1c 92       	st	X, r1
		return;
    553e:	08 c0       	rjmp	.+16     	; 0x5550 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    5540:	91 e0       	ldi	r25, 0x01	; 1
    5542:	9e 0f       	add	r25, r30
    5544:	90 93 51 30 	sts	0x3051, r25	; 0x803051 <recv3_buf+0x102>
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	e1 5b       	subi	r30, 0xB1	; 177
    554c:	f0 4d       	sbci	r31, 0xD0	; 208
    554e:	80 83       	st	Z, r24
	}

}
    5550:	ff 91       	pop	r31
    5552:	ef 91       	pop	r30
    5554:	bf 91       	pop	r27
    5556:	af 91       	pop	r26
    5558:	9f 91       	pop	r25
    555a:	8f 91       	pop	r24
    555c:	0f 90       	pop	r0
    555e:	0f be       	out	0x3f, r0	; 63
    5560:	0f 90       	pop	r0
    5562:	1f 90       	pop	r1
    5564:	18 95       	reti

00005566 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5566:	1f 92       	push	r1
    5568:	0f 92       	push	r0
    556a:	0f b6       	in	r0, 0x3f	; 63
    556c:	0f 92       	push	r0
    556e:	11 24       	eor	r1, r1
    5570:	8f 93       	push	r24
    5572:	9f 93       	push	r25
    5574:	af 93       	push	r26
    5576:	bf 93       	push	r27
    5578:	ef 93       	push	r30
    557a:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    557c:	a5 e5       	ldi	r26, 0x55	; 85
    557e:	b1 e3       	ldi	r27, 0x31	; 49
    5580:	ec 91       	ld	r30, X
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	8e 0f       	add	r24, r30
    5586:	8c 93       	st	X, r24
    5588:	f0 e0       	ldi	r31, 0x00	; 0
    558a:	ed 5a       	subi	r30, 0xAD	; 173
    558c:	ff 4c       	sbci	r31, 0xCF	; 207
    558e:	90 81       	ld	r25, Z
    5590:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    5594:	90 91 53 31 	lds	r25, 0x3153	; 0x803153 <send3_buf+0x100>
    5598:	89 17       	cp	r24, r25
    559a:	40 f0       	brcs	.+16     	; 0x55ac <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    559c:	e0 e6       	ldi	r30, 0x60	; 96
    559e:	f8 e0       	ldi	r31, 0x08	; 8
    55a0:	85 81       	ldd	r24, Z+5	; 0x05
    55a2:	8f 7d       	andi	r24, 0xDF	; 223
    55a4:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	}

}
    55ac:	ff 91       	pop	r31
    55ae:	ef 91       	pop	r30
    55b0:	bf 91       	pop	r27
    55b2:	af 91       	pop	r26
    55b4:	9f 91       	pop	r25
    55b6:	8f 91       	pop	r24
    55b8:	0f 90       	pop	r0
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	0f 90       	pop	r0
    55be:	1f 90       	pop	r1
    55c0:	18 95       	reti

000055c2 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    55c2:	88 ed       	ldi	r24, 0xD8	; 216
    55c4:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    55cc:	08 95       	ret

000055ce <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    55ce:	1f 92       	push	r1
    55d0:	0f 92       	push	r0
    55d2:	0f b6       	in	r0, 0x3f	; 63
    55d4:	0f 92       	push	r0
    55d6:	11 24       	eor	r1, r1
    55d8:	2f 93       	push	r18
    55da:	3f 93       	push	r19
    55dc:	4f 93       	push	r20
    55de:	5f 93       	push	r21
    55e0:	6f 93       	push	r22
    55e2:	7f 93       	push	r23
    55e4:	8f 93       	push	r24
    55e6:	9f 93       	push	r25
    55e8:	af 93       	push	r26
    55ea:	bf 93       	push	r27
    55ec:	ef 93       	push	r30
    55ee:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    55f0:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    55f4:	86 ff       	sbrs	r24, 6
    55f6:	05 c0       	rjmp	.+10     	; 0x5602 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    55f8:	80 e4       	ldi	r24, 0x40	; 64
    55fa:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    55fe:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <reboot>
	}

}
    5602:	ff 91       	pop	r31
    5604:	ef 91       	pop	r30
    5606:	bf 91       	pop	r27
    5608:	af 91       	pop	r26
    560a:	9f 91       	pop	r25
    560c:	8f 91       	pop	r24
    560e:	7f 91       	pop	r23
    5610:	6f 91       	pop	r22
    5612:	5f 91       	pop	r21
    5614:	4f 91       	pop	r20
    5616:	3f 91       	pop	r19
    5618:	2f 91       	pop	r18
    561a:	0f 90       	pop	r0
    561c:	0f be       	out	0x3f, r0	; 63
    561e:	0f 90       	pop	r0
    5620:	1f 90       	pop	r1
    5622:	18 95       	reti

00005624 <__subsf3>:
    5624:	50 58       	subi	r21, 0x80	; 128

00005626 <__addsf3>:
    5626:	bb 27       	eor	r27, r27
    5628:	aa 27       	eor	r26, r26
    562a:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__addsf3x>
    562e:	0c 94 6e 2c 	jmp	0x58dc	; 0x58dc <__fp_round>
    5632:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <__fp_pscA>
    5636:	38 f0       	brcs	.+14     	; 0x5646 <__addsf3+0x20>
    5638:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__fp_pscB>
    563c:	20 f0       	brcs	.+8      	; 0x5646 <__addsf3+0x20>
    563e:	39 f4       	brne	.+14     	; 0x564e <__addsf3+0x28>
    5640:	9f 3f       	cpi	r25, 0xFF	; 255
    5642:	19 f4       	brne	.+6      	; 0x564a <__addsf3+0x24>
    5644:	26 f4       	brtc	.+8      	; 0x564e <__addsf3+0x28>
    5646:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__fp_nan>
    564a:	0e f4       	brtc	.+2      	; 0x564e <__addsf3+0x28>
    564c:	e0 95       	com	r30
    564e:	e7 fb       	bst	r30, 7
    5650:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__fp_inf>

00005654 <__addsf3x>:
    5654:	e9 2f       	mov	r30, r25
    5656:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__fp_split3>
    565a:	58 f3       	brcs	.-42     	; 0x5632 <__addsf3+0xc>
    565c:	ba 17       	cp	r27, r26
    565e:	62 07       	cpc	r22, r18
    5660:	73 07       	cpc	r23, r19
    5662:	84 07       	cpc	r24, r20
    5664:	95 07       	cpc	r25, r21
    5666:	20 f0       	brcs	.+8      	; 0x5670 <__addsf3x+0x1c>
    5668:	79 f4       	brne	.+30     	; 0x5688 <__addsf3x+0x34>
    566a:	a6 f5       	brtc	.+104    	; 0x56d4 <__addsf3x+0x80>
    566c:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__fp_zero>
    5670:	0e f4       	brtc	.+2      	; 0x5674 <__addsf3x+0x20>
    5672:	e0 95       	com	r30
    5674:	0b 2e       	mov	r0, r27
    5676:	ba 2f       	mov	r27, r26
    5678:	a0 2d       	mov	r26, r0
    567a:	0b 01       	movw	r0, r22
    567c:	b9 01       	movw	r22, r18
    567e:	90 01       	movw	r18, r0
    5680:	0c 01       	movw	r0, r24
    5682:	ca 01       	movw	r24, r20
    5684:	a0 01       	movw	r20, r0
    5686:	11 24       	eor	r1, r1
    5688:	ff 27       	eor	r31, r31
    568a:	59 1b       	sub	r21, r25
    568c:	99 f0       	breq	.+38     	; 0x56b4 <__addsf3x+0x60>
    568e:	59 3f       	cpi	r21, 0xF9	; 249
    5690:	50 f4       	brcc	.+20     	; 0x56a6 <__addsf3x+0x52>
    5692:	50 3e       	cpi	r21, 0xE0	; 224
    5694:	68 f1       	brcs	.+90     	; 0x56f0 <__addsf3x+0x9c>
    5696:	1a 16       	cp	r1, r26
    5698:	f0 40       	sbci	r31, 0x00	; 0
    569a:	a2 2f       	mov	r26, r18
    569c:	23 2f       	mov	r18, r19
    569e:	34 2f       	mov	r19, r20
    56a0:	44 27       	eor	r20, r20
    56a2:	58 5f       	subi	r21, 0xF8	; 248
    56a4:	f3 cf       	rjmp	.-26     	; 0x568c <__addsf3x+0x38>
    56a6:	46 95       	lsr	r20
    56a8:	37 95       	ror	r19
    56aa:	27 95       	ror	r18
    56ac:	a7 95       	ror	r26
    56ae:	f0 40       	sbci	r31, 0x00	; 0
    56b0:	53 95       	inc	r21
    56b2:	c9 f7       	brne	.-14     	; 0x56a6 <__addsf3x+0x52>
    56b4:	7e f4       	brtc	.+30     	; 0x56d4 <__addsf3x+0x80>
    56b6:	1f 16       	cp	r1, r31
    56b8:	ba 0b       	sbc	r27, r26
    56ba:	62 0b       	sbc	r22, r18
    56bc:	73 0b       	sbc	r23, r19
    56be:	84 0b       	sbc	r24, r20
    56c0:	ba f0       	brmi	.+46     	; 0x56f0 <__addsf3x+0x9c>
    56c2:	91 50       	subi	r25, 0x01	; 1
    56c4:	a1 f0       	breq	.+40     	; 0x56ee <__addsf3x+0x9a>
    56c6:	ff 0f       	add	r31, r31
    56c8:	bb 1f       	adc	r27, r27
    56ca:	66 1f       	adc	r22, r22
    56cc:	77 1f       	adc	r23, r23
    56ce:	88 1f       	adc	r24, r24
    56d0:	c2 f7       	brpl	.-16     	; 0x56c2 <__addsf3x+0x6e>
    56d2:	0e c0       	rjmp	.+28     	; 0x56f0 <__addsf3x+0x9c>
    56d4:	ba 0f       	add	r27, r26
    56d6:	62 1f       	adc	r22, r18
    56d8:	73 1f       	adc	r23, r19
    56da:	84 1f       	adc	r24, r20
    56dc:	48 f4       	brcc	.+18     	; 0x56f0 <__addsf3x+0x9c>
    56de:	87 95       	ror	r24
    56e0:	77 95       	ror	r23
    56e2:	67 95       	ror	r22
    56e4:	b7 95       	ror	r27
    56e6:	f7 95       	ror	r31
    56e8:	9e 3f       	cpi	r25, 0xFE	; 254
    56ea:	08 f0       	brcs	.+2      	; 0x56ee <__addsf3x+0x9a>
    56ec:	b0 cf       	rjmp	.-160    	; 0x564e <__addsf3+0x28>
    56ee:	93 95       	inc	r25
    56f0:	88 0f       	add	r24, r24
    56f2:	08 f0       	brcs	.+2      	; 0x56f6 <__addsf3x+0xa2>
    56f4:	99 27       	eor	r25, r25
    56f6:	ee 0f       	add	r30, r30
    56f8:	97 95       	ror	r25
    56fa:	87 95       	ror	r24
    56fc:	08 95       	ret

000056fe <__cmpsf2>:
    56fe:	0e 94 33 2c 	call	0x5866	; 0x5866 <__fp_cmp>
    5702:	08 f4       	brcc	.+2      	; 0x5706 <__cmpsf2+0x8>
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	08 95       	ret

00005708 <__divsf3>:
    5708:	0e 94 98 2b 	call	0x5730	; 0x5730 <__divsf3x>
    570c:	0c 94 6e 2c 	jmp	0x58dc	; 0x58dc <__fp_round>
    5710:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__fp_pscB>
    5714:	58 f0       	brcs	.+22     	; 0x572c <__divsf3+0x24>
    5716:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <__fp_pscA>
    571a:	40 f0       	brcs	.+16     	; 0x572c <__divsf3+0x24>
    571c:	29 f4       	brne	.+10     	; 0x5728 <__divsf3+0x20>
    571e:	5f 3f       	cpi	r21, 0xFF	; 255
    5720:	29 f0       	breq	.+10     	; 0x572c <__divsf3+0x24>
    5722:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__fp_inf>
    5726:	51 11       	cpse	r21, r1
    5728:	0c 94 a2 2c 	jmp	0x5944	; 0x5944 <__fp_szero>
    572c:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__fp_nan>

00005730 <__divsf3x>:
    5730:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__fp_split3>
    5734:	68 f3       	brcs	.-38     	; 0x5710 <__divsf3+0x8>

00005736 <__divsf3_pse>:
    5736:	99 23       	and	r25, r25
    5738:	b1 f3       	breq	.-20     	; 0x5726 <__divsf3+0x1e>
    573a:	55 23       	and	r21, r21
    573c:	91 f3       	breq	.-28     	; 0x5722 <__divsf3+0x1a>
    573e:	95 1b       	sub	r25, r21
    5740:	55 0b       	sbc	r21, r21
    5742:	bb 27       	eor	r27, r27
    5744:	aa 27       	eor	r26, r26
    5746:	62 17       	cp	r22, r18
    5748:	73 07       	cpc	r23, r19
    574a:	84 07       	cpc	r24, r20
    574c:	38 f0       	brcs	.+14     	; 0x575c <__divsf3_pse+0x26>
    574e:	9f 5f       	subi	r25, 0xFF	; 255
    5750:	5f 4f       	sbci	r21, 0xFF	; 255
    5752:	22 0f       	add	r18, r18
    5754:	33 1f       	adc	r19, r19
    5756:	44 1f       	adc	r20, r20
    5758:	aa 1f       	adc	r26, r26
    575a:	a9 f3       	breq	.-22     	; 0x5746 <__divsf3_pse+0x10>
    575c:	35 d0       	rcall	.+106    	; 0x57c8 <__divsf3_pse+0x92>
    575e:	0e 2e       	mov	r0, r30
    5760:	3a f0       	brmi	.+14     	; 0x5770 <__divsf3_pse+0x3a>
    5762:	e0 e8       	ldi	r30, 0x80	; 128
    5764:	32 d0       	rcall	.+100    	; 0x57ca <__divsf3_pse+0x94>
    5766:	91 50       	subi	r25, 0x01	; 1
    5768:	50 40       	sbci	r21, 0x00	; 0
    576a:	e6 95       	lsr	r30
    576c:	00 1c       	adc	r0, r0
    576e:	ca f7       	brpl	.-14     	; 0x5762 <__divsf3_pse+0x2c>
    5770:	2b d0       	rcall	.+86     	; 0x57c8 <__divsf3_pse+0x92>
    5772:	fe 2f       	mov	r31, r30
    5774:	29 d0       	rcall	.+82     	; 0x57c8 <__divsf3_pse+0x92>
    5776:	66 0f       	add	r22, r22
    5778:	77 1f       	adc	r23, r23
    577a:	88 1f       	adc	r24, r24
    577c:	bb 1f       	adc	r27, r27
    577e:	26 17       	cp	r18, r22
    5780:	37 07       	cpc	r19, r23
    5782:	48 07       	cpc	r20, r24
    5784:	ab 07       	cpc	r26, r27
    5786:	b0 e8       	ldi	r27, 0x80	; 128
    5788:	09 f0       	breq	.+2      	; 0x578c <__divsf3_pse+0x56>
    578a:	bb 0b       	sbc	r27, r27
    578c:	80 2d       	mov	r24, r0
    578e:	bf 01       	movw	r22, r30
    5790:	ff 27       	eor	r31, r31
    5792:	93 58       	subi	r25, 0x83	; 131
    5794:	5f 4f       	sbci	r21, 0xFF	; 255
    5796:	3a f0       	brmi	.+14     	; 0x57a6 <__divsf3_pse+0x70>
    5798:	9e 3f       	cpi	r25, 0xFE	; 254
    579a:	51 05       	cpc	r21, r1
    579c:	78 f0       	brcs	.+30     	; 0x57bc <__divsf3_pse+0x86>
    579e:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__fp_inf>
    57a2:	0c 94 a2 2c 	jmp	0x5944	; 0x5944 <__fp_szero>
    57a6:	5f 3f       	cpi	r21, 0xFF	; 255
    57a8:	e4 f3       	brlt	.-8      	; 0x57a2 <__divsf3_pse+0x6c>
    57aa:	98 3e       	cpi	r25, 0xE8	; 232
    57ac:	d4 f3       	brlt	.-12     	; 0x57a2 <__divsf3_pse+0x6c>
    57ae:	86 95       	lsr	r24
    57b0:	77 95       	ror	r23
    57b2:	67 95       	ror	r22
    57b4:	b7 95       	ror	r27
    57b6:	f7 95       	ror	r31
    57b8:	9f 5f       	subi	r25, 0xFF	; 255
    57ba:	c9 f7       	brne	.-14     	; 0x57ae <__divsf3_pse+0x78>
    57bc:	88 0f       	add	r24, r24
    57be:	91 1d       	adc	r25, r1
    57c0:	96 95       	lsr	r25
    57c2:	87 95       	ror	r24
    57c4:	97 f9       	bld	r25, 7
    57c6:	08 95       	ret
    57c8:	e1 e0       	ldi	r30, 0x01	; 1
    57ca:	66 0f       	add	r22, r22
    57cc:	77 1f       	adc	r23, r23
    57ce:	88 1f       	adc	r24, r24
    57d0:	bb 1f       	adc	r27, r27
    57d2:	62 17       	cp	r22, r18
    57d4:	73 07       	cpc	r23, r19
    57d6:	84 07       	cpc	r24, r20
    57d8:	ba 07       	cpc	r27, r26
    57da:	20 f0       	brcs	.+8      	; 0x57e4 <__divsf3_pse+0xae>
    57dc:	62 1b       	sub	r22, r18
    57de:	73 0b       	sbc	r23, r19
    57e0:	84 0b       	sbc	r24, r20
    57e2:	ba 0b       	sbc	r27, r26
    57e4:	ee 1f       	adc	r30, r30
    57e6:	88 f7       	brcc	.-30     	; 0x57ca <__divsf3_pse+0x94>
    57e8:	e0 95       	com	r30
    57ea:	08 95       	ret

000057ec <__floatunsisf>:
    57ec:	e8 94       	clt
    57ee:	09 c0       	rjmp	.+18     	; 0x5802 <__floatsisf+0x12>

000057f0 <__floatsisf>:
    57f0:	97 fb       	bst	r25, 7
    57f2:	3e f4       	brtc	.+14     	; 0x5802 <__floatsisf+0x12>
    57f4:	90 95       	com	r25
    57f6:	80 95       	com	r24
    57f8:	70 95       	com	r23
    57fa:	61 95       	neg	r22
    57fc:	7f 4f       	sbci	r23, 0xFF	; 255
    57fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5800:	9f 4f       	sbci	r25, 0xFF	; 255
    5802:	99 23       	and	r25, r25
    5804:	a9 f0       	breq	.+42     	; 0x5830 <__floatsisf+0x40>
    5806:	f9 2f       	mov	r31, r25
    5808:	96 e9       	ldi	r25, 0x96	; 150
    580a:	bb 27       	eor	r27, r27
    580c:	93 95       	inc	r25
    580e:	f6 95       	lsr	r31
    5810:	87 95       	ror	r24
    5812:	77 95       	ror	r23
    5814:	67 95       	ror	r22
    5816:	b7 95       	ror	r27
    5818:	f1 11       	cpse	r31, r1
    581a:	f8 cf       	rjmp	.-16     	; 0x580c <__floatsisf+0x1c>
    581c:	fa f4       	brpl	.+62     	; 0x585c <__floatsisf+0x6c>
    581e:	bb 0f       	add	r27, r27
    5820:	11 f4       	brne	.+4      	; 0x5826 <__floatsisf+0x36>
    5822:	60 ff       	sbrs	r22, 0
    5824:	1b c0       	rjmp	.+54     	; 0x585c <__floatsisf+0x6c>
    5826:	6f 5f       	subi	r22, 0xFF	; 255
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	8f 4f       	sbci	r24, 0xFF	; 255
    582c:	9f 4f       	sbci	r25, 0xFF	; 255
    582e:	16 c0       	rjmp	.+44     	; 0x585c <__floatsisf+0x6c>
    5830:	88 23       	and	r24, r24
    5832:	11 f0       	breq	.+4      	; 0x5838 <__floatsisf+0x48>
    5834:	96 e9       	ldi	r25, 0x96	; 150
    5836:	11 c0       	rjmp	.+34     	; 0x585a <__floatsisf+0x6a>
    5838:	77 23       	and	r23, r23
    583a:	21 f0       	breq	.+8      	; 0x5844 <__floatsisf+0x54>
    583c:	9e e8       	ldi	r25, 0x8E	; 142
    583e:	87 2f       	mov	r24, r23
    5840:	76 2f       	mov	r23, r22
    5842:	05 c0       	rjmp	.+10     	; 0x584e <__floatsisf+0x5e>
    5844:	66 23       	and	r22, r22
    5846:	71 f0       	breq	.+28     	; 0x5864 <__floatsisf+0x74>
    5848:	96 e8       	ldi	r25, 0x86	; 134
    584a:	86 2f       	mov	r24, r22
    584c:	70 e0       	ldi	r23, 0x00	; 0
    584e:	60 e0       	ldi	r22, 0x00	; 0
    5850:	2a f0       	brmi	.+10     	; 0x585c <__floatsisf+0x6c>
    5852:	9a 95       	dec	r25
    5854:	66 0f       	add	r22, r22
    5856:	77 1f       	adc	r23, r23
    5858:	88 1f       	adc	r24, r24
    585a:	da f7       	brpl	.-10     	; 0x5852 <__floatsisf+0x62>
    585c:	88 0f       	add	r24, r24
    585e:	96 95       	lsr	r25
    5860:	87 95       	ror	r24
    5862:	97 f9       	bld	r25, 7
    5864:	08 95       	ret

00005866 <__fp_cmp>:
    5866:	99 0f       	add	r25, r25
    5868:	00 08       	sbc	r0, r0
    586a:	55 0f       	add	r21, r21
    586c:	aa 0b       	sbc	r26, r26
    586e:	e0 e8       	ldi	r30, 0x80	; 128
    5870:	fe ef       	ldi	r31, 0xFE	; 254
    5872:	16 16       	cp	r1, r22
    5874:	17 06       	cpc	r1, r23
    5876:	e8 07       	cpc	r30, r24
    5878:	f9 07       	cpc	r31, r25
    587a:	c0 f0       	brcs	.+48     	; 0x58ac <__fp_cmp+0x46>
    587c:	12 16       	cp	r1, r18
    587e:	13 06       	cpc	r1, r19
    5880:	e4 07       	cpc	r30, r20
    5882:	f5 07       	cpc	r31, r21
    5884:	98 f0       	brcs	.+38     	; 0x58ac <__fp_cmp+0x46>
    5886:	62 1b       	sub	r22, r18
    5888:	73 0b       	sbc	r23, r19
    588a:	84 0b       	sbc	r24, r20
    588c:	95 0b       	sbc	r25, r21
    588e:	39 f4       	brne	.+14     	; 0x589e <__fp_cmp+0x38>
    5890:	0a 26       	eor	r0, r26
    5892:	61 f0       	breq	.+24     	; 0x58ac <__fp_cmp+0x46>
    5894:	23 2b       	or	r18, r19
    5896:	24 2b       	or	r18, r20
    5898:	25 2b       	or	r18, r21
    589a:	21 f4       	brne	.+8      	; 0x58a4 <__fp_cmp+0x3e>
    589c:	08 95       	ret
    589e:	0a 26       	eor	r0, r26
    58a0:	09 f4       	brne	.+2      	; 0x58a4 <__fp_cmp+0x3e>
    58a2:	a1 40       	sbci	r26, 0x01	; 1
    58a4:	a6 95       	lsr	r26
    58a6:	8f ef       	ldi	r24, 0xFF	; 255
    58a8:	81 1d       	adc	r24, r1
    58aa:	81 1d       	adc	r24, r1
    58ac:	08 95       	ret

000058ae <__fp_inf>:
    58ae:	97 f9       	bld	r25, 7
    58b0:	9f 67       	ori	r25, 0x7F	; 127
    58b2:	80 e8       	ldi	r24, 0x80	; 128
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	60 e0       	ldi	r22, 0x00	; 0
    58b8:	08 95       	ret

000058ba <__fp_nan>:
    58ba:	9f ef       	ldi	r25, 0xFF	; 255
    58bc:	80 ec       	ldi	r24, 0xC0	; 192
    58be:	08 95       	ret

000058c0 <__fp_pscA>:
    58c0:	00 24       	eor	r0, r0
    58c2:	0a 94       	dec	r0
    58c4:	16 16       	cp	r1, r22
    58c6:	17 06       	cpc	r1, r23
    58c8:	18 06       	cpc	r1, r24
    58ca:	09 06       	cpc	r0, r25
    58cc:	08 95       	ret

000058ce <__fp_pscB>:
    58ce:	00 24       	eor	r0, r0
    58d0:	0a 94       	dec	r0
    58d2:	12 16       	cp	r1, r18
    58d4:	13 06       	cpc	r1, r19
    58d6:	14 06       	cpc	r1, r20
    58d8:	05 06       	cpc	r0, r21
    58da:	08 95       	ret

000058dc <__fp_round>:
    58dc:	09 2e       	mov	r0, r25
    58de:	03 94       	inc	r0
    58e0:	00 0c       	add	r0, r0
    58e2:	11 f4       	brne	.+4      	; 0x58e8 <__fp_round+0xc>
    58e4:	88 23       	and	r24, r24
    58e6:	52 f0       	brmi	.+20     	; 0x58fc <__fp_round+0x20>
    58e8:	bb 0f       	add	r27, r27
    58ea:	40 f4       	brcc	.+16     	; 0x58fc <__fp_round+0x20>
    58ec:	bf 2b       	or	r27, r31
    58ee:	11 f4       	brne	.+4      	; 0x58f4 <__fp_round+0x18>
    58f0:	60 ff       	sbrs	r22, 0
    58f2:	04 c0       	rjmp	.+8      	; 0x58fc <__fp_round+0x20>
    58f4:	6f 5f       	subi	r22, 0xFF	; 255
    58f6:	7f 4f       	sbci	r23, 0xFF	; 255
    58f8:	8f 4f       	sbci	r24, 0xFF	; 255
    58fa:	9f 4f       	sbci	r25, 0xFF	; 255
    58fc:	08 95       	ret

000058fe <__fp_split3>:
    58fe:	57 fd       	sbrc	r21, 7
    5900:	90 58       	subi	r25, 0x80	; 128
    5902:	44 0f       	add	r20, r20
    5904:	55 1f       	adc	r21, r21
    5906:	59 f0       	breq	.+22     	; 0x591e <__fp_splitA+0x10>
    5908:	5f 3f       	cpi	r21, 0xFF	; 255
    590a:	71 f0       	breq	.+28     	; 0x5928 <__fp_splitA+0x1a>
    590c:	47 95       	ror	r20

0000590e <__fp_splitA>:
    590e:	88 0f       	add	r24, r24
    5910:	97 fb       	bst	r25, 7
    5912:	99 1f       	adc	r25, r25
    5914:	61 f0       	breq	.+24     	; 0x592e <__fp_splitA+0x20>
    5916:	9f 3f       	cpi	r25, 0xFF	; 255
    5918:	79 f0       	breq	.+30     	; 0x5938 <__fp_splitA+0x2a>
    591a:	87 95       	ror	r24
    591c:	08 95       	ret
    591e:	12 16       	cp	r1, r18
    5920:	13 06       	cpc	r1, r19
    5922:	14 06       	cpc	r1, r20
    5924:	55 1f       	adc	r21, r21
    5926:	f2 cf       	rjmp	.-28     	; 0x590c <__fp_split3+0xe>
    5928:	46 95       	lsr	r20
    592a:	f1 df       	rcall	.-30     	; 0x590e <__fp_splitA>
    592c:	08 c0       	rjmp	.+16     	; 0x593e <__fp_splitA+0x30>
    592e:	16 16       	cp	r1, r22
    5930:	17 06       	cpc	r1, r23
    5932:	18 06       	cpc	r1, r24
    5934:	99 1f       	adc	r25, r25
    5936:	f1 cf       	rjmp	.-30     	; 0x591a <__fp_splitA+0xc>
    5938:	86 95       	lsr	r24
    593a:	71 05       	cpc	r23, r1
    593c:	61 05       	cpc	r22, r1
    593e:	08 94       	sec
    5940:	08 95       	ret

00005942 <__fp_zero>:
    5942:	e8 94       	clt

00005944 <__fp_szero>:
    5944:	bb 27       	eor	r27, r27
    5946:	66 27       	eor	r22, r22
    5948:	77 27       	eor	r23, r23
    594a:	cb 01       	movw	r24, r22
    594c:	97 f9       	bld	r25, 7
    594e:	08 95       	ret

00005950 <__gesf2>:
    5950:	0e 94 33 2c 	call	0x5866	; 0x5866 <__fp_cmp>
    5954:	08 f4       	brcc	.+2      	; 0x5958 <__gesf2+0x8>
    5956:	8f ef       	ldi	r24, 0xFF	; 255
    5958:	08 95       	ret

0000595a <__mulsf3>:
    595a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__mulsf3x>
    595e:	0c 94 6e 2c 	jmp	0x58dc	; 0x58dc <__fp_round>
    5962:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <__fp_pscA>
    5966:	38 f0       	brcs	.+14     	; 0x5976 <__mulsf3+0x1c>
    5968:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__fp_pscB>
    596c:	20 f0       	brcs	.+8      	; 0x5976 <__mulsf3+0x1c>
    596e:	95 23       	and	r25, r21
    5970:	11 f0       	breq	.+4      	; 0x5976 <__mulsf3+0x1c>
    5972:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__fp_inf>
    5976:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__fp_nan>
    597a:	11 24       	eor	r1, r1
    597c:	0c 94 a2 2c 	jmp	0x5944	; 0x5944 <__fp_szero>

00005980 <__mulsf3x>:
    5980:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__fp_split3>
    5984:	70 f3       	brcs	.-36     	; 0x5962 <__mulsf3+0x8>

00005986 <__mulsf3_pse>:
    5986:	95 9f       	mul	r25, r21
    5988:	c1 f3       	breq	.-16     	; 0x597a <__mulsf3+0x20>
    598a:	95 0f       	add	r25, r21
    598c:	50 e0       	ldi	r21, 0x00	; 0
    598e:	55 1f       	adc	r21, r21
    5990:	62 9f       	mul	r22, r18
    5992:	f0 01       	movw	r30, r0
    5994:	72 9f       	mul	r23, r18
    5996:	bb 27       	eor	r27, r27
    5998:	f0 0d       	add	r31, r0
    599a:	b1 1d       	adc	r27, r1
    599c:	63 9f       	mul	r22, r19
    599e:	aa 27       	eor	r26, r26
    59a0:	f0 0d       	add	r31, r0
    59a2:	b1 1d       	adc	r27, r1
    59a4:	aa 1f       	adc	r26, r26
    59a6:	64 9f       	mul	r22, r20
    59a8:	66 27       	eor	r22, r22
    59aa:	b0 0d       	add	r27, r0
    59ac:	a1 1d       	adc	r26, r1
    59ae:	66 1f       	adc	r22, r22
    59b0:	82 9f       	mul	r24, r18
    59b2:	22 27       	eor	r18, r18
    59b4:	b0 0d       	add	r27, r0
    59b6:	a1 1d       	adc	r26, r1
    59b8:	62 1f       	adc	r22, r18
    59ba:	73 9f       	mul	r23, r19
    59bc:	b0 0d       	add	r27, r0
    59be:	a1 1d       	adc	r26, r1
    59c0:	62 1f       	adc	r22, r18
    59c2:	83 9f       	mul	r24, r19
    59c4:	a0 0d       	add	r26, r0
    59c6:	61 1d       	adc	r22, r1
    59c8:	22 1f       	adc	r18, r18
    59ca:	74 9f       	mul	r23, r20
    59cc:	33 27       	eor	r19, r19
    59ce:	a0 0d       	add	r26, r0
    59d0:	61 1d       	adc	r22, r1
    59d2:	23 1f       	adc	r18, r19
    59d4:	84 9f       	mul	r24, r20
    59d6:	60 0d       	add	r22, r0
    59d8:	21 1d       	adc	r18, r1
    59da:	82 2f       	mov	r24, r18
    59dc:	76 2f       	mov	r23, r22
    59de:	6a 2f       	mov	r22, r26
    59e0:	11 24       	eor	r1, r1
    59e2:	9f 57       	subi	r25, 0x7F	; 127
    59e4:	50 40       	sbci	r21, 0x00	; 0
    59e6:	9a f0       	brmi	.+38     	; 0x5a0e <__mulsf3_pse+0x88>
    59e8:	f1 f0       	breq	.+60     	; 0x5a26 <__mulsf3_pse+0xa0>
    59ea:	88 23       	and	r24, r24
    59ec:	4a f0       	brmi	.+18     	; 0x5a00 <__mulsf3_pse+0x7a>
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	bb 1f       	adc	r27, r27
    59f4:	66 1f       	adc	r22, r22
    59f6:	77 1f       	adc	r23, r23
    59f8:	88 1f       	adc	r24, r24
    59fa:	91 50       	subi	r25, 0x01	; 1
    59fc:	50 40       	sbci	r21, 0x00	; 0
    59fe:	a9 f7       	brne	.-22     	; 0x59ea <__mulsf3_pse+0x64>
    5a00:	9e 3f       	cpi	r25, 0xFE	; 254
    5a02:	51 05       	cpc	r21, r1
    5a04:	80 f0       	brcs	.+32     	; 0x5a26 <__mulsf3_pse+0xa0>
    5a06:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__fp_inf>
    5a0a:	0c 94 a2 2c 	jmp	0x5944	; 0x5944 <__fp_szero>
    5a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a10:	e4 f3       	brlt	.-8      	; 0x5a0a <__mulsf3_pse+0x84>
    5a12:	98 3e       	cpi	r25, 0xE8	; 232
    5a14:	d4 f3       	brlt	.-12     	; 0x5a0a <__mulsf3_pse+0x84>
    5a16:	86 95       	lsr	r24
    5a18:	77 95       	ror	r23
    5a1a:	67 95       	ror	r22
    5a1c:	b7 95       	ror	r27
    5a1e:	f7 95       	ror	r31
    5a20:	e7 95       	ror	r30
    5a22:	9f 5f       	subi	r25, 0xFF	; 255
    5a24:	c1 f7       	brne	.-16     	; 0x5a16 <__mulsf3_pse+0x90>
    5a26:	fe 2b       	or	r31, r30
    5a28:	88 0f       	add	r24, r24
    5a2a:	91 1d       	adc	r25, r1
    5a2c:	96 95       	lsr	r25
    5a2e:	87 95       	ror	r24
    5a30:	97 f9       	bld	r25, 7
    5a32:	08 95       	ret

00005a34 <vfprintf>:
    5a34:	a0 e1       	ldi	r26, 0x10	; 16
    5a36:	b0 e0       	ldi	r27, 0x00	; 0
    5a38:	e0 e2       	ldi	r30, 0x20	; 32
    5a3a:	fd e2       	ldi	r31, 0x2D	; 45
    5a3c:	0c 94 db 30 	jmp	0x61b6	; 0x61b6 <__prologue_saves__>
    5a40:	7c 01       	movw	r14, r24
    5a42:	1b 01       	movw	r2, r22
    5a44:	6a 01       	movw	r12, r20
    5a46:	fc 01       	movw	r30, r24
    5a48:	16 82       	std	Z+6, r1	; 0x06
    5a4a:	17 82       	std	Z+7, r1	; 0x07
    5a4c:	83 81       	ldd	r24, Z+3	; 0x03
    5a4e:	81 ff       	sbrs	r24, 1
    5a50:	44 c3       	rjmp	.+1672   	; 0x60da <vfprintf+0x6a6>
    5a52:	9e 01       	movw	r18, r28
    5a54:	2f 5f       	subi	r18, 0xFF	; 255
    5a56:	3f 4f       	sbci	r19, 0xFF	; 255
    5a58:	39 01       	movw	r6, r18
    5a5a:	f7 01       	movw	r30, r14
    5a5c:	93 81       	ldd	r25, Z+3	; 0x03
    5a5e:	f1 01       	movw	r30, r2
    5a60:	93 fd       	sbrc	r25, 3
    5a62:	85 91       	lpm	r24, Z+
    5a64:	93 ff       	sbrs	r25, 3
    5a66:	81 91       	ld	r24, Z+
    5a68:	1f 01       	movw	r2, r30
    5a6a:	88 23       	and	r24, r24
    5a6c:	09 f4       	brne	.+2      	; 0x5a70 <vfprintf+0x3c>
    5a6e:	31 c3       	rjmp	.+1634   	; 0x60d2 <vfprintf+0x69e>
    5a70:	85 32       	cpi	r24, 0x25	; 37
    5a72:	39 f4       	brne	.+14     	; 0x5a82 <vfprintf+0x4e>
    5a74:	93 fd       	sbrc	r25, 3
    5a76:	85 91       	lpm	r24, Z+
    5a78:	93 ff       	sbrs	r25, 3
    5a7a:	81 91       	ld	r24, Z+
    5a7c:	1f 01       	movw	r2, r30
    5a7e:	85 32       	cpi	r24, 0x25	; 37
    5a80:	39 f4       	brne	.+14     	; 0x5a90 <vfprintf+0x5c>
    5a82:	b7 01       	movw	r22, r14
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5a8a:	56 01       	movw	r10, r12
    5a8c:	65 01       	movw	r12, r10
    5a8e:	e5 cf       	rjmp	.-54     	; 0x5a5a <vfprintf+0x26>
    5a90:	10 e0       	ldi	r17, 0x00	; 0
    5a92:	51 2c       	mov	r5, r1
    5a94:	91 2c       	mov	r9, r1
    5a96:	ff e1       	ldi	r31, 0x1F	; 31
    5a98:	f9 15       	cp	r31, r9
    5a9a:	d8 f0       	brcs	.+54     	; 0x5ad2 <vfprintf+0x9e>
    5a9c:	8b 32       	cpi	r24, 0x2B	; 43
    5a9e:	79 f0       	breq	.+30     	; 0x5abe <vfprintf+0x8a>
    5aa0:	38 f4       	brcc	.+14     	; 0x5ab0 <vfprintf+0x7c>
    5aa2:	80 32       	cpi	r24, 0x20	; 32
    5aa4:	79 f0       	breq	.+30     	; 0x5ac4 <vfprintf+0x90>
    5aa6:	83 32       	cpi	r24, 0x23	; 35
    5aa8:	a1 f4       	brne	.+40     	; 0x5ad2 <vfprintf+0x9e>
    5aaa:	f9 2d       	mov	r31, r9
    5aac:	f0 61       	ori	r31, 0x10	; 16
    5aae:	2e c0       	rjmp	.+92     	; 0x5b0c <vfprintf+0xd8>
    5ab0:	8d 32       	cpi	r24, 0x2D	; 45
    5ab2:	61 f0       	breq	.+24     	; 0x5acc <vfprintf+0x98>
    5ab4:	80 33       	cpi	r24, 0x30	; 48
    5ab6:	69 f4       	brne	.+26     	; 0x5ad2 <vfprintf+0x9e>
    5ab8:	29 2d       	mov	r18, r9
    5aba:	21 60       	ori	r18, 0x01	; 1
    5abc:	2d c0       	rjmp	.+90     	; 0x5b18 <vfprintf+0xe4>
    5abe:	39 2d       	mov	r19, r9
    5ac0:	32 60       	ori	r19, 0x02	; 2
    5ac2:	93 2e       	mov	r9, r19
    5ac4:	89 2d       	mov	r24, r9
    5ac6:	84 60       	ori	r24, 0x04	; 4
    5ac8:	98 2e       	mov	r9, r24
    5aca:	2a c0       	rjmp	.+84     	; 0x5b20 <vfprintf+0xec>
    5acc:	e9 2d       	mov	r30, r9
    5ace:	e8 60       	ori	r30, 0x08	; 8
    5ad0:	15 c0       	rjmp	.+42     	; 0x5afc <vfprintf+0xc8>
    5ad2:	97 fc       	sbrc	r9, 7
    5ad4:	2d c0       	rjmp	.+90     	; 0x5b30 <vfprintf+0xfc>
    5ad6:	20 ed       	ldi	r18, 0xD0	; 208
    5ad8:	28 0f       	add	r18, r24
    5ada:	2a 30       	cpi	r18, 0x0A	; 10
    5adc:	88 f4       	brcc	.+34     	; 0x5b00 <vfprintf+0xcc>
    5ade:	96 fe       	sbrs	r9, 6
    5ae0:	06 c0       	rjmp	.+12     	; 0x5aee <vfprintf+0xba>
    5ae2:	3a e0       	ldi	r19, 0x0A	; 10
    5ae4:	13 9f       	mul	r17, r19
    5ae6:	20 0d       	add	r18, r0
    5ae8:	11 24       	eor	r1, r1
    5aea:	12 2f       	mov	r17, r18
    5aec:	19 c0       	rjmp	.+50     	; 0x5b20 <vfprintf+0xec>
    5aee:	8a e0       	ldi	r24, 0x0A	; 10
    5af0:	58 9e       	mul	r5, r24
    5af2:	20 0d       	add	r18, r0
    5af4:	11 24       	eor	r1, r1
    5af6:	52 2e       	mov	r5, r18
    5af8:	e9 2d       	mov	r30, r9
    5afa:	e0 62       	ori	r30, 0x20	; 32
    5afc:	9e 2e       	mov	r9, r30
    5afe:	10 c0       	rjmp	.+32     	; 0x5b20 <vfprintf+0xec>
    5b00:	8e 32       	cpi	r24, 0x2E	; 46
    5b02:	31 f4       	brne	.+12     	; 0x5b10 <vfprintf+0xdc>
    5b04:	96 fc       	sbrc	r9, 6
    5b06:	e5 c2       	rjmp	.+1482   	; 0x60d2 <vfprintf+0x69e>
    5b08:	f9 2d       	mov	r31, r9
    5b0a:	f0 64       	ori	r31, 0x40	; 64
    5b0c:	9f 2e       	mov	r9, r31
    5b0e:	08 c0       	rjmp	.+16     	; 0x5b20 <vfprintf+0xec>
    5b10:	8c 36       	cpi	r24, 0x6C	; 108
    5b12:	21 f4       	brne	.+8      	; 0x5b1c <vfprintf+0xe8>
    5b14:	29 2d       	mov	r18, r9
    5b16:	20 68       	ori	r18, 0x80	; 128
    5b18:	92 2e       	mov	r9, r18
    5b1a:	02 c0       	rjmp	.+4      	; 0x5b20 <vfprintf+0xec>
    5b1c:	88 36       	cpi	r24, 0x68	; 104
    5b1e:	41 f4       	brne	.+16     	; 0x5b30 <vfprintf+0xfc>
    5b20:	f1 01       	movw	r30, r2
    5b22:	93 fd       	sbrc	r25, 3
    5b24:	85 91       	lpm	r24, Z+
    5b26:	93 ff       	sbrs	r25, 3
    5b28:	81 91       	ld	r24, Z+
    5b2a:	1f 01       	movw	r2, r30
    5b2c:	81 11       	cpse	r24, r1
    5b2e:	b3 cf       	rjmp	.-154    	; 0x5a96 <vfprintf+0x62>
    5b30:	9b eb       	ldi	r25, 0xBB	; 187
    5b32:	98 0f       	add	r25, r24
    5b34:	93 30       	cpi	r25, 0x03	; 3
    5b36:	20 f4       	brcc	.+8      	; 0x5b40 <vfprintf+0x10c>
    5b38:	99 2d       	mov	r25, r9
    5b3a:	90 61       	ori	r25, 0x10	; 16
    5b3c:	80 5e       	subi	r24, 0xE0	; 224
    5b3e:	07 c0       	rjmp	.+14     	; 0x5b4e <vfprintf+0x11a>
    5b40:	9b e9       	ldi	r25, 0x9B	; 155
    5b42:	98 0f       	add	r25, r24
    5b44:	93 30       	cpi	r25, 0x03	; 3
    5b46:	08 f0       	brcs	.+2      	; 0x5b4a <vfprintf+0x116>
    5b48:	66 c1       	rjmp	.+716    	; 0x5e16 <vfprintf+0x3e2>
    5b4a:	99 2d       	mov	r25, r9
    5b4c:	9f 7e       	andi	r25, 0xEF	; 239
    5b4e:	96 ff       	sbrs	r25, 6
    5b50:	16 e0       	ldi	r17, 0x06	; 6
    5b52:	9f 73       	andi	r25, 0x3F	; 63
    5b54:	99 2e       	mov	r9, r25
    5b56:	85 36       	cpi	r24, 0x65	; 101
    5b58:	19 f4       	brne	.+6      	; 0x5b60 <vfprintf+0x12c>
    5b5a:	90 64       	ori	r25, 0x40	; 64
    5b5c:	99 2e       	mov	r9, r25
    5b5e:	08 c0       	rjmp	.+16     	; 0x5b70 <vfprintf+0x13c>
    5b60:	86 36       	cpi	r24, 0x66	; 102
    5b62:	21 f4       	brne	.+8      	; 0x5b6c <vfprintf+0x138>
    5b64:	39 2f       	mov	r19, r25
    5b66:	30 68       	ori	r19, 0x80	; 128
    5b68:	93 2e       	mov	r9, r19
    5b6a:	02 c0       	rjmp	.+4      	; 0x5b70 <vfprintf+0x13c>
    5b6c:	11 11       	cpse	r17, r1
    5b6e:	11 50       	subi	r17, 0x01	; 1
    5b70:	97 fe       	sbrs	r9, 7
    5b72:	07 c0       	rjmp	.+14     	; 0x5b82 <vfprintf+0x14e>
    5b74:	1c 33       	cpi	r17, 0x3C	; 60
    5b76:	50 f4       	brcc	.+20     	; 0x5b8c <vfprintf+0x158>
    5b78:	44 24       	eor	r4, r4
    5b7a:	43 94       	inc	r4
    5b7c:	41 0e       	add	r4, r17
    5b7e:	27 e0       	ldi	r18, 0x07	; 7
    5b80:	0b c0       	rjmp	.+22     	; 0x5b98 <vfprintf+0x164>
    5b82:	18 30       	cpi	r17, 0x08	; 8
    5b84:	38 f0       	brcs	.+14     	; 0x5b94 <vfprintf+0x160>
    5b86:	27 e0       	ldi	r18, 0x07	; 7
    5b88:	17 e0       	ldi	r17, 0x07	; 7
    5b8a:	05 c0       	rjmp	.+10     	; 0x5b96 <vfprintf+0x162>
    5b8c:	27 e0       	ldi	r18, 0x07	; 7
    5b8e:	9c e3       	ldi	r25, 0x3C	; 60
    5b90:	49 2e       	mov	r4, r25
    5b92:	02 c0       	rjmp	.+4      	; 0x5b98 <vfprintf+0x164>
    5b94:	21 2f       	mov	r18, r17
    5b96:	41 2c       	mov	r4, r1
    5b98:	56 01       	movw	r10, r12
    5b9a:	84 e0       	ldi	r24, 0x04	; 4
    5b9c:	a8 0e       	add	r10, r24
    5b9e:	b1 1c       	adc	r11, r1
    5ba0:	f6 01       	movw	r30, r12
    5ba2:	60 81       	ld	r22, Z
    5ba4:	71 81       	ldd	r23, Z+1	; 0x01
    5ba6:	82 81       	ldd	r24, Z+2	; 0x02
    5ba8:	93 81       	ldd	r25, Z+3	; 0x03
    5baa:	04 2d       	mov	r16, r4
    5bac:	a3 01       	movw	r20, r6
    5bae:	0e 94 96 31 	call	0x632c	; 0x632c <__ftoa_engine>
    5bb2:	6c 01       	movw	r12, r24
    5bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    5bb6:	fc 87       	std	Y+12, r31	; 0x0c
    5bb8:	f0 ff       	sbrs	r31, 0
    5bba:	02 c0       	rjmp	.+4      	; 0x5bc0 <vfprintf+0x18c>
    5bbc:	f3 ff       	sbrs	r31, 3
    5bbe:	06 c0       	rjmp	.+12     	; 0x5bcc <vfprintf+0x198>
    5bc0:	91 fc       	sbrc	r9, 1
    5bc2:	06 c0       	rjmp	.+12     	; 0x5bd0 <vfprintf+0x19c>
    5bc4:	92 fe       	sbrs	r9, 2
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <vfprintf+0x1a0>
    5bc8:	00 e2       	ldi	r16, 0x20	; 32
    5bca:	05 c0       	rjmp	.+10     	; 0x5bd6 <vfprintf+0x1a2>
    5bcc:	0d e2       	ldi	r16, 0x2D	; 45
    5bce:	03 c0       	rjmp	.+6      	; 0x5bd6 <vfprintf+0x1a2>
    5bd0:	0b e2       	ldi	r16, 0x2B	; 43
    5bd2:	01 c0       	rjmp	.+2      	; 0x5bd6 <vfprintf+0x1a2>
    5bd4:	00 e0       	ldi	r16, 0x00	; 0
    5bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5bd8:	8c 70       	andi	r24, 0x0C	; 12
    5bda:	19 f0       	breq	.+6      	; 0x5be2 <vfprintf+0x1ae>
    5bdc:	01 11       	cpse	r16, r1
    5bde:	5a c2       	rjmp	.+1204   	; 0x6094 <vfprintf+0x660>
    5be0:	9b c2       	rjmp	.+1334   	; 0x6118 <vfprintf+0x6e4>
    5be2:	97 fe       	sbrs	r9, 7
    5be4:	10 c0       	rjmp	.+32     	; 0x5c06 <vfprintf+0x1d2>
    5be6:	4c 0c       	add	r4, r12
    5be8:	fc 85       	ldd	r31, Y+12	; 0x0c
    5bea:	f4 ff       	sbrs	r31, 4
    5bec:	04 c0       	rjmp	.+8      	; 0x5bf6 <vfprintf+0x1c2>
    5bee:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf0:	81 33       	cpi	r24, 0x31	; 49
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <vfprintf+0x1c2>
    5bf4:	4a 94       	dec	r4
    5bf6:	14 14       	cp	r1, r4
    5bf8:	74 f5       	brge	.+92     	; 0x5c56 <vfprintf+0x222>
    5bfa:	28 e0       	ldi	r18, 0x08	; 8
    5bfc:	24 15       	cp	r18, r4
    5bfe:	78 f5       	brcc	.+94     	; 0x5c5e <vfprintf+0x22a>
    5c00:	88 e0       	ldi	r24, 0x08	; 8
    5c02:	48 2e       	mov	r4, r24
    5c04:	2c c0       	rjmp	.+88     	; 0x5c5e <vfprintf+0x22a>
    5c06:	96 fc       	sbrc	r9, 6
    5c08:	2a c0       	rjmp	.+84     	; 0x5c5e <vfprintf+0x22a>
    5c0a:	81 2f       	mov	r24, r17
    5c0c:	90 e0       	ldi	r25, 0x00	; 0
    5c0e:	8c 15       	cp	r24, r12
    5c10:	9d 05       	cpc	r25, r13
    5c12:	9c f0       	brlt	.+38     	; 0x5c3a <vfprintf+0x206>
    5c14:	3c ef       	ldi	r19, 0xFC	; 252
    5c16:	c3 16       	cp	r12, r19
    5c18:	3f ef       	ldi	r19, 0xFF	; 255
    5c1a:	d3 06       	cpc	r13, r19
    5c1c:	74 f0       	brlt	.+28     	; 0x5c3a <vfprintf+0x206>
    5c1e:	89 2d       	mov	r24, r9
    5c20:	80 68       	ori	r24, 0x80	; 128
    5c22:	98 2e       	mov	r9, r24
    5c24:	0a c0       	rjmp	.+20     	; 0x5c3a <vfprintf+0x206>
    5c26:	e2 e0       	ldi	r30, 0x02	; 2
    5c28:	f0 e0       	ldi	r31, 0x00	; 0
    5c2a:	ec 0f       	add	r30, r28
    5c2c:	fd 1f       	adc	r31, r29
    5c2e:	e1 0f       	add	r30, r17
    5c30:	f1 1d       	adc	r31, r1
    5c32:	80 81       	ld	r24, Z
    5c34:	80 33       	cpi	r24, 0x30	; 48
    5c36:	19 f4       	brne	.+6      	; 0x5c3e <vfprintf+0x20a>
    5c38:	11 50       	subi	r17, 0x01	; 1
    5c3a:	11 11       	cpse	r17, r1
    5c3c:	f4 cf       	rjmp	.-24     	; 0x5c26 <vfprintf+0x1f2>
    5c3e:	97 fe       	sbrs	r9, 7
    5c40:	0e c0       	rjmp	.+28     	; 0x5c5e <vfprintf+0x22a>
    5c42:	44 24       	eor	r4, r4
    5c44:	43 94       	inc	r4
    5c46:	41 0e       	add	r4, r17
    5c48:	81 2f       	mov	r24, r17
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	c8 16       	cp	r12, r24
    5c4e:	d9 06       	cpc	r13, r25
    5c50:	2c f4       	brge	.+10     	; 0x5c5c <vfprintf+0x228>
    5c52:	1c 19       	sub	r17, r12
    5c54:	04 c0       	rjmp	.+8      	; 0x5c5e <vfprintf+0x22a>
    5c56:	44 24       	eor	r4, r4
    5c58:	43 94       	inc	r4
    5c5a:	01 c0       	rjmp	.+2      	; 0x5c5e <vfprintf+0x22a>
    5c5c:	10 e0       	ldi	r17, 0x00	; 0
    5c5e:	97 fe       	sbrs	r9, 7
    5c60:	06 c0       	rjmp	.+12     	; 0x5c6e <vfprintf+0x23a>
    5c62:	1c 14       	cp	r1, r12
    5c64:	1d 04       	cpc	r1, r13
    5c66:	34 f4       	brge	.+12     	; 0x5c74 <vfprintf+0x240>
    5c68:	c6 01       	movw	r24, r12
    5c6a:	01 96       	adiw	r24, 0x01	; 1
    5c6c:	05 c0       	rjmp	.+10     	; 0x5c78 <vfprintf+0x244>
    5c6e:	85 e0       	ldi	r24, 0x05	; 5
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	02 c0       	rjmp	.+4      	; 0x5c78 <vfprintf+0x244>
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	01 11       	cpse	r16, r1
    5c7a:	01 96       	adiw	r24, 0x01	; 1
    5c7c:	11 23       	and	r17, r17
    5c7e:	31 f0       	breq	.+12     	; 0x5c8c <vfprintf+0x258>
    5c80:	21 2f       	mov	r18, r17
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	2f 5f       	subi	r18, 0xFF	; 255
    5c86:	3f 4f       	sbci	r19, 0xFF	; 255
    5c88:	82 0f       	add	r24, r18
    5c8a:	93 1f       	adc	r25, r19
    5c8c:	25 2d       	mov	r18, r5
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
    5c90:	82 17       	cp	r24, r18
    5c92:	93 07       	cpc	r25, r19
    5c94:	14 f4       	brge	.+4      	; 0x5c9a <vfprintf+0x266>
    5c96:	58 1a       	sub	r5, r24
    5c98:	01 c0       	rjmp	.+2      	; 0x5c9c <vfprintf+0x268>
    5c9a:	51 2c       	mov	r5, r1
    5c9c:	89 2d       	mov	r24, r9
    5c9e:	89 70       	andi	r24, 0x09	; 9
    5ca0:	49 f4       	brne	.+18     	; 0x5cb4 <vfprintf+0x280>
    5ca2:	55 20       	and	r5, r5
    5ca4:	39 f0       	breq	.+14     	; 0x5cb4 <vfprintf+0x280>
    5ca6:	b7 01       	movw	r22, r14
    5ca8:	80 e2       	ldi	r24, 0x20	; 32
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5cb0:	5a 94       	dec	r5
    5cb2:	f7 cf       	rjmp	.-18     	; 0x5ca2 <vfprintf+0x26e>
    5cb4:	00 23       	and	r16, r16
    5cb6:	29 f0       	breq	.+10     	; 0x5cc2 <vfprintf+0x28e>
    5cb8:	b7 01       	movw	r22, r14
    5cba:	80 2f       	mov	r24, r16
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5cc2:	93 fc       	sbrc	r9, 3
    5cc4:	09 c0       	rjmp	.+18     	; 0x5cd8 <vfprintf+0x2a4>
    5cc6:	55 20       	and	r5, r5
    5cc8:	39 f0       	breq	.+14     	; 0x5cd8 <vfprintf+0x2a4>
    5cca:	b7 01       	movw	r22, r14
    5ccc:	80 e3       	ldi	r24, 0x30	; 48
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5cd4:	5a 94       	dec	r5
    5cd6:	f7 cf       	rjmp	.-18     	; 0x5cc6 <vfprintf+0x292>
    5cd8:	97 fe       	sbrs	r9, 7
    5cda:	4c c0       	rjmp	.+152    	; 0x5d74 <vfprintf+0x340>
    5cdc:	46 01       	movw	r8, r12
    5cde:	d7 fe       	sbrs	r13, 7
    5ce0:	02 c0       	rjmp	.+4      	; 0x5ce6 <vfprintf+0x2b2>
    5ce2:	81 2c       	mov	r8, r1
    5ce4:	91 2c       	mov	r9, r1
    5ce6:	c6 01       	movw	r24, r12
    5ce8:	88 19       	sub	r24, r8
    5cea:	99 09       	sbc	r25, r9
    5cec:	f3 01       	movw	r30, r6
    5cee:	e8 0f       	add	r30, r24
    5cf0:	f9 1f       	adc	r31, r25
    5cf2:	ed 87       	std	Y+13, r30	; 0x0d
    5cf4:	fe 87       	std	Y+14, r31	; 0x0e
    5cf6:	96 01       	movw	r18, r12
    5cf8:	24 19       	sub	r18, r4
    5cfa:	31 09       	sbc	r19, r1
    5cfc:	2f 87       	std	Y+15, r18	; 0x0f
    5cfe:	38 8b       	std	Y+16, r19	; 0x10
    5d00:	01 2f       	mov	r16, r17
    5d02:	10 e0       	ldi	r17, 0x00	; 0
    5d04:	11 95       	neg	r17
    5d06:	01 95       	neg	r16
    5d08:	11 09       	sbc	r17, r1
    5d0a:	3f ef       	ldi	r19, 0xFF	; 255
    5d0c:	83 16       	cp	r8, r19
    5d0e:	93 06       	cpc	r9, r19
    5d10:	29 f4       	brne	.+10     	; 0x5d1c <vfprintf+0x2e8>
    5d12:	b7 01       	movw	r22, r14
    5d14:	8e e2       	ldi	r24, 0x2E	; 46
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5d1c:	c8 14       	cp	r12, r8
    5d1e:	d9 04       	cpc	r13, r9
    5d20:	4c f0       	brlt	.+18     	; 0x5d34 <vfprintf+0x300>
    5d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d24:	98 89       	ldd	r25, Y+16	; 0x10
    5d26:	88 15       	cp	r24, r8
    5d28:	99 05       	cpc	r25, r9
    5d2a:	24 f4       	brge	.+8      	; 0x5d34 <vfprintf+0x300>
    5d2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    5d2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5d30:	81 81       	ldd	r24, Z+1	; 0x01
    5d32:	01 c0       	rjmp	.+2      	; 0x5d36 <vfprintf+0x302>
    5d34:	80 e3       	ldi	r24, 0x30	; 48
    5d36:	f1 e0       	ldi	r31, 0x01	; 1
    5d38:	8f 1a       	sub	r8, r31
    5d3a:	91 08       	sbc	r9, r1
    5d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5d40:	2f 5f       	subi	r18, 0xFF	; 255
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	2d 87       	std	Y+13, r18	; 0x0d
    5d46:	3e 87       	std	Y+14, r19	; 0x0e
    5d48:	80 16       	cp	r8, r16
    5d4a:	91 06       	cpc	r9, r17
    5d4c:	2c f0       	brlt	.+10     	; 0x5d58 <vfprintf+0x324>
    5d4e:	b7 01       	movw	r22, r14
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5d56:	d9 cf       	rjmp	.-78     	; 0x5d0a <vfprintf+0x2d6>
    5d58:	c8 14       	cp	r12, r8
    5d5a:	d9 04       	cpc	r13, r9
    5d5c:	41 f4       	brne	.+16     	; 0x5d6e <vfprintf+0x33a>
    5d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d60:	96 33       	cpi	r25, 0x36	; 54
    5d62:	20 f4       	brcc	.+8      	; 0x5d6c <vfprintf+0x338>
    5d64:	95 33       	cpi	r25, 0x35	; 53
    5d66:	19 f4       	brne	.+6      	; 0x5d6e <vfprintf+0x33a>
    5d68:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d6a:	34 ff       	sbrs	r19, 4
    5d6c:	81 e3       	ldi	r24, 0x31	; 49
    5d6e:	b7 01       	movw	r22, r14
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	4e c0       	rjmp	.+156    	; 0x5e10 <vfprintf+0x3dc>
    5d74:	8a 81       	ldd	r24, Y+2	; 0x02
    5d76:	81 33       	cpi	r24, 0x31	; 49
    5d78:	19 f0       	breq	.+6      	; 0x5d80 <vfprintf+0x34c>
    5d7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d7c:	9f 7e       	andi	r25, 0xEF	; 239
    5d7e:	9c 87       	std	Y+12, r25	; 0x0c
    5d80:	b7 01       	movw	r22, r14
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5d88:	11 11       	cpse	r17, r1
    5d8a:	05 c0       	rjmp	.+10     	; 0x5d96 <vfprintf+0x362>
    5d8c:	94 fc       	sbrc	r9, 4
    5d8e:	18 c0       	rjmp	.+48     	; 0x5dc0 <vfprintf+0x38c>
    5d90:	85 e6       	ldi	r24, 0x65	; 101
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	17 c0       	rjmp	.+46     	; 0x5dc4 <vfprintf+0x390>
    5d96:	b7 01       	movw	r22, r14
    5d98:	8e e2       	ldi	r24, 0x2E	; 46
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5da0:	1e 5f       	subi	r17, 0xFE	; 254
    5da2:	82 e0       	ldi	r24, 0x02	; 2
    5da4:	01 e0       	ldi	r16, 0x01	; 1
    5da6:	08 0f       	add	r16, r24
    5da8:	f3 01       	movw	r30, r6
    5daa:	e8 0f       	add	r30, r24
    5dac:	f1 1d       	adc	r31, r1
    5dae:	80 81       	ld	r24, Z
    5db0:	b7 01       	movw	r22, r14
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5db8:	80 2f       	mov	r24, r16
    5dba:	01 13       	cpse	r16, r17
    5dbc:	f3 cf       	rjmp	.-26     	; 0x5da4 <vfprintf+0x370>
    5dbe:	e6 cf       	rjmp	.-52     	; 0x5d8c <vfprintf+0x358>
    5dc0:	85 e4       	ldi	r24, 0x45	; 69
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	b7 01       	movw	r22, r14
    5dc6:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5dca:	d7 fc       	sbrc	r13, 7
    5dcc:	06 c0       	rjmp	.+12     	; 0x5dda <vfprintf+0x3a6>
    5dce:	c1 14       	cp	r12, r1
    5dd0:	d1 04       	cpc	r13, r1
    5dd2:	41 f4       	brne	.+16     	; 0x5de4 <vfprintf+0x3b0>
    5dd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    5dd6:	e4 ff       	sbrs	r30, 4
    5dd8:	05 c0       	rjmp	.+10     	; 0x5de4 <vfprintf+0x3b0>
    5dda:	d1 94       	neg	r13
    5ddc:	c1 94       	neg	r12
    5dde:	d1 08       	sbc	r13, r1
    5de0:	8d e2       	ldi	r24, 0x2D	; 45
    5de2:	01 c0       	rjmp	.+2      	; 0x5de6 <vfprintf+0x3b2>
    5de4:	8b e2       	ldi	r24, 0x2B	; 43
    5de6:	b7 01       	movw	r22, r14
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5dee:	80 e3       	ldi	r24, 0x30	; 48
    5df0:	2a e0       	ldi	r18, 0x0A	; 10
    5df2:	c2 16       	cp	r12, r18
    5df4:	d1 04       	cpc	r13, r1
    5df6:	2c f0       	brlt	.+10     	; 0x5e02 <vfprintf+0x3ce>
    5df8:	8f 5f       	subi	r24, 0xFF	; 255
    5dfa:	fa e0       	ldi	r31, 0x0A	; 10
    5dfc:	cf 1a       	sub	r12, r31
    5dfe:	d1 08       	sbc	r13, r1
    5e00:	f7 cf       	rjmp	.-18     	; 0x5df0 <vfprintf+0x3bc>
    5e02:	b7 01       	movw	r22, r14
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5e0a:	b7 01       	movw	r22, r14
    5e0c:	c6 01       	movw	r24, r12
    5e0e:	c0 96       	adiw	r24, 0x30	; 48
    5e10:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5e14:	54 c1       	rjmp	.+680    	; 0x60be <vfprintf+0x68a>
    5e16:	83 36       	cpi	r24, 0x63	; 99
    5e18:	31 f0       	breq	.+12     	; 0x5e26 <vfprintf+0x3f2>
    5e1a:	83 37       	cpi	r24, 0x73	; 115
    5e1c:	79 f0       	breq	.+30     	; 0x5e3c <vfprintf+0x408>
    5e1e:	83 35       	cpi	r24, 0x53	; 83
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <vfprintf+0x3f0>
    5e22:	56 c0       	rjmp	.+172    	; 0x5ed0 <vfprintf+0x49c>
    5e24:	20 c0       	rjmp	.+64     	; 0x5e66 <vfprintf+0x432>
    5e26:	56 01       	movw	r10, r12
    5e28:	32 e0       	ldi	r19, 0x02	; 2
    5e2a:	a3 0e       	add	r10, r19
    5e2c:	b1 1c       	adc	r11, r1
    5e2e:	f6 01       	movw	r30, r12
    5e30:	80 81       	ld	r24, Z
    5e32:	89 83       	std	Y+1, r24	; 0x01
    5e34:	01 e0       	ldi	r16, 0x01	; 1
    5e36:	10 e0       	ldi	r17, 0x00	; 0
    5e38:	63 01       	movw	r12, r6
    5e3a:	12 c0       	rjmp	.+36     	; 0x5e60 <vfprintf+0x42c>
    5e3c:	56 01       	movw	r10, r12
    5e3e:	f2 e0       	ldi	r31, 0x02	; 2
    5e40:	af 0e       	add	r10, r31
    5e42:	b1 1c       	adc	r11, r1
    5e44:	f6 01       	movw	r30, r12
    5e46:	c0 80       	ld	r12, Z
    5e48:	d1 80       	ldd	r13, Z+1	; 0x01
    5e4a:	96 fe       	sbrs	r9, 6
    5e4c:	03 c0       	rjmp	.+6      	; 0x5e54 <vfprintf+0x420>
    5e4e:	61 2f       	mov	r22, r17
    5e50:	70 e0       	ldi	r23, 0x00	; 0
    5e52:	02 c0       	rjmp	.+4      	; 0x5e58 <vfprintf+0x424>
    5e54:	6f ef       	ldi	r22, 0xFF	; 255
    5e56:	7f ef       	ldi	r23, 0xFF	; 255
    5e58:	c6 01       	movw	r24, r12
    5e5a:	0e 94 8b 32 	call	0x6516	; 0x6516 <strnlen>
    5e5e:	8c 01       	movw	r16, r24
    5e60:	f9 2d       	mov	r31, r9
    5e62:	ff 77       	andi	r31, 0x7F	; 127
    5e64:	14 c0       	rjmp	.+40     	; 0x5e8e <vfprintf+0x45a>
    5e66:	56 01       	movw	r10, r12
    5e68:	22 e0       	ldi	r18, 0x02	; 2
    5e6a:	a2 0e       	add	r10, r18
    5e6c:	b1 1c       	adc	r11, r1
    5e6e:	f6 01       	movw	r30, r12
    5e70:	c0 80       	ld	r12, Z
    5e72:	d1 80       	ldd	r13, Z+1	; 0x01
    5e74:	96 fe       	sbrs	r9, 6
    5e76:	03 c0       	rjmp	.+6      	; 0x5e7e <vfprintf+0x44a>
    5e78:	61 2f       	mov	r22, r17
    5e7a:	70 e0       	ldi	r23, 0x00	; 0
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <vfprintf+0x44e>
    5e7e:	6f ef       	ldi	r22, 0xFF	; 255
    5e80:	7f ef       	ldi	r23, 0xFF	; 255
    5e82:	c6 01       	movw	r24, r12
    5e84:	0e 94 6e 32 	call	0x64dc	; 0x64dc <strnlen_P>
    5e88:	8c 01       	movw	r16, r24
    5e8a:	f9 2d       	mov	r31, r9
    5e8c:	f0 68       	ori	r31, 0x80	; 128
    5e8e:	9f 2e       	mov	r9, r31
    5e90:	f3 fd       	sbrc	r31, 3
    5e92:	1a c0       	rjmp	.+52     	; 0x5ec8 <vfprintf+0x494>
    5e94:	85 2d       	mov	r24, r5
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	08 17       	cp	r16, r24
    5e9a:	19 07       	cpc	r17, r25
    5e9c:	a8 f4       	brcc	.+42     	; 0x5ec8 <vfprintf+0x494>
    5e9e:	b7 01       	movw	r22, r14
    5ea0:	80 e2       	ldi	r24, 0x20	; 32
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5ea8:	5a 94       	dec	r5
    5eaa:	f4 cf       	rjmp	.-24     	; 0x5e94 <vfprintf+0x460>
    5eac:	f6 01       	movw	r30, r12
    5eae:	97 fc       	sbrc	r9, 7
    5eb0:	85 91       	lpm	r24, Z+
    5eb2:	97 fe       	sbrs	r9, 7
    5eb4:	81 91       	ld	r24, Z+
    5eb6:	6f 01       	movw	r12, r30
    5eb8:	b7 01       	movw	r22, r14
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    5ec0:	51 10       	cpse	r5, r1
    5ec2:	5a 94       	dec	r5
    5ec4:	01 50       	subi	r16, 0x01	; 1
    5ec6:	11 09       	sbc	r17, r1
    5ec8:	01 15       	cp	r16, r1
    5eca:	11 05       	cpc	r17, r1
    5ecc:	79 f7       	brne	.-34     	; 0x5eac <vfprintf+0x478>
    5ece:	f7 c0       	rjmp	.+494    	; 0x60be <vfprintf+0x68a>
    5ed0:	84 36       	cpi	r24, 0x64	; 100
    5ed2:	11 f0       	breq	.+4      	; 0x5ed8 <vfprintf+0x4a4>
    5ed4:	89 36       	cpi	r24, 0x69	; 105
    5ed6:	61 f5       	brne	.+88     	; 0x5f30 <vfprintf+0x4fc>
    5ed8:	56 01       	movw	r10, r12
    5eda:	97 fe       	sbrs	r9, 7
    5edc:	09 c0       	rjmp	.+18     	; 0x5ef0 <vfprintf+0x4bc>
    5ede:	24 e0       	ldi	r18, 0x04	; 4
    5ee0:	a2 0e       	add	r10, r18
    5ee2:	b1 1c       	adc	r11, r1
    5ee4:	f6 01       	movw	r30, r12
    5ee6:	60 81       	ld	r22, Z
    5ee8:	71 81       	ldd	r23, Z+1	; 0x01
    5eea:	82 81       	ldd	r24, Z+2	; 0x02
    5eec:	93 81       	ldd	r25, Z+3	; 0x03
    5eee:	0a c0       	rjmp	.+20     	; 0x5f04 <vfprintf+0x4d0>
    5ef0:	f2 e0       	ldi	r31, 0x02	; 2
    5ef2:	af 0e       	add	r10, r31
    5ef4:	b1 1c       	adc	r11, r1
    5ef6:	f6 01       	movw	r30, r12
    5ef8:	60 81       	ld	r22, Z
    5efa:	71 81       	ldd	r23, Z+1	; 0x01
    5efc:	07 2e       	mov	r0, r23
    5efe:	00 0c       	add	r0, r0
    5f00:	88 0b       	sbc	r24, r24
    5f02:	99 0b       	sbc	r25, r25
    5f04:	f9 2d       	mov	r31, r9
    5f06:	ff 76       	andi	r31, 0x6F	; 111
    5f08:	9f 2e       	mov	r9, r31
    5f0a:	97 ff       	sbrs	r25, 7
    5f0c:	09 c0       	rjmp	.+18     	; 0x5f20 <vfprintf+0x4ec>
    5f0e:	90 95       	com	r25
    5f10:	80 95       	com	r24
    5f12:	70 95       	com	r23
    5f14:	61 95       	neg	r22
    5f16:	7f 4f       	sbci	r23, 0xFF	; 255
    5f18:	8f 4f       	sbci	r24, 0xFF	; 255
    5f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1c:	f0 68       	ori	r31, 0x80	; 128
    5f1e:	9f 2e       	mov	r9, r31
    5f20:	2a e0       	ldi	r18, 0x0A	; 10
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	a3 01       	movw	r20, r6
    5f26:	0e 94 11 33 	call	0x6622	; 0x6622 <__ultoa_invert>
    5f2a:	c8 2e       	mov	r12, r24
    5f2c:	c6 18       	sub	r12, r6
    5f2e:	3f c0       	rjmp	.+126    	; 0x5fae <vfprintf+0x57a>
    5f30:	09 2d       	mov	r16, r9
    5f32:	85 37       	cpi	r24, 0x75	; 117
    5f34:	21 f4       	brne	.+8      	; 0x5f3e <vfprintf+0x50a>
    5f36:	0f 7e       	andi	r16, 0xEF	; 239
    5f38:	2a e0       	ldi	r18, 0x0A	; 10
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	1d c0       	rjmp	.+58     	; 0x5f78 <vfprintf+0x544>
    5f3e:	09 7f       	andi	r16, 0xF9	; 249
    5f40:	8f 36       	cpi	r24, 0x6F	; 111
    5f42:	91 f0       	breq	.+36     	; 0x5f68 <vfprintf+0x534>
    5f44:	18 f4       	brcc	.+6      	; 0x5f4c <vfprintf+0x518>
    5f46:	88 35       	cpi	r24, 0x58	; 88
    5f48:	59 f0       	breq	.+22     	; 0x5f60 <vfprintf+0x52c>
    5f4a:	c3 c0       	rjmp	.+390    	; 0x60d2 <vfprintf+0x69e>
    5f4c:	80 37       	cpi	r24, 0x70	; 112
    5f4e:	19 f0       	breq	.+6      	; 0x5f56 <vfprintf+0x522>
    5f50:	88 37       	cpi	r24, 0x78	; 120
    5f52:	11 f0       	breq	.+4      	; 0x5f58 <vfprintf+0x524>
    5f54:	be c0       	rjmp	.+380    	; 0x60d2 <vfprintf+0x69e>
    5f56:	00 61       	ori	r16, 0x10	; 16
    5f58:	04 ff       	sbrs	r16, 4
    5f5a:	09 c0       	rjmp	.+18     	; 0x5f6e <vfprintf+0x53a>
    5f5c:	04 60       	ori	r16, 0x04	; 4
    5f5e:	07 c0       	rjmp	.+14     	; 0x5f6e <vfprintf+0x53a>
    5f60:	94 fe       	sbrs	r9, 4
    5f62:	08 c0       	rjmp	.+16     	; 0x5f74 <vfprintf+0x540>
    5f64:	06 60       	ori	r16, 0x06	; 6
    5f66:	06 c0       	rjmp	.+12     	; 0x5f74 <vfprintf+0x540>
    5f68:	28 e0       	ldi	r18, 0x08	; 8
    5f6a:	30 e0       	ldi	r19, 0x00	; 0
    5f6c:	05 c0       	rjmp	.+10     	; 0x5f78 <vfprintf+0x544>
    5f6e:	20 e1       	ldi	r18, 0x10	; 16
    5f70:	30 e0       	ldi	r19, 0x00	; 0
    5f72:	02 c0       	rjmp	.+4      	; 0x5f78 <vfprintf+0x544>
    5f74:	20 e1       	ldi	r18, 0x10	; 16
    5f76:	32 e0       	ldi	r19, 0x02	; 2
    5f78:	56 01       	movw	r10, r12
    5f7a:	07 ff       	sbrs	r16, 7
    5f7c:	09 c0       	rjmp	.+18     	; 0x5f90 <vfprintf+0x55c>
    5f7e:	84 e0       	ldi	r24, 0x04	; 4
    5f80:	a8 0e       	add	r10, r24
    5f82:	b1 1c       	adc	r11, r1
    5f84:	f6 01       	movw	r30, r12
    5f86:	60 81       	ld	r22, Z
    5f88:	71 81       	ldd	r23, Z+1	; 0x01
    5f8a:	82 81       	ldd	r24, Z+2	; 0x02
    5f8c:	93 81       	ldd	r25, Z+3	; 0x03
    5f8e:	08 c0       	rjmp	.+16     	; 0x5fa0 <vfprintf+0x56c>
    5f90:	f2 e0       	ldi	r31, 0x02	; 2
    5f92:	af 0e       	add	r10, r31
    5f94:	b1 1c       	adc	r11, r1
    5f96:	f6 01       	movw	r30, r12
    5f98:	60 81       	ld	r22, Z
    5f9a:	71 81       	ldd	r23, Z+1	; 0x01
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	a3 01       	movw	r20, r6
    5fa2:	0e 94 11 33 	call	0x6622	; 0x6622 <__ultoa_invert>
    5fa6:	c8 2e       	mov	r12, r24
    5fa8:	c6 18       	sub	r12, r6
    5faa:	0f 77       	andi	r16, 0x7F	; 127
    5fac:	90 2e       	mov	r9, r16
    5fae:	96 fe       	sbrs	r9, 6
    5fb0:	0b c0       	rjmp	.+22     	; 0x5fc8 <vfprintf+0x594>
    5fb2:	09 2d       	mov	r16, r9
    5fb4:	0e 7f       	andi	r16, 0xFE	; 254
    5fb6:	c1 16       	cp	r12, r17
    5fb8:	50 f4       	brcc	.+20     	; 0x5fce <vfprintf+0x59a>
    5fba:	94 fe       	sbrs	r9, 4
    5fbc:	0a c0       	rjmp	.+20     	; 0x5fd2 <vfprintf+0x59e>
    5fbe:	92 fc       	sbrc	r9, 2
    5fc0:	08 c0       	rjmp	.+16     	; 0x5fd2 <vfprintf+0x59e>
    5fc2:	09 2d       	mov	r16, r9
    5fc4:	0e 7e       	andi	r16, 0xEE	; 238
    5fc6:	05 c0       	rjmp	.+10     	; 0x5fd2 <vfprintf+0x59e>
    5fc8:	dc 2c       	mov	r13, r12
    5fca:	09 2d       	mov	r16, r9
    5fcc:	03 c0       	rjmp	.+6      	; 0x5fd4 <vfprintf+0x5a0>
    5fce:	dc 2c       	mov	r13, r12
    5fd0:	01 c0       	rjmp	.+2      	; 0x5fd4 <vfprintf+0x5a0>
    5fd2:	d1 2e       	mov	r13, r17
    5fd4:	04 ff       	sbrs	r16, 4
    5fd6:	0d c0       	rjmp	.+26     	; 0x5ff2 <vfprintf+0x5be>
    5fd8:	fe 01       	movw	r30, r28
    5fda:	ec 0d       	add	r30, r12
    5fdc:	f1 1d       	adc	r31, r1
    5fde:	80 81       	ld	r24, Z
    5fe0:	80 33       	cpi	r24, 0x30	; 48
    5fe2:	11 f4       	brne	.+4      	; 0x5fe8 <vfprintf+0x5b4>
    5fe4:	09 7e       	andi	r16, 0xE9	; 233
    5fe6:	09 c0       	rjmp	.+18     	; 0x5ffa <vfprintf+0x5c6>
    5fe8:	02 ff       	sbrs	r16, 2
    5fea:	06 c0       	rjmp	.+12     	; 0x5ff8 <vfprintf+0x5c4>
    5fec:	d3 94       	inc	r13
    5fee:	d3 94       	inc	r13
    5ff0:	04 c0       	rjmp	.+8      	; 0x5ffa <vfprintf+0x5c6>
    5ff2:	80 2f       	mov	r24, r16
    5ff4:	86 78       	andi	r24, 0x86	; 134
    5ff6:	09 f0       	breq	.+2      	; 0x5ffa <vfprintf+0x5c6>
    5ff8:	d3 94       	inc	r13
    5ffa:	03 fd       	sbrc	r16, 3
    5ffc:	11 c0       	rjmp	.+34     	; 0x6020 <vfprintf+0x5ec>
    5ffe:	00 ff       	sbrs	r16, 0
    6000:	06 c0       	rjmp	.+12     	; 0x600e <vfprintf+0x5da>
    6002:	1c 2d       	mov	r17, r12
    6004:	d5 14       	cp	r13, r5
    6006:	80 f4       	brcc	.+32     	; 0x6028 <vfprintf+0x5f4>
    6008:	15 0d       	add	r17, r5
    600a:	1d 19       	sub	r17, r13
    600c:	0d c0       	rjmp	.+26     	; 0x6028 <vfprintf+0x5f4>
    600e:	d5 14       	cp	r13, r5
    6010:	58 f4       	brcc	.+22     	; 0x6028 <vfprintf+0x5f4>
    6012:	b7 01       	movw	r22, r14
    6014:	80 e2       	ldi	r24, 0x20	; 32
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    601c:	d3 94       	inc	r13
    601e:	f7 cf       	rjmp	.-18     	; 0x600e <vfprintf+0x5da>
    6020:	d5 14       	cp	r13, r5
    6022:	10 f4       	brcc	.+4      	; 0x6028 <vfprintf+0x5f4>
    6024:	5d 18       	sub	r5, r13
    6026:	01 c0       	rjmp	.+2      	; 0x602a <vfprintf+0x5f6>
    6028:	51 2c       	mov	r5, r1
    602a:	04 ff       	sbrs	r16, 4
    602c:	10 c0       	rjmp	.+32     	; 0x604e <vfprintf+0x61a>
    602e:	b7 01       	movw	r22, r14
    6030:	80 e3       	ldi	r24, 0x30	; 48
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    6038:	02 ff       	sbrs	r16, 2
    603a:	17 c0       	rjmp	.+46     	; 0x606a <vfprintf+0x636>
    603c:	01 fd       	sbrc	r16, 1
    603e:	03 c0       	rjmp	.+6      	; 0x6046 <vfprintf+0x612>
    6040:	88 e7       	ldi	r24, 0x78	; 120
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	02 c0       	rjmp	.+4      	; 0x604a <vfprintf+0x616>
    6046:	88 e5       	ldi	r24, 0x58	; 88
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	b7 01       	movw	r22, r14
    604c:	0c c0       	rjmp	.+24     	; 0x6066 <vfprintf+0x632>
    604e:	80 2f       	mov	r24, r16
    6050:	86 78       	andi	r24, 0x86	; 134
    6052:	59 f0       	breq	.+22     	; 0x606a <vfprintf+0x636>
    6054:	01 ff       	sbrs	r16, 1
    6056:	02 c0       	rjmp	.+4      	; 0x605c <vfprintf+0x628>
    6058:	8b e2       	ldi	r24, 0x2B	; 43
    605a:	01 c0       	rjmp	.+2      	; 0x605e <vfprintf+0x62a>
    605c:	80 e2       	ldi	r24, 0x20	; 32
    605e:	07 fd       	sbrc	r16, 7
    6060:	8d e2       	ldi	r24, 0x2D	; 45
    6062:	b7 01       	movw	r22, r14
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    606a:	c1 16       	cp	r12, r17
    606c:	38 f4       	brcc	.+14     	; 0x607c <vfprintf+0x648>
    606e:	b7 01       	movw	r22, r14
    6070:	80 e3       	ldi	r24, 0x30	; 48
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    6078:	11 50       	subi	r17, 0x01	; 1
    607a:	f7 cf       	rjmp	.-18     	; 0x606a <vfprintf+0x636>
    607c:	ca 94       	dec	r12
    607e:	f3 01       	movw	r30, r6
    6080:	ec 0d       	add	r30, r12
    6082:	f1 1d       	adc	r31, r1
    6084:	80 81       	ld	r24, Z
    6086:	b7 01       	movw	r22, r14
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    608e:	c1 10       	cpse	r12, r1
    6090:	f5 cf       	rjmp	.-22     	; 0x607c <vfprintf+0x648>
    6092:	15 c0       	rjmp	.+42     	; 0x60be <vfprintf+0x68a>
    6094:	f4 e0       	ldi	r31, 0x04	; 4
    6096:	f5 15       	cp	r31, r5
    6098:	60 f5       	brcc	.+88     	; 0x60f2 <vfprintf+0x6be>
    609a:	84 e0       	ldi	r24, 0x04	; 4
    609c:	58 1a       	sub	r5, r24
    609e:	93 fe       	sbrs	r9, 3
    60a0:	1f c0       	rjmp	.+62     	; 0x60e0 <vfprintf+0x6ac>
    60a2:	01 11       	cpse	r16, r1
    60a4:	27 c0       	rjmp	.+78     	; 0x60f4 <vfprintf+0x6c0>
    60a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    60a8:	23 ff       	sbrs	r18, 3
    60aa:	2a c0       	rjmp	.+84     	; 0x6100 <vfprintf+0x6cc>
    60ac:	04 ed       	ldi	r16, 0xD4	; 212
    60ae:	11 e0       	ldi	r17, 0x01	; 1
    60b0:	39 2d       	mov	r19, r9
    60b2:	30 71       	andi	r19, 0x10	; 16
    60b4:	93 2e       	mov	r9, r19
    60b6:	f8 01       	movw	r30, r16
    60b8:	84 91       	lpm	r24, Z
    60ba:	81 11       	cpse	r24, r1
    60bc:	24 c0       	rjmp	.+72     	; 0x6106 <vfprintf+0x6d2>
    60be:	55 20       	and	r5, r5
    60c0:	09 f4       	brne	.+2      	; 0x60c4 <vfprintf+0x690>
    60c2:	e4 cc       	rjmp	.-1592   	; 0x5a8c <vfprintf+0x58>
    60c4:	b7 01       	movw	r22, r14
    60c6:	80 e2       	ldi	r24, 0x20	; 32
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    60ce:	5a 94       	dec	r5
    60d0:	f6 cf       	rjmp	.-20     	; 0x60be <vfprintf+0x68a>
    60d2:	f7 01       	movw	r30, r14
    60d4:	86 81       	ldd	r24, Z+6	; 0x06
    60d6:	97 81       	ldd	r25, Z+7	; 0x07
    60d8:	26 c0       	rjmp	.+76     	; 0x6126 <vfprintf+0x6f2>
    60da:	8f ef       	ldi	r24, 0xFF	; 255
    60dc:	9f ef       	ldi	r25, 0xFF	; 255
    60de:	23 c0       	rjmp	.+70     	; 0x6126 <vfprintf+0x6f2>
    60e0:	b7 01       	movw	r22, r14
    60e2:	80 e2       	ldi	r24, 0x20	; 32
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    60ea:	5a 94       	dec	r5
    60ec:	51 10       	cpse	r5, r1
    60ee:	f8 cf       	rjmp	.-16     	; 0x60e0 <vfprintf+0x6ac>
    60f0:	d8 cf       	rjmp	.-80     	; 0x60a2 <vfprintf+0x66e>
    60f2:	51 2c       	mov	r5, r1
    60f4:	b7 01       	movw	r22, r14
    60f6:	80 2f       	mov	r24, r16
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    60fe:	d3 cf       	rjmp	.-90     	; 0x60a6 <vfprintf+0x672>
    6100:	08 ed       	ldi	r16, 0xD8	; 216
    6102:	11 e0       	ldi	r17, 0x01	; 1
    6104:	d5 cf       	rjmp	.-86     	; 0x60b0 <vfprintf+0x67c>
    6106:	91 10       	cpse	r9, r1
    6108:	80 52       	subi	r24, 0x20	; 32
    610a:	b7 01       	movw	r22, r14
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	0e 94 b3 32 	call	0x6566	; 0x6566 <fputc>
    6112:	0f 5f       	subi	r16, 0xFF	; 255
    6114:	1f 4f       	sbci	r17, 0xFF	; 255
    6116:	cf cf       	rjmp	.-98     	; 0x60b6 <vfprintf+0x682>
    6118:	23 e0       	ldi	r18, 0x03	; 3
    611a:	25 15       	cp	r18, r5
    611c:	10 f4       	brcc	.+4      	; 0x6122 <vfprintf+0x6ee>
    611e:	83 e0       	ldi	r24, 0x03	; 3
    6120:	bd cf       	rjmp	.-134    	; 0x609c <vfprintf+0x668>
    6122:	51 2c       	mov	r5, r1
    6124:	c0 cf       	rjmp	.-128    	; 0x60a6 <vfprintf+0x672>
    6126:	60 96       	adiw	r28, 0x10	; 16
    6128:	e2 e1       	ldi	r30, 0x12	; 18
    612a:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__epilogue_restores__>

0000612e <__divmodhi4>:
    612e:	97 fb       	bst	r25, 7
    6130:	07 2e       	mov	r0, r23
    6132:	16 f4       	brtc	.+4      	; 0x6138 <__divmodhi4+0xa>
    6134:	00 94       	com	r0
    6136:	07 d0       	rcall	.+14     	; 0x6146 <__divmodhi4_neg1>
    6138:	77 fd       	sbrc	r23, 7
    613a:	09 d0       	rcall	.+18     	; 0x614e <__divmodhi4_neg2>
    613c:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    6140:	07 fc       	sbrc	r0, 7
    6142:	05 d0       	rcall	.+10     	; 0x614e <__divmodhi4_neg2>
    6144:	3e f4       	brtc	.+14     	; 0x6154 <__divmodhi4_exit>

00006146 <__divmodhi4_neg1>:
    6146:	90 95       	com	r25
    6148:	81 95       	neg	r24
    614a:	9f 4f       	sbci	r25, 0xFF	; 255
    614c:	08 95       	ret

0000614e <__divmodhi4_neg2>:
    614e:	70 95       	com	r23
    6150:	61 95       	neg	r22
    6152:	7f 4f       	sbci	r23, 0xFF	; 255

00006154 <__divmodhi4_exit>:
    6154:	08 95       	ret

00006156 <__divmodsi4>:
    6156:	05 2e       	mov	r0, r21
    6158:	97 fb       	bst	r25, 7
    615a:	1e f4       	brtc	.+6      	; 0x6162 <__divmodsi4+0xc>
    615c:	00 94       	com	r0
    615e:	0e 94 c2 30 	call	0x6184	; 0x6184 <__negsi2>
    6162:	57 fd       	sbrc	r21, 7
    6164:	07 d0       	rcall	.+14     	; 0x6174 <__divmodsi4_neg2>
    6166:	0e 94 20 31 	call	0x6240	; 0x6240 <__udivmodsi4>
    616a:	07 fc       	sbrc	r0, 7
    616c:	03 d0       	rcall	.+6      	; 0x6174 <__divmodsi4_neg2>
    616e:	4e f4       	brtc	.+18     	; 0x6182 <__divmodsi4_exit>
    6170:	0c 94 c2 30 	jmp	0x6184	; 0x6184 <__negsi2>

00006174 <__divmodsi4_neg2>:
    6174:	50 95       	com	r21
    6176:	40 95       	com	r20
    6178:	30 95       	com	r19
    617a:	21 95       	neg	r18
    617c:	3f 4f       	sbci	r19, 0xFF	; 255
    617e:	4f 4f       	sbci	r20, 0xFF	; 255
    6180:	5f 4f       	sbci	r21, 0xFF	; 255

00006182 <__divmodsi4_exit>:
    6182:	08 95       	ret

00006184 <__negsi2>:
    6184:	90 95       	com	r25
    6186:	80 95       	com	r24
    6188:	70 95       	com	r23
    618a:	61 95       	neg	r22
    618c:	7f 4f       	sbci	r23, 0xFF	; 255
    618e:	8f 4f       	sbci	r24, 0xFF	; 255
    6190:	9f 4f       	sbci	r25, 0xFF	; 255
    6192:	08 95       	ret

00006194 <__tablejump2__>:
    6194:	ee 0f       	add	r30, r30
    6196:	ff 1f       	adc	r31, r31
    6198:	05 90       	lpm	r0, Z+
    619a:	f4 91       	lpm	r31, Z
    619c:	e0 2d       	mov	r30, r0
    619e:	09 94       	ijmp

000061a0 <__muluhisi3>:
    61a0:	0e 94 42 31 	call	0x6284	; 0x6284 <__umulhisi3>
    61a4:	a5 9f       	mul	r26, r21
    61a6:	90 0d       	add	r25, r0
    61a8:	b4 9f       	mul	r27, r20
    61aa:	90 0d       	add	r25, r0
    61ac:	a4 9f       	mul	r26, r20
    61ae:	80 0d       	add	r24, r0
    61b0:	91 1d       	adc	r25, r1
    61b2:	11 24       	eor	r1, r1
    61b4:	08 95       	ret

000061b6 <__prologue_saves__>:
    61b6:	2f 92       	push	r2
    61b8:	3f 92       	push	r3
    61ba:	4f 92       	push	r4
    61bc:	5f 92       	push	r5
    61be:	6f 92       	push	r6
    61c0:	7f 92       	push	r7
    61c2:	8f 92       	push	r8
    61c4:	9f 92       	push	r9
    61c6:	af 92       	push	r10
    61c8:	bf 92       	push	r11
    61ca:	cf 92       	push	r12
    61cc:	df 92       	push	r13
    61ce:	ef 92       	push	r14
    61d0:	ff 92       	push	r15
    61d2:	0f 93       	push	r16
    61d4:	1f 93       	push	r17
    61d6:	cf 93       	push	r28
    61d8:	df 93       	push	r29
    61da:	cd b7       	in	r28, 0x3d	; 61
    61dc:	de b7       	in	r29, 0x3e	; 62
    61de:	ca 1b       	sub	r28, r26
    61e0:	db 0b       	sbc	r29, r27
    61e2:	cd bf       	out	0x3d, r28	; 61
    61e4:	de bf       	out	0x3e, r29	; 62
    61e6:	09 94       	ijmp

000061e8 <__epilogue_restores__>:
    61e8:	2a 88       	ldd	r2, Y+18	; 0x12
    61ea:	39 88       	ldd	r3, Y+17	; 0x11
    61ec:	48 88       	ldd	r4, Y+16	; 0x10
    61ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    61f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    61f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    61f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    61f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    61f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    61fa:	b9 84       	ldd	r11, Y+9	; 0x09
    61fc:	c8 84       	ldd	r12, Y+8	; 0x08
    61fe:	df 80       	ldd	r13, Y+7	; 0x07
    6200:	ee 80       	ldd	r14, Y+6	; 0x06
    6202:	fd 80       	ldd	r15, Y+5	; 0x05
    6204:	0c 81       	ldd	r16, Y+4	; 0x04
    6206:	1b 81       	ldd	r17, Y+3	; 0x03
    6208:	aa 81       	ldd	r26, Y+2	; 0x02
    620a:	b9 81       	ldd	r27, Y+1	; 0x01
    620c:	ce 0f       	add	r28, r30
    620e:	d1 1d       	adc	r29, r1
    6210:	cd bf       	out	0x3d, r28	; 61
    6212:	de bf       	out	0x3e, r29	; 62
    6214:	ed 01       	movw	r28, r26
    6216:	08 95       	ret

00006218 <__udivmodhi4>:
    6218:	aa 1b       	sub	r26, r26
    621a:	bb 1b       	sub	r27, r27
    621c:	51 e1       	ldi	r21, 0x11	; 17
    621e:	07 c0       	rjmp	.+14     	; 0x622e <__udivmodhi4_ep>

00006220 <__udivmodhi4_loop>:
    6220:	aa 1f       	adc	r26, r26
    6222:	bb 1f       	adc	r27, r27
    6224:	a6 17       	cp	r26, r22
    6226:	b7 07       	cpc	r27, r23
    6228:	10 f0       	brcs	.+4      	; 0x622e <__udivmodhi4_ep>
    622a:	a6 1b       	sub	r26, r22
    622c:	b7 0b       	sbc	r27, r23

0000622e <__udivmodhi4_ep>:
    622e:	88 1f       	adc	r24, r24
    6230:	99 1f       	adc	r25, r25
    6232:	5a 95       	dec	r21
    6234:	a9 f7       	brne	.-22     	; 0x6220 <__udivmodhi4_loop>
    6236:	80 95       	com	r24
    6238:	90 95       	com	r25
    623a:	bc 01       	movw	r22, r24
    623c:	cd 01       	movw	r24, r26
    623e:	08 95       	ret

00006240 <__udivmodsi4>:
    6240:	a1 e2       	ldi	r26, 0x21	; 33
    6242:	1a 2e       	mov	r1, r26
    6244:	aa 1b       	sub	r26, r26
    6246:	bb 1b       	sub	r27, r27
    6248:	fd 01       	movw	r30, r26
    624a:	0d c0       	rjmp	.+26     	; 0x6266 <__udivmodsi4_ep>

0000624c <__udivmodsi4_loop>:
    624c:	aa 1f       	adc	r26, r26
    624e:	bb 1f       	adc	r27, r27
    6250:	ee 1f       	adc	r30, r30
    6252:	ff 1f       	adc	r31, r31
    6254:	a2 17       	cp	r26, r18
    6256:	b3 07       	cpc	r27, r19
    6258:	e4 07       	cpc	r30, r20
    625a:	f5 07       	cpc	r31, r21
    625c:	20 f0       	brcs	.+8      	; 0x6266 <__udivmodsi4_ep>
    625e:	a2 1b       	sub	r26, r18
    6260:	b3 0b       	sbc	r27, r19
    6262:	e4 0b       	sbc	r30, r20
    6264:	f5 0b       	sbc	r31, r21

00006266 <__udivmodsi4_ep>:
    6266:	66 1f       	adc	r22, r22
    6268:	77 1f       	adc	r23, r23
    626a:	88 1f       	adc	r24, r24
    626c:	99 1f       	adc	r25, r25
    626e:	1a 94       	dec	r1
    6270:	69 f7       	brne	.-38     	; 0x624c <__udivmodsi4_loop>
    6272:	60 95       	com	r22
    6274:	70 95       	com	r23
    6276:	80 95       	com	r24
    6278:	90 95       	com	r25
    627a:	9b 01       	movw	r18, r22
    627c:	ac 01       	movw	r20, r24
    627e:	bd 01       	movw	r22, r26
    6280:	cf 01       	movw	r24, r30
    6282:	08 95       	ret

00006284 <__umulhisi3>:
    6284:	a2 9f       	mul	r26, r18
    6286:	b0 01       	movw	r22, r0
    6288:	b3 9f       	mul	r27, r19
    628a:	c0 01       	movw	r24, r0
    628c:	a3 9f       	mul	r26, r19
    628e:	70 0d       	add	r23, r0
    6290:	81 1d       	adc	r24, r1
    6292:	11 24       	eor	r1, r1
    6294:	91 1d       	adc	r25, r1
    6296:	b2 9f       	mul	r27, r18
    6298:	70 0d       	add	r23, r0
    629a:	81 1d       	adc	r24, r1
    629c:	11 24       	eor	r1, r1
    629e:	91 1d       	adc	r25, r1
    62a0:	08 95       	ret

000062a2 <atoi>:
    62a2:	fc 01       	movw	r30, r24
    62a4:	88 27       	eor	r24, r24
    62a6:	99 27       	eor	r25, r25
    62a8:	e8 94       	clt
    62aa:	21 91       	ld	r18, Z+
    62ac:	20 32       	cpi	r18, 0x20	; 32
    62ae:	e9 f3       	breq	.-6      	; 0x62aa <atoi+0x8>
    62b0:	29 30       	cpi	r18, 0x09	; 9
    62b2:	10 f0       	brcs	.+4      	; 0x62b8 <atoi+0x16>
    62b4:	2e 30       	cpi	r18, 0x0E	; 14
    62b6:	c8 f3       	brcs	.-14     	; 0x62aa <atoi+0x8>
    62b8:	2b 32       	cpi	r18, 0x2B	; 43
    62ba:	41 f0       	breq	.+16     	; 0x62cc <atoi+0x2a>
    62bc:	2d 32       	cpi	r18, 0x2D	; 45
    62be:	39 f4       	brne	.+14     	; 0x62ce <atoi+0x2c>
    62c0:	68 94       	set
    62c2:	04 c0       	rjmp	.+8      	; 0x62cc <atoi+0x2a>
    62c4:	0e 94 ab 32 	call	0x6556	; 0x6556 <__mulhi_const_10>
    62c8:	82 0f       	add	r24, r18
    62ca:	91 1d       	adc	r25, r1
    62cc:	21 91       	ld	r18, Z+
    62ce:	20 53       	subi	r18, 0x30	; 48
    62d0:	2a 30       	cpi	r18, 0x0A	; 10
    62d2:	c0 f3       	brcs	.-16     	; 0x62c4 <atoi+0x22>
    62d4:	1e f4       	brtc	.+6      	; 0x62dc <atoi+0x3a>
    62d6:	90 95       	com	r25
    62d8:	81 95       	neg	r24
    62da:	9f 4f       	sbci	r25, 0xFF	; 255
    62dc:	08 95       	ret

000062de <atol>:
    62de:	1f 93       	push	r17
    62e0:	fc 01       	movw	r30, r24
    62e2:	99 27       	eor	r25, r25
    62e4:	88 27       	eor	r24, r24
    62e6:	bc 01       	movw	r22, r24
    62e8:	e8 94       	clt
    62ea:	11 91       	ld	r17, Z+
    62ec:	10 32       	cpi	r17, 0x20	; 32
    62ee:	e9 f3       	breq	.-6      	; 0x62ea <atol+0xc>
    62f0:	19 30       	cpi	r17, 0x09	; 9
    62f2:	10 f0       	brcs	.+4      	; 0x62f8 <atol+0x1a>
    62f4:	1e 30       	cpi	r17, 0x0E	; 14
    62f6:	c8 f3       	brcs	.-14     	; 0x62ea <atol+0xc>
    62f8:	1b 32       	cpi	r17, 0x2B	; 43
    62fa:	51 f0       	breq	.+20     	; 0x6310 <atol+0x32>
    62fc:	1d 32       	cpi	r17, 0x2D	; 45
    62fe:	49 f4       	brne	.+18     	; 0x6312 <atol+0x34>
    6300:	68 94       	set
    6302:	06 c0       	rjmp	.+12     	; 0x6310 <atol+0x32>
    6304:	0e 94 96 32 	call	0x652c	; 0x652c <__mulsi_const_10>
    6308:	61 0f       	add	r22, r17
    630a:	71 1d       	adc	r23, r1
    630c:	81 1d       	adc	r24, r1
    630e:	91 1d       	adc	r25, r1
    6310:	11 91       	ld	r17, Z+
    6312:	10 53       	subi	r17, 0x30	; 48
    6314:	1a 30       	cpi	r17, 0x0A	; 10
    6316:	b0 f3       	brcs	.-20     	; 0x6304 <atol+0x26>
    6318:	3e f4       	brtc	.+14     	; 0x6328 <atol+0x4a>
    631a:	90 95       	com	r25
    631c:	80 95       	com	r24
    631e:	70 95       	com	r23
    6320:	61 95       	neg	r22
    6322:	7f 4f       	sbci	r23, 0xFF	; 255
    6324:	8f 4f       	sbci	r24, 0xFF	; 255
    6326:	9f 4f       	sbci	r25, 0xFF	; 255
    6328:	1f 91       	pop	r17
    632a:	08 95       	ret

0000632c <__ftoa_engine>:
    632c:	28 30       	cpi	r18, 0x08	; 8
    632e:	08 f0       	brcs	.+2      	; 0x6332 <__ftoa_engine+0x6>
    6330:	27 e0       	ldi	r18, 0x07	; 7
    6332:	33 27       	eor	r19, r19
    6334:	da 01       	movw	r26, r20
    6336:	99 0f       	add	r25, r25
    6338:	31 1d       	adc	r19, r1
    633a:	87 fd       	sbrc	r24, 7
    633c:	91 60       	ori	r25, 0x01	; 1
    633e:	00 96       	adiw	r24, 0x00	; 0
    6340:	61 05       	cpc	r22, r1
    6342:	71 05       	cpc	r23, r1
    6344:	39 f4       	brne	.+14     	; 0x6354 <__ftoa_engine+0x28>
    6346:	32 60       	ori	r19, 0x02	; 2
    6348:	2e 5f       	subi	r18, 0xFE	; 254
    634a:	3d 93       	st	X+, r19
    634c:	30 e3       	ldi	r19, 0x30	; 48
    634e:	2a 95       	dec	r18
    6350:	e1 f7       	brne	.-8      	; 0x634a <__ftoa_engine+0x1e>
    6352:	08 95       	ret
    6354:	9f 3f       	cpi	r25, 0xFF	; 255
    6356:	30 f0       	brcs	.+12     	; 0x6364 <__ftoa_engine+0x38>
    6358:	80 38       	cpi	r24, 0x80	; 128
    635a:	71 05       	cpc	r23, r1
    635c:	61 05       	cpc	r22, r1
    635e:	09 f0       	breq	.+2      	; 0x6362 <__ftoa_engine+0x36>
    6360:	3c 5f       	subi	r19, 0xFC	; 252
    6362:	3c 5f       	subi	r19, 0xFC	; 252
    6364:	3d 93       	st	X+, r19
    6366:	91 30       	cpi	r25, 0x01	; 1
    6368:	08 f0       	brcs	.+2      	; 0x636c <__ftoa_engine+0x40>
    636a:	80 68       	ori	r24, 0x80	; 128
    636c:	91 1d       	adc	r25, r1
    636e:	df 93       	push	r29
    6370:	cf 93       	push	r28
    6372:	1f 93       	push	r17
    6374:	0f 93       	push	r16
    6376:	ff 92       	push	r15
    6378:	ef 92       	push	r14
    637a:	19 2f       	mov	r17, r25
    637c:	98 7f       	andi	r25, 0xF8	; 248
    637e:	96 95       	lsr	r25
    6380:	e9 2f       	mov	r30, r25
    6382:	96 95       	lsr	r25
    6384:	96 95       	lsr	r25
    6386:	e9 0f       	add	r30, r25
    6388:	ff 27       	eor	r31, r31
    638a:	ea 5c       	subi	r30, 0xCA	; 202
    638c:	fd 4f       	sbci	r31, 0xFD	; 253
    638e:	99 27       	eor	r25, r25
    6390:	33 27       	eor	r19, r19
    6392:	ee 24       	eor	r14, r14
    6394:	ff 24       	eor	r15, r15
    6396:	a7 01       	movw	r20, r14
    6398:	e7 01       	movw	r28, r14
    639a:	05 90       	lpm	r0, Z+
    639c:	08 94       	sec
    639e:	07 94       	ror	r0
    63a0:	28 f4       	brcc	.+10     	; 0x63ac <__ftoa_engine+0x80>
    63a2:	36 0f       	add	r19, r22
    63a4:	e7 1e       	adc	r14, r23
    63a6:	f8 1e       	adc	r15, r24
    63a8:	49 1f       	adc	r20, r25
    63aa:	51 1d       	adc	r21, r1
    63ac:	66 0f       	add	r22, r22
    63ae:	77 1f       	adc	r23, r23
    63b0:	88 1f       	adc	r24, r24
    63b2:	99 1f       	adc	r25, r25
    63b4:	06 94       	lsr	r0
    63b6:	a1 f7       	brne	.-24     	; 0x63a0 <__ftoa_engine+0x74>
    63b8:	05 90       	lpm	r0, Z+
    63ba:	07 94       	ror	r0
    63bc:	28 f4       	brcc	.+10     	; 0x63c8 <__ftoa_engine+0x9c>
    63be:	e7 0e       	add	r14, r23
    63c0:	f8 1e       	adc	r15, r24
    63c2:	49 1f       	adc	r20, r25
    63c4:	56 1f       	adc	r21, r22
    63c6:	c1 1d       	adc	r28, r1
    63c8:	77 0f       	add	r23, r23
    63ca:	88 1f       	adc	r24, r24
    63cc:	99 1f       	adc	r25, r25
    63ce:	66 1f       	adc	r22, r22
    63d0:	06 94       	lsr	r0
    63d2:	a1 f7       	brne	.-24     	; 0x63bc <__ftoa_engine+0x90>
    63d4:	05 90       	lpm	r0, Z+
    63d6:	07 94       	ror	r0
    63d8:	28 f4       	brcc	.+10     	; 0x63e4 <__ftoa_engine+0xb8>
    63da:	f8 0e       	add	r15, r24
    63dc:	49 1f       	adc	r20, r25
    63de:	56 1f       	adc	r21, r22
    63e0:	c7 1f       	adc	r28, r23
    63e2:	d1 1d       	adc	r29, r1
    63e4:	88 0f       	add	r24, r24
    63e6:	99 1f       	adc	r25, r25
    63e8:	66 1f       	adc	r22, r22
    63ea:	77 1f       	adc	r23, r23
    63ec:	06 94       	lsr	r0
    63ee:	a1 f7       	brne	.-24     	; 0x63d8 <__ftoa_engine+0xac>
    63f0:	05 90       	lpm	r0, Z+
    63f2:	07 94       	ror	r0
    63f4:	20 f4       	brcc	.+8      	; 0x63fe <__ftoa_engine+0xd2>
    63f6:	49 0f       	add	r20, r25
    63f8:	56 1f       	adc	r21, r22
    63fa:	c7 1f       	adc	r28, r23
    63fc:	d8 1f       	adc	r29, r24
    63fe:	99 0f       	add	r25, r25
    6400:	66 1f       	adc	r22, r22
    6402:	77 1f       	adc	r23, r23
    6404:	88 1f       	adc	r24, r24
    6406:	06 94       	lsr	r0
    6408:	a9 f7       	brne	.-22     	; 0x63f4 <__ftoa_engine+0xc8>
    640a:	84 91       	lpm	r24, Z
    640c:	10 95       	com	r17
    640e:	17 70       	andi	r17, 0x07	; 7
    6410:	41 f0       	breq	.+16     	; 0x6422 <__ftoa_engine+0xf6>
    6412:	d6 95       	lsr	r29
    6414:	c7 95       	ror	r28
    6416:	57 95       	ror	r21
    6418:	47 95       	ror	r20
    641a:	f7 94       	ror	r15
    641c:	e7 94       	ror	r14
    641e:	1a 95       	dec	r17
    6420:	c1 f7       	brne	.-16     	; 0x6412 <__ftoa_engine+0xe6>
    6422:	ec ed       	ldi	r30, 0xDC	; 220
    6424:	f1 e0       	ldi	r31, 0x01	; 1
    6426:	68 94       	set
    6428:	15 90       	lpm	r1, Z+
    642a:	15 91       	lpm	r17, Z+
    642c:	35 91       	lpm	r19, Z+
    642e:	65 91       	lpm	r22, Z+
    6430:	95 91       	lpm	r25, Z+
    6432:	05 90       	lpm	r0, Z+
    6434:	7f e2       	ldi	r23, 0x2F	; 47
    6436:	73 95       	inc	r23
    6438:	e1 18       	sub	r14, r1
    643a:	f1 0a       	sbc	r15, r17
    643c:	43 0b       	sbc	r20, r19
    643e:	56 0b       	sbc	r21, r22
    6440:	c9 0b       	sbc	r28, r25
    6442:	d0 09       	sbc	r29, r0
    6444:	c0 f7       	brcc	.-16     	; 0x6436 <__ftoa_engine+0x10a>
    6446:	e1 0c       	add	r14, r1
    6448:	f1 1e       	adc	r15, r17
    644a:	43 1f       	adc	r20, r19
    644c:	56 1f       	adc	r21, r22
    644e:	c9 1f       	adc	r28, r25
    6450:	d0 1d       	adc	r29, r0
    6452:	7e f4       	brtc	.+30     	; 0x6472 <__ftoa_engine+0x146>
    6454:	70 33       	cpi	r23, 0x30	; 48
    6456:	11 f4       	brne	.+4      	; 0x645c <__ftoa_engine+0x130>
    6458:	8a 95       	dec	r24
    645a:	e6 cf       	rjmp	.-52     	; 0x6428 <__ftoa_engine+0xfc>
    645c:	e8 94       	clt
    645e:	01 50       	subi	r16, 0x01	; 1
    6460:	30 f0       	brcs	.+12     	; 0x646e <__ftoa_engine+0x142>
    6462:	08 0f       	add	r16, r24
    6464:	0a f4       	brpl	.+2      	; 0x6468 <__ftoa_engine+0x13c>
    6466:	00 27       	eor	r16, r16
    6468:	02 17       	cp	r16, r18
    646a:	08 f4       	brcc	.+2      	; 0x646e <__ftoa_engine+0x142>
    646c:	20 2f       	mov	r18, r16
    646e:	23 95       	inc	r18
    6470:	02 2f       	mov	r16, r18
    6472:	7a 33       	cpi	r23, 0x3A	; 58
    6474:	28 f0       	brcs	.+10     	; 0x6480 <__ftoa_engine+0x154>
    6476:	79 e3       	ldi	r23, 0x39	; 57
    6478:	7d 93       	st	X+, r23
    647a:	2a 95       	dec	r18
    647c:	e9 f7       	brne	.-6      	; 0x6478 <__ftoa_engine+0x14c>
    647e:	10 c0       	rjmp	.+32     	; 0x64a0 <__ftoa_engine+0x174>
    6480:	7d 93       	st	X+, r23
    6482:	2a 95       	dec	r18
    6484:	89 f6       	brne	.-94     	; 0x6428 <__ftoa_engine+0xfc>
    6486:	06 94       	lsr	r0
    6488:	97 95       	ror	r25
    648a:	67 95       	ror	r22
    648c:	37 95       	ror	r19
    648e:	17 95       	ror	r17
    6490:	17 94       	ror	r1
    6492:	e1 18       	sub	r14, r1
    6494:	f1 0a       	sbc	r15, r17
    6496:	43 0b       	sbc	r20, r19
    6498:	56 0b       	sbc	r21, r22
    649a:	c9 0b       	sbc	r28, r25
    649c:	d0 09       	sbc	r29, r0
    649e:	98 f0       	brcs	.+38     	; 0x64c6 <__ftoa_engine+0x19a>
    64a0:	23 95       	inc	r18
    64a2:	7e 91       	ld	r23, -X
    64a4:	73 95       	inc	r23
    64a6:	7a 33       	cpi	r23, 0x3A	; 58
    64a8:	08 f0       	brcs	.+2      	; 0x64ac <__ftoa_engine+0x180>
    64aa:	70 e3       	ldi	r23, 0x30	; 48
    64ac:	7c 93       	st	X, r23
    64ae:	20 13       	cpse	r18, r16
    64b0:	b8 f7       	brcc	.-18     	; 0x64a0 <__ftoa_engine+0x174>
    64b2:	7e 91       	ld	r23, -X
    64b4:	70 61       	ori	r23, 0x10	; 16
    64b6:	7d 93       	st	X+, r23
    64b8:	30 f0       	brcs	.+12     	; 0x64c6 <__ftoa_engine+0x19a>
    64ba:	83 95       	inc	r24
    64bc:	71 e3       	ldi	r23, 0x31	; 49
    64be:	7d 93       	st	X+, r23
    64c0:	70 e3       	ldi	r23, 0x30	; 48
    64c2:	2a 95       	dec	r18
    64c4:	e1 f7       	brne	.-8      	; 0x64be <__ftoa_engine+0x192>
    64c6:	11 24       	eor	r1, r1
    64c8:	ef 90       	pop	r14
    64ca:	ff 90       	pop	r15
    64cc:	0f 91       	pop	r16
    64ce:	1f 91       	pop	r17
    64d0:	cf 91       	pop	r28
    64d2:	df 91       	pop	r29
    64d4:	99 27       	eor	r25, r25
    64d6:	87 fd       	sbrc	r24, 7
    64d8:	90 95       	com	r25
    64da:	08 95       	ret

000064dc <strnlen_P>:
    64dc:	fc 01       	movw	r30, r24
    64de:	05 90       	lpm	r0, Z+
    64e0:	61 50       	subi	r22, 0x01	; 1
    64e2:	70 40       	sbci	r23, 0x00	; 0
    64e4:	01 10       	cpse	r0, r1
    64e6:	d8 f7       	brcc	.-10     	; 0x64de <strnlen_P+0x2>
    64e8:	80 95       	com	r24
    64ea:	90 95       	com	r25
    64ec:	8e 0f       	add	r24, r30
    64ee:	9f 1f       	adc	r25, r31
    64f0:	08 95       	ret

000064f2 <strcat>:
    64f2:	fb 01       	movw	r30, r22
    64f4:	dc 01       	movw	r26, r24
    64f6:	0d 90       	ld	r0, X+
    64f8:	00 20       	and	r0, r0
    64fa:	e9 f7       	brne	.-6      	; 0x64f6 <strcat+0x4>
    64fc:	11 97       	sbiw	r26, 0x01	; 1
    64fe:	01 90       	ld	r0, Z+
    6500:	0d 92       	st	X+, r0
    6502:	00 20       	and	r0, r0
    6504:	e1 f7       	brne	.-8      	; 0x64fe <strcat+0xc>
    6506:	08 95       	ret

00006508 <strcpy>:
    6508:	fb 01       	movw	r30, r22
    650a:	dc 01       	movw	r26, r24
    650c:	01 90       	ld	r0, Z+
    650e:	0d 92       	st	X+, r0
    6510:	00 20       	and	r0, r0
    6512:	e1 f7       	brne	.-8      	; 0x650c <strcpy+0x4>
    6514:	08 95       	ret

00006516 <strnlen>:
    6516:	fc 01       	movw	r30, r24
    6518:	61 50       	subi	r22, 0x01	; 1
    651a:	70 40       	sbci	r23, 0x00	; 0
    651c:	01 90       	ld	r0, Z+
    651e:	01 10       	cpse	r0, r1
    6520:	d8 f7       	brcc	.-10     	; 0x6518 <strnlen+0x2>
    6522:	80 95       	com	r24
    6524:	90 95       	com	r25
    6526:	8e 0f       	add	r24, r30
    6528:	9f 1f       	adc	r25, r31
    652a:	08 95       	ret

0000652c <__mulsi_const_10>:
    652c:	59 2f       	mov	r21, r25
    652e:	48 2f       	mov	r20, r24
    6530:	37 2f       	mov	r19, r23
    6532:	26 2f       	mov	r18, r22
    6534:	66 0f       	add	r22, r22
    6536:	77 1f       	adc	r23, r23
    6538:	88 1f       	adc	r24, r24
    653a:	99 1f       	adc	r25, r25
    653c:	66 0f       	add	r22, r22
    653e:	77 1f       	adc	r23, r23
    6540:	88 1f       	adc	r24, r24
    6542:	99 1f       	adc	r25, r25
    6544:	62 0f       	add	r22, r18
    6546:	73 1f       	adc	r23, r19
    6548:	84 1f       	adc	r24, r20
    654a:	95 1f       	adc	r25, r21
    654c:	66 0f       	add	r22, r22
    654e:	77 1f       	adc	r23, r23
    6550:	88 1f       	adc	r24, r24
    6552:	99 1f       	adc	r25, r25
    6554:	08 95       	ret

00006556 <__mulhi_const_10>:
    6556:	7a e0       	ldi	r23, 0x0A	; 10
    6558:	97 9f       	mul	r25, r23
    655a:	90 2d       	mov	r25, r0
    655c:	87 9f       	mul	r24, r23
    655e:	80 2d       	mov	r24, r0
    6560:	91 0d       	add	r25, r1
    6562:	11 24       	eor	r1, r1
    6564:	08 95       	ret

00006566 <fputc>:
    6566:	0f 93       	push	r16
    6568:	1f 93       	push	r17
    656a:	cf 93       	push	r28
    656c:	df 93       	push	r29
    656e:	fb 01       	movw	r30, r22
    6570:	23 81       	ldd	r18, Z+3	; 0x03
    6572:	21 fd       	sbrc	r18, 1
    6574:	03 c0       	rjmp	.+6      	; 0x657c <fputc+0x16>
    6576:	8f ef       	ldi	r24, 0xFF	; 255
    6578:	9f ef       	ldi	r25, 0xFF	; 255
    657a:	2c c0       	rjmp	.+88     	; 0x65d4 <fputc+0x6e>
    657c:	22 ff       	sbrs	r18, 2
    657e:	16 c0       	rjmp	.+44     	; 0x65ac <fputc+0x46>
    6580:	46 81       	ldd	r20, Z+6	; 0x06
    6582:	57 81       	ldd	r21, Z+7	; 0x07
    6584:	24 81       	ldd	r18, Z+4	; 0x04
    6586:	35 81       	ldd	r19, Z+5	; 0x05
    6588:	42 17       	cp	r20, r18
    658a:	53 07       	cpc	r21, r19
    658c:	44 f4       	brge	.+16     	; 0x659e <fputc+0x38>
    658e:	a0 81       	ld	r26, Z
    6590:	b1 81       	ldd	r27, Z+1	; 0x01
    6592:	9d 01       	movw	r18, r26
    6594:	2f 5f       	subi	r18, 0xFF	; 255
    6596:	3f 4f       	sbci	r19, 0xFF	; 255
    6598:	20 83       	st	Z, r18
    659a:	31 83       	std	Z+1, r19	; 0x01
    659c:	8c 93       	st	X, r24
    659e:	26 81       	ldd	r18, Z+6	; 0x06
    65a0:	37 81       	ldd	r19, Z+7	; 0x07
    65a2:	2f 5f       	subi	r18, 0xFF	; 255
    65a4:	3f 4f       	sbci	r19, 0xFF	; 255
    65a6:	26 83       	std	Z+6, r18	; 0x06
    65a8:	37 83       	std	Z+7, r19	; 0x07
    65aa:	14 c0       	rjmp	.+40     	; 0x65d4 <fputc+0x6e>
    65ac:	8b 01       	movw	r16, r22
    65ae:	ec 01       	movw	r28, r24
    65b0:	fb 01       	movw	r30, r22
    65b2:	00 84       	ldd	r0, Z+8	; 0x08
    65b4:	f1 85       	ldd	r31, Z+9	; 0x09
    65b6:	e0 2d       	mov	r30, r0
    65b8:	09 95       	icall
    65ba:	89 2b       	or	r24, r25
    65bc:	e1 f6       	brne	.-72     	; 0x6576 <fputc+0x10>
    65be:	d8 01       	movw	r26, r16
    65c0:	16 96       	adiw	r26, 0x06	; 6
    65c2:	8d 91       	ld	r24, X+
    65c4:	9c 91       	ld	r25, X
    65c6:	17 97       	sbiw	r26, 0x07	; 7
    65c8:	01 96       	adiw	r24, 0x01	; 1
    65ca:	16 96       	adiw	r26, 0x06	; 6
    65cc:	8d 93       	st	X+, r24
    65ce:	9c 93       	st	X, r25
    65d0:	17 97       	sbiw	r26, 0x07	; 7
    65d2:	ce 01       	movw	r24, r28
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
    65dc:	08 95       	ret

000065de <sprintf>:
    65de:	ae e0       	ldi	r26, 0x0E	; 14
    65e0:	b0 e0       	ldi	r27, 0x00	; 0
    65e2:	e5 ef       	ldi	r30, 0xF5	; 245
    65e4:	f2 e3       	ldi	r31, 0x32	; 50
    65e6:	0c 94 e9 30 	jmp	0x61d2	; 0x61d2 <__prologue_saves__+0x1c>
    65ea:	0d 89       	ldd	r16, Y+21	; 0x15
    65ec:	1e 89       	ldd	r17, Y+22	; 0x16
    65ee:	86 e0       	ldi	r24, 0x06	; 6
    65f0:	8c 83       	std	Y+4, r24	; 0x04
    65f2:	09 83       	std	Y+1, r16	; 0x01
    65f4:	1a 83       	std	Y+2, r17	; 0x02
    65f6:	8f ef       	ldi	r24, 0xFF	; 255
    65f8:	9f e7       	ldi	r25, 0x7F	; 127
    65fa:	8d 83       	std	Y+5, r24	; 0x05
    65fc:	9e 83       	std	Y+6, r25	; 0x06
    65fe:	ae 01       	movw	r20, r28
    6600:	47 5e       	subi	r20, 0xE7	; 231
    6602:	5f 4f       	sbci	r21, 0xFF	; 255
    6604:	6f 89       	ldd	r22, Y+23	; 0x17
    6606:	78 8d       	ldd	r23, Y+24	; 0x18
    6608:	ce 01       	movw	r24, r28
    660a:	01 96       	adiw	r24, 0x01	; 1
    660c:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <vfprintf>
    6610:	ef 81       	ldd	r30, Y+7	; 0x07
    6612:	f8 85       	ldd	r31, Y+8	; 0x08
    6614:	e0 0f       	add	r30, r16
    6616:	f1 1f       	adc	r31, r17
    6618:	10 82       	st	Z, r1
    661a:	2e 96       	adiw	r28, 0x0e	; 14
    661c:	e4 e0       	ldi	r30, 0x04	; 4
    661e:	0c 94 02 31 	jmp	0x6204	; 0x6204 <__epilogue_restores__+0x1c>

00006622 <__ultoa_invert>:
    6622:	fa 01       	movw	r30, r20
    6624:	aa 27       	eor	r26, r26
    6626:	28 30       	cpi	r18, 0x08	; 8
    6628:	51 f1       	breq	.+84     	; 0x667e <__ultoa_invert+0x5c>
    662a:	20 31       	cpi	r18, 0x10	; 16
    662c:	81 f1       	breq	.+96     	; 0x668e <__ultoa_invert+0x6c>
    662e:	e8 94       	clt
    6630:	6f 93       	push	r22
    6632:	6e 7f       	andi	r22, 0xFE	; 254
    6634:	6e 5f       	subi	r22, 0xFE	; 254
    6636:	7f 4f       	sbci	r23, 0xFF	; 255
    6638:	8f 4f       	sbci	r24, 0xFF	; 255
    663a:	9f 4f       	sbci	r25, 0xFF	; 255
    663c:	af 4f       	sbci	r26, 0xFF	; 255
    663e:	b1 e0       	ldi	r27, 0x01	; 1
    6640:	3e d0       	rcall	.+124    	; 0x66be <__ultoa_invert+0x9c>
    6642:	b4 e0       	ldi	r27, 0x04	; 4
    6644:	3c d0       	rcall	.+120    	; 0x66be <__ultoa_invert+0x9c>
    6646:	67 0f       	add	r22, r23
    6648:	78 1f       	adc	r23, r24
    664a:	89 1f       	adc	r24, r25
    664c:	9a 1f       	adc	r25, r26
    664e:	a1 1d       	adc	r26, r1
    6650:	68 0f       	add	r22, r24
    6652:	79 1f       	adc	r23, r25
    6654:	8a 1f       	adc	r24, r26
    6656:	91 1d       	adc	r25, r1
    6658:	a1 1d       	adc	r26, r1
    665a:	6a 0f       	add	r22, r26
    665c:	71 1d       	adc	r23, r1
    665e:	81 1d       	adc	r24, r1
    6660:	91 1d       	adc	r25, r1
    6662:	a1 1d       	adc	r26, r1
    6664:	20 d0       	rcall	.+64     	; 0x66a6 <__ultoa_invert+0x84>
    6666:	09 f4       	brne	.+2      	; 0x666a <__ultoa_invert+0x48>
    6668:	68 94       	set
    666a:	3f 91       	pop	r19
    666c:	2a e0       	ldi	r18, 0x0A	; 10
    666e:	26 9f       	mul	r18, r22
    6670:	11 24       	eor	r1, r1
    6672:	30 19       	sub	r19, r0
    6674:	30 5d       	subi	r19, 0xD0	; 208
    6676:	31 93       	st	Z+, r19
    6678:	de f6       	brtc	.-74     	; 0x6630 <__ultoa_invert+0xe>
    667a:	cf 01       	movw	r24, r30
    667c:	08 95       	ret
    667e:	46 2f       	mov	r20, r22
    6680:	47 70       	andi	r20, 0x07	; 7
    6682:	40 5d       	subi	r20, 0xD0	; 208
    6684:	41 93       	st	Z+, r20
    6686:	b3 e0       	ldi	r27, 0x03	; 3
    6688:	0f d0       	rcall	.+30     	; 0x66a8 <__ultoa_invert+0x86>
    668a:	c9 f7       	brne	.-14     	; 0x667e <__ultoa_invert+0x5c>
    668c:	f6 cf       	rjmp	.-20     	; 0x667a <__ultoa_invert+0x58>
    668e:	46 2f       	mov	r20, r22
    6690:	4f 70       	andi	r20, 0x0F	; 15
    6692:	40 5d       	subi	r20, 0xD0	; 208
    6694:	4a 33       	cpi	r20, 0x3A	; 58
    6696:	18 f0       	brcs	.+6      	; 0x669e <__ultoa_invert+0x7c>
    6698:	49 5d       	subi	r20, 0xD9	; 217
    669a:	31 fd       	sbrc	r19, 1
    669c:	40 52       	subi	r20, 0x20	; 32
    669e:	41 93       	st	Z+, r20
    66a0:	02 d0       	rcall	.+4      	; 0x66a6 <__ultoa_invert+0x84>
    66a2:	a9 f7       	brne	.-22     	; 0x668e <__ultoa_invert+0x6c>
    66a4:	ea cf       	rjmp	.-44     	; 0x667a <__ultoa_invert+0x58>
    66a6:	b4 e0       	ldi	r27, 0x04	; 4
    66a8:	a6 95       	lsr	r26
    66aa:	97 95       	ror	r25
    66ac:	87 95       	ror	r24
    66ae:	77 95       	ror	r23
    66b0:	67 95       	ror	r22
    66b2:	ba 95       	dec	r27
    66b4:	c9 f7       	brne	.-14     	; 0x66a8 <__ultoa_invert+0x86>
    66b6:	00 97       	sbiw	r24, 0x00	; 0
    66b8:	61 05       	cpc	r22, r1
    66ba:	71 05       	cpc	r23, r1
    66bc:	08 95       	ret
    66be:	9b 01       	movw	r18, r22
    66c0:	ac 01       	movw	r20, r24
    66c2:	0a 2e       	mov	r0, r26
    66c4:	06 94       	lsr	r0
    66c6:	57 95       	ror	r21
    66c8:	47 95       	ror	r20
    66ca:	37 95       	ror	r19
    66cc:	27 95       	ror	r18
    66ce:	ba 95       	dec	r27
    66d0:	c9 f7       	brne	.-14     	; 0x66c4 <__ultoa_invert+0xa2>
    66d2:	62 0f       	add	r22, r18
    66d4:	73 1f       	adc	r23, r19
    66d6:	84 1f       	adc	r24, r20
    66d8:	95 1f       	adc	r25, r21
    66da:	a0 1d       	adc	r26, r0
    66dc:	08 95       	ret

000066de <eeprom_read_block>:
    66de:	60 50       	subi	r22, 0x00	; 0
    66e0:	7c 4e       	sbci	r23, 0xEC	; 236
    66e2:	0c 94 aa 33 	jmp	0x6754	; 0x6754 <memcpy>

000066e6 <eeprom_update_block>:
    66e6:	dc 01       	movw	r26, r24
    66e8:	a4 0f       	add	r26, r20
    66ea:	b5 1f       	adc	r27, r21
    66ec:	41 50       	subi	r20, 0x01	; 1
    66ee:	50 40       	sbci	r21, 0x00	; 0
    66f0:	48 f0       	brcs	.+18     	; 0x6704 <eeprom_update_block+0x1e>
    66f2:	cb 01       	movw	r24, r22
    66f4:	84 0f       	add	r24, r20
    66f6:	95 1f       	adc	r25, r21
    66f8:	2e 91       	ld	r18, -X
    66fa:	0e 94 84 33 	call	0x6708	; 0x6708 <eeprom_update_r18>
    66fe:	41 50       	subi	r20, 0x01	; 1
    6700:	50 40       	sbci	r21, 0x00	; 0
    6702:	d0 f7       	brcc	.-12     	; 0x66f8 <eeprom_update_block+0x12>
    6704:	08 95       	ret

00006706 <eeprom_update_byte>:
    6706:	26 2f       	mov	r18, r22

00006708 <eeprom_update_r18>:
    6708:	0e 94 a6 33 	call	0x674c	; 0x674c <eeprom_mapen>
    670c:	00 80       	ld	r0, Z
    670e:	02 16       	cp	r0, r18
    6710:	19 f0       	breq	.+6      	; 0x6718 <eeprom_update_r18+0x10>
    6712:	0e 94 8f 33 	call	0x671e	; 0x671e <eeprom_write_r18>
    6716:	01 97       	sbiw	r24, 0x01	; 1
    6718:	01 97       	sbiw	r24, 0x01	; 1
    671a:	08 95       	ret

0000671c <eeprom_write_byte>:
    671c:	26 2f       	mov	r18, r22

0000671e <eeprom_write_r18>:
    671e:	af 93       	push	r26
    6720:	bf 93       	push	r27
    6722:	e0 e0       	ldi	r30, 0x00	; 0
    6724:	f0 e1       	ldi	r31, 0x10	; 16
    6726:	32 81       	ldd	r19, Z+2	; 0x02
    6728:	31 fd       	sbrc	r19, 1
    672a:	fd cf       	rjmp	.-6      	; 0x6726 <eeprom_write_r18+0x8>
    672c:	dc 01       	movw	r26, r24
    672e:	a0 50       	subi	r26, 0x00	; 0
    6730:	bc 4e       	sbci	r27, 0xEC	; 236
    6732:	2c 93       	st	X, r18
    6734:	2d e9       	ldi	r18, 0x9D	; 157
    6736:	24 bf       	out	0x34, r18	; 52
    6738:	23 e0       	ldi	r18, 0x03	; 3
    673a:	20 83       	st	Z, r18
    673c:	01 96       	adiw	r24, 0x01	; 1
    673e:	bf 91       	pop	r27
    6740:	af 91       	pop	r26
    6742:	08 95       	ret

00006744 <eeprom_read_byte>:
    6744:	03 d0       	rcall	.+6      	; 0x674c <eeprom_mapen>
    6746:	80 81       	ld	r24, Z
    6748:	99 27       	eor	r25, r25
    674a:	08 95       	ret

0000674c <eeprom_mapen>:
    674c:	fc 01       	movw	r30, r24
    674e:	e0 50       	subi	r30, 0x00	; 0
    6750:	fc 4e       	sbci	r31, 0xEC	; 236
    6752:	08 95       	ret

00006754 <memcpy>:
    6754:	fb 01       	movw	r30, r22
    6756:	dc 01       	movw	r26, r24
    6758:	02 c0       	rjmp	.+4      	; 0x675e <memcpy+0xa>
    675a:	01 90       	ld	r0, Z+
    675c:	0d 92       	st	X+, r0
    675e:	41 50       	subi	r20, 0x01	; 1
    6760:	50 40       	sbci	r21, 0x00	; 0
    6762:	d8 f7       	brcc	.-10     	; 0x675a <memcpy+0x6>
    6764:	08 95       	ret

00006766 <_exit>:
    6766:	f8 94       	cli

00006768 <__stop_program>:
    6768:	ff cf       	rjmp	.-2      	; 0x6768 <__stop_program>
