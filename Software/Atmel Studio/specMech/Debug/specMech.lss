
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004d2b  00004ddf  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048d0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045b  000088d0  000048d0  00004984  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082b  00802804  00802804  00004de3  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004de3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e40  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000678  00000000  00000000  00004e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a5c6  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004805  00000000  00000000  0000fabe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000469d  00000000  00000000  000142c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000105c  00000000  00000000  00018960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000233f  00000000  00000000  000199bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004322  00000000  00000000  0001bcfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  0002001d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__vector_17>
      48:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__vector_26>
      6c:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__vector_37>
      98:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	a0 04       	cpc	r10, r0
      a2:	ae 04       	cpc	r10, r14
      a4:	ae 04       	cpc	r10, r14
      a6:	ae 04       	cpc	r10, r14
      a8:	ae 04       	cpc	r10, r14
      aa:	ae 04       	cpc	r10, r14
      ac:	ae 04       	cpc	r10, r14
      ae:	ae 04       	cpc	r10, r14
      b0:	ae 04       	cpc	r10, r14
      b2:	ae 04       	cpc	r10, r14
      b4:	ae 04       	cpc	r10, r14
      b6:	ae 04       	cpc	r10, r14
      b8:	ae 04       	cpc	r10, r14
      ba:	ae 04       	cpc	r10, r14
      bc:	ae 04       	cpc	r10, r14
      be:	ae 04       	cpc	r10, r14
      c0:	ae 04       	cpc	r10, r14
      c2:	8e 04       	cpc	r8, r14
      c4:	ae 04       	cpc	r10, r14
      c6:	ae 04       	cpc	r10, r14
      c8:	ae 04       	cpc	r10, r14
      ca:	ae 04       	cpc	r10, r14
      cc:	ae 04       	cpc	r10, r14
      ce:	ae 04       	cpc	r10, r14
      d0:	ae 04       	cpc	r10, r14
      d2:	ae 04       	cpc	r10, r14
      d4:	ae 04       	cpc	r10, r14
      d6:	94 04       	cpc	r9, r4
      d8:	ae 04       	cpc	r10, r14
      da:	91 04       	cpc	r9, r1
      dc:	ae 04       	cpc	r10, r14
      de:	ae 04       	cpc	r10, r14
      e0:	97 04       	cpc	r9, r7
      e2:	9a 04       	cpc	r9, r10
      e4:	9d 04       	cpc	r9, r13
      e6:	51 0f       	add	r21, r17
      e8:	51 0f       	add	r21, r17
      ea:	51 0f       	add	r21, r17
      ec:	1a 14       	cp	r1, r10
      ee:	1a 14       	cp	r1, r10
      f0:	1a 14       	cp	r1, r10
      f2:	1a 14       	cp	r1, r10
      f4:	1a 14       	cp	r1, r10
      f6:	1a 14       	cp	r1, r10
      f8:	1a 14       	cp	r1, r10
      fa:	1a 14       	cp	r1, r10
      fc:	1a 14       	cp	r1, r10
      fe:	1a 14       	cp	r1, r10
     100:	1a 14       	cp	r1, r10
     102:	1a 14       	cp	r1, r10
     104:	1a 14       	cp	r1, r10
     106:	1a 14       	cp	r1, r10
     108:	1a 14       	cp	r1, r10
     10a:	1a 14       	cp	r1, r10
     10c:	1a 14       	cp	r1, r10
     10e:	1a 14       	cp	r1, r10
     110:	dc 13       	cpse	r29, r28
     112:	1a 14       	cp	r1, r10
     114:	1a 14       	cp	r1, r10
     116:	1a 14       	cp	r1, r10
     118:	1a 14       	cp	r1, r10
     11a:	1a 14       	cp	r1, r10
     11c:	1a 14       	cp	r1, r10
     11e:	1a 14       	cp	r1, r10
     120:	1a 14       	cp	r1, r10
     122:	1a 14       	cp	r1, r10
     124:	1a 14       	cp	r1, r10
     126:	e1 0f       	add	r30, r17
     128:	e1 0f       	add	r30, r17
     12a:	e1 0f       	add	r30, r17
     12c:	1a 14       	cp	r1, r10
     12e:	9f 10       	cpse	r9, r15
     130:	1a 14       	cp	r1, r10
     132:	1a 14       	cp	r1, r10
     134:	1a 14       	cp	r1, r10
     136:	1a 14       	cp	r1, r10
     138:	1a 14       	cp	r1, r10
     13a:	1a 14       	cp	r1, r10
     13c:	1a 14       	cp	r1, r10
     13e:	1a 14       	cp	r1, r10
     140:	1a 14       	cp	r1, r10
     142:	dc 11       	cpse	r29, r12
     144:	b2 12       	cpse	r11, r18
     146:	1a 14       	cp	r1, r10
     148:	1a 14       	cp	r1, r10
     14a:	1a 14       	cp	r1, r10
     14c:	3b 13       	cpse	r19, r27
     14e:	1a 14       	cp	r1, r10
     150:	83 13       	cpse	r24, r19

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	eb e2       	ldi	r30, 0x2B	; 43
     268:	fd e4       	ldi	r31, 0x4D	; 77
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	af 32       	cpi	r26, 0x2F	; 47
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 9f 08 	call	0x113e	; 0x113e <main>
     28a:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x16>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <read_AD590+0x18>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <read_AD590+0x54>
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <read_AD590+0x2a>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <read_AD590+0x40>
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2bc:	0f 2e       	mov	r0, r31
     2be:	f3 e3       	ldi	r31, 0x33	; 51
     2c0:	8f 2e       	mov	r8, r31
     2c2:	98 2c       	mov	r9, r8
     2c4:	f3 ef       	ldi	r31, 0xF3	; 243
     2c6:	af 2e       	mov	r10, r31
     2c8:	f0 e4       	ldi	r31, 0x40	; 64
     2ca:	bf 2e       	mov	r11, r31
     2cc:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d2:	81 2c       	mov	r8, r1
     2d4:	91 2c       	mov	r9, r1
     2d6:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d8:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2dc:	81 2c       	mov	r8, r1
     2de:	91 2c       	mov	r9, r1
     2e0:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e2:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e6:	81 2c       	mov	r8, r1
     2e8:	91 2c       	mov	r9, r1
     2ea:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ec:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	66 e0       	ldi	r22, 0x06	; 6
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f8:	41 2f       	mov	r20, r17
     2fa:	40 95       	com	r20
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e2       	ldi	r24, 0x27	; 39
     300:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     304:	41 2f       	mov	r20, r17
     306:	6a e0       	ldi	r22, 0x0A	; 10
     308:	87 e2       	ldi	r24, 0x27	; 39
     30a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	86 e1       	ldi	r24, 0x16	; 22
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <read_AD590+0x7e>
     314:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	20 e8       	ldi	r18, 0x80	; 128
     31e:	40 e7       	ldi	r20, 0x70	; 112
     320:	68 e0       	ldi	r22, 0x08	; 8
     322:	88 e4       	ldi	r24, 0x48	; 72
     324:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     328:	83 36       	cpi	r24, 0x63	; 99
     32a:	51 f4       	brne	.+20     	; 0x340 <read_AD590+0xae>
		*temperature = BADFLOAT;
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e8       	ldi	r21, 0x80	; 128
     330:	66 e2       	ldi	r22, 0x26	; 38
     332:	74 ec       	ldi	r23, 0xC4	; 196
     334:	f7 01       	movw	r30, r14
     336:	40 83       	st	Z, r20
     338:	51 83       	std	Z+1, r21	; 0x01
     33a:	62 83       	std	Z+2, r22	; 0x02
     33c:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33e:	1c c0       	rjmp	.+56     	; 0x378 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	4a e7       	ldi	r20, 0x7A	; 122
     346:	54 e4       	ldi	r21, 0x44	; 68
     348:	69 81       	ldd	r22, Y+1	; 0x01
     34a:	7a 81       	ldd	r23, Y+2	; 0x02
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e9       	ldi	r19, 0x93	; 147
     358:	48 e8       	ldi	r20, 0x88	; 136
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__subsf3>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	c5 01       	movw	r24, r10
     366:	b4 01       	movw	r22, r8
     368:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__addsf3>
     36c:	f7 01       	movw	r30, r14
     36e:	60 83       	st	Z, r22
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     376:	80 e0       	ldi	r24, 0x00	; 0

}
     378:	24 96       	adiw	r28, 0x04	; 4
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	08 95       	ret

00000394 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	f8 2e       	mov	r15, r24
     3ae:	e6 2e       	mov	r14, r22
     3b0:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b2:	46 2b       	or	r20, r22
     3b4:	c4 2f       	mov	r28, r20
     3b6:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b8:	d2 2f       	mov	r29, r18
     3ba:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e8       	ldi	r25, 0x80	; 128
     3c0:	a6 e2       	ldi	r26, 0x26	; 38
     3c2:	b4 ec       	ldi	r27, 0xC4	; 196
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8f 2d       	mov	r24, r15
     3d2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     3d6:	08 2f       	mov	r16, r24
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <read_ADS1115+0x50>
		stop_TWI();
     3dc:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     3e0:	13 e6       	ldi	r17, 0x63	; 99
     3e2:	b4 c0       	rjmp	.+360    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     3ea:	18 2f       	mov	r17, r24
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <read_ADS1115+0x62>
		stop_TWI();
     3f0:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     3f4:	ab c0       	rjmp	.+342    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     3fc:	18 2f       	mov	r17, r24
     3fe:	83 36       	cpi	r24, 0x63	; 99
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		stop_TWI();
     402:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     406:	a2 c0       	rjmp	.+324    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     408:	8d 2f       	mov	r24, r29
     40a:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     40e:	18 2f       	mov	r17, r24
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		stop_TWI();
     414:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     418:	99 c0       	rjmp	.+306    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	stop_TWI();
     41a:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
     41e:	fc e1       	ldi	r31, 0x1C	; 28
     420:	fa 95       	dec	r31
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	_delay_us(25);									// Power-up time

	converting = YES;
     424:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		start_TWI(addr, TWIREAD);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8f 2d       	mov	r24, r15
     42c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
		flag = readlast_TWI();
     430:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
		if (flag & 0b10000000) {
     434:	88 23       	and	r24, r24
     436:	0c f4       	brge	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			converting = NO;
     438:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43a:	c1 11       	cpse	r28, r1
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43e:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	start_TWI(addr, TWIWRITE);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f 2d       	mov	r24, r15
     446:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8f 2d       	mov	r24, r15
     454:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
	highbyte = read_TWI();
     458:	0e 94 d7 18 	call	0x31ae	; 0x31ae <read_TWI>
     45c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
     462:	d8 2f       	mov	r29, r24
	stop_TWI();
     464:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	value = highbyte;
     468:	6c 2f       	mov	r22, r28
     46a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46c:	76 2f       	mov	r23, r22
     46e:	66 27       	eor	r22, r22
	value |= lowbyte;
     470:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 16       	cp	r14, r24
     476:	49 f1       	breq	.+82     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     478:	8e 15       	cp	r24, r14
     47a:	30 f0       	brcs	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	ee 20       	and	r14, r14
     47e:	d9 f1       	breq	.+118    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	ee 16       	cp	r14, r30
     484:	69 f1       	breq	.+90     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     486:	42 c0       	rjmp	.+132    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	ef 16       	cp	r14, r31
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	42 c0       	rjmp	.+132    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	e8 16       	cp	r14, r24
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	e6 e0       	ldi	r30, 0x06	; 6
     498:	ee 12       	cpse	r14, r30
     49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case PGA0256:
			scale = SCA0256;
     49e:	0f 2e       	mov	r0, r31
     4a0:	f4 e7       	ldi	r31, 0x74	; 116
     4a2:	8f 2e       	mov	r8, r31
     4a4:	f3 e1       	ldi	r31, 0x13	; 19
     4a6:	9f 2e       	mov	r9, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	af 2e       	mov	r10, r31
     4ac:	f7 e3       	ldi	r31, 0x37	; 55
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	3a c0       	rjmp	.+116    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f4 e7       	ldi	r31, 0x74	; 116
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f3 e1       	ldi	r31, 0x13	; 19
     4bc:	9f 2e       	mov	r9, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	af 2e       	mov	r10, r31
     4c2:	f8 e3       	ldi	r31, 0x38	; 56
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
			break;
     4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA2048:
			scale = SCA2048;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f2 e1       	ldi	r31, 0x12	; 18
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f3 e1       	ldi	r31, 0x13	; 19
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f3 e8       	ldi	r31, 0x83	; 131
     4d6:	af 2e       	mov	r10, r31
     4d8:	f8 e3       	ldi	r31, 0x38	; 56
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
			break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA4096:
			scale = SCA4096;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f4 e7       	ldi	r31, 0x74	; 116
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f3 e1       	ldi	r31, 0x13	; 19
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	af 2e       	mov	r10, r31
     4ee:	f9 e3       	ldi	r31, 0x39	; 57
     4f0:	bf 2e       	mov	r11, r31
     4f2:	f0 2d       	mov	r31, r0
			break;
     4f4:	19 c0       	rjmp	.+50     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA6144:
			scale = SCA6144;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fe e2       	ldi	r31, 0x2E	; 46
     4fa:	8f 2e       	mov	r8, r31
     4fc:	fd e9       	ldi	r31, 0x9D	; 157
     4fe:	9f 2e       	mov	r9, r31
     500:	f4 e4       	ldi	r31, 0x44	; 68
     502:	af 2e       	mov	r10, r31
     504:	f9 e3       	ldi	r31, 0x39	; 57
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
			break;
     50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		default:
			scale = 0.0;
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
			break;
     512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     514:	0f 2e       	mov	r0, r31
     516:	f1 e7       	ldi	r31, 0x71	; 113
     518:	8f 2e       	mov	r8, r31
     51a:	f3 e1       	ldi	r31, 0x13	; 19
     51c:	9f 2e       	mov	r9, r31
     51e:	f3 e8       	ldi	r31, 0x83	; 131
     520:	af 2e       	mov	r10, r31
     522:	f7 e3       	ldi	r31, 0x37	; 55
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__floatsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
     540:	f6 01       	movw	r30, r12
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54a:	10 2f       	mov	r17, r16

}
     54c:	81 2f       	mov	r24, r17
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     568:	e0 e2       	ldi	r30, 0x20	; 32
     56a:	f4 e0       	ldi	r31, 0x04	; 4
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     570:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     572:	86 83       	std	Z+6, r24	; 0x06
     574:	08 95       	ret

00000576 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	9c 01       	movw	r18, r24
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	1c c0       	rjmp	.+56     	; 0x5b8 <get_cmdline+0x42>
     580:	ca e1       	ldi	r28, 0x1A	; 26
     582:	dc e2       	ldi	r29, 0x2C	; 44
     584:	e8 81       	ld	r30, Y
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	e5 5e       	subi	r30, 0xE5	; 229
     58a:	f4 4d       	sbci	r31, 0xD4	; 212
     58c:	80 81       	ld	r24, Z
     58e:	f9 01       	movw	r30, r18
     590:	e4 0f       	add	r30, r20
     592:	f1 1d       	adc	r31, r1
     594:	80 83       	st	Z, r24
     596:	ac e1       	ldi	r26, 0x1C	; 28
     598:	bc e2       	ldi	r27, 0x2C	; 44
     59a:	8c 91       	ld	r24, X
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	8c 93       	st	X, r24
     5a0:	88 81       	ld	r24, Y
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	6e ef       	ldi	r22, 0xFE	; 254
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
     5ae:	88 83       	st	Y, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <get_cmdline+0x4a>
     5b6:	4f 5f       	subi	r20, 0xFF	; 255
     5b8:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <recv0_buf+0x101>
     5bc:	81 11       	cpse	r24, r1
     5be:	e0 cf       	rjmp	.-64     	; 0x580 <get_cmdline+0xa>
     5c0:	f9 01       	movw	r30, r18
     5c2:	e4 0f       	add	r30, r20
     5c4:	f1 1d       	adc	r31, r1
     5c6:	10 82       	st	Z, r1
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5ce:	9f e9       	ldi	r25, 0x9F	; 159
     5d0:	98 0f       	add	r25, r24
     5d2:	9a 31       	cpi	r25, 0x1A	; 26
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <isaletter+0x12>
     5d6:	81 54       	subi	r24, 0x41	; 65
     5d8:	8a 31       	cpi	r24, 0x1A	; 26
     5da:	20 f4       	brcc	.+8      	; 0x5e4 <isaletter+0x16>
		return(ERROR);
     5dc:	83 e6       	ldi	r24, 0x63	; 99
     5de:	08 95       	ret
     5e0:	83 e6       	ldi	r24, 0x63	; 99
     5e2:	08 95       	ret
	}
	return(NOERROR);
     5e4:	80 e0       	ldi	r24, 0x00	; 0

}
     5e6:	08 95       	ret

000005e8 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f4:	e6 2e       	mov	r14, r22
     5f6:	f1 2c       	mov	r15, r1
     5f8:	84 e3       	ldi	r24, 0x34	; 52
     5fa:	8e 9d       	mul	r24, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	8f 9d       	mul	r24, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	e9 5f       	subi	r30, 0xF9	; 249
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     60c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     60e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     610:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     612:	04 c0       	rjmp	.+8      	; 0x61c <parse_cmd+0x34>
		if (*ptr == '\0') {
     614:	11 23       	and	r17, r17
     616:	09 f4       	brne	.+2      	; 0x61a <parse_cmd+0x32>
     618:	75 c0       	rjmp	.+234    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     61c:	18 81       	ld	r17, Y
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     624:	88 23       	and	r24, r24
     626:	b1 f3       	breq	.-20     	; 0x614 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	8e 9d       	mul	r24, r14
     62e:	f0 01       	movw	r30, r0
     630:	8f 9d       	mul	r24, r15
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e9 5f       	subi	r30, 0xF9	; 249
     638:	f7 4d       	sbci	r31, 0xD7	; 215
     63a:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     63c:	04 c0       	rjmp	.+8      	; 0x646 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     63e:	11 23       	and	r17, r17
     640:	09 f4       	brne	.+2      	; 0x644 <parse_cmd+0x5c>
     642:	60 c0       	rjmp	.+192    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     644:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     646:	18 81       	ld	r17, Y
     648:	81 2f       	mov	r24, r17
     64a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     64e:	88 23       	and	r24, r24
     650:	b1 f3       	breq	.-20     	; 0x63e <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	84 e3       	ldi	r24, 0x34	; 52
     656:	8e 9d       	mul	r24, r14
     658:	f0 01       	movw	r30, r0
     65a:	8f 9d       	mul	r24, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	e9 5f       	subi	r30, 0xF9	; 249
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	2a c0       	rjmp	.+84     	; 0x6be <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66a:	98 81       	ld	r25, Y
     66c:	91 11       	cpse	r25, r1
     66e:	0c c0       	rjmp	.+24     	; 0x688 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     670:	94 e3       	ldi	r25, 0x34	; 52
     672:	9e 9d       	mul	r25, r14
     674:	f0 01       	movw	r30, r0
     676:	9f 9d       	mul	r25, r15
     678:	f0 0d       	add	r31, r0
     67a:	11 24       	eor	r1, r1
     67c:	e9 5f       	subi	r30, 0xF9	; 249
     67e:	f7 4d       	sbci	r31, 0xD7	; 215
     680:	e8 0f       	add	r30, r24
     682:	f1 1d       	adc	r31, r1
     684:	12 82       	std	Z+2, r1	; 0x02
			return;
     686:	3e c0       	rjmp	.+124    	; 0x704 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     688:	9b 33       	cpi	r25, 0x3B	; 59
     68a:	61 f4       	brne	.+24     	; 0x6a4 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	e9 5f       	subi	r30, 0xF9	; 249
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e9 5f       	subi	r30, 0xF9	; 249
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 32       	cpi	r24, 0x29	; 41
     6c0:	a0 f2       	brcs	.-88     	; 0x66a <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e9 5f       	subi	r30, 0xF9	; 249
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6e6:	21 96       	adiw	r28, 0x01	; 1
     6e8:	24 e3       	ldi	r18, 0x34	; 52
     6ea:	2e 9d       	mul	r18, r14
     6ec:	f0 01       	movw	r30, r0
     6ee:	2f 9d       	mul	r18, r15
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e9 5f       	subi	r30, 0xF9	; 249
     6f6:	f7 4d       	sbci	r31, 0xD7	; 215
     6f8:	e8 0f       	add	r30, r24
     6fa:	f1 1d       	adc	r31, r1
     6fc:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	10 f3       	brcs	.-60     	; 0x6c8 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	c5 50       	subi	r28, 0x05	; 5
     71e:	d1 40       	sbci	r29, 0x01	; 1
     720:	cd bf       	out	0x3d, r28	; 61
     722:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     724:	27 e0       	ldi	r18, 0x07	; 7
     726:	e0 ed       	ldi	r30, 0xD0	; 208
     728:	f8 e8       	ldi	r31, 0x88	; 136
     72a:	de 01       	movw	r26, r28
     72c:	a1 50       	subi	r26, 0x01	; 1
     72e:	bf 4f       	sbci	r27, 0xFF	; 255
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	2a 95       	dec	r18
     736:	e1 f7       	brne	.-8      	; 0x730 <printLine+0x20>

	if (firstpass) {
     738:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <firstpass>
     73c:	21 11       	cpse	r18, r1
     73e:	2a c0       	rjmp	.+84     	; 0x794 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     740:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     744:	22 ff       	sbrs	r18, 2
     746:	03 c0       	rjmp	.+6      	; 0x74e <printLine+0x3e>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <printLine+0x42>
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	3f 93       	push	r19
     758:	2f 93       	push	r18
     75a:	ce 01       	movw	r24, r28
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	9f 4f       	sbci	r25, 0xFF	; 255
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8e 01       	movw	r16, r28
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	1f 93       	push	r17
     76c:	0f 93       	push	r16
     76e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
	checksum_NMEA(strbuf);
     772:	c8 01       	movw	r24, r16
     774:	0e 94 9d 0a 	call	0x153a	; 0x153a <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     778:	f8 01       	movw	r30, r16
     77a:	01 90       	ld	r0, Z+
     77c:	00 20       	and	r0, r0
     77e:	e9 f7       	brne	.-6      	; 0x77a <printLine+0x6a>
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	af 01       	movw	r20, r30
     784:	40 1b       	sub	r20, r16
     786:	51 0b       	sbc	r21, r17
     788:	b8 01       	movw	r22, r16
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
     790:	cd bf       	out	0x3d, r28	; 61
     792:	de bf       	out	0x3e, r29	; 62

}
     794:	cb 5f       	subi	r28, 0xFB	; 251
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	cc 51       	subi	r28, 0x1C	; 28
     7bc:	d1 40       	sbci	r29, 0x01	; 1
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	d8 2e       	mov	r13, r24
     7c4:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	e7 ed       	ldi	r30, 0xD7	; 215
     7ca:	f8 e8       	ldi	r31, 0x88	; 136
     7cc:	9e 01       	movw	r18, r28
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	79 01       	movw	r14, r18
     7d4:	d9 01       	movw	r26, r18
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7de:	8e 01       	movw	r16, r28
     7e0:	05 5f       	subi	r16, 0xF5	; 245
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	1f 93       	push	r17
     7f0:	0f 93       	push	r16
     7f2:	ff 92       	push	r15
     7f4:	ef 92       	push	r14
     7f6:	0c 5e       	subi	r16, 0xEC	; 236
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	1f 93       	push	r17
     7fc:	0f 93       	push	r16
     7fe:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
	printLine(strbuf);
     802:	c8 01       	movw	r24, r16
     804:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

}
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	c4 5e       	subi	r28, 0xE4	; 228
     80e:	de 4f       	sbci	r29, 0xFE	; 254
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(char prompt)
{
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <send_prompt+0x6>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62

	char prompt_str[2];

	prompt_str[0] = prompt;
     830:	89 83       	std	Y+1, r24	; 0x01
	prompt_str[1] = '\0';
     832:	1a 82       	std	Y+2, r1	; 0x02
	send_USART(0, (uint8_t*) prompt_str, 1);
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>

}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     84c:	cf 93       	push	r28


	if (!rebootackd) {
     84e:	c0 91 06 28 	lds	r28, 0x2806	; 0x802806 <rebootackd>
     852:	c1 11       	cpse	r28, r1
     854:	22 c0       	rjmp	.+68     	; 0x89a <rebootACKd+0x4e>
     856:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     858:	80 81       	ld	r24, Z
     85a:	81 32       	cpi	r24, 0x21	; 33
     85c:	91 f4       	brne	.+36     	; 0x882 <rebootACKd+0x36>
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	91 11       	cpse	r25, r1
     862:	0f c0       	rjmp	.+30     	; 0x882 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 75 17 	call	0x2eea	; 0x2eea <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
     874:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
			rebootackd = YES;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <rebootackd>
			return(YES);
     87e:	c1 e0       	ldi	r28, 0x01	; 1
     880:	0d c0       	rjmp	.+26     	; 0x89c <rebootACKd+0x50>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     882:	81 32       	cpi	r24, 0x21	; 33
     884:	31 f4       	brne	.+12     	; 0x892 <rebootACKd+0x46>
     886:	81 81       	ldd	r24, Z+1	; 0x01
     888:	88 23       	and	r24, r24
     88a:	19 f0       	breq	.+6      	; 0x892 <rebootACKd+0x46>
			reboot();
     88c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <reboot>
			return(NO);
     890:	05 c0       	rjmp	.+10     	; 0x89c <rebootACKd+0x50>
		} else {
			send_prompt('!');
     892:	81 e2       	ldi	r24, 0x21	; 33
     894:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
			return(NO);
     898:	01 c0       	rjmp	.+2      	; 0x89c <rebootACKd+0x50>
		}
	}

	return(YES);
     89a:	c1 e0       	ldi	r28, 0x01	; 1

}
     89c:	8c 2f       	mov	r24, r28
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	cf 5f       	subi	r28, 0xFF	; 255
     8ac:	d1 09       	sbc	r29, r1
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 bb 02 	call	0x576	; 0x576 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 26 04 	call	0x84c	; 0x84c <rebootACKd>
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <commands+0x26>
     8c6:	5d c0       	rjmp	.+186    	; 0x982 <commands+0xe0>
		return;
	}

	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {		// <CR> or ! alone are not errors
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <commands+0x30>
     8ce:	81 32       	cpi	r24, 0x21	; 33
     8d0:	31 f4       	brne	.+12     	; 0x8de <commands+0x3c>
		firstpass = NO;
     8d2:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <firstpass>
		send_prompt('>');
     8d6:	8e e3       	ldi	r24, 0x3E	; 62
     8d8:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
		return;
     8dc:	52 c0       	rjmp	.+164    	; 0x982 <commands+0xe0>
	}

	echo_cmd(cmdline);
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <echo_cmd>

	parse_cmd(cmdline, cstack);
     8e6:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     8f2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     8f6:	24 e3       	ldi	r18, 0x34	; 52
     8f8:	82 9f       	mul	r24, r18
     8fa:	f0 01       	movw	r30, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	e9 5f       	subi	r30, 0xF9	; 249
     900:	f7 4d       	sbci	r31, 0xD7	; 215
     902:	e0 81       	ld	r30, Z
     904:	4e 2f       	mov	r20, r30
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	fa 01       	movw	r30, r20
     90a:	e2 55       	subi	r30, 0x52	; 82
     90c:	f1 09       	sbc	r31, r1
     90e:	e3 32       	cpi	r30, 0x23	; 35
     910:	f1 05       	cpc	r31, r1
     912:	20 f5       	brcc	.+72     	; 0x95c <commands+0xba>
     914:	e0 5b       	subi	r30, 0xB0	; 176
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     91c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <close_PNEU>
			break;
     920:	23 c0       	rjmp	.+70     	; 0x968 <commands+0xc6>

		case 'o':				// open
			open_PNEU(cstack);
     922:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <open_PNEU>
			break;
     926:	20 c0       	rjmp	.+64     	; 0x968 <commands+0xc6>

		case 'm':				// move
			move_MOTOR(cstack);
     928:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <move_MOTOR>
			break;
     92c:	1d c0       	rjmp	.+58     	; 0x968 <commands+0xc6>

		case 'r':				// report
			report(cstack);
     92e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <report>
			break;
     932:	1a c0       	rjmp	.+52     	; 0x968 <commands+0xc6>

		case 's':				// set
			set(cstack);
     934:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set>
			break;
     938:	17 c0       	rjmp	.+46     	; 0x968 <commands+0xc6>

		case 't':
			testroutine();
     93a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <testroutine>
			break;
     93e:	14 c0       	rjmp	.+40     	; 0x968 <commands+0xc6>

		case 'R':				// Reboot
			send_prompt('>');	// Aidan request
     940:	8e e3       	ldi	r24, 0x3E	; 62
     942:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     946:	8a e6       	ldi	r24, 0x6A	; 106
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	20 40       	sbci	r18, 0x00	; 0
     952:	e1 f7       	brne	.-8      	; 0x94c <commands+0xaa>
     954:	00 c0       	rjmp	.+0      	; 0x956 <commands+0xb4>
			_delay_ms(100);		// Avoids finishing the command loop before reboot
			reboot();
     956:	0e 94 aa 1b 	call	0x3754	; 0x3754 <reboot>
			return;
     95a:	13 c0       	rjmp	.+38     	; 0x982 <commands+0xe0>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     95c:	61 ee       	ldi	r22, 0xE1	; 225
     95e:	78 e8       	ldi	r23, 0x88	; 136
     960:	89 ec       	ldi	r24, 0xC9	; 201
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     968:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
     978:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	send_prompt('>');
     97c:	8e e3       	ldi	r24, 0x3E	; 62
     97e:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>

}
     982:	c1 50       	subi	r28, 0x01	; 1
     984:	df 4f       	sbci	r29, 0xFF	; 255
     986:	cd bf       	out	0x3d, r28	; 61
     988:	de bf       	out	0x3e, r29	; 62
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	a0 97       	sbiw	r28, 0x20	; 32
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9a2:	40 e2       	ldi	r20, 0x20	; 32
     9a4:	ef ee       	ldi	r30, 0xEF	; 239
     9a6:	f8 e8       	ldi	r31, 0x88	; 136
     9a8:	9e 01       	movw	r18, r28
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	d9 01       	movw	r26, r18
     9b0:	01 90       	ld	r0, Z+
     9b2:	0d 92       	st	X+, r0
     9b4:	4a 95       	dec	r20
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     9b8:	fb 01       	movw	r30, r22
     9ba:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     9bc:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     9be:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     9c0:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     9c2:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     9c4:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     9c6:	1f 92       	push	r1
     9c8:	bf 93       	push	r27
     9ca:	1f 92       	push	r1
     9cc:	af 93       	push	r26
     9ce:	1f 92       	push	r1
     9d0:	1f 93       	push	r17
     9d2:	1f 92       	push	r1
     9d4:	0f 93       	push	r16
     9d6:	1f 92       	push	r1
     9d8:	5f 93       	push	r21
     9da:	1f 92       	push	r1
     9dc:	4f 93       	push	r20
     9de:	3f 93       	push	r19
     9e0:	2f 93       	push	r18
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>

}
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	a0 96       	adiw	r28, 0x20	; 32
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	08 95       	ret

000009fe <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9fe:	dc 01       	movw	r26, r24
     a00:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a02:	81 89       	ldd	r24, Z+17	; 0x11
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	c0 97       	sbiw	r24, 0x30	; 48
     a08:	82 95       	swap	r24
     a0a:	92 95       	swap	r25
     a0c:	90 7f       	andi	r25, 0xF0	; 240
     a0e:	98 27       	eor	r25, r24
     a10:	80 7f       	andi	r24, 0xF0	; 240
     a12:	98 27       	eor	r25, r24
     a14:	92 89       	ldd	r25, Z+18	; 0x12
     a16:	90 53       	subi	r25, 0x30	; 48
     a18:	89 2b       	or	r24, r25
     a1a:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a1c:	86 85       	ldd	r24, Z+14	; 0x0e
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	c0 97       	sbiw	r24, 0x30	; 48
     a22:	82 95       	swap	r24
     a24:	92 95       	swap	r25
     a26:	90 7f       	andi	r25, 0xF0	; 240
     a28:	98 27       	eor	r25, r24
     a2a:	80 7f       	andi	r24, 0xF0	; 240
     a2c:	98 27       	eor	r25, r24
     a2e:	97 85       	ldd	r25, Z+15	; 0x0f
     a30:	90 53       	subi	r25, 0x30	; 48
     a32:	89 2b       	or	r24, r25
     a34:	11 96       	adiw	r26, 0x01	; 1
     a36:	8c 93       	st	X, r24
     a38:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a3a:	83 85       	ldd	r24, Z+11	; 0x0b
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	c0 97       	sbiw	r24, 0x30	; 48
     a40:	82 95       	swap	r24
     a42:	92 95       	swap	r25
     a44:	90 7f       	andi	r25, 0xF0	; 240
     a46:	98 27       	eor	r25, r24
     a48:	80 7f       	andi	r24, 0xF0	; 240
     a4a:	98 27       	eor	r25, r24
     a4c:	94 85       	ldd	r25, Z+12	; 0x0c
     a4e:	90 53       	subi	r25, 0x30	; 48
     a50:	89 2b       	or	r24, r25
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	8c 93       	st	X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	8c 93       	st	X, r24
     a5e:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a60:	80 85       	ldd	r24, Z+8	; 0x08
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	c0 97       	sbiw	r24, 0x30	; 48
     a66:	82 95       	swap	r24
     a68:	92 95       	swap	r25
     a6a:	90 7f       	andi	r25, 0xF0	; 240
     a6c:	98 27       	eor	r25, r24
     a6e:	80 7f       	andi	r24, 0xF0	; 240
     a70:	98 27       	eor	r25, r24
     a72:	91 85       	ldd	r25, Z+9	; 0x09
     a74:	90 53       	subi	r25, 0x30	; 48
     a76:	89 2b       	or	r24, r25
     a78:	14 96       	adiw	r26, 0x04	; 4
     a7a:	8c 93       	st	X, r24
     a7c:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a7e:	25 81       	ldd	r18, Z+5	; 0x05
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	20 53       	subi	r18, 0x30	; 48
     a84:	31 09       	sbc	r19, r1
     a86:	22 95       	swap	r18
     a88:	32 95       	swap	r19
     a8a:	30 7f       	andi	r19, 0xF0	; 240
     a8c:	32 27       	eor	r19, r18
     a8e:	20 7f       	andi	r18, 0xF0	; 240
     a90:	32 27       	eor	r19, r18
     a92:	86 81       	ldd	r24, Z+6	; 0x06
     a94:	80 53       	subi	r24, 0x30	; 48
     a96:	28 2b       	or	r18, r24
     a98:	15 96       	adiw	r26, 0x05	; 5
     a9a:	2c 93       	st	X, r18
     a9c:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a9e:	22 81       	ldd	r18, Z+2	; 0x02
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	20 53       	subi	r18, 0x30	; 48
     aa4:	31 09       	sbc	r19, r1
     aa6:	22 95       	swap	r18
     aa8:	32 95       	swap	r19
     aaa:	30 7f       	andi	r19, 0xF0	; 240
     aac:	32 27       	eor	r19, r18
     aae:	20 7f       	andi	r18, 0xF0	; 240
     ab0:	32 27       	eor	r19, r18
     ab2:	83 81       	ldd	r24, Z+3	; 0x03
     ab4:	80 53       	subi	r24, 0x30	; 48
     ab6:	28 2b       	or	r18, r24
     ab8:	16 96       	adiw	r26, 0x06	; 6
     aba:	2c 93       	st	X, r18
     abc:	08 95       	ret

00000abe <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     ad0:	c8 2f       	mov	r28, r24
     ad2:	83 36       	cpi	r24, 0x63	; 99
     ad4:	19 f4       	brne	.+6      	; 0xadc <read_DS3231+0x1e>
		stop_TWI();
     ad6:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     ada:	26 c0       	rjmp	.+76     	; 0xb28 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     ae2:	c8 2f       	mov	r28, r24
     ae4:	83 36       	cpi	r24, 0x63	; 99
     ae6:	19 f4       	brne	.+6      	; 0xaee <read_DS3231+0x30>
		stop_TWI();
     ae8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     aec:	1d c0       	rjmp	.+58     	; 0xb28 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	88 e6       	ldi	r24, 0x68	; 104
     af2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     af6:	c8 2f       	mov	r28, r24
     af8:	83 36       	cpi	r24, 0x63	; 99
     afa:	61 f4       	brne	.+24     	; 0xb14 <read_DS3231+0x56>
		stop_TWI();
     afc:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     b00:	13 c0       	rjmp	.+38     	; 0xb28 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b02:	87 01       	movw	r16, r14
     b04:	0c 0f       	add	r16, r28
     b06:	11 1d       	adc	r17, r1
     b08:	0e 94 d7 18 	call	0x31ae	; 0x31ae <read_TWI>
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b10:	cf 5f       	subi	r28, 0xFF	; 255
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <read_DS3231+0x58>
     b14:	c0 e0       	ldi	r28, 0x00	; 0
     b16:	c6 30       	cpi	r28, 0x06	; 6
     b18:	a0 f3       	brcs	.-24     	; 0xb02 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b1a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
     b1e:	f7 01       	movw	r30, r14
     b20:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b22:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	return(NOERROR);
     b26:	c0 e0       	ldi	r28, 0x00	; 0

}
     b28:	8c 2f       	mov	r24, r28
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	27 97       	sbiw	r28, 0x07	; 7
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     b4c:	be 01       	movw	r22, r28
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	88 e6       	ldi	r24, 0x68	; 104
     b54:	0e 94 5f 05 	call	0xabe	; 0xabe <read_DS3231>
     b58:	18 2f       	mov	r17, r24
     b5a:	83 36       	cpi	r24, 0x63	; 99
     b5c:	79 f4       	brne	.+30     	; 0xb7c <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     b5e:	6f e0       	ldi	r22, 0x0F	; 15
     b60:	79 e8       	ldi	r23, 0x89	; 137
     b62:	85 e6       	ldi	r24, 0x65	; 101
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		strcpy(isotime, "DateTime?");
     b6a:	8a e0       	ldi	r24, 0x0A	; 10
     b6c:	ef e1       	ldi	r30, 0x1F	; 31
     b6e:	f9 e8       	ldi	r31, 0x89	; 137
     b70:	d7 01       	movw	r26, r14
     b72:	01 90       	ld	r0, Z+
     b74:	0d 92       	st	X+, r0
     b76:	8a 95       	dec	r24
     b78:	e1 f7       	brne	.-8      	; 0xb72 <get_time+0x3c>
		return(ERROR);
     b7a:	07 c0       	rjmp	.+14     	; 0xb8a <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     b7c:	be 01       	movw	r22, r28
     b7e:	6f 5f       	subi	r22, 0xFF	; 255
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	c7 01       	movw	r24, r14
     b84:	0e 94 c8 04 	call	0x990	; 0x990 <convert_ds2iso>
	return(NOERROR);
     b88:	10 e0       	ldi	r17, 0x00	; 0

}
     b8a:	81 2f       	mov	r24, r17
     b8c:	27 96       	adiw	r28, 0x07	; 7
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     bb2:	c8 2f       	mov	r28, r24
     bb4:	83 36       	cpi	r24, 0x63	; 99
     bb6:	19 f4       	brne	.+6      	; 0xbbe <write_DS3231+0x20>
		stop_TWI();
     bb8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     bbc:	20 c0       	rjmp	.+64     	; 0xbfe <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     bc4:	c8 2f       	mov	r28, r24
     bc6:	83 36       	cpi	r24, 0x63	; 99
     bc8:	a1 f4       	brne	.+40     	; 0xbf2 <write_DS3231+0x54>
		stop_TWI();
     bca:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     bce:	17 c0       	rjmp	.+46     	; 0xbfe <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     bd0:	78 01       	movw	r14, r16
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	e8 1a       	sub	r14, r24
     bd6:	f8 0a       	sbc	r15, r24
     bd8:	f8 01       	movw	r30, r16
     bda:	80 81       	ld	r24, Z
     bdc:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     be0:	c8 2f       	mov	r28, r24
     be2:	83 36       	cpi	r24, 0x63	; 99
     be4:	19 f4       	brne	.+6      	; 0xbec <write_DS3231+0x4e>
			stop_TWI();
     be6:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
			return(ERROR);
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     bec:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     bee:	87 01       	movw	r16, r14
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <write_DS3231+0x56>
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     bf4:	d7 30       	cpi	r29, 0x07	; 7
     bf6:	60 f3       	brcs	.-40     	; 0xbd0 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     bf8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	return(NOERROR);
     bfc:	c0 e0       	ldi	r28, 0x00	; 0

}
     bfe:	8c 2f       	mov	r24, r28
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	27 97       	sbiw	r28, 0x07	; 7
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c1e:	bc 01       	movw	r22, r24
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	0e 94 ff 04 	call	0x9fe	; 0x9fe <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	88 e6       	ldi	r24, 0x68	; 104
     c30:	0e 94 cf 05 	call	0xb9e	; 0xb9e <write_DS3231>
     c34:	18 2f       	mov	r17, r24
     c36:	83 36       	cpi	r24, 0x63	; 99
     c38:	39 f4       	brne	.+14     	; 0xc48 <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c3a:	69 e2       	ldi	r22, 0x29	; 41
     c3c:	79 e8       	ldi	r23, 0x89	; 137
     c3e:	86 e6       	ldi	r24, 0x66	; 102
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		return(ERROR);
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <put_time+0x3c>
	}
	return(NOERROR);
     c48:	10 e0       	ldi	r17, 0x00	; 0

}
     c4a:	81 2f       	mov	r24, r17
     c4c:	27 96       	adiw	r28, 0x07	; 7
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c5a:	45 e1       	ldi	r20, 0x15	; 21
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	6b e0       	ldi	r22, 0x0B	; 11
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0e 94 22 24 	call	0x4844	; 0x4844 <eeprom_read_block>
     c66:	08 95       	ret

00000c68 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c68:	4b e0       	ldi	r20, 0x0B	; 11
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 22 24 	call	0x4844	; 0x4844 <eeprom_read_block>
     c74:	08 95       	ret

00000c76 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	65 97       	sbiw	r28, 0x15	; 21
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c8c:	45 e1       	ldi	r20, 0x15	; 21
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	6b e0       	ldi	r22, 0x0B	; 11
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_update_block>

}
     c9c:	65 96       	adiw	r28, 0x15	; 21
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <update_VERSION>:

void update_VERSION(void)
{
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	2b 97       	sbiw	r28, 0x0b	; 11
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cb6:	8b e0       	ldi	r24, 0x0B	; 11
     cb8:	e9 e3       	ldi	r30, 0x39	; 57
     cba:	f9 e8       	ldi	r31, 0x89	; 137
     cbc:	de 01       	movw	r26, r28
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	01 90       	ld	r0, Z+
     cc2:	0d 92       	st	X+, r0
     cc4:	8a 95       	dec	r24
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     cc8:	4b e0       	ldi	r20, 0x0B	; 11
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_update_block>

}
     cd8:	2b 96       	adiw	r28, 0x0b	; 11
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     ce4:	0e 94 3b 06 	call	0xc76	; 0xc76 <update_BOOTTIME>
	update_VERSION();
     ce8:	0e 94 54 06 	call	0xca8	; 0xca8 <update_VERSION>
     cec:	08 95       	ret

00000cee <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	c8 50       	subi	r28, 0x08	; 8
     cfc:	d1 40       	sbci	r29, 0x01	; 1
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d02:	9e 01       	movw	r18, r28
     d04:	21 50       	subi	r18, 0x01	; 1
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	4a e0       	ldi	r20, 0x0A	; 10
     d0a:	e4 e4       	ldi	r30, 0x44	; 68
     d0c:	f9 e8       	ldi	r31, 0x89	; 137
     d0e:	d9 01       	movw	r26, r18
     d10:	01 90       	ld	r0, Z+
     d12:	0d 92       	st	X+, r0
     d14:	4a 95       	dec	r20
     d16:	e1 f7       	brne	.-8      	; 0xd10 <printError+0x22>

	sprintf(strbuf, errorFormat, errorNumber, errorString);
     d18:	7f 93       	push	r23
     d1a:	6f 93       	push	r22
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	3f 93       	push	r19
     d22:	2f 93       	push	r18
     d24:	8e 01       	movw	r16, r28
     d26:	0f 5f       	subi	r16, 0xFF	; 255
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	1f 93       	push	r17
     d2c:	0f 93       	push	r16
     d2e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
	printLine(strbuf);
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

}
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	c8 5f       	subi	r28, 0xF8	; 248
     d3e:	de 4f       	sbci	r29, 0xFE	; 254
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	08 95       	ret

00000d4e <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	d8 2f       	mov	r29, r24
     d60:	d6 2e       	mov	r13, r22
     d62:	e7 2e       	mov	r14, r23
     d64:	8a 01       	movw	r16, r20
     d66:	f2 2e       	mov	r15, r18

	uint8_t i, memhigh, memlow;

	strcpy((char*) val, "SavedTime?");
     d68:	8b e0       	ldi	r24, 0x0B	; 11
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f9 e8       	ldi	r31, 0x89	; 137
     d6e:	da 01       	movw	r26, r20
     d70:	01 90       	ld	r0, Z+
     d72:	0d 92       	st	X+, r0
     d74:	8a 95       	dec	r24
     d76:	e1 f7       	brne	.-8      	; 0xd70 <read_FRAM+0x22>

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	8d 2f       	mov	r24, r29
     d7c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     d80:	c8 2f       	mov	r28, r24
     d82:	83 36       	cpi	r24, 0x63	; 99
     d84:	19 f4       	brne	.+6      	; 0xd8c <read_FRAM+0x3e>
		stop_TWI();
     d86:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
     d8a:	31 c0       	rjmp	.+98     	; 0xdee <read_FRAM+0xa0>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     d8c:	8e 2d       	mov	r24, r14
     d8e:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     d92:	c8 2f       	mov	r28, r24
     d94:	83 36       	cpi	r24, 0x63	; 99
     d96:	59 f1       	breq	.+86     	; 0xdee <read_FRAM+0xa0>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     d98:	8d 2d       	mov	r24, r13
     d9a:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     d9e:	c8 2f       	mov	r28, r24
     da0:	83 36       	cpi	r24, 0x63	; 99
     da2:	29 f1       	breq	.+74     	; 0xdee <read_FRAM+0xa0>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	8d 2f       	mov	r24, r29
     da8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     dac:	c8 2f       	mov	r28, r24
     dae:	83 36       	cpi	r24, 0x63	; 99
     db0:	f1 f0       	breq	.+60     	; 0xdee <read_FRAM+0xa0>
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <read_FRAM+0x78>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     db6:	68 01       	movw	r12, r16
     db8:	cc 0e       	add	r12, r28
     dba:	d1 1c       	adc	r13, r1
     dbc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <read_TWI>
     dc0:	f6 01       	movw	r30, r12
     dc2:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     dc4:	cf 5f       	subi	r28, 0xFF	; 255
     dc6:	2c 2f       	mov	r18, r28
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	8f 2d       	mov	r24, r15
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	84 f3       	brlt	.-32     	; 0xdb6 <read_FRAM+0x68>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     dd6:	8f 2d       	mov	r24, r15
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	e8 01       	movw	r28, r16
     dde:	c8 0f       	add	r28, r24
     de0:	d9 1f       	adc	r29, r25
     de2:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
     de6:	88 83       	st	Y, r24

	stop_TWI();
     de8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	return(NOERROR);
     dec:	c0 e0       	ldi	r28, 0x00	; 0

}
     dee:	8c 2f       	mov	r24, r28
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	08 95       	ret

00000e02 <get_SETTIME>:
#include "errors.h"
#include "twi.h"
#include "fram.h"

uint8_t get_SETTIME(char *lastsettime)
{
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	2a 97       	sbiw	r28, 0x0a	; 10
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e18:	8a e0       	ldi	r24, 0x0A	; 10
     e1a:	e9 e5       	ldi	r30, 0x59	; 89
     e1c:	f9 e8       	ldi	r31, 0x89	; 137
     e1e:	de 01       	movw	r26, r28
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	01 90       	ld	r0, Z+
     e24:	0d 92       	st	X+, r0
     e26:	8a 95       	dec	r24
     e28:	e1 f7       	brne	.-8      	; 0xe22 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e2a:	24 e1       	ldi	r18, 0x14	; 20
     e2c:	a7 01       	movw	r20, r14
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e5       	ldi	r24, 0x50	; 80
     e34:	0e 94 a7 06 	call	0xd4e	; 0xd4e <read_FRAM>
     e38:	18 2f       	mov	r17, r24
     e3a:	83 36       	cpi	r24, 0x63	; 99
     e3c:	39 f4       	brne	.+14     	; 0xe4c <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	c7 01       	movw	r24, r14
     e46:	0e 94 3f 23 	call	0x467e	; 0x467e <strcpy>
		return(ERROR);
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e4c:	10 e0       	ldi	r17, 0x00	; 0
}
     e4e:	81 2f       	mov	r24, r17
     e50:	2a 96       	adiw	r28, 0x0a	; 10
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	08 95       	ret

00000e62 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	f6 2e       	mov	r15, r22
     e70:	17 2f       	mov	r17, r23
     e72:	ea 01       	movw	r28, r20
     e74:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
     e7c:	83 36       	cpi	r24, 0x63	; 99
     e7e:	e1 f0       	breq	.+56     	; 0xeb8 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     e86:	83 36       	cpi	r24, 0x63	; 99
     e88:	b9 f0       	breq	.+46     	; 0xeb8 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     e8a:	8f 2d       	mov	r24, r15
     e8c:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	91 f0       	breq	.+36     	; 0xeb8 <write_FRAM+0x56>
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	0b c0       	rjmp	.+22     	; 0xeae <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     e98:	7e 01       	movw	r14, r28
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	e8 1a       	sub	r14, r24
     e9e:	f8 0a       	sbc	r15, r24
     ea0:	88 81       	ld	r24, Y
     ea2:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
     ea6:	83 36       	cpi	r24, 0x63	; 99
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     eaa:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     eac:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     eae:	10 17       	cp	r17, r16
     eb0:	98 f3       	brcs	.-26     	; 0xe98 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     eb2:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	return(NOERROR);
     eb6:	80 e0       	ldi	r24, 0x00	; 0

}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	08 95       	ret

00000ec6 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     ec6:	8f 92       	push	r8
     ec8:	9f 92       	push	r9
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	00 d0       	rcall	.+0      	; 0xee0 <get_humidity+0x1a>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <get_humidity+0x1c>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	59 f0       	breq	.+22     	; 0xf00 <get_humidity+0x3a>
     eea:	18 f0       	brcs	.+6      	; 0xef2 <get_humidity+0x2c>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	79 f0       	breq	.+30     	; 0xf0e <get_humidity+0x48>
     ef0:	15 c0       	rjmp	.+42     	; 0xf1c <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
     ef8:	6b 01       	movw	r12, r22
     efa:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     efc:	40 e4       	ldi	r20, 0x40	; 64
			break;
     efe:	17 c0       	rjmp	.+46     	; 0xf2e <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
     f06:	6b 01       	movw	r12, r22
     f08:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f0a:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
     f14:	6b 01       	movw	r12, r22
     f16:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f18:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f1c:	0f 2e       	mov	r0, r31
     f1e:	c1 2c       	mov	r12, r1
     f20:	d1 2c       	mov	r13, r1
     f22:	f0 ea       	ldi	r31, 0xA0	; 160
     f24:	ef 2e       	mov	r14, r31
     f26:	f1 e4       	ldi	r31, 0x41	; 65
     f28:	ff 2e       	mov	r15, r31
     f2a:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f2c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f2e:	8e 01       	movw	r16, r28
     f30:	0f 5f       	subi	r16, 0xFF	; 255
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	20 e8       	ldi	r18, 0x80	; 128
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	88 e4       	ldi	r24, 0x48	; 72
     f3a:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     f3e:	83 36       	cpi	r24, 0x63	; 99
     f40:	79 f1       	breq	.+94     	; 0xfa0 <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 ea       	ldi	r20, 0xA0	; 160
     f48:	50 e4       	ldi	r21, 0x40	; 64
     f4a:	69 81       	ldd	r22, Y+1	; 0x01
     f4c:	7a 81       	ldd	r23, Y+2	; 0x02
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__divsf3>
     f56:	2a e0       	ldi	r18, 0x0A	; 10
     f58:	37 ed       	ldi	r19, 0xD7	; 215
     f5a:	43 e2       	ldi	r20, 0x23	; 35
     f5c:	5e e3       	ldi	r21, 0x3E	; 62
     f5e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__subsf3>
     f62:	2f e5       	ldi	r18, 0x5F	; 95
     f64:	39 e2       	ldi	r19, 0x29	; 41
     f66:	4b ec       	ldi	r20, 0xCB	; 203
     f68:	5b e3       	ldi	r21, 0x3B	; 59
     f6a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__divsf3>
     f6e:	4b 01       	movw	r8, r22
     f70:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     f72:	29 ec       	ldi	r18, 0xC9	; 201
     f74:	3e e8       	ldi	r19, 0x8E	; 142
     f76:	4d e0       	ldi	r20, 0x0D	; 13
     f78:	5b e3       	ldi	r21, 0x3B	; 59
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	62 e2       	ldi	r22, 0x22	; 34
     f88:	7d ef       	ldi	r23, 0xFD	; 253
     f8a:	86 e8       	ldi	r24, 0x86	; 134
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
     f8e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__subsf3>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	c5 01       	movw	r24, r10
     f98:	b4 01       	movw	r22, r8
     f9a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__divsf3>
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e8       	ldi	r23, 0x80	; 128
     fa4:	86 e2       	ldi	r24, 0x26	; 38
     fa6:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     fa8:	24 96       	adiw	r28, 0x04	; 4
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	08 95       	ret

00000fc8 <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     fc8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     fcc:	8b e0       	ldi	r24, 0x0B	; 11
     fce:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     fd2:	0e 94 df 1b 	call	0x37be	; 0x37be <init_XPORT>
	init_SPECID();
     fd6:	0e 94 2a 18 	call	0x3054	; 0x3054 <init_SPECID>
	init_LED();
     fda:	0e 94 99 08 	call	0x1132	; 0x1132 <init_LED>
	init_BEEPER();
     fde:	0e 94 b4 02 	call	0x568	; 0x568 <init_BEEPER>
	init_TWI();
     fe2:	0e 94 cc 18 	call	0x3198	; 0x3198 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 75 17 	call	0x2eea	; 0x2eea <init_RTC>
	init_USART();
     fee:	0e 94 5e 19 	call	0x32bc	; 0x32bc <init_USART>
     ff2:	08 95       	ret

00000ff4 <initialize1>:

}

void initialize1(void)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	2b 97       	sbiw	r28, 0x0b	; 11
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    1002:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <rebootackd>
	init_MOTORS();
    1006:	0e 94 41 17 	call	0x2e82	; 0x2e82 <init_MOTORS>
	init_MMA8451();
    100a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <init_MMA8451>
	init_PNEU();
    100e:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_PNEU>
	init_OLED(0);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <init_OLED>
	init_OLED(1);
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <init_OLED>
	init_EEPROM();	// Needs TWI
    101e:	0e 94 72 06 	call	0xce4	; 0xce4 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1022:	80 ee       	ldi	r24, 0xE0	; 224
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
    102a:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
	get_VERSION(versionstr);
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 34 06 	call	0xc68	; 0xc68 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	63 e6       	ldi	r22, 0x63	; 99
    103a:	79 e8       	ldi	r23, 0x89	; 137
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
    1042:	42 e0       	ldi	r20, 0x02	; 2
    1044:	be 01       	movw	r22, r28
    1046:	6f 5f       	subi	r22, 0xFF	; 255
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>

}
    1050:	2b 96       	adiw	r28, 0x0b	; 11
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <read_ionpump+0x12>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <read_ionpump+0x14>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	21 f0       	breq	.+8      	; 0x1080 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	c1 f5       	brne	.+112    	; 0x10ec <read_ionpump+0x90>
		pins = AIN23;
    107c:	40 e3       	ldi	r20, 0x30	; 48
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1080:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1082:	8e 01       	movw	r16, r28
    1084:	0f 5f       	subi	r16, 0xFF	; 255
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	20 e8       	ldi	r18, 0x80	; 128
    108a:	62 e0       	ldi	r22, 0x02	; 2
    108c:	89 e4       	ldi	r24, 0x49	; 73
    108e:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
    1092:	83 36       	cpi	r24, 0x63	; 99
    1094:	81 f1       	breq	.+96     	; 0x10f6 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    1096:	c9 80       	ldd	r12, Y+1	; 0x01
    1098:	da 80       	ldd	r13, Y+2	; 0x02
    109a:	eb 80       	ldd	r14, Y+3	; 0x03
    109c:	fc 80       	ldd	r15, Y+4	; 0x04
    109e:	2d ec       	ldi	r18, 0xCD	; 205
    10a0:	3c ec       	ldi	r19, 0xCC	; 204
    10a2:	4c ec       	ldi	r20, 0xCC	; 204
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__cmpsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	3c f1       	brlt	.+78     	; 0x1100 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e4       	ldi	r21, 0x40	; 64
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__gesf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	14 f1       	brlt	.+68     	; 0x110a <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10c6:	29 e7       	ldi	r18, 0x79	; 121
    10c8:	39 ee       	ldi	r19, 0xE9	; 233
    10ca:	42 e0       	ldi	r20, 0x02	; 2
    10cc:	50 e4       	ldi	r21, 0x40	; 64
    10ce:	c7 01       	movw	r24, r14
    10d0:	b6 01       	movw	r22, r12
    10d2:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    10d6:	2e e6       	ldi	r18, 0x6E	; 110
    10d8:	33 ea       	ldi	r19, 0xA3	; 163
    10da:	4b ed       	ldi	r20, 0xDB	; 219
    10dc:	50 e4       	ldi	r21, 0x40	; 64
    10de:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__subsf3>
	return(vacuum);
    10e2:	56 2f       	mov	r21, r22
    10e4:	47 2f       	mov	r20, r23
    10e6:	38 2f       	mov	r19, r24
    10e8:	29 2f       	mov	r18, r25
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	36 e2       	ldi	r19, 0x26	; 38
    10f2:	24 ec       	ldi	r18, 0xC4	; 196
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	40 e8       	ldi	r20, 0x80	; 128
    10fa:	36 e2       	ldi	r19, 0x26	; 38
    10fc:	24 ec       	ldi	r18, 0xC4	; 196
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	36 e2       	ldi	r19, 0x26	; 38
    1106:	24 ec       	ldi	r18, 0xC4	; 196
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	36 e2       	ldi	r19, 0x26	; 38
    1110:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1112:	65 2f       	mov	r22, r21
    1114:	74 2f       	mov	r23, r20
    1116:	83 2f       	mov	r24, r19
    1118:	92 2f       	mov	r25, r18
    111a:	24 96       	adiw	r28, 0x04	; 4
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	08 95       	ret

00001132 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    1132:	e0 ea       	ldi	r30, 0xA0	; 160
    1134:	f4 e0       	ldi	r31, 0x04	; 4
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    113a:	81 83       	std	Z+1, r24	; 0x01
    113c:	08 95       	ret

0000113e <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to YES in commands.c
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <firstpass>
	initialize0();
    1144:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <initialize0>
	sei();
    1148:	78 94       	sei
	initialize1();
    114a:	0e 94 fa 07 	call	0xff4	; 0xff4 <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    114e:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x103>
    1152:	88 23       	and	r24, r24
    1154:	e1 f3       	breq	.-8      	; 0x114e <main+0x10>
			recv0_buf.done = NO;
    1156:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x103>
			commands();
    115a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <commands>
    115e:	f7 cf       	rjmp	.-18     	; 0x114e <main+0x10>

00001160 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	c8 2f       	mov	r28, r24
    1166:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    116e:	83 36       	cpi	r24, 0x63	; 99
    1170:	51 f4       	brne	.+20     	; 0x1186 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1172:	64 e7       	ldi	r22, 0x74	; 116
    1174:	79 e8       	ldi	r23, 0x89	; 137
    1176:	82 e9       	ldi	r24, 0x92	; 146
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		stop_TWI();
    117e:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(0xFF);
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	0d c0       	rjmp	.+26     	; 0x11a0 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    1186:	8d 2f       	mov	r24, r29
    1188:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
	start_TWI(addr, TWIREAD);
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	8c 2f       	mov	r24, r28
    1190:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
	value = readlast_TWI();
    1194:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
    1198:	c8 2f       	mov	r28, r24
	stop_TWI();
    119a:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
	return(value);
    119e:	8c 2f       	mov	r24, r28

}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	d6 2f       	mov	r29, r22
    11ae:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    11b6:	c8 2f       	mov	r28, r24
    11b8:	83 36       	cpi	r24, 0x63	; 99
    11ba:	49 f4       	brne	.+18     	; 0x11ce <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    11bc:	68 e8       	ldi	r22, 0x88	; 136
    11be:	79 e8       	ldi	r23, 0x89	; 137
    11c0:	82 e9       	ldi	r24, 0x92	; 146
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		stop_TWI();
    11c8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
    11cc:	15 c0       	rjmp	.+42     	; 0x11f8 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    11ce:	8d 2f       	mov	r24, r29
    11d0:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
    11d4:	88 23       	and	r24, r24
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <write_MCP23008+0x3a>
		stop_TWI();
    11d8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
    11dc:	c3 e6       	ldi	r28, 0x63	; 99
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    11e0:	81 2f       	mov	r24, r17
    11e2:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
    11e6:	88 23       	and	r24, r24
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <write_MCP23008+0x4c>
		stop_TWI();
    11ea:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
    11ee:	c3 e6       	ldi	r28, 0x63	; 99
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <write_MCP23008+0x52>
	}
	stop_TWI();
    11f2:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
	return(NOERROR);
    11f6:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    11f8:	8c 2f       	mov	r24, r28
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	08 95       	ret

00001202 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1202:	8f 92       	push	r8
    1204:	9f 92       	push	r9
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	88 e1       	ldi	r24, 0x18	; 24
    121a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    121e:	83 36       	cpi	r24, 0x63	; 99
    1220:	51 f4       	brne	.+20     	; 0x1236 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e8       	ldi	r21, 0x80	; 128
    1226:	66 e2       	ldi	r22, 0x26	; 38
    1228:	74 ec       	ldi	r23, 0xC4	; 196
    122a:	f8 01       	movw	r30, r16
    122c:	40 83       	st	Z, r20
    122e:	51 83       	std	Z+1, r21	; 0x01
    1230:	62 83       	std	Z+2, r22	; 0x02
    1232:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1234:	43 c0       	rjmp	.+134    	; 0x12bc <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1236:	85 e0       	ldi	r24, 0x05	; 5
    1238:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	88 e1       	ldi	r24, 0x18	; 24
    1240:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
	highbyte = read_TWI();
    1244:	0e 94 d7 18 	call	0x31ae	; 0x31ae <read_TWI>
    1248:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    124a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
    124e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1250:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1254:	fc 2f       	mov	r31, r28
    1256:	f0 71       	andi	r31, 0x10	; 16
    1258:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    125a:	6c 2f       	mov	r22, r28
    125c:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 cf 1c 	call	0x399e	; 0x399e <__floatunsisf>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    1274:	4b 01       	movw	r8, r22
    1276:	5c 01       	movw	r10, r24
    1278:	6d 2f       	mov	r22, r29
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 cf 1c 	call	0x399e	; 0x399e <__floatunsisf>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	5d e3       	ldi	r21, 0x3D	; 61
    128c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	c5 01       	movw	r24, r10
    1296:	b4 01       	movw	r22, r8
    1298:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__addsf3>
	if (sign) {
    129c:	ff 20       	and	r15, r15
    129e:	41 f0       	breq	.+16     	; 0x12b0 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	93 e4       	ldi	r25, 0x43	; 67
    12ac:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__subsf3>
	}
	*temperature = temp;
    12b0:	f8 01       	movw	r30, r16
    12b2:	60 83       	st	Z, r22
    12b4:	71 83       	std	Z+1, r23	; 0x01
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	08 95       	ret

000012d0 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	f8 2e       	mov	r15, r24
    12de:	e6 2e       	mov	r14, r22
    12e0:	ea 01       	movw	r28, r20
    12e2:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    12ea:	18 2f       	mov	r17, r24
    12ec:	83 36       	cpi	r24, 0x63	; 99
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <read_MMA8451+0x26>
		stop_TWI();
    12f0:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
    12f4:	23 c0       	rjmp	.+70     	; 0x133c <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    12f6:	8e 2d       	mov	r24, r14
    12f8:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
    12fc:	18 2f       	mov	r17, r24
    12fe:	83 36       	cpi	r24, 0x63	; 99
    1300:	e9 f0       	breq	.+58     	; 0x133c <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	8f 2d       	mov	r24, r15
    1306:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    130a:	18 2f       	mov	r17, r24
    130c:	83 36       	cpi	r24, 0x63	; 99
    130e:	69 f4       	brne	.+26     	; 0x132a <read_MMA8451+0x5a>
		stop_TWI();
    1310:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(ERROR);
    1314:	13 c0       	rjmp	.+38     	; 0x133c <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1316:	7e 01       	movw	r14, r28
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	e8 1a       	sub	r14, r24
    131c:	f8 0a       	sbc	r15, r24
    131e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <read_TWI>
    1322:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1324:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1326:	e7 01       	movw	r28, r14
    1328:	01 c0       	rjmp	.+2      	; 0x132c <read_MMA8451+0x5c>
    132a:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    132c:	10 17       	cp	r17, r16
    132e:	98 f3       	brcs	.-26     	; 0x1316 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1330:	0e 94 e7 18 	call	0x31ce	; 0x31ce <readlast_TWI>
    1334:	88 83       	st	Y, r24
	stop_TWI();
    1336:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
	return(NOERROR);
    133a:	10 e0       	ldi	r17, 0x00	; 0

}
    133c:	81 2f       	mov	r24, r17
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	26 97       	sbiw	r28, 0x06	; 6
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	6c 01       	movw	r12, r24
    1368:	7b 01       	movw	r14, r22
    136a:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e8       	ldi	r25, 0x80	; 128
    1370:	a6 e2       	ldi	r26, 0x26	; 38
    1372:	b4 ec       	ldi	r27, 0xC4	; 196
    1374:	fa 01       	movw	r30, r20
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03
    137e:	fb 01       	movw	r30, r22
    1380:	80 83       	st	Z, r24
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	a2 83       	std	Z+2, r26	; 0x02
    1386:	b3 83       	std	Z+3, r27	; 0x03
    1388:	f6 01       	movw	r30, r12
    138a:	80 83       	st	Z, r24
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	a2 83       	std	Z+2, r26	; 0x02
    1390:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1392:	26 e0       	ldi	r18, 0x06	; 6
    1394:	ae 01       	movw	r20, r28
    1396:	4f 5f       	subi	r20, 0xFF	; 255
    1398:	5f 4f       	sbci	r21, 0xFF	; 255
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	8d e1       	ldi	r24, 0x1D	; 29
    139e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>
    13a2:	83 36       	cpi	r24, 0x63	; 99
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <get_orientation+0x5c>
    13a6:	61 c0       	rjmp	.+194    	; 0x146a <get_orientation+0x11e>
		return(ERROR);
	}

	ix = datain[0];
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    13ac:	98 2f       	mov	r25, r24
    13ae:	88 27       	eor	r24, r24
	ix |= datain[1];
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	82 2b       	or	r24, r18
	ix /= 4;
    13b4:	bc 01       	movw	r22, r24
    13b6:	77 23       	and	r23, r23
    13b8:	14 f4       	brge	.+4      	; 0x13be <get_orientation+0x72>
    13ba:	6d 5f       	subi	r22, 0xFD	; 253
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	75 95       	asr	r23
    13c0:	67 95       	ror	r22
    13c2:	75 95       	asr	r23
    13c4:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    13c6:	07 2e       	mov	r0, r23
    13c8:	00 0c       	add	r0, r0
    13ca:	88 0b       	sbc	r24, r24
    13cc:	99 0b       	sbc	r25, r25
    13ce:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__floatsisf>
    13d2:	26 e6       	ldi	r18, 0x66	; 102
    13d4:	36 e2       	ldi	r19, 0x26	; 38
    13d6:	45 e7       	ldi	r20, 0x75	; 117
    13d8:	5e e3       	ldi	r21, 0x3E	; 62
    13da:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    13de:	f6 01       	movw	r30, r12
    13e0:	60 83       	st	Z, r22
    13e2:	71 83       	std	Z+1, r23	; 0x01
    13e4:	82 83       	std	Z+2, r24	; 0x02
    13e6:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    13ec:	98 2f       	mov	r25, r24
    13ee:	88 27       	eor	r24, r24
	iy |= datain[3];
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	82 2b       	or	r24, r18
	iy /= 4;
    13f4:	bc 01       	movw	r22, r24
    13f6:	77 23       	and	r23, r23
    13f8:	14 f4       	brge	.+4      	; 0x13fe <get_orientation+0xb2>
    13fa:	6d 5f       	subi	r22, 0xFD	; 253
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	75 95       	asr	r23
    1400:	67 95       	ror	r22
    1402:	75 95       	asr	r23
    1404:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1406:	07 2e       	mov	r0, r23
    1408:	00 0c       	add	r0, r0
    140a:	88 0b       	sbc	r24, r24
    140c:	99 0b       	sbc	r25, r25
    140e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__floatsisf>
    1412:	26 e6       	ldi	r18, 0x66	; 102
    1414:	36 e2       	ldi	r19, 0x26	; 38
    1416:	45 e7       	ldi	r20, 0x75	; 117
    1418:	5e e3       	ldi	r21, 0x3E	; 62
    141a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    141e:	f7 01       	movw	r30, r14
    1420:	60 83       	st	Z, r22
    1422:	71 83       	std	Z+1, r23	; 0x01
    1424:	82 83       	std	Z+2, r24	; 0x02
    1426:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    142c:	98 2f       	mov	r25, r24
    142e:	88 27       	eor	r24, r24
	iz |= datain[5];
    1430:	2e 81       	ldd	r18, Y+6	; 0x06
    1432:	82 2b       	or	r24, r18
	iz /= 4;
    1434:	bc 01       	movw	r22, r24
    1436:	77 23       	and	r23, r23
    1438:	14 f4       	brge	.+4      	; 0x143e <get_orientation+0xf2>
    143a:	6d 5f       	subi	r22, 0xFD	; 253
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	75 95       	asr	r23
    1440:	67 95       	ror	r22
    1442:	75 95       	asr	r23
    1444:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    1446:	07 2e       	mov	r0, r23
    1448:	00 0c       	add	r0, r0
    144a:	88 0b       	sbc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__floatsisf>
    1452:	26 e6       	ldi	r18, 0x66	; 102
    1454:	36 e2       	ldi	r19, 0x26	; 38
    1456:	45 e7       	ldi	r20, 0x75	; 117
    1458:	5e e3       	ldi	r21, 0x3E	; 62
    145a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    145e:	f8 01       	movw	r30, r16
    1460:	60 83       	st	Z, r22
    1462:	71 83       	std	Z+1, r23	; 0x01
    1464:	82 83       	std	Z+2, r24	; 0x02
    1466:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    1468:	80 e0       	ldi	r24, 0x00	; 0

}
    146a:	26 96       	adiw	r28, 0x06	; 6
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	08 95       	ret

00001482 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	d6 2f       	mov	r29, r22
    148a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
    1492:	c8 2f       	mov	r28, r24
    1494:	88 23       	and	r24, r24
    1496:	21 f0       	breq	.+8      	; 0x14a0 <write_MMA8451+0x1e>
		stop_TWI();
    1498:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(retval);
    149c:	8c 2f       	mov	r24, r28
    149e:	17 c0       	rjmp	.+46     	; 0x14ce <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    14a0:	8d 2f       	mov	r24, r29
    14a2:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
    14a6:	c8 2f       	mov	r28, r24
    14a8:	88 23       	and	r24, r24
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <write_MMA8451+0x32>
		stop_TWI();
    14ac:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(retval);
    14b0:	8c 2f       	mov	r24, r28
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    14b4:	81 2f       	mov	r24, r17
    14b6:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
    14ba:	c8 2f       	mov	r28, r24
    14bc:	88 23       	and	r24, r24
    14be:	21 f0       	breq	.+8      	; 0x14c8 <write_MMA8451+0x46>
		stop_TWI();
    14c0:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
		return(retval);
    14c4:	8c 2f       	mov	r24, r28
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <write_MMA8451+0x4c>
	}
	stop_TWI();
    14c8:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>
	return(0);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
	
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	08 95       	ret

000014d6 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	1f 92       	push	r1
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    14e0:	40 e4       	ldi	r20, 0x40	; 64
    14e2:	6b e2       	ldi	r22, 0x2B	; 43
    14e4:	8d e1       	ldi	r24, 0x1D	; 29
    14e6:	0e 94 41 0a 	call	0x1482	; 0x1482 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	ae 01       	movw	r20, r28
    14ee:	4f 5f       	subi	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	6b e2       	ldi	r22, 0x2B	; 43
    14f4:	8d e1       	ldi	r24, 0x1D	; 29
    14f6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>
	while (retval & 0x40) {
    14fa:	08 c0       	rjmp	.+16     	; 0x150c <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	ae 01       	movw	r20, r28
    1500:	4f 5f       	subi	r20, 0xFF	; 255
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	6b e2       	ldi	r22, 0x2B	; 43
    1506:	8d e1       	ldi	r24, 0x1D	; 29
    1508:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	86 fd       	sbrc	r24, 6
    1510:	f5 cf       	rjmp	.-22     	; 0x14fc <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1512:	40 ec       	ldi	r20, 0xC0	; 192
    1514:	6f e0       	ldi	r22, 0x0F	; 15
    1516:	8d e1       	ldi	r24, 0x1D	; 29
    1518:	0e 94 41 0a 	call	0x1482	; 0x1482 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    151c:	42 e0       	ldi	r20, 0x02	; 2
    151e:	6b e2       	ldi	r22, 0x2B	; 43
    1520:	8d e1       	ldi	r24, 0x1D	; 29
    1522:	0e 94 41 0a 	call	0x1482	; 0x1482 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1526:	4d e3       	ldi	r20, 0x3D	; 61
    1528:	6a e2       	ldi	r22, 0x2A	; 42
    152a:	8d e1       	ldi	r24, 0x1D	; 29
    152c:	0e 94 41 0a 	call	0x1482	; 0x1482 <write_MMA8451>

	return(retval);

}
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2e 97       	sbiw	r28, 0x0e	; 14
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1552:	88 e0       	ldi	r24, 0x08	; 8
    1554:	ed e9       	ldi	r30, 0x9D	; 157
    1556:	f9 e8       	ldi	r31, 0x89	; 137
    1558:	de 01       	movw	r26, r28
    155a:	11 96       	adiw	r26, 0x01	; 1
    155c:	01 90       	ld	r0, Z+
    155e:	0d 92       	st	X+, r0
    1560:	8a 95       	dec	r24
    1562:	e1 f7       	brne	.-8      	; 0x155c <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1564:	f8 01       	movw	r30, r16
    1566:	01 90       	ld	r0, Z+
    1568:	00 20       	and	r0, r0
    156a:	e9 f7       	brne	.-6      	; 0x1566 <checksum_NMEA+0x2c>
    156c:	31 97       	sbiw	r30, 0x01	; 1
    156e:	3e 2f       	mov	r19, r30
    1570:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1572:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1578:	f8 01       	movw	r30, r16
    157a:	e8 0f       	add	r30, r24
    157c:	f1 1d       	adc	r31, r1
    157e:	20 81       	ld	r18, Z
    1580:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	83 17       	cp	r24, r19
    1586:	c0 f3       	brcs	.-16     	; 0x1578 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1588:	1f 92       	push	r1
    158a:	9f 93       	push	r25
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	9f 93       	push	r25
    1592:	8f 93       	push	r24
    1594:	7e 01       	movw	r14, r28
    1596:	89 e0       	ldi	r24, 0x09	; 9
    1598:	e8 0e       	add	r14, r24
    159a:	f1 1c       	adc	r15, r1
    159c:	ff 92       	push	r15
    159e:	ef 92       	push	r14
    15a0:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
	strcat(str, chksum);
    15a4:	b7 01       	movw	r22, r14
    15a6:	c8 01       	movw	r24, r16
    15a8:	0e 94 34 23 	call	0x4668	; 0x4668 <strcat>

}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	2e 96       	adiw	r28, 0x0e	; 14
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	08 95       	ret

000015cc <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	d6 2f       	mov	r29, r22
    15d2:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <start_TWI>
	write_TWI(type);
    15da:	8d 2f       	mov	r24, r29
    15dc:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
	write_TWI(byteToSend);
    15e0:	8c 2f       	mov	r24, r28
    15e2:	0e 94 39 19 	call	0x3272	; 0x3272 <write_TWI>
	stop_TWI();
    15e6:	0e 94 35 19 	call	0x326a	; 0x326a <stop_TWI>

}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    15f0:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    15f2:	e0 e6       	ldi	r30, 0x60	; 96
    15f4:	f4 e0       	ldi	r31, 0x04	; 4
    15f6:	90 e4       	ldi	r25, 0x40	; 64
    15f8:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a1 e4       	ldi	r26, 0x41	; 65
    15fe:	b3 e0       	ldi	r27, 0x03	; 3
    1600:	11 97       	sbiw	r26, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <init_OLED+0x10>
    1604:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1606:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1608:	81 11       	cpse	r24, r1
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    160c:	cc e3       	ldi	r28, 0x3C	; 60
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1610:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1612:	4a e2       	ldi	r20, 0x2A	; 42
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	8c 2f       	mov	r24, r28
    1618:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    161c:	41 e7       	ldi	r20, 0x71	; 113
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	8c 2f       	mov	r24, r28
    1622:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1626:	4c e5       	ldi	r20, 0x5C	; 92
    1628:	60 e4       	ldi	r22, 0x40	; 64
    162a:	8c 2f       	mov	r24, r28
    162c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1630:	48 e2       	ldi	r20, 0x28	; 40
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	8c 2f       	mov	r24, r28
    1636:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    163a:	48 e0       	ldi	r20, 0x08	; 8
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	8c 2f       	mov	r24, r28
    1640:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1644:	4a e2       	ldi	r20, 0x2A	; 42
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	8c 2f       	mov	r24, r28
    164a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    164e:	49 e7       	ldi	r20, 0x79	; 121
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	8c 2f       	mov	r24, r28
    1654:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1658:	45 ed       	ldi	r20, 0xD5	; 213
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	8c 2f       	mov	r24, r28
    165e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1662:	40 e7       	ldi	r20, 0x70	; 112
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	8c 2f       	mov	r24, r28
    1668:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    166c:	48 e7       	ldi	r20, 0x78	; 120
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	8c 2f       	mov	r24, r28
    1672:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1676:	48 e0       	ldi	r20, 0x08	; 8
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	8c 2f       	mov	r24, r28
    167c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1680:	46 e0       	ldi	r20, 0x06	; 6
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	8c 2f       	mov	r24, r28
    1686:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    168a:	42 e7       	ldi	r20, 0x72	; 114
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	8c 2f       	mov	r24, r28
    1690:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	60 e4       	ldi	r22, 0x40	; 64
    1698:	8c 2f       	mov	r24, r28
    169a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    169e:	4a e2       	ldi	r20, 0x2A	; 42
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	8c 2f       	mov	r24, r28
    16a4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16a8:	49 e7       	ldi	r20, 0x79	; 121
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	8c 2f       	mov	r24, r28
    16ae:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    16b2:	4a ed       	ldi	r20, 0xDA	; 218
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	8c 2f       	mov	r24, r28
    16b8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	8c 2f       	mov	r24, r28
    16c2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    16c6:	4c ed       	ldi	r20, 0xDC	; 220
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	8c 2f       	mov	r24, r28
    16cc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	8c 2f       	mov	r24, r28
    16d6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    16da:	41 e8       	ldi	r20, 0x81	; 129
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	8c 2f       	mov	r24, r28
    16e0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	8c 2f       	mov	r24, r28
    16ea:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    16ee:	49 ed       	ldi	r20, 0xD9	; 217
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	8c 2f       	mov	r24, r28
    16f4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    16f8:	41 ef       	ldi	r20, 0xF1	; 241
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	8c 2f       	mov	r24, r28
    16fe:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1702:	4b ed       	ldi	r20, 0xDB	; 219
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	8c 2f       	mov	r24, r28
    1708:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    170c:	40 e4       	ldi	r20, 0x40	; 64
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	8c 2f       	mov	r24, r28
    1712:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1716:	48 e7       	ldi	r20, 0x78	; 120
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	8c 2f       	mov	r24, r28
    171c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1720:	48 e2       	ldi	r20, 0x28	; 40
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	8c 2f       	mov	r24, r28
    1726:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	8c 2f       	mov	r24, r28
    1730:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	8c 2f       	mov	r24, r28
    173a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    173e:	4c e0       	ldi	r20, 0x0C	; 12
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	8c 2f       	mov	r24, r28
    1744:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
    1748:	ba e6       	ldi	r27, 0x6A	; 106
    174a:	24 e0       	ldi	r18, 0x04	; 4
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	b1 50       	subi	r27, 0x01	; 1
    1750:	20 40       	sbci	r18, 0x00	; 0
    1752:	80 40       	sbci	r24, 0x00	; 0
    1754:	e1 f7       	brne	.-8      	; 0x174e <init_OLED+0x15e>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    1758:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    175c:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
	timeoutOLED = 5;
    1760:	85 e0       	ldi	r24, 0x05	; 5
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
    1768:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>

}
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	e2 97       	sbiw	r28, 0x32	; 50
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1788:	91 e1       	ldi	r25, 0x11	; 17
    178a:	e5 ea       	ldi	r30, 0xA5	; 165
    178c:	f9 e8       	ldi	r31, 0x89	; 137
    178e:	de 01       	movw	r26, r28
    1790:	92 96       	adiw	r26, 0x22	; 34
    1792:	01 90       	ld	r0, Z+
    1794:	0d 92       	st	X+, r0
    1796:	9a 95       	dec	r25
    1798:	e1 f7       	brne	.-8      	; 0x1792 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    179a:	81 11       	cpse	r24, r1
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    179e:	0c e3       	ldi	r16, 0x3C	; 60
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    17a2:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    17a4:	ce 01       	movw	r24, r28
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	7c 01       	movw	r14, r24
    17aa:	0e 94 3f 23 	call	0x467e	; 0x467e <strcpy>
	if (strlen(strbuf) > 16) {
    17ae:	f7 01       	movw	r30, r14
    17b0:	01 90       	ld	r0, Z+
    17b2:	00 20       	and	r0, r0
    17b4:	e9 f7       	brne	.-6      	; 0x17b0 <writestr_OLED+0x40>
    17b6:	31 97       	sbiw	r30, 0x01	; 1
    17b8:	ee 19       	sub	r30, r14
    17ba:	ff 09       	sbc	r31, r15
    17bc:	71 97       	sbiw	r30, 0x11	; 17
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    17c0:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    17c2:	be 01       	movw	r22, r28
    17c4:	6e 5d       	subi	r22, 0xDE	; 222
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	0e 94 34 23 	call	0x4668	; 0x4668 <strcat>

	if (lineno == 1) {
    17d0:	11 30       	cpi	r17, 0x01	; 1
    17d2:	39 f4       	brne	.+14     	; 0x17e2 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	80 2f       	mov	r24, r16
    17da:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    17de:	10 e0       	ldi	r17, 0x00	; 0
    17e0:	12 c0       	rjmp	.+36     	; 0x1806 <__DATA_REGION_LENGTH__+0x6>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    17e2:	40 ec       	ldi	r20, 0xC0	; 192
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	80 2f       	mov	r24, r16
    17e8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>
    17ec:	f8 cf       	rjmp	.-16     	; 0x17de <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    17ee:	e1 e0       	ldi	r30, 0x01	; 1
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	ec 0f       	add	r30, r28
    17f4:	fd 1f       	adc	r31, r29
    17f6:	e1 0f       	add	r30, r17
    17f8:	f1 1d       	adc	r31, r1
    17fa:	40 81       	ld	r20, Z
    17fc:	60 e4       	ldi	r22, 0x40	; 64
    17fe:	80 2f       	mov	r24, r16
    1800:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1804:	1f 5f       	subi	r17, 0xFF	; 255
    1806:	10 31       	cpi	r17, 0x10	; 16
    1808:	90 f3       	brcs	.-28     	; 0x17ee <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    1812:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>

}
    1816:	e2 96       	adiw	r28, 0x32	; 50
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	1f 92       	push	r1
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1838:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	be 01       	movw	r22, r28
    183e:	6f 5f       	subi	r22, 0xFF	; 255
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1846:	42 e0       	ldi	r20, 0x02	; 2
    1848:	be 01       	movw	r22, r28
    184a:	6f 5f       	subi	r22, 0xFF	; 255
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	81 2f       	mov	r24, r17
    1850:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
	timerOLED = 0;
    1854:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    1858:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>

}
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <init_PNEU>:
*/

uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	84 e2       	ldi	r24, 0x24	; 36
    186c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    1870:	83 36       	cpi	r24, 0x63	; 99
    1872:	a9 f1       	breq	.+106    	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	6a e0       	ldi	r22, 0x0A	; 10
    1878:	84 e2       	ldi	r24, 0x24	; 36
    187a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    187e:	83 36       	cpi	r24, 0x63	; 99
    1880:	71 f1       	breq	.+92     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1882:	4e ef       	ldi	r20, 0xFE	; 254
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	81 e2       	ldi	r24, 0x21	; 33
    1888:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    188c:	83 36       	cpi	r24, 0x63	; 99
    188e:	39 f1       	breq	.+78     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	81 e2       	ldi	r24, 0x21	; 33
    1896:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    189a:	83 36       	cpi	r24, 0x63	; 99
    189c:	01 f1       	breq	.+64     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    189e:	4c ef       	ldi	r20, 0xFC	; 252
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	81 e2       	ldi	r24, 0x21	; 33
    18a4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    18a8:	83 36       	cpi	r24, 0x63	; 99
    18aa:	c9 f0       	breq	.+50     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	64 e0       	ldi	r22, 0x04	; 4
    18b0:	81 e2       	ldi	r24, 0x21	; 33
    18b2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    18b6:	83 36       	cpi	r24, 0x63	; 99
    18b8:	91 f0       	breq	.+36     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	65 e0       	ldi	r22, 0x05	; 5
    18be:	81 e2       	ldi	r24, 0x21	; 33
    18c0:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    18c4:	83 36       	cpi	r24, 0x63	; 99
    18c6:	59 f0       	breq	.+22     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	66 e0       	ldi	r22, 0x06	; 6
    18cc:	81 e2       	ldi	r24, 0x21	; 33
    18ce:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
    18d2:	83 36       	cpi	r24, 0x63	; 99
    18d4:	21 f0       	breq	.+8      	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    18d6:	89 e0       	ldi	r24, 0x09	; 9
    18d8:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    18dc:	80 e0       	ldi	r24, 0x00	; 0

}
    18de:	08 95       	ret

000018e0 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	6c 01       	movw	r12, r24
    18f2:	8b 01       	movw	r16, r22
    18f4:	7a 01       	movw	r14, r20
    18f6:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    18f8:	69 e0       	ldi	r22, 0x09	; 9
    18fa:	81 e2       	ldi	r24, 0x21	; 33
    18fc:	0e 94 b0 08 	call	0x1160	; 0x1160 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1900:	98 2f       	mov	r25, r24
    1902:	92 95       	swap	r25
    1904:	96 95       	lsr	r25
    1906:	96 95       	lsr	r25
    1908:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    190a:	91 30       	cpi	r25, 0x01	; 1
    190c:	21 f4       	brne	.+8      	; 0x1916 <read_PNEUSensors+0x36>
		*shutter = 'c';
    190e:	93 e6       	ldi	r25, 0x63	; 99
    1910:	f6 01       	movw	r30, r12
    1912:	90 83       	st	Z, r25
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1916:	92 30       	cpi	r25, 0x02	; 2
    1918:	21 f4       	brne	.+8      	; 0x1922 <read_PNEUSensors+0x42>
		*shutter = 'o';
    191a:	9f e6       	ldi	r25, 0x6F	; 111
    191c:	f6 01       	movw	r30, r12
    191e:	90 83       	st	Z, r25
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1922:	93 30       	cpi	r25, 0x03	; 3
    1924:	21 f4       	brne	.+8      	; 0x192e <read_PNEUSensors+0x4e>
		*shutter = 't';
    1926:	94 e7       	ldi	r25, 0x74	; 116
    1928:	f6 01       	movw	r30, r12
    192a:	90 83       	st	Z, r25
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    192e:	98 e7       	ldi	r25, 0x78	; 120
    1930:	f6 01       	movw	r30, r12
    1932:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1934:	98 2f       	mov	r25, r24
    1936:	96 95       	lsr	r25
    1938:	96 95       	lsr	r25
	state &= 0b00000011;
    193a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    193c:	91 30       	cpi	r25, 0x01	; 1
    193e:	21 f4       	brne	.+8      	; 0x1948 <read_PNEUSensors+0x68>
		*right = 'c';
    1940:	93 e6       	ldi	r25, 0x63	; 99
    1942:	f7 01       	movw	r30, r14
    1944:	90 83       	st	Z, r25
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1948:	92 30       	cpi	r25, 0x02	; 2
    194a:	21 f4       	brne	.+8      	; 0x1954 <read_PNEUSensors+0x74>
		*right = 'o';
    194c:	9f e6       	ldi	r25, 0x6F	; 111
    194e:	f7 01       	movw	r30, r14
    1950:	90 83       	st	Z, r25
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1954:	93 30       	cpi	r25, 0x03	; 3
    1956:	21 f4       	brne	.+8      	; 0x1960 <read_PNEUSensors+0x80>
		*right = 't';
    1958:	94 e7       	ldi	r25, 0x74	; 116
    195a:	f7 01       	movw	r30, r14
    195c:	90 83       	st	Z, r25
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1960:	98 e7       	ldi	r25, 0x78	; 120
    1962:	f7 01       	movw	r30, r14
    1964:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1966:	98 2f       	mov	r25, r24
    1968:	92 95       	swap	r25
    196a:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    196c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    196e:	91 30       	cpi	r25, 0x01	; 1
    1970:	21 f4       	brne	.+8      	; 0x197a <read_PNEUSensors+0x9a>
		*left = 'o';
    1972:	9f e6       	ldi	r25, 0x6F	; 111
    1974:	f8 01       	movw	r30, r16
    1976:	90 83       	st	Z, r25
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    197a:	92 30       	cpi	r25, 0x02	; 2
    197c:	21 f4       	brne	.+8      	; 0x1986 <read_PNEUSensors+0xa6>
		*left = 'c';
    197e:	93 e6       	ldi	r25, 0x63	; 99
    1980:	f8 01       	movw	r30, r16
    1982:	90 83       	st	Z, r25
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1986:	93 30       	cpi	r25, 0x03	; 3
    1988:	21 f4       	brne	.+8      	; 0x1992 <read_PNEUSensors+0xb2>
		*left = 't';
    198a:	94 e7       	ldi	r25, 0x74	; 116
    198c:	f8 01       	movw	r30, r16
    198e:	90 83       	st	Z, r25
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1992:	98 e7       	ldi	r25, 0x78	; 120
    1994:	f8 01       	movw	r30, r16
    1996:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1998:	81 ff       	sbrs	r24, 1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <read_PNEUSensors+0xc2>
		*air = '0';
    199c:	80 e3       	ldi	r24, 0x30	; 48
    199e:	88 83       	st	Y, r24
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    19a2:	81 e3       	ldi	r24, 0x31	; 49
    19a4:	88 83       	st	Y, r24
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	08 95       	ret

000019b8 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	d8 2f       	mov	r29, r24
    19be:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    19c0:	69 e0       	ldi	r22, 0x09	; 9
    19c2:	84 e2       	ldi	r24, 0x24	; 36
    19c4:	0e 94 b0 08 	call	0x1160	; 0x1160 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    19c8:	8d 2b       	or	r24, r29
    19ca:	48 2f       	mov	r20, r24
    19cc:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    19ce:	6a e0       	ldi	r22, 0x0A	; 10
    19d0:	84 e2       	ldi	r24, 0x24	; 36
    19d2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	6a 97       	sbiw	r28, 0x1a	; 26
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	e0 ef       	ldi	r30, 0xF0	; 240
    19ee:	f9 e8       	ldi	r31, 0x89	; 137
    19f0:	de 01       	movw	r26, r28
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	01 90       	ld	r0, Z+
    19f6:	0d 92       	st	X+, r0
    19f8:	9a 95       	dec	r25
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    19fc:	24 e3       	ldi	r18, 0x34	; 52
    19fe:	82 9f       	mul	r24, r18
    1a00:	c0 01       	movw	r24, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	fc 01       	movw	r30, r24
    1a06:	e9 5f       	subi	r30, 0xF9	; 249
    1a08:	f7 4d       	sbci	r31, 0xD7	; 215
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	8c 36       	cpi	r24, 0x6C	; 108
    1a0e:	31 f1       	breq	.+76     	; 0x1a5c <close_PNEU+0x80>
    1a10:	18 f4       	brcc	.+6      	; 0x1a18 <close_PNEU+0x3c>
    1a12:	82 36       	cpi	r24, 0x62	; 98
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <close_PNEU+0x48>
    1a16:	6a c0       	rjmp	.+212    	; 0x1aec <close_PNEU+0x110>
    1a18:	82 37       	cpi	r24, 0x72	; 114
    1a1a:	c1 f1       	breq	.+112    	; 0x1a8c <close_PNEU+0xb0>
    1a1c:	83 37       	cpi	r24, 0x73	; 115
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <close_PNEU+0x46>
    1a20:	4d c0       	rjmp	.+154    	; 0x1abc <close_PNEU+0xe0>
    1a22:	64 c0       	rjmp	.+200    	; 0x1aec <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a24:	6a ee       	ldi	r22, 0xEA	; 234
    1a26:	84 e4       	ldi	r24, 0x44	; 68
    1a28:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a2c:	66 ee       	ldi	r22, 0xE6	; 230
    1a2e:	88 e8       	ldi	r24, 0x88	; 136
    1a30:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1a34:	86 eb       	ldi	r24, 0xB6	; 182
    1a36:	99 e8       	ldi	r25, 0x89	; 137
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9f 93       	push	r25
    1a42:	8f 93       	push	r24
    1a44:	09 96       	adiw	r24, 0x09	; 9
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	59 c0       	rjmp	.+178    	; 0x1b0e <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a5c:	6a ee       	ldi	r22, 0xEA	; 234
    1a5e:	84 e4       	ldi	r24, 0x44	; 68
    1a60:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1a64:	8b eb       	ldi	r24, 0xBB	; 187
    1a66:	99 e8       	ldi	r25, 0x89	; 137
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	09 96       	adiw	r24, 0x09	; 9
    1a76:	9f 93       	push	r25
    1a78:	8f 93       	push	r24
    1a7a:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	41 c0       	rjmp	.+130    	; 0x1b0e <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a8c:	66 ee       	ldi	r22, 0xE6	; 230
    1a8e:	88 e8       	ldi	r24, 0x88	; 136
    1a90:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1a94:	80 ec       	ldi	r24, 0xC0	; 192
    1a96:	99 e8       	ldi	r25, 0x89	; 137
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	09 96       	adiw	r24, 0x09	; 9
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	29 c0       	rjmp	.+82     	; 0x1b0e <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1abc:	6c ee       	ldi	r22, 0xEC	; 236
    1abe:	82 e2       	ldi	r24, 0x22	; 34
    1ac0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1ac4:	86 ec       	ldi	r24, 0xC6	; 198
    1ac6:	99 e8       	ldi	r25, 0x89	; 137
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	ce 01       	movw	r24, r28
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	9f 93       	push	r25
    1ad2:	8f 93       	push	r24
    1ad4:	09 96       	adiw	r24, 0x09	; 9
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	11 c0       	rjmp	.+34     	; 0x1b0e <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1aec:	6e ec       	ldi	r22, 0xCE	; 206
    1aee:	79 e8       	ldi	r23, 0x89	; 137
    1af0:	85 ef       	ldi	r24, 0xF5	; 245
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
			strcpy(outbuf, "close what?");
    1af8:	8c e0       	ldi	r24, 0x0C	; 12
    1afa:	e4 ee       	ldi	r30, 0xE4	; 228
    1afc:	f9 e8       	ldi	r31, 0x89	; 137
    1afe:	de 01       	movw	r26, r28
    1b00:	1a 96       	adiw	r26, 0x0a	; 10
    1b02:	01 90       	ld	r0, Z+
    1b04:	0d 92       	st	X+, r0
    1b06:	8a 95       	dec	r24
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <close_PNEU+0x126>
			return(ERROR);
    1b0a:	83 e6       	ldi	r24, 0x63	; 99
    1b0c:	0b c0       	rjmp	.+22     	; 0x1b24 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	0e 94 15 0c 	call	0x182a	; 0x182a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	be 01       	movw	r22, r28
    1b18:	66 5f       	subi	r22, 0xF6	; 246
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
	return(NOERROR);
    1b22:	80 e0       	ldi	r24, 0x00	; 0

}
    1b24:	6a 96       	adiw	r28, 0x1a	; 26
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	69 97       	sbiw	r28, 0x19	; 25
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1b3e:	98 e0       	ldi	r25, 0x08	; 8
    1b40:	e9 e1       	ldi	r30, 0x19	; 25
    1b42:	fa e8       	ldi	r31, 0x8A	; 138
    1b44:	de 01       	movw	r26, r28
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	01 90       	ld	r0, Z+
    1b4a:	0d 92       	st	X+, r0
    1b4c:	9a 95       	dec	r25
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1b50:	24 e3       	ldi	r18, 0x34	; 52
    1b52:	82 9f       	mul	r24, r18
    1b54:	c0 01       	movw	r24, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e9 5f       	subi	r30, 0xF9	; 249
    1b5c:	f7 4d       	sbci	r31, 0xD7	; 215
    1b5e:	81 81       	ldd	r24, Z+1	; 0x01
    1b60:	8c 36       	cpi	r24, 0x6C	; 108
    1b62:	31 f1       	breq	.+76     	; 0x1bb0 <open_PNEU+0x80>
    1b64:	18 f4       	brcc	.+6      	; 0x1b6c <open_PNEU+0x3c>
    1b66:	82 36       	cpi	r24, 0x62	; 98
    1b68:	39 f0       	breq	.+14     	; 0x1b78 <open_PNEU+0x48>
    1b6a:	6a c0       	rjmp	.+212    	; 0x1c40 <open_PNEU+0x110>
    1b6c:	82 37       	cpi	r24, 0x72	; 114
    1b6e:	c1 f1       	breq	.+112    	; 0x1be0 <open_PNEU+0xb0>
    1b70:	83 37       	cpi	r24, 0x73	; 115
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <open_PNEU+0x46>
    1b74:	4d c0       	rjmp	.+154    	; 0x1c10 <open_PNEU+0xe0>
    1b76:	64 c0       	rjmp	.+200    	; 0x1c40 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b78:	6e ea       	ldi	r22, 0xAE	; 174
    1b7a:	84 e4       	ldi	r24, 0x44	; 68
    1b7c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1b80:	6e e6       	ldi	r22, 0x6E	; 110
    1b82:	88 e8       	ldi	r24, 0x88	; 136
    1b84:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1b88:	86 eb       	ldi	r24, 0xB6	; 182
    1b8a:	99 e8       	ldi	r25, 0x89	; 137
    1b8c:	9f 93       	push	r25
    1b8e:	8f 93       	push	r24
    1b90:	ce 01       	movw	r24, r28
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	9f 93       	push	r25
    1b96:	8f 93       	push	r24
    1b98:	08 96       	adiw	r24, 0x08	; 8
    1b9a:	9f 93       	push	r25
    1b9c:	8f 93       	push	r24
    1b9e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	59 c0       	rjmp	.+178    	; 0x1c62 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bb0:	6e ea       	ldi	r22, 0xAE	; 174
    1bb2:	84 e4       	ldi	r24, 0x44	; 68
    1bb4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1bb8:	8b eb       	ldi	r24, 0xBB	; 187
    1bba:	99 e8       	ldi	r25, 0x89	; 137
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	9f 93       	push	r25
    1bc6:	8f 93       	push	r24
    1bc8:	08 96       	adiw	r24, 0x08	; 8
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
    1bce:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	41 c0       	rjmp	.+130    	; 0x1c62 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1be0:	6e e6       	ldi	r22, 0x6E	; 110
    1be2:	88 e8       	ldi	r24, 0x88	; 136
    1be4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1be8:	80 ec       	ldi	r24, 0xC0	; 192
    1bea:	99 e8       	ldi	r25, 0x89	; 137
    1bec:	9f 93       	push	r25
    1bee:	8f 93       	push	r24
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	08 96       	adiw	r24, 0x08	; 8
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	29 c0       	rjmp	.+82     	; 0x1c62 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c10:	6e ec       	ldi	r22, 0xCE	; 206
    1c12:	82 e2       	ldi	r24, 0x22	; 34
    1c14:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c18:	86 ec       	ldi	r24, 0xC6	; 198
    1c1a:	99 e8       	ldi	r25, 0x89	; 137
    1c1c:	9f 93       	push	r25
    1c1e:	8f 93       	push	r24
    1c20:	ce 01       	movw	r24, r28
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	9f 93       	push	r25
    1c26:	8f 93       	push	r24
    1c28:	08 96       	adiw	r24, 0x08	; 8
    1c2a:	9f 93       	push	r25
    1c2c:	8f 93       	push	r24
    1c2e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			break;
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	11 c0       	rjmp	.+34     	; 0x1c62 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1c40:	69 ef       	ldi	r22, 0xF9	; 249
    1c42:	79 e8       	ldi	r23, 0x89	; 137
    1c44:	85 ef       	ldi	r24, 0xF5	; 245
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
			strcpy(outbuf, "open what?");
    1c4c:	8b e0       	ldi	r24, 0x0B	; 11
    1c4e:	ee e0       	ldi	r30, 0x0E	; 14
    1c50:	fa e8       	ldi	r31, 0x8A	; 138
    1c52:	de 01       	movw	r26, r28
    1c54:	19 96       	adiw	r26, 0x09	; 9
    1c56:	01 90       	ld	r0, Z+
    1c58:	0d 92       	st	X+, r0
    1c5a:	8a 95       	dec	r24
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <open_PNEU+0x126>
			return(ERROR);
    1c5e:	83 e6       	ldi	r24, 0x63	; 99
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 15 0c 	call	0x182a	; 0x182a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	be 01       	movw	r22, r28
    1c6c:	67 5f       	subi	r22, 0xF7	; 247
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
	return(NOERROR);
    1c76:	80 e0       	ldi	r24, 0x00	; 0

}
    1c78:	69 96       	adiw	r28, 0x19	; 25
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1c84:	1f 92       	push	r1
    1c86:	0f 92       	push	r0
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	0f 92       	push	r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	2f 93       	push	r18
    1c90:	3f 93       	push	r19
    1c92:	4f 93       	push	r20
    1c94:	5f 93       	push	r21
    1c96:	6f 93       	push	r22
    1c98:	7f 93       	push	r23
    1c9a:	8f 93       	push	r24
    1c9c:	9f 93       	push	r25
    1c9e:	af 93       	push	r26
    1ca0:	bf 93       	push	r27
    1ca2:	ef 93       	push	r30
    1ca4:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1ca6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1caa:	88 23       	and	r24, r24
    1cac:	4c f4       	brge	.+18     	; 0x1cc0 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1cb4:	68 e0       	ldi	r22, 0x08	; 8
    1cb6:	81 e2       	ldi	r24, 0x21	; 33
    1cb8:	0e 94 b0 08 	call	0x1160	; 0x1160 <read_MCP23008>
    1cbc:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <pneuState>
	}

}
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti

00001ce2 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1ce2:	e0 e0       	ldi	r30, 0x00	; 0
    1ce4:	f4 e0       	ldi	r31, 0x04	; 4
    1ce6:	88 e0       	ldi	r24, 0x08	; 8
    1ce8:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1cea:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1cec:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1cee:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1cf0:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1cf2:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1cf4:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1cf6:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1cf8:	e0 e2       	ldi	r30, 0x20	; 32
    1cfa:	f4 e0       	ldi	r31, 0x04	; 4
    1cfc:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1cfe:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1d00:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1d02:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1d04:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1d06:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1d08:	e0 e4       	ldi	r30, 0x40	; 64
    1d0a:	f4 e0       	ldi	r31, 0x04	; 4
    1d0c:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1d0e:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1d10:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1d12:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1d14:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1d16:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1d18:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1d1a:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d1c:	e0 e6       	ldi	r30, 0x60	; 96
    1d1e:	f4 e0       	ldi	r31, 0x04	; 4
    1d20:	94 e0       	ldi	r25, 0x04	; 4
    1d22:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d24:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d26:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d28:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d2a:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d2c:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d2e:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d30:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1d32:	e0 e8       	ldi	r30, 0x80	; 128
    1d34:	f4 e0       	ldi	r31, 0x04	; 4
    1d36:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1d38:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1d3a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1d3c:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1d3e:	e0 ea       	ldi	r30, 0xA0	; 160
    1d40:	f4 e0       	ldi	r31, 0x04	; 4
    1d42:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1d44:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1d46:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1d48:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1d4a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1d4c:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1d4e:	86 8b       	std	Z+22, r24	; 0x16
    1d50:	08 95       	ret

00001d52 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d52:	2f 92       	push	r2
    1d54:	3f 92       	push	r3
    1d56:	4f 92       	push	r4
    1d58:	5f 92       	push	r5
    1d5a:	6f 92       	push	r6
    1d5c:	7f 92       	push	r7
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	cf 5d       	subi	r28, 0xDF	; 223
    1d7c:	d2 40       	sbci	r29, 0x02	; 2
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1d82:	95 e4       	ldi	r25, 0x45	; 69
    1d84:	ef e7       	ldi	r30, 0x7F	; 127
    1d86:	fa e8       	ldi	r31, 0x8A	; 138
    1d88:	de 01       	movw	r26, r28
    1d8a:	a6 5b       	subi	r26, 0xB6	; 182
    1d8c:	be 4f       	sbci	r27, 0xFE	; 254
    1d8e:	01 90       	ld	r0, Z+
    1d90:	0d 92       	st	X+, r0
    1d92:	9a 95       	dec	r25
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1d96:	9f e2       	ldi	r25, 0x2F	; 47
    1d98:	e4 ec       	ldi	r30, 0xC4	; 196
    1d9a:	fa e8       	ldi	r31, 0x8A	; 138
    1d9c:	de 01       	movw	r26, r28
    1d9e:	a1 57       	subi	r26, 0x71	; 113
    1da0:	be 4f       	sbci	r27, 0xFE	; 254
    1da2:	01 90       	ld	r0, Z+
    1da4:	0d 92       	st	X+, r0
    1da6:	9a 95       	dec	r25
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1daa:	9d e1       	ldi	r25, 0x1D	; 29
    1dac:	e3 ef       	ldi	r30, 0xF3	; 243
    1dae:	fa e8       	ldi	r31, 0x8A	; 138
    1db0:	de 01       	movw	r26, r28
    1db2:	a2 54       	subi	r26, 0x42	; 66
    1db4:	be 4f       	sbci	r27, 0xFE	; 254
    1db6:	01 90       	ld	r0, Z+
    1db8:	0d 92       	st	X+, r0
    1dba:	9a 95       	dec	r25
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1dbe:	9c e1       	ldi	r25, 0x1C	; 28
    1dc0:	e0 e1       	ldi	r30, 0x10	; 16
    1dc2:	fb e8       	ldi	r31, 0x8B	; 139
    1dc4:	de 01       	movw	r26, r28
    1dc6:	a5 52       	subi	r26, 0x25	; 37
    1dc8:	be 4f       	sbci	r27, 0xFE	; 254
    1dca:	01 90       	ld	r0, Z+
    1dcc:	0d 92       	st	X+, r0
    1dce:	9a 95       	dec	r25
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1dd2:	92 e1       	ldi	r25, 0x12	; 18
    1dd4:	ec e2       	ldi	r30, 0x2C	; 44
    1dd6:	fb e8       	ldi	r31, 0x8B	; 139
    1dd8:	de 01       	movw	r26, r28
    1dda:	a9 50       	subi	r26, 0x09	; 9
    1ddc:	be 4f       	sbci	r27, 0xFE	; 254
    1dde:	01 90       	ld	r0, Z+
    1de0:	0d 92       	st	X+, r0
    1de2:	9a 95       	dec	r25
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1de6:	9d e2       	ldi	r25, 0x2D	; 45
    1de8:	ee e3       	ldi	r30, 0x3E	; 62
    1dea:	fb e8       	ldi	r31, 0x8B	; 139
    1dec:	de 01       	movw	r26, r28
    1dee:	a7 5f       	subi	r26, 0xF7	; 247
    1df0:	bd 4f       	sbci	r27, 0xFD	; 253
    1df2:	01 90       	ld	r0, Z+
    1df4:	0d 92       	st	X+, r0
    1df6:	9a 95       	dec	r25
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1dfa:	93 e1       	ldi	r25, 0x13	; 19
    1dfc:	eb e6       	ldi	r30, 0x6B	; 107
    1dfe:	fb e8       	ldi	r31, 0x8B	; 139
    1e00:	de 01       	movw	r26, r28
    1e02:	aa 5c       	subi	r26, 0xCA	; 202
    1e04:	bd 4f       	sbci	r27, 0xFD	; 253
    1e06:	01 90       	ld	r0, Z+
    1e08:	0d 92       	st	X+, r0
    1e0a:	9a 95       	dec	r25
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1e0e:	93 e1       	ldi	r25, 0x13	; 19
    1e10:	ee e7       	ldi	r30, 0x7E	; 126
    1e12:	fb e8       	ldi	r31, 0x8B	; 139
    1e14:	de 01       	movw	r26, r28
    1e16:	a7 5b       	subi	r26, 0xB7	; 183
    1e18:	bd 4f       	sbci	r27, 0xFD	; 253
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	0d 92       	st	X+, r0
    1e1e:	9a 95       	dec	r25
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1e22:	99 e1       	ldi	r25, 0x19	; 25
    1e24:	e1 e9       	ldi	r30, 0x91	; 145
    1e26:	fb e8       	ldi	r31, 0x8B	; 139
    1e28:	de 01       	movw	r26, r28
    1e2a:	a4 5a       	subi	r26, 0xA4	; 164
    1e2c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2e:	01 90       	ld	r0, Z+
    1e30:	0d 92       	st	X+, r0
    1e32:	9a 95       	dec	r25
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e36:	95 e2       	ldi	r25, 0x25	; 37
    1e38:	ea ea       	ldi	r30, 0xAA	; 170
    1e3a:	fb e8       	ldi	r31, 0x8B	; 139
    1e3c:	de 01       	movw	r26, r28
    1e3e:	ab 58       	subi	r26, 0x8B	; 139
    1e40:	bd 4f       	sbci	r27, 0xFD	; 253
    1e42:	01 90       	ld	r0, Z+
    1e44:	0d 92       	st	X+, r0
    1e46:	9a 95       	dec	r25
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e4a:	9d e0       	ldi	r25, 0x0D	; 13
    1e4c:	ef ec       	ldi	r30, 0xCF	; 207
    1e4e:	fb e8       	ldi	r31, 0x8B	; 139
    1e50:	de 01       	movw	r26, r28
    1e52:	a6 56       	subi	r26, 0x66	; 102
    1e54:	bd 4f       	sbci	r27, 0xFD	; 253
    1e56:	01 90       	ld	r0, Z+
    1e58:	0d 92       	st	X+, r0
    1e5a:	9a 95       	dec	r25
    1e5c:	e1 f7       	brne	.-8      	; 0x1e56 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e5e:	9d e0       	ldi	r25, 0x0D	; 13
    1e60:	ec ed       	ldi	r30, 0xDC	; 220
    1e62:	fb e8       	ldi	r31, 0x8B	; 139
    1e64:	de 01       	movw	r26, r28
    1e66:	a9 55       	subi	r26, 0x59	; 89
    1e68:	bd 4f       	sbci	r27, 0xFD	; 253
    1e6a:	01 90       	ld	r0, Z+
    1e6c:	0d 92       	st	X+, r0
    1e6e:	9a 95       	dec	r25
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1e72:	08 2f       	mov	r16, r24
    1e74:	10 e0       	ldi	r17, 0x00	; 0
    1e76:	84 e3       	ldi	r24, 0x34	; 52
    1e78:	80 9f       	mul	r24, r16
    1e7a:	f0 01       	movw	r30, r0
    1e7c:	81 9f       	mul	r24, r17
    1e7e:	f0 0d       	add	r31, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	e9 5f       	subi	r30, 0xF9	; 249
    1e84:	f7 4d       	sbci	r31, 0xD7	; 215
    1e86:	e1 81       	ldd	r30, Z+1	; 0x01
    1e88:	8e 2f       	mov	r24, r30
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e1 54       	subi	r30, 0x41	; 65
    1e90:	f1 09       	sbc	r31, r1
    1e92:	e6 33       	cpi	r30, 0x36	; 54
    1e94:	f1 05       	cpc	r31, r1
    1e96:	08 f0       	brcs	.+2      	; 0x1e9a <report+0x148>
    1e98:	cd c4       	rjmp	.+2458   	; 0x2834 <report+0xae2>
    1e9a:	ed 58       	subi	r30, 0x8D	; 141
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	86 5f       	subi	r24, 0xF6	; 246
    1ea6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea8:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1eac:	84 e3       	ldi	r24, 0x34	; 52
    1eae:	80 9f       	mul	r24, r16
    1eb0:	f0 01       	movw	r30, r0
    1eb2:	81 9f       	mul	r24, r17
    1eb4:	f0 0d       	add	r31, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	e9 5f       	subi	r30, 0xF9	; 249
    1eba:	f7 4d       	sbci	r31, 0xD7	; 215
    1ebc:	f1 80       	ldd	r15, Z+1	; 0x01
    1ebe:	0f 2e       	mov	r0, r31
    1ec0:	ff e3       	ldi	r31, 0x3F	; 63
    1ec2:	ef 2e       	mov	r14, r31
    1ec4:	f0 2d       	mov	r31, r0
    1ec6:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1ec8:	ae 01       	movw	r20, r28
    1eca:	4c 53       	subi	r20, 0x3C	; 60
    1ecc:	5d 4f       	sbci	r21, 0xFD	; 253
    1ece:	68 e1       	ldi	r22, 0x18	; 24
    1ed0:	8e 2d       	mov	r24, r14
    1ed2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <get_MOTORFloat>
			if (retval == ERROR) {
    1ed6:	83 36       	cpi	r24, 0x63	; 99
    1ed8:	61 f4       	brne	.+24     	; 0x1ef2 <report+0x1a0>
				voltage = -666.0;
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e8       	ldi	r25, 0x80	; 128
    1ede:	a6 e2       	ldi	r26, 0x26	; 38
    1ee0:	b4 ec       	ldi	r27, 0xC4	; 196
    1ee2:	cc 53       	subi	r28, 0x3C	; 60
    1ee4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee6:	88 83       	st	Y, r24
    1ee8:	99 83       	std	Y+1, r25	; 0x01
    1eea:	aa 83       	std	Y+2, r26	; 0x02
    1eec:	bb 83       	std	Y+3, r27	; 0x03
    1eee:	c4 5c       	subi	r28, 0xC4	; 196
    1ef0:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1ef2:	ae 01       	movw	r20, r28
    1ef4:	40 54       	subi	r20, 0x40	; 64
    1ef6:	5d 4f       	sbci	r21, 0xFD	; 253
    1ef8:	62 e5       	ldi	r22, 0x52	; 82
    1efa:	8e 2d       	mov	r24, r14
    1efc:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <get_MOTORFloat>
			if (retval == ERROR) {
    1f00:	83 36       	cpi	r24, 0x63	; 99
    1f02:	61 f4       	brne	.+24     	; 0x1f1c <report+0x1ca>
				t0 = -666.0;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e8       	ldi	r25, 0x80	; 128
    1f08:	a6 e2       	ldi	r26, 0x26	; 38
    1f0a:	b4 ec       	ldi	r27, 0xC4	; 196
    1f0c:	c0 54       	subi	r28, 0x40	; 64
    1f0e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f10:	88 83       	st	Y, r24
    1f12:	99 83       	std	Y+1, r25	; 0x01
    1f14:	aa 83       	std	Y+2, r26	; 0x02
    1f16:	bb 83       	std	Y+3, r27	; 0x03
    1f18:	c0 5c       	subi	r28, 0xC0	; 192
    1f1a:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1f1c:	24 e3       	ldi	r18, 0x34	; 52
    1f1e:	20 9f       	mul	r18, r16
    1f20:	c0 01       	movw	r24, r0
    1f22:	21 9f       	mul	r18, r17
    1f24:	90 0d       	add	r25, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	8e 5c       	subi	r24, 0xCE	; 206
    1f2a:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f2c:	9f 93       	push	r25
    1f2e:	8f 93       	push	r24
    1f30:	cd 53       	subi	r28, 0x3D	; 61
    1f32:	dd 4f       	sbci	r29, 0xFD	; 253
    1f34:	88 81       	ld	r24, Y
    1f36:	c3 5c       	subi	r28, 0xC3	; 195
    1f38:	d2 40       	sbci	r29, 0x02	; 2
    1f3a:	8f 93       	push	r24
    1f3c:	ce 53       	subi	r28, 0x3E	; 62
    1f3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f40:	88 81       	ld	r24, Y
    1f42:	c2 5c       	subi	r28, 0xC2	; 194
    1f44:	d2 40       	sbci	r29, 0x02	; 2
    1f46:	8f 93       	push	r24
    1f48:	cf 53       	subi	r28, 0x3F	; 63
    1f4a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4c:	88 81       	ld	r24, Y
    1f4e:	c1 5c       	subi	r28, 0xC1	; 193
    1f50:	d2 40       	sbci	r29, 0x02	; 2
    1f52:	8f 93       	push	r24
    1f54:	c0 54       	subi	r28, 0x40	; 64
    1f56:	dd 4f       	sbci	r29, 0xFD	; 253
    1f58:	88 81       	ld	r24, Y
    1f5a:	c0 5c       	subi	r28, 0xC0	; 192
    1f5c:	d2 40       	sbci	r29, 0x02	; 2
    1f5e:	8f 93       	push	r24
    1f60:	c9 53       	subi	r28, 0x39	; 57
    1f62:	dd 4f       	sbci	r29, 0xFD	; 253
    1f64:	88 81       	ld	r24, Y
    1f66:	c7 5c       	subi	r28, 0xC7	; 199
    1f68:	d2 40       	sbci	r29, 0x02	; 2
    1f6a:	8f 93       	push	r24
    1f6c:	ca 53       	subi	r28, 0x3A	; 58
    1f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f70:	88 81       	ld	r24, Y
    1f72:	c6 5c       	subi	r28, 0xC6	; 198
    1f74:	d2 40       	sbci	r29, 0x02	; 2
    1f76:	8f 93       	push	r24
    1f78:	cb 53       	subi	r28, 0x3B	; 59
    1f7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f7c:	88 81       	ld	r24, Y
    1f7e:	c5 5c       	subi	r28, 0xC5	; 197
    1f80:	d2 40       	sbci	r29, 0x02	; 2
    1f82:	8f 93       	push	r24
    1f84:	cc 53       	subi	r28, 0x3C	; 60
    1f86:	dd 4f       	sbci	r29, 0xFD	; 253
    1f88:	88 81       	ld	r24, Y
    1f8a:	c4 5c       	subi	r28, 0xC4	; 196
    1f8c:	d2 40       	sbci	r29, 0x02	; 2
    1f8e:	8f 93       	push	r24
    1f90:	1f 92       	push	r1
    1f92:	ff 92       	push	r15
    1f94:	ce 01       	movw	r24, r28
    1f96:	86 5f       	subi	r24, 0xF6	; 246
    1f98:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9a:	9f 93       	push	r25
    1f9c:	8f 93       	push	r24
    1f9e:	8c 54       	subi	r24, 0x4C	; 76
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	9f 93       	push	r25
    1fa4:	8f 93       	push	r24
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0f 5f       	subi	r16, 0xFF	; 255
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	1f 93       	push	r17
    1fae:	0f 93       	push	r16
    1fb0:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1fc0:	40 c4       	rjmp	.+2176   	; 0x2842 <report+0xaf0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	86 5f       	subi	r24, 0xF6	; 246
    1fc6:	9e 4f       	sbci	r25, 0xFE	; 254
    1fc8:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1fcc:	84 e3       	ldi	r24, 0x34	; 52
    1fce:	80 9f       	mul	r24, r16
    1fd0:	f0 01       	movw	r30, r0
    1fd2:	81 9f       	mul	r24, r17
    1fd4:	f0 0d       	add	r31, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	e9 5f       	subi	r30, 0xF9	; 249
    1fda:	f7 4d       	sbci	r31, 0xD7	; 215
    1fdc:	81 81       	ldd	r24, Z+1	; 0x01
    1fde:	0f 2e       	mov	r0, r31
    1fe0:	ff e1       	ldi	r31, 0x1F	; 31
    1fe2:	7f 2e       	mov	r7, r31
    1fe4:	f0 2d       	mov	r31, r0
    1fe6:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1fe8:	ae 01       	movw	r20, r28
    1fea:	4c 54       	subi	r20, 0x4C	; 76
    1fec:	5d 4f       	sbci	r21, 0xFD	; 253
    1fee:	60 e1       	ldi	r22, 0x10	; 16
    1ff0:	87 2d       	mov	r24, r7
    1ff2:	0e 94 5d 14 	call	0x28ba	; 0x28ba <get_MOTOREncoder>
			if (retval == ERROR) {
    1ff6:	83 36       	cpi	r24, 0x63	; 99
    1ff8:	61 f4       	brne	.+24     	; 0x2012 <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	9f ef       	ldi	r25, 0xFF	; 255
    1ffe:	af ef       	ldi	r26, 0xFF	; 255
    2000:	bf e7       	ldi	r27, 0x7F	; 127
    2002:	cc 54       	subi	r28, 0x4C	; 76
    2004:	dd 4f       	sbci	r29, 0xFD	; 253
    2006:	88 83       	st	Y, r24
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	aa 83       	std	Y+2, r26	; 0x02
    200c:	bb 83       	std	Y+3, r27	; 0x03
    200e:	c4 5b       	subi	r28, 0xB4	; 180
    2010:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    2012:	cc 54       	subi	r28, 0x4C	; 76
    2014:	dd 4f       	sbci	r29, 0xFD	; 253
    2016:	68 81       	ld	r22, Y
    2018:	79 81       	ldd	r23, Y+1	; 0x01
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	c4 5b       	subi	r28, 0xB4	; 180
    2020:	d2 40       	sbci	r29, 0x02	; 2
    2022:	2c e0       	ldi	r18, 0x0C	; 12
    2024:	31 e0       	ldi	r19, 0x01	; 1
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	0e 94 84 21 	call	0x4308	; 0x4308 <__divmodsi4>
    202e:	f2 2e       	mov	r15, r18
    2030:	e3 2e       	mov	r14, r19
    2032:	d4 2e       	mov	r13, r20
    2034:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    2036:	ae 01       	movw	r20, r28
    2038:	48 54       	subi	r20, 0x48	; 72
    203a:	5d 4f       	sbci	r21, 0xFD	; 253
    203c:	62 e1       	ldi	r22, 0x12	; 18
    203e:	87 2d       	mov	r24, r7
    2040:	0e 94 5d 14 	call	0x28ba	; 0x28ba <get_MOTOREncoder>
			if (retval == ERROR) {
    2044:	83 36       	cpi	r24, 0x63	; 99
    2046:	61 f4       	brne	.+24     	; 0x2060 <report+0x30e>
				encoderSpeed = 0x7FFFFFFF;
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	9f ef       	ldi	r25, 0xFF	; 255
    204c:	af ef       	ldi	r26, 0xFF	; 255
    204e:	bf e7       	ldi	r27, 0x7F	; 127
    2050:	c8 54       	subi	r28, 0x48	; 72
    2052:	dd 4f       	sbci	r29, 0xFD	; 253
    2054:	88 83       	st	Y, r24
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	aa 83       	std	Y+2, r26	; 0x02
    205a:	bb 83       	std	Y+3, r27	; 0x03
    205c:	c8 5b       	subi	r28, 0xB8	; 184
    205e:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    2060:	c8 54       	subi	r28, 0x48	; 72
    2062:	dd 4f       	sbci	r29, 0xFD	; 253
    2064:	68 81       	ld	r22, Y
    2066:	79 81       	ldd	r23, Y+1	; 0x01
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	c8 5b       	subi	r28, 0xB8	; 184
    206e:	d2 40       	sbci	r29, 0x02	; 2
    2070:	2c e0       	ldi	r18, 0x0C	; 12
    2072:	31 e0       	ldi	r19, 0x01	; 1
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	0e 94 84 21 	call	0x4308	; 0x4308 <__divmodsi4>
    207c:	b2 2e       	mov	r11, r18
    207e:	a3 2e       	mov	r10, r19
    2080:	94 2e       	mov	r9, r20
    2082:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    2084:	ae 01       	movw	r20, r28
    2086:	44 54       	subi	r20, 0x44	; 68
    2088:	5d 4f       	sbci	r21, 0xFD	; 253
    208a:	61 e3       	ldi	r22, 0x31	; 49
    208c:	87 2d       	mov	r24, r7
    208e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <get_MOTORInt32>
			if (retval == ERROR) {
    2092:	83 36       	cpi	r24, 0x63	; 99
    2094:	61 f4       	brne	.+24     	; 0x20ae <report+0x35c>
				icurrents = 0x7FFFFFFF;
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	af ef       	ldi	r26, 0xFF	; 255
    209c:	bf e7       	ldi	r27, 0x7F	; 127
    209e:	c4 54       	subi	r28, 0x44	; 68
    20a0:	dd 4f       	sbci	r29, 0xFD	; 253
    20a2:	88 83       	st	Y, r24
    20a4:	99 83       	std	Y+1, r25	; 0x01
    20a6:	aa 83       	std	Y+2, r26	; 0x02
    20a8:	bb 83       	std	Y+3, r27	; 0x03
    20aa:	cc 5b       	subi	r28, 0xBC	; 188
    20ac:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    20ae:	c4 54       	subi	r28, 0x44	; 68
    20b0:	dd 4f       	sbci	r29, 0xFD	; 253
    20b2:	88 81       	ld	r24, Y
    20b4:	99 81       	ldd	r25, Y+1	; 0x01
    20b6:	aa 81       	ldd	r26, Y+2	; 0x02
    20b8:	bb 81       	ldd	r27, Y+3	; 0x03
    20ba:	cc 5b       	subi	r28, 0xBC	; 188
    20bc:	d2 40       	sbci	r29, 0x02	; 2
    20be:	cd 01       	movw	r24, r26
    20c0:	aa 27       	eor	r26, r26
    20c2:	bb 27       	eor	r27, r27
    20c4:	9c 01       	movw	r18, r24
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	82 0f       	add	r24, r18
    20d8:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    20da:	44 e3       	ldi	r20, 0x34	; 52
    20dc:	40 9f       	mul	r20, r16
    20de:	90 01       	movw	r18, r0
    20e0:	41 9f       	mul	r20, r17
    20e2:	30 0d       	add	r19, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	a9 01       	movw	r20, r18
    20e8:	4e 5c       	subi	r20, 0xCE	; 206
    20ea:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    20ec:	f9 01       	movw	r30, r18
    20ee:	e9 5f       	subi	r30, 0xF9	; 249
    20f0:	f7 4d       	sbci	r31, 0xD7	; 215
    20f2:	21 81       	ldd	r18, Z+1	; 0x01
    20f4:	5f 93       	push	r21
    20f6:	4f 93       	push	r20
    20f8:	9f 93       	push	r25
    20fa:	8f 93       	push	r24
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	1f 92       	push	r1
    210e:	2f 93       	push	r18
    2110:	ce 01       	movw	r24, r28
    2112:	86 5f       	subi	r24, 0xF6	; 246
    2114:	9e 4f       	sbci	r25, 0xFE	; 254
    2116:	9f 93       	push	r25
    2118:	8f 93       	push	r24
    211a:	8b 57       	subi	r24, 0x7B	; 123
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	9f 93       	push	r25
    2120:	8f 93       	push	r24
    2122:	8e 01       	movw	r16, r28
    2124:	0f 5f       	subi	r16, 0xFF	; 255
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	1f 93       	push	r17
    212a:	0f 93       	push	r16
    212c:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    2130:	c8 01       	movw	r24, r16
    2132:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    213a:	80 e0       	ldi	r24, 0x00	; 0
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    213c:	82 c3       	rjmp	.+1796   	; 0x2842 <report+0xaf0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
    2144:	c0 54       	subi	r28, 0x40	; 64
    2146:	dd 4f       	sbci	r29, 0xFD	; 253
    2148:	68 83       	st	Y, r22
    214a:	79 83       	std	Y+1, r23	; 0x01
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	9b 83       	std	Y+3, r25	; 0x03
    2150:	c0 5c       	subi	r28, 0xC0	; 192
    2152:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 63 07 	call	0xec6	; 0xec6 <get_humidity>
    215a:	d6 2e       	mov	r13, r22
    215c:	c7 2e       	mov	r12, r23
    215e:	b8 2e       	mov	r11, r24
    2160:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
    2168:	cc 52       	subi	r28, 0x2C	; 44
    216a:	dd 4f       	sbci	r29, 0xFD	; 253
    216c:	68 83       	st	Y, r22
    216e:	c4 5d       	subi	r28, 0xD4	; 212
    2170:	d2 40       	sbci	r29, 0x02	; 2
    2172:	cb 52       	subi	r28, 0x2B	; 43
    2174:	dd 4f       	sbci	r29, 0xFD	; 253
    2176:	78 83       	st	Y, r23
    2178:	c5 5d       	subi	r28, 0xD5	; 213
    217a:	d2 40       	sbci	r29, 0x02	; 2
    217c:	ca 52       	subi	r28, 0x2A	; 42
    217e:	dd 4f       	sbci	r29, 0xFD	; 253
    2180:	88 83       	st	Y, r24
    2182:	c6 5d       	subi	r28, 0xD6	; 214
    2184:	d2 40       	sbci	r29, 0x02	; 2
    2186:	c9 52       	subi	r28, 0x29	; 41
    2188:	dd 4f       	sbci	r29, 0xFD	; 253
    218a:	98 83       	st	Y, r25
    218c:	c7 5d       	subi	r28, 0xD7	; 215
    218e:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0e 94 63 07 	call	0xec6	; 0xec6 <get_humidity>
    2196:	c8 52       	subi	r28, 0x28	; 40
    2198:	dd 4f       	sbci	r29, 0xFD	; 253
    219a:	68 83       	st	Y, r22
    219c:	c8 5d       	subi	r28, 0xD8	; 216
    219e:	d2 40       	sbci	r29, 0x02	; 2
    21a0:	c7 52       	subi	r28, 0x27	; 39
    21a2:	dd 4f       	sbci	r29, 0xFD	; 253
    21a4:	78 83       	st	Y, r23
    21a6:	c9 5d       	subi	r28, 0xD9	; 217
    21a8:	d2 40       	sbci	r29, 0x02	; 2
    21aa:	c6 52       	subi	r28, 0x26	; 38
    21ac:	dd 4f       	sbci	r29, 0xFD	; 253
    21ae:	88 83       	st	Y, r24
    21b0:	ca 5d       	subi	r28, 0xDA	; 218
    21b2:	d2 40       	sbci	r29, 0x02	; 2
    21b4:	c5 52       	subi	r28, 0x25	; 37
    21b6:	dd 4f       	sbci	r29, 0xFD	; 253
    21b8:	98 83       	st	Y, r25
    21ba:	cb 5d       	subi	r28, 0xDB	; 219
    21bc:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
    21c4:	c4 52       	subi	r28, 0x24	; 36
    21c6:	dd 4f       	sbci	r29, 0xFD	; 253
    21c8:	68 83       	st	Y, r22
    21ca:	cc 5d       	subi	r28, 0xDC	; 220
    21cc:	d2 40       	sbci	r29, 0x02	; 2
    21ce:	c3 52       	subi	r28, 0x23	; 35
    21d0:	dd 4f       	sbci	r29, 0xFD	; 253
    21d2:	78 83       	st	Y, r23
    21d4:	cd 5d       	subi	r28, 0xDD	; 221
    21d6:	d2 40       	sbci	r29, 0x02	; 2
    21d8:	98 2e       	mov	r9, r24
    21da:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	0e 94 63 07 	call	0xec6	; 0xec6 <get_humidity>
    21e2:	76 2e       	mov	r7, r22
    21e4:	67 2e       	mov	r6, r23
    21e6:	58 2e       	mov	r5, r24
    21e8:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	0e 94 32 18 	call	0x3064	; 0x3064 <get_temperature>
    21f0:	c2 52       	subi	r28, 0x22	; 34
    21f2:	dd 4f       	sbci	r29, 0xFD	; 253
    21f4:	68 83       	st	Y, r22
    21f6:	ce 5d       	subi	r28, 0xDE	; 222
    21f8:	d2 40       	sbci	r29, 0x02	; 2
    21fa:	c1 52       	subi	r28, 0x21	; 33
    21fc:	dd 4f       	sbci	r29, 0xFD	; 253
    21fe:	78 83       	st	Y, r23
    2200:	cf 5d       	subi	r28, 0xDF	; 223
    2202:	d2 40       	sbci	r29, 0x02	; 2
    2204:	38 2e       	mov	r3, r24
    2206:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2208:	7e 01       	movw	r14, r28
    220a:	96 ef       	ldi	r25, 0xF6	; 246
    220c:	e9 1a       	sub	r14, r25
    220e:	9e ef       	ldi	r25, 0xFE	; 254
    2210:	f9 0a       	sbc	r15, r25
    2212:	c7 01       	movw	r24, r14
    2214:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2218:	24 e3       	ldi	r18, 0x34	; 52
    221a:	20 9f       	mul	r18, r16
    221c:	c0 01       	movw	r24, r0
    221e:	21 9f       	mul	r18, r17
    2220:	90 0d       	add	r25, r0
    2222:	11 24       	eor	r1, r1
    2224:	8e 5c       	subi	r24, 0xCE	; 206
    2226:	97 4d       	sbci	r25, 0xD7	; 215
    2228:	9f 93       	push	r25
    222a:	8f 93       	push	r24
    222c:	2f 92       	push	r2
    222e:	3f 92       	push	r3
    2230:	c1 52       	subi	r28, 0x21	; 33
    2232:	dd 4f       	sbci	r29, 0xFD	; 253
    2234:	88 81       	ld	r24, Y
    2236:	cf 5d       	subi	r28, 0xDF	; 223
    2238:	d2 40       	sbci	r29, 0x02	; 2
    223a:	8f 93       	push	r24
    223c:	c2 52       	subi	r28, 0x22	; 34
    223e:	dd 4f       	sbci	r29, 0xFD	; 253
    2240:	98 81       	ld	r25, Y
    2242:	ce 5d       	subi	r28, 0xDE	; 222
    2244:	d2 40       	sbci	r29, 0x02	; 2
    2246:	9f 93       	push	r25
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	c3 52       	subi	r28, 0x23	; 35
    2256:	dd 4f       	sbci	r29, 0xFD	; 253
    2258:	88 81       	ld	r24, Y
    225a:	cd 5d       	subi	r28, 0xDD	; 221
    225c:	d2 40       	sbci	r29, 0x02	; 2
    225e:	8f 93       	push	r24
    2260:	c4 52       	subi	r28, 0x24	; 36
    2262:	dd 4f       	sbci	r29, 0xFD	; 253
    2264:	98 81       	ld	r25, Y
    2266:	cc 5d       	subi	r28, 0xDC	; 220
    2268:	d2 40       	sbci	r29, 0x02	; 2
    226a:	9f 93       	push	r25
    226c:	c5 52       	subi	r28, 0x25	; 37
    226e:	dd 4f       	sbci	r29, 0xFD	; 253
    2270:	88 81       	ld	r24, Y
    2272:	cb 5d       	subi	r28, 0xDB	; 219
    2274:	d2 40       	sbci	r29, 0x02	; 2
    2276:	8f 93       	push	r24
    2278:	c6 52       	subi	r28, 0x26	; 38
    227a:	dd 4f       	sbci	r29, 0xFD	; 253
    227c:	98 81       	ld	r25, Y
    227e:	ca 5d       	subi	r28, 0xDA	; 218
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	9f 93       	push	r25
    2284:	c7 52       	subi	r28, 0x27	; 39
    2286:	dd 4f       	sbci	r29, 0xFD	; 253
    2288:	88 81       	ld	r24, Y
    228a:	c9 5d       	subi	r28, 0xD9	; 217
    228c:	d2 40       	sbci	r29, 0x02	; 2
    228e:	8f 93       	push	r24
    2290:	c8 52       	subi	r28, 0x28	; 40
    2292:	dd 4f       	sbci	r29, 0xFD	; 253
    2294:	98 81       	ld	r25, Y
    2296:	c8 5d       	subi	r28, 0xD8	; 216
    2298:	d2 40       	sbci	r29, 0x02	; 2
    229a:	9f 93       	push	r25
    229c:	c9 52       	subi	r28, 0x29	; 41
    229e:	dd 4f       	sbci	r29, 0xFD	; 253
    22a0:	88 81       	ld	r24, Y
    22a2:	c7 5d       	subi	r28, 0xD7	; 215
    22a4:	d2 40       	sbci	r29, 0x02	; 2
    22a6:	8f 93       	push	r24
    22a8:	ca 52       	subi	r28, 0x2A	; 42
    22aa:	dd 4f       	sbci	r29, 0xFD	; 253
    22ac:	98 81       	ld	r25, Y
    22ae:	c6 5d       	subi	r28, 0xD6	; 214
    22b0:	d2 40       	sbci	r29, 0x02	; 2
    22b2:	9f 93       	push	r25
    22b4:	cb 52       	subi	r28, 0x2B	; 43
    22b6:	dd 4f       	sbci	r29, 0xFD	; 253
    22b8:	88 81       	ld	r24, Y
    22ba:	c5 5d       	subi	r28, 0xD5	; 213
    22bc:	d2 40       	sbci	r29, 0x02	; 2
    22be:	8f 93       	push	r24
    22c0:	cc 52       	subi	r28, 0x2C	; 44
    22c2:	dd 4f       	sbci	r29, 0xFD	; 253
    22c4:	98 81       	ld	r25, Y
    22c6:	c4 5d       	subi	r28, 0xD4	; 212
    22c8:	d2 40       	sbci	r29, 0x02	; 2
    22ca:	9f 93       	push	r25
    22cc:	af 92       	push	r10
    22ce:	bf 92       	push	r11
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	cd 53       	subi	r28, 0x3D	; 61
    22d6:	dd 4f       	sbci	r29, 0xFD	; 253
    22d8:	88 81       	ld	r24, Y
    22da:	c3 5c       	subi	r28, 0xC3	; 195
    22dc:	d2 40       	sbci	r29, 0x02	; 2
    22de:	8f 93       	push	r24
    22e0:	ce 53       	subi	r28, 0x3E	; 62
    22e2:	dd 4f       	sbci	r29, 0xFD	; 253
    22e4:	88 81       	ld	r24, Y
    22e6:	c2 5c       	subi	r28, 0xC2	; 194
    22e8:	d2 40       	sbci	r29, 0x02	; 2
    22ea:	8f 93       	push	r24
    22ec:	cf 53       	subi	r28, 0x3F	; 63
    22ee:	dd 4f       	sbci	r29, 0xFD	; 253
    22f0:	88 81       	ld	r24, Y
    22f2:	c1 5c       	subi	r28, 0xC1	; 193
    22f4:	d2 40       	sbci	r29, 0x02	; 2
    22f6:	8f 93       	push	r24
    22f8:	c0 54       	subi	r28, 0x40	; 64
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	88 81       	ld	r24, Y
    22fe:	c0 5c       	subi	r28, 0xC0	; 192
    2300:	d2 40       	sbci	r29, 0x02	; 2
    2302:	8f 93       	push	r24
    2304:	ff 92       	push	r15
    2306:	ef 92       	push	r14
    2308:	ce 01       	movw	r24, r28
    230a:	86 5b       	subi	r24, 0xB6	; 182
    230c:	9e 4f       	sbci	r25, 0xFE	; 254
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	8e 01       	movw	r16, r28
    2314:	0f 5f       	subi	r16, 0xFF	; 255
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	1f 93       	push	r17
    231a:	0f 93       	push	r16
    231c:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			printLine(outbuf);
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	c8 01       	movw	r24, r16
    2326:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	61 e2       	ldi	r22, 0x21	; 33
    232e:	7a e8       	ldi	r23, 0x8A	; 138
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2336:	c0 54       	subi	r28, 0x40	; 64
    2338:	dd 4f       	sbci	r29, 0xFD	; 253
    233a:	f8 80       	ld	r15, Y
    233c:	c0 5c       	subi	r28, 0xC0	; 192
    233e:	d2 40       	sbci	r29, 0x02	; 2
    2340:	cf 53       	subi	r28, 0x3F	; 63
    2342:	dd 4f       	sbci	r29, 0xFD	; 253
    2344:	e8 80       	ld	r14, Y
    2346:	c1 5c       	subi	r28, 0xC1	; 193
    2348:	d2 40       	sbci	r29, 0x02	; 2
    234a:	ce 53       	subi	r28, 0x3E	; 62
    234c:	dd 4f       	sbci	r29, 0xFD	; 253
    234e:	98 80       	ld	r9, Y
    2350:	c2 5c       	subi	r28, 0xC2	; 194
    2352:	d2 40       	sbci	r29, 0x02	; 2
    2354:	cd 53       	subi	r28, 0x3D	; 61
    2356:	dd 4f       	sbci	r29, 0xFD	; 253
    2358:	88 80       	ld	r8, Y
    235a:	c3 5c       	subi	r28, 0xC3	; 195
    235c:	d2 40       	sbci	r29, 0x02	; 2
    235e:	26 e6       	ldi	r18, 0x66	; 102
    2360:	36 e6       	ldi	r19, 0x66	; 102
    2362:	46 ee       	ldi	r20, 0xE6	; 230
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	6f 2d       	mov	r22, r15
    2368:	7e 2d       	mov	r23, r14
    236a:	89 2d       	mov	r24, r9
    236c:	98 2d       	mov	r25, r8
    236e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsf3>
    2372:	af 92       	push	r10
    2374:	bf 92       	push	r11
    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	52 e4       	ldi	r21, 0x42	; 66
    2382:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__addsf3>
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	7f 93       	push	r23
    238c:	6f 93       	push	r22
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	81 e3       	ldi	r24, 0x31	; 49
    2398:	9a e8       	ldi	r25, 0x8A	; 138
    239a:	9f 93       	push	r25
    239c:	8f 93       	push	r24
    239e:	1f 93       	push	r17
    23a0:	0f 93       	push	r16
    23a2:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			writestr_OLED(1, outbuf, 2);
    23a6:	42 e0       	ldi	r20, 0x02	; 2
    23a8:	b8 01       	movw	r22, r16
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			break;
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    23b6:	45 c2       	rjmp	.+1162   	; 0x2842 <report+0xaf0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    23b8:	ae 01       	movw	r20, r28
    23ba:	40 53       	subi	r20, 0x30	; 48
    23bc:	5d 4f       	sbci	r21, 0xFD	; 253
    23be:	be 01       	movw	r22, r28
    23c0:	64 53       	subi	r22, 0x34	; 52
    23c2:	7d 4f       	sbci	r23, 0xFD	; 253
    23c4:	ce 01       	movw	r24, r28
    23c6:	88 53       	subi	r24, 0x38	; 56
    23c8:	9d 4f       	sbci	r25, 0xFD	; 253
    23ca:	0e 94 a6 09 	call	0x134c	; 0x134c <get_orientation>
			get_time(currenttime);
    23ce:	7e 01       	movw	r14, r28
    23d0:	96 ef       	ldi	r25, 0xF6	; 246
    23d2:	e9 1a       	sub	r14, r25
    23d4:	9e ef       	ldi	r25, 0xFE	; 254
    23d6:	f9 0a       	sbc	r15, r25
    23d8:	c7 01       	movw	r24, r14
    23da:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    23de:	24 e3       	ldi	r18, 0x34	; 52
    23e0:	20 9f       	mul	r18, r16
    23e2:	c0 01       	movw	r24, r0
    23e4:	21 9f       	mul	r18, r17
    23e6:	90 0d       	add	r25, r0
    23e8:	11 24       	eor	r1, r1
    23ea:	8e 5c       	subi	r24, 0xCE	; 206
    23ec:	97 4d       	sbci	r25, 0xD7	; 215
    23ee:	9f 93       	push	r25
    23f0:	8f 93       	push	r24
    23f2:	cd 52       	subi	r28, 0x2D	; 45
    23f4:	dd 4f       	sbci	r29, 0xFD	; 253
    23f6:	88 81       	ld	r24, Y
    23f8:	c3 5d       	subi	r28, 0xD3	; 211
    23fa:	d2 40       	sbci	r29, 0x02	; 2
    23fc:	8f 93       	push	r24
    23fe:	ce 52       	subi	r28, 0x2E	; 46
    2400:	dd 4f       	sbci	r29, 0xFD	; 253
    2402:	88 81       	ld	r24, Y
    2404:	c2 5d       	subi	r28, 0xD2	; 210
    2406:	d2 40       	sbci	r29, 0x02	; 2
    2408:	8f 93       	push	r24
    240a:	cf 52       	subi	r28, 0x2F	; 47
    240c:	dd 4f       	sbci	r29, 0xFD	; 253
    240e:	88 81       	ld	r24, Y
    2410:	c1 5d       	subi	r28, 0xD1	; 209
    2412:	d2 40       	sbci	r29, 0x02	; 2
    2414:	8f 93       	push	r24
    2416:	c0 53       	subi	r28, 0x30	; 48
    2418:	dd 4f       	sbci	r29, 0xFD	; 253
    241a:	88 81       	ld	r24, Y
    241c:	c0 5d       	subi	r28, 0xD0	; 208
    241e:	d2 40       	sbci	r29, 0x02	; 2
    2420:	8f 93       	push	r24
    2422:	c1 53       	subi	r28, 0x31	; 49
    2424:	dd 4f       	sbci	r29, 0xFD	; 253
    2426:	88 81       	ld	r24, Y
    2428:	cf 5c       	subi	r28, 0xCF	; 207
    242a:	d2 40       	sbci	r29, 0x02	; 2
    242c:	8f 93       	push	r24
    242e:	c2 53       	subi	r28, 0x32	; 50
    2430:	dd 4f       	sbci	r29, 0xFD	; 253
    2432:	88 81       	ld	r24, Y
    2434:	ce 5c       	subi	r28, 0xCE	; 206
    2436:	d2 40       	sbci	r29, 0x02	; 2
    2438:	8f 93       	push	r24
    243a:	c3 53       	subi	r28, 0x33	; 51
    243c:	dd 4f       	sbci	r29, 0xFD	; 253
    243e:	88 81       	ld	r24, Y
    2440:	cd 5c       	subi	r28, 0xCD	; 205
    2442:	d2 40       	sbci	r29, 0x02	; 2
    2444:	8f 93       	push	r24
    2446:	c4 53       	subi	r28, 0x34	; 52
    2448:	dd 4f       	sbci	r29, 0xFD	; 253
    244a:	88 81       	ld	r24, Y
    244c:	cc 5c       	subi	r28, 0xCC	; 204
    244e:	d2 40       	sbci	r29, 0x02	; 2
    2450:	8f 93       	push	r24
    2452:	c5 53       	subi	r28, 0x35	; 53
    2454:	dd 4f       	sbci	r29, 0xFD	; 253
    2456:	88 81       	ld	r24, Y
    2458:	cb 5c       	subi	r28, 0xCB	; 203
    245a:	d2 40       	sbci	r29, 0x02	; 2
    245c:	8f 93       	push	r24
    245e:	c6 53       	subi	r28, 0x36	; 54
    2460:	dd 4f       	sbci	r29, 0xFD	; 253
    2462:	88 81       	ld	r24, Y
    2464:	ca 5c       	subi	r28, 0xCA	; 202
    2466:	d2 40       	sbci	r29, 0x02	; 2
    2468:	8f 93       	push	r24
    246a:	c7 53       	subi	r28, 0x37	; 55
    246c:	dd 4f       	sbci	r29, 0xFD	; 253
    246e:	88 81       	ld	r24, Y
    2470:	c9 5c       	subi	r28, 0xC9	; 201
    2472:	d2 40       	sbci	r29, 0x02	; 2
    2474:	8f 93       	push	r24
    2476:	c8 53       	subi	r28, 0x38	; 56
    2478:	dd 4f       	sbci	r29, 0xFD	; 253
    247a:	88 81       	ld	r24, Y
    247c:	c8 5c       	subi	r28, 0xC8	; 200
    247e:	d2 40       	sbci	r29, 0x02	; 2
    2480:	8f 93       	push	r24
    2482:	ff 92       	push	r15
    2484:	ef 92       	push	r14
    2486:	ce 01       	movw	r24, r28
    2488:	85 52       	subi	r24, 0x25	; 37
    248a:	9e 4f       	sbci	r25, 0xFE	; 254
    248c:	9f 93       	push	r25
    248e:	8f 93       	push	r24
    2490:	8e 01       	movw	r16, r28
    2492:	0f 5f       	subi	r16, 0xFF	; 255
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	1f 93       	push	r17
    2498:	0f 93       	push	r16
    249a:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			printLine(outbuf);
    249e:	c8 01       	movw	r24, r16
    24a0:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Orientation", 1);
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	67 e4       	ldi	r22, 0x47	; 71
    24a8:	7a e8       	ldi	r23, 0x8A	; 138
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    24b0:	cd 52       	subi	r28, 0x2D	; 45
    24b2:	dd 4f       	sbci	r29, 0xFD	; 253
    24b4:	88 81       	ld	r24, Y
    24b6:	c3 5d       	subi	r28, 0xD3	; 211
    24b8:	d2 40       	sbci	r29, 0x02	; 2
    24ba:	8f 93       	push	r24
    24bc:	ce 52       	subi	r28, 0x2E	; 46
    24be:	dd 4f       	sbci	r29, 0xFD	; 253
    24c0:	88 81       	ld	r24, Y
    24c2:	c2 5d       	subi	r28, 0xD2	; 210
    24c4:	d2 40       	sbci	r29, 0x02	; 2
    24c6:	8f 93       	push	r24
    24c8:	cf 52       	subi	r28, 0x2F	; 47
    24ca:	dd 4f       	sbci	r29, 0xFD	; 253
    24cc:	88 81       	ld	r24, Y
    24ce:	c1 5d       	subi	r28, 0xD1	; 209
    24d0:	d2 40       	sbci	r29, 0x02	; 2
    24d2:	8f 93       	push	r24
    24d4:	c0 53       	subi	r28, 0x30	; 48
    24d6:	dd 4f       	sbci	r29, 0xFD	; 253
    24d8:	88 81       	ld	r24, Y
    24da:	c0 5d       	subi	r28, 0xD0	; 208
    24dc:	d2 40       	sbci	r29, 0x02	; 2
    24de:	8f 93       	push	r24
    24e0:	c1 53       	subi	r28, 0x31	; 49
    24e2:	dd 4f       	sbci	r29, 0xFD	; 253
    24e4:	88 81       	ld	r24, Y
    24e6:	cf 5c       	subi	r28, 0xCF	; 207
    24e8:	d2 40       	sbci	r29, 0x02	; 2
    24ea:	8f 93       	push	r24
    24ec:	c2 53       	subi	r28, 0x32	; 50
    24ee:	dd 4f       	sbci	r29, 0xFD	; 253
    24f0:	88 81       	ld	r24, Y
    24f2:	ce 5c       	subi	r28, 0xCE	; 206
    24f4:	d2 40       	sbci	r29, 0x02	; 2
    24f6:	8f 93       	push	r24
    24f8:	c3 53       	subi	r28, 0x33	; 51
    24fa:	dd 4f       	sbci	r29, 0xFD	; 253
    24fc:	88 81       	ld	r24, Y
    24fe:	cd 5c       	subi	r28, 0xCD	; 205
    2500:	d2 40       	sbci	r29, 0x02	; 2
    2502:	8f 93       	push	r24
    2504:	c4 53       	subi	r28, 0x34	; 52
    2506:	dd 4f       	sbci	r29, 0xFD	; 253
    2508:	88 81       	ld	r24, Y
    250a:	cc 5c       	subi	r28, 0xCC	; 204
    250c:	d2 40       	sbci	r29, 0x02	; 2
    250e:	8f 93       	push	r24
    2510:	c5 53       	subi	r28, 0x35	; 53
    2512:	dd 4f       	sbci	r29, 0xFD	; 253
    2514:	88 81       	ld	r24, Y
    2516:	cb 5c       	subi	r28, 0xCB	; 203
    2518:	d2 40       	sbci	r29, 0x02	; 2
    251a:	8f 93       	push	r24
    251c:	c6 53       	subi	r28, 0x36	; 54
    251e:	dd 4f       	sbci	r29, 0xFD	; 253
    2520:	88 81       	ld	r24, Y
    2522:	ca 5c       	subi	r28, 0xCA	; 202
    2524:	d2 40       	sbci	r29, 0x02	; 2
    2526:	8f 93       	push	r24
    2528:	c7 53       	subi	r28, 0x37	; 55
    252a:	dd 4f       	sbci	r29, 0xFD	; 253
    252c:	88 81       	ld	r24, Y
    252e:	c9 5c       	subi	r28, 0xC9	; 201
    2530:	d2 40       	sbci	r29, 0x02	; 2
    2532:	8f 93       	push	r24
    2534:	c8 53       	subi	r28, 0x38	; 56
    2536:	dd 4f       	sbci	r29, 0xFD	; 253
    2538:	88 81       	ld	r24, Y
    253a:	c8 5c       	subi	r28, 0xC8	; 200
    253c:	d2 40       	sbci	r29, 0x02	; 2
    253e:	8f 93       	push	r24
    2540:	ce 01       	movw	r24, r28
    2542:	89 50       	subi	r24, 0x09	; 9
    2544:	9e 4f       	sbci	r25, 0xFE	; 254
    2546:	9f 93       	push	r25
    2548:	8f 93       	push	r24
    254a:	1f 93       	push	r17
    254c:	0f 93       	push	r16
    254e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	42 e0       	ldi	r20, 0x02	; 2
    2558:	b8 01       	movw	r22, r16
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2560:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2562:	6f c1       	rjmp	.+734    	; 0x2842 <report+0xaf0>

		case 'p':
			get_time(currenttime);
    2564:	7e 01       	movw	r14, r28
    2566:	96 ef       	ldi	r25, 0xF6	; 246
    2568:	e9 1a       	sub	r14, r25
    256a:	9e ef       	ldi	r25, 0xFE	; 254
    256c:	f9 0a       	sbc	r15, r25
    256e:	c7 01       	movw	r24, r14
    2570:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2574:	9e 01       	movw	r18, r28
    2576:	27 5b       	subi	r18, 0xB7	; 183
    2578:	3e 4f       	sbci	r19, 0xFE	; 254
    257a:	ae 01       	movw	r20, r28
    257c:	48 5b       	subi	r20, 0xB8	; 184
    257e:	5e 4f       	sbci	r21, 0xFE	; 254
    2580:	be 01       	movw	r22, r28
    2582:	69 5b       	subi	r22, 0xB9	; 185
    2584:	7e 4f       	sbci	r23, 0xFE	; 254
    2586:	ce 01       	movw	r24, r28
    2588:	8a 5b       	subi	r24, 0xBA	; 186
    258a:	9e 4f       	sbci	r25, 0xFE	; 254
    258c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2590:	24 e3       	ldi	r18, 0x34	; 52
    2592:	20 9f       	mul	r18, r16
    2594:	c0 01       	movw	r24, r0
    2596:	21 9f       	mul	r18, r17
    2598:	90 0d       	add	r25, r0
    259a:	11 24       	eor	r1, r1
    259c:	8e 5c       	subi	r24, 0xCE	; 206
    259e:	97 4d       	sbci	r25, 0xD7	; 215
    25a0:	9f 93       	push	r25
    25a2:	8f 93       	push	r24
    25a4:	c7 5b       	subi	r28, 0xB7	; 183
    25a6:	de 4f       	sbci	r29, 0xFE	; 254
    25a8:	88 81       	ld	r24, Y
    25aa:	c9 54       	subi	r28, 0x49	; 73
    25ac:	d1 40       	sbci	r29, 0x01	; 1
    25ae:	1f 92       	push	r1
    25b0:	8f 93       	push	r24
    25b2:	c8 5b       	subi	r28, 0xB8	; 184
    25b4:	de 4f       	sbci	r29, 0xFE	; 254
    25b6:	88 81       	ld	r24, Y
    25b8:	c8 54       	subi	r28, 0x48	; 72
    25ba:	d1 40       	sbci	r29, 0x01	; 1
    25bc:	1f 92       	push	r1
    25be:	8f 93       	push	r24
    25c0:	c9 5b       	subi	r28, 0xB9	; 185
    25c2:	de 4f       	sbci	r29, 0xFE	; 254
    25c4:	88 81       	ld	r24, Y
    25c6:	c7 54       	subi	r28, 0x47	; 71
    25c8:	d1 40       	sbci	r29, 0x01	; 1
    25ca:	1f 92       	push	r1
    25cc:	8f 93       	push	r24
    25ce:	ca 5b       	subi	r28, 0xBA	; 186
    25d0:	de 4f       	sbci	r29, 0xFE	; 254
    25d2:	88 81       	ld	r24, Y
    25d4:	c6 54       	subi	r28, 0x46	; 70
    25d6:	d1 40       	sbci	r29, 0x01	; 1
    25d8:	1f 92       	push	r1
    25da:	8f 93       	push	r24
    25dc:	ff 92       	push	r15
    25de:	ef 92       	push	r14
    25e0:	ce 01       	movw	r24, r28
    25e2:	87 5f       	subi	r24, 0xF7	; 247
    25e4:	9d 4f       	sbci	r25, 0xFD	; 253
    25e6:	9f 93       	push	r25
    25e8:	8f 93       	push	r24
    25ea:	8e 01       	movw	r16, r28
    25ec:	0f 5f       	subi	r16, 0xFF	; 255
    25ee:	1f 4f       	sbci	r17, 0xFF	; 255
    25f0:	1f 93       	push	r17
    25f2:	0f 93       	push	r16
    25f4:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			printLine(outbuf);
    25f8:	c8 01       	movw	r24, r16
    25fa:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			sprintf(outbuf, dformat_PN1, left, right);
    25fe:	c8 5b       	subi	r28, 0xB8	; 184
    2600:	de 4f       	sbci	r29, 0xFE	; 254
    2602:	88 81       	ld	r24, Y
    2604:	c8 54       	subi	r28, 0x48	; 72
    2606:	d1 40       	sbci	r29, 0x01	; 1
    2608:	1f 92       	push	r1
    260a:	8f 93       	push	r24
    260c:	c9 5b       	subi	r28, 0xB9	; 185
    260e:	de 4f       	sbci	r29, 0xFE	; 254
    2610:	88 81       	ld	r24, Y
    2612:	c7 54       	subi	r28, 0x47	; 71
    2614:	d1 40       	sbci	r29, 0x01	; 1
    2616:	1f 92       	push	r1
    2618:	8f 93       	push	r24
    261a:	ce 01       	movw	r24, r28
    261c:	8a 5c       	subi	r24, 0xCA	; 202
    261e:	9d 4f       	sbci	r25, 0xFD	; 253
    2620:	9f 93       	push	r25
    2622:	8f 93       	push	r24
    2624:	1f 93       	push	r17
    2626:	0f 93       	push	r16
    2628:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			writestr_OLED(1, outbuf, 1);
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	b8 01       	movw	r22, r16
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2636:	c7 5b       	subi	r28, 0xB7	; 183
    2638:	de 4f       	sbci	r29, 0xFE	; 254
    263a:	88 81       	ld	r24, Y
    263c:	c9 54       	subi	r28, 0x49	; 73
    263e:	d1 40       	sbci	r29, 0x01	; 1
    2640:	1f 92       	push	r1
    2642:	8f 93       	push	r24
    2644:	ca 5b       	subi	r28, 0xBA	; 186
    2646:	de 4f       	sbci	r29, 0xFE	; 254
    2648:	88 81       	ld	r24, Y
    264a:	c6 54       	subi	r28, 0x46	; 70
    264c:	d1 40       	sbci	r29, 0x01	; 1
    264e:	1f 92       	push	r1
    2650:	8f 93       	push	r24
    2652:	ce 01       	movw	r24, r28
    2654:	87 5b       	subi	r24, 0xB7	; 183
    2656:	9d 4f       	sbci	r25, 0xFD	; 253
    2658:	9f 93       	push	r25
    265a:	8f 93       	push	r24
    265c:	1f 93       	push	r17
    265e:	0f 93       	push	r16
    2660:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	42 e0       	ldi	r20, 0x02	; 2
    266a:	b8 01       	movw	r22, r16
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2672:	80 e0       	ldi	r24, 0x00	; 0

			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2674:	e6 c0       	rjmp	.+460    	; 0x2842 <report+0xaf0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2676:	7e 01       	movw	r14, r28
    2678:	96 ef       	ldi	r25, 0xF6	; 246
    267a:	e9 1a       	sub	r14, r25
    267c:	9e ef       	ldi	r25, 0xFE	; 254
    267e:	f9 0a       	sbc	r15, r25
    2680:	c7 01       	movw	r24, r14
    2682:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			get_SETTIME(lastsettime);
    2686:	6e 01       	movw	r12, r28
    2688:	82 ee       	ldi	r24, 0xE2	; 226
    268a:	c8 1a       	sub	r12, r24
    268c:	8e ef       	ldi	r24, 0xFE	; 254
    268e:	d8 0a       	sbc	r13, r24
    2690:	c6 01       	movw	r24, r12
    2692:	0e 94 01 07 	call	0xe02	; 0xe02 <get_SETTIME>
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
    2696:	5e 01       	movw	r10, r28
    2698:	9e ec       	ldi	r25, 0xCE	; 206
    269a:	a9 1a       	sub	r10, r25
    269c:	9e ef       	ldi	r25, 0xFE	; 254
    269e:	b9 0a       	sbc	r11, r25
    26a0:	c5 01       	movw	r24, r10
    26a2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    26a6:	24 e3       	ldi	r18, 0x34	; 52
    26a8:	20 9f       	mul	r18, r16
    26aa:	c0 01       	movw	r24, r0
    26ac:	21 9f       	mul	r18, r17
    26ae:	90 0d       	add	r25, r0
    26b0:	11 24       	eor	r1, r1
    26b2:	8e 5c       	subi	r24, 0xCE	; 206
    26b4:	97 4d       	sbci	r25, 0xD7	; 215
		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    26b6:	9f 93       	push	r25
    26b8:	8f 93       	push	r24
    26ba:	bf 92       	push	r11
    26bc:	af 92       	push	r10
    26be:	df 92       	push	r13
    26c0:	cf 92       	push	r12
    26c2:	ff 92       	push	r15
    26c4:	ef 92       	push	r14
    26c6:	ce 01       	movw	r24, r28
    26c8:	84 5a       	subi	r24, 0xA4	; 164
    26ca:	9d 4f       	sbci	r25, 0xFD	; 253
    26cc:	9f 93       	push	r25
    26ce:	8f 93       	push	r24
    26d0:	8e 01       	movw	r16, r28
    26d2:	0f 5f       	subi	r16, 0xFF	; 255
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	1f 93       	push	r17
    26d8:	0f 93       	push	r16
    26da:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    26de:	c8 01       	movw	r24, r16
    26e0:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Time", 1);
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	63 e5       	ldi	r22, 0x53	; 83
    26e8:	7a e8       	ldi	r23, 0x8A	; 138
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    26f0:	b7 01       	movw	r22, r14
    26f2:	65 5f       	subi	r22, 0xF5	; 245
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	42 e0       	ldi	r20, 0x02	; 2
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			break;
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2702:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2704:	9e c0       	rjmp	.+316    	; 0x2842 <report+0xaf0>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	0e 94 2e 08 	call	0x105c	; 0x105c <read_ionpump>
    270c:	d6 2e       	mov	r13, r22
    270e:	c7 2e       	mov	r12, r23
    2710:	b8 2e       	mov	r11, r24
    2712:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	0e 94 2e 08 	call	0x105c	; 0x105c <read_ionpump>
    271a:	96 2e       	mov	r9, r22
    271c:	87 2e       	mov	r8, r23
    271e:	78 2e       	mov	r7, r24
    2720:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2722:	7e 01       	movw	r14, r28
    2724:	96 ef       	ldi	r25, 0xF6	; 246
    2726:	e9 1a       	sub	r14, r25
    2728:	9e ef       	ldi	r25, 0xFE	; 254
    272a:	f9 0a       	sbc	r15, r25
    272c:	c7 01       	movw	r24, r14
    272e:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2732:	24 e3       	ldi	r18, 0x34	; 52
    2734:	20 9f       	mul	r18, r16
    2736:	c0 01       	movw	r24, r0
    2738:	21 9f       	mul	r18, r17
    273a:	90 0d       	add	r25, r0
    273c:	11 24       	eor	r1, r1
    273e:	8e 5c       	subi	r24, 0xCE	; 206
    2740:	97 4d       	sbci	r25, 0xD7	; 215
    2742:	9f 93       	push	r25
    2744:	8f 93       	push	r24
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ff 92       	push	r15
    2758:	ef 92       	push	r14
    275a:	ce 01       	movw	r24, r28
    275c:	8b 58       	subi	r24, 0x8B	; 139
    275e:	9d 4f       	sbci	r25, 0xFD	; 253
    2760:	9f 93       	push	r25
    2762:	8f 93       	push	r24
    2764:	8e 01       	movw	r16, r28
    2766:	0f 5f       	subi	r16, 0xFF	; 255
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	1f 93       	push	r17
    276c:	0f 93       	push	r16
    276e:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			printLine(outbuf);
    2772:	c8 01       	movw	r24, r16
    2774:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			writestr_OLED(1, "RedVac  BlueVac", 1);
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	68 e5       	ldi	r22, 0x58	; 88
    277c:	7a e8       	ldi	r23, 0x8A	; 138
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2784:	6f 92       	push	r6
    2786:	7f 92       	push	r7
    2788:	8f 92       	push	r8
    278a:	9f 92       	push	r9
    278c:	af 92       	push	r10
    278e:	bf 92       	push	r11
    2790:	cf 92       	push	r12
    2792:	df 92       	push	r13
    2794:	ce 01       	movw	r24, r28
    2796:	86 56       	subi	r24, 0x66	; 102
    2798:	9d 4f       	sbci	r25, 0xFD	; 253
    279a:	9f 93       	push	r25
    279c:	8f 93       	push	r24
    279e:	1f 93       	push	r17
    27a0:	0f 93       	push	r16
    27a2:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			writestr_OLED(1, outbuf, 2);
    27a6:	42 e0       	ldi	r20, 0x02	; 2
    27a8:	b8 01       	movw	r22, r16
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			break;
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);

			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    27b6:	45 c0       	rjmp	.+138    	; 0x2842 <report+0xaf0>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    27b8:	6e 01       	movw	r12, r28
    27ba:	9f ef       	ldi	r25, 0xFF	; 255
    27bc:	c9 0e       	add	r12, r25
    27be:	d1 1c       	adc	r13, r1
    27c0:	c6 01       	movw	r24, r12
    27c2:	0e 94 34 06 	call	0xc68	; 0xc68 <get_VERSION>
			get_time(currenttime);
    27c6:	7e 01       	movw	r14, r28
    27c8:	86 ef       	ldi	r24, 0xF6	; 246
    27ca:	e8 1a       	sub	r14, r24
    27cc:	8e ef       	ldi	r24, 0xFE	; 254
    27ce:	f8 0a       	sbc	r15, r24
    27d0:	c7 01       	movw	r24, r14
    27d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    27d6:	24 e3       	ldi	r18, 0x34	; 52
    27d8:	20 9f       	mul	r18, r16
    27da:	c0 01       	movw	r24, r0
    27dc:	21 9f       	mul	r18, r17
    27de:	90 0d       	add	r25, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	8e 5c       	subi	r24, 0xCE	; 206
    27e4:	97 4d       	sbci	r25, 0xD7	; 215
    27e6:	9f 93       	push	r25
    27e8:	8f 93       	push	r24
    27ea:	df 92       	push	r13
    27ec:	cf 92       	push	r12
    27ee:	ff 92       	push	r15
    27f0:	ef 92       	push	r14
    27f2:	ce 01       	movw	r24, r28
    27f4:	89 55       	subi	r24, 0x59	; 89
    27f6:	9d 4f       	sbci	r25, 0xFD	; 253
    27f8:	9f 93       	push	r25
    27fa:	8f 93       	push	r24
    27fc:	8e 01       	movw	r16, r28
    27fe:	0f 5f       	subi	r16, 0xFF	; 255
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	1f 93       	push	r17
    2804:	0f 93       	push	r16
    2806:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
			printLine(outbuf);
    280a:	c8 01       	movw	r24, r16
    280c:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	63 e6       	ldi	r22, 0x63	; 99
    2814:	79 e8       	ldi	r23, 0x89	; 137
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			get_VERSION(outbuf);
    281c:	c8 01       	movw	r24, r16
    281e:	0e 94 34 06 	call	0xc68	; 0xc68 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2822:	42 e0       	ldi	r20, 0x02	; 2
    2824:	b8 01       	movw	r22, r16
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	0e 94 b8 0b 	call	0x1770	; 0x1770 <writestr_OLED>
			break;
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2830:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2832:	07 c0       	rjmp	.+14     	; 0x2842 <report+0xaf0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2834:	68 e6       	ldi	r22, 0x68	; 104
    2836:	7a e8       	ldi	r23, 0x8A	; 138
    2838:	8a ec       	ldi	r24, 0xCA	; 202
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
			return(ERROR);
    2840:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    2842:	c1 52       	subi	r28, 0x21	; 33
    2844:	dd 4f       	sbci	r29, 0xFD	; 253
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
    285a:	bf 90       	pop	r11
    285c:	af 90       	pop	r10
    285e:	9f 90       	pop	r9
    2860:	8f 90       	pop	r8
    2862:	7f 90       	pop	r7
    2864:	6f 90       	pop	r6
    2866:	5f 90       	pop	r5
    2868:	4f 90       	pop	r4
    286a:	3f 90       	pop	r3
    286c:	2f 90       	pop	r2
    286e:	08 95       	ret

00002870 <crc16>:
	tbuf[1] = (encoderValue >> 16) & 0xFF;
	tbuf[2] = (encoderValue >> 8) & 0xFF;
	tbuf[3] = encoderValue & 0xFF;
	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));

}
    2870:	dc 01       	movw	r26, r24
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	1b c0       	rjmp	.+54     	; 0x28b2 <crc16+0x42>
    287c:	fd 01       	movw	r30, r26
    287e:	e4 0f       	add	r30, r20
    2880:	f5 1f       	adc	r31, r21
    2882:	20 81       	ld	r18, Z
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	32 2f       	mov	r19, r18
    2888:	22 27       	eor	r18, r18
    288a:	82 27       	eor	r24, r18
    288c:	93 27       	eor	r25, r19
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	0c c0       	rjmp	.+24     	; 0x28aa <crc16+0x3a>
    2892:	99 23       	and	r25, r25
    2894:	3c f4       	brge	.+14     	; 0x28a4 <crc16+0x34>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	31 e2       	ldi	r19, 0x21	; 33
    289c:	83 27       	eor	r24, r19
    289e:	30 e1       	ldi	r19, 0x10	; 16
    28a0:	93 27       	eor	r25, r19
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <crc16+0x38>
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	2f 5f       	subi	r18, 0xFF	; 255
    28aa:	28 30       	cpi	r18, 0x08	; 8
    28ac:	90 f3       	brcs	.-28     	; 0x2892 <crc16+0x22>
    28ae:	4f 5f       	subi	r20, 0xFF	; 255
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	46 17       	cp	r20, r22
    28b4:	57 07       	cpc	r21, r23
    28b6:	10 f3       	brcs	.-60     	; 0x287c <crc16+0xc>
    28b8:	08 95       	ret

000028ba <get_MOTOREncoder>:
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	27 97       	sbiw	r28, 0x07	; 7
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	8a 01       	movw	r16, r20
    28d2:	97 e0       	ldi	r25, 0x07	; 7
    28d4:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x100>
    28d8:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x102>
    28dc:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	6a 83       	std	Y+2, r22	; 0x02
    28e4:	42 e0       	ldi	r20, 0x02	; 2
    28e6:	be 01       	movw	r22, r28
    28e8:	6f 5f       	subi	r22, 0xFF	; 255
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
    28fa:	11 c0       	rjmp	.+34     	; 0x291e <get_MOTOREncoder+0x64>
    28fc:	00 00       	nop
    28fe:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    2902:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    2906:	c3 97       	sbiw	r24, 0x33	; 51
    2908:	50 f0       	brcs	.+20     	; 0x291e <get_MOTOREncoder+0x64>
    290a:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    290e:	69 ee       	ldi	r22, 0xE9	; 233
    2910:	7b e8       	ldi	r23, 0x8B	; 139
    2912:	80 e3       	ldi	r24, 0x30	; 48
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    291a:	83 e6       	ldi	r24, 0x63	; 99
    291c:	74 c0       	rjmp	.+232    	; 0x2a06 <get_MOTOREncoder+0x14c>
    291e:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x103>
    2922:	88 23       	and	r24, r24
    2924:	59 f3       	breq	.-42     	; 0x28fc <get_MOTOREncoder+0x42>
    2926:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    292a:	e7 e1       	ldi	r30, 0x17	; 23
    292c:	fa e2       	ldi	r31, 0x2A	; 42
    292e:	e5 80       	ldd	r14, Z+5	; 0x05
    2930:	f1 2c       	mov	r15, r1
    2932:	fe 2c       	mov	r15, r14
    2934:	ee 24       	eor	r14, r14
    2936:	86 81       	ldd	r24, Z+6	; 0x06
    2938:	e8 2a       	or	r14, r24
    293a:	22 e0       	ldi	r18, 0x02	; 2
    293c:	0e c0       	rjmp	.+28     	; 0x295a <get_MOTOREncoder+0xa0>
    293e:	82 2f       	mov	r24, r18
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	fc 01       	movw	r30, r24
    2944:	eb 5e       	subi	r30, 0xEB	; 235
    2946:	f5 4d       	sbci	r31, 0xD5	; 213
    2948:	30 81       	ld	r19, Z
    294a:	e1 e0       	ldi	r30, 0x01	; 1
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	ec 0f       	add	r30, r28
    2950:	fd 1f       	adc	r31, r29
    2952:	e8 0f       	add	r30, r24
    2954:	f9 1f       	adc	r31, r25
    2956:	30 83       	st	Z, r19
    2958:	2f 5f       	subi	r18, 0xFF	; 255
    295a:	27 30       	cpi	r18, 0x07	; 7
    295c:	80 f3       	brcs	.-32     	; 0x293e <get_MOTOREncoder+0x84>
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 38 14 	call	0x2870	; 0x2870 <crc16>
    296a:	e8 16       	cp	r14, r24
    296c:	f9 06       	cpc	r15, r25
    296e:	71 f0       	breq	.+28     	; 0x298c <get_MOTOREncoder+0xd2>
    2970:	d8 01       	movw	r26, r16
    2972:	1d 92       	st	X+, r1
    2974:	1d 92       	st	X+, r1
    2976:	1d 92       	st	X+, r1
    2978:	1c 92       	st	X, r1
    297a:	13 97       	sbiw	r26, 0x03	; 3
    297c:	62 e0       	ldi	r22, 0x02	; 2
    297e:	7c e8       	ldi	r23, 0x8C	; 140
    2980:	81 e3       	ldi	r24, 0x31	; 49
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2988:	83 e6       	ldi	r24, 0x63	; 99
    298a:	3d c0       	rjmp	.+122    	; 0x2a06 <get_MOTOREncoder+0x14c>
    298c:	27 e1       	ldi	r18, 0x17	; 23
    298e:	3a e2       	ldi	r19, 0x2A	; 42
    2990:	f9 01       	movw	r30, r18
    2992:	80 81       	ld	r24, Z
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	78 2f       	mov	r23, r24
    299c:	66 27       	eor	r22, r22
    299e:	55 27       	eor	r21, r21
    29a0:	44 27       	eor	r20, r20
    29a2:	d8 01       	movw	r26, r16
    29a4:	4d 93       	st	X+, r20
    29a6:	5d 93       	st	X+, r21
    29a8:	6d 93       	st	X+, r22
    29aa:	7c 93       	st	X, r23
    29ac:	13 97       	sbiw	r26, 0x03	; 3
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	89 2f       	mov	r24, r25
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e0       	ldi	r26, 0x00	; 0
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	dc 01       	movw	r26, r24
    29ba:	99 27       	eor	r25, r25
    29bc:	88 27       	eor	r24, r24
    29be:	84 2b       	or	r24, r20
    29c0:	95 2b       	or	r25, r21
    29c2:	a6 2b       	or	r26, r22
    29c4:	b7 2b       	or	r27, r23
    29c6:	f8 01       	movw	r30, r16
    29c8:	80 83       	st	Z, r24
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	a2 83       	std	Z+2, r26	; 0x02
    29ce:	b3 83       	std	Z+3, r27	; 0x03
    29d0:	f9 01       	movw	r30, r18
    29d2:	42 81       	ldd	r20, Z+2	; 0x02
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	76 2f       	mov	r23, r22
    29dc:	65 2f       	mov	r22, r21
    29de:	54 2f       	mov	r21, r20
    29e0:	44 27       	eor	r20, r20
    29e2:	84 2b       	or	r24, r20
    29e4:	95 2b       	or	r25, r21
    29e6:	a6 2b       	or	r26, r22
    29e8:	b7 2b       	or	r27, r23
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
    29f4:	f9 01       	movw	r30, r18
    29f6:	23 81       	ldd	r18, Z+3	; 0x03
    29f8:	82 2b       	or	r24, r18
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	27 96       	adiw	r28, 0x07	; 7
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	08 95       	ret

00002a1a <get_MOTORFloat>:
    2a1a:	af 92       	push	r10
    2a1c:	bf 92       	push	r11
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <get_MOTORFloat+0x16>
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <get_MOTORFloat+0x18>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	a8 2e       	mov	r10, r24
    2a38:	b6 2e       	mov	r11, r22
    2a3a:	7a 01       	movw	r14, r20
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <recv1_buf+0x100>
    2a42:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x102>
    2a46:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>
    2a4a:	a9 82       	std	Y+1, r10	; 0x01
    2a4c:	6a 83       	std	Y+2, r22	; 0x02
    2a4e:	42 e0       	ldi	r20, 0x02	; 2
    2a50:	be 01       	movw	r22, r28
    2a52:	6f 5f       	subi	r22, 0xFF	; 255
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
    2a64:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x103>
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	81 f0       	breq	.+32     	; 0x2a8c <get_MOTORFloat+0x72>
    2a6c:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    2a70:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    2a74:	c3 97       	sbiw	r24, 0x33	; 51
    2a76:	b0 f3       	brcs	.-20     	; 0x2a64 <get_MOTORFloat+0x4a>
    2a78:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2a7c:	67 e1       	ldi	r22, 0x17	; 23
    2a7e:	7c e8       	ldi	r23, 0x8C	; 140
    2a80:	80 e3       	ldi	r24, 0x30	; 48
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2a88:	83 e6       	ldi	r24, 0x63	; 99
    2a8a:	37 c0       	rjmp	.+110    	; 0x2afa <get_MOTORFloat+0xe0>
    2a8c:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2a90:	e7 e1       	ldi	r30, 0x17	; 23
    2a92:	fa e2       	ldi	r31, 0x2A	; 42
    2a94:	90 81       	ld	r25, Z
    2a96:	c9 2e       	mov	r12, r25
    2a98:	d1 2c       	mov	r13, r1
    2a9a:	dc 2c       	mov	r13, r12
    2a9c:	cc 24       	eor	r12, r12
    2a9e:	81 81       	ldd	r24, Z+1	; 0x01
    2aa0:	c8 2a       	or	r12, r24
    2aa2:	02 81       	ldd	r16, Z+2	; 0x02
    2aa4:	10 e0       	ldi	r17, 0x00	; 0
    2aa6:	10 2f       	mov	r17, r16
    2aa8:	00 27       	eor	r16, r16
    2aaa:	23 81       	ldd	r18, Z+3	; 0x03
    2aac:	02 2b       	or	r16, r18
    2aae:	a9 82       	std	Y+1, r10	; 0x01
    2ab0:	ba 82       	std	Y+2, r11	; 0x02
    2ab2:	9b 83       	std	Y+3, r25	; 0x03
    2ab4:	8c 83       	std	Y+4, r24	; 0x04
    2ab6:	64 e0       	ldi	r22, 0x04	; 4
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 38 14 	call	0x2870	; 0x2870 <crc16>
    2ac2:	08 17       	cp	r16, r24
    2ac4:	19 07       	cpc	r17, r25
    2ac6:	41 f0       	breq	.+16     	; 0x2ad8 <get_MOTORFloat+0xbe>
    2ac8:	69 e2       	ldi	r22, 0x29	; 41
    2aca:	7c e8       	ldi	r23, 0x8C	; 140
    2acc:	81 e3       	ldi	r24, 0x31	; 49
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2ad4:	83 e6       	ldi	r24, 0x63	; 99
    2ad6:	11 c0       	rjmp	.+34     	; 0x2afa <get_MOTORFloat+0xe0>
    2ad8:	b6 01       	movw	r22, r12
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 cf 1c 	call	0x399e	; 0x399e <__floatunsisf>
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__divsf3>
    2aee:	f7 01       	movw	r30, r14
    2af0:	60 83       	st	Z, r22
    2af2:	71 83       	std	Z+1, r23	; 0x01
    2af4:	82 83       	std	Z+2, r24	; 0x02
    2af6:	93 83       	std	Z+3, r25	; 0x03
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	24 96       	adiw	r28, 0x04	; 4
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	bf 90       	pop	r11
    2b12:	af 90       	pop	r10
    2b14:	08 95       	ret

00002b16 <get_MOTORInt32>:
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	26 97       	sbiw	r28, 0x06	; 6
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	8a 01       	movw	r16, r20
    2b2e:	96 e0       	ldi	r25, 0x06	; 6
    2b30:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x100>
    2b34:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x102>
    2b38:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	6a 83       	std	Y+2, r22	; 0x02
    2b40:	42 e0       	ldi	r20, 0x02	; 2
    2b42:	be 01       	movw	r22, r28
    2b44:	6f 5f       	subi	r22, 0xFF	; 255
    2b46:	7f 4f       	sbci	r23, 0xFF	; 255
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
    2b56:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x103>
    2b5a:	81 30       	cpi	r24, 0x01	; 1
    2b5c:	61 f4       	brne	.+24     	; 0x2b76 <get_MOTORInt32+0x60>
    2b5e:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2b62:	e7 e1       	ldi	r30, 0x17	; 23
    2b64:	fa e2       	ldi	r31, 0x2A	; 42
    2b66:	e4 80       	ldd	r14, Z+4	; 0x04
    2b68:	f1 2c       	mov	r15, r1
    2b6a:	fe 2c       	mov	r15, r14
    2b6c:	ee 24       	eor	r14, r14
    2b6e:	85 81       	ldd	r24, Z+5	; 0x05
    2b70:	e8 2a       	or	r14, r24
    2b72:	22 e0       	ldi	r18, 0x02	; 2
    2b74:	1e c0       	rjmp	.+60     	; 0x2bb2 <get_MOTORInt32+0x9c>
    2b76:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    2b7a:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    2b7e:	c3 97       	sbiw	r24, 0x33	; 51
    2b80:	50 f3       	brcs	.-44     	; 0x2b56 <get_MOTORInt32+0x40>
    2b82:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2b86:	6c e3       	ldi	r22, 0x3C	; 60
    2b88:	7c e8       	ldi	r23, 0x8C	; 140
    2b8a:	8f e2       	ldi	r24, 0x2F	; 47
    2b8c:	91 e0       	ldi	r25, 0x01	; 1
    2b8e:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2b92:	83 e6       	ldi	r24, 0x63	; 99
    2b94:	54 c0       	rjmp	.+168    	; 0x2c3e <get_MOTORInt32+0x128>
    2b96:	82 2f       	mov	r24, r18
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	eb 5e       	subi	r30, 0xEB	; 235
    2b9e:	f5 4d       	sbci	r31, 0xD5	; 213
    2ba0:	30 81       	ld	r19, Z
    2ba2:	e1 e0       	ldi	r30, 0x01	; 1
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	ec 0f       	add	r30, r28
    2ba8:	fd 1f       	adc	r31, r29
    2baa:	e8 0f       	add	r30, r24
    2bac:	f9 1f       	adc	r31, r25
    2bae:	30 83       	st	Z, r19
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	26 30       	cpi	r18, 0x06	; 6
    2bb4:	80 f3       	brcs	.-32     	; 0x2b96 <get_MOTORInt32+0x80>
    2bb6:	66 e0       	ldi	r22, 0x06	; 6
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	ce 01       	movw	r24, r28
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	0e 94 38 14 	call	0x2870	; 0x2870 <crc16>
    2bc2:	e8 16       	cp	r14, r24
    2bc4:	f9 06       	cpc	r15, r25
    2bc6:	89 f0       	breq	.+34     	; 0x2bea <get_MOTORInt32+0xd4>
    2bc8:	63 e5       	ldi	r22, 0x53	; 83
    2bca:	7c e8       	ldi	r23, 0x8C	; 140
    2bcc:	81 e3       	ldi	r24, 0x31	; 49
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2bd4:	8f ef       	ldi	r24, 0xFF	; 255
    2bd6:	9f ef       	ldi	r25, 0xFF	; 255
    2bd8:	af ef       	ldi	r26, 0xFF	; 255
    2bda:	bf e7       	ldi	r27, 0x7F	; 127
    2bdc:	f8 01       	movw	r30, r16
    2bde:	80 83       	st	Z, r24
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	a2 83       	std	Z+2, r26	; 0x02
    2be4:	b3 83       	std	Z+3, r27	; 0x03
    2be6:	83 e6       	ldi	r24, 0x63	; 99
    2be8:	2a c0       	rjmp	.+84     	; 0x2c3e <get_MOTORInt32+0x128>
    2bea:	e7 e1       	ldi	r30, 0x17	; 23
    2bec:	fa e2       	ldi	r31, 0x2A	; 42
    2bee:	80 81       	ld	r24, Z
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a0 e0       	ldi	r26, 0x00	; 0
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	78 2f       	mov	r23, r24
    2bf8:	66 27       	eor	r22, r22
    2bfa:	55 27       	eor	r21, r21
    2bfc:	44 27       	eor	r20, r20
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	89 2f       	mov	r24, r25
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	dc 01       	movw	r26, r24
    2c0a:	99 27       	eor	r25, r25
    2c0c:	88 27       	eor	r24, r24
    2c0e:	84 2b       	or	r24, r20
    2c10:	95 2b       	or	r25, r21
    2c12:	a6 2b       	or	r26, r22
    2c14:	b7 2b       	or	r27, r23
    2c16:	42 81       	ldd	r20, Z+2	; 0x02
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	76 2f       	mov	r23, r22
    2c20:	65 2f       	mov	r22, r21
    2c22:	54 2f       	mov	r21, r20
    2c24:	44 27       	eor	r20, r20
    2c26:	84 2b       	or	r24, r20
    2c28:	95 2b       	or	r25, r21
    2c2a:	a6 2b       	or	r26, r22
    2c2c:	b7 2b       	or	r27, r23
    2c2e:	23 81       	ldd	r18, Z+3	; 0x03
    2c30:	82 2b       	or	r24, r18
    2c32:	f8 01       	movw	r30, r16
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	26 96       	adiw	r28, 0x06	; 6
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	08 95       	ret

00002c52 <move_MOTORAbsolute>:
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	65 97       	sbiw	r28, 0x15	; 21
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <recv1_buf>
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x100>
    2c6a:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x102>
    2c6e:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	81 e4       	ldi	r24, 0x41	; 65
    2c76:	8a 83       	std	Y+2, r24	; 0x02
    2c78:	1b 82       	std	Y+3, r1	; 0x03
    2c7a:	1c 82       	std	Y+4, r1	; 0x04
    2c7c:	80 e2       	ldi	r24, 0x20	; 32
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	1e 82       	std	Y+6, r1	; 0x06
    2c82:	1f 82       	std	Y+7, r1	; 0x07
    2c84:	18 86       	std	Y+8, r1	; 0x08
    2c86:	90 e4       	ldi	r25, 0x40	; 64
    2c88:	99 87       	std	Y+9, r25	; 0x09
    2c8a:	1a 86       	std	Y+10, r1	; 0x0a
    2c8c:	1b 86       	std	Y+11, r1	; 0x0b
    2c8e:	1c 86       	std	Y+12, r1	; 0x0c
    2c90:	8d 87       	std	Y+13, r24	; 0x0d
    2c92:	1e 86       	std	Y+14, r1	; 0x0e
    2c94:	7f 87       	std	Y+15, r23	; 0x0f
    2c96:	68 8b       	std	Y+16, r22	; 0x10
    2c98:	59 8b       	std	Y+17, r21	; 0x11
    2c9a:	4a 8b       	std	Y+18, r20	; 0x12
    2c9c:	1b 8a       	std	Y+19, r1	; 0x13
    2c9e:	63 e1       	ldi	r22, 0x13	; 19
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	0e 94 38 14 	call	0x2870	; 0x2870 <crc16>
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8d 8b       	std	Y+21, r24	; 0x15
    2cae:	45 e1       	ldi	r20, 0x15	; 21
    2cb0:	be 01       	movw	r22, r28
    2cb2:	6f 5f       	subi	r22, 0xFF	; 255
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
    2cc4:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x103>
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	41 f4       	brne	.+16     	; 0x2cdc <move_MOTORAbsolute+0x8a>
    2ccc:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2cd0:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <recv1_buf>
    2cd4:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd6:	91 f4       	brne	.+36     	; 0x2cfc <move_MOTORAbsolute+0xaa>
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	17 c0       	rjmp	.+46     	; 0x2d0a <move_MOTORAbsolute+0xb8>
    2cdc:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    2ce0:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    2ce4:	c3 97       	sbiw	r24, 0x33	; 51
    2ce6:	70 f3       	brcs	.-36     	; 0x2cc4 <move_MOTORAbsolute+0x72>
    2ce8:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
    2cec:	6c e6       	ldi	r22, 0x6C	; 108
    2cee:	7c e8       	ldi	r23, 0x8C	; 140
    2cf0:	8f e2       	ldi	r24, 0x2F	; 47
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2cf8:	83 e6       	ldi	r24, 0x63	; 99
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <move_MOTORAbsolute+0xb8>
    2cfc:	67 e8       	ldi	r22, 0x87	; 135
    2cfe:	7c e8       	ldi	r23, 0x8C	; 140
    2d00:	8f e2       	ldi	r24, 0x2F	; 47
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2d08:	83 e6       	ldi	r24, 0x63	; 99
    2d0a:	65 96       	adiw	r28, 0x15	; 21
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <move_MOTOR>:
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <move_MOTOR+0x10>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <move_MOTOR+0x12>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	e8 2e       	mov	r14, r24
    2d2e:	f1 2c       	mov	r15, r1
    2d30:	84 e3       	ldi	r24, 0x34	; 52
    2d32:	8e 9d       	mul	r24, r14
    2d34:	f0 01       	movw	r30, r0
    2d36:	8f 9d       	mul	r24, r15
    2d38:	f0 0d       	add	r31, r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	e9 5f       	subi	r30, 0xF9	; 249
    2d3e:	f7 4d       	sbci	r31, 0xD7	; 215
    2d40:	81 81       	ldd	r24, Z+1	; 0x01
    2d42:	81 34       	cpi	r24, 0x41	; 65
    2d44:	d0 f0       	brcs	.+52     	; 0x2d7a <move_MOTOR+0x64>
    2d46:	84 34       	cpi	r24, 0x44	; 68
    2d48:	28 f0       	brcs	.+10     	; 0x2d54 <move_MOTOR+0x3e>
    2d4a:	9f e9       	ldi	r25, 0x9F	; 159
    2d4c:	98 0f       	add	r25, r24
    2d4e:	93 30       	cpi	r25, 0x03	; 3
    2d50:	40 f0       	brcs	.+16     	; 0x2d62 <move_MOTOR+0x4c>
    2d52:	13 c0       	rjmp	.+38     	; 0x2d7a <move_MOTOR+0x64>
    2d54:	1f e3       	ldi	r17, 0x3F	; 63
    2d56:	18 0f       	add	r17, r24
    2d58:	19 82       	std	Y+1, r1	; 0x01
    2d5a:	1a 82       	std	Y+2, r1	; 0x02
    2d5c:	1b 82       	std	Y+3, r1	; 0x03
    2d5e:	1c 82       	std	Y+4, r1	; 0x04
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <move_MOTOR+0x74>
    2d62:	1f e1       	ldi	r17, 0x1F	; 31
    2d64:	18 0f       	add	r17, r24
    2d66:	ae 01       	movw	r20, r28
    2d68:	4f 5f       	subi	r20, 0xFF	; 255
    2d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6c:	60 e1       	ldi	r22, 0x10	; 16
    2d6e:	81 2f       	mov	r24, r17
    2d70:	0e 94 5d 14 	call	0x28ba	; 0x28ba <get_MOTOREncoder>
    2d74:	83 36       	cpi	r24, 0x63	; 99
    2d76:	49 f4       	brne	.+18     	; 0x2d8a <move_MOTOR+0x74>
    2d78:	39 c0       	rjmp	.+114    	; 0x2dec <move_MOTOR+0xd6>
    2d7a:	6e e9       	ldi	r22, 0x9E	; 158
    2d7c:	7c e8       	ldi	r23, 0x8C	; 140
    2d7e:	8d e2       	ldi	r24, 0x2D	; 45
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2d86:	83 e6       	ldi	r24, 0x63	; 99
    2d88:	32 c0       	rjmp	.+100    	; 0x2dee <move_MOTOR+0xd8>
    2d8a:	84 e3       	ldi	r24, 0x34	; 52
    2d8c:	8e 9d       	mul	r24, r14
    2d8e:	f0 01       	movw	r30, r0
    2d90:	8f 9d       	mul	r24, r15
    2d92:	f0 0d       	add	r31, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	e9 5f       	subi	r30, 0xF9	; 249
    2d98:	f7 4d       	sbci	r31, 0xD7	; 215
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	08 c0       	rjmp	.+16     	; 0x2db0 <move_MOTOR+0x9a>
    2da0:	67 eb       	ldi	r22, 0xB7	; 183
    2da2:	7c e8       	ldi	r23, 0x8C	; 140
    2da4:	83 e3       	ldi	r24, 0x33	; 51
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
    2dac:	83 e6       	ldi	r24, 0x63	; 99
    2dae:	1f c0       	rjmp	.+62     	; 0x2dee <move_MOTOR+0xd8>
    2db0:	24 e3       	ldi	r18, 0x34	; 52
    2db2:	2e 9d       	mul	r18, r14
    2db4:	c0 01       	movw	r24, r0
    2db6:	2f 9d       	mul	r18, r15
    2db8:	90 0d       	add	r25, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	87 5f       	subi	r24, 0xF7	; 247
    2dbe:	97 4d       	sbci	r25, 0xD7	; 215
    2dc0:	0e 94 2a 22 	call	0x4454	; 0x4454 <atol>
    2dc4:	9b 01       	movw	r18, r22
    2dc6:	ac 01       	movw	r20, r24
    2dc8:	ac e0       	ldi	r26, 0x0C	; 12
    2dca:	b1 e0       	ldi	r27, 0x01	; 1
    2dcc:	0e 94 a9 21 	call	0x4352	; 0x4352 <__muluhisi3>
    2dd0:	c9 80       	ldd	r12, Y+1	; 0x01
    2dd2:	da 80       	ldd	r13, Y+2	; 0x02
    2dd4:	eb 80       	ldd	r14, Y+3	; 0x03
    2dd6:	fc 80       	ldd	r15, Y+4	; 0x04
    2dd8:	ab 01       	movw	r20, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	4c 0d       	add	r20, r12
    2dde:	5d 1d       	adc	r21, r13
    2de0:	6e 1d       	adc	r22, r14
    2de2:	7f 1d       	adc	r23, r15
    2de4:	81 2f       	mov	r24, r17
    2de6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <move_MOTORAbsolute>
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <move_MOTOR+0xd8>
    2dec:	83 e6       	ldi	r24, 0x63	; 99
    2dee:	24 96       	adiw	r28, 0x04	; 4
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	08 95       	ret

00002e04 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	26 97       	sbiw	r28, 0x06	; 6
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2e12:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <recv1_buf>
	recv1_buf.nbytes = 1;
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2e1c:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2e20:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>

	tbuf[0] = controller;
    2e24:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2e26:	86 e1       	ldi	r24, 0x16	; 22
    2e28:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2e2a:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2e2c:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2e2e:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2e30:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    2e32:	46 e0       	ldi	r20, 0x06	; 6
    2e34:	be 01       	movw	r22, r28
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e48:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x103>
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	41 f4       	brne	.+16     	; 0x2e60 <set_MOTOREncoder+0x5c>
			stop_TCB0();
    2e50:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    2e54:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <recv1_buf>
    2e58:	8f 3f       	cpi	r24, 0xFF	; 255
    2e5a:	61 f0       	breq	.+24     	; 0x2e74 <set_MOTOREncoder+0x70>
		return(ERROR);
    2e5c:	83 e6       	ldi	r24, 0x63	; 99
    2e5e:	0b c0       	rjmp	.+22     	; 0x2e76 <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    2e60:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    2e64:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    2e68:	c3 97       	sbiw	r24, 0x33	; 51
    2e6a:	70 f3       	brcs	.-36     	; 0x2e48 <set_MOTOREncoder+0x44>
			stop_TCB0();
    2e6c:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
			return(ERROR);
    2e70:	83 e6       	ldi	r24, 0x63	; 99
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    2e74:	80 e0       	ldi	r24, 0x00	; 0

}
    2e76:	26 96       	adiw	r28, 0x06	; 6
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	timerSAVEENCODER = 0;
    2e8a:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <timerSAVEENCODER>
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    2e8e:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	timerSAVEENCODER = 0;

	for (controller = 128; controller < 131; controller++) {
    2e90:	c0 e8       	ldi	r28, 0x80	; 128
    2e92:	1f c0       	rjmp	.+62     	; 0x2ed2 <init_MOTORS+0x50>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    2e94:	48 e0       	ldi	r20, 0x08	; 8
    2e96:	57 e1       	ldi	r21, 0x17	; 23
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	8c 2f       	mov	r24, r28
    2e9e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <set_MOTOREncoder>
    2ea2:	83 36       	cpi	r24, 0x63	; 99
    2ea4:	a9 f4       	brne	.+42     	; 0x2ed0 <init_MOTORS+0x4e>
			if (!firstTime[controller - 128]) {
    2ea6:	0c 2f       	mov	r16, r28
    2ea8:	10 e0       	ldi	r17, 0x00	; 0
    2eaa:	00 58       	subi	r16, 0x80	; 128
    2eac:	11 09       	sbc	r17, r1
    2eae:	f8 01       	movw	r30, r16
    2eb0:	e0 50       	subi	r30, 0x00	; 0
    2eb2:	f8 4d       	sbci	r31, 0xD8	; 216
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	0a c0       	rjmp	.+20     	; 0x2ece <init_MOTORS+0x4c>
				printError(ERR_MTRSETENC, "init_MOTORS");
    2eba:	6b ed       	ldi	r22, 0xDB	; 219
    2ebc:	7c e8       	ldi	r23, 0x8C	; 140
    2ebe:	82 e3       	ldi	r24, 0x32	; 50
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
				firstTime[controller - 128] = NO;
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	e0 50       	subi	r30, 0x00	; 0
    2eca:	f8 4d       	sbci	r31, 0xD8	; 216
    2ecc:	10 82       	st	Z, r1
			}
			error++;
    2ece:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	timerSAVEENCODER = 0;

	for (controller = 128; controller < 131; controller++) {
    2ed0:	cf 5f       	subi	r28, 0xFF	; 255
    2ed2:	c3 38       	cpi	r28, 0x83	; 131
    2ed4:	f8 f2       	brcs	.-66     	; 0x2e94 <init_MOTORS+0x12>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    2ed6:	dd 23       	and	r29, r29
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <init_MOTORS+0x5c>
		return(ERROR);
    2eda:	83 e6       	ldi	r24, 0x63	; 99
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <init_MOTORS+0x5e>
	} else {
		return(NOERROR);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	08 95       	ret

00002eea <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    2eea:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2eec:	e0 e6       	ldi	r30, 0x60	; 96
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2ef2:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2ef4:	88 ed       	ldi	r24, 0xD8	; 216
    2ef6:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ef8:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <init_RTC+0x14>
		asm("nop");
    2efc:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2efe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2f02:	96 fd       	sbrc	r25, 6
    2f04:	fb cf       	rjmp	.-10     	; 0x2efc <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2f06:	e0 e6       	ldi	r30, 0x60	; 96
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2f0c:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2f0e:	28 ed       	ldi	r18, 0xD8	; 216
    2f10:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2f12:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2f14:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2f16:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2f18:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2f1a:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <init_RTC+0x36>
		asm("nop");
    2f1e:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2f20:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2f24:	91 11       	cpse	r25, r1
    2f26:	fb cf       	rjmp	.-10     	; 0x2f1e <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    2f28:	e0 e4       	ldi	r30, 0x40	; 64
    2f2a:	f1 e0       	ldi	r31, 0x01	; 1
    2f2c:	42 87       	std	Z+10, r20	; 0x0a
    2f2e:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2f34:	85 81       	ldd	r24, Z+5	; 0x05
    2f36:	81 60       	ori	r24, 0x01	; 1
    2f38:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2f3a:	81 eb       	ldi	r24, 0xB1	; 177
    2f3c:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2f3e:	82 81       	ldd	r24, Z+2	; 0x02
    2f40:	81 60       	ori	r24, 0x01	; 1
    2f42:	82 83       	std	Z+2, r24	; 0x02
    2f44:	08 95       	ret

00002f46 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2f46:	1f 92       	push	r1
    2f48:	0f 92       	push	r0
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	0f 92       	push	r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	2f 93       	push	r18
    2f52:	3f 93       	push	r19
    2f54:	4f 93       	push	r20
    2f56:	5f 93       	push	r21
    2f58:	6f 93       	push	r22
    2f5a:	7f 93       	push	r23
    2f5c:	8f 93       	push	r24
    2f5e:	9f 93       	push	r25
    2f60:	af 93       	push	r26
    2f62:	bf 93       	push	r27
    2f64:	ef 93       	push	r30
    2f66:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2f6e:	80 91 0f 2a 	lds	r24, 0x2A0F	; 0x802a0f <timerOLED>
    2f72:	90 91 10 2a 	lds	r25, 0x2A10	; 0x802a10 <timerOLED+0x1>
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	b9 f0       	breq	.+46     	; 0x2fa8 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2f7a:	20 91 11 2a 	lds	r18, 0x2A11	; 0x802a11 <timeoutOLED>
    2f7e:	30 91 12 2a 	lds	r19, 0x2A12	; 0x802a12 <timeoutOLED+0x1>
    2f82:	28 17       	cp	r18, r24
    2f84:	39 07       	cpc	r19, r25
    2f86:	58 f4       	brcc	.+22     	; 0x2f9e <__vector_3+0x58>
			clear_OLED(0);
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	0e 94 15 0c 	call	0x182a	; 0x182a <clear_OLED>
			clear_OLED(1);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	0e 94 15 0c 	call	0x182a	; 0x182a <clear_OLED>
			timerOLED = 0;
    2f94:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    2f98:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
    2f9c:	05 c0       	rjmp	.+10     	; 0x2fa8 <__vector_3+0x62>
		} else {
			timerOLED++;
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    2fa4:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2fa8:	80 e2       	ldi	r24, 0x20	; 32
    2faa:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

	timerSAVEENCODER++;
    2fae:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <timerSAVEENCODER>
    2fb2:	8f 5f       	subi	r24, 0xFF	; 255
    2fb4:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <timerSAVEENCODER>

}
    2fb8:	ff 91       	pop	r31
    2fba:	ef 91       	pop	r30
    2fbc:	bf 91       	pop	r27
    2fbe:	af 91       	pop	r26
    2fc0:	9f 91       	pop	r25
    2fc2:	8f 91       	pop	r24
    2fc4:	7f 91       	pop	r23
    2fc6:	6f 91       	pop	r22
    2fc8:	5f 91       	pop	r21
    2fca:	4f 91       	pop	r20
    2fcc:	3f 91       	pop	r19
    2fce:	2f 91       	pop	r18
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	24 e3       	ldi	r18, 0x34	; 52
    2fe2:	28 9f       	mul	r18, r24
    2fe4:	f0 01       	movw	r30, r0
    2fe6:	29 9f       	mul	r18, r25
    2fe8:	f0 0d       	add	r31, r0
    2fea:	11 24       	eor	r1, r1
    2fec:	e9 5f       	subi	r30, 0xF9	; 249
    2fee:	f7 4d       	sbci	r31, 0xD7	; 215
    2ff0:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2ff2:	24 37       	cpi	r18, 0x74	; 116
    2ff4:	29 f5       	brne	.+74     	; 0x3040 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2ff6:	24 e3       	ldi	r18, 0x34	; 52
    2ff8:	28 9f       	mul	r18, r24
    2ffa:	e0 01       	movw	r28, r0
    2ffc:	29 9f       	mul	r18, r25
    2ffe:	d0 0d       	add	r29, r0
    3000:	11 24       	eor	r1, r1
    3002:	c7 5f       	subi	r28, 0xF7	; 247
    3004:	d7 4d       	sbci	r29, 0xD7	; 215
    3006:	fe 01       	movw	r30, r28
    3008:	01 90       	ld	r0, Z+
    300a:	00 20       	and	r0, r0
    300c:	e9 f7       	brne	.-6      	; 0x3008 <set+0x2e>
    300e:	31 97       	sbiw	r30, 0x01	; 1
    3010:	ec 1b       	sub	r30, r28
    3012:	fd 0b       	sbc	r31, r29
    3014:	73 97       	sbiw	r30, 0x13	; 19
    3016:	41 f0       	breq	.+16     	; 0x3028 <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    3018:	67 ee       	ldi	r22, 0xE7	; 231
    301a:	7c e8       	ldi	r23, 0x8C	; 140
    301c:	8a e5       	ldi	r24, 0x5A	; 90
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
				return(ERROR);
    3024:	83 e6       	ldi	r24, 0x63	; 99
    3026:	13 c0       	rjmp	.+38     	; 0x304e <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    3028:	ce 01       	movw	r24, r28
    302a:	0e 94 07 06 	call	0xc0e	; 0xc0e <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    302e:	24 e1       	ldi	r18, 0x14	; 20
    3030:	ae 01       	movw	r20, r28
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	80 e5       	ldi	r24, 0x50	; 80
    3038:	0e 94 31 07 	call	0xe62	; 0xe62 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	07 c0       	rjmp	.+14     	; 0x304e <set+0x74>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
//			write_FRAM(FRAMTWIADDR, SETTIMEFRAM, (uint8_t*) pcmd[cstack].cvalue);
			break;

		default:
			printError(ERR_SET, "set what?");
    3040:	6c ef       	ldi	r22, 0xFC	; 252
    3042:	7c e8       	ldi	r23, 0x8C	; 140
    3044:	89 e5       	ldi	r24, 0x59	; 89
    3046:	92 e0       	ldi	r25, 0x02	; 2
    3048:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
			return(ERROR);
    304c:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	08 95       	ret

00003054 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    3054:	e0 ea       	ldi	r30, 0xA0	; 160
    3056:	f4 e0       	ldi	r31, 0x04	; 4
    3058:	82 89       	ldd	r24, Z+18	; 0x12
    305a:	87 7f       	andi	r24, 0xF7	; 247
    305c:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    305e:	84 e0       	ldi	r24, 0x04	; 4
    3060:	82 83       	std	Z+2, r24	; 0x02
    3062:	08 95       	ret

00003064 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	00 d0       	rcall	.+0      	; 0x306a <get_temperature+0x6>
    306a:	00 d0       	rcall	.+0      	; 0x306c <get_temperature+0x8>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    3070:	83 30       	cpi	r24, 0x03	; 3
    3072:	18 f0       	brcs	.+6      	; 0x307a <get_temperature+0x16>
    3074:	83 30       	cpi	r24, 0x03	; 3
    3076:	39 f0       	breq	.+14     	; 0x3086 <get_temperature+0x22>
    3078:	0b c0       	rjmp	.+22     	; 0x3090 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    307a:	be 01       	movw	r22, r28
    307c:	6f 5f       	subi	r22, 0xFF	; 255
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    3084:	0d c0       	rjmp	.+26     	; 0x30a0 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    3086:	ce 01       	movw	r24, r28
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	0e 94 01 09 	call	0x1202	; 0x1202 <read_MCP9808>
			break;
    308e:	08 c0       	rjmp	.+16     	; 0x30a0 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e8       	ldi	r25, 0x80	; 128
    3094:	a6 e2       	ldi	r26, 0x26	; 38
    3096:	b4 ec       	ldi	r27, 0xC4	; 196
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	ab 83       	std	Y+3, r26	; 0x03
    309e:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    30a0:	69 81       	ldd	r22, Y+1	; 0x01
    30a2:	7a 81       	ldd	r23, Y+2	; 0x02
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04

}
    30a8:	24 96       	adiw	r28, 0x04	; 4
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	df 91       	pop	r29
    30b0:	cf 91       	pop	r28
    30b2:	08 95       	ret

000030b4 <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	e2 97       	sbiw	r28, 0x32	; 50
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
    30ce:	8d e8       	ldi	r24, 0x8D	; 141
    30d0:	90 e2       	ldi	r25, 0x20	; 32
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <testroutine+0x1e>
    30d6:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    30d8:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    30dc:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    30e0:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    30e4:	9f 93       	push	r25
    30e6:	8f 93       	push	r24
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	9d e8       	ldi	r25, 0x8D	; 141
    30ec:	9f 93       	push	r25
    30ee:	8f 93       	push	r24
    30f0:	8e 01       	movw	r16, r28
    30f2:	0f 5f       	subi	r16, 0xFF	; 255
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	1f 93       	push	r17
    30f8:	0f 93       	push	r16
    30fa:	0e 94 a2 23 	call	0x4744	; 0x4744 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    30fe:	f8 01       	movw	r30, r16
    3100:	01 90       	ld	r0, Z+
    3102:	00 20       	and	r0, r0
    3104:	e9 f7       	brne	.-6      	; 0x3100 <testroutine+0x4c>
    3106:	31 97       	sbiw	r30, 0x01	; 1
    3108:	af 01       	movw	r20, r30
    310a:	40 1b       	sub	r20, r16
    310c:	51 0b       	sbc	r21, r17
    310e:	b8 01       	movw	r22, r16
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0e 94 b8 19 	call	0x3370	; 0x3370 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	e2 96       	adiw	r28, 0x32	; 50
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    3132:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <ticks>
    3136:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    313a:	25 e0       	ldi	r18, 0x05	; 5
    313c:	3d e0       	ldi	r19, 0x0D	; 13
    313e:	ac 01       	movw	r20, r24
    3140:	42 9f       	mul	r20, r18
    3142:	c0 01       	movw	r24, r0
    3144:	43 9f       	mul	r20, r19
    3146:	90 0d       	add	r25, r0
    3148:	52 9f       	mul	r21, r18
    314a:	90 0d       	add	r25, r0
    314c:	11 24       	eor	r1, r1
    314e:	e0 e8       	ldi	r30, 0x80	; 128
    3150:	fa e0       	ldi	r31, 0x0A	; 10
    3152:	84 87       	std	Z+12, r24	; 0x0c
    3154:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    315a:	80 83       	st	Z, r24
    315c:	08 95       	ret

0000315e <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    315e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    3162:	08 95       	ret

00003164 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    3164:	1f 92       	push	r1
    3166:	0f 92       	push	r0
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	0f 92       	push	r0
    316c:	11 24       	eor	r1, r1
    316e:	8f 93       	push	r24
    3170:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3178:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    317c:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <ticks>
    3186:	90 93 16 2a 	sts	0x2A16, r25	; 0x802a16 <ticks+0x1>

    318a:	9f 91       	pop	r25
    318c:	8f 91       	pop	r24
    318e:	0f 90       	pop	r0
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	0f 90       	pop	r0
    3194:	1f 90       	pop	r1
    3196:	18 95       	reti

00003198 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3198:	e0 ea       	ldi	r30, 0xA0	; 160
    319a:	f8 e0       	ldi	r31, 0x08	; 8
    319c:	8b e0       	ldi	r24, 0x0B	; 11
    319e:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    31a0:	83 81       	ldd	r24, Z+3	; 0x03
    31a2:	81 60       	ori	r24, 0x01	; 1
    31a4:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    31a6:	85 81       	ldd	r24, Z+5	; 0x05
    31a8:	81 60       	ori	r24, 0x01	; 1
    31aa:	85 83       	std	Z+5, r24	; 0x05
    31ac:	08 95       	ret

000031ae <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    31b0:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    31b2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31b6:	88 23       	and	r24, r24
    31b8:	dc f7       	brge	.-10     	; 0x31b0 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    31ba:	e0 ea       	ldi	r30, 0xA0	; 160
    31bc:	f8 e0       	ldi	r31, 0x08	; 8
    31be:	84 81       	ldd	r24, Z+4	; 0x04
    31c0:	8b 7f       	andi	r24, 0xFB	; 251
    31c2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    31c4:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    31c6:	94 81       	ldd	r25, Z+4	; 0x04
    31c8:	92 60       	ori	r25, 0x02	; 2
    31ca:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    31cc:	08 95       	ret

000031ce <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <readlast_TWI+0x4>
		asm("nop");
    31d0:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    31d2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31d6:	88 23       	and	r24, r24
    31d8:	dc f7       	brge	.-10     	; 0x31d0 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    31da:	e0 ea       	ldi	r30, 0xA0	; 160
    31dc:	f8 e0       	ldi	r31, 0x08	; 8
    31de:	84 81       	ldd	r24, Z+4	; 0x04
    31e0:	84 60       	ori	r24, 0x04	; 4
    31e2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    31e4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    31e6:	08 95       	ret

000031e8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    31e8:	61 30       	cpi	r22, 0x01	; 1
    31ea:	39 f4       	brne	.+14     	; 0x31fa <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	81 60       	ori	r24, 0x01	; 1
    31f4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    31fa:	88 0f       	add	r24, r24
    31fc:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3208:	0b c0       	rjmp	.+22     	; 0x3220 <start_TWI+0x38>
		if (ticks > 10) {
    320a:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    320e:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    3212:	0b 97       	sbiw	r24, 0x0b	; 11
    3214:	20 f0       	brcs	.+8      	; 0x321e <start_TWI+0x36>
			stop_TCB0();
    3216:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
			return(ERROR);
    321a:	83 e6       	ldi	r24, 0x63	; 99
    321c:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    321e:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3220:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3224:	80 7c       	andi	r24, 0xC0	; 192
    3226:	89 f3       	breq	.-30     	; 0x320a <start_TWI+0x22>
			stop_TCB0();
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    3228:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    322c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3230:	82 ff       	sbrs	r24, 2
    3232:	08 c0       	rjmp	.+16     	; 0x3244 <start_TWI+0x5c>
		printError(ERR_TWI, "TWI bus");
    3234:	63 e1       	ldi	r22, 0x13	; 19
    3236:	7d e8       	ldi	r23, 0x8D	; 141
    3238:	81 e9       	ldi	r24, 0x91	; 145
    323a:	91 e0       	ldi	r25, 0x01	; 1
    323c:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		return(ERROR);
    3240:	83 e6       	ldi	r24, 0x63	; 99
    3242:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    3244:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3248:	83 ff       	sbrs	r24, 3
    324a:	08 c0       	rjmp	.+16     	; 0x325c <start_TWI+0x74>
		printError(ERR_TWI, "TWI arbitration");
    324c:	6b e1       	ldi	r22, 0x1B	; 27
    324e:	7d e8       	ldi	r23, 0x8D	; 141
    3250:	81 e9       	ldi	r24, 0x91	; 145
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	0e 94 77 06 	call	0xcee	; 0xcee <printError>
		return(ERROR);
    3258:	83 e6       	ldi	r24, 0x63	; 99
    325a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    325c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3260:	89 2f       	mov	r24, r25
    3262:	80 71       	andi	r24, 0x10	; 16
    3264:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3266:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3268:	08 95       	ret

0000326a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    326a:	87 e0       	ldi	r24, 0x07	; 7
    326c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3270:	08 95       	ret

00003272 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <write_TWI+0x4>
		asm("nop");
    3274:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3276:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    327a:	96 ff       	sbrs	r25, 6
    327c:	fb cf       	rjmp	.-10     	; 0x3274 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    327e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    328a:	0b c0       	rjmp	.+22     	; 0x32a2 <write_TWI+0x30>
		asm("nop");
    328c:	00 00       	nop
		if (ticks > 50) {
    328e:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    3292:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    3296:	c3 97       	sbiw	r24, 0x33	; 51
    3298:	20 f0       	brcs	.+8      	; 0x32a2 <write_TWI+0x30>
			stop_TCB0();
    329a:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
			return(ERROR);
    329e:	83 e6       	ldi	r24, 0x63	; 99
    32a0:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    32a2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32a6:	86 ff       	sbrs	r24, 6
    32a8:	f1 cf       	rjmp	.-30     	; 0x328c <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    32aa:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    32ae:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32b2:	89 2f       	mov	r24, r25
    32b4:	80 71       	andi	r24, 0x10	; 16
    32b6:	94 fd       	sbrc	r25, 4
		return(ERROR);
    32b8:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    32ba:	08 95       	ret

000032bc <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    32bc:	e0 e0       	ldi	r30, 0x00	; 0
    32be:	f4 e0       	ldi	r31, 0x04	; 4
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    32c4:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    32c6:	e0 e0       	ldi	r30, 0x00	; 0
    32c8:	f8 e0       	ldi	r31, 0x08	; 8
    32ca:	24 e7       	ldi	r18, 0x74	; 116
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	20 87       	std	Z+8, r18	; 0x08
    32d0:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    32d2:	95 81       	ldd	r25, Z+5	; 0x05
    32d4:	90 68       	ori	r25, 0x80	; 128
    32d6:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    32d8:	96 81       	ldd	r25, Z+6	; 0x06
    32da:	90 64       	ori	r25, 0x40	; 64
    32dc:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    32de:	96 81       	ldd	r25, Z+6	; 0x06
    32e0:	90 68       	ori	r25, 0x80	; 128
    32e2:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    32e4:	10 92 1d 2d 	sts	0x2D1D, r1	; 0x802d1d <send0_buf+0xfe>
	send0_buf.tail = 0;
    32e8:	10 92 1e 2d 	sts	0x2D1E, r1	; 0x802d1e <send0_buf+0xff>
	send0_buf.done = YES;
    32ec:	80 93 22 2d 	sts	0x2D22, r24	; 0x802d22 <send0_buf+0x103>
	recv0_buf.head = 0;
    32f0:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    32f4:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    32f8:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv0_buf>
	recv0_buf.length = 0;
    32fc:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x101>
	recv0_buf.done = NO;
    3300:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3304:	e0 e4       	ldi	r30, 0x40	; 64
    3306:	f4 e0       	ldi	r31, 0x04	; 4
    3308:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    330a:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    330c:	e0 e2       	ldi	r30, 0x20	; 32
    330e:	f8 e0       	ldi	r31, 0x08	; 8
    3310:	2b e5       	ldi	r18, 0x5B	; 91
    3312:	31 e0       	ldi	r19, 0x01	; 1
    3314:	20 87       	std	Z+8, r18	; 0x08
    3316:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3318:	95 81       	ldd	r25, Z+5	; 0x05
    331a:	90 68       	ori	r25, 0x80	; 128
    331c:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    331e:	96 81       	ldd	r25, Z+6	; 0x06
    3320:	90 64       	ori	r25, 0x40	; 64
    3322:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3324:	96 81       	ldd	r25, Z+6	; 0x06
    3326:	90 68       	ori	r25, 0x80	; 128
    3328:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    332a:	10 92 29 30 	sts	0x3029, r1	; 0x803029 <send1_buf+0xfe>
	send1_buf.tail = 0;
    332e:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.done = YES;
    3332:	80 93 2e 30 	sts	0x302E, r24	; 0x80302e <send1_buf+0x103>
	recv1_buf.head = 0;
    3336:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    333a:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    333e:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <recv1_buf>
	recv1_buf.done = NO;
    3342:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3346:	e0 e2       	ldi	r30, 0x20	; 32
    3348:	f4 e0       	ldi	r31, 0x04	; 4
    334a:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    334c:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    334e:	e0 e6       	ldi	r30, 0x60	; 96
    3350:	f8 e0       	ldi	r31, 0x08	; 8
    3352:	2d e6       	ldi	r18, 0x6D	; 109
    3354:	35 e0       	ldi	r19, 0x05	; 5
    3356:	20 87       	std	Z+8, r18	; 0x08
    3358:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    335a:	96 81       	ldd	r25, Z+6	; 0x06
    335c:	90 64       	ori	r25, 0x40	; 64
    335e:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3360:	96 81       	ldd	r25, Z+6	; 0x06
    3362:	90 68       	ori	r25, 0x80	; 128
    3364:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3366:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x103>
	recv3_buf.done = NO;
    336a:	10 92 26 2e 	sts	0x2E26, r1	; 0x802e26 <recv3_buf+0x103>
    336e:	08 95       	ret

00003370 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	eb 01       	movw	r28, r22
    337a:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	d1 f1       	breq	.+116    	; 0x33f4 <send_USART+0x84>
    3380:	20 f0       	brcs	.+8      	; 0x338a <send_USART+0x1a>
    3382:	83 30       	cpi	r24, 0x03	; 3
    3384:	09 f4       	brne	.+2      	; 0x3388 <send_USART+0x18>
    3386:	85 c0       	rjmp	.+266    	; 0x3492 <send_USART+0x122>
    3388:	8c c0       	rjmp	.+280    	; 0x34a2 <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    338a:	10 92 22 2d 	sts	0x2D22, r1	; 0x802d22 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    3392:	ed e1       	ldi	r30, 0x1D	; 29
    3394:	fd e2       	ldi	r31, 0x2D	; 45
    3396:	80 81       	ld	r24, Z
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	38 81       	ld	r19, Y
    339c:	dc 01       	movw	r26, r24
    339e:	a1 5e       	subi	r26, 0xE1	; 225
    33a0:	b3 4d       	sbci	r27, 0xD3	; 211
    33a2:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    33a4:	01 96       	adiw	r24, 0x01	; 1
    33a6:	6e ef       	ldi	r22, 0xFE	; 254
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
    33ae:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    33b0:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    33b2:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    33b4:	21 17       	cp	r18, r17
    33b6:	68 f3       	brcs	.-38     	; 0x3392 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    33b8:	e0 e0       	ldi	r30, 0x00	; 0
    33ba:	f8 e0       	ldi	r31, 0x08	; 8
    33bc:	85 81       	ldd	r24, Z+5	; 0x05
    33be:	80 62       	ori	r24, 0x20	; 32
    33c0:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    33c2:	8a e0       	ldi	r24, 0x0A	; 10
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 99 18 	call	0x3132	; 0x3132 <start_TCB0>
			while (send0_buf.done == NO) {
    33ca:	0d c0       	rjmp	.+26     	; 0x33e6 <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    33cc:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <ticks>
    33d0:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <ticks+0x1>
    33d4:	85 36       	cpi	r24, 0x65	; 101
    33d6:	91 05       	cpc	r25, r1
    33d8:	30 f0       	brcs	.+12     	; 0x33e6 <send_USART+0x76>
					stop_TCB0();
    33da:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
					send0_buf.done = YES;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	80 93 22 2d 	sts	0x2D22, r24	; 0x802d22 <send0_buf+0x103>
					return;
    33e4:	5e c0       	rjmp	.+188    	; 0x34a2 <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    33e6:	80 91 22 2d 	lds	r24, 0x2D22	; 0x802d22 <send0_buf+0x103>
    33ea:	88 23       	and	r24, r24
    33ec:	79 f3       	breq	.-34     	; 0x33cc <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    33ee:	0e 94 af 18 	call	0x315e	; 0x315e <stop_TCB0>
			break;
    33f2:	57 c0       	rjmp	.+174    	; 0x34a2 <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    33f4:	64 2f       	mov	r22, r20
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	ce 01       	movw	r24, r28
    33fa:	0e 94 38 14 	call	0x2870	; 0x2870 <crc16>
    33fe:	48 2f       	mov	r20, r24
    3400:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	11 c0       	rjmp	.+34     	; 0x3428 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    3406:	e9 e2       	ldi	r30, 0x29	; 41
    3408:	f0 e3       	ldi	r31, 0x30	; 48
    340a:	80 81       	ld	r24, Z
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	38 81       	ld	r19, Y
    3410:	dc 01       	movw	r26, r24
    3412:	a5 5d       	subi	r26, 0xD5	; 213
    3414:	b0 4d       	sbci	r27, 0xD0	; 208
    3416:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	6e ef       	ldi	r22, 0xFE	; 254
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
    3422:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3424:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3426:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3428:	21 17       	cp	r18, r17
    342a:	68 f3       	brcs	.-38     	; 0x3406 <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    342c:	e9 e2       	ldi	r30, 0x29	; 41
    342e:	f0 e3       	ldi	r31, 0x30	; 48
    3430:	80 81       	ld	r24, Z
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	dc 01       	movw	r26, r24
    3436:	a5 5d       	subi	r26, 0xD5	; 213
    3438:	b0 4d       	sbci	r27, 0xD0	; 208
    343a:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	2e ef       	ldi	r18, 0xFE	; 254
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	b9 01       	movw	r22, r18
    3444:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	dc 01       	movw	r26, r24
    344c:	a5 5d       	subi	r26, 0xD5	; 213
    344e:	b0 4d       	sbci	r27, 0xD0	; 208
    3450:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	b9 01       	movw	r22, r18
    3456:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
    345a:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    345c:	1e 5f       	subi	r17, 0xFE	; 254
    345e:	10 93 2b 30 	sts	0x302B, r17	; 0x80302b <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3462:	e0 e2       	ldi	r30, 0x20	; 32
    3464:	f8 e0       	ldi	r31, 0x08	; 8
    3466:	85 81       	ldd	r24, Z+5	; 0x05
    3468:	80 62       	ori	r24, 0x20	; 32
    346a:	85 83       	std	Z+5, r24	; 0x05
			break;
    346c:	1a c0       	rjmp	.+52     	; 0x34a2 <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    346e:	e5 e2       	ldi	r30, 0x25	; 37
    3470:	ff e2       	ldi	r31, 0x2F	; 47
    3472:	80 81       	ld	r24, Z
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	38 81       	ld	r19, Y
    3478:	dc 01       	movw	r26, r24
    347a:	a9 5d       	subi	r26, 0xD9	; 217
    347c:	b1 4d       	sbci	r27, 0xD1	; 209
    347e:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3480:	01 96       	adiw	r24, 0x01	; 1
    3482:	6e ef       	ldi	r22, 0xFE	; 254
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
    348a:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    348c:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    348e:	21 96       	adiw	r28, 0x01	; 1
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3492:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3494:	21 17       	cp	r18, r17
    3496:	58 f3       	brcs	.-42     	; 0x346e <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3498:	e0 e6       	ldi	r30, 0x60	; 96
    349a:	f8 e0       	ldi	r31, 0x08	; 8
    349c:	85 81       	ldd	r24, Z+5	; 0x05
    349e:	80 62       	ori	r24, 0x20	; 32
    34a0:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    34ac:	1f 92       	push	r1
    34ae:	0f 92       	push	r0
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	0f 92       	push	r0
    34b4:	11 24       	eor	r1, r1
    34b6:	5f 93       	push	r21
    34b8:	6f 93       	push	r22
    34ba:	7f 93       	push	r23
    34bc:	8f 93       	push	r24
    34be:	9f 93       	push	r25
    34c0:	af 93       	push	r26
    34c2:	bf 93       	push	r27
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    34c8:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < BUFSIZE) {
    34cc:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <recv0_buf+0x101>
    34d0:	8e 3f       	cpi	r24, 0xFE	; 254
    34d2:	10 f5       	brcc	.+68     	; 0x3518 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    34d4:	9d 30       	cpi	r25, 0x0D	; 13
    34d6:	51 f4       	brne	.+20     	; 0x34ec <__vector_17+0x40>
			recv0_buf.done = YES;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    34de:	e0 91 19 2c 	lds	r30, 0x2C19	; 0x802c19 <recv0_buf+0xfe>
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	e5 5e       	subi	r30, 0xE5	; 229
    34e6:	f4 4d       	sbci	r31, 0xD4	; 212
    34e8:	10 82       	st	Z, r1
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    34ec:	e0 91 19 2c 	lds	r30, 0x2C19	; 0x802c19 <recv0_buf+0xfe>
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	e5 5e       	subi	r30, 0xE5	; 229
    34f4:	f4 4d       	sbci	r31, 0xD4	; 212
    34f6:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    34f8:	ec e1       	ldi	r30, 0x1C	; 28
    34fa:	fc e2       	ldi	r31, 0x2C	; 44
    34fc:	80 81       	ld	r24, Z
    34fe:	8f 5f       	subi	r24, 0xFF	; 255
    3500:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3502:	e9 e1       	ldi	r30, 0x19	; 25
    3504:	fc e2       	ldi	r31, 0x2C	; 44
    3506:	80 81       	ld	r24, Z
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	01 96       	adiw	r24, 0x01	; 1
    350c:	6e ef       	ldi	r22, 0xFE	; 254
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divmodhi4>
    3514:	80 83       	st	Z, r24
    3516:	0a c0       	rjmp	.+20     	; 0x352c <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    3518:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    351c:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    3520:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv0_buf>
		recv0_buf.length = 0;
    3524:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x101>
		recv0_buf.done = NO;
    3528:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x103>
	}
}
    352c:	ff 91       	pop	r31
    352e:	ef 91       	pop	r30
    3530:	bf 91       	pop	r27
    3532:	af 91       	pop	r26
    3534:	9f 91       	pop	r25
    3536:	8f 91       	pop	r24
    3538:	7f 91       	pop	r23
    353a:	6f 91       	pop	r22
    353c:	5f 91       	pop	r21
    353e:	0f 90       	pop	r0
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	0f 90       	pop	r0
    3544:	1f 90       	pop	r1
    3546:	18 95       	reti

00003548 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    3548:	1f 92       	push	r1
    354a:	0f 92       	push	r0
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	0f 92       	push	r0
    3550:	11 24       	eor	r1, r1
    3552:	2f 93       	push	r18
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	ef 93       	push	r30
    355a:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    355c:	e0 e0       	ldi	r30, 0x00	; 0
    355e:	f8 e0       	ldi	r31, 0x08	; 8
    3560:	85 81       	ldd	r24, Z+5	; 0x05
    3562:	8f 7d       	andi	r24, 0xDF	; 223
    3564:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3566:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <send0_buf+0xfe>
    356a:	e0 91 1e 2d 	lds	r30, 0x2D1E	; 0x802d1e <send0_buf+0xff>
    356e:	8e 17       	cp	r24, r30
    3570:	d1 f0       	breq	.+52     	; 0x35a6 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	8e 0f       	add	r24, r30
    3576:	80 93 1e 2d 	sts	0x2D1E, r24	; 0x802d1e <send0_buf+0xff>
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	e1 5e       	subi	r30, 0xE1	; 225
    357e:	f3 4d       	sbci	r31, 0xD3	; 211
    3580:	90 81       	ld	r25, Z
    3582:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3586:	91 e0       	ldi	r25, 0x01	; 1
    3588:	8e 3f       	cpi	r24, 0xFE	; 254
    358a:	08 f4       	brcc	.+2      	; 0x358e <__vector_18+0x46>
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	91 95       	neg	r25
    3590:	29 2f       	mov	r18, r25
    3592:	22 0f       	add	r18, r18
    3594:	82 1b       	sub	r24, r18
    3596:	80 93 1e 2d 	sts	0x2D1E, r24	; 0x802d1e <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    359a:	e0 e0       	ldi	r30, 0x00	; 0
    359c:	f8 e0       	ldi	r31, 0x08	; 8
    359e:	85 81       	ldd	r24, Z+5	; 0x05
    35a0:	80 62       	ori	r24, 0x20	; 32
    35a2:	85 83       	std	Z+5, r24	; 0x05
    35a4:	03 c0       	rjmp	.+6      	; 0x35ac <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	80 93 22 2d 	sts	0x2D22, r24	; 0x802d22 <send0_buf+0x103>
	}

}
    35ac:	ff 91       	pop	r31
    35ae:	ef 91       	pop	r30
    35b0:	9f 91       	pop	r25
    35b2:	8f 91       	pop	r24
    35b4:	2f 91       	pop	r18
    35b6:	0f 90       	pop	r0
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	0f 90       	pop	r0
    35bc:	1f 90       	pop	r1
    35be:	18 95       	reti

000035c0 <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    35c0:	1f 92       	push	r1
    35c2:	0f 92       	push	r0
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	0f 92       	push	r0
    35c8:	11 24       	eor	r1, r1
    35ca:	2f 93       	push	r18
    35cc:	8f 93       	push	r24
    35ce:	9f 93       	push	r25
    35d0:	ef 93       	push	r30
    35d2:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    35d4:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    35d8:	e0 91 19 2b 	lds	r30, 0x2B19	; 0x802b19 <recv1_buf+0x102>
    35dc:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <recv1_buf+0x100>
    35e0:	e8 17       	cp	r30, r24
    35e2:	40 f4       	brcc	.+16     	; 0x35f4 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    35e4:	21 e0       	ldi	r18, 0x01	; 1
    35e6:	2e 0f       	add	r18, r30
    35e8:	20 93 19 2b 	sts	0x2B19, r18	; 0x802b19 <recv1_buf+0x102>
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	e9 5e       	subi	r30, 0xE9	; 233
    35f0:	f5 4d       	sbci	r31, 0xD5	; 213
    35f2:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    35f4:	90 91 19 2b 	lds	r25, 0x2B19	; 0x802b19 <recv1_buf+0x102>
    35f8:	98 17       	cp	r25, r24
    35fa:	18 f0       	brcs	.+6      	; 0x3602 <__vector_26+0x42>
		recv1_buf.done = YES;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	80 93 1a 2b 	sts	0x2B1A, r24	; 0x802b1a <recv1_buf+0x103>
	}

}
    3602:	ff 91       	pop	r31
    3604:	ef 91       	pop	r30
    3606:	9f 91       	pop	r25
    3608:	8f 91       	pop	r24
    360a:	2f 91       	pop	r18
    360c:	0f 90       	pop	r0
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	0f 90       	pop	r0
    3612:	1f 90       	pop	r1
    3614:	18 95       	reti

00003616 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3616:	1f 92       	push	r1
    3618:	0f 92       	push	r0
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	0f 92       	push	r0
    361e:	11 24       	eor	r1, r1
    3620:	2f 93       	push	r18
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    362a:	e0 e2       	ldi	r30, 0x20	; 32
    362c:	f8 e0       	ldi	r31, 0x08	; 8
    362e:	85 81       	ldd	r24, Z+5	; 0x05
    3630:	8f 7d       	andi	r24, 0xDF	; 223
    3632:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3634:	80 91 29 30 	lds	r24, 0x3029	; 0x803029 <send1_buf+0xfe>
    3638:	e0 91 2a 30 	lds	r30, 0x302A	; 0x80302a <send1_buf+0xff>
    363c:	8e 17       	cp	r24, r30
    363e:	d1 f0       	breq	.+52     	; 0x3674 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	8e 0f       	add	r24, r30
    3644:	80 93 2a 30 	sts	0x302A, r24	; 0x80302a <send1_buf+0xff>
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	e5 5d       	subi	r30, 0xD5	; 213
    364c:	f0 4d       	sbci	r31, 0xD0	; 208
    364e:	90 81       	ld	r25, Z
    3650:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	8e 3f       	cpi	r24, 0xFE	; 254
    3658:	08 f4       	brcc	.+2      	; 0x365c <__vector_27+0x46>
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	91 95       	neg	r25
    365e:	29 2f       	mov	r18, r25
    3660:	22 0f       	add	r18, r18
    3662:	82 1b       	sub	r24, r18
    3664:	80 93 2a 30 	sts	0x302A, r24	; 0x80302a <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3668:	e0 e2       	ldi	r30, 0x20	; 32
    366a:	f8 e0       	ldi	r31, 0x08	; 8
    366c:	85 81       	ldd	r24, Z+5	; 0x05
    366e:	80 62       	ori	r24, 0x20	; 32
    3670:	85 83       	std	Z+5, r24	; 0x05
    3672:	03 c0       	rjmp	.+6      	; 0x367a <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 2e 30 	sts	0x302E, r24	; 0x80302e <send1_buf+0x103>
	}

}
    367a:	ff 91       	pop	r31
    367c:	ef 91       	pop	r30
    367e:	9f 91       	pop	r25
    3680:	8f 91       	pop	r24
    3682:	2f 91       	pop	r18
    3684:	0f 90       	pop	r0
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	0f 90       	pop	r0
    368a:	1f 90       	pop	r1
    368c:	18 95       	reti

0000368e <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    368e:	1f 92       	push	r1
    3690:	0f 92       	push	r0
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	0f 92       	push	r0
    3696:	11 24       	eor	r1, r1
    3698:	8f 93       	push	r24
    369a:	9f 93       	push	r25
    369c:	af 93       	push	r26
    369e:	bf 93       	push	r27
    36a0:	ef 93       	push	r30
    36a2:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    36a4:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    36a8:	8d 30       	cpi	r24, 0x0D	; 13
    36aa:	21 f0       	breq	.+8      	; 0x36b4 <__vector_37+0x26>
    36ac:	e0 91 25 2e 	lds	r30, 0x2E25	; 0x802e25 <recv3_buf+0x102>
    36b0:	ed 3f       	cpi	r30, 0xFD	; 253
    36b2:	78 f0       	brcs	.+30     	; 0x36d2 <__vector_37+0x44>
		recv3_buf.done = YES;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	80 93 26 2e 	sts	0x2E26, r24	; 0x802e26 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    36ba:	a5 e2       	ldi	r26, 0x25	; 37
    36bc:	be e2       	ldi	r27, 0x2E	; 46
    36be:	8c 91       	ld	r24, X
    36c0:	e8 2f       	mov	r30, r24
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	ed 5d       	subi	r30, 0xDD	; 221
    36c6:	f2 4d       	sbci	r31, 0xD2	; 210
    36c8:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    36ca:	80 93 23 2e 	sts	0x2E23, r24	; 0x802e23 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    36ce:	1c 92       	st	X, r1
		return;
    36d0:	08 c0       	rjmp	.+16     	; 0x36e2 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	9e 0f       	add	r25, r30
    36d6:	90 93 25 2e 	sts	0x2E25, r25	; 0x802e25 <recv3_buf+0x102>
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	ed 5d       	subi	r30, 0xDD	; 221
    36de:	f2 4d       	sbci	r31, 0xD2	; 210
    36e0:	80 83       	st	Z, r24
	}

}
    36e2:	ff 91       	pop	r31
    36e4:	ef 91       	pop	r30
    36e6:	bf 91       	pop	r27
    36e8:	af 91       	pop	r26
    36ea:	9f 91       	pop	r25
    36ec:	8f 91       	pop	r24
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

000036f8 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    36f8:	1f 92       	push	r1
    36fa:	0f 92       	push	r0
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	0f 92       	push	r0
    3700:	11 24       	eor	r1, r1
    3702:	8f 93       	push	r24
    3704:	9f 93       	push	r25
    3706:	af 93       	push	r26
    3708:	bf 93       	push	r27
    370a:	ef 93       	push	r30
    370c:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    370e:	a9 e2       	ldi	r26, 0x29	; 41
    3710:	bf e2       	ldi	r27, 0x2F	; 47
    3712:	ec 91       	ld	r30, X
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	8e 0f       	add	r24, r30
    3718:	8c 93       	st	X, r24
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	e9 5d       	subi	r30, 0xD9	; 217
    371e:	f1 4d       	sbci	r31, 0xD1	; 209
    3720:	90 81       	ld	r25, Z
    3722:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3726:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x100>
    372a:	89 17       	cp	r24, r25
    372c:	40 f0       	brcs	.+16     	; 0x373e <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    372e:	e0 e6       	ldi	r30, 0x60	; 96
    3730:	f8 e0       	ldi	r31, 0x08	; 8
    3732:	85 81       	ldd	r24, Z+5	; 0x05
    3734:	8f 7d       	andi	r24, 0xDF	; 223
    3736:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x103>
	}

}
    373e:	ff 91       	pop	r31
    3740:	ef 91       	pop	r30
    3742:	bf 91       	pop	r27
    3744:	af 91       	pop	r26
    3746:	9f 91       	pop	r25
    3748:	8f 91       	pop	r24
    374a:	0f 90       	pop	r0
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	0f 90       	pop	r0
    3750:	1f 90       	pop	r1
    3752:	18 95       	reti

00003754 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3754:	0e 94 5e 19 	call	0x32bc	; 0x32bc <init_USART>
	init_XPORT();
    3758:	0e 94 df 1b 	call	0x37be	; 0x37be <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    375c:	88 ed       	ldi	r24, 0xD8	; 216
    375e:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3766:	08 95       	ret

00003768 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	2f 93       	push	r18
    3774:	3f 93       	push	r19
    3776:	4f 93       	push	r20
    3778:	5f 93       	push	r21
    377a:	6f 93       	push	r22
    377c:	7f 93       	push	r23
    377e:	8f 93       	push	r24
    3780:	9f 93       	push	r25
    3782:	af 93       	push	r26
    3784:	bf 93       	push	r27
    3786:	ef 93       	push	r30
    3788:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    378a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    378e:	86 ff       	sbrs	r24, 6
    3790:	05 c0       	rjmp	.+10     	; 0x379c <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    3792:	80 e4       	ldi	r24, 0x40	; 64
    3794:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    3798:	0e 94 aa 1b 	call	0x3754	; 0x3754 <reboot>
	}

}
    379c:	ff 91       	pop	r31
    379e:	ef 91       	pop	r30
    37a0:	bf 91       	pop	r27
    37a2:	af 91       	pop	r26
    37a4:	9f 91       	pop	r25
    37a6:	8f 91       	pop	r24
    37a8:	7f 91       	pop	r23
    37aa:	6f 91       	pop	r22
    37ac:	5f 91       	pop	r21
    37ae:	4f 91       	pop	r20
    37b0:	3f 91       	pop	r19
    37b2:	2f 91       	pop	r18
    37b4:	0f 90       	pop	r0
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	0f 90       	pop	r0
    37ba:	1f 90       	pop	r1
    37bc:	18 95       	reti

000037be <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    37be:	e0 e4       	ldi	r30, 0x40	; 64
    37c0:	f4 e0       	ldi	r31, 0x04	; 4
    37c2:	88 e0       	ldi	r24, 0x08	; 8
    37c4:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    37c6:	81 83       	std	Z+1, r24	; 0x01
    37c8:	ad e8       	ldi	r26, 0x8D	; 141
    37ca:	b0 e2       	ldi	r27, 0x20	; 32
    37cc:	11 97       	sbiw	r26, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <init_XPORT+0xe>
    37d0:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    37d2:	85 83       	std	Z+5, r24	; 0x05
    37d4:	08 95       	ret

000037d6 <__subsf3>:
    37d6:	50 58       	subi	r21, 0x80	; 128

000037d8 <__addsf3>:
    37d8:	bb 27       	eor	r27, r27
    37da:	aa 27       	eor	r26, r26
    37dc:	0e 94 03 1c 	call	0x3806	; 0x3806 <__addsf3x>
    37e0:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__fp_round>
    37e4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__fp_pscA>
    37e8:	38 f0       	brcs	.+14     	; 0x37f8 <__addsf3+0x20>
    37ea:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__fp_pscB>
    37ee:	20 f0       	brcs	.+8      	; 0x37f8 <__addsf3+0x20>
    37f0:	39 f4       	brne	.+14     	; 0x3800 <__addsf3+0x28>
    37f2:	9f 3f       	cpi	r25, 0xFF	; 255
    37f4:	19 f4       	brne	.+6      	; 0x37fc <__addsf3+0x24>
    37f6:	26 f4       	brtc	.+8      	; 0x3800 <__addsf3+0x28>
    37f8:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__fp_nan>
    37fc:	0e f4       	brtc	.+2      	; 0x3800 <__addsf3+0x28>
    37fe:	e0 95       	com	r30
    3800:	e7 fb       	bst	r30, 7
    3802:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_inf>

00003806 <__addsf3x>:
    3806:	e9 2f       	mov	r30, r25
    3808:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__fp_split3>
    380c:	58 f3       	brcs	.-42     	; 0x37e4 <__addsf3+0xc>
    380e:	ba 17       	cp	r27, r26
    3810:	62 07       	cpc	r22, r18
    3812:	73 07       	cpc	r23, r19
    3814:	84 07       	cpc	r24, r20
    3816:	95 07       	cpc	r25, r21
    3818:	20 f0       	brcs	.+8      	; 0x3822 <__addsf3x+0x1c>
    381a:	79 f4       	brne	.+30     	; 0x383a <__addsf3x+0x34>
    381c:	a6 f5       	brtc	.+104    	; 0x3886 <__addsf3x+0x80>
    381e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__fp_zero>
    3822:	0e f4       	brtc	.+2      	; 0x3826 <__addsf3x+0x20>
    3824:	e0 95       	com	r30
    3826:	0b 2e       	mov	r0, r27
    3828:	ba 2f       	mov	r27, r26
    382a:	a0 2d       	mov	r26, r0
    382c:	0b 01       	movw	r0, r22
    382e:	b9 01       	movw	r22, r18
    3830:	90 01       	movw	r18, r0
    3832:	0c 01       	movw	r0, r24
    3834:	ca 01       	movw	r24, r20
    3836:	a0 01       	movw	r20, r0
    3838:	11 24       	eor	r1, r1
    383a:	ff 27       	eor	r31, r31
    383c:	59 1b       	sub	r21, r25
    383e:	99 f0       	breq	.+38     	; 0x3866 <__addsf3x+0x60>
    3840:	59 3f       	cpi	r21, 0xF9	; 249
    3842:	50 f4       	brcc	.+20     	; 0x3858 <__addsf3x+0x52>
    3844:	50 3e       	cpi	r21, 0xE0	; 224
    3846:	68 f1       	brcs	.+90     	; 0x38a2 <__addsf3x+0x9c>
    3848:	1a 16       	cp	r1, r26
    384a:	f0 40       	sbci	r31, 0x00	; 0
    384c:	a2 2f       	mov	r26, r18
    384e:	23 2f       	mov	r18, r19
    3850:	34 2f       	mov	r19, r20
    3852:	44 27       	eor	r20, r20
    3854:	58 5f       	subi	r21, 0xF8	; 248
    3856:	f3 cf       	rjmp	.-26     	; 0x383e <__addsf3x+0x38>
    3858:	46 95       	lsr	r20
    385a:	37 95       	ror	r19
    385c:	27 95       	ror	r18
    385e:	a7 95       	ror	r26
    3860:	f0 40       	sbci	r31, 0x00	; 0
    3862:	53 95       	inc	r21
    3864:	c9 f7       	brne	.-14     	; 0x3858 <__addsf3x+0x52>
    3866:	7e f4       	brtc	.+30     	; 0x3886 <__addsf3x+0x80>
    3868:	1f 16       	cp	r1, r31
    386a:	ba 0b       	sbc	r27, r26
    386c:	62 0b       	sbc	r22, r18
    386e:	73 0b       	sbc	r23, r19
    3870:	84 0b       	sbc	r24, r20
    3872:	ba f0       	brmi	.+46     	; 0x38a2 <__addsf3x+0x9c>
    3874:	91 50       	subi	r25, 0x01	; 1
    3876:	a1 f0       	breq	.+40     	; 0x38a0 <__addsf3x+0x9a>
    3878:	ff 0f       	add	r31, r31
    387a:	bb 1f       	adc	r27, r27
    387c:	66 1f       	adc	r22, r22
    387e:	77 1f       	adc	r23, r23
    3880:	88 1f       	adc	r24, r24
    3882:	c2 f7       	brpl	.-16     	; 0x3874 <__addsf3x+0x6e>
    3884:	0e c0       	rjmp	.+28     	; 0x38a2 <__addsf3x+0x9c>
    3886:	ba 0f       	add	r27, r26
    3888:	62 1f       	adc	r22, r18
    388a:	73 1f       	adc	r23, r19
    388c:	84 1f       	adc	r24, r20
    388e:	48 f4       	brcc	.+18     	; 0x38a2 <__addsf3x+0x9c>
    3890:	87 95       	ror	r24
    3892:	77 95       	ror	r23
    3894:	67 95       	ror	r22
    3896:	b7 95       	ror	r27
    3898:	f7 95       	ror	r31
    389a:	9e 3f       	cpi	r25, 0xFE	; 254
    389c:	08 f0       	brcs	.+2      	; 0x38a0 <__addsf3x+0x9a>
    389e:	b0 cf       	rjmp	.-160    	; 0x3800 <__addsf3+0x28>
    38a0:	93 95       	inc	r25
    38a2:	88 0f       	add	r24, r24
    38a4:	08 f0       	brcs	.+2      	; 0x38a8 <__addsf3x+0xa2>
    38a6:	99 27       	eor	r25, r25
    38a8:	ee 0f       	add	r30, r30
    38aa:	97 95       	ror	r25
    38ac:	87 95       	ror	r24
    38ae:	08 95       	ret

000038b0 <__cmpsf2>:
    38b0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <__fp_cmp>
    38b4:	08 f4       	brcc	.+2      	; 0x38b8 <__cmpsf2+0x8>
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	08 95       	ret

000038ba <__divsf3>:
    38ba:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__divsf3x>
    38be:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__fp_round>
    38c2:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__fp_pscB>
    38c6:	58 f0       	brcs	.+22     	; 0x38de <__divsf3+0x24>
    38c8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__fp_pscA>
    38cc:	40 f0       	brcs	.+16     	; 0x38de <__divsf3+0x24>
    38ce:	29 f4       	brne	.+10     	; 0x38da <__divsf3+0x20>
    38d0:	5f 3f       	cpi	r21, 0xFF	; 255
    38d2:	29 f0       	breq	.+10     	; 0x38de <__divsf3+0x24>
    38d4:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_inf>
    38d8:	51 11       	cpse	r21, r1
    38da:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__fp_szero>
    38de:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__fp_nan>

000038e2 <__divsf3x>:
    38e2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__fp_split3>
    38e6:	68 f3       	brcs	.-38     	; 0x38c2 <__divsf3+0x8>

000038e8 <__divsf3_pse>:
    38e8:	99 23       	and	r25, r25
    38ea:	b1 f3       	breq	.-20     	; 0x38d8 <__divsf3+0x1e>
    38ec:	55 23       	and	r21, r21
    38ee:	91 f3       	breq	.-28     	; 0x38d4 <__divsf3+0x1a>
    38f0:	95 1b       	sub	r25, r21
    38f2:	55 0b       	sbc	r21, r21
    38f4:	bb 27       	eor	r27, r27
    38f6:	aa 27       	eor	r26, r26
    38f8:	62 17       	cp	r22, r18
    38fa:	73 07       	cpc	r23, r19
    38fc:	84 07       	cpc	r24, r20
    38fe:	38 f0       	brcs	.+14     	; 0x390e <__divsf3_pse+0x26>
    3900:	9f 5f       	subi	r25, 0xFF	; 255
    3902:	5f 4f       	sbci	r21, 0xFF	; 255
    3904:	22 0f       	add	r18, r18
    3906:	33 1f       	adc	r19, r19
    3908:	44 1f       	adc	r20, r20
    390a:	aa 1f       	adc	r26, r26
    390c:	a9 f3       	breq	.-22     	; 0x38f8 <__divsf3_pse+0x10>
    390e:	35 d0       	rcall	.+106    	; 0x397a <__divsf3_pse+0x92>
    3910:	0e 2e       	mov	r0, r30
    3912:	3a f0       	brmi	.+14     	; 0x3922 <__divsf3_pse+0x3a>
    3914:	e0 e8       	ldi	r30, 0x80	; 128
    3916:	32 d0       	rcall	.+100    	; 0x397c <__divsf3_pse+0x94>
    3918:	91 50       	subi	r25, 0x01	; 1
    391a:	50 40       	sbci	r21, 0x00	; 0
    391c:	e6 95       	lsr	r30
    391e:	00 1c       	adc	r0, r0
    3920:	ca f7       	brpl	.-14     	; 0x3914 <__divsf3_pse+0x2c>
    3922:	2b d0       	rcall	.+86     	; 0x397a <__divsf3_pse+0x92>
    3924:	fe 2f       	mov	r31, r30
    3926:	29 d0       	rcall	.+82     	; 0x397a <__divsf3_pse+0x92>
    3928:	66 0f       	add	r22, r22
    392a:	77 1f       	adc	r23, r23
    392c:	88 1f       	adc	r24, r24
    392e:	bb 1f       	adc	r27, r27
    3930:	26 17       	cp	r18, r22
    3932:	37 07       	cpc	r19, r23
    3934:	48 07       	cpc	r20, r24
    3936:	ab 07       	cpc	r26, r27
    3938:	b0 e8       	ldi	r27, 0x80	; 128
    393a:	09 f0       	breq	.+2      	; 0x393e <__divsf3_pse+0x56>
    393c:	bb 0b       	sbc	r27, r27
    393e:	80 2d       	mov	r24, r0
    3940:	bf 01       	movw	r22, r30
    3942:	ff 27       	eor	r31, r31
    3944:	93 58       	subi	r25, 0x83	; 131
    3946:	5f 4f       	sbci	r21, 0xFF	; 255
    3948:	3a f0       	brmi	.+14     	; 0x3958 <__divsf3_pse+0x70>
    394a:	9e 3f       	cpi	r25, 0xFE	; 254
    394c:	51 05       	cpc	r21, r1
    394e:	78 f0       	brcs	.+30     	; 0x396e <__divsf3_pse+0x86>
    3950:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_inf>
    3954:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__fp_szero>
    3958:	5f 3f       	cpi	r21, 0xFF	; 255
    395a:	e4 f3       	brlt	.-8      	; 0x3954 <__divsf3_pse+0x6c>
    395c:	98 3e       	cpi	r25, 0xE8	; 232
    395e:	d4 f3       	brlt	.-12     	; 0x3954 <__divsf3_pse+0x6c>
    3960:	86 95       	lsr	r24
    3962:	77 95       	ror	r23
    3964:	67 95       	ror	r22
    3966:	b7 95       	ror	r27
    3968:	f7 95       	ror	r31
    396a:	9f 5f       	subi	r25, 0xFF	; 255
    396c:	c9 f7       	brne	.-14     	; 0x3960 <__divsf3_pse+0x78>
    396e:	88 0f       	add	r24, r24
    3970:	91 1d       	adc	r25, r1
    3972:	96 95       	lsr	r25
    3974:	87 95       	ror	r24
    3976:	97 f9       	bld	r25, 7
    3978:	08 95       	ret
    397a:	e1 e0       	ldi	r30, 0x01	; 1
    397c:	66 0f       	add	r22, r22
    397e:	77 1f       	adc	r23, r23
    3980:	88 1f       	adc	r24, r24
    3982:	bb 1f       	adc	r27, r27
    3984:	62 17       	cp	r22, r18
    3986:	73 07       	cpc	r23, r19
    3988:	84 07       	cpc	r24, r20
    398a:	ba 07       	cpc	r27, r26
    398c:	20 f0       	brcs	.+8      	; 0x3996 <__divsf3_pse+0xae>
    398e:	62 1b       	sub	r22, r18
    3990:	73 0b       	sbc	r23, r19
    3992:	84 0b       	sbc	r24, r20
    3994:	ba 0b       	sbc	r27, r26
    3996:	ee 1f       	adc	r30, r30
    3998:	88 f7       	brcc	.-30     	; 0x397c <__divsf3_pse+0x94>
    399a:	e0 95       	com	r30
    399c:	08 95       	ret

0000399e <__floatunsisf>:
    399e:	e8 94       	clt
    39a0:	09 c0       	rjmp	.+18     	; 0x39b4 <__floatsisf+0x12>

000039a2 <__floatsisf>:
    39a2:	97 fb       	bst	r25, 7
    39a4:	3e f4       	brtc	.+14     	; 0x39b4 <__floatsisf+0x12>
    39a6:	90 95       	com	r25
    39a8:	80 95       	com	r24
    39aa:	70 95       	com	r23
    39ac:	61 95       	neg	r22
    39ae:	7f 4f       	sbci	r23, 0xFF	; 255
    39b0:	8f 4f       	sbci	r24, 0xFF	; 255
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	99 23       	and	r25, r25
    39b6:	a9 f0       	breq	.+42     	; 0x39e2 <__floatsisf+0x40>
    39b8:	f9 2f       	mov	r31, r25
    39ba:	96 e9       	ldi	r25, 0x96	; 150
    39bc:	bb 27       	eor	r27, r27
    39be:	93 95       	inc	r25
    39c0:	f6 95       	lsr	r31
    39c2:	87 95       	ror	r24
    39c4:	77 95       	ror	r23
    39c6:	67 95       	ror	r22
    39c8:	b7 95       	ror	r27
    39ca:	f1 11       	cpse	r31, r1
    39cc:	f8 cf       	rjmp	.-16     	; 0x39be <__floatsisf+0x1c>
    39ce:	fa f4       	brpl	.+62     	; 0x3a0e <__floatsisf+0x6c>
    39d0:	bb 0f       	add	r27, r27
    39d2:	11 f4       	brne	.+4      	; 0x39d8 <__floatsisf+0x36>
    39d4:	60 ff       	sbrs	r22, 0
    39d6:	1b c0       	rjmp	.+54     	; 0x3a0e <__floatsisf+0x6c>
    39d8:	6f 5f       	subi	r22, 0xFF	; 255
    39da:	7f 4f       	sbci	r23, 0xFF	; 255
    39dc:	8f 4f       	sbci	r24, 0xFF	; 255
    39de:	9f 4f       	sbci	r25, 0xFF	; 255
    39e0:	16 c0       	rjmp	.+44     	; 0x3a0e <__floatsisf+0x6c>
    39e2:	88 23       	and	r24, r24
    39e4:	11 f0       	breq	.+4      	; 0x39ea <__floatsisf+0x48>
    39e6:	96 e9       	ldi	r25, 0x96	; 150
    39e8:	11 c0       	rjmp	.+34     	; 0x3a0c <__floatsisf+0x6a>
    39ea:	77 23       	and	r23, r23
    39ec:	21 f0       	breq	.+8      	; 0x39f6 <__floatsisf+0x54>
    39ee:	9e e8       	ldi	r25, 0x8E	; 142
    39f0:	87 2f       	mov	r24, r23
    39f2:	76 2f       	mov	r23, r22
    39f4:	05 c0       	rjmp	.+10     	; 0x3a00 <__floatsisf+0x5e>
    39f6:	66 23       	and	r22, r22
    39f8:	71 f0       	breq	.+28     	; 0x3a16 <__floatsisf+0x74>
    39fa:	96 e8       	ldi	r25, 0x86	; 134
    39fc:	86 2f       	mov	r24, r22
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	2a f0       	brmi	.+10     	; 0x3a0e <__floatsisf+0x6c>
    3a04:	9a 95       	dec	r25
    3a06:	66 0f       	add	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	da f7       	brpl	.-10     	; 0x3a04 <__floatsisf+0x62>
    3a0e:	88 0f       	add	r24, r24
    3a10:	96 95       	lsr	r25
    3a12:	87 95       	ror	r24
    3a14:	97 f9       	bld	r25, 7
    3a16:	08 95       	ret

00003a18 <__fp_cmp>:
    3a18:	99 0f       	add	r25, r25
    3a1a:	00 08       	sbc	r0, r0
    3a1c:	55 0f       	add	r21, r21
    3a1e:	aa 0b       	sbc	r26, r26
    3a20:	e0 e8       	ldi	r30, 0x80	; 128
    3a22:	fe ef       	ldi	r31, 0xFE	; 254
    3a24:	16 16       	cp	r1, r22
    3a26:	17 06       	cpc	r1, r23
    3a28:	e8 07       	cpc	r30, r24
    3a2a:	f9 07       	cpc	r31, r25
    3a2c:	c0 f0       	brcs	.+48     	; 0x3a5e <__fp_cmp+0x46>
    3a2e:	12 16       	cp	r1, r18
    3a30:	13 06       	cpc	r1, r19
    3a32:	e4 07       	cpc	r30, r20
    3a34:	f5 07       	cpc	r31, r21
    3a36:	98 f0       	brcs	.+38     	; 0x3a5e <__fp_cmp+0x46>
    3a38:	62 1b       	sub	r22, r18
    3a3a:	73 0b       	sbc	r23, r19
    3a3c:	84 0b       	sbc	r24, r20
    3a3e:	95 0b       	sbc	r25, r21
    3a40:	39 f4       	brne	.+14     	; 0x3a50 <__fp_cmp+0x38>
    3a42:	0a 26       	eor	r0, r26
    3a44:	61 f0       	breq	.+24     	; 0x3a5e <__fp_cmp+0x46>
    3a46:	23 2b       	or	r18, r19
    3a48:	24 2b       	or	r18, r20
    3a4a:	25 2b       	or	r18, r21
    3a4c:	21 f4       	brne	.+8      	; 0x3a56 <__fp_cmp+0x3e>
    3a4e:	08 95       	ret
    3a50:	0a 26       	eor	r0, r26
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <__fp_cmp+0x3e>
    3a54:	a1 40       	sbci	r26, 0x01	; 1
    3a56:	a6 95       	lsr	r26
    3a58:	8f ef       	ldi	r24, 0xFF	; 255
    3a5a:	81 1d       	adc	r24, r1
    3a5c:	81 1d       	adc	r24, r1
    3a5e:	08 95       	ret

00003a60 <__fp_inf>:
    3a60:	97 f9       	bld	r25, 7
    3a62:	9f 67       	ori	r25, 0x7F	; 127
    3a64:	80 e8       	ldi	r24, 0x80	; 128
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	08 95       	ret

00003a6c <__fp_nan>:
    3a6c:	9f ef       	ldi	r25, 0xFF	; 255
    3a6e:	80 ec       	ldi	r24, 0xC0	; 192
    3a70:	08 95       	ret

00003a72 <__fp_pscA>:
    3a72:	00 24       	eor	r0, r0
    3a74:	0a 94       	dec	r0
    3a76:	16 16       	cp	r1, r22
    3a78:	17 06       	cpc	r1, r23
    3a7a:	18 06       	cpc	r1, r24
    3a7c:	09 06       	cpc	r0, r25
    3a7e:	08 95       	ret

00003a80 <__fp_pscB>:
    3a80:	00 24       	eor	r0, r0
    3a82:	0a 94       	dec	r0
    3a84:	12 16       	cp	r1, r18
    3a86:	13 06       	cpc	r1, r19
    3a88:	14 06       	cpc	r1, r20
    3a8a:	05 06       	cpc	r0, r21
    3a8c:	08 95       	ret

00003a8e <__fp_round>:
    3a8e:	09 2e       	mov	r0, r25
    3a90:	03 94       	inc	r0
    3a92:	00 0c       	add	r0, r0
    3a94:	11 f4       	brne	.+4      	; 0x3a9a <__fp_round+0xc>
    3a96:	88 23       	and	r24, r24
    3a98:	52 f0       	brmi	.+20     	; 0x3aae <__fp_round+0x20>
    3a9a:	bb 0f       	add	r27, r27
    3a9c:	40 f4       	brcc	.+16     	; 0x3aae <__fp_round+0x20>
    3a9e:	bf 2b       	or	r27, r31
    3aa0:	11 f4       	brne	.+4      	; 0x3aa6 <__fp_round+0x18>
    3aa2:	60 ff       	sbrs	r22, 0
    3aa4:	04 c0       	rjmp	.+8      	; 0x3aae <__fp_round+0x20>
    3aa6:	6f 5f       	subi	r22, 0xFF	; 255
    3aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    3aac:	9f 4f       	sbci	r25, 0xFF	; 255
    3aae:	08 95       	ret

00003ab0 <__fp_split3>:
    3ab0:	57 fd       	sbrc	r21, 7
    3ab2:	90 58       	subi	r25, 0x80	; 128
    3ab4:	44 0f       	add	r20, r20
    3ab6:	55 1f       	adc	r21, r21
    3ab8:	59 f0       	breq	.+22     	; 0x3ad0 <__fp_splitA+0x10>
    3aba:	5f 3f       	cpi	r21, 0xFF	; 255
    3abc:	71 f0       	breq	.+28     	; 0x3ada <__fp_splitA+0x1a>
    3abe:	47 95       	ror	r20

00003ac0 <__fp_splitA>:
    3ac0:	88 0f       	add	r24, r24
    3ac2:	97 fb       	bst	r25, 7
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	61 f0       	breq	.+24     	; 0x3ae0 <__fp_splitA+0x20>
    3ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aca:	79 f0       	breq	.+30     	; 0x3aea <__fp_splitA+0x2a>
    3acc:	87 95       	ror	r24
    3ace:	08 95       	ret
    3ad0:	12 16       	cp	r1, r18
    3ad2:	13 06       	cpc	r1, r19
    3ad4:	14 06       	cpc	r1, r20
    3ad6:	55 1f       	adc	r21, r21
    3ad8:	f2 cf       	rjmp	.-28     	; 0x3abe <__fp_split3+0xe>
    3ada:	46 95       	lsr	r20
    3adc:	f1 df       	rcall	.-30     	; 0x3ac0 <__fp_splitA>
    3ade:	08 c0       	rjmp	.+16     	; 0x3af0 <__fp_splitA+0x30>
    3ae0:	16 16       	cp	r1, r22
    3ae2:	17 06       	cpc	r1, r23
    3ae4:	18 06       	cpc	r1, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	f1 cf       	rjmp	.-30     	; 0x3acc <__fp_splitA+0xc>
    3aea:	86 95       	lsr	r24
    3aec:	71 05       	cpc	r23, r1
    3aee:	61 05       	cpc	r22, r1
    3af0:	08 94       	sec
    3af2:	08 95       	ret

00003af4 <__fp_zero>:
    3af4:	e8 94       	clt

00003af6 <__fp_szero>:
    3af6:	bb 27       	eor	r27, r27
    3af8:	66 27       	eor	r22, r22
    3afa:	77 27       	eor	r23, r23
    3afc:	cb 01       	movw	r24, r22
    3afe:	97 f9       	bld	r25, 7
    3b00:	08 95       	ret

00003b02 <__gesf2>:
    3b02:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <__fp_cmp>
    3b06:	08 f4       	brcc	.+2      	; 0x3b0a <__gesf2+0x8>
    3b08:	8f ef       	ldi	r24, 0xFF	; 255
    3b0a:	08 95       	ret

00003b0c <__mulsf3>:
    3b0c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__mulsf3x>
    3b10:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__fp_round>
    3b14:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__fp_pscA>
    3b18:	38 f0       	brcs	.+14     	; 0x3b28 <__mulsf3+0x1c>
    3b1a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__fp_pscB>
    3b1e:	20 f0       	brcs	.+8      	; 0x3b28 <__mulsf3+0x1c>
    3b20:	95 23       	and	r25, r21
    3b22:	11 f0       	breq	.+4      	; 0x3b28 <__mulsf3+0x1c>
    3b24:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_inf>
    3b28:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__fp_nan>
    3b2c:	11 24       	eor	r1, r1
    3b2e:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__fp_szero>

00003b32 <__mulsf3x>:
    3b32:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__fp_split3>
    3b36:	70 f3       	brcs	.-36     	; 0x3b14 <__mulsf3+0x8>

00003b38 <__mulsf3_pse>:
    3b38:	95 9f       	mul	r25, r21
    3b3a:	c1 f3       	breq	.-16     	; 0x3b2c <__mulsf3+0x20>
    3b3c:	95 0f       	add	r25, r21
    3b3e:	50 e0       	ldi	r21, 0x00	; 0
    3b40:	55 1f       	adc	r21, r21
    3b42:	62 9f       	mul	r22, r18
    3b44:	f0 01       	movw	r30, r0
    3b46:	72 9f       	mul	r23, r18
    3b48:	bb 27       	eor	r27, r27
    3b4a:	f0 0d       	add	r31, r0
    3b4c:	b1 1d       	adc	r27, r1
    3b4e:	63 9f       	mul	r22, r19
    3b50:	aa 27       	eor	r26, r26
    3b52:	f0 0d       	add	r31, r0
    3b54:	b1 1d       	adc	r27, r1
    3b56:	aa 1f       	adc	r26, r26
    3b58:	64 9f       	mul	r22, r20
    3b5a:	66 27       	eor	r22, r22
    3b5c:	b0 0d       	add	r27, r0
    3b5e:	a1 1d       	adc	r26, r1
    3b60:	66 1f       	adc	r22, r22
    3b62:	82 9f       	mul	r24, r18
    3b64:	22 27       	eor	r18, r18
    3b66:	b0 0d       	add	r27, r0
    3b68:	a1 1d       	adc	r26, r1
    3b6a:	62 1f       	adc	r22, r18
    3b6c:	73 9f       	mul	r23, r19
    3b6e:	b0 0d       	add	r27, r0
    3b70:	a1 1d       	adc	r26, r1
    3b72:	62 1f       	adc	r22, r18
    3b74:	83 9f       	mul	r24, r19
    3b76:	a0 0d       	add	r26, r0
    3b78:	61 1d       	adc	r22, r1
    3b7a:	22 1f       	adc	r18, r18
    3b7c:	74 9f       	mul	r23, r20
    3b7e:	33 27       	eor	r19, r19
    3b80:	a0 0d       	add	r26, r0
    3b82:	61 1d       	adc	r22, r1
    3b84:	23 1f       	adc	r18, r19
    3b86:	84 9f       	mul	r24, r20
    3b88:	60 0d       	add	r22, r0
    3b8a:	21 1d       	adc	r18, r1
    3b8c:	82 2f       	mov	r24, r18
    3b8e:	76 2f       	mov	r23, r22
    3b90:	6a 2f       	mov	r22, r26
    3b92:	11 24       	eor	r1, r1
    3b94:	9f 57       	subi	r25, 0x7F	; 127
    3b96:	50 40       	sbci	r21, 0x00	; 0
    3b98:	9a f0       	brmi	.+38     	; 0x3bc0 <__mulsf3_pse+0x88>
    3b9a:	f1 f0       	breq	.+60     	; 0x3bd8 <__mulsf3_pse+0xa0>
    3b9c:	88 23       	and	r24, r24
    3b9e:	4a f0       	brmi	.+18     	; 0x3bb2 <__mulsf3_pse+0x7a>
    3ba0:	ee 0f       	add	r30, r30
    3ba2:	ff 1f       	adc	r31, r31
    3ba4:	bb 1f       	adc	r27, r27
    3ba6:	66 1f       	adc	r22, r22
    3ba8:	77 1f       	adc	r23, r23
    3baa:	88 1f       	adc	r24, r24
    3bac:	91 50       	subi	r25, 0x01	; 1
    3bae:	50 40       	sbci	r21, 0x00	; 0
    3bb0:	a9 f7       	brne	.-22     	; 0x3b9c <__mulsf3_pse+0x64>
    3bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    3bb4:	51 05       	cpc	r21, r1
    3bb6:	80 f0       	brcs	.+32     	; 0x3bd8 <__mulsf3_pse+0xa0>
    3bb8:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_inf>
    3bbc:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__fp_szero>
    3bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    3bc2:	e4 f3       	brlt	.-8      	; 0x3bbc <__mulsf3_pse+0x84>
    3bc4:	98 3e       	cpi	r25, 0xE8	; 232
    3bc6:	d4 f3       	brlt	.-12     	; 0x3bbc <__mulsf3_pse+0x84>
    3bc8:	86 95       	lsr	r24
    3bca:	77 95       	ror	r23
    3bcc:	67 95       	ror	r22
    3bce:	b7 95       	ror	r27
    3bd0:	f7 95       	ror	r31
    3bd2:	e7 95       	ror	r30
    3bd4:	9f 5f       	subi	r25, 0xFF	; 255
    3bd6:	c1 f7       	brne	.-16     	; 0x3bc8 <__mulsf3_pse+0x90>
    3bd8:	fe 2b       	or	r31, r30
    3bda:	88 0f       	add	r24, r24
    3bdc:	91 1d       	adc	r25, r1
    3bde:	96 95       	lsr	r25
    3be0:	87 95       	ror	r24
    3be2:	97 f9       	bld	r25, 7
    3be4:	08 95       	ret

00003be6 <vfprintf>:
    3be6:	a0 e1       	ldi	r26, 0x10	; 16
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	e9 ef       	ldi	r30, 0xF9	; 249
    3bec:	fd e1       	ldi	r31, 0x1D	; 29
    3bee:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__prologue_saves__>
    3bf2:	7c 01       	movw	r14, r24
    3bf4:	1b 01       	movw	r2, r22
    3bf6:	6a 01       	movw	r12, r20
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	16 82       	std	Z+6, r1	; 0x06
    3bfc:	17 82       	std	Z+7, r1	; 0x07
    3bfe:	83 81       	ldd	r24, Z+3	; 0x03
    3c00:	81 ff       	sbrs	r24, 1
    3c02:	44 c3       	rjmp	.+1672   	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    3c04:	9e 01       	movw	r18, r28
    3c06:	2f 5f       	subi	r18, 0xFF	; 255
    3c08:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0a:	39 01       	movw	r6, r18
    3c0c:	f7 01       	movw	r30, r14
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	f1 01       	movw	r30, r2
    3c12:	93 fd       	sbrc	r25, 3
    3c14:	85 91       	lpm	r24, Z+
    3c16:	93 ff       	sbrs	r25, 3
    3c18:	81 91       	ld	r24, Z+
    3c1a:	1f 01       	movw	r2, r30
    3c1c:	88 23       	and	r24, r24
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <vfprintf+0x3c>
    3c20:	31 c3       	rjmp	.+1634   	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    3c22:	85 32       	cpi	r24, 0x25	; 37
    3c24:	39 f4       	brne	.+14     	; 0x3c34 <vfprintf+0x4e>
    3c26:	93 fd       	sbrc	r25, 3
    3c28:	85 91       	lpm	r24, Z+
    3c2a:	93 ff       	sbrs	r25, 3
    3c2c:	81 91       	ld	r24, Z+
    3c2e:	1f 01       	movw	r2, r30
    3c30:	85 32       	cpi	r24, 0x25	; 37
    3c32:	39 f4       	brne	.+14     	; 0x3c42 <vfprintf+0x5c>
    3c34:	b7 01       	movw	r22, r14
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3c3c:	56 01       	movw	r10, r12
    3c3e:	65 01       	movw	r12, r10
    3c40:	e5 cf       	rjmp	.-54     	; 0x3c0c <vfprintf+0x26>
    3c42:	10 e0       	ldi	r17, 0x00	; 0
    3c44:	51 2c       	mov	r5, r1
    3c46:	91 2c       	mov	r9, r1
    3c48:	ff e1       	ldi	r31, 0x1F	; 31
    3c4a:	f9 15       	cp	r31, r9
    3c4c:	d8 f0       	brcs	.+54     	; 0x3c84 <vfprintf+0x9e>
    3c4e:	8b 32       	cpi	r24, 0x2B	; 43
    3c50:	79 f0       	breq	.+30     	; 0x3c70 <vfprintf+0x8a>
    3c52:	38 f4       	brcc	.+14     	; 0x3c62 <vfprintf+0x7c>
    3c54:	80 32       	cpi	r24, 0x20	; 32
    3c56:	79 f0       	breq	.+30     	; 0x3c76 <vfprintf+0x90>
    3c58:	83 32       	cpi	r24, 0x23	; 35
    3c5a:	a1 f4       	brne	.+40     	; 0x3c84 <vfprintf+0x9e>
    3c5c:	f9 2d       	mov	r31, r9
    3c5e:	f0 61       	ori	r31, 0x10	; 16
    3c60:	2e c0       	rjmp	.+92     	; 0x3cbe <vfprintf+0xd8>
    3c62:	8d 32       	cpi	r24, 0x2D	; 45
    3c64:	61 f0       	breq	.+24     	; 0x3c7e <vfprintf+0x98>
    3c66:	80 33       	cpi	r24, 0x30	; 48
    3c68:	69 f4       	brne	.+26     	; 0x3c84 <vfprintf+0x9e>
    3c6a:	29 2d       	mov	r18, r9
    3c6c:	21 60       	ori	r18, 0x01	; 1
    3c6e:	2d c0       	rjmp	.+90     	; 0x3cca <vfprintf+0xe4>
    3c70:	39 2d       	mov	r19, r9
    3c72:	32 60       	ori	r19, 0x02	; 2
    3c74:	93 2e       	mov	r9, r19
    3c76:	89 2d       	mov	r24, r9
    3c78:	84 60       	ori	r24, 0x04	; 4
    3c7a:	98 2e       	mov	r9, r24
    3c7c:	2a c0       	rjmp	.+84     	; 0x3cd2 <vfprintf+0xec>
    3c7e:	e9 2d       	mov	r30, r9
    3c80:	e8 60       	ori	r30, 0x08	; 8
    3c82:	15 c0       	rjmp	.+42     	; 0x3cae <vfprintf+0xc8>
    3c84:	97 fc       	sbrc	r9, 7
    3c86:	2d c0       	rjmp	.+90     	; 0x3ce2 <vfprintf+0xfc>
    3c88:	20 ed       	ldi	r18, 0xD0	; 208
    3c8a:	28 0f       	add	r18, r24
    3c8c:	2a 30       	cpi	r18, 0x0A	; 10
    3c8e:	88 f4       	brcc	.+34     	; 0x3cb2 <vfprintf+0xcc>
    3c90:	96 fe       	sbrs	r9, 6
    3c92:	06 c0       	rjmp	.+12     	; 0x3ca0 <vfprintf+0xba>
    3c94:	3a e0       	ldi	r19, 0x0A	; 10
    3c96:	13 9f       	mul	r17, r19
    3c98:	20 0d       	add	r18, r0
    3c9a:	11 24       	eor	r1, r1
    3c9c:	12 2f       	mov	r17, r18
    3c9e:	19 c0       	rjmp	.+50     	; 0x3cd2 <vfprintf+0xec>
    3ca0:	8a e0       	ldi	r24, 0x0A	; 10
    3ca2:	58 9e       	mul	r5, r24
    3ca4:	20 0d       	add	r18, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	52 2e       	mov	r5, r18
    3caa:	e9 2d       	mov	r30, r9
    3cac:	e0 62       	ori	r30, 0x20	; 32
    3cae:	9e 2e       	mov	r9, r30
    3cb0:	10 c0       	rjmp	.+32     	; 0x3cd2 <vfprintf+0xec>
    3cb2:	8e 32       	cpi	r24, 0x2E	; 46
    3cb4:	31 f4       	brne	.+12     	; 0x3cc2 <vfprintf+0xdc>
    3cb6:	96 fc       	sbrc	r9, 6
    3cb8:	e5 c2       	rjmp	.+1482   	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    3cba:	f9 2d       	mov	r31, r9
    3cbc:	f0 64       	ori	r31, 0x40	; 64
    3cbe:	9f 2e       	mov	r9, r31
    3cc0:	08 c0       	rjmp	.+16     	; 0x3cd2 <vfprintf+0xec>
    3cc2:	8c 36       	cpi	r24, 0x6C	; 108
    3cc4:	21 f4       	brne	.+8      	; 0x3cce <vfprintf+0xe8>
    3cc6:	29 2d       	mov	r18, r9
    3cc8:	20 68       	ori	r18, 0x80	; 128
    3cca:	92 2e       	mov	r9, r18
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <vfprintf+0xec>
    3cce:	88 36       	cpi	r24, 0x68	; 104
    3cd0:	41 f4       	brne	.+16     	; 0x3ce2 <vfprintf+0xfc>
    3cd2:	f1 01       	movw	r30, r2
    3cd4:	93 fd       	sbrc	r25, 3
    3cd6:	85 91       	lpm	r24, Z+
    3cd8:	93 ff       	sbrs	r25, 3
    3cda:	81 91       	ld	r24, Z+
    3cdc:	1f 01       	movw	r2, r30
    3cde:	81 11       	cpse	r24, r1
    3ce0:	b3 cf       	rjmp	.-154    	; 0x3c48 <vfprintf+0x62>
    3ce2:	9b eb       	ldi	r25, 0xBB	; 187
    3ce4:	98 0f       	add	r25, r24
    3ce6:	93 30       	cpi	r25, 0x03	; 3
    3ce8:	20 f4       	brcc	.+8      	; 0x3cf2 <vfprintf+0x10c>
    3cea:	99 2d       	mov	r25, r9
    3cec:	90 61       	ori	r25, 0x10	; 16
    3cee:	80 5e       	subi	r24, 0xE0	; 224
    3cf0:	07 c0       	rjmp	.+14     	; 0x3d00 <vfprintf+0x11a>
    3cf2:	9b e9       	ldi	r25, 0x9B	; 155
    3cf4:	98 0f       	add	r25, r24
    3cf6:	93 30       	cpi	r25, 0x03	; 3
    3cf8:	08 f0       	brcs	.+2      	; 0x3cfc <vfprintf+0x116>
    3cfa:	66 c1       	rjmp	.+716    	; 0x3fc8 <vfprintf+0x3e2>
    3cfc:	99 2d       	mov	r25, r9
    3cfe:	9f 7e       	andi	r25, 0xEF	; 239
    3d00:	96 ff       	sbrs	r25, 6
    3d02:	16 e0       	ldi	r17, 0x06	; 6
    3d04:	9f 73       	andi	r25, 0x3F	; 63
    3d06:	99 2e       	mov	r9, r25
    3d08:	85 36       	cpi	r24, 0x65	; 101
    3d0a:	19 f4       	brne	.+6      	; 0x3d12 <vfprintf+0x12c>
    3d0c:	90 64       	ori	r25, 0x40	; 64
    3d0e:	99 2e       	mov	r9, r25
    3d10:	08 c0       	rjmp	.+16     	; 0x3d22 <vfprintf+0x13c>
    3d12:	86 36       	cpi	r24, 0x66	; 102
    3d14:	21 f4       	brne	.+8      	; 0x3d1e <vfprintf+0x138>
    3d16:	39 2f       	mov	r19, r25
    3d18:	30 68       	ori	r19, 0x80	; 128
    3d1a:	93 2e       	mov	r9, r19
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <vfprintf+0x13c>
    3d1e:	11 11       	cpse	r17, r1
    3d20:	11 50       	subi	r17, 0x01	; 1
    3d22:	97 fe       	sbrs	r9, 7
    3d24:	07 c0       	rjmp	.+14     	; 0x3d34 <vfprintf+0x14e>
    3d26:	1c 33       	cpi	r17, 0x3C	; 60
    3d28:	50 f4       	brcc	.+20     	; 0x3d3e <vfprintf+0x158>
    3d2a:	44 24       	eor	r4, r4
    3d2c:	43 94       	inc	r4
    3d2e:	41 0e       	add	r4, r17
    3d30:	27 e0       	ldi	r18, 0x07	; 7
    3d32:	0b c0       	rjmp	.+22     	; 0x3d4a <vfprintf+0x164>
    3d34:	18 30       	cpi	r17, 0x08	; 8
    3d36:	38 f0       	brcs	.+14     	; 0x3d46 <vfprintf+0x160>
    3d38:	27 e0       	ldi	r18, 0x07	; 7
    3d3a:	17 e0       	ldi	r17, 0x07	; 7
    3d3c:	05 c0       	rjmp	.+10     	; 0x3d48 <vfprintf+0x162>
    3d3e:	27 e0       	ldi	r18, 0x07	; 7
    3d40:	9c e3       	ldi	r25, 0x3C	; 60
    3d42:	49 2e       	mov	r4, r25
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <vfprintf+0x164>
    3d46:	21 2f       	mov	r18, r17
    3d48:	41 2c       	mov	r4, r1
    3d4a:	56 01       	movw	r10, r12
    3d4c:	84 e0       	ldi	r24, 0x04	; 4
    3d4e:	a8 0e       	add	r10, r24
    3d50:	b1 1c       	adc	r11, r1
    3d52:	f6 01       	movw	r30, r12
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	93 81       	ldd	r25, Z+3	; 0x03
    3d5c:	04 2d       	mov	r16, r4
    3d5e:	a3 01       	movw	r20, r6
    3d60:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__ftoa_engine>
    3d64:	6c 01       	movw	r12, r24
    3d66:	f9 81       	ldd	r31, Y+1	; 0x01
    3d68:	fc 87       	std	Y+12, r31	; 0x0c
    3d6a:	f0 ff       	sbrs	r31, 0
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <vfprintf+0x18c>
    3d6e:	f3 ff       	sbrs	r31, 3
    3d70:	06 c0       	rjmp	.+12     	; 0x3d7e <vfprintf+0x198>
    3d72:	91 fc       	sbrc	r9, 1
    3d74:	06 c0       	rjmp	.+12     	; 0x3d82 <vfprintf+0x19c>
    3d76:	92 fe       	sbrs	r9, 2
    3d78:	06 c0       	rjmp	.+12     	; 0x3d86 <vfprintf+0x1a0>
    3d7a:	00 e2       	ldi	r16, 0x20	; 32
    3d7c:	05 c0       	rjmp	.+10     	; 0x3d88 <vfprintf+0x1a2>
    3d7e:	0d e2       	ldi	r16, 0x2D	; 45
    3d80:	03 c0       	rjmp	.+6      	; 0x3d88 <vfprintf+0x1a2>
    3d82:	0b e2       	ldi	r16, 0x2B	; 43
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <vfprintf+0x1a2>
    3d86:	00 e0       	ldi	r16, 0x00	; 0
    3d88:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d8a:	8c 70       	andi	r24, 0x0C	; 12
    3d8c:	19 f0       	breq	.+6      	; 0x3d94 <vfprintf+0x1ae>
    3d8e:	01 11       	cpse	r16, r1
    3d90:	5a c2       	rjmp	.+1204   	; 0x4246 <__RODATA_PM_OFFSET__+0x246>
    3d92:	9b c2       	rjmp	.+1334   	; 0x42ca <__RODATA_PM_OFFSET__+0x2ca>
    3d94:	97 fe       	sbrs	r9, 7
    3d96:	10 c0       	rjmp	.+32     	; 0x3db8 <vfprintf+0x1d2>
    3d98:	4c 0c       	add	r4, r12
    3d9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d9c:	f4 ff       	sbrs	r31, 4
    3d9e:	04 c0       	rjmp	.+8      	; 0x3da8 <vfprintf+0x1c2>
    3da0:	8a 81       	ldd	r24, Y+2	; 0x02
    3da2:	81 33       	cpi	r24, 0x31	; 49
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <vfprintf+0x1c2>
    3da6:	4a 94       	dec	r4
    3da8:	14 14       	cp	r1, r4
    3daa:	74 f5       	brge	.+92     	; 0x3e08 <vfprintf+0x222>
    3dac:	28 e0       	ldi	r18, 0x08	; 8
    3dae:	24 15       	cp	r18, r4
    3db0:	78 f5       	brcc	.+94     	; 0x3e10 <vfprintf+0x22a>
    3db2:	88 e0       	ldi	r24, 0x08	; 8
    3db4:	48 2e       	mov	r4, r24
    3db6:	2c c0       	rjmp	.+88     	; 0x3e10 <vfprintf+0x22a>
    3db8:	96 fc       	sbrc	r9, 6
    3dba:	2a c0       	rjmp	.+84     	; 0x3e10 <vfprintf+0x22a>
    3dbc:	81 2f       	mov	r24, r17
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	8c 15       	cp	r24, r12
    3dc2:	9d 05       	cpc	r25, r13
    3dc4:	9c f0       	brlt	.+38     	; 0x3dec <vfprintf+0x206>
    3dc6:	3c ef       	ldi	r19, 0xFC	; 252
    3dc8:	c3 16       	cp	r12, r19
    3dca:	3f ef       	ldi	r19, 0xFF	; 255
    3dcc:	d3 06       	cpc	r13, r19
    3dce:	74 f0       	brlt	.+28     	; 0x3dec <vfprintf+0x206>
    3dd0:	89 2d       	mov	r24, r9
    3dd2:	80 68       	ori	r24, 0x80	; 128
    3dd4:	98 2e       	mov	r9, r24
    3dd6:	0a c0       	rjmp	.+20     	; 0x3dec <vfprintf+0x206>
    3dd8:	e2 e0       	ldi	r30, 0x02	; 2
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	ec 0f       	add	r30, r28
    3dde:	fd 1f       	adc	r31, r29
    3de0:	e1 0f       	add	r30, r17
    3de2:	f1 1d       	adc	r31, r1
    3de4:	80 81       	ld	r24, Z
    3de6:	80 33       	cpi	r24, 0x30	; 48
    3de8:	19 f4       	brne	.+6      	; 0x3df0 <vfprintf+0x20a>
    3dea:	11 50       	subi	r17, 0x01	; 1
    3dec:	11 11       	cpse	r17, r1
    3dee:	f4 cf       	rjmp	.-24     	; 0x3dd8 <vfprintf+0x1f2>
    3df0:	97 fe       	sbrs	r9, 7
    3df2:	0e c0       	rjmp	.+28     	; 0x3e10 <vfprintf+0x22a>
    3df4:	44 24       	eor	r4, r4
    3df6:	43 94       	inc	r4
    3df8:	41 0e       	add	r4, r17
    3dfa:	81 2f       	mov	r24, r17
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	c8 16       	cp	r12, r24
    3e00:	d9 06       	cpc	r13, r25
    3e02:	2c f4       	brge	.+10     	; 0x3e0e <vfprintf+0x228>
    3e04:	1c 19       	sub	r17, r12
    3e06:	04 c0       	rjmp	.+8      	; 0x3e10 <vfprintf+0x22a>
    3e08:	44 24       	eor	r4, r4
    3e0a:	43 94       	inc	r4
    3e0c:	01 c0       	rjmp	.+2      	; 0x3e10 <vfprintf+0x22a>
    3e0e:	10 e0       	ldi	r17, 0x00	; 0
    3e10:	97 fe       	sbrs	r9, 7
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <vfprintf+0x23a>
    3e14:	1c 14       	cp	r1, r12
    3e16:	1d 04       	cpc	r1, r13
    3e18:	34 f4       	brge	.+12     	; 0x3e26 <vfprintf+0x240>
    3e1a:	c6 01       	movw	r24, r12
    3e1c:	01 96       	adiw	r24, 0x01	; 1
    3e1e:	05 c0       	rjmp	.+10     	; 0x3e2a <vfprintf+0x244>
    3e20:	85 e0       	ldi	r24, 0x05	; 5
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <vfprintf+0x244>
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	01 11       	cpse	r16, r1
    3e2c:	01 96       	adiw	r24, 0x01	; 1
    3e2e:	11 23       	and	r17, r17
    3e30:	31 f0       	breq	.+12     	; 0x3e3e <vfprintf+0x258>
    3e32:	21 2f       	mov	r18, r17
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	2f 5f       	subi	r18, 0xFF	; 255
    3e38:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3a:	82 0f       	add	r24, r18
    3e3c:	93 1f       	adc	r25, r19
    3e3e:	25 2d       	mov	r18, r5
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	82 17       	cp	r24, r18
    3e44:	93 07       	cpc	r25, r19
    3e46:	14 f4       	brge	.+4      	; 0x3e4c <vfprintf+0x266>
    3e48:	58 1a       	sub	r5, r24
    3e4a:	01 c0       	rjmp	.+2      	; 0x3e4e <vfprintf+0x268>
    3e4c:	51 2c       	mov	r5, r1
    3e4e:	89 2d       	mov	r24, r9
    3e50:	89 70       	andi	r24, 0x09	; 9
    3e52:	49 f4       	brne	.+18     	; 0x3e66 <vfprintf+0x280>
    3e54:	55 20       	and	r5, r5
    3e56:	39 f0       	breq	.+14     	; 0x3e66 <vfprintf+0x280>
    3e58:	b7 01       	movw	r22, r14
    3e5a:	80 e2       	ldi	r24, 0x20	; 32
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3e62:	5a 94       	dec	r5
    3e64:	f7 cf       	rjmp	.-18     	; 0x3e54 <vfprintf+0x26e>
    3e66:	00 23       	and	r16, r16
    3e68:	29 f0       	breq	.+10     	; 0x3e74 <vfprintf+0x28e>
    3e6a:	b7 01       	movw	r22, r14
    3e6c:	80 2f       	mov	r24, r16
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3e74:	93 fc       	sbrc	r9, 3
    3e76:	09 c0       	rjmp	.+18     	; 0x3e8a <vfprintf+0x2a4>
    3e78:	55 20       	and	r5, r5
    3e7a:	39 f0       	breq	.+14     	; 0x3e8a <vfprintf+0x2a4>
    3e7c:	b7 01       	movw	r22, r14
    3e7e:	80 e3       	ldi	r24, 0x30	; 48
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3e86:	5a 94       	dec	r5
    3e88:	f7 cf       	rjmp	.-18     	; 0x3e78 <vfprintf+0x292>
    3e8a:	97 fe       	sbrs	r9, 7
    3e8c:	4c c0       	rjmp	.+152    	; 0x3f26 <vfprintf+0x340>
    3e8e:	46 01       	movw	r8, r12
    3e90:	d7 fe       	sbrs	r13, 7
    3e92:	02 c0       	rjmp	.+4      	; 0x3e98 <vfprintf+0x2b2>
    3e94:	81 2c       	mov	r8, r1
    3e96:	91 2c       	mov	r9, r1
    3e98:	c6 01       	movw	r24, r12
    3e9a:	88 19       	sub	r24, r8
    3e9c:	99 09       	sbc	r25, r9
    3e9e:	f3 01       	movw	r30, r6
    3ea0:	e8 0f       	add	r30, r24
    3ea2:	f9 1f       	adc	r31, r25
    3ea4:	ed 87       	std	Y+13, r30	; 0x0d
    3ea6:	fe 87       	std	Y+14, r31	; 0x0e
    3ea8:	96 01       	movw	r18, r12
    3eaa:	24 19       	sub	r18, r4
    3eac:	31 09       	sbc	r19, r1
    3eae:	2f 87       	std	Y+15, r18	; 0x0f
    3eb0:	38 8b       	std	Y+16, r19	; 0x10
    3eb2:	01 2f       	mov	r16, r17
    3eb4:	10 e0       	ldi	r17, 0x00	; 0
    3eb6:	11 95       	neg	r17
    3eb8:	01 95       	neg	r16
    3eba:	11 09       	sbc	r17, r1
    3ebc:	3f ef       	ldi	r19, 0xFF	; 255
    3ebe:	83 16       	cp	r8, r19
    3ec0:	93 06       	cpc	r9, r19
    3ec2:	29 f4       	brne	.+10     	; 0x3ece <vfprintf+0x2e8>
    3ec4:	b7 01       	movw	r22, r14
    3ec6:	8e e2       	ldi	r24, 0x2E	; 46
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3ece:	c8 14       	cp	r12, r8
    3ed0:	d9 04       	cpc	r13, r9
    3ed2:	4c f0       	brlt	.+18     	; 0x3ee6 <vfprintf+0x300>
    3ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed6:	98 89       	ldd	r25, Y+16	; 0x10
    3ed8:	88 15       	cp	r24, r8
    3eda:	99 05       	cpc	r25, r9
    3edc:	24 f4       	brge	.+8      	; 0x3ee6 <vfprintf+0x300>
    3ede:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ee0:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ee2:	81 81       	ldd	r24, Z+1	; 0x01
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <vfprintf+0x302>
    3ee6:	80 e3       	ldi	r24, 0x30	; 48
    3ee8:	f1 e0       	ldi	r31, 0x01	; 1
    3eea:	8f 1a       	sub	r8, r31
    3eec:	91 08       	sbc	r9, r1
    3eee:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ef0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ef2:	2f 5f       	subi	r18, 0xFF	; 255
    3ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef6:	2d 87       	std	Y+13, r18	; 0x0d
    3ef8:	3e 87       	std	Y+14, r19	; 0x0e
    3efa:	80 16       	cp	r8, r16
    3efc:	91 06       	cpc	r9, r17
    3efe:	2c f0       	brlt	.+10     	; 0x3f0a <vfprintf+0x324>
    3f00:	b7 01       	movw	r22, r14
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f08:	d9 cf       	rjmp	.-78     	; 0x3ebc <vfprintf+0x2d6>
    3f0a:	c8 14       	cp	r12, r8
    3f0c:	d9 04       	cpc	r13, r9
    3f0e:	41 f4       	brne	.+16     	; 0x3f20 <vfprintf+0x33a>
    3f10:	9a 81       	ldd	r25, Y+2	; 0x02
    3f12:	96 33       	cpi	r25, 0x36	; 54
    3f14:	20 f4       	brcc	.+8      	; 0x3f1e <vfprintf+0x338>
    3f16:	95 33       	cpi	r25, 0x35	; 53
    3f18:	19 f4       	brne	.+6      	; 0x3f20 <vfprintf+0x33a>
    3f1a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f1c:	34 ff       	sbrs	r19, 4
    3f1e:	81 e3       	ldi	r24, 0x31	; 49
    3f20:	b7 01       	movw	r22, r14
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	4e c0       	rjmp	.+156    	; 0x3fc2 <vfprintf+0x3dc>
    3f26:	8a 81       	ldd	r24, Y+2	; 0x02
    3f28:	81 33       	cpi	r24, 0x31	; 49
    3f2a:	19 f0       	breq	.+6      	; 0x3f32 <vfprintf+0x34c>
    3f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f2e:	9f 7e       	andi	r25, 0xEF	; 239
    3f30:	9c 87       	std	Y+12, r25	; 0x0c
    3f32:	b7 01       	movw	r22, r14
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f3a:	11 11       	cpse	r17, r1
    3f3c:	05 c0       	rjmp	.+10     	; 0x3f48 <vfprintf+0x362>
    3f3e:	94 fc       	sbrc	r9, 4
    3f40:	18 c0       	rjmp	.+48     	; 0x3f72 <vfprintf+0x38c>
    3f42:	85 e6       	ldi	r24, 0x65	; 101
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	17 c0       	rjmp	.+46     	; 0x3f76 <vfprintf+0x390>
    3f48:	b7 01       	movw	r22, r14
    3f4a:	8e e2       	ldi	r24, 0x2E	; 46
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f52:	1e 5f       	subi	r17, 0xFE	; 254
    3f54:	82 e0       	ldi	r24, 0x02	; 2
    3f56:	01 e0       	ldi	r16, 0x01	; 1
    3f58:	08 0f       	add	r16, r24
    3f5a:	f3 01       	movw	r30, r6
    3f5c:	e8 0f       	add	r30, r24
    3f5e:	f1 1d       	adc	r31, r1
    3f60:	80 81       	ld	r24, Z
    3f62:	b7 01       	movw	r22, r14
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f6a:	80 2f       	mov	r24, r16
    3f6c:	01 13       	cpse	r16, r17
    3f6e:	f3 cf       	rjmp	.-26     	; 0x3f56 <vfprintf+0x370>
    3f70:	e6 cf       	rjmp	.-52     	; 0x3f3e <vfprintf+0x358>
    3f72:	85 e4       	ldi	r24, 0x45	; 69
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	b7 01       	movw	r22, r14
    3f78:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f7c:	d7 fc       	sbrc	r13, 7
    3f7e:	06 c0       	rjmp	.+12     	; 0x3f8c <vfprintf+0x3a6>
    3f80:	c1 14       	cp	r12, r1
    3f82:	d1 04       	cpc	r13, r1
    3f84:	41 f4       	brne	.+16     	; 0x3f96 <vfprintf+0x3b0>
    3f86:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f88:	e4 ff       	sbrs	r30, 4
    3f8a:	05 c0       	rjmp	.+10     	; 0x3f96 <vfprintf+0x3b0>
    3f8c:	d1 94       	neg	r13
    3f8e:	c1 94       	neg	r12
    3f90:	d1 08       	sbc	r13, r1
    3f92:	8d e2       	ldi	r24, 0x2D	; 45
    3f94:	01 c0       	rjmp	.+2      	; 0x3f98 <vfprintf+0x3b2>
    3f96:	8b e2       	ldi	r24, 0x2B	; 43
    3f98:	b7 01       	movw	r22, r14
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3fa0:	80 e3       	ldi	r24, 0x30	; 48
    3fa2:	2a e0       	ldi	r18, 0x0A	; 10
    3fa4:	c2 16       	cp	r12, r18
    3fa6:	d1 04       	cpc	r13, r1
    3fa8:	2c f0       	brlt	.+10     	; 0x3fb4 <vfprintf+0x3ce>
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	fa e0       	ldi	r31, 0x0A	; 10
    3fae:	cf 1a       	sub	r12, r31
    3fb0:	d1 08       	sbc	r13, r1
    3fb2:	f7 cf       	rjmp	.-18     	; 0x3fa2 <vfprintf+0x3bc>
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3fbc:	b7 01       	movw	r22, r14
    3fbe:	c6 01       	movw	r24, r12
    3fc0:	c0 96       	adiw	r24, 0x30	; 48
    3fc2:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3fc6:	54 c1       	rjmp	.+680    	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    3fc8:	83 36       	cpi	r24, 0x63	; 99
    3fca:	31 f0       	breq	.+12     	; 0x3fd8 <vfprintf+0x3f2>
    3fcc:	83 37       	cpi	r24, 0x73	; 115
    3fce:	79 f0       	breq	.+30     	; 0x3fee <vfprintf+0x408>
    3fd0:	83 35       	cpi	r24, 0x53	; 83
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <vfprintf+0x3f0>
    3fd4:	56 c0       	rjmp	.+172    	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    3fd6:	20 c0       	rjmp	.+64     	; 0x4018 <__RODATA_PM_OFFSET__+0x18>
    3fd8:	56 01       	movw	r10, r12
    3fda:	32 e0       	ldi	r19, 0x02	; 2
    3fdc:	a3 0e       	add	r10, r19
    3fde:	b1 1c       	adc	r11, r1
    3fe0:	f6 01       	movw	r30, r12
    3fe2:	80 81       	ld	r24, Z
    3fe4:	89 83       	std	Y+1, r24	; 0x01
    3fe6:	01 e0       	ldi	r16, 0x01	; 1
    3fe8:	10 e0       	ldi	r17, 0x00	; 0
    3fea:	63 01       	movw	r12, r6
    3fec:	12 c0       	rjmp	.+36     	; 0x4012 <__RODATA_PM_OFFSET__+0x12>
    3fee:	56 01       	movw	r10, r12
    3ff0:	f2 e0       	ldi	r31, 0x02	; 2
    3ff2:	af 0e       	add	r10, r31
    3ff4:	b1 1c       	adc	r11, r1
    3ff6:	f6 01       	movw	r30, r12
    3ff8:	c0 80       	ld	r12, Z
    3ffa:	d1 80       	ldd	r13, Z+1	; 0x01
    3ffc:	96 fe       	sbrs	r9, 6
    3ffe:	03 c0       	rjmp	.+6      	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    4000:	61 2f       	mov	r22, r17
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	02 c0       	rjmp	.+4      	; 0x400a <__RODATA_PM_OFFSET__+0xa>
    4006:	6f ef       	ldi	r22, 0xFF	; 255
    4008:	7f ef       	ldi	r23, 0xFF	; 255
    400a:	c6 01       	movw	r24, r12
    400c:	0e 94 46 23 	call	0x468c	; 0x468c <strnlen>
    4010:	8c 01       	movw	r16, r24
    4012:	f9 2d       	mov	r31, r9
    4014:	ff 77       	andi	r31, 0x7F	; 127
    4016:	14 c0       	rjmp	.+40     	; 0x4040 <__RODATA_PM_OFFSET__+0x40>
    4018:	56 01       	movw	r10, r12
    401a:	22 e0       	ldi	r18, 0x02	; 2
    401c:	a2 0e       	add	r10, r18
    401e:	b1 1c       	adc	r11, r1
    4020:	f6 01       	movw	r30, r12
    4022:	c0 80       	ld	r12, Z
    4024:	d1 80       	ldd	r13, Z+1	; 0x01
    4026:	96 fe       	sbrs	r9, 6
    4028:	03 c0       	rjmp	.+6      	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    402a:	61 2f       	mov	r22, r17
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    4030:	6f ef       	ldi	r22, 0xFF	; 255
    4032:	7f ef       	ldi	r23, 0xFF	; 255
    4034:	c6 01       	movw	r24, r12
    4036:	0e 94 29 23 	call	0x4652	; 0x4652 <strnlen_P>
    403a:	8c 01       	movw	r16, r24
    403c:	f9 2d       	mov	r31, r9
    403e:	f0 68       	ori	r31, 0x80	; 128
    4040:	9f 2e       	mov	r9, r31
    4042:	f3 fd       	sbrc	r31, 3
    4044:	1a c0       	rjmp	.+52     	; 0x407a <__RODATA_PM_OFFSET__+0x7a>
    4046:	85 2d       	mov	r24, r5
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	08 17       	cp	r16, r24
    404c:	19 07       	cpc	r17, r25
    404e:	a8 f4       	brcc	.+42     	; 0x407a <__RODATA_PM_OFFSET__+0x7a>
    4050:	b7 01       	movw	r22, r14
    4052:	80 e2       	ldi	r24, 0x20	; 32
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    405a:	5a 94       	dec	r5
    405c:	f4 cf       	rjmp	.-24     	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    405e:	f6 01       	movw	r30, r12
    4060:	97 fc       	sbrc	r9, 7
    4062:	85 91       	lpm	r24, Z+
    4064:	97 fe       	sbrs	r9, 7
    4066:	81 91       	ld	r24, Z+
    4068:	6f 01       	movw	r12, r30
    406a:	b7 01       	movw	r22, r14
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4072:	51 10       	cpse	r5, r1
    4074:	5a 94       	dec	r5
    4076:	01 50       	subi	r16, 0x01	; 1
    4078:	11 09       	sbc	r17, r1
    407a:	01 15       	cp	r16, r1
    407c:	11 05       	cpc	r17, r1
    407e:	79 f7       	brne	.-34     	; 0x405e <__RODATA_PM_OFFSET__+0x5e>
    4080:	f7 c0       	rjmp	.+494    	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    4082:	84 36       	cpi	r24, 0x64	; 100
    4084:	11 f0       	breq	.+4      	; 0x408a <__RODATA_PM_OFFSET__+0x8a>
    4086:	89 36       	cpi	r24, 0x69	; 105
    4088:	61 f5       	brne	.+88     	; 0x40e2 <__RODATA_PM_OFFSET__+0xe2>
    408a:	56 01       	movw	r10, r12
    408c:	97 fe       	sbrs	r9, 7
    408e:	09 c0       	rjmp	.+18     	; 0x40a2 <__RODATA_PM_OFFSET__+0xa2>
    4090:	24 e0       	ldi	r18, 0x04	; 4
    4092:	a2 0e       	add	r10, r18
    4094:	b1 1c       	adc	r11, r1
    4096:	f6 01       	movw	r30, r12
    4098:	60 81       	ld	r22, Z
    409a:	71 81       	ldd	r23, Z+1	; 0x01
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	0a c0       	rjmp	.+20     	; 0x40b6 <__RODATA_PM_OFFSET__+0xb6>
    40a2:	f2 e0       	ldi	r31, 0x02	; 2
    40a4:	af 0e       	add	r10, r31
    40a6:	b1 1c       	adc	r11, r1
    40a8:	f6 01       	movw	r30, r12
    40aa:	60 81       	ld	r22, Z
    40ac:	71 81       	ldd	r23, Z+1	; 0x01
    40ae:	07 2e       	mov	r0, r23
    40b0:	00 0c       	add	r0, r0
    40b2:	88 0b       	sbc	r24, r24
    40b4:	99 0b       	sbc	r25, r25
    40b6:	f9 2d       	mov	r31, r9
    40b8:	ff 76       	andi	r31, 0x6F	; 111
    40ba:	9f 2e       	mov	r9, r31
    40bc:	97 ff       	sbrs	r25, 7
    40be:	09 c0       	rjmp	.+18     	; 0x40d2 <__RODATA_PM_OFFSET__+0xd2>
    40c0:	90 95       	com	r25
    40c2:	80 95       	com	r24
    40c4:	70 95       	com	r23
    40c6:	61 95       	neg	r22
    40c8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ca:	8f 4f       	sbci	r24, 0xFF	; 255
    40cc:	9f 4f       	sbci	r25, 0xFF	; 255
    40ce:	f0 68       	ori	r31, 0x80	; 128
    40d0:	9f 2e       	mov	r9, r31
    40d2:	2a e0       	ldi	r18, 0x0A	; 10
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	a3 01       	movw	r20, r6
    40d8:	0e 94 c4 23 	call	0x4788	; 0x4788 <__ultoa_invert>
    40dc:	c8 2e       	mov	r12, r24
    40de:	c6 18       	sub	r12, r6
    40e0:	3f c0       	rjmp	.+126    	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    40e2:	09 2d       	mov	r16, r9
    40e4:	85 37       	cpi	r24, 0x75	; 117
    40e6:	21 f4       	brne	.+8      	; 0x40f0 <__RODATA_PM_OFFSET__+0xf0>
    40e8:	0f 7e       	andi	r16, 0xEF	; 239
    40ea:	2a e0       	ldi	r18, 0x0A	; 10
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	1d c0       	rjmp	.+58     	; 0x412a <__RODATA_PM_OFFSET__+0x12a>
    40f0:	09 7f       	andi	r16, 0xF9	; 249
    40f2:	8f 36       	cpi	r24, 0x6F	; 111
    40f4:	91 f0       	breq	.+36     	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    40f6:	18 f4       	brcc	.+6      	; 0x40fe <__RODATA_PM_OFFSET__+0xfe>
    40f8:	88 35       	cpi	r24, 0x58	; 88
    40fa:	59 f0       	breq	.+22     	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
    40fc:	c3 c0       	rjmp	.+390    	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    40fe:	80 37       	cpi	r24, 0x70	; 112
    4100:	19 f0       	breq	.+6      	; 0x4108 <__RODATA_PM_OFFSET__+0x108>
    4102:	88 37       	cpi	r24, 0x78	; 120
    4104:	11 f0       	breq	.+4      	; 0x410a <__RODATA_PM_OFFSET__+0x10a>
    4106:	be c0       	rjmp	.+380    	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    4108:	00 61       	ori	r16, 0x10	; 16
    410a:	04 ff       	sbrs	r16, 4
    410c:	09 c0       	rjmp	.+18     	; 0x4120 <__RODATA_PM_OFFSET__+0x120>
    410e:	04 60       	ori	r16, 0x04	; 4
    4110:	07 c0       	rjmp	.+14     	; 0x4120 <__RODATA_PM_OFFSET__+0x120>
    4112:	94 fe       	sbrs	r9, 4
    4114:	08 c0       	rjmp	.+16     	; 0x4126 <__RODATA_PM_OFFSET__+0x126>
    4116:	06 60       	ori	r16, 0x06	; 6
    4118:	06 c0       	rjmp	.+12     	; 0x4126 <__RODATA_PM_OFFSET__+0x126>
    411a:	28 e0       	ldi	r18, 0x08	; 8
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	05 c0       	rjmp	.+10     	; 0x412a <__RODATA_PM_OFFSET__+0x12a>
    4120:	20 e1       	ldi	r18, 0x10	; 16
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	02 c0       	rjmp	.+4      	; 0x412a <__RODATA_PM_OFFSET__+0x12a>
    4126:	20 e1       	ldi	r18, 0x10	; 16
    4128:	32 e0       	ldi	r19, 0x02	; 2
    412a:	56 01       	movw	r10, r12
    412c:	07 ff       	sbrs	r16, 7
    412e:	09 c0       	rjmp	.+18     	; 0x4142 <__RODATA_PM_OFFSET__+0x142>
    4130:	84 e0       	ldi	r24, 0x04	; 4
    4132:	a8 0e       	add	r10, r24
    4134:	b1 1c       	adc	r11, r1
    4136:	f6 01       	movw	r30, r12
    4138:	60 81       	ld	r22, Z
    413a:	71 81       	ldd	r23, Z+1	; 0x01
    413c:	82 81       	ldd	r24, Z+2	; 0x02
    413e:	93 81       	ldd	r25, Z+3	; 0x03
    4140:	08 c0       	rjmp	.+16     	; 0x4152 <__RODATA_PM_OFFSET__+0x152>
    4142:	f2 e0       	ldi	r31, 0x02	; 2
    4144:	af 0e       	add	r10, r31
    4146:	b1 1c       	adc	r11, r1
    4148:	f6 01       	movw	r30, r12
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a3 01       	movw	r20, r6
    4154:	0e 94 c4 23 	call	0x4788	; 0x4788 <__ultoa_invert>
    4158:	c8 2e       	mov	r12, r24
    415a:	c6 18       	sub	r12, r6
    415c:	0f 77       	andi	r16, 0x7F	; 127
    415e:	90 2e       	mov	r9, r16
    4160:	96 fe       	sbrs	r9, 6
    4162:	0b c0       	rjmp	.+22     	; 0x417a <__RODATA_PM_OFFSET__+0x17a>
    4164:	09 2d       	mov	r16, r9
    4166:	0e 7f       	andi	r16, 0xFE	; 254
    4168:	c1 16       	cp	r12, r17
    416a:	50 f4       	brcc	.+20     	; 0x4180 <__RODATA_PM_OFFSET__+0x180>
    416c:	94 fe       	sbrs	r9, 4
    416e:	0a c0       	rjmp	.+20     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4170:	92 fc       	sbrc	r9, 2
    4172:	08 c0       	rjmp	.+16     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4174:	09 2d       	mov	r16, r9
    4176:	0e 7e       	andi	r16, 0xEE	; 238
    4178:	05 c0       	rjmp	.+10     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    417a:	dc 2c       	mov	r13, r12
    417c:	09 2d       	mov	r16, r9
    417e:	03 c0       	rjmp	.+6      	; 0x4186 <__RODATA_PM_OFFSET__+0x186>
    4180:	dc 2c       	mov	r13, r12
    4182:	01 c0       	rjmp	.+2      	; 0x4186 <__RODATA_PM_OFFSET__+0x186>
    4184:	d1 2e       	mov	r13, r17
    4186:	04 ff       	sbrs	r16, 4
    4188:	0d c0       	rjmp	.+26     	; 0x41a4 <__RODATA_PM_OFFSET__+0x1a4>
    418a:	fe 01       	movw	r30, r28
    418c:	ec 0d       	add	r30, r12
    418e:	f1 1d       	adc	r31, r1
    4190:	80 81       	ld	r24, Z
    4192:	80 33       	cpi	r24, 0x30	; 48
    4194:	11 f4       	brne	.+4      	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    4196:	09 7e       	andi	r16, 0xE9	; 233
    4198:	09 c0       	rjmp	.+18     	; 0x41ac <__RODATA_PM_OFFSET__+0x1ac>
    419a:	02 ff       	sbrs	r16, 2
    419c:	06 c0       	rjmp	.+12     	; 0x41aa <__RODATA_PM_OFFSET__+0x1aa>
    419e:	d3 94       	inc	r13
    41a0:	d3 94       	inc	r13
    41a2:	04 c0       	rjmp	.+8      	; 0x41ac <__RODATA_PM_OFFSET__+0x1ac>
    41a4:	80 2f       	mov	r24, r16
    41a6:	86 78       	andi	r24, 0x86	; 134
    41a8:	09 f0       	breq	.+2      	; 0x41ac <__RODATA_PM_OFFSET__+0x1ac>
    41aa:	d3 94       	inc	r13
    41ac:	03 fd       	sbrc	r16, 3
    41ae:	11 c0       	rjmp	.+34     	; 0x41d2 <__RODATA_PM_OFFSET__+0x1d2>
    41b0:	00 ff       	sbrs	r16, 0
    41b2:	06 c0       	rjmp	.+12     	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    41b4:	1c 2d       	mov	r17, r12
    41b6:	d5 14       	cp	r13, r5
    41b8:	80 f4       	brcc	.+32     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41ba:	15 0d       	add	r17, r5
    41bc:	1d 19       	sub	r17, r13
    41be:	0d c0       	rjmp	.+26     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41c0:	d5 14       	cp	r13, r5
    41c2:	58 f4       	brcc	.+22     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41c4:	b7 01       	movw	r22, r14
    41c6:	80 e2       	ldi	r24, 0x20	; 32
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    41ce:	d3 94       	inc	r13
    41d0:	f7 cf       	rjmp	.-18     	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    41d2:	d5 14       	cp	r13, r5
    41d4:	10 f4       	brcc	.+4      	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41d6:	5d 18       	sub	r5, r13
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    41da:	51 2c       	mov	r5, r1
    41dc:	04 ff       	sbrs	r16, 4
    41de:	10 c0       	rjmp	.+32     	; 0x4200 <__RODATA_PM_OFFSET__+0x200>
    41e0:	b7 01       	movw	r22, r14
    41e2:	80 e3       	ldi	r24, 0x30	; 48
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    41ea:	02 ff       	sbrs	r16, 2
    41ec:	17 c0       	rjmp	.+46     	; 0x421c <__RODATA_PM_OFFSET__+0x21c>
    41ee:	01 fd       	sbrc	r16, 1
    41f0:	03 c0       	rjmp	.+6      	; 0x41f8 <__RODATA_PM_OFFSET__+0x1f8>
    41f2:	88 e7       	ldi	r24, 0x78	; 120
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <__RODATA_PM_OFFSET__+0x1fc>
    41f8:	88 e5       	ldi	r24, 0x58	; 88
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	b7 01       	movw	r22, r14
    41fe:	0c c0       	rjmp	.+24     	; 0x4218 <__RODATA_PM_OFFSET__+0x218>
    4200:	80 2f       	mov	r24, r16
    4202:	86 78       	andi	r24, 0x86	; 134
    4204:	59 f0       	breq	.+22     	; 0x421c <__RODATA_PM_OFFSET__+0x21c>
    4206:	01 ff       	sbrs	r16, 1
    4208:	02 c0       	rjmp	.+4      	; 0x420e <__RODATA_PM_OFFSET__+0x20e>
    420a:	8b e2       	ldi	r24, 0x2B	; 43
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <__RODATA_PM_OFFSET__+0x210>
    420e:	80 e2       	ldi	r24, 0x20	; 32
    4210:	07 fd       	sbrc	r16, 7
    4212:	8d e2       	ldi	r24, 0x2D	; 45
    4214:	b7 01       	movw	r22, r14
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    421c:	c1 16       	cp	r12, r17
    421e:	38 f4       	brcc	.+14     	; 0x422e <__RODATA_PM_OFFSET__+0x22e>
    4220:	b7 01       	movw	r22, r14
    4222:	80 e3       	ldi	r24, 0x30	; 48
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    422a:	11 50       	subi	r17, 0x01	; 1
    422c:	f7 cf       	rjmp	.-18     	; 0x421c <__RODATA_PM_OFFSET__+0x21c>
    422e:	ca 94       	dec	r12
    4230:	f3 01       	movw	r30, r6
    4232:	ec 0d       	add	r30, r12
    4234:	f1 1d       	adc	r31, r1
    4236:	80 81       	ld	r24, Z
    4238:	b7 01       	movw	r22, r14
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4240:	c1 10       	cpse	r12, r1
    4242:	f5 cf       	rjmp	.-22     	; 0x422e <__RODATA_PM_OFFSET__+0x22e>
    4244:	15 c0       	rjmp	.+42     	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    4246:	f4 e0       	ldi	r31, 0x04	; 4
    4248:	f5 15       	cp	r31, r5
    424a:	60 f5       	brcc	.+88     	; 0x42a4 <__RODATA_PM_OFFSET__+0x2a4>
    424c:	84 e0       	ldi	r24, 0x04	; 4
    424e:	58 1a       	sub	r5, r24
    4250:	93 fe       	sbrs	r9, 3
    4252:	1f c0       	rjmp	.+62     	; 0x4292 <__RODATA_PM_OFFSET__+0x292>
    4254:	01 11       	cpse	r16, r1
    4256:	27 c0       	rjmp	.+78     	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    4258:	2c 85       	ldd	r18, Y+12	; 0x0c
    425a:	23 ff       	sbrs	r18, 3
    425c:	2a c0       	rjmp	.+84     	; 0x42b2 <__RODATA_PM_OFFSET__+0x2b2>
    425e:	02 e5       	ldi	r16, 0x52	; 82
    4260:	11 e0       	ldi	r17, 0x01	; 1
    4262:	39 2d       	mov	r19, r9
    4264:	30 71       	andi	r19, 0x10	; 16
    4266:	93 2e       	mov	r9, r19
    4268:	f8 01       	movw	r30, r16
    426a:	84 91       	lpm	r24, Z
    426c:	81 11       	cpse	r24, r1
    426e:	24 c0       	rjmp	.+72     	; 0x42b8 <__RODATA_PM_OFFSET__+0x2b8>
    4270:	55 20       	and	r5, r5
    4272:	09 f4       	brne	.+2      	; 0x4276 <__RODATA_PM_OFFSET__+0x276>
    4274:	e4 cc       	rjmp	.-1592   	; 0x3c3e <vfprintf+0x58>
    4276:	b7 01       	movw	r22, r14
    4278:	80 e2       	ldi	r24, 0x20	; 32
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4280:	5a 94       	dec	r5
    4282:	f6 cf       	rjmp	.-20     	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    4284:	f7 01       	movw	r30, r14
    4286:	86 81       	ldd	r24, Z+6	; 0x06
    4288:	97 81       	ldd	r25, Z+7	; 0x07
    428a:	26 c0       	rjmp	.+76     	; 0x42d8 <__RODATA_PM_OFFSET__+0x2d8>
    428c:	8f ef       	ldi	r24, 0xFF	; 255
    428e:	9f ef       	ldi	r25, 0xFF	; 255
    4290:	23 c0       	rjmp	.+70     	; 0x42d8 <__RODATA_PM_OFFSET__+0x2d8>
    4292:	b7 01       	movw	r22, r14
    4294:	80 e2       	ldi	r24, 0x20	; 32
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    429c:	5a 94       	dec	r5
    429e:	51 10       	cpse	r5, r1
    42a0:	f8 cf       	rjmp	.-16     	; 0x4292 <__RODATA_PM_OFFSET__+0x292>
    42a2:	d8 cf       	rjmp	.-80     	; 0x4254 <__RODATA_PM_OFFSET__+0x254>
    42a4:	51 2c       	mov	r5, r1
    42a6:	b7 01       	movw	r22, r14
    42a8:	80 2f       	mov	r24, r16
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    42b0:	d3 cf       	rjmp	.-90     	; 0x4258 <__RODATA_PM_OFFSET__+0x258>
    42b2:	06 e5       	ldi	r16, 0x56	; 86
    42b4:	11 e0       	ldi	r17, 0x01	; 1
    42b6:	d5 cf       	rjmp	.-86     	; 0x4262 <__RODATA_PM_OFFSET__+0x262>
    42b8:	91 10       	cpse	r9, r1
    42ba:	80 52       	subi	r24, 0x20	; 32
    42bc:	b7 01       	movw	r22, r14
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    42c4:	0f 5f       	subi	r16, 0xFF	; 255
    42c6:	1f 4f       	sbci	r17, 0xFF	; 255
    42c8:	cf cf       	rjmp	.-98     	; 0x4268 <__RODATA_PM_OFFSET__+0x268>
    42ca:	23 e0       	ldi	r18, 0x03	; 3
    42cc:	25 15       	cp	r18, r5
    42ce:	10 f4       	brcc	.+4      	; 0x42d4 <__RODATA_PM_OFFSET__+0x2d4>
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	bd cf       	rjmp	.-134    	; 0x424e <__RODATA_PM_OFFSET__+0x24e>
    42d4:	51 2c       	mov	r5, r1
    42d6:	c0 cf       	rjmp	.-128    	; 0x4258 <__RODATA_PM_OFFSET__+0x258>
    42d8:	60 96       	adiw	r28, 0x10	; 16
    42da:	e2 e1       	ldi	r30, 0x12	; 18
    42dc:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__epilogue_restores__>

000042e0 <__divmodhi4>:
    42e0:	97 fb       	bst	r25, 7
    42e2:	07 2e       	mov	r0, r23
    42e4:	16 f4       	brtc	.+4      	; 0x42ea <__divmodhi4+0xa>
    42e6:	00 94       	com	r0
    42e8:	07 d0       	rcall	.+14     	; 0x42f8 <__divmodhi4_neg1>
    42ea:	77 fd       	sbrc	r23, 7
    42ec:	09 d0       	rcall	.+18     	; 0x4300 <__divmodhi4_neg2>
    42ee:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__udivmodhi4>
    42f2:	07 fc       	sbrc	r0, 7
    42f4:	05 d0       	rcall	.+10     	; 0x4300 <__divmodhi4_neg2>
    42f6:	3e f4       	brtc	.+14     	; 0x4306 <__divmodhi4_exit>

000042f8 <__divmodhi4_neg1>:
    42f8:	90 95       	com	r25
    42fa:	81 95       	neg	r24
    42fc:	9f 4f       	sbci	r25, 0xFF	; 255
    42fe:	08 95       	ret

00004300 <__divmodhi4_neg2>:
    4300:	70 95       	com	r23
    4302:	61 95       	neg	r22
    4304:	7f 4f       	sbci	r23, 0xFF	; 255

00004306 <__divmodhi4_exit>:
    4306:	08 95       	ret

00004308 <__divmodsi4>:
    4308:	05 2e       	mov	r0, r21
    430a:	97 fb       	bst	r25, 7
    430c:	1e f4       	brtc	.+6      	; 0x4314 <__divmodsi4+0xc>
    430e:	00 94       	com	r0
    4310:	0e 94 9b 21 	call	0x4336	; 0x4336 <__negsi2>
    4314:	57 fd       	sbrc	r21, 7
    4316:	07 d0       	rcall	.+14     	; 0x4326 <__divmodsi4_neg2>
    4318:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__udivmodsi4>
    431c:	07 fc       	sbrc	r0, 7
    431e:	03 d0       	rcall	.+6      	; 0x4326 <__divmodsi4_neg2>
    4320:	4e f4       	brtc	.+18     	; 0x4334 <__divmodsi4_exit>
    4322:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__negsi2>

00004326 <__divmodsi4_neg2>:
    4326:	50 95       	com	r21
    4328:	40 95       	com	r20
    432a:	30 95       	com	r19
    432c:	21 95       	neg	r18
    432e:	3f 4f       	sbci	r19, 0xFF	; 255
    4330:	4f 4f       	sbci	r20, 0xFF	; 255
    4332:	5f 4f       	sbci	r21, 0xFF	; 255

00004334 <__divmodsi4_exit>:
    4334:	08 95       	ret

00004336 <__negsi2>:
    4336:	90 95       	com	r25
    4338:	80 95       	com	r24
    433a:	70 95       	com	r23
    433c:	61 95       	neg	r22
    433e:	7f 4f       	sbci	r23, 0xFF	; 255
    4340:	8f 4f       	sbci	r24, 0xFF	; 255
    4342:	9f 4f       	sbci	r25, 0xFF	; 255
    4344:	08 95       	ret

00004346 <__tablejump2__>:
    4346:	ee 0f       	add	r30, r30
    4348:	ff 1f       	adc	r31, r31
    434a:	05 90       	lpm	r0, Z+
    434c:	f4 91       	lpm	r31, Z
    434e:	e0 2d       	mov	r30, r0
    4350:	09 94       	ijmp

00004352 <__muluhisi3>:
    4352:	0e 94 1b 22 	call	0x4436	; 0x4436 <__umulhisi3>
    4356:	a5 9f       	mul	r26, r21
    4358:	90 0d       	add	r25, r0
    435a:	b4 9f       	mul	r27, r20
    435c:	90 0d       	add	r25, r0
    435e:	a4 9f       	mul	r26, r20
    4360:	80 0d       	add	r24, r0
    4362:	91 1d       	adc	r25, r1
    4364:	11 24       	eor	r1, r1
    4366:	08 95       	ret

00004368 <__prologue_saves__>:
    4368:	2f 92       	push	r2
    436a:	3f 92       	push	r3
    436c:	4f 92       	push	r4
    436e:	5f 92       	push	r5
    4370:	6f 92       	push	r6
    4372:	7f 92       	push	r7
    4374:	8f 92       	push	r8
    4376:	9f 92       	push	r9
    4378:	af 92       	push	r10
    437a:	bf 92       	push	r11
    437c:	cf 92       	push	r12
    437e:	df 92       	push	r13
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	ca 1b       	sub	r28, r26
    4392:	db 0b       	sbc	r29, r27
    4394:	cd bf       	out	0x3d, r28	; 61
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	09 94       	ijmp

0000439a <__epilogue_restores__>:
    439a:	2a 88       	ldd	r2, Y+18	; 0x12
    439c:	39 88       	ldd	r3, Y+17	; 0x11
    439e:	48 88       	ldd	r4, Y+16	; 0x10
    43a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    43a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    43a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    43a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    43a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    43aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    43ac:	b9 84       	ldd	r11, Y+9	; 0x09
    43ae:	c8 84       	ldd	r12, Y+8	; 0x08
    43b0:	df 80       	ldd	r13, Y+7	; 0x07
    43b2:	ee 80       	ldd	r14, Y+6	; 0x06
    43b4:	fd 80       	ldd	r15, Y+5	; 0x05
    43b6:	0c 81       	ldd	r16, Y+4	; 0x04
    43b8:	1b 81       	ldd	r17, Y+3	; 0x03
    43ba:	aa 81       	ldd	r26, Y+2	; 0x02
    43bc:	b9 81       	ldd	r27, Y+1	; 0x01
    43be:	ce 0f       	add	r28, r30
    43c0:	d1 1d       	adc	r29, r1
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	de bf       	out	0x3e, r29	; 62
    43c6:	ed 01       	movw	r28, r26
    43c8:	08 95       	ret

000043ca <__udivmodhi4>:
    43ca:	aa 1b       	sub	r26, r26
    43cc:	bb 1b       	sub	r27, r27
    43ce:	51 e1       	ldi	r21, 0x11	; 17
    43d0:	07 c0       	rjmp	.+14     	; 0x43e0 <__udivmodhi4_ep>

000043d2 <__udivmodhi4_loop>:
    43d2:	aa 1f       	adc	r26, r26
    43d4:	bb 1f       	adc	r27, r27
    43d6:	a6 17       	cp	r26, r22
    43d8:	b7 07       	cpc	r27, r23
    43da:	10 f0       	brcs	.+4      	; 0x43e0 <__udivmodhi4_ep>
    43dc:	a6 1b       	sub	r26, r22
    43de:	b7 0b       	sbc	r27, r23

000043e0 <__udivmodhi4_ep>:
    43e0:	88 1f       	adc	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	5a 95       	dec	r21
    43e6:	a9 f7       	brne	.-22     	; 0x43d2 <__udivmodhi4_loop>
    43e8:	80 95       	com	r24
    43ea:	90 95       	com	r25
    43ec:	bc 01       	movw	r22, r24
    43ee:	cd 01       	movw	r24, r26
    43f0:	08 95       	ret

000043f2 <__udivmodsi4>:
    43f2:	a1 e2       	ldi	r26, 0x21	; 33
    43f4:	1a 2e       	mov	r1, r26
    43f6:	aa 1b       	sub	r26, r26
    43f8:	bb 1b       	sub	r27, r27
    43fa:	fd 01       	movw	r30, r26
    43fc:	0d c0       	rjmp	.+26     	; 0x4418 <__udivmodsi4_ep>

000043fe <__udivmodsi4_loop>:
    43fe:	aa 1f       	adc	r26, r26
    4400:	bb 1f       	adc	r27, r27
    4402:	ee 1f       	adc	r30, r30
    4404:	ff 1f       	adc	r31, r31
    4406:	a2 17       	cp	r26, r18
    4408:	b3 07       	cpc	r27, r19
    440a:	e4 07       	cpc	r30, r20
    440c:	f5 07       	cpc	r31, r21
    440e:	20 f0       	brcs	.+8      	; 0x4418 <__udivmodsi4_ep>
    4410:	a2 1b       	sub	r26, r18
    4412:	b3 0b       	sbc	r27, r19
    4414:	e4 0b       	sbc	r30, r20
    4416:	f5 0b       	sbc	r31, r21

00004418 <__udivmodsi4_ep>:
    4418:	66 1f       	adc	r22, r22
    441a:	77 1f       	adc	r23, r23
    441c:	88 1f       	adc	r24, r24
    441e:	99 1f       	adc	r25, r25
    4420:	1a 94       	dec	r1
    4422:	69 f7       	brne	.-38     	; 0x43fe <__udivmodsi4_loop>
    4424:	60 95       	com	r22
    4426:	70 95       	com	r23
    4428:	80 95       	com	r24
    442a:	90 95       	com	r25
    442c:	9b 01       	movw	r18, r22
    442e:	ac 01       	movw	r20, r24
    4430:	bd 01       	movw	r22, r26
    4432:	cf 01       	movw	r24, r30
    4434:	08 95       	ret

00004436 <__umulhisi3>:
    4436:	a2 9f       	mul	r26, r18
    4438:	b0 01       	movw	r22, r0
    443a:	b3 9f       	mul	r27, r19
    443c:	c0 01       	movw	r24, r0
    443e:	a3 9f       	mul	r26, r19
    4440:	70 0d       	add	r23, r0
    4442:	81 1d       	adc	r24, r1
    4444:	11 24       	eor	r1, r1
    4446:	91 1d       	adc	r25, r1
    4448:	b2 9f       	mul	r27, r18
    444a:	70 0d       	add	r23, r0
    444c:	81 1d       	adc	r24, r1
    444e:	11 24       	eor	r1, r1
    4450:	91 1d       	adc	r25, r1
    4452:	08 95       	ret

00004454 <atol>:
    4454:	1f 93       	push	r17
    4456:	fc 01       	movw	r30, r24
    4458:	99 27       	eor	r25, r25
    445a:	88 27       	eor	r24, r24
    445c:	bc 01       	movw	r22, r24
    445e:	e8 94       	clt
    4460:	11 91       	ld	r17, Z+
    4462:	10 32       	cpi	r17, 0x20	; 32
    4464:	e9 f3       	breq	.-6      	; 0x4460 <atol+0xc>
    4466:	19 30       	cpi	r17, 0x09	; 9
    4468:	10 f0       	brcs	.+4      	; 0x446e <atol+0x1a>
    446a:	1e 30       	cpi	r17, 0x0E	; 14
    446c:	c8 f3       	brcs	.-14     	; 0x4460 <atol+0xc>
    446e:	1b 32       	cpi	r17, 0x2B	; 43
    4470:	51 f0       	breq	.+20     	; 0x4486 <atol+0x32>
    4472:	1d 32       	cpi	r17, 0x2D	; 45
    4474:	49 f4       	brne	.+18     	; 0x4488 <atol+0x34>
    4476:	68 94       	set
    4478:	06 c0       	rjmp	.+12     	; 0x4486 <atol+0x32>
    447a:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsi_const_10>
    447e:	61 0f       	add	r22, r17
    4480:	71 1d       	adc	r23, r1
    4482:	81 1d       	adc	r24, r1
    4484:	91 1d       	adc	r25, r1
    4486:	11 91       	ld	r17, Z+
    4488:	10 53       	subi	r17, 0x30	; 48
    448a:	1a 30       	cpi	r17, 0x0A	; 10
    448c:	b0 f3       	brcs	.-20     	; 0x447a <atol+0x26>
    448e:	3e f4       	brtc	.+14     	; 0x449e <atol+0x4a>
    4490:	90 95       	com	r25
    4492:	80 95       	com	r24
    4494:	70 95       	com	r23
    4496:	61 95       	neg	r22
    4498:	7f 4f       	sbci	r23, 0xFF	; 255
    449a:	8f 4f       	sbci	r24, 0xFF	; 255
    449c:	9f 4f       	sbci	r25, 0xFF	; 255
    449e:	1f 91       	pop	r17
    44a0:	08 95       	ret

000044a2 <__ftoa_engine>:
    44a2:	28 30       	cpi	r18, 0x08	; 8
    44a4:	08 f0       	brcs	.+2      	; 0x44a8 <__ftoa_engine+0x6>
    44a6:	27 e0       	ldi	r18, 0x07	; 7
    44a8:	33 27       	eor	r19, r19
    44aa:	da 01       	movw	r26, r20
    44ac:	99 0f       	add	r25, r25
    44ae:	31 1d       	adc	r19, r1
    44b0:	87 fd       	sbrc	r24, 7
    44b2:	91 60       	ori	r25, 0x01	; 1
    44b4:	00 96       	adiw	r24, 0x00	; 0
    44b6:	61 05       	cpc	r22, r1
    44b8:	71 05       	cpc	r23, r1
    44ba:	39 f4       	brne	.+14     	; 0x44ca <__ftoa_engine+0x28>
    44bc:	32 60       	ori	r19, 0x02	; 2
    44be:	2e 5f       	subi	r18, 0xFE	; 254
    44c0:	3d 93       	st	X+, r19
    44c2:	30 e3       	ldi	r19, 0x30	; 48
    44c4:	2a 95       	dec	r18
    44c6:	e1 f7       	brne	.-8      	; 0x44c0 <__ftoa_engine+0x1e>
    44c8:	08 95       	ret
    44ca:	9f 3f       	cpi	r25, 0xFF	; 255
    44cc:	30 f0       	brcs	.+12     	; 0x44da <__ftoa_engine+0x38>
    44ce:	80 38       	cpi	r24, 0x80	; 128
    44d0:	71 05       	cpc	r23, r1
    44d2:	61 05       	cpc	r22, r1
    44d4:	09 f0       	breq	.+2      	; 0x44d8 <__ftoa_engine+0x36>
    44d6:	3c 5f       	subi	r19, 0xFC	; 252
    44d8:	3c 5f       	subi	r19, 0xFC	; 252
    44da:	3d 93       	st	X+, r19
    44dc:	91 30       	cpi	r25, 0x01	; 1
    44de:	08 f0       	brcs	.+2      	; 0x44e2 <__ftoa_engine+0x40>
    44e0:	80 68       	ori	r24, 0x80	; 128
    44e2:	91 1d       	adc	r25, r1
    44e4:	df 93       	push	r29
    44e6:	cf 93       	push	r28
    44e8:	1f 93       	push	r17
    44ea:	0f 93       	push	r16
    44ec:	ff 92       	push	r15
    44ee:	ef 92       	push	r14
    44f0:	19 2f       	mov	r17, r25
    44f2:	98 7f       	andi	r25, 0xF8	; 248
    44f4:	96 95       	lsr	r25
    44f6:	e9 2f       	mov	r30, r25
    44f8:	96 95       	lsr	r25
    44fa:	96 95       	lsr	r25
    44fc:	e9 0f       	add	r30, r25
    44fe:	ff 27       	eor	r31, r31
    4500:	ec 54       	subi	r30, 0x4C	; 76
    4502:	fe 4f       	sbci	r31, 0xFE	; 254
    4504:	99 27       	eor	r25, r25
    4506:	33 27       	eor	r19, r19
    4508:	ee 24       	eor	r14, r14
    450a:	ff 24       	eor	r15, r15
    450c:	a7 01       	movw	r20, r14
    450e:	e7 01       	movw	r28, r14
    4510:	05 90       	lpm	r0, Z+
    4512:	08 94       	sec
    4514:	07 94       	ror	r0
    4516:	28 f4       	brcc	.+10     	; 0x4522 <__ftoa_engine+0x80>
    4518:	36 0f       	add	r19, r22
    451a:	e7 1e       	adc	r14, r23
    451c:	f8 1e       	adc	r15, r24
    451e:	49 1f       	adc	r20, r25
    4520:	51 1d       	adc	r21, r1
    4522:	66 0f       	add	r22, r22
    4524:	77 1f       	adc	r23, r23
    4526:	88 1f       	adc	r24, r24
    4528:	99 1f       	adc	r25, r25
    452a:	06 94       	lsr	r0
    452c:	a1 f7       	brne	.-24     	; 0x4516 <__ftoa_engine+0x74>
    452e:	05 90       	lpm	r0, Z+
    4530:	07 94       	ror	r0
    4532:	28 f4       	brcc	.+10     	; 0x453e <__ftoa_engine+0x9c>
    4534:	e7 0e       	add	r14, r23
    4536:	f8 1e       	adc	r15, r24
    4538:	49 1f       	adc	r20, r25
    453a:	56 1f       	adc	r21, r22
    453c:	c1 1d       	adc	r28, r1
    453e:	77 0f       	add	r23, r23
    4540:	88 1f       	adc	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	66 1f       	adc	r22, r22
    4546:	06 94       	lsr	r0
    4548:	a1 f7       	brne	.-24     	; 0x4532 <__ftoa_engine+0x90>
    454a:	05 90       	lpm	r0, Z+
    454c:	07 94       	ror	r0
    454e:	28 f4       	brcc	.+10     	; 0x455a <__ftoa_engine+0xb8>
    4550:	f8 0e       	add	r15, r24
    4552:	49 1f       	adc	r20, r25
    4554:	56 1f       	adc	r21, r22
    4556:	c7 1f       	adc	r28, r23
    4558:	d1 1d       	adc	r29, r1
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	66 1f       	adc	r22, r22
    4560:	77 1f       	adc	r23, r23
    4562:	06 94       	lsr	r0
    4564:	a1 f7       	brne	.-24     	; 0x454e <__ftoa_engine+0xac>
    4566:	05 90       	lpm	r0, Z+
    4568:	07 94       	ror	r0
    456a:	20 f4       	brcc	.+8      	; 0x4574 <__ftoa_engine+0xd2>
    456c:	49 0f       	add	r20, r25
    456e:	56 1f       	adc	r21, r22
    4570:	c7 1f       	adc	r28, r23
    4572:	d8 1f       	adc	r29, r24
    4574:	99 0f       	add	r25, r25
    4576:	66 1f       	adc	r22, r22
    4578:	77 1f       	adc	r23, r23
    457a:	88 1f       	adc	r24, r24
    457c:	06 94       	lsr	r0
    457e:	a9 f7       	brne	.-22     	; 0x456a <__ftoa_engine+0xc8>
    4580:	84 91       	lpm	r24, Z
    4582:	10 95       	com	r17
    4584:	17 70       	andi	r17, 0x07	; 7
    4586:	41 f0       	breq	.+16     	; 0x4598 <__ftoa_engine+0xf6>
    4588:	d6 95       	lsr	r29
    458a:	c7 95       	ror	r28
    458c:	57 95       	ror	r21
    458e:	47 95       	ror	r20
    4590:	f7 94       	ror	r15
    4592:	e7 94       	ror	r14
    4594:	1a 95       	dec	r17
    4596:	c1 f7       	brne	.-16     	; 0x4588 <__ftoa_engine+0xe6>
    4598:	ea e5       	ldi	r30, 0x5A	; 90
    459a:	f1 e0       	ldi	r31, 0x01	; 1
    459c:	68 94       	set
    459e:	15 90       	lpm	r1, Z+
    45a0:	15 91       	lpm	r17, Z+
    45a2:	35 91       	lpm	r19, Z+
    45a4:	65 91       	lpm	r22, Z+
    45a6:	95 91       	lpm	r25, Z+
    45a8:	05 90       	lpm	r0, Z+
    45aa:	7f e2       	ldi	r23, 0x2F	; 47
    45ac:	73 95       	inc	r23
    45ae:	e1 18       	sub	r14, r1
    45b0:	f1 0a       	sbc	r15, r17
    45b2:	43 0b       	sbc	r20, r19
    45b4:	56 0b       	sbc	r21, r22
    45b6:	c9 0b       	sbc	r28, r25
    45b8:	d0 09       	sbc	r29, r0
    45ba:	c0 f7       	brcc	.-16     	; 0x45ac <__ftoa_engine+0x10a>
    45bc:	e1 0c       	add	r14, r1
    45be:	f1 1e       	adc	r15, r17
    45c0:	43 1f       	adc	r20, r19
    45c2:	56 1f       	adc	r21, r22
    45c4:	c9 1f       	adc	r28, r25
    45c6:	d0 1d       	adc	r29, r0
    45c8:	7e f4       	brtc	.+30     	; 0x45e8 <__ftoa_engine+0x146>
    45ca:	70 33       	cpi	r23, 0x30	; 48
    45cc:	11 f4       	brne	.+4      	; 0x45d2 <__ftoa_engine+0x130>
    45ce:	8a 95       	dec	r24
    45d0:	e6 cf       	rjmp	.-52     	; 0x459e <__ftoa_engine+0xfc>
    45d2:	e8 94       	clt
    45d4:	01 50       	subi	r16, 0x01	; 1
    45d6:	30 f0       	brcs	.+12     	; 0x45e4 <__ftoa_engine+0x142>
    45d8:	08 0f       	add	r16, r24
    45da:	0a f4       	brpl	.+2      	; 0x45de <__ftoa_engine+0x13c>
    45dc:	00 27       	eor	r16, r16
    45de:	02 17       	cp	r16, r18
    45e0:	08 f4       	brcc	.+2      	; 0x45e4 <__ftoa_engine+0x142>
    45e2:	20 2f       	mov	r18, r16
    45e4:	23 95       	inc	r18
    45e6:	02 2f       	mov	r16, r18
    45e8:	7a 33       	cpi	r23, 0x3A	; 58
    45ea:	28 f0       	brcs	.+10     	; 0x45f6 <__ftoa_engine+0x154>
    45ec:	79 e3       	ldi	r23, 0x39	; 57
    45ee:	7d 93       	st	X+, r23
    45f0:	2a 95       	dec	r18
    45f2:	e9 f7       	brne	.-6      	; 0x45ee <__ftoa_engine+0x14c>
    45f4:	10 c0       	rjmp	.+32     	; 0x4616 <__ftoa_engine+0x174>
    45f6:	7d 93       	st	X+, r23
    45f8:	2a 95       	dec	r18
    45fa:	89 f6       	brne	.-94     	; 0x459e <__ftoa_engine+0xfc>
    45fc:	06 94       	lsr	r0
    45fe:	97 95       	ror	r25
    4600:	67 95       	ror	r22
    4602:	37 95       	ror	r19
    4604:	17 95       	ror	r17
    4606:	17 94       	ror	r1
    4608:	e1 18       	sub	r14, r1
    460a:	f1 0a       	sbc	r15, r17
    460c:	43 0b       	sbc	r20, r19
    460e:	56 0b       	sbc	r21, r22
    4610:	c9 0b       	sbc	r28, r25
    4612:	d0 09       	sbc	r29, r0
    4614:	98 f0       	brcs	.+38     	; 0x463c <__ftoa_engine+0x19a>
    4616:	23 95       	inc	r18
    4618:	7e 91       	ld	r23, -X
    461a:	73 95       	inc	r23
    461c:	7a 33       	cpi	r23, 0x3A	; 58
    461e:	08 f0       	brcs	.+2      	; 0x4622 <__ftoa_engine+0x180>
    4620:	70 e3       	ldi	r23, 0x30	; 48
    4622:	7c 93       	st	X, r23
    4624:	20 13       	cpse	r18, r16
    4626:	b8 f7       	brcc	.-18     	; 0x4616 <__ftoa_engine+0x174>
    4628:	7e 91       	ld	r23, -X
    462a:	70 61       	ori	r23, 0x10	; 16
    462c:	7d 93       	st	X+, r23
    462e:	30 f0       	brcs	.+12     	; 0x463c <__ftoa_engine+0x19a>
    4630:	83 95       	inc	r24
    4632:	71 e3       	ldi	r23, 0x31	; 49
    4634:	7d 93       	st	X+, r23
    4636:	70 e3       	ldi	r23, 0x30	; 48
    4638:	2a 95       	dec	r18
    463a:	e1 f7       	brne	.-8      	; 0x4634 <__ftoa_engine+0x192>
    463c:	11 24       	eor	r1, r1
    463e:	ef 90       	pop	r14
    4640:	ff 90       	pop	r15
    4642:	0f 91       	pop	r16
    4644:	1f 91       	pop	r17
    4646:	cf 91       	pop	r28
    4648:	df 91       	pop	r29
    464a:	99 27       	eor	r25, r25
    464c:	87 fd       	sbrc	r24, 7
    464e:	90 95       	com	r25
    4650:	08 95       	ret

00004652 <strnlen_P>:
    4652:	fc 01       	movw	r30, r24
    4654:	05 90       	lpm	r0, Z+
    4656:	61 50       	subi	r22, 0x01	; 1
    4658:	70 40       	sbci	r23, 0x00	; 0
    465a:	01 10       	cpse	r0, r1
    465c:	d8 f7       	brcc	.-10     	; 0x4654 <strnlen_P+0x2>
    465e:	80 95       	com	r24
    4660:	90 95       	com	r25
    4662:	8e 0f       	add	r24, r30
    4664:	9f 1f       	adc	r25, r31
    4666:	08 95       	ret

00004668 <strcat>:
    4668:	fb 01       	movw	r30, r22
    466a:	dc 01       	movw	r26, r24
    466c:	0d 90       	ld	r0, X+
    466e:	00 20       	and	r0, r0
    4670:	e9 f7       	brne	.-6      	; 0x466c <strcat+0x4>
    4672:	11 97       	sbiw	r26, 0x01	; 1
    4674:	01 90       	ld	r0, Z+
    4676:	0d 92       	st	X+, r0
    4678:	00 20       	and	r0, r0
    467a:	e1 f7       	brne	.-8      	; 0x4674 <strcat+0xc>
    467c:	08 95       	ret

0000467e <strcpy>:
    467e:	fb 01       	movw	r30, r22
    4680:	dc 01       	movw	r26, r24
    4682:	01 90       	ld	r0, Z+
    4684:	0d 92       	st	X+, r0
    4686:	00 20       	and	r0, r0
    4688:	e1 f7       	brne	.-8      	; 0x4682 <strcpy+0x4>
    468a:	08 95       	ret

0000468c <strnlen>:
    468c:	fc 01       	movw	r30, r24
    468e:	61 50       	subi	r22, 0x01	; 1
    4690:	70 40       	sbci	r23, 0x00	; 0
    4692:	01 90       	ld	r0, Z+
    4694:	01 10       	cpse	r0, r1
    4696:	d8 f7       	brcc	.-10     	; 0x468e <strnlen+0x2>
    4698:	80 95       	com	r24
    469a:	90 95       	com	r25
    469c:	8e 0f       	add	r24, r30
    469e:	9f 1f       	adc	r25, r31
    46a0:	08 95       	ret

000046a2 <__mulsi_const_10>:
    46a2:	59 2f       	mov	r21, r25
    46a4:	48 2f       	mov	r20, r24
    46a6:	37 2f       	mov	r19, r23
    46a8:	26 2f       	mov	r18, r22
    46aa:	66 0f       	add	r22, r22
    46ac:	77 1f       	adc	r23, r23
    46ae:	88 1f       	adc	r24, r24
    46b0:	99 1f       	adc	r25, r25
    46b2:	66 0f       	add	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	88 1f       	adc	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	62 0f       	add	r22, r18
    46bc:	73 1f       	adc	r23, r19
    46be:	84 1f       	adc	r24, r20
    46c0:	95 1f       	adc	r25, r21
    46c2:	66 0f       	add	r22, r22
    46c4:	77 1f       	adc	r23, r23
    46c6:	88 1f       	adc	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	08 95       	ret

000046cc <fputc>:
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	fb 01       	movw	r30, r22
    46d6:	23 81       	ldd	r18, Z+3	; 0x03
    46d8:	21 fd       	sbrc	r18, 1
    46da:	03 c0       	rjmp	.+6      	; 0x46e2 <fputc+0x16>
    46dc:	8f ef       	ldi	r24, 0xFF	; 255
    46de:	9f ef       	ldi	r25, 0xFF	; 255
    46e0:	2c c0       	rjmp	.+88     	; 0x473a <fputc+0x6e>
    46e2:	22 ff       	sbrs	r18, 2
    46e4:	16 c0       	rjmp	.+44     	; 0x4712 <fputc+0x46>
    46e6:	46 81       	ldd	r20, Z+6	; 0x06
    46e8:	57 81       	ldd	r21, Z+7	; 0x07
    46ea:	24 81       	ldd	r18, Z+4	; 0x04
    46ec:	35 81       	ldd	r19, Z+5	; 0x05
    46ee:	42 17       	cp	r20, r18
    46f0:	53 07       	cpc	r21, r19
    46f2:	44 f4       	brge	.+16     	; 0x4704 <fputc+0x38>
    46f4:	a0 81       	ld	r26, Z
    46f6:	b1 81       	ldd	r27, Z+1	; 0x01
    46f8:	9d 01       	movw	r18, r26
    46fa:	2f 5f       	subi	r18, 0xFF	; 255
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	20 83       	st	Z, r18
    4700:	31 83       	std	Z+1, r19	; 0x01
    4702:	8c 93       	st	X, r24
    4704:	26 81       	ldd	r18, Z+6	; 0x06
    4706:	37 81       	ldd	r19, Z+7	; 0x07
    4708:	2f 5f       	subi	r18, 0xFF	; 255
    470a:	3f 4f       	sbci	r19, 0xFF	; 255
    470c:	26 83       	std	Z+6, r18	; 0x06
    470e:	37 83       	std	Z+7, r19	; 0x07
    4710:	14 c0       	rjmp	.+40     	; 0x473a <fputc+0x6e>
    4712:	8b 01       	movw	r16, r22
    4714:	ec 01       	movw	r28, r24
    4716:	fb 01       	movw	r30, r22
    4718:	00 84       	ldd	r0, Z+8	; 0x08
    471a:	f1 85       	ldd	r31, Z+9	; 0x09
    471c:	e0 2d       	mov	r30, r0
    471e:	09 95       	icall
    4720:	89 2b       	or	r24, r25
    4722:	e1 f6       	brne	.-72     	; 0x46dc <fputc+0x10>
    4724:	d8 01       	movw	r26, r16
    4726:	16 96       	adiw	r26, 0x06	; 6
    4728:	8d 91       	ld	r24, X+
    472a:	9c 91       	ld	r25, X
    472c:	17 97       	sbiw	r26, 0x07	; 7
    472e:	01 96       	adiw	r24, 0x01	; 1
    4730:	16 96       	adiw	r26, 0x06	; 6
    4732:	8d 93       	st	X+, r24
    4734:	9c 93       	st	X, r25
    4736:	17 97       	sbiw	r26, 0x07	; 7
    4738:	ce 01       	movw	r24, r28
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	08 95       	ret

00004744 <sprintf>:
    4744:	ae e0       	ldi	r26, 0x0E	; 14
    4746:	b0 e0       	ldi	r27, 0x00	; 0
    4748:	e8 ea       	ldi	r30, 0xA8	; 168
    474a:	f3 e2       	ldi	r31, 0x23	; 35
    474c:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__prologue_saves__+0x1c>
    4750:	0d 89       	ldd	r16, Y+21	; 0x15
    4752:	1e 89       	ldd	r17, Y+22	; 0x16
    4754:	86 e0       	ldi	r24, 0x06	; 6
    4756:	8c 83       	std	Y+4, r24	; 0x04
    4758:	09 83       	std	Y+1, r16	; 0x01
    475a:	1a 83       	std	Y+2, r17	; 0x02
    475c:	8f ef       	ldi	r24, 0xFF	; 255
    475e:	9f e7       	ldi	r25, 0x7F	; 127
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	9e 83       	std	Y+6, r25	; 0x06
    4764:	ae 01       	movw	r20, r28
    4766:	47 5e       	subi	r20, 0xE7	; 231
    4768:	5f 4f       	sbci	r21, 0xFF	; 255
    476a:	6f 89       	ldd	r22, Y+23	; 0x17
    476c:	78 8d       	ldd	r23, Y+24	; 0x18
    476e:	ce 01       	movw	r24, r28
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <vfprintf>
    4776:	ef 81       	ldd	r30, Y+7	; 0x07
    4778:	f8 85       	ldd	r31, Y+8	; 0x08
    477a:	e0 0f       	add	r30, r16
    477c:	f1 1f       	adc	r31, r17
    477e:	10 82       	st	Z, r1
    4780:	2e 96       	adiw	r28, 0x0e	; 14
    4782:	e4 e0       	ldi	r30, 0x04	; 4
    4784:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <__epilogue_restores__+0x1c>

00004788 <__ultoa_invert>:
    4788:	fa 01       	movw	r30, r20
    478a:	aa 27       	eor	r26, r26
    478c:	28 30       	cpi	r18, 0x08	; 8
    478e:	51 f1       	breq	.+84     	; 0x47e4 <__ultoa_invert+0x5c>
    4790:	20 31       	cpi	r18, 0x10	; 16
    4792:	81 f1       	breq	.+96     	; 0x47f4 <__ultoa_invert+0x6c>
    4794:	e8 94       	clt
    4796:	6f 93       	push	r22
    4798:	6e 7f       	andi	r22, 0xFE	; 254
    479a:	6e 5f       	subi	r22, 0xFE	; 254
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	8f 4f       	sbci	r24, 0xFF	; 255
    47a0:	9f 4f       	sbci	r25, 0xFF	; 255
    47a2:	af 4f       	sbci	r26, 0xFF	; 255
    47a4:	b1 e0       	ldi	r27, 0x01	; 1
    47a6:	3e d0       	rcall	.+124    	; 0x4824 <__ultoa_invert+0x9c>
    47a8:	b4 e0       	ldi	r27, 0x04	; 4
    47aa:	3c d0       	rcall	.+120    	; 0x4824 <__ultoa_invert+0x9c>
    47ac:	67 0f       	add	r22, r23
    47ae:	78 1f       	adc	r23, r24
    47b0:	89 1f       	adc	r24, r25
    47b2:	9a 1f       	adc	r25, r26
    47b4:	a1 1d       	adc	r26, r1
    47b6:	68 0f       	add	r22, r24
    47b8:	79 1f       	adc	r23, r25
    47ba:	8a 1f       	adc	r24, r26
    47bc:	91 1d       	adc	r25, r1
    47be:	a1 1d       	adc	r26, r1
    47c0:	6a 0f       	add	r22, r26
    47c2:	71 1d       	adc	r23, r1
    47c4:	81 1d       	adc	r24, r1
    47c6:	91 1d       	adc	r25, r1
    47c8:	a1 1d       	adc	r26, r1
    47ca:	20 d0       	rcall	.+64     	; 0x480c <__ultoa_invert+0x84>
    47cc:	09 f4       	brne	.+2      	; 0x47d0 <__ultoa_invert+0x48>
    47ce:	68 94       	set
    47d0:	3f 91       	pop	r19
    47d2:	2a e0       	ldi	r18, 0x0A	; 10
    47d4:	26 9f       	mul	r18, r22
    47d6:	11 24       	eor	r1, r1
    47d8:	30 19       	sub	r19, r0
    47da:	30 5d       	subi	r19, 0xD0	; 208
    47dc:	31 93       	st	Z+, r19
    47de:	de f6       	brtc	.-74     	; 0x4796 <__ultoa_invert+0xe>
    47e0:	cf 01       	movw	r24, r30
    47e2:	08 95       	ret
    47e4:	46 2f       	mov	r20, r22
    47e6:	47 70       	andi	r20, 0x07	; 7
    47e8:	40 5d       	subi	r20, 0xD0	; 208
    47ea:	41 93       	st	Z+, r20
    47ec:	b3 e0       	ldi	r27, 0x03	; 3
    47ee:	0f d0       	rcall	.+30     	; 0x480e <__ultoa_invert+0x86>
    47f0:	c9 f7       	brne	.-14     	; 0x47e4 <__ultoa_invert+0x5c>
    47f2:	f6 cf       	rjmp	.-20     	; 0x47e0 <__ultoa_invert+0x58>
    47f4:	46 2f       	mov	r20, r22
    47f6:	4f 70       	andi	r20, 0x0F	; 15
    47f8:	40 5d       	subi	r20, 0xD0	; 208
    47fa:	4a 33       	cpi	r20, 0x3A	; 58
    47fc:	18 f0       	brcs	.+6      	; 0x4804 <__ultoa_invert+0x7c>
    47fe:	49 5d       	subi	r20, 0xD9	; 217
    4800:	31 fd       	sbrc	r19, 1
    4802:	40 52       	subi	r20, 0x20	; 32
    4804:	41 93       	st	Z+, r20
    4806:	02 d0       	rcall	.+4      	; 0x480c <__ultoa_invert+0x84>
    4808:	a9 f7       	brne	.-22     	; 0x47f4 <__ultoa_invert+0x6c>
    480a:	ea cf       	rjmp	.-44     	; 0x47e0 <__ultoa_invert+0x58>
    480c:	b4 e0       	ldi	r27, 0x04	; 4
    480e:	a6 95       	lsr	r26
    4810:	97 95       	ror	r25
    4812:	87 95       	ror	r24
    4814:	77 95       	ror	r23
    4816:	67 95       	ror	r22
    4818:	ba 95       	dec	r27
    481a:	c9 f7       	brne	.-14     	; 0x480e <__ultoa_invert+0x86>
    481c:	00 97       	sbiw	r24, 0x00	; 0
    481e:	61 05       	cpc	r22, r1
    4820:	71 05       	cpc	r23, r1
    4822:	08 95       	ret
    4824:	9b 01       	movw	r18, r22
    4826:	ac 01       	movw	r20, r24
    4828:	0a 2e       	mov	r0, r26
    482a:	06 94       	lsr	r0
    482c:	57 95       	ror	r21
    482e:	47 95       	ror	r20
    4830:	37 95       	ror	r19
    4832:	27 95       	ror	r18
    4834:	ba 95       	dec	r27
    4836:	c9 f7       	brne	.-14     	; 0x482a <__ultoa_invert+0xa2>
    4838:	62 0f       	add	r22, r18
    483a:	73 1f       	adc	r23, r19
    483c:	84 1f       	adc	r24, r20
    483e:	95 1f       	adc	r25, r21
    4840:	a0 1d       	adc	r26, r0
    4842:	08 95       	ret

00004844 <eeprom_read_block>:
    4844:	60 50       	subi	r22, 0x00	; 0
    4846:	7c 4e       	sbci	r23, 0xEC	; 236
    4848:	0c 94 5d 24 	jmp	0x48ba	; 0x48ba <memcpy>

0000484c <eeprom_update_block>:
    484c:	dc 01       	movw	r26, r24
    484e:	a4 0f       	add	r26, r20
    4850:	b5 1f       	adc	r27, r21
    4852:	41 50       	subi	r20, 0x01	; 1
    4854:	50 40       	sbci	r21, 0x00	; 0
    4856:	48 f0       	brcs	.+18     	; 0x486a <eeprom_update_block+0x1e>
    4858:	cb 01       	movw	r24, r22
    485a:	84 0f       	add	r24, r20
    485c:	95 1f       	adc	r25, r21
    485e:	2e 91       	ld	r18, -X
    4860:	0e 94 37 24 	call	0x486e	; 0x486e <eeprom_update_r18>
    4864:	41 50       	subi	r20, 0x01	; 1
    4866:	50 40       	sbci	r21, 0x00	; 0
    4868:	d0 f7       	brcc	.-12     	; 0x485e <eeprom_update_block+0x12>
    486a:	08 95       	ret

0000486c <eeprom_update_byte>:
    486c:	26 2f       	mov	r18, r22

0000486e <eeprom_update_r18>:
    486e:	0e 94 59 24 	call	0x48b2	; 0x48b2 <eeprom_mapen>
    4872:	00 80       	ld	r0, Z
    4874:	02 16       	cp	r0, r18
    4876:	19 f0       	breq	.+6      	; 0x487e <eeprom_update_r18+0x10>
    4878:	0e 94 42 24 	call	0x4884	; 0x4884 <eeprom_write_r18>
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	08 95       	ret

00004882 <eeprom_write_byte>:
    4882:	26 2f       	mov	r18, r22

00004884 <eeprom_write_r18>:
    4884:	af 93       	push	r26
    4886:	bf 93       	push	r27
    4888:	e0 e0       	ldi	r30, 0x00	; 0
    488a:	f0 e1       	ldi	r31, 0x10	; 16
    488c:	32 81       	ldd	r19, Z+2	; 0x02
    488e:	31 fd       	sbrc	r19, 1
    4890:	fd cf       	rjmp	.-6      	; 0x488c <eeprom_write_r18+0x8>
    4892:	dc 01       	movw	r26, r24
    4894:	a0 50       	subi	r26, 0x00	; 0
    4896:	bc 4e       	sbci	r27, 0xEC	; 236
    4898:	2c 93       	st	X, r18
    489a:	2d e9       	ldi	r18, 0x9D	; 157
    489c:	24 bf       	out	0x34, r18	; 52
    489e:	23 e0       	ldi	r18, 0x03	; 3
    48a0:	20 83       	st	Z, r18
    48a2:	01 96       	adiw	r24, 0x01	; 1
    48a4:	bf 91       	pop	r27
    48a6:	af 91       	pop	r26
    48a8:	08 95       	ret

000048aa <eeprom_read_byte>:
    48aa:	03 d0       	rcall	.+6      	; 0x48b2 <eeprom_mapen>
    48ac:	80 81       	ld	r24, Z
    48ae:	99 27       	eor	r25, r25
    48b0:	08 95       	ret

000048b2 <eeprom_mapen>:
    48b2:	fc 01       	movw	r30, r24
    48b4:	e0 50       	subi	r30, 0x00	; 0
    48b6:	fc 4e       	sbci	r31, 0xEC	; 236
    48b8:	08 95       	ret

000048ba <memcpy>:
    48ba:	fb 01       	movw	r30, r22
    48bc:	dc 01       	movw	r26, r24
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <memcpy+0xa>
    48c0:	01 90       	ld	r0, Z+
    48c2:	0d 92       	st	X+, r0
    48c4:	41 50       	subi	r20, 0x01	; 1
    48c6:	50 40       	sbci	r21, 0x00	; 0
    48c8:	d8 f7       	brcc	.-10     	; 0x48c0 <memcpy+0x6>
    48ca:	08 95       	ret

000048cc <_exit>:
    48cc:	f8 94       	cli

000048ce <__stop_program>:
    48ce:	ff cf       	rjmp	.-2      	; 0x48ce <__stop_program>
