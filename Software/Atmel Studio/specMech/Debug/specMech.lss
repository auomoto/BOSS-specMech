
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003c39  00003ced  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a20  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000219  00007a20  00003a20  00003ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000052d  00802802  00802802  00003cef  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003cef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d4c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  00003d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008f8e  00000000  00000000  000042f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040eb  00000000  00000000  0000d27e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000038d4  00000000  00000000  00011369  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c18  00000000  00000000  00014c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002089  00000000  00000000  00015858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003407  00000000  00000000  000178e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0001ace8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_3>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_17>
      48:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__vector_18>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_20>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      68:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_26>
      6c:	0c 94 97 14 	jmp	0x292e	; 0x292e <__vector_27>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      84:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__vector_37>
      98:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_38>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

000000a0 <__trampolines_end>:
      a0:	6e 61       	ori	r22, 0x1E	; 30
      a2:	6e 00       	.word	0x006e	; ????

000000a4 <__c.2332>:
      a4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      b4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      c4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      d4:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      e4:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      f4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     104:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     114:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     124:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     134:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     144:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     154:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     164:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     174:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     184:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     194:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e3       	ldi	r29, 0x3F	; 63
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	18 e2       	ldi	r17, 0x28	; 40
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b8 e2       	ldi	r27, 0x28	; 40
     1b4:	e9 e3       	ldi	r30, 0x39	; 57
     1b6:	fc e3       	ldi	r31, 0x3C	; 60
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a2 30       	cpi	r26, 0x02	; 2
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	2d e2       	ldi	r18, 0x2D	; 45
     1c6:	a2 e0       	ldi	r26, 0x02	; 2
     1c8:	b8 e2       	ldi	r27, 0x28	; 40
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	af 32       	cpi	r26, 0x2F	; 47
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 85 07 	call	0xf0a	; 0xf0a <main>
     1d8:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	c9 f0       	breq	.+50     	; 0x220 <read_AD590+0x40>
     1ee:	18 f0       	brcs	.+6      	; 0x1f6 <read_AD590+0x16>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	61 f0       	breq	.+24     	; 0x20c <read_AD590+0x2c>
     1f4:	10 c0       	rjmp	.+32     	; 0x216 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f3 e3       	ldi	r31, 0x33	; 51
     1fa:	cf 2e       	mov	r12, r31
     1fc:	dc 2c       	mov	r13, r12
     1fe:	f3 ef       	ldi	r31, 0xF3	; 243
     200:	ef 2e       	mov	r14, r31
     202:	f0 e4       	ldi	r31, 0x40	; 64
     204:	ff 2e       	mov	r15, r31
     206:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     208:	c1 e0       	ldi	r28, 0x01	; 1
     20a:	0e c0       	rjmp	.+28     	; 0x228 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     20c:	c1 2c       	mov	r12, r1
     20e:	d1 2c       	mov	r13, r1
     210:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     212:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     216:	c1 2c       	mov	r12, r1
     218:	d1 2c       	mov	r13, r1
     21a:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     21c:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     21e:	04 c0       	rjmp	.+8      	; 0x228 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     220:	c1 2c       	mov	r12, r1
     222:	d1 2c       	mov	r13, r1
     224:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     226:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	66 e0       	ldi	r22, 0x06	; 6
     22c:	87 e2       	ldi	r24, 0x27	; 39
     22e:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     232:	4c 2f       	mov	r20, r28
     234:	40 95       	com	r20
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	87 e2       	ldi	r24, 0x27	; 39
     23a:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     23e:	4c 2f       	mov	r20, r28
     240:	6a e0       	ldi	r22, 0x0A	; 10
     242:	87 e2       	ldi	r24, 0x27	; 39
     244:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	86 e1       	ldi	r24, 0x16	; 22
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <read_AD590+0x6a>
     24e:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     250:	20 e8       	ldi	r18, 0x80	; 128
     252:	40 e7       	ldi	r20, 0x70	; 112
     254:	68 e0       	ldi	r22, 0x08	; 8
     256:	88 e4       	ldi	r24, 0x48	; 72
     258:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	4a e7       	ldi	r20, 0x7A	; 122
     262:	54 e4       	ldi	r21, 0x44	; 68
     264:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
     268:	23 e3       	ldi	r18, 0x33	; 51
     26a:	33 e9       	ldi	r19, 0x93	; 147
     26c:	48 e8       	ldi	r20, 0x88	; 136
     26e:	53 e4       	ldi	r21, 0x43	; 67
     270:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__subsf3>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
	return(temperature);

}
     280:	cf 91       	pop	r28
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	08 95       	ret

0000028c <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	d8 2f       	mov	r29, r24
     29e:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     2a0:	46 2b       	or	r20, r22
     2a2:	c4 2f       	mov	r28, r20
     2a4:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     2a6:	12 2f       	mov	r17, r18
     2a8:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     2b0:	08 2f       	mov	r16, r24
     2b2:	88 23       	and	r24, r24
     2b4:	69 f0       	breq	.+26     	; 0x2d0 <read_ADS1115+0x44>
		stop_TWI();
     2b6:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     2ba:	60 2f       	mov	r22, r16
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
     2c6:	56 2f       	mov	r21, r22
     2c8:	47 2f       	mov	r20, r23
     2ca:	38 2f       	mov	r19, r24
     2cc:	29 2f       	mov	r18, r25
     2ce:	d0 c0       	rjmp	.+416    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     2d6:	08 2f       	mov	r16, r24
     2d8:	88 23       	and	r24, r24
     2da:	69 f0       	breq	.+26     	; 0x2f6 <read_ADS1115+0x6a>
		stop_TWI();
     2dc:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     2e0:	60 2f       	mov	r22, r16
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
     2ec:	56 2f       	mov	r21, r22
     2ee:	47 2f       	mov	r20, r23
     2f0:	38 2f       	mov	r19, r24
     2f2:	29 2f       	mov	r18, r25
     2f4:	bd c0       	rjmp	.+378    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     2f6:	8c 2f       	mov	r24, r28
     2f8:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     2fc:	c8 2f       	mov	r28, r24
     2fe:	88 23       	and	r24, r24
     300:	69 f0       	breq	.+26     	; 0x31c <read_ADS1115+0x90>
		stop_TWI();
     302:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     306:	6c 2f       	mov	r22, r28
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
     312:	56 2f       	mov	r21, r22
     314:	47 2f       	mov	r20, r23
     316:	38 2f       	mov	r19, r24
     318:	29 2f       	mov	r18, r25
     31a:	aa c0       	rjmp	.+340    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     31c:	81 2f       	mov	r24, r17
     31e:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     322:	c8 2f       	mov	r28, r24
     324:	88 23       	and	r24, r24
     326:	69 f0       	breq	.+26     	; 0x342 <read_ADS1115+0xb6>
		stop_TWI();
     328:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     32c:	6c 2f       	mov	r22, r28
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
     338:	56 2f       	mov	r21, r22
     33a:	47 2f       	mov	r20, r23
     33c:	38 2f       	mov	r19, r24
     33e:	29 2f       	mov	r18, r25
     340:	97 c0       	rjmp	.+302    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	stop_TWI();
     342:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
     346:	8c e1       	ldi	r24, 0x1C	; 28
     348:	8a 95       	dec	r24
     34a:	f1 f7       	brne	.-4      	; 0x348 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     34c:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     34e:	09 c0       	rjmp	.+18     	; 0x362 <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	8d 2f       	mov	r24, r29
     354:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     358:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     35c:	88 23       	and	r24, r24
     35e:	0c f4       	brge	.+2      	; 0x362 <read_ADS1115+0xd6>
			converting = NO;
     360:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     362:	c1 11       	cpse	r28, r1
     364:	f5 cf       	rjmp	.-22     	; 0x350 <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     366:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	start_TWI(addr, TWIWRITE);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	8d 2f       	mov	r24, r29
     36e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	8d 2f       	mov	r24, r29
     37c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	highbyte = read_TWI();
     380:	0e 94 dd 12 	call	0x25ba	; 0x25ba <read_TWI>
     384:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     386:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
     38a:	d8 2f       	mov	r29, r24
	stop_TWI();
     38c:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	value = highbyte;
     390:	6c 2f       	mov	r22, r28
     392:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     394:	76 2f       	mov	r23, r22
     396:	66 27       	eor	r22, r22
	value |= lowbyte;
     398:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	f8 16       	cp	r15, r24
     39e:	49 f1       	breq	.+82     	; 0x3f2 <read_ADS1115+0x166>
     3a0:	8f 15       	cp	r24, r15
     3a2:	30 f0       	brcs	.+12     	; 0x3b0 <read_ADS1115+0x124>
     3a4:	ff 20       	and	r15, r15
     3a6:	d9 f1       	breq	.+118    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	f8 16       	cp	r15, r24
     3ac:	69 f1       	breq	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ae:	42 c0       	rjmp	.+132    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	f8 16       	cp	r15, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <read_ADS1115+0x12c>
     3b6:	42 c0       	rjmp	.+132    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3b8:	8a e0       	ldi	r24, 0x0A	; 10
     3ba:	f8 16       	cp	r15, r24
     3bc:	21 f0       	breq	.+8      	; 0x3c6 <read_ADS1115+0x13a>
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	f8 12       	cpse	r15, r24
     3c2:	38 c0       	rjmp	.+112    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <read_ADS1115+0x150>
		case PGA0256:
			scale = SCA0256;
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f4 e7       	ldi	r31, 0x74	; 116
     3ca:	cf 2e       	mov	r12, r31
     3cc:	f3 e1       	ldi	r31, 0x13	; 19
     3ce:	df 2e       	mov	r13, r31
     3d0:	f3 e0       	ldi	r31, 0x03	; 3
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f7 e3       	ldi	r31, 0x37	; 55
     3d6:	ff 2e       	mov	r15, r31
     3d8:	f0 2d       	mov	r31, r0
     3da:	3a c0       	rjmp	.+116    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     3dc:	0f 2e       	mov	r0, r31
     3de:	f4 e7       	ldi	r31, 0x74	; 116
     3e0:	cf 2e       	mov	r12, r31
     3e2:	f3 e1       	ldi	r31, 0x13	; 19
     3e4:	df 2e       	mov	r13, r31
     3e6:	f3 e0       	ldi	r31, 0x03	; 3
     3e8:	ef 2e       	mov	r14, r31
     3ea:	f8 e3       	ldi	r31, 0x38	; 56
     3ec:	ff 2e       	mov	r15, r31
     3ee:	f0 2d       	mov	r31, r0
			break;
     3f0:	2f c0       	rjmp	.+94     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA2048:
			scale = SCA2048;
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f2 e1       	ldi	r31, 0x12	; 18
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f3 e1       	ldi	r31, 0x13	; 19
     3fa:	df 2e       	mov	r13, r31
     3fc:	f3 e8       	ldi	r31, 0x83	; 131
     3fe:	ef 2e       	mov	r14, r31
     400:	f8 e3       	ldi	r31, 0x38	; 56
     402:	ff 2e       	mov	r15, r31
     404:	f0 2d       	mov	r31, r0
			break;
     406:	24 c0       	rjmp	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA4096:
			scale = SCA4096;
     408:	0f 2e       	mov	r0, r31
     40a:	f4 e7       	ldi	r31, 0x74	; 116
     40c:	cf 2e       	mov	r12, r31
     40e:	f3 e1       	ldi	r31, 0x13	; 19
     410:	df 2e       	mov	r13, r31
     412:	f3 e0       	ldi	r31, 0x03	; 3
     414:	ef 2e       	mov	r14, r31
     416:	f9 e3       	ldi	r31, 0x39	; 57
     418:	ff 2e       	mov	r15, r31
     41a:	f0 2d       	mov	r31, r0
			break;
     41c:	19 c0       	rjmp	.+50     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA6144:
			scale = SCA6144;
     41e:	0f 2e       	mov	r0, r31
     420:	fe e2       	ldi	r31, 0x2E	; 46
     422:	cf 2e       	mov	r12, r31
     424:	fd e9       	ldi	r31, 0x9D	; 157
     426:	df 2e       	mov	r13, r31
     428:	f4 e4       	ldi	r31, 0x44	; 68
     42a:	ef 2e       	mov	r14, r31
     42c:	f9 e3       	ldi	r31, 0x39	; 57
     42e:	ff 2e       	mov	r15, r31
     430:	f0 2d       	mov	r31, r0
			break;
     432:	0e c0       	rjmp	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		default:
			scale = 0.0;
     434:	c1 2c       	mov	r12, r1
     436:	d1 2c       	mov	r13, r1
     438:	76 01       	movw	r14, r12
			break;
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     43c:	0f 2e       	mov	r0, r31
     43e:	f1 e7       	ldi	r31, 0x71	; 113
     440:	cf 2e       	mov	r12, r31
     442:	f3 e1       	ldi	r31, 0x13	; 19
     444:	df 2e       	mov	r13, r31
     446:	f3 e8       	ldi	r31, 0x83	; 131
     448:	ef 2e       	mov	r14, r31
     44a:	f7 e3       	ldi	r31, 0x37	; 55
     44c:	ff 2e       	mov	r15, r31
     44e:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     450:	07 2e       	mov	r0, r23
     452:	00 0c       	add	r0, r0
     454:	88 0b       	sbc	r24, r24
     456:	99 0b       	sbc	r25, r25
     458:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__floatsisf>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	c7 01       	movw	r24, r14
     462:	b6 01       	movw	r22, r12
     464:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
	return(voltage);
     468:	56 2f       	mov	r21, r22
     46a:	47 2f       	mov	r20, r23
     46c:	38 2f       	mov	r19, r24
     46e:	29 2f       	mov	r18, r25

}
     470:	65 2f       	mov	r22, r21
     472:	74 2f       	mov	r23, r20
     474:	83 2f       	mov	r24, r19
     476:	92 2f       	mov	r25, r18
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	08 95       	ret

0000048a <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	f4 e0       	ldi	r31, 0x04	; 4
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     492:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     494:	86 83       	std	Z+6, r24	; 0x06
     496:	08 95       	ret

00000498 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	c5 59       	subi	r28, 0x95	; 149
     4a6:	d1 09       	sbc	r29, r1
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     4ac:	2b e0       	ldi	r18, 0x0B	; 11
     4ae:	e0 e2       	ldi	r30, 0x20	; 32
     4b0:	fa e7       	ldi	r31, 0x7A	; 122
     4b2:	de 01       	movw	r26, r28
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	2a 95       	dec	r18
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     4be:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     4c2:	22 ff       	sbrs	r18, 2
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <echo_cmd+0x34>
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <echo_cmd+0x38>
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	3f 93       	push	r19
     4d6:	2f 93       	push	r18
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	8e 01       	movw	r16, r28
     4e2:	04 5f       	subi	r16, 0xF4	; 244
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	1f 93       	push	r17
     4e8:	0f 93       	push	r16
     4ea:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
	checksum_NMEA(strbuf);
     4ee:	c8 01       	movw	r24, r16
     4f0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     4f4:	f8 01       	movw	r30, r16
     4f6:	01 90       	ld	r0, Z+
     4f8:	00 20       	and	r0, r0
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <echo_cmd+0x5e>
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	af 01       	movw	r20, r30
     500:	40 1b       	sub	r20, r16
     502:	51 0b       	sbc	r21, r17
     504:	b8 01       	movw	r22, r16
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
send_USART(1, (uint8_t*) strbuf, strlen(strbuf));
     50c:	f8 01       	movw	r30, r16
     50e:	01 90       	ld	r0, Z+
     510:	00 20       	and	r0, r0
     512:	e9 f7       	brne	.-6      	; 0x50e <echo_cmd+0x76>
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	af 01       	movw	r20, r30
     518:	40 1b       	sub	r20, r16
     51a:	51 0b       	sbc	r21, r17
     51c:	b8 01       	movw	r22, r16
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
}
     524:	cd bf       	out	0x3d, r28	; 61
     526:	de bf       	out	0x3e, r29	; 62
     528:	cb 56       	subi	r28, 0x6B	; 107
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	de bf       	out	0x3e, r29	; 62
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     53a:	9f e9       	ldi	r25, 0x9F	; 159
     53c:	98 0f       	add	r25, r24
     53e:	9a 31       	cpi	r25, 0x1A	; 26
     540:	28 f0       	brcs	.+10     	; 0x54c <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     542:	81 54       	subi	r24, 0x41	; 65
     544:	8a 31       	cpi	r24, 0x1A	; 26
     546:	20 f4       	brcc	.+8      	; 0x550 <isaletter+0x16>
		return(1);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     550:	80 e0       	ldi	r24, 0x00	; 0

}
     552:	08 95       	ret

00000554 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     560:	e6 2e       	mov	r14, r22
     562:	f1 2c       	mov	r15, r1
     564:	84 e3       	ldi	r24, 0x34	; 52
     566:	8e 9d       	mul	r24, r14
     568:	f0 01       	movw	r30, r0
     56a:	8f 9d       	mul	r24, r15
     56c:	f0 0d       	add	r31, r0
     56e:	11 24       	eor	r1, r1
     570:	ec 5f       	subi	r30, 0xFC	; 252
     572:	f7 4d       	sbci	r31, 0xD7	; 215
     574:	8f e3       	ldi	r24, 0x3F	; 63
     576:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     578:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     57a:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     57c:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     57e:	04 c0       	rjmp	.+8      	; 0x588 <parse_cmd+0x34>
		if (*ptr == '\0') {
     580:	11 23       	and	r17, r17
     582:	09 f4       	brne	.+2      	; 0x586 <parse_cmd+0x32>
     584:	75 c0       	rjmp	.+234    	; 0x670 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     586:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     588:	18 81       	ld	r17, Y
     58a:	81 2f       	mov	r24, r17
     58c:	0e 94 9d 02 	call	0x53a	; 0x53a <isaletter>
     590:	88 23       	and	r24, r24
     592:	b1 f3       	breq	.-20     	; 0x580 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     594:	21 96       	adiw	r28, 0x01	; 1
     596:	84 e3       	ldi	r24, 0x34	; 52
     598:	8e 9d       	mul	r24, r14
     59a:	f0 01       	movw	r30, r0
     59c:	8f 9d       	mul	r24, r15
     59e:	f0 0d       	add	r31, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	ec 5f       	subi	r30, 0xFC	; 252
     5a4:	f7 4d       	sbci	r31, 0xD7	; 215
     5a6:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5aa:	11 23       	and	r17, r17
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <parse_cmd+0x5c>
     5ae:	60 c0       	rjmp	.+192    	; 0x670 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5b0:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     5b2:	18 81       	ld	r17, Y
     5b4:	81 2f       	mov	r24, r17
     5b6:	0e 94 9d 02 	call	0x53a	; 0x53a <isaletter>
     5ba:	88 23       	and	r24, r24
     5bc:	b1 f3       	breq	.-20     	; 0x5aa <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     5be:	21 96       	adiw	r28, 0x01	; 1
     5c0:	84 e3       	ldi	r24, 0x34	; 52
     5c2:	8e 9d       	mul	r24, r14
     5c4:	f0 01       	movw	r30, r0
     5c6:	8f 9d       	mul	r24, r15
     5c8:	f0 0d       	add	r31, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	ec 5f       	subi	r30, 0xFC	; 252
     5ce:	f7 4d       	sbci	r31, 0xD7	; 215
     5d0:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	2a c0       	rjmp	.+84     	; 0x62a <parse_cmd+0xd6>
		if (*ptr == '\0') {
     5d6:	98 81       	ld	r25, Y
     5d8:	91 11       	cpse	r25, r1
     5da:	0c c0       	rjmp	.+24     	; 0x5f4 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     5dc:	94 e3       	ldi	r25, 0x34	; 52
     5de:	9e 9d       	mul	r25, r14
     5e0:	f0 01       	movw	r30, r0
     5e2:	9f 9d       	mul	r25, r15
     5e4:	f0 0d       	add	r31, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	ec 5f       	subi	r30, 0xFC	; 252
     5ea:	f7 4d       	sbci	r31, 0xD7	; 215
     5ec:	e8 0f       	add	r30, r24
     5ee:	f1 1d       	adc	r31, r1
     5f0:	12 82       	std	Z+2, r1	; 0x02
			return;
     5f2:	3e c0       	rjmp	.+124    	; 0x670 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     5f4:	9b 33       	cpi	r25, 0x3B	; 59
     5f6:	61 f4       	brne	.+24     	; 0x610 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     5f8:	94 e3       	ldi	r25, 0x34	; 52
     5fa:	9e 9d       	mul	r25, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	9f 9d       	mul	r25, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	ec 5f       	subi	r30, 0xFC	; 252
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	e8 0f       	add	r30, r24
     60a:	f1 1d       	adc	r31, r1
     60c:	12 82       	std	Z+2, r1	; 0x02
			break;
     60e:	0f c0       	rjmp	.+30     	; 0x62e <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     610:	21 96       	adiw	r28, 0x01	; 1
     612:	24 e3       	ldi	r18, 0x34	; 52
     614:	2e 9d       	mul	r18, r14
     616:	f0 01       	movw	r30, r0
     618:	2f 9d       	mul	r18, r15
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	ec 5f       	subi	r30, 0xFC	; 252
     620:	f7 4d       	sbci	r31, 0xD7	; 215
     622:	e8 0f       	add	r30, r24
     624:	f1 1d       	adc	r31, r1
     626:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	89 32       	cpi	r24, 0x29	; 41
     62c:	a0 f2       	brcs	.-88     	; 0x5d6 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     62e:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	1c c0       	rjmp	.+56     	; 0x66c <parse_cmd+0x118>
		if (*ptr == '\0') {
     634:	98 81       	ld	r25, Y
     636:	91 11       	cpse	r25, r1
     638:	0c c0       	rjmp	.+24     	; 0x652 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     63a:	94 e3       	ldi	r25, 0x34	; 52
     63c:	9e 9d       	mul	r25, r14
     63e:	f0 01       	movw	r30, r0
     640:	9f 9d       	mul	r25, r15
     642:	f0 0d       	add	r31, r0
     644:	11 24       	eor	r1, r1
     646:	ec 5f       	subi	r30, 0xFC	; 252
     648:	f7 4d       	sbci	r31, 0xD7	; 215
     64a:	e8 0f       	add	r30, r24
     64c:	f1 1d       	adc	r31, r1
     64e:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     650:	0f c0       	rjmp	.+30     	; 0x670 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	24 e3       	ldi	r18, 0x34	; 52
     656:	2e 9d       	mul	r18, r14
     658:	f0 01       	movw	r30, r0
     65a:	2f 9d       	mul	r18, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	ec 5f       	subi	r30, 0xFC	; 252
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	e8 0f       	add	r30, r24
     666:	f1 1d       	adc	r31, r1
     668:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	89 30       	cpi	r24, 0x09	; 9
     66e:	10 f3       	brcs	.-60     	; 0x634 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	6d 97       	sbiw	r28, 0x1d	; 29
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     68e:	2e e3       	ldi	r18, 0x3E	; 62
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	29 83       	std	Y+1, r18	; 0x01
     694:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     696:	21 e2       	ldi	r18, 0x21	; 33
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	2b 83       	std	Y+3, r18	; 0x03
     69c:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <send_prompt+0x28>
     6a2:	3f c0       	rjmp	.+126    	; 0x722 <send_prompt+0xa6>
     6a4:	18 f0       	brcs	.+6      	; 0x6ac <send_prompt+0x30>
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	b9 f0       	breq	.+46     	; 0x6d8 <send_prompt+0x5c>
     6aa:	51 c0       	rjmp	.+162    	; 0x74e <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6ac:	8e 01       	movw	r16, r28
     6ae:	0b 5f       	subi	r16, 0xFB	; 251
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	be 01       	movw	r22, r28
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     6be:	f8 01       	movw	r30, r16
     6c0:	01 90       	ld	r0, Z+
     6c2:	00 20       	and	r0, r0
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <send_prompt+0x44>
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	af 01       	movw	r20, r30
     6ca:	40 1b       	sub	r20, r16
     6cc:	51 0b       	sbc	r21, r17
     6ce:	b8 01       	movw	r22, r16
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			break;
     6d6:	50 c0       	rjmp	.+160    	; 0x778 <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     6d8:	8e 01       	movw	r16, r28
     6da:	0b 5f       	subi	r16, 0xFB	; 251
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 a2 09 	call	0x1344	; 0x1344 <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     6e4:	f8 01       	movw	r30, r16
     6e6:	01 90       	ld	r0, Z+
     6e8:	00 20       	and	r0, r0
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <send_prompt+0x6a>
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	af 01       	movw	r20, r30
     6f0:	40 1b       	sub	r20, r16
     6f2:	51 0b       	sbc	r21, r17
     6f4:	b8 01       	movw	r22, r16
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			strcpy(prompt_str, str0);
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	c8 01       	movw	r24, r16
     704:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     708:	f8 01       	movw	r30, r16
     70a:	01 90       	ld	r0, Z+
     70c:	00 20       	and	r0, r0
     70e:	e9 f7       	brne	.-6      	; 0x70a <send_prompt+0x8e>
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	af 01       	movw	r20, r30
     714:	40 1b       	sub	r20, r16
     716:	51 0b       	sbc	r21, r17
     718:	b8 01       	movw	r22, r16
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			break;
     720:	2b c0       	rjmp	.+86     	; 0x778 <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     722:	8e 01       	movw	r16, r28
     724:	0b 5f       	subi	r16, 0xFB	; 251
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	be 01       	movw	r22, r28
     72a:	6d 5f       	subi	r22, 0xFD	; 253
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	c8 01       	movw	r24, r16
     730:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     734:	f8 01       	movw	r30, r16
     736:	01 90       	ld	r0, Z+
     738:	00 20       	and	r0, r0
     73a:	e9 f7       	brne	.-6      	; 0x736 <send_prompt+0xba>
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	af 01       	movw	r20, r30
     740:	40 1b       	sub	r20, r16
     742:	51 0b       	sbc	r21, r17
     744:	b8 01       	movw	r22, r16
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			break;
     74c:	15 c0       	rjmp	.+42     	; 0x778 <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     74e:	8e 01       	movw	r16, r28
     750:	0b 5f       	subi	r16, 0xFB	; 251
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	be 01       	movw	r22, r28
     756:	6d 5f       	subi	r22, 0xFD	; 253
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     760:	f8 01       	movw	r30, r16
     762:	01 90       	ld	r0, Z+
     764:	00 20       	and	r0, r0
     766:	e9 f7       	brne	.-6      	; 0x762 <send_prompt+0xe6>
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	af 01       	movw	r20, r30
     76c:	40 1b       	sub	r20, r16
     76e:	51 0b       	sbc	r21, r17
     770:	b8 01       	movw	r22, r16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			break;

	}

}
     778:	6d 96       	adiw	r28, 0x1d	; 29
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	c0 58       	subi	r28, 0x80	; 128
     792:	d1 09       	sbc	r29, r1
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	1c c0       	rjmp	.+56     	; 0x7d4 <commands+0x4c>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     79c:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <recv0_buf+0x81>
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	fc 01       	movw	r30, r24
     7a4:	ea 56       	subi	r30, 0x6A	; 106
     7a6:	f5 4d       	sbci	r31, 0xD5	; 213
     7a8:	30 81       	ld	r19, Z
     7aa:	e1 e0       	ldi	r30, 0x01	; 1
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ec 0f       	add	r30, r28
     7b0:	fd 1f       	adc	r31, r29
     7b2:	e2 0f       	add	r30, r18
     7b4:	f1 1d       	adc	r31, r1
     7b6:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	8f 77       	andi	r24, 0x7F	; 127
     7bc:	90 78       	andi	r25, 0x80	; 128
     7be:	99 23       	and	r25, r25
     7c0:	24 f4       	brge	.+8      	; 0x7ca <commands+0x42>
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	9f 6f       	ori	r25, 0xFF	; 255
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
     7ce:	33 23       	and	r19, r19
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <commands+0x50>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	22 23       	and	r18, r18
     7d6:	14 f7       	brge	.-60     	; 0x79c <commands+0x14>
		if (cmdline[i] == '\0') {
			break;
		}
	}

	if (rebootnack) {
     7d8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     7dc:	88 23       	and	r24, r24
     7de:	d1 f0       	breq	.+52     	; 0x814 <commands+0x8c>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	81 32       	cpi	r24, 0x21	; 33
     7e4:	99 f4       	brne	.+38     	; 0x80c <commands+0x84>
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	81 11       	cpse	r24, r1
     7ea:	10 c0       	rjmp	.+32     	; 0x80c <commands+0x84>
			init_RTC(511);		// 1-sec RTC clock ticks
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 16 12 	call	0x242c	; 0x242c <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     7fc:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
			rebootnack = 0;
     806:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     80a:	59 c0       	rjmp	.+178    	; 0x8be <commands+0x136>
		} else {
			send_prompt(EXCLAIMPROMPT);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
			return;
     812:	55 c0       	rjmp	.+170    	; 0x8be <commands+0x136>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 4c 02 	call	0x498	; 0x498 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	81 11       	cpse	r24, r1
     820:	03 c0       	rjmp	.+6      	; 0x828 <commands+0xa0>
		send_prompt(GREATERPROMPT);
     822:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
		return;
     826:	4b c0       	rjmp	.+150    	; 0x8be <commands+0x136>
	}

	parse_cmd(cmdline, cstack);
     828:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	0e 94 aa 02 	call	0x554	; 0x554 <parse_cmd>
	verb = pcmd[cstack].cverb;
     834:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     838:	24 e3       	ldi	r18, 0x34	; 52
     83a:	82 9f       	mul	r24, r18
     83c:	f0 01       	movw	r30, r0
     83e:	11 24       	eor	r1, r1
     840:	ec 5f       	subi	r30, 0xFC	; 252
     842:	f7 4d       	sbci	r31, 0xD7	; 215
     844:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     846:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     848:	9f 36       	cpi	r25, 0x6F	; 111
     84a:	81 f0       	breq	.+32     	; 0x86c <commands+0xe4>
     84c:	28 f4       	brcc	.+10     	; 0x858 <commands+0xd0>
     84e:	92 35       	cpi	r25, 0x52	; 82
     850:	d1 f0       	breq	.+52     	; 0x886 <commands+0xfe>
     852:	93 36       	cpi	r25, 0x63	; 99
     854:	31 f0       	breq	.+12     	; 0x862 <commands+0xda>
     856:	25 c0       	rjmp	.+74     	; 0x8a2 <commands+0x11a>
     858:	92 37       	cpi	r25, 0x72	; 114
     85a:	69 f0       	breq	.+26     	; 0x876 <commands+0xee>
     85c:	93 37       	cpi	r25, 0x73	; 115
     85e:	79 f0       	breq	.+30     	; 0x87e <commands+0xf6>
     860:	20 c0       	rjmp	.+64     	; 0x8a2 <commands+0x11a>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     862:	82 2f       	mov	r24, r18
     864:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <close_PNEU>
     868:	28 2f       	mov	r18, r24
			break;
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <commands+0x11c>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     86c:	82 2f       	mov	r24, r18
     86e:	0e 94 82 0c 	call	0x1904	; 0x1904 <open_PNEU>
     872:	28 2f       	mov	r18, r24
			break;
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <commands+0x11c>

		case 'r':				// Report
			prompt_flag = report(cstack);
     876:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <report>
     87a:	28 2f       	mov	r18, r24
			break;
     87c:	13 c0       	rjmp	.+38     	; 0x8a4 <commands+0x11c>

		case 's':				// Set
			prompt_flag = set(cstack);
     87e:	0e 94 89 12 	call	0x2512	; 0x2512 <set>
     882:	28 2f       	mov	r18, r24
			break;
     884:	0f c0       	rjmp	.+30     	; 0x8a4 <commands+0x11c>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88c:	8a e6       	ldi	r24, 0x6A	; 106
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	81 50       	subi	r24, 0x01	; 1
     894:	90 40       	sbci	r25, 0x00	; 0
     896:	20 40       	sbci	r18, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <commands+0x10a>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <commands+0x114>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     89c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <reboot>
			return;
     8a0:	0e c0       	rjmp	.+28     	; 0x8be <commands+0x136>

		default:
			prompt_flag = ERRORPROMPT;
     8a2:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     8a4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	6a e0       	ldi	r22, 0x0A	; 10
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	0e 94 b5 1a 	call	0x356a	; 0x356a <__divmodhi4>
     8b4:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     8b8:	82 2f       	mov	r24, r18
     8ba:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>

}
     8be:	c0 58       	subi	r28, 0x80	; 128
     8c0:	df 4f       	sbci	r29, 0xFF	; 255
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     8cc:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     8ce:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     8d0:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     8d2:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     8d4:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     8d6:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     8d8:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     8da:	1f 92       	push	r1
     8dc:	7f 93       	push	r23
     8de:	1f 92       	push	r1
     8e0:	6f 93       	push	r22
     8e2:	1f 92       	push	r1
     8e4:	5f 93       	push	r21
     8e6:	1f 92       	push	r1
     8e8:	4f 93       	push	r20
     8ea:	1f 92       	push	r1
     8ec:	3f 93       	push	r19
     8ee:	1f 92       	push	r1
     8f0:	2f 93       	push	r18
     8f2:	2b e2       	ldi	r18, 0x2B	; 43
     8f4:	3a e7       	ldi	r19, 0x7A	; 122
     8f6:	3f 93       	push	r19
     8f8:	2f 93       	push	r18
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     902:	8d b7       	in	r24, 0x3d	; 61
     904:	9e b7       	in	r25, 0x3e	; 62
     906:	40 96       	adiw	r24, 0x10	; 16
     908:	8d bf       	out	0x3d, r24	; 61
     90a:	9e bf       	out	0x3e, r25	; 62
     90c:	08 95       	ret

0000090e <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     90e:	dc 01       	movw	r26, r24
     910:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     912:	81 89       	ldd	r24, Z+17	; 0x11
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	c0 97       	sbiw	r24, 0x30	; 48
     918:	82 95       	swap	r24
     91a:	92 95       	swap	r25
     91c:	90 7f       	andi	r25, 0xF0	; 240
     91e:	98 27       	eor	r25, r24
     920:	80 7f       	andi	r24, 0xF0	; 240
     922:	98 27       	eor	r25, r24
     924:	92 89       	ldd	r25, Z+18	; 0x12
     926:	90 53       	subi	r25, 0x30	; 48
     928:	89 2b       	or	r24, r25
     92a:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     92c:	86 85       	ldd	r24, Z+14	; 0x0e
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	c0 97       	sbiw	r24, 0x30	; 48
     932:	82 95       	swap	r24
     934:	92 95       	swap	r25
     936:	90 7f       	andi	r25, 0xF0	; 240
     938:	98 27       	eor	r25, r24
     93a:	80 7f       	andi	r24, 0xF0	; 240
     93c:	98 27       	eor	r25, r24
     93e:	97 85       	ldd	r25, Z+15	; 0x0f
     940:	90 53       	subi	r25, 0x30	; 48
     942:	89 2b       	or	r24, r25
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	8c 93       	st	X, r24
     948:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     94a:	83 85       	ldd	r24, Z+11	; 0x0b
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	c0 97       	sbiw	r24, 0x30	; 48
     950:	82 95       	swap	r24
     952:	92 95       	swap	r25
     954:	90 7f       	andi	r25, 0xF0	; 240
     956:	98 27       	eor	r25, r24
     958:	80 7f       	andi	r24, 0xF0	; 240
     95a:	98 27       	eor	r25, r24
     95c:	94 85       	ldd	r25, Z+12	; 0x0c
     95e:	90 53       	subi	r25, 0x30	; 48
     960:	89 2b       	or	r24, r25
     962:	12 96       	adiw	r26, 0x02	; 2
     964:	8c 93       	st	X, r24
     966:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	13 96       	adiw	r26, 0x03	; 3
     96c:	8c 93       	st	X, r24
     96e:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     970:	80 85       	ldd	r24, Z+8	; 0x08
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	c0 97       	sbiw	r24, 0x30	; 48
     976:	82 95       	swap	r24
     978:	92 95       	swap	r25
     97a:	90 7f       	andi	r25, 0xF0	; 240
     97c:	98 27       	eor	r25, r24
     97e:	80 7f       	andi	r24, 0xF0	; 240
     980:	98 27       	eor	r25, r24
     982:	91 85       	ldd	r25, Z+9	; 0x09
     984:	90 53       	subi	r25, 0x30	; 48
     986:	89 2b       	or	r24, r25
     988:	14 96       	adiw	r26, 0x04	; 4
     98a:	8c 93       	st	X, r24
     98c:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     98e:	25 81       	ldd	r18, Z+5	; 0x05
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	20 53       	subi	r18, 0x30	; 48
     994:	31 09       	sbc	r19, r1
     996:	22 95       	swap	r18
     998:	32 95       	swap	r19
     99a:	30 7f       	andi	r19, 0xF0	; 240
     99c:	32 27       	eor	r19, r18
     99e:	20 7f       	andi	r18, 0xF0	; 240
     9a0:	32 27       	eor	r19, r18
     9a2:	86 81       	ldd	r24, Z+6	; 0x06
     9a4:	80 53       	subi	r24, 0x30	; 48
     9a6:	28 2b       	or	r18, r24
     9a8:	15 96       	adiw	r26, 0x05	; 5
     9aa:	2c 93       	st	X, r18
     9ac:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     9ae:	22 81       	ldd	r18, Z+2	; 0x02
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	20 53       	subi	r18, 0x30	; 48
     9b4:	31 09       	sbc	r19, r1
     9b6:	22 95       	swap	r18
     9b8:	32 95       	swap	r19
     9ba:	30 7f       	andi	r19, 0xF0	; 240
     9bc:	32 27       	eor	r19, r18
     9be:	20 7f       	andi	r18, 0xF0	; 240
     9c0:	32 27       	eor	r19, r18
     9c2:	83 81       	ldd	r24, Z+3	; 0x03
     9c4:	80 53       	subi	r24, 0x30	; 48
     9c6:	28 2b       	or	r18, r24
     9c8:	16 96       	adiw	r26, 0x06	; 6
     9ca:	2c 93       	st	X, r18
     9cc:	08 95       	ret

000009ce <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     9e0:	c8 2f       	mov	r28, r24
     9e2:	88 23       	and	r24, r24
     9e4:	21 f0       	breq	.+8      	; 0x9ee <read_DS3231+0x20>
		stop_TWI();
     9e6:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     9ea:	8c 2f       	mov	r24, r28
     9ec:	28 c0       	rjmp	.+80     	; 0xa3e <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     9f4:	c8 2f       	mov	r28, r24
     9f6:	88 23       	and	r24, r24
     9f8:	21 f0       	breq	.+8      	; 0xa02 <read_DS3231+0x34>
		stop_TWI();
     9fa:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     9fe:	8c 2f       	mov	r24, r28
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	88 e6       	ldi	r24, 0x68	; 104
     a06:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     a0a:	c8 2f       	mov	r28, r24
     a0c:	88 23       	and	r24, r24
     a0e:	69 f0       	breq	.+26     	; 0xa2a <read_DS3231+0x5c>
		stop_TWI();
     a10:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     a14:	8c 2f       	mov	r24, r28
     a16:	13 c0       	rjmp	.+38     	; 0xa3e <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a18:	87 01       	movw	r16, r14
     a1a:	0c 0f       	add	r16, r28
     a1c:	11 1d       	adc	r17, r1
     a1e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <read_TWI>
     a22:	f8 01       	movw	r30, r16
     a24:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a26:	cf 5f       	subi	r28, 0xFF	; 255
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <read_DS3231+0x5e>
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	c6 30       	cpi	r28, 0x06	; 6
     a2e:	a0 f3       	brcs	.-24     	; 0xa18 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a30:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
     a34:	f7 01       	movw	r30, r14
     a36:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a38:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	return(0);
     a3c:	80 e0       	ldi	r24, 0x00	; 0

}
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	27 97       	sbiw	r28, 0x07	; 7
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     a5e:	be 01       	movw	r22, r28
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	88 e6       	ldi	r24, 0x68	; 104
     a66:	0e 94 e7 04 	call	0x9ce	; 0x9ce <read_DS3231>
     a6a:	88 23       	and	r24, r24
     a6c:	49 f0       	breq	.+18     	; 0xa80 <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     a6e:	92 e1       	ldi	r25, 0x12	; 18
     a70:	eb e4       	ldi	r30, 0x4B	; 75
     a72:	fa e7       	ldi	r31, 0x7A	; 122
     a74:	d8 01       	movw	r26, r16
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	9a 95       	dec	r25
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <get_time+0x2c>
		return(retval);
     a7e:	07 c0       	rjmp	.+14     	; 0xa8e <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	c8 01       	movw	r24, r16
     a88:	0e 94 66 04 	call	0x8cc	; 0x8cc <convert_ds2iso>
	return(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0

}
     a8e:	27 96       	adiw	r28, 0x07	; 7
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     ab2:	c8 2f       	mov	r28, r24
     ab4:	88 23       	and	r24, r24
     ab6:	21 f0       	breq	.+8      	; 0xac0 <write_DS3231+0x22>
		stop_TWI();
     ab8:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     abc:	8c 2f       	mov	r24, r28
     abe:	22 c0       	rjmp	.+68     	; 0xb04 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     ac6:	c8 2f       	mov	r28, r24
     ac8:	88 23       	and	r24, r24
     aca:	b1 f0       	breq	.+44     	; 0xaf8 <write_DS3231+0x5a>
		stop_TWI();
     acc:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     ad0:	8c 2f       	mov	r24, r28
     ad2:	18 c0       	rjmp	.+48     	; 0xb04 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     ad4:	78 01       	movw	r14, r16
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	e8 1a       	sub	r14, r24
     ada:	f8 0a       	sbc	r15, r24
     adc:	f8 01       	movw	r30, r16
     ade:	80 81       	ld	r24, Z
     ae0:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     ae4:	c8 2f       	mov	r28, r24
     ae6:	88 23       	and	r24, r24
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <write_DS3231+0x54>
			stop_TWI();
     aea:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
			return(retval);
     aee:	8c 2f       	mov	r24, r28
     af0:	09 c0       	rjmp	.+18     	; 0xb04 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     af2:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     af4:	87 01       	movw	r16, r14
     af6:	01 c0       	rjmp	.+2      	; 0xafa <write_DS3231+0x5c>
     af8:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     afa:	d7 30       	cpi	r29, 0x07	; 7
     afc:	58 f3       	brcs	.-42     	; 0xad4 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     afe:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	return(0);
     b02:	80 e0       	ldi	r24, 0x00	; 0

}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	27 97       	sbiw	r28, 0x07	; 7
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b20:	bc 01       	movw	r22, r24
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 87 04 	call	0x90e	; 0x90e <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b2a:	be 01       	movw	r22, r28
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	88 e6       	ldi	r24, 0x68	; 104
     b32:	0e 94 4f 05 	call	0xa9e	; 0xa9e <write_DS3231>
		return(retval);
	}
	return(0);

}
     b36:	27 96       	adiw	r28, 0x07	; 7
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     b42:	45 e1       	ldi	r20, 0x15	; 21
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	6b e0       	ldi	r22, 0x0B	; 11
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <eeprom_read_block>
     b4e:	08 95       	ret

00000b50 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     b50:	4b e0       	ldi	r20, 0x0B	; 11
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 ca 1c 	call	0x3994	; 0x3994 <eeprom_read_block>
     b5c:	08 95       	ret

00000b5e <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	65 97       	sbiw	r28, 0x15	; 21
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     b74:	45 e1       	ldi	r20, 0x15	; 21
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	6b e0       	ldi	r22, 0x0B	; 11
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 ce 1c 	call	0x399c	; 0x399c <eeprom_update_block>

}
     b84:	65 96       	adiw	r28, 0x15	; 21
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <update_VERSION>:

void update_VERSION(void)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2b 97       	sbiw	r28, 0x0b	; 11
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     b9e:	8b e0       	ldi	r24, 0x0B	; 11
     ba0:	ed e5       	ldi	r30, 0x5D	; 93
     ba2:	fa e7       	ldi	r31, 0x7A	; 122
     ba4:	de 01       	movw	r26, r28
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	01 90       	ld	r0, Z+
     baa:	0d 92       	st	X+, r0
     bac:	8a 95       	dec	r24
     bae:	e1 f7       	brne	.-8      	; 0xba8 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     bb0:	4b e0       	ldi	r20, 0x0B	; 11
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 ce 1c 	call	0x399c	; 0x399c <eeprom_update_block>

}
     bc0:	2b 96       	adiw	r28, 0x0b	; 11
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     bcc:	0e 94 af 05 	call	0xb5e	; 0xb5e <update_BOOTTIME>
	update_VERSION();
     bd0:	0e 94 c8 05 	call	0xb90	; 0xb90 <update_VERSION>
     bd4:	08 95       	ret

00000bd6 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	c8 2f       	mov	r28, r24
     be4:	e6 2e       	mov	r14, r22
     be6:	f7 2e       	mov	r15, r23
     be8:	8a 01       	movw	r16, r20
     bea:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     bf2:	81 11       	cpse	r24, r1
     bf4:	2b c0       	rjmp	.+86     	; 0xc4c <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     bf6:	8f 2d       	mov	r24, r15
     bf8:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     bfc:	81 11       	cpse	r24, r1
     bfe:	26 c0       	rjmp	.+76     	; 0xc4c <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c00:	8e 2d       	mov	r24, r14
     c02:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     c06:	81 11       	cpse	r24, r1
     c08:	21 c0       	rjmp	.+66     	; 0xc4c <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	8c 2f       	mov	r24, r28
     c0e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     c12:	81 11       	cpse	r24, r1
     c14:	1b c0       	rjmp	.+54     	; 0xc4c <read_FRAM+0x76>
     c16:	c0 e0       	ldi	r28, 0x00	; 0
     c18:	08 c0       	rjmp	.+16     	; 0xc2a <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c1a:	78 01       	movw	r14, r16
     c1c:	ec 0e       	add	r14, r28
     c1e:	f1 1c       	adc	r15, r1
     c20:	0e 94 dd 12 	call	0x25ba	; 0x25ba <read_TWI>
     c24:	f7 01       	movw	r30, r14
     c26:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c28:	cf 5f       	subi	r28, 0xFF	; 255
     c2a:	2c 2f       	mov	r18, r28
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	8d 2f       	mov	r24, r29
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	28 17       	cp	r18, r24
     c36:	39 07       	cpc	r19, r25
     c38:	84 f3       	brlt	.-32     	; 0xc1a <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c3a:	ec 01       	movw	r28, r24
     c3c:	c0 0f       	add	r28, r16
     c3e:	d1 1f       	adc	r29, r17
     c40:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
     c44:	88 83       	st	Y, r24

	stop_TWI();
     c46:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	return(0);
     c4a:	80 e0       	ldi	r24, 0x00	; 0

}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	08 95       	ret

00000c5a <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	f6 2e       	mov	r15, r22
     c68:	17 2f       	mov	r17, r23
     c6a:	ea 01       	movw	r28, r20
     c6c:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     c74:	81 11       	cpse	r24, r1
     c76:	1c c0       	rjmp	.+56     	; 0xcb0 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     c78:	81 2f       	mov	r24, r17
     c7a:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     c7e:	81 11       	cpse	r24, r1
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     c82:	8f 2d       	mov	r24, r15
     c84:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     c88:	81 11       	cpse	r24, r1
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <write_FRAM+0x56>
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     c90:	7e 01       	movw	r14, r28
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	e8 1a       	sub	r14, r24
     c96:	f8 0a       	sbc	r15, r24
     c98:	88 81       	ld	r24, Y
     c9a:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     c9e:	81 11       	cpse	r24, r1
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     ca2:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     ca4:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     ca6:	10 17       	cp	r17, r16
     ca8:	98 f3       	brcs	.-26     	; 0xc90 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     caa:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	return(0);
     cae:	80 e0       	ldi	r24, 0x00	; 0

}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	59 f0       	breq	.+22     	; 0xce8 <get_humidity+0x2a>
     cd2:	18 f0       	brcs	.+6      	; 0xcda <get_humidity+0x1c>
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	79 f0       	breq	.+30     	; 0xcf6 <get_humidity+0x38>
     cd8:	15 c0       	rjmp	.+42     	; 0xd04 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
     ce0:	4b 01       	movw	r8, r22
     ce2:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     ce4:	40 e4       	ldi	r20, 0x40	; 64
			break;
     ce6:	17 c0       	rjmp	.+46     	; 0xd16 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
     cee:	4b 01       	movw	r8, r22
     cf0:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     cf2:	40 e5       	ldi	r20, 0x50	; 80
			break;
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
     cfc:	4b 01       	movw	r8, r22
     cfe:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d00:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d02:	09 c0       	rjmp	.+18     	; 0xd16 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d04:	0f 2e       	mov	r0, r31
     d06:	81 2c       	mov	r8, r1
     d08:	91 2c       	mov	r9, r1
     d0a:	f0 ea       	ldi	r31, 0xA0	; 160
     d0c:	af 2e       	mov	r10, r31
     d0e:	f1 e4       	ldi	r31, 0x41	; 65
     d10:	bf 2e       	mov	r11, r31
     d12:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d14:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d16:	20 e8       	ldi	r18, 0x80	; 128
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	88 e4       	ldi	r24, 0x48	; 72
     d1c:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 ea       	ldi	r20, 0xA0	; 160
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divsf3>
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	37 ed       	ldi	r19, 0xD7	; 215
     d30:	43 e2       	ldi	r20, 0x23	; 35
     d32:	5e e3       	ldi	r21, 0x3E	; 62
     d34:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__subsf3>
     d38:	2f e5       	ldi	r18, 0x5F	; 95
     d3a:	39 e2       	ldi	r19, 0x29	; 41
     d3c:	4b ec       	ldi	r20, 0xCB	; 203
     d3e:	5b e3       	ldi	r21, 0x3B	; 59
     d40:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divsf3>
     d44:	6b 01       	movw	r12, r22
     d46:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     d48:	29 ec       	ldi	r18, 0xC9	; 201
     d4a:	3e e8       	ldi	r19, 0x8E	; 142
     d4c:	4d e0       	ldi	r20, 0x0D	; 13
     d4e:	5b e3       	ldi	r21, 0x3B	; 59
     d50:	c5 01       	movw	r24, r10
     d52:	b4 01       	movw	r22, r8
     d54:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
     d5c:	62 e2       	ldi	r22, 0x22	; 34
     d5e:	7d ef       	ldi	r23, 0xFD	; 253
     d60:	86 e8       	ldi	r24, 0x86	; 134
     d62:	9f e3       	ldi	r25, 0x3F	; 63
     d64:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__subsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c7 01       	movw	r24, r14
     d6e:	b6 01       	movw	r22, r12
     d70:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divsf3>
	return(humidity);

}
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	08 95       	ret

00000d86 <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	2b 97       	sbiw	r28, 0x0b	; 11
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     d94:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
     d98:	8b e0       	ldi	r24, 0x0B	; 11
     d9a:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_SPECID();
     d9e:	0e 94 ba 12 	call	0x2574	; 0x2574 <init_SPECID>
	init_LED();
     da2:	0e 94 7f 07 	call	0xefe	; 0xefe <init_LED>
	init_BEEPER();
     da6:	0e 94 45 02 	call	0x48a	; 0x48a <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 16 12 	call	0x242c	; 0x242c <init_RTC>
	init_USART();
     db2:	0e 94 37 13 	call	0x266e	; 0x266e <init_USART>
	init_TWI();
     db6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <init_TWI>
	init_MMA8451();
     dba:	0e 94 27 09 	call	0x124e	; 0x124e <init_MMA8451>
	init_PNEU();
     dbe:	0e 94 35 0b 	call	0x166a	; 0x166a <init_PNEU>
	init_OLED(0);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 ed 09 	call	0x13da	; 0x13da <init_OLED>
	init_OLED(1);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 ed 09 	call	0x13da	; 0x13da <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     dce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     dd2:	80 ee       	ldi	r24, 0xE0	; 224
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     dda:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
	get_VERSION(versionstr);
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 a8 05 	call	0xb50	; 0xb50 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	68 e6       	ldi	r22, 0x68	; 104
     dea:	7a e7       	ldi	r23, 0x7A	; 122
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     df2:	42 e0       	ldi	r20, 0x02	; 2
     df4:	be 01       	movw	r22, r28
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>

}
     e00:	2b 96       	adiw	r28, 0x0b	; 11
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e2e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e32:	86 ff       	sbrs	r24, 6
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e36:	80 e4       	ldi	r24, 0x40	; 64
     e38:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e3c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <reboot>
	}

}
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	21 f0       	breq	.+8      	; 0xe76 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	79 f5       	brne	.+94     	; 0xed0 <read_ionpump+0x6e>
		pins = AIN23;
     e72:	40 e3       	ldi	r20, 0x30	; 48
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     e76:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     e78:	20 e8       	ldi	r18, 0x80	; 128
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	89 e4       	ldi	r24, 0x49	; 73
     e7e:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
     e82:	6b 01       	movw	r12, r22
     e84:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     e86:	2d ec       	ldi	r18, 0xCD	; 205
     e88:	3c ec       	ldi	r19, 0xCC	; 204
     e8a:	4c ec       	ldi	r20, 0xCC	; 204
     e8c:	5e e3       	ldi	r21, 0x3E	; 62
     e8e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__cmpsf2>
     e92:	88 23       	and	r24, r24
     e94:	14 f1       	brlt	.+68     	; 0xeda <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e4       	ldi	r21, 0x40	; 64
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__gesf2>
     ea6:	18 16       	cp	r1, r24
     ea8:	ec f0       	brlt	.+58     	; 0xee4 <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     eaa:	29 e7       	ldi	r18, 0x79	; 121
     eac:	39 ee       	ldi	r19, 0xE9	; 233
     eae:	42 e0       	ldi	r20, 0x02	; 2
     eb0:	50 e4       	ldi	r21, 0x40	; 64
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
     eba:	2e e6       	ldi	r18, 0x6E	; 110
     ebc:	33 ea       	ldi	r19, 0xA3	; 163
     ebe:	4b ed       	ldi	r20, 0xDB	; 219
     ec0:	50 e4       	ldi	r21, 0x40	; 64
     ec2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__subsf3>

	return(vacuum);
     ec6:	56 2f       	mov	r21, r22
     ec8:	47 2f       	mov	r20, r23
     eca:	38 2f       	mov	r19, r24
     ecc:	29 2f       	mov	r18, r25
     ece:	0e c0       	rjmp	.+28     	; 0xeec <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     ed0:	5a e9       	ldi	r21, 0x9A	; 154
     ed2:	49 ef       	ldi	r20, 0xF9	; 249
     ed4:	39 e7       	ldi	r19, 0x79	; 121
     ed6:	24 ec       	ldi	r18, 0xC4	; 196
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     eda:	5a e9       	ldi	r21, 0x9A	; 154
     edc:	49 ef       	ldi	r20, 0xF9	; 249
     ede:	39 e7       	ldi	r19, 0x79	; 121
     ee0:	24 ec       	ldi	r18, 0xC4	; 196
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     ee4:	5a e9       	ldi	r21, 0x9A	; 154
     ee6:	49 ef       	ldi	r20, 0xF9	; 249
     ee8:	39 e7       	ldi	r19, 0x79	; 121
     eea:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     eec:	65 2f       	mov	r22, r21
     eee:	74 2f       	mov	r23, r20
     ef0:	83 2f       	mov	r24, r19
     ef2:	92 2f       	mov	r25, r18
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	08 95       	ret

00000efe <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     efe:	e0 ea       	ldi	r30, 0xA0	; 160
     f00:	f4 e0       	ldi	r31, 0x04	; 4
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f06:	81 83       	std	Z+1, r24	; 0x01
     f08:	08 95       	ret

00000f0a <main>:
int main(void)
{

uint8_t old_recv0bufhead;	// debugging

	initialize();
     f0a:	0e 94 c3 06 	call	0xd86	; 0xd86 <initialize>
	sei();
     f0e:	78 94       	sei

old_recv0bufhead = 0;
     f10:	c0 e0       	ldi	r28, 0x00	; 0

	for (;;) {
		if (old_recv0bufhead != recv0_buf.head) {
     f12:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv0_buf+0x80>
     f16:	c8 17       	cp	r28, r24
     f18:	59 f0       	breq	.+22     	; 0xf30 <main+0x26>
			old_recv0bufhead = recv0_buf.head;
			on_BEEPER;
     f1a:	e0 e2       	ldi	r30, 0x20	; 32
     f1c:	f4 e0       	ldi	r31, 0x04	; 4
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	95 83       	std	Z+5, r25	; 0x05
     f22:	a2 ec       	ldi	r26, 0xC2	; 194
     f24:	b2 ea       	ldi	r27, 0xA2	; 162
     f26:	11 97       	sbiw	r26, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <main+0x1c>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <main+0x22>
			_delay_ms(50);
			off_BEEPER;
     f2c:	96 83       	std	Z+6, r25	; 0x06

old_recv0bufhead = 0;

	for (;;) {
		if (old_recv0bufhead != recv0_buf.head) {
			old_recv0bufhead = recv0_buf.head;
     f2e:	c8 2f       	mov	r28, r24
			on_BEEPER;
			_delay_ms(50);
			off_BEEPER;
		}
		if (recv0_buf.done) {
     f30:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv0_buf+0x84>
     f34:	88 23       	and	r24, r24
     f36:	69 f3       	breq	.-38     	; 0xf12 <main+0x8>
			recv0_buf.done = NO;
     f38:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv0_buf+0x84>
			commands();
     f3c:	0e 94 c4 03 	call	0x788	; 0x788 <commands>
     f40:	e8 cf       	rjmp	.-48     	; 0xf12 <main+0x8>

00000f42 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c8 2f       	mov	r28, r24
     f48:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	write_TWI(reg);
     f50:	8d 2f       	mov	r24, r29
     f52:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
	start_TWI(addr, TWIREAD);
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	8c 2f       	mov	r24, r28
     f5a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	val = readlast_TWI();
     f5e:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
     f62:	c8 2f       	mov	r28, r24
	stop_TWI();
     f64:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
	return(val);

}
     f68:	8c 2f       	mov	r24, r28
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	d6 2f       	mov	r29, r22
     f78:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
     f80:	c8 2f       	mov	r28, r24
     f82:	88 23       	and	r24, r24
     f84:	21 f0       	breq	.+8      	; 0xf8e <write_MCP23008+0x1e>
		stop_TWI();
     f86:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     f8a:	8c 2f       	mov	r24, r28
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     f8e:	8d 2f       	mov	r24, r29
     f90:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     f94:	c8 2f       	mov	r28, r24
     f96:	88 23       	and	r24, r24
     f98:	21 f0       	breq	.+8      	; 0xfa2 <write_MCP23008+0x32>
		stop_TWI();
     f9a:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     f9e:	8c 2f       	mov	r24, r28
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     fa2:	81 2f       	mov	r24, r17
     fa4:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
     fa8:	c8 2f       	mov	r28, r24
     faa:	88 23       	and	r24, r24
     fac:	21 f0       	breq	.+8      	; 0xfb6 <write_MCP23008+0x46>
		stop_TWI();
     fae:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
     fb2:	8c 2f       	mov	r24, r28
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <write_MCP23008+0x4c>
	}
	stop_TWI();
     fb6:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
	return(0);
     fba:	80 e0       	ldi	r24, 0x00	; 0
	
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	08 95       	ret

00000fc4 <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	88 e1       	ldi	r24, 0x18	; 24
     fd6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	write_TWI(TEMPREGISTER);
     fda:	85 e0       	ldi	r24, 0x05	; 5
     fdc:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	88 e1       	ldi	r24, 0x18	; 24
     fe4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	highbyte = read_TWI();
     fe8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <read_TWI>
     fec:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     fee:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
     ff2:	d8 2f       	mov	r29, r24
	stop_TWI();
     ff4:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
     ff8:	1c 2f       	mov	r17, r28
     ffa:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
     ffc:	6c 2f       	mov	r22, r28
     ffe:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
    101a:	6d 2f       	mov	r22, r29
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__floatunsisf>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5d e3       	ldi	r21, 0x3D	; 61
    102e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
	if (sign) {
    103e:	11 23       	and	r17, r17
    1040:	41 f0       	breq	.+16     	; 0x1052 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	93 e4       	ldi	r25, 0x43	; 67
    104e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__subsf3>
	}
	return(temperature);
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	08 95       	ret

00001062 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	18 2f       	mov	r17, r24
    1070:	f6 2e       	mov	r15, r22
    1072:	ea 01       	movw	r28, r20
    1074:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
    107c:	81 11       	cpse	r24, r1
    107e:	1e c0       	rjmp	.+60     	; 0x10bc <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    1080:	8f 2d       	mov	r24, r15
    1082:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
    1086:	81 11       	cpse	r24, r1
    1088:	19 c0       	rjmp	.+50     	; 0x10bc <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	81 2f       	mov	r24, r17
    108e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
    1092:	81 11       	cpse	r24, r1
    1094:	13 c0       	rjmp	.+38     	; 0x10bc <read_MMA8451+0x5a>
    1096:	11 e0       	ldi	r17, 0x01	; 1
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    109a:	7e 01       	movw	r14, r28
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	e8 1a       	sub	r14, r24
    10a0:	f8 0a       	sbc	r15, r24
    10a2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <read_TWI>
    10a6:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10a8:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10aa:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10ac:	10 17       	cp	r17, r16
    10ae:	a8 f3       	brcs	.-22     	; 0x109a <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10b0:	0e 94 ed 12 	call	0x25da	; 0x25da <readlast_TWI>
    10b4:	88 83       	st	Y, r24
	stop_TWI();
    10b6:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
	return(0);
    10ba:	80 e0       	ldi	r24, 0x00	; 0

}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	08 95       	ret

000010ca <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	26 97       	sbiw	r28, 0x06	; 6
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	6c 01       	movw	r12, r24
    10e6:	7b 01       	movw	r14, r22
    10e8:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    10ea:	8a e9       	ldi	r24, 0x9A	; 154
    10ec:	9f e3       	ldi	r25, 0x3F	; 63
    10ee:	ac e1       	ldi	r26, 0x1C	; 28
    10f0:	b6 ec       	ldi	r27, 0xC6	; 198
    10f2:	fa 01       	movw	r30, r20
    10f4:	80 83       	st	Z, r24
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	a2 83       	std	Z+2, r26	; 0x02
    10fa:	b3 83       	std	Z+3, r27	; 0x03
    10fc:	fb 01       	movw	r30, r22
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	a2 83       	std	Z+2, r26	; 0x02
    1104:	b3 83       	std	Z+3, r27	; 0x03
    1106:	f6 01       	movw	r30, r12
    1108:	80 83       	st	Z, r24
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	a2 83       	std	Z+2, r26	; 0x02
    110e:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1110:	26 e0       	ldi	r18, 0x06	; 6
    1112:	ae 01       	movw	r20, r28
    1114:	4f 5f       	subi	r20, 0xFF	; 255
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	8d e1       	ldi	r24, 0x1D	; 29
    111c:	0e 94 31 08 	call	0x1062	; 0x1062 <read_MMA8451>

	ix = datain[0];
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1124:	98 2f       	mov	r25, r24
    1126:	88 27       	eor	r24, r24
	ix |= datain[1];
    1128:	2a 81       	ldd	r18, Y+2	; 0x02
    112a:	82 2b       	or	r24, r18
	ix /= 4;
    112c:	bc 01       	movw	r22, r24
    112e:	77 23       	and	r23, r23
    1130:	14 f4       	brge	.+4      	; 0x1136 <get_orientation+0x6c>
    1132:	6d 5f       	subi	r22, 0xFD	; 253
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	75 95       	asr	r23
    1138:	67 95       	ror	r22
    113a:	75 95       	asr	r23
    113c:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    113e:	07 2e       	mov	r0, r23
    1140:	00 0c       	add	r0, r0
    1142:	88 0b       	sbc	r24, r24
    1144:	99 0b       	sbc	r25, r25
    1146:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__floatsisf>
    114a:	26 e6       	ldi	r18, 0x66	; 102
    114c:	36 e2       	ldi	r19, 0x26	; 38
    114e:	45 e7       	ldi	r20, 0x75	; 117
    1150:	5e e3       	ldi	r21, 0x3E	; 62
    1152:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    1156:	f6 01       	movw	r30, r12
    1158:	60 83       	st	Z, r22
    115a:	71 83       	std	Z+1, r23	; 0x01
    115c:	82 83       	std	Z+2, r24	; 0x02
    115e:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    1164:	98 2f       	mov	r25, r24
    1166:	88 27       	eor	r24, r24
	iy |= datain[3];
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	82 2b       	or	r24, r18
	iy /= 4;
    116c:	bc 01       	movw	r22, r24
    116e:	77 23       	and	r23, r23
    1170:	14 f4       	brge	.+4      	; 0x1176 <get_orientation+0xac>
    1172:	6d 5f       	subi	r22, 0xFD	; 253
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	75 95       	asr	r23
    1178:	67 95       	ror	r22
    117a:	75 95       	asr	r23
    117c:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    117e:	07 2e       	mov	r0, r23
    1180:	00 0c       	add	r0, r0
    1182:	88 0b       	sbc	r24, r24
    1184:	99 0b       	sbc	r25, r25
    1186:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__floatsisf>
    118a:	26 e6       	ldi	r18, 0x66	; 102
    118c:	36 e2       	ldi	r19, 0x26	; 38
    118e:	45 e7       	ldi	r20, 0x75	; 117
    1190:	5e e3       	ldi	r21, 0x3E	; 62
    1192:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    1196:	f7 01       	movw	r30, r14
    1198:	60 83       	st	Z, r22
    119a:	71 83       	std	Z+1, r23	; 0x01
    119c:	82 83       	std	Z+2, r24	; 0x02
    119e:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11a4:	98 2f       	mov	r25, r24
    11a6:	88 27       	eor	r24, r24
	iz |= datain[5];
    11a8:	2e 81       	ldd	r18, Y+6	; 0x06
    11aa:	82 2b       	or	r24, r18
	iz /= 4;
    11ac:	bc 01       	movw	r22, r24
    11ae:	77 23       	and	r23, r23
    11b0:	14 f4       	brge	.+4      	; 0x11b6 <get_orientation+0xec>
    11b2:	6d 5f       	subi	r22, 0xFD	; 253
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	75 95       	asr	r23
    11b8:	67 95       	ror	r22
    11ba:	75 95       	asr	r23
    11bc:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11be:	07 2e       	mov	r0, r23
    11c0:	00 0c       	add	r0, r0
    11c2:	88 0b       	sbc	r24, r24
    11c4:	99 0b       	sbc	r25, r25
    11c6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__floatsisf>
    11ca:	26 e6       	ldi	r18, 0x66	; 102
    11cc:	36 e2       	ldi	r19, 0x26	; 38
    11ce:	45 e7       	ldi	r20, 0x75	; 117
    11d0:	5e e3       	ldi	r21, 0x3E	; 62
    11d2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    11d6:	f8 01       	movw	r30, r16
    11d8:	60 83       	st	Z, r22
    11da:	71 83       	std	Z+1, r23	; 0x01
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	26 96       	adiw	r28, 0x06	; 6
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	08 95       	ret

000011fa <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	d6 2f       	mov	r29, r22
    1202:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
    120a:	c8 2f       	mov	r28, r24
    120c:	88 23       	and	r24, r24
    120e:	21 f0       	breq	.+8      	; 0x1218 <write_MMA8451+0x1e>
		stop_TWI();
    1210:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
    1214:	8c 2f       	mov	r24, r28
    1216:	17 c0       	rjmp	.+46     	; 0x1246 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1218:	8d 2f       	mov	r24, r29
    121a:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
    121e:	c8 2f       	mov	r28, r24
    1220:	88 23       	and	r24, r24
    1222:	21 f0       	breq	.+8      	; 0x122c <write_MMA8451+0x32>
		stop_TWI();
    1224:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
    1228:	8c 2f       	mov	r24, r28
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    122c:	81 2f       	mov	r24, r17
    122e:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
    1232:	c8 2f       	mov	r28, r24
    1234:	88 23       	and	r24, r24
    1236:	21 f0       	breq	.+8      	; 0x1240 <write_MMA8451+0x46>
		stop_TWI();
    1238:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
		return(retval);
    123c:	8c 2f       	mov	r24, r28
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1240:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>
	return(0);
    1244:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	08 95       	ret

0000124e <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1258:	40 e4       	ldi	r20, 0x40	; 64
    125a:	6b e2       	ldi	r22, 0x2B	; 43
    125c:	8d e1       	ldi	r24, 0x1D	; 29
    125e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	ae 01       	movw	r20, r28
    1266:	4f 5f       	subi	r20, 0xFF	; 255
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	6b e2       	ldi	r22, 0x2B	; 43
    126c:	8d e1       	ldi	r24, 0x1D	; 29
    126e:	0e 94 31 08 	call	0x1062	; 0x1062 <read_MMA8451>
	while (retval & 0x40) {
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	6b e2       	ldi	r22, 0x2B	; 43
    127e:	8d e1       	ldi	r24, 0x1D	; 29
    1280:	0e 94 31 08 	call	0x1062	; 0x1062 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	86 fd       	sbrc	r24, 6
    1288:	f5 cf       	rjmp	.-22     	; 0x1274 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    128a:	40 ec       	ldi	r20, 0xC0	; 192
    128c:	6f e0       	ldi	r22, 0x0F	; 15
    128e:	8d e1       	ldi	r24, 0x1D	; 29
    1290:	0e 94 fd 08 	call	0x11fa	; 0x11fa <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1294:	42 e0       	ldi	r20, 0x02	; 2
    1296:	6b e2       	ldi	r22, 0x2B	; 43
    1298:	8d e1       	ldi	r24, 0x1D	; 29
    129a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    129e:	4d e3       	ldi	r20, 0x3D	; 61
    12a0:	6a e2       	ldi	r22, 0x2A	; 42
    12a2:	8d e1       	ldi	r24, 0x1D	; 29
    12a4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <write_MMA8451>

	return(retval);

}
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	2e 97       	sbiw	r28, 0x0e	; 14
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	e9 e7       	ldi	r30, 0x79	; 121
    12ce:	fa e7       	ldi	r31, 0x7A	; 122
    12d0:	de 01       	movw	r26, r28
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	01 90       	ld	r0, Z+
    12d6:	0d 92       	st	X+, r0
    12d8:	8a 95       	dec	r24
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    12dc:	f8 01       	movw	r30, r16
    12de:	01 90       	ld	r0, Z+
    12e0:	00 20       	and	r0, r0
    12e2:	e9 f7       	brne	.-6      	; 0x12de <checksum_NMEA+0x2c>
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	3e 2f       	mov	r19, r30
    12e8:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    12ea:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <checksum_NMEA+0x4a>
		checksum ^= str[i];
    12f0:	f8 01       	movw	r30, r16
    12f2:	e8 0f       	add	r30, r24
    12f4:	f1 1d       	adc	r31, r1
    12f6:	20 81       	ld	r18, Z
    12f8:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	83 17       	cp	r24, r19
    12fe:	c0 f3       	brcs	.-16     	; 0x12f0 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1300:	1f 92       	push	r1
    1302:	9f 93       	push	r25
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	9f 93       	push	r25
    130a:	8f 93       	push	r24
    130c:	7e 01       	movw	r14, r28
    130e:	89 e0       	ldi	r24, 0x09	; 9
    1310:	e8 0e       	add	r14, r24
    1312:	f1 1c       	adc	r15, r1
    1314:	ff 92       	push	r15
    1316:	ef 92       	push	r14
    1318:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
	strcat(str, chksum);
    131c:	b7 01       	movw	r22, r14
    131e:	c8 01       	movw	r24, r16
    1320:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <strcat>

}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	2e 96       	adiw	r28, 0x0e	; 14
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	28 97       	sbiw	r28, 0x08	; 8
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	08 2f       	mov	r16, r24
    1358:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    135a:	88 e0       	ldi	r24, 0x08	; 8
    135c:	e1 e8       	ldi	r30, 0x81	; 129
    135e:	fa e7       	ldi	r31, 0x7A	; 122
    1360:	de 01       	movw	r26, r28
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	01 90       	ld	r0, Z+
    1366:	0d 92       	st	X+, r0
    1368:	8a 95       	dec	r24
    136a:	e1 f7       	brne	.-8      	; 0x1364 <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    136c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1370:	82 ff       	sbrs	r24, 2
    1372:	03 c0       	rjmp	.+6      	; 0x137a <format_ERR+0x36>
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <format_ERR+0x3a>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9f 93       	push	r25
    1380:	8f 93       	push	r24
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	9f 93       	push	r25
    1388:	8f 93       	push	r24
    138a:	1f 93       	push	r17
    138c:	0f 93       	push	r16
    138e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
	checksum_NMEA(str);
    1392:	80 2f       	mov	r24, r16
    1394:	91 2f       	mov	r25, r17
    1396:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>

}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	28 96       	adiw	r28, 0x08	; 8
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	d6 2f       	mov	r29, r22
    13bc:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <start_TWI>
	write_TWI(type);
    13c4:	8d 2f       	mov	r24, r29
    13c6:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
	write_TWI(byteToSend);
    13ca:	8c 2f       	mov	r24, r28
    13cc:	0e 94 22 13 	call	0x2644	; 0x2644 <write_TWI>
	stop_TWI();
    13d0:	0e 94 1e 13 	call	0x263c	; 0x263c <stop_TWI>

}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    13da:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    13dc:	e0 e6       	ldi	r30, 0x60	; 96
    13de:	f4 e0       	ldi	r31, 0x04	; 4
    13e0:	90 e4       	ldi	r25, 0x40	; 64
    13e2:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a1 e4       	ldi	r26, 0x41	; 65
    13e8:	b3 e0       	ldi	r27, 0x03	; 3
    13ea:	11 97       	sbiw	r26, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <init_OLED+0x10>
    13ee:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    13f0:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    13f2:	81 11       	cpse	r24, r1
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    13f6:	cc e3       	ldi	r28, 0x3C	; 60
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    13fa:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    13fc:	4a e2       	ldi	r20, 0x2A	; 42
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	8c 2f       	mov	r24, r28
    1402:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1406:	41 e7       	ldi	r20, 0x71	; 113
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	8c 2f       	mov	r24, r28
    140c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1410:	4c e5       	ldi	r20, 0x5C	; 92
    1412:	60 e4       	ldi	r22, 0x40	; 64
    1414:	8c 2f       	mov	r24, r28
    1416:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    141a:	48 e2       	ldi	r20, 0x28	; 40
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	8c 2f       	mov	r24, r28
    1420:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1424:	48 e0       	ldi	r20, 0x08	; 8
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	8c 2f       	mov	r24, r28
    142a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    142e:	4a e2       	ldi	r20, 0x2A	; 42
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	8c 2f       	mov	r24, r28
    1434:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1438:	49 e7       	ldi	r20, 0x79	; 121
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	8c 2f       	mov	r24, r28
    143e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1442:	45 ed       	ldi	r20, 0xD5	; 213
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	8c 2f       	mov	r24, r28
    1448:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    144c:	40 e7       	ldi	r20, 0x70	; 112
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1456:	48 e7       	ldi	r20, 0x78	; 120
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	8c 2f       	mov	r24, r28
    145c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1460:	48 e0       	ldi	r20, 0x08	; 8
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	8c 2f       	mov	r24, r28
    1466:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    146a:	46 e0       	ldi	r20, 0x06	; 6
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	8c 2f       	mov	r24, r28
    1470:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1474:	42 e7       	ldi	r20, 0x72	; 114
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	8c 2f       	mov	r24, r28
    147a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	60 e4       	ldi	r22, 0x40	; 64
    1482:	8c 2f       	mov	r24, r28
    1484:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1488:	4a e2       	ldi	r20, 0x2A	; 42
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	8c 2f       	mov	r24, r28
    148e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1492:	49 e7       	ldi	r20, 0x79	; 121
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	8c 2f       	mov	r24, r28
    1498:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    149c:	4a ed       	ldi	r20, 0xDA	; 218
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	8c 2f       	mov	r24, r28
    14a2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	8c 2f       	mov	r24, r28
    14ac:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14b0:	4c ed       	ldi	r20, 0xDC	; 220
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	8c 2f       	mov	r24, r28
    14c0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    14c4:	41 e8       	ldi	r20, 0x81	; 129
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	8c 2f       	mov	r24, r28
    14d4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    14d8:	49 ed       	ldi	r20, 0xD9	; 217
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    14e2:	41 ef       	ldi	r20, 0xF1	; 241
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	8c 2f       	mov	r24, r28
    14e8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    14ec:	4b ed       	ldi	r20, 0xDB	; 219
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	8c 2f       	mov	r24, r28
    14f2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    14f6:	40 e4       	ldi	r20, 0x40	; 64
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1500:	48 e7       	ldi	r20, 0x78	; 120
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8c 2f       	mov	r24, r28
    1506:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    150a:	48 e2       	ldi	r20, 0x28	; 40
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1528:	4c e0       	ldi	r20, 0x0C	; 12
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8c 2f       	mov	r24, r28
    152e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
    1532:	ba e6       	ldi	r27, 0x6A	; 106
    1534:	24 e0       	ldi	r18, 0x04	; 4
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	b1 50       	subi	r27, 0x01	; 1
    153a:	20 40       	sbci	r18, 0x00	; 0
    153c:	80 40       	sbci	r24, 0x00	; 0
    153e:	e1 f7       	brne	.-8      	; 0x1538 <init_OLED+0x15e>
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    1542:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    1546:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
	timeoutOLED = 5;
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
    1552:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>

}
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	e2 97       	sbiw	r28, 0x32	; 50
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1572:	91 e1       	ldi	r25, 0x11	; 17
    1574:	e9 e8       	ldi	r30, 0x89	; 137
    1576:	fa e7       	ldi	r31, 0x7A	; 122
    1578:	de 01       	movw	r26, r28
    157a:	92 96       	adiw	r26, 0x22	; 34
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	9a 95       	dec	r25
    1582:	e1 f7       	brne	.-8      	; 0x157c <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1584:	81 11       	cpse	r24, r1
    1586:	02 c0       	rjmp	.+4      	; 0x158c <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1588:	0c e3       	ldi	r16, 0x3C	; 60
    158a:	01 c0       	rjmp	.+2      	; 0x158e <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    158c:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	7c 01       	movw	r14, r24
    1594:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <strcpy>
	if (strlen(strbuf) > 16) {
    1598:	f7 01       	movw	r30, r14
    159a:	01 90       	ld	r0, Z+
    159c:	00 20       	and	r0, r0
    159e:	e9 f7       	brne	.-6      	; 0x159a <writestr_OLED+0x40>
    15a0:	31 97       	sbiw	r30, 0x01	; 1
    15a2:	ee 19       	sub	r30, r14
    15a4:	ff 09       	sbc	r31, r15
    15a6:	71 97       	sbiw	r30, 0x11	; 17
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <writestr_OLED+0x52>
		strbuf[16] = '\0';
    15aa:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    15ac:	be 01       	movw	r22, r28
    15ae:	6e 5d       	subi	r22, 0xDE	; 222
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <strcat>

	if (lineno == 1) {
    15ba:	11 30       	cpi	r17, 0x01	; 1
    15bc:	39 f4       	brne	.+14     	; 0x15cc <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	80 2f       	mov	r24, r16
    15c4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	12 c0       	rjmp	.+36     	; 0x15f0 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    15cc:	40 ec       	ldi	r20, 0xC0	; 192
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	80 2f       	mov	r24, r16
    15d2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>
    15d6:	f8 cf       	rjmp	.-16     	; 0x15c8 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    15d8:	e1 e0       	ldi	r30, 0x01	; 1
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	ec 0f       	add	r30, r28
    15de:	fd 1f       	adc	r31, r29
    15e0:	e1 0f       	add	r30, r17
    15e2:	f1 1d       	adc	r31, r1
    15e4:	40 81       	ld	r20, Z
    15e6:	60 e4       	ldi	r22, 0x40	; 64
    15e8:	80 2f       	mov	r24, r16
    15ea:	0e 94 db 09 	call	0x13b6	; 0x13b6 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    15ee:	1f 5f       	subi	r17, 0xFF	; 255
    15f0:	10 31       	cpi	r17, 0x10	; 16
    15f2:	90 f3       	brcs	.-28     	; 0x15d8 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    15fc:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>

}
    1600:	e2 96       	adiw	r28, 0x32	; 50
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	08 95       	ret

00001614 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	61 97       	sbiw	r28, 0x11	; 17
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1626:	81 e1       	ldi	r24, 0x11	; 17
    1628:	e9 e8       	ldi	r30, 0x89	; 137
    162a:	fa e7       	ldi	r31, 0x7A	; 122
    162c:	de 01       	movw	r26, r28
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	01 90       	ld	r0, Z+
    1632:	0d 92       	st	X+, r0
    1634:	8a 95       	dec	r24
    1636:	e1 f7       	brne	.-8      	; 0x1630 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	be 01       	movw	r22, r28
    163c:	6f 5f       	subi	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	81 2f       	mov	r24, r17
    1642:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1646:	42 e0       	ldi	r20, 0x02	; 2
    1648:	be 01       	movw	r22, r28
    164a:	6f 5f       	subi	r22, 0xFF	; 255
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	81 2f       	mov	r24, r17
    1650:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
	timerOLED = 0;
    1654:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    1658:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>

}
    165c:	61 96       	adiw	r28, 0x11	; 17
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	08 95       	ret

0000166a <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	84 e2       	ldi	r24, 0x24	; 36
    1670:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    1674:	81 11       	cpse	r24, r1
    1676:	35 c0       	rjmp	.+106    	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	6a e0       	ldi	r22, 0x0A	; 10
    167c:	84 e2       	ldi	r24, 0x24	; 36
    167e:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    1682:	81 11       	cpse	r24, r1
    1684:	2e c0       	rjmp	.+92     	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1686:	4e ef       	ldi	r20, 0xFE	; 254
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	81 e2       	ldi	r24, 0x21	; 33
    168c:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    1690:	81 11       	cpse	r24, r1
    1692:	27 c0       	rjmp	.+78     	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	81 e2       	ldi	r24, 0x21	; 33
    169a:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    169e:	81 11       	cpse	r24, r1
    16a0:	20 c0       	rjmp	.+64     	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    16a2:	4c ef       	ldi	r20, 0xFC	; 252
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	81 e2       	ldi	r24, 0x21	; 33
    16a8:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    16ac:	81 11       	cpse	r24, r1
    16ae:	19 c0       	rjmp	.+50     	; 0x16e2 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	64 e0       	ldi	r22, 0x04	; 4
    16b4:	81 e2       	ldi	r24, 0x21	; 33
    16b6:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    16ba:	81 11       	cpse	r24, r1
    16bc:	12 c0       	rjmp	.+36     	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	65 e0       	ldi	r22, 0x05	; 5
    16c2:	81 e2       	ldi	r24, 0x21	; 33
    16c4:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    16c8:	81 11       	cpse	r24, r1
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	66 e0       	ldi	r22, 0x06	; 6
    16d0:	81 e2       	ldi	r24, 0x21	; 33
    16d2:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
    16d6:	81 11       	cpse	r24, r1
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    16da:	89 e0       	ldi	r24, 0x09	; 9
    16dc:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    16e0:	80 e0       	ldi	r24, 0x00	; 0

}
    16e2:	08 95       	ret

000016e4 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	6c 01       	movw	r12, r24
    16f6:	8b 01       	movw	r16, r22
    16f8:	7a 01       	movw	r14, r20
    16fa:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    16fc:	69 e0       	ldi	r22, 0x09	; 9
    16fe:	81 e2       	ldi	r24, 0x21	; 33
    1700:	0e 94 a1 07 	call	0xf42	; 0xf42 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1704:	98 2f       	mov	r25, r24
    1706:	92 95       	swap	r25
    1708:	96 95       	lsr	r25
    170a:	96 95       	lsr	r25
    170c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    170e:	91 30       	cpi	r25, 0x01	; 1
    1710:	21 f4       	brne	.+8      	; 0x171a <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    1712:	93 e6       	ldi	r25, 0x63	; 99
    1714:	f6 01       	movw	r30, r12
    1716:	90 83       	st	Z, r25
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    171a:	92 30       	cpi	r25, 0x02	; 2
    171c:	21 f4       	brne	.+8      	; 0x1726 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    171e:	9f e6       	ldi	r25, 0x6F	; 111
    1720:	f6 01       	movw	r30, r12
    1722:	90 83       	st	Z, r25
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    1726:	93 30       	cpi	r25, 0x03	; 3
    1728:	21 f4       	brne	.+8      	; 0x1732 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    172a:	94 e7       	ldi	r25, 0x74	; 116
    172c:	f6 01       	movw	r30, r12
    172e:	90 83       	st	Z, r25
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    1732:	98 e7       	ldi	r25, 0x78	; 120
    1734:	f6 01       	movw	r30, r12
    1736:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1738:	98 2f       	mov	r25, r24
    173a:	96 95       	lsr	r25
    173c:	96 95       	lsr	r25
	state &= 0b00000011;
    173e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1740:	91 30       	cpi	r25, 0x01	; 1
    1742:	21 f4       	brne	.+8      	; 0x174c <read_PNEUSENSORS+0x68>
		*right = 'c';
    1744:	93 e6       	ldi	r25, 0x63	; 99
    1746:	f7 01       	movw	r30, r14
    1748:	90 83       	st	Z, r25
    174a:	0f c0       	rjmp	.+30     	; 0x176a <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    174c:	92 30       	cpi	r25, 0x02	; 2
    174e:	21 f4       	brne	.+8      	; 0x1758 <read_PNEUSENSORS+0x74>
		*right = 'o';
    1750:	9f e6       	ldi	r25, 0x6F	; 111
    1752:	f7 01       	movw	r30, r14
    1754:	90 83       	st	Z, r25
    1756:	09 c0       	rjmp	.+18     	; 0x176a <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    1758:	93 30       	cpi	r25, 0x03	; 3
    175a:	21 f4       	brne	.+8      	; 0x1764 <read_PNEUSENSORS+0x80>
		*right = 't';
    175c:	94 e7       	ldi	r25, 0x74	; 116
    175e:	f7 01       	movw	r30, r14
    1760:	90 83       	st	Z, r25
    1762:	03 c0       	rjmp	.+6      	; 0x176a <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    1764:	98 e7       	ldi	r25, 0x78	; 120
    1766:	f7 01       	movw	r30, r14
    1768:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    176a:	98 2f       	mov	r25, r24
    176c:	92 95       	swap	r25
    176e:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1770:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1772:	91 30       	cpi	r25, 0x01	; 1
    1774:	21 f4       	brne	.+8      	; 0x177e <read_PNEUSENSORS+0x9a>
		*left = 'o';
    1776:	9f e6       	ldi	r25, 0x6F	; 111
    1778:	f8 01       	movw	r30, r16
    177a:	90 83       	st	Z, r25
    177c:	0f c0       	rjmp	.+30     	; 0x179c <read_PNEUSENSORS+0xb8>
	} else if (state == 2) {
    177e:	92 30       	cpi	r25, 0x02	; 2
    1780:	21 f4       	brne	.+8      	; 0x178a <read_PNEUSENSORS+0xa6>
		*left = 'c';
    1782:	93 e6       	ldi	r25, 0x63	; 99
    1784:	f8 01       	movw	r30, r16
    1786:	90 83       	st	Z, r25
    1788:	09 c0       	rjmp	.+18     	; 0x179c <read_PNEUSENSORS+0xb8>
	} else if (state == 3) {
    178a:	93 30       	cpi	r25, 0x03	; 3
    178c:	21 f4       	brne	.+8      	; 0x1796 <read_PNEUSENSORS+0xb2>
		*left = 't';
    178e:	94 e7       	ldi	r25, 0x74	; 116
    1790:	f8 01       	movw	r30, r16
    1792:	90 83       	st	Z, r25
    1794:	03 c0       	rjmp	.+6      	; 0x179c <read_PNEUSENSORS+0xb8>
	} else {
		*left = 'x';
    1796:	98 e7       	ldi	r25, 0x78	; 120
    1798:	f8 01       	movw	r30, r16
    179a:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    179c:	81 ff       	sbrs	r24, 1
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <read_PNEUSENSORS+0xc2>
		*air = '0';
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	88 83       	st	Y, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <read_PNEUSENSORS+0xc6>
	} else {
		*air = '1';
    17a6:	81 e3       	ldi	r24, 0x31	; 49
    17a8:	88 83       	st	Y, r24
	}
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	d8 2f       	mov	r29, r24
    17c2:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    17c4:	69 e0       	ldi	r22, 0x09	; 9
    17c6:	84 e2       	ldi	r24, 0x24	; 36
    17c8:	0e 94 a1 07 	call	0xf42	; 0xf42 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    17cc:	8d 2b       	or	r24, r29
    17ce:	48 2f       	mov	r20, r24
    17d0:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    17d2:	6a e0       	ldi	r22, 0x0A	; 10
    17d4:	84 e2       	ldi	r24, 0x24	; 36
    17d6:	0e 94 b8 07 	call	0xf70	; 0xf70 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	6a 97       	sbiw	r28, 0x1a	; 26
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    17ee:	99 e0       	ldi	r25, 0x09	; 9
    17f0:	e2 eb       	ldi	r30, 0xB2	; 178
    17f2:	fa e7       	ldi	r31, 0x7A	; 122
    17f4:	de 01       	movw	r26, r28
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	01 90       	ld	r0, Z+
    17fa:	0d 92       	st	X+, r0
    17fc:	9a 95       	dec	r25
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    1800:	8c 36       	cpi	r24, 0x6C	; 108
    1802:	31 f1       	breq	.+76     	; 0x1850 <__DATA_REGION_LENGTH__+0x50>
    1804:	18 f4       	brcc	.+6      	; 0x180c <__DATA_REGION_LENGTH__+0xc>
    1806:	82 36       	cpi	r24, 0x62	; 98
    1808:	39 f0       	breq	.+14     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
    180a:	75 c0       	rjmp	.+234    	; 0x18f6 <__DATA_REGION_LENGTH__+0xf6>
    180c:	82 37       	cpi	r24, 0x72	; 114
    180e:	c1 f1       	breq	.+112    	; 0x1880 <__DATA_REGION_LENGTH__+0x80>
    1810:	83 37       	cpi	r24, 0x73	; 115
    1812:	09 f4       	brne	.+2      	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
    1814:	4d c0       	rjmp	.+154    	; 0x18b0 <__DATA_REGION_LENGTH__+0xb0>
    1816:	6f c0       	rjmp	.+222    	; 0x18f6 <__DATA_REGION_LENGTH__+0xf6>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1818:	6a ee       	ldi	r22, 0xEA	; 234
    181a:	84 e4       	ldi	r24, 0x44	; 68
    181c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1820:	66 ee       	ldi	r22, 0xE6	; 230
    1822:	88 e8       	ldi	r24, 0x88	; 136
    1824:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1828:	8a e9       	ldi	r24, 0x9A	; 154
    182a:	9a e7       	ldi	r25, 0x7A	; 122
    182c:	9f 93       	push	r25
    182e:	8f 93       	push	r24
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	9f 93       	push	r25
    1836:	8f 93       	push	r24
    1838:	09 96       	adiw	r24, 0x09	; 9
    183a:	9f 93       	push	r25
    183c:	8f 93       	push	r24
    183e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	47 c0       	rjmp	.+142    	; 0x18de <__DATA_REGION_LENGTH__+0xde>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1850:	6a ee       	ldi	r22, 0xEA	; 234
    1852:	84 e4       	ldi	r24, 0x44	; 68
    1854:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1858:	8f e9       	ldi	r24, 0x9F	; 159
    185a:	9a e7       	ldi	r25, 0x7A	; 122
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	9f 93       	push	r25
    1866:	8f 93       	push	r24
    1868:	09 96       	adiw	r24, 0x09	; 9
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	2f c0       	rjmp	.+94     	; 0x18de <__DATA_REGION_LENGTH__+0xde>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1880:	66 ee       	ldi	r22, 0xE6	; 230
    1882:	88 e8       	ldi	r24, 0x88	; 136
    1884:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1888:	84 ea       	ldi	r24, 0xA4	; 164
    188a:	9a e7       	ldi	r25, 0x7A	; 122
    188c:	9f 93       	push	r25
    188e:	8f 93       	push	r24
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	09 96       	adiw	r24, 0x09	; 9
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	17 c0       	rjmp	.+46     	; 0x18de <__DATA_REGION_LENGTH__+0xde>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    18b0:	6c ee       	ldi	r22, 0xEC	; 236
    18b2:	82 e2       	ldi	r24, 0x22	; 34
    18b4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    18b8:	8a ea       	ldi	r24, 0xAA	; 170
    18ba:	9a e7       	ldi	r25, 0x7A	; 122
    18bc:	9f 93       	push	r25
    18be:	8f 93       	push	r24
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	9f 93       	push	r25
    18c6:	8f 93       	push	r24
    18c8:	09 96       	adiw	r24, 0x09	; 9
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	be 01       	movw	r22, r28
    18e8:	66 5f       	subi	r22, 0xF6	; 246
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
	return(GREATERPROMPT);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <__DATA_REGION_LENGTH__+0xf8>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    18f6:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    18f8:	6a 96       	adiw	r28, 0x1a	; 26
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	69 97       	sbiw	r28, 0x19	; 25
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    1912:	98 e0       	ldi	r25, 0x08	; 8
    1914:	eb eb       	ldi	r30, 0xBB	; 187
    1916:	fa e7       	ldi	r31, 0x7A	; 122
    1918:	de 01       	movw	r26, r28
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	01 90       	ld	r0, Z+
    191e:	0d 92       	st	X+, r0
    1920:	9a 95       	dec	r25
    1922:	e1 f7       	brne	.-8      	; 0x191c <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    1924:	8c 36       	cpi	r24, 0x6C	; 108
    1926:	31 f1       	breq	.+76     	; 0x1974 <open_PNEU+0x70>
    1928:	18 f4       	brcc	.+6      	; 0x1930 <open_PNEU+0x2c>
    192a:	82 36       	cpi	r24, 0x62	; 98
    192c:	39 f0       	breq	.+14     	; 0x193c <open_PNEU+0x38>
    192e:	75 c0       	rjmp	.+234    	; 0x1a1a <open_PNEU+0x116>
    1930:	82 37       	cpi	r24, 0x72	; 114
    1932:	c1 f1       	breq	.+112    	; 0x19a4 <open_PNEU+0xa0>
    1934:	83 37       	cpi	r24, 0x73	; 115
    1936:	09 f4       	brne	.+2      	; 0x193a <open_PNEU+0x36>
    1938:	4d c0       	rjmp	.+154    	; 0x19d4 <open_PNEU+0xd0>
    193a:	6f c0       	rjmp	.+222    	; 0x1a1a <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    193c:	6e ea       	ldi	r22, 0xAE	; 174
    193e:	84 e4       	ldi	r24, 0x44	; 68
    1940:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1944:	6e e6       	ldi	r22, 0x6E	; 110
    1946:	88 e8       	ldi	r24, 0x88	; 136
    1948:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    194c:	8a e9       	ldi	r24, 0x9A	; 154
    194e:	9a e7       	ldi	r25, 0x7A	; 122
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	9f 93       	push	r25
    195a:	8f 93       	push	r24
    195c:	08 96       	adiw	r24, 0x08	; 8
    195e:	9f 93       	push	r25
    1960:	8f 93       	push	r24
    1962:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	47 c0       	rjmp	.+142    	; 0x1a02 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1974:	6e ea       	ldi	r22, 0xAE	; 174
    1976:	84 e4       	ldi	r24, 0x44	; 68
    1978:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    197c:	8f e9       	ldi	r24, 0x9F	; 159
    197e:	9a e7       	ldi	r25, 0x7A	; 122
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	9f 93       	push	r25
    198a:	8f 93       	push	r24
    198c:	08 96       	adiw	r24, 0x08	; 8
    198e:	9f 93       	push	r25
    1990:	8f 93       	push	r24
    1992:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	2f c0       	rjmp	.+94     	; 0x1a02 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19a4:	6e e6       	ldi	r22, 0x6E	; 110
    19a6:	88 e8       	ldi	r24, 0x88	; 136
    19a8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    19ac:	84 ea       	ldi	r24, 0xA4	; 164
    19ae:	9a e7       	ldi	r25, 0x7A	; 122
    19b0:	9f 93       	push	r25
    19b2:	8f 93       	push	r24
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	9f 93       	push	r25
    19ba:	8f 93       	push	r24
    19bc:	08 96       	adiw	r24, 0x08	; 8
    19be:	9f 93       	push	r25
    19c0:	8f 93       	push	r24
    19c2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	17 c0       	rjmp	.+46     	; 0x1a02 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    19d4:	6e ec       	ldi	r22, 0xCE	; 206
    19d6:	82 e2       	ldi	r24, 0x22	; 34
    19d8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    19dc:	8a ea       	ldi	r24, 0xAA	; 170
    19de:	9a e7       	ldi	r25, 0x7A	; 122
    19e0:	9f 93       	push	r25
    19e2:	8f 93       	push	r24
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	08 96       	adiw	r24, 0x08	; 8
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			break;
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 0a 0b 	call	0x1614	; 0x1614 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	be 01       	movw	r22, r28
    1a0c:	67 5f       	subi	r22, 0xF7	; 247
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
	return(GREATERPROMPT);
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a1c:	69 96       	adiw	r28, 0x19	; 25
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	4f 93       	push	r20
    1a38:	5f 93       	push	r21
    1a3a:	6f 93       	push	r22
    1a3c:	7f 93       	push	r23
    1a3e:	8f 93       	push	r24
    1a40:	9f 93       	push	r25
    1a42:	af 93       	push	r26
    1a44:	bf 93       	push	r27
    1a46:	ef 93       	push	r30
    1a48:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1a4a:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1a4e:	88 23       	and	r24, r24
    1a50:	64 f4       	brge	.+24     	; 0x1a6a <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1a52:	80 e8       	ldi	r24, 0x80	; 128
    1a54:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1a58:	68 e0       	ldi	r22, 0x08	; 8
    1a5a:	81 e2       	ldi	r24, 0x21	; 33
    1a5c:	0e 94 a1 07 	call	0xf42	; 0xf42 <read_MCP23008>
    1a60:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <pneuState>
		toggle_BEEPER;
    1a64:	84 e0       	ldi	r24, 0x04	; 4
    1a66:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1a8c:	e0 e0       	ldi	r30, 0x00	; 0
    1a8e:	f4 e0       	ldi	r31, 0x04	; 4
    1a90:	88 e0       	ldi	r24, 0x08	; 8
    1a92:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1a94:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1a96:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1a98:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1a9a:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1a9c:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1a9e:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1aa0:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1aa2:	e0 e2       	ldi	r30, 0x20	; 32
    1aa4:	f4 e0       	ldi	r31, 0x04	; 4
    1aa6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1aa8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1aaa:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1aac:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1aae:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1ab0:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1ab2:	e0 e4       	ldi	r30, 0x40	; 64
    1ab4:	f4 e0       	ldi	r31, 0x04	; 4
    1ab6:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1ab8:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1aba:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1abc:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1abe:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1ac0:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1ac2:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1ac4:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ac6:	e0 e6       	ldi	r30, 0x60	; 96
    1ac8:	f4 e0       	ldi	r31, 0x04	; 4
    1aca:	94 e0       	ldi	r25, 0x04	; 4
    1acc:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ace:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ad0:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ad2:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ad4:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ad6:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ad8:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1ada:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1adc:	e0 e8       	ldi	r30, 0x80	; 128
    1ade:	f4 e0       	ldi	r31, 0x04	; 4
    1ae0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1ae2:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1ae4:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1ae6:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1ae8:	e0 ea       	ldi	r30, 0xA0	; 160
    1aea:	f4 e0       	ldi	r31, 0x04	; 4
    1aec:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1aee:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1af0:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1af2:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1af4:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1af6:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1af8:	86 8b       	std	Z+22, r24	; 0x16
    1afa:	08 95       	ret

00001afc <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1afc:	2f 92       	push	r2
    1afe:	3f 92       	push	r3
    1b00:	4f 92       	push	r4
    1b02:	5f 92       	push	r5
    1b04:	6f 92       	push	r6
    1b06:	7f 92       	push	r7
    1b08:	8f 92       	push	r8
    1b0a:	9f 92       	push	r9
    1b0c:	af 92       	push	r10
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	df 92       	push	r13
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	ce 51       	subi	r28, 0x1E	; 30
    1b26:	d2 40       	sbci	r29, 0x02	; 2
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_BTM[] = "$S%dBTM,%s,%s";
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1b2c:	92 e4       	ldi	r25, 0x42	; 66
    1b2e:	ea e0       	ldi	r30, 0x0A	; 10
    1b30:	fb e7       	ldi	r31, 0x7B	; 123
    1b32:	de 01       	movw	r26, r28
    1b34:	ae 52       	subi	r26, 0x2E	; 46
    1b36:	bf 4f       	sbci	r27, 0xFF	; 255
    1b38:	01 90       	ld	r0, Z+
    1b3a:	0d 92       	st	X+, r0
    1b3c:	9a 95       	dec	r25
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <report+0x3c>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1b40:	90 e2       	ldi	r25, 0x20	; 32
    1b42:	ec e4       	ldi	r30, 0x4C	; 76
    1b44:	fb e7       	ldi	r31, 0x7B	; 123
    1b46:	de 01       	movw	r26, r28
    1b48:	ac 5e       	subi	r26, 0xEC	; 236
    1b4a:	be 4f       	sbci	r27, 0xFE	; 254
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	0d 92       	st	X+, r0
    1b50:	9a 95       	dec	r25
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <report+0x50>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1b54:	92 e1       	ldi	r25, 0x12	; 18
    1b56:	ec e6       	ldi	r30, 0x6C	; 108
    1b58:	fb e7       	ldi	r31, 0x7B	; 123
    1b5a:	de 01       	movw	r26, r28
    1b5c:	ac 5c       	subi	r26, 0xCC	; 204
    1b5e:	be 4f       	sbci	r27, 0xFE	; 254
    1b60:	01 90       	ld	r0, Z+
    1b62:	0d 92       	st	X+, r0
    1b64:	9a 95       	dec	r25
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <report+0x64>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1b68:	91 e3       	ldi	r25, 0x31	; 49
    1b6a:	ee e7       	ldi	r30, 0x7E	; 126
    1b6c:	fb e7       	ldi	r31, 0x7B	; 123
    1b6e:	de 01       	movw	r26, r28
    1b70:	aa 5b       	subi	r26, 0xBA	; 186
    1b72:	be 4f       	sbci	r27, 0xFE	; 254
    1b74:	01 90       	ld	r0, Z+
    1b76:	0d 92       	st	X+, r0
    1b78:	9a 95       	dec	r25
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <report+0x78>
//	const char dformat_PNU[] = "%c %c %c %c";
	const char dformat_PN1[] = "left:%c   right:%c";
    1b7c:	93 e1       	ldi	r25, 0x13	; 19
    1b7e:	ef ea       	ldi	r30, 0xAF	; 175
    1b80:	fb e7       	ldi	r31, 0x7B	; 123
    1b82:	de 01       	movw	r26, r28
    1b84:	a9 58       	subi	r26, 0x89	; 137
    1b86:	be 4f       	sbci	r27, 0xFE	; 254
    1b88:	01 90       	ld	r0, Z+
    1b8a:	0d 92       	st	X+, r0
    1b8c:	9a 95       	dec	r25
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <report+0x8c>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1b90:	93 e1       	ldi	r25, 0x13	; 19
    1b92:	e2 ec       	ldi	r30, 0xC2	; 194
    1b94:	fb e7       	ldi	r31, 0x7B	; 123
    1b96:	de 01       	movw	r26, r28
    1b98:	a6 57       	subi	r26, 0x76	; 118
    1b9a:	be 4f       	sbci	r27, 0xFE	; 254
    1b9c:	01 90       	ld	r0, Z+
    1b9e:	0d 92       	st	X+, r0
    1ba0:	9a 95       	dec	r25
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <report+0xa0>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1ba4:	9d e1       	ldi	r25, 0x1D	; 29
    1ba6:	e5 ed       	ldi	r30, 0xD5	; 213
    1ba8:	fb e7       	ldi	r31, 0x7B	; 123
    1baa:	de 01       	movw	r26, r28
    1bac:	a3 56       	subi	r26, 0x63	; 99
    1bae:	be 4f       	sbci	r27, 0xFE	; 254
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	0d 92       	st	X+, r0
    1bb4:	9a 95       	dec	r25
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <report+0xb4>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1bb8:	99 e2       	ldi	r25, 0x29	; 41
    1bba:	e2 ef       	ldi	r30, 0xF2	; 242
    1bbc:	fb e7       	ldi	r31, 0x7B	; 123
    1bbe:	de 01       	movw	r26, r28
    1bc0:	a6 54       	subi	r26, 0x46	; 70
    1bc2:	be 4f       	sbci	r27, 0xFE	; 254
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0d 92       	st	X+, r0
    1bc8:	9a 95       	dec	r25
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <report+0xc8>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1bcc:	9d e0       	ldi	r25, 0x0D	; 13
    1bce:	eb e1       	ldi	r30, 0x1B	; 27
    1bd0:	fc e7       	ldi	r31, 0x7C	; 124
    1bd2:	de 01       	movw	r26, r28
    1bd4:	ad 51       	subi	r26, 0x1D	; 29
    1bd6:	be 4f       	sbci	r27, 0xFE	; 254
    1bd8:	01 90       	ld	r0, Z+
    1bda:	0d 92       	st	X+, r0
    1bdc:	9a 95       	dec	r25
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <report+0xdc>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1be0:	91 e1       	ldi	r25, 0x11	; 17
    1be2:	e8 e2       	ldi	r30, 0x28	; 40
    1be4:	fc e7       	ldi	r31, 0x7C	; 124
    1be6:	de 01       	movw	r26, r28
    1be8:	a0 51       	subi	r26, 0x10	; 16
    1bea:	be 4f       	sbci	r27, 0xFE	; 254
    1bec:	01 90       	ld	r0, Z+
    1bee:	0d 92       	st	X+, r0
    1bf0:	9a 95       	dec	r25
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <report+0xf0>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1bf4:	08 2f       	mov	r16, r24
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	84 e3       	ldi	r24, 0x34	; 52
    1bfa:	80 9f       	mul	r24, r16
    1bfc:	f0 01       	movw	r30, r0
    1bfe:	81 9f       	mul	r24, r17
    1c00:	f0 0d       	add	r31, r0
    1c02:	11 24       	eor	r1, r1
    1c04:	ec 5f       	subi	r30, 0xFC	; 252
    1c06:	f7 4d       	sbci	r31, 0xD7	; 215
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	8f 36       	cpi	r24, 0x6F	; 111
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <report+0x114>
    1c0e:	49 c1       	rjmp	.+658    	; 0x1ea2 <report+0x3a6>
    1c10:	30 f4       	brcc	.+12     	; 0x1c1e <report+0x122>
    1c12:	86 35       	cpi	r24, 0x56	; 86
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <report+0x11c>
    1c16:	9f c3       	rjmp	.+1854   	; 0x2356 <report+0x85a>
    1c18:	85 36       	cpi	r24, 0x65	; 101
    1c1a:	59 f0       	breq	.+22     	; 0x1c32 <report+0x136>
    1c1c:	ef c3       	rjmp	.+2014   	; 0x23fc <report+0x900>
    1c1e:	84 37       	cpi	r24, 0x74	; 116
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <report+0x128>
    1c22:	ca c2       	rjmp	.+1428   	; 0x21b8 <report+0x6bc>
    1c24:	86 37       	cpi	r24, 0x76	; 118
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <report+0x12e>
    1c28:	27 c3       	rjmp	.+1614   	; 0x2278 <report+0x77c>
    1c2a:	80 37       	cpi	r24, 0x70	; 112
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <report+0x134>
    1c2e:	e6 c3       	rjmp	.+1996   	; 0x23fc <report+0x900>
    1c30:	24 c2       	rjmp	.+1096   	; 0x207a <report+0x57e>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
    1c38:	f6 2e       	mov	r15, r22
    1c3a:	e7 2e       	mov	r14, r23
    1c3c:	d8 2e       	mov	r13, r24
    1c3e:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0e 94 5f 06 	call	0xcbe	; 0xcbe <get_humidity>
    1c46:	b6 2e       	mov	r11, r22
    1c48:	a7 2e       	mov	r10, r23
    1c4a:	98 2e       	mov	r9, r24
    1c4c:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
    1c54:	cf 5e       	subi	r28, 0xEF	; 239
    1c56:	dd 4f       	sbci	r29, 0xFD	; 253
    1c58:	68 83       	st	Y, r22
    1c5a:	c1 51       	subi	r28, 0x11	; 17
    1c5c:	d2 40       	sbci	r29, 0x02	; 2
    1c5e:	ce 5e       	subi	r28, 0xEE	; 238
    1c60:	dd 4f       	sbci	r29, 0xFD	; 253
    1c62:	78 83       	st	Y, r23
    1c64:	c2 51       	subi	r28, 0x12	; 18
    1c66:	d2 40       	sbci	r29, 0x02	; 2
    1c68:	cd 5e       	subi	r28, 0xED	; 237
    1c6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1c6c:	88 83       	st	Y, r24
    1c6e:	c3 51       	subi	r28, 0x13	; 19
    1c70:	d2 40       	sbci	r29, 0x02	; 2
    1c72:	cc 5e       	subi	r28, 0xEC	; 236
    1c74:	dd 4f       	sbci	r29, 0xFD	; 253
    1c76:	98 83       	st	Y, r25
    1c78:	c4 51       	subi	r28, 0x14	; 20
    1c7a:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <get_humidity>
    1c82:	cb 5e       	subi	r28, 0xEB	; 235
    1c84:	dd 4f       	sbci	r29, 0xFD	; 253
    1c86:	68 83       	st	Y, r22
    1c88:	c5 51       	subi	r28, 0x15	; 21
    1c8a:	d2 40       	sbci	r29, 0x02	; 2
    1c8c:	ca 5e       	subi	r28, 0xEA	; 234
    1c8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1c90:	78 83       	st	Y, r23
    1c92:	c6 51       	subi	r28, 0x16	; 22
    1c94:	d2 40       	sbci	r29, 0x02	; 2
    1c96:	c9 5e       	subi	r28, 0xE9	; 233
    1c98:	dd 4f       	sbci	r29, 0xFD	; 253
    1c9a:	88 83       	st	Y, r24
    1c9c:	c7 51       	subi	r28, 0x17	; 23
    1c9e:	d2 40       	sbci	r29, 0x02	; 2
    1ca0:	c8 5e       	subi	r28, 0xE8	; 232
    1ca2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ca4:	98 83       	st	Y, r25
    1ca6:	c8 51       	subi	r28, 0x18	; 24
    1ca8:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
    1cb0:	c7 5e       	subi	r28, 0xE7	; 231
    1cb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1cb4:	68 83       	st	Y, r22
    1cb6:	c9 51       	subi	r28, 0x19	; 25
    1cb8:	d2 40       	sbci	r29, 0x02	; 2
    1cba:	c6 5e       	subi	r28, 0xE6	; 230
    1cbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1cbe:	78 83       	st	Y, r23
    1cc0:	ca 51       	subi	r28, 0x1A	; 26
    1cc2:	d2 40       	sbci	r29, 0x02	; 2
    1cc4:	c5 5e       	subi	r28, 0xE5	; 229
    1cc6:	dd 4f       	sbci	r29, 0xFD	; 253
    1cc8:	88 83       	st	Y, r24
    1cca:	cb 51       	subi	r28, 0x1B	; 27
    1ccc:	d2 40       	sbci	r29, 0x02	; 2
    1cce:	c4 5e       	subi	r28, 0xE4	; 228
    1cd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1cd2:	98 83       	st	Y, r25
    1cd4:	cc 51       	subi	r28, 0x1C	; 28
    1cd6:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 5f 06 	call	0xcbe	; 0xcbe <get_humidity>
    1cde:	76 2e       	mov	r7, r22
    1ce0:	67 2e       	mov	r6, r23
    1ce2:	58 2e       	mov	r5, r24
    1ce4:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	0e 94 c2 12 	call	0x2584	; 0x2584 <get_temperature>
    1cec:	c3 5e       	subi	r28, 0xE3	; 227
    1cee:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf0:	68 83       	st	Y, r22
    1cf2:	cd 51       	subi	r28, 0x1D	; 29
    1cf4:	d2 40       	sbci	r29, 0x02	; 2
    1cf6:	c2 5e       	subi	r28, 0xE2	; 226
    1cf8:	dd 4f       	sbci	r29, 0xFD	; 253
    1cfa:	78 83       	st	Y, r23
    1cfc:	ce 51       	subi	r28, 0x1E	; 30
    1cfe:	d2 40       	sbci	r29, 0x02	; 2
    1d00:	38 2e       	mov	r3, r24
    1d02:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1d04:	ce 01       	movw	r24, r28
    1d06:	8a 56       	subi	r24, 0x6A	; 106
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1d0e:	24 e3       	ldi	r18, 0x34	; 52
    1d10:	20 9f       	mul	r18, r16
    1d12:	c0 01       	movw	r24, r0
    1d14:	21 9f       	mul	r18, r17
    1d16:	90 0d       	add	r25, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	81 5d       	subi	r24, 0xD1	; 209
    1d1c:	97 4d       	sbci	r25, 0xD7	; 215
    1d1e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d22:	22 ff       	sbrs	r18, 2
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <report+0x230>
    1d26:	22 e0       	ldi	r18, 0x02	; 2
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <report+0x234>
    1d2c:	21 e0       	ldi	r18, 0x01	; 1
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	9f 93       	push	r25
    1d32:	8f 93       	push	r24
    1d34:	2f 92       	push	r2
    1d36:	3f 92       	push	r3
    1d38:	c2 5e       	subi	r28, 0xE2	; 226
    1d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3c:	88 81       	ld	r24, Y
    1d3e:	ce 51       	subi	r28, 0x1E	; 30
    1d40:	d2 40       	sbci	r29, 0x02	; 2
    1d42:	8f 93       	push	r24
    1d44:	c3 5e       	subi	r28, 0xE3	; 227
    1d46:	dd 4f       	sbci	r29, 0xFD	; 253
    1d48:	98 81       	ld	r25, Y
    1d4a:	cd 51       	subi	r28, 0x1D	; 29
    1d4c:	d2 40       	sbci	r29, 0x02	; 2
    1d4e:	9f 93       	push	r25
    1d50:	4f 92       	push	r4
    1d52:	5f 92       	push	r5
    1d54:	6f 92       	push	r6
    1d56:	7f 92       	push	r7
    1d58:	c4 5e       	subi	r28, 0xE4	; 228
    1d5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d5c:	88 81       	ld	r24, Y
    1d5e:	cc 51       	subi	r28, 0x1C	; 28
    1d60:	d2 40       	sbci	r29, 0x02	; 2
    1d62:	8f 93       	push	r24
    1d64:	c5 5e       	subi	r28, 0xE5	; 229
    1d66:	dd 4f       	sbci	r29, 0xFD	; 253
    1d68:	98 81       	ld	r25, Y
    1d6a:	cb 51       	subi	r28, 0x1B	; 27
    1d6c:	d2 40       	sbci	r29, 0x02	; 2
    1d6e:	9f 93       	push	r25
    1d70:	c6 5e       	subi	r28, 0xE6	; 230
    1d72:	dd 4f       	sbci	r29, 0xFD	; 253
    1d74:	88 81       	ld	r24, Y
    1d76:	ca 51       	subi	r28, 0x1A	; 26
    1d78:	d2 40       	sbci	r29, 0x02	; 2
    1d7a:	8f 93       	push	r24
    1d7c:	c7 5e       	subi	r28, 0xE7	; 231
    1d7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d80:	98 81       	ld	r25, Y
    1d82:	c9 51       	subi	r28, 0x19	; 25
    1d84:	d2 40       	sbci	r29, 0x02	; 2
    1d86:	9f 93       	push	r25
    1d88:	c8 5e       	subi	r28, 0xE8	; 232
    1d8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d8c:	88 81       	ld	r24, Y
    1d8e:	c8 51       	subi	r28, 0x18	; 24
    1d90:	d2 40       	sbci	r29, 0x02	; 2
    1d92:	8f 93       	push	r24
    1d94:	c9 5e       	subi	r28, 0xE9	; 233
    1d96:	dd 4f       	sbci	r29, 0xFD	; 253
    1d98:	98 81       	ld	r25, Y
    1d9a:	c7 51       	subi	r28, 0x17	; 23
    1d9c:	d2 40       	sbci	r29, 0x02	; 2
    1d9e:	9f 93       	push	r25
    1da0:	ca 5e       	subi	r28, 0xEA	; 234
    1da2:	dd 4f       	sbci	r29, 0xFD	; 253
    1da4:	88 81       	ld	r24, Y
    1da6:	c6 51       	subi	r28, 0x16	; 22
    1da8:	d2 40       	sbci	r29, 0x02	; 2
    1daa:	8f 93       	push	r24
    1dac:	cb 5e       	subi	r28, 0xEB	; 235
    1dae:	dd 4f       	sbci	r29, 0xFD	; 253
    1db0:	98 81       	ld	r25, Y
    1db2:	c5 51       	subi	r28, 0x15	; 21
    1db4:	d2 40       	sbci	r29, 0x02	; 2
    1db6:	9f 93       	push	r25
    1db8:	cc 5e       	subi	r28, 0xEC	; 236
    1dba:	dd 4f       	sbci	r29, 0xFD	; 253
    1dbc:	88 81       	ld	r24, Y
    1dbe:	c4 51       	subi	r28, 0x14	; 20
    1dc0:	d2 40       	sbci	r29, 0x02	; 2
    1dc2:	8f 93       	push	r24
    1dc4:	cd 5e       	subi	r28, 0xED	; 237
    1dc6:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc8:	98 81       	ld	r25, Y
    1dca:	c3 51       	subi	r28, 0x13	; 19
    1dcc:	d2 40       	sbci	r29, 0x02	; 2
    1dce:	9f 93       	push	r25
    1dd0:	ce 5e       	subi	r28, 0xEE	; 238
    1dd2:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd4:	88 81       	ld	r24, Y
    1dd6:	c2 51       	subi	r28, 0x12	; 18
    1dd8:	d2 40       	sbci	r29, 0x02	; 2
    1dda:	8f 93       	push	r24
    1ddc:	cf 5e       	subi	r28, 0xEF	; 239
    1dde:	dd 4f       	sbci	r29, 0xFD	; 253
    1de0:	98 81       	ld	r25, Y
    1de2:	c1 51       	subi	r28, 0x11	; 17
    1de4:	d2 40       	sbci	r29, 0x02	; 2
    1de6:	9f 93       	push	r25
    1de8:	8f 92       	push	r8
    1dea:	9f 92       	push	r9
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	ce 01       	movw	r24, r28
    1dfa:	8a 56       	subi	r24, 0x6A	; 106
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	9f 93       	push	r25
    1e00:	8f 93       	push	r24
    1e02:	3f 93       	push	r19
    1e04:	2f 93       	push	r18
    1e06:	cc 96       	adiw	r24, 0x3c	; 60
    1e08:	9f 93       	push	r25
    1e0a:	8f 93       	push	r24
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	0f 5f       	subi	r16, 0xFF	; 255
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	1f 93       	push	r17
    1e14:	0f 93       	push	r16
    1e16:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			checksum_NMEA(outbuf);
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	c8 01       	movw	r24, r16
    1e20:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e24:	f8 01       	movw	r30, r16
    1e26:	01 90       	ld	r0, Z+
    1e28:	00 20       	and	r0, r0
    1e2a:	e9 f7       	brne	.-6      	; 0x1e26 <report+0x32a>
    1e2c:	31 97       	sbiw	r30, 0x01	; 1
    1e2e:	af 01       	movw	r20, r30
    1e30:	40 1b       	sub	r20, r16
    1e32:	51 0b       	sbc	r21, r17
    1e34:	b8 01       	movw	r22, r16
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	63 ec       	ldi	r22, 0xC3	; 195
    1e40:	7a e7       	ldi	r23, 0x7A	; 122
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    1e48:	26 e6       	ldi	r18, 0x66	; 102
    1e4a:	36 e6       	ldi	r19, 0x66	; 102
    1e4c:	46 ee       	ldi	r20, 0xE6	; 230
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	6f 2d       	mov	r22, r15
    1e52:	7e 2d       	mov	r23, r14
    1e54:	8d 2d       	mov	r24, r13
    1e56:	9c 2d       	mov	r25, r12
    1e58:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__mulsf3>
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	52 e4       	ldi	r21, 0x42	; 66
    1e6c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
    1e70:	9f 93       	push	r25
    1e72:	8f 93       	push	r24
    1e74:	7f 93       	push	r23
    1e76:	6f 93       	push	r22
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	83 ed       	ldi	r24, 0xD3	; 211
    1e82:	9a e7       	ldi	r25, 0x7A	; 122
    1e84:	9f 93       	push	r25
    1e86:	8f 93       	push	r24
    1e88:	1f 93       	push	r17
    1e8a:	0f 93       	push	r16
    1e8c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			writestr_OLED(1, outbuf, 2);
    1e90:	42 e0       	ldi	r20, 0x02	; 2
    1e92:	b8 01       	movw	r22, r16
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			break;
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    1ea0:	ae c2       	rjmp	.+1372   	; 0x23fe <report+0x902>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	47 5f       	subi	r20, 0xF7	; 247
    1ea6:	5d 4f       	sbci	r21, 0xFD	; 253
    1ea8:	be 01       	movw	r22, r28
    1eaa:	6b 5f       	subi	r22, 0xFB	; 251
    1eac:	7d 4f       	sbci	r23, 0xFD	; 253
    1eae:	ce 01       	movw	r24, r28
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb4:	0e 94 65 08 	call	0x10ca	; 0x10ca <get_orientation>
			get_time(currenttime);
    1eb8:	ce 01       	movw	r24, r28
    1eba:	8a 56       	subi	r24, 0x6A	; 106
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1ec2:	24 e3       	ldi	r18, 0x34	; 52
    1ec4:	20 9f       	mul	r18, r16
    1ec6:	c0 01       	movw	r24, r0
    1ec8:	21 9f       	mul	r18, r17
    1eca:	90 0d       	add	r25, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	81 5d       	subi	r24, 0xD1	; 209
    1ed0:	97 4d       	sbci	r25, 0xD7	; 215
    1ed2:	c7 5f       	subi	r28, 0xF7	; 247
    1ed4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ed6:	18 81       	ld	r17, Y
    1ed8:	c9 50       	subi	r28, 0x09	; 9
    1eda:	d2 40       	sbci	r29, 0x02	; 2
    1edc:	c6 5f       	subi	r28, 0xF6	; 246
    1ede:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee0:	08 81       	ld	r16, Y
    1ee2:	ca 50       	subi	r28, 0x0A	; 10
    1ee4:	d2 40       	sbci	r29, 0x02	; 2
    1ee6:	c5 5f       	subi	r28, 0xF5	; 245
    1ee8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eea:	f8 80       	ld	r15, Y
    1eec:	cb 50       	subi	r28, 0x0B	; 11
    1eee:	d2 40       	sbci	r29, 0x02	; 2
    1ef0:	c4 5f       	subi	r28, 0xF4	; 244
    1ef2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ef4:	e8 80       	ld	r14, Y
    1ef6:	cc 50       	subi	r28, 0x0C	; 12
    1ef8:	d2 40       	sbci	r29, 0x02	; 2
    1efa:	cb 5f       	subi	r28, 0xFB	; 251
    1efc:	dd 4f       	sbci	r29, 0xFD	; 253
    1efe:	e8 81       	ld	r30, Y
    1f00:	c5 50       	subi	r28, 0x05	; 5
    1f02:	d2 40       	sbci	r29, 0x02	; 2
    1f04:	ca 5f       	subi	r28, 0xFA	; 250
    1f06:	dd 4f       	sbci	r29, 0xFD	; 253
    1f08:	f8 81       	ld	r31, Y
    1f0a:	c6 50       	subi	r28, 0x06	; 6
    1f0c:	d2 40       	sbci	r29, 0x02	; 2
    1f0e:	c9 5f       	subi	r28, 0xF9	; 249
    1f10:	dd 4f       	sbci	r29, 0xFD	; 253
    1f12:	a8 81       	ld	r26, Y
    1f14:	c7 50       	subi	r28, 0x07	; 7
    1f16:	d2 40       	sbci	r29, 0x02	; 2
    1f18:	c8 5f       	subi	r28, 0xF8	; 248
    1f1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1c:	b8 81       	ld	r27, Y
    1f1e:	c8 50       	subi	r28, 0x08	; 8
    1f20:	d2 40       	sbci	r29, 0x02	; 2
    1f22:	cf 5f       	subi	r28, 0xFF	; 255
    1f24:	dd 4f       	sbci	r29, 0xFD	; 253
    1f26:	48 81       	ld	r20, Y
    1f28:	c1 50       	subi	r28, 0x01	; 1
    1f2a:	d2 40       	sbci	r29, 0x02	; 2
    1f2c:	ce 5f       	subi	r28, 0xFE	; 254
    1f2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f30:	58 81       	ld	r21, Y
    1f32:	c2 50       	subi	r28, 0x02	; 2
    1f34:	d2 40       	sbci	r29, 0x02	; 2
    1f36:	cd 5f       	subi	r28, 0xFD	; 253
    1f38:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3a:	68 81       	ld	r22, Y
    1f3c:	c3 50       	subi	r28, 0x03	; 3
    1f3e:	d2 40       	sbci	r29, 0x02	; 2
    1f40:	cc 5f       	subi	r28, 0xFC	; 252
    1f42:	dd 4f       	sbci	r29, 0xFD	; 253
    1f44:	78 81       	ld	r23, Y
    1f46:	c4 50       	subi	r28, 0x04	; 4
    1f48:	d2 40       	sbci	r29, 0x02	; 2
    1f4a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f4e:	22 ff       	sbrs	r18, 2
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <report+0x45c>
    1f52:	22 e0       	ldi	r18, 0x02	; 2
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <report+0x460>
    1f58:	21 e0       	ldi	r18, 0x01	; 1
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	9f 93       	push	r25
    1f5e:	8f 93       	push	r24
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	bf 93       	push	r27
    1f6a:	af 93       	push	r26
    1f6c:	ff 93       	push	r31
    1f6e:	ef 93       	push	r30
    1f70:	7f 93       	push	r23
    1f72:	6f 93       	push	r22
    1f74:	5f 93       	push	r21
    1f76:	4f 93       	push	r20
    1f78:	ce 01       	movw	r24, r28
    1f7a:	8a 56       	subi	r24, 0x6A	; 106
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	3f 93       	push	r19
    1f84:	2f 93       	push	r18
    1f86:	82 58       	subi	r24, 0x82	; 130
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	9f 93       	push	r25
    1f8c:	8f 93       	push	r24
    1f8e:	8e 01       	movw	r16, r28
    1f90:	0f 5f       	subi	r16, 0xFF	; 255
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	1f 93       	push	r17
    1f96:	0f 93       	push	r16
    1f98:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			checksum_NMEA(outbuf);
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	01 90       	ld	r0, Z+
    1fa6:	00 20       	and	r0, r0
    1fa8:	e9 f7       	brne	.-6      	; 0x1fa4 <report+0x4a8>
    1faa:	31 97       	sbiw	r30, 0x01	; 1
    1fac:	af 01       	movw	r20, r30
    1fae:	40 1b       	sub	r20, r16
    1fb0:	51 0b       	sbc	r21, r17
    1fb2:	b8 01       	movw	r22, r16
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	69 ee       	ldi	r22, 0xE9	; 233
    1fbe:	7a e7       	ldi	r23, 0x7A	; 122
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    1fc6:	c4 5f       	subi	r28, 0xF4	; 244
    1fc8:	dd 4f       	sbci	r29, 0xFD	; 253
    1fca:	88 81       	ld	r24, Y
    1fcc:	cc 50       	subi	r28, 0x0C	; 12
    1fce:	d2 40       	sbci	r29, 0x02	; 2
    1fd0:	8f 93       	push	r24
    1fd2:	c5 5f       	subi	r28, 0xF5	; 245
    1fd4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fd6:	88 81       	ld	r24, Y
    1fd8:	cb 50       	subi	r28, 0x0B	; 11
    1fda:	d2 40       	sbci	r29, 0x02	; 2
    1fdc:	8f 93       	push	r24
    1fde:	c6 5f       	subi	r28, 0xF6	; 246
    1fe0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe2:	88 81       	ld	r24, Y
    1fe4:	ca 50       	subi	r28, 0x0A	; 10
    1fe6:	d2 40       	sbci	r29, 0x02	; 2
    1fe8:	8f 93       	push	r24
    1fea:	c7 5f       	subi	r28, 0xF7	; 247
    1fec:	dd 4f       	sbci	r29, 0xFD	; 253
    1fee:	88 81       	ld	r24, Y
    1ff0:	c9 50       	subi	r28, 0x09	; 9
    1ff2:	d2 40       	sbci	r29, 0x02	; 2
    1ff4:	8f 93       	push	r24
    1ff6:	c8 5f       	subi	r28, 0xF8	; 248
    1ff8:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffa:	88 81       	ld	r24, Y
    1ffc:	c8 50       	subi	r28, 0x08	; 8
    1ffe:	d2 40       	sbci	r29, 0x02	; 2
    2000:	8f 93       	push	r24
    2002:	c9 5f       	subi	r28, 0xF9	; 249
    2004:	dd 4f       	sbci	r29, 0xFD	; 253
    2006:	88 81       	ld	r24, Y
    2008:	c7 50       	subi	r28, 0x07	; 7
    200a:	d2 40       	sbci	r29, 0x02	; 2
    200c:	8f 93       	push	r24
    200e:	ca 5f       	subi	r28, 0xFA	; 250
    2010:	dd 4f       	sbci	r29, 0xFD	; 253
    2012:	88 81       	ld	r24, Y
    2014:	c6 50       	subi	r28, 0x06	; 6
    2016:	d2 40       	sbci	r29, 0x02	; 2
    2018:	8f 93       	push	r24
    201a:	cb 5f       	subi	r28, 0xFB	; 251
    201c:	dd 4f       	sbci	r29, 0xFD	; 253
    201e:	88 81       	ld	r24, Y
    2020:	c5 50       	subi	r28, 0x05	; 5
    2022:	d2 40       	sbci	r29, 0x02	; 2
    2024:	8f 93       	push	r24
    2026:	cc 5f       	subi	r28, 0xFC	; 252
    2028:	dd 4f       	sbci	r29, 0xFD	; 253
    202a:	88 81       	ld	r24, Y
    202c:	c4 50       	subi	r28, 0x04	; 4
    202e:	d2 40       	sbci	r29, 0x02	; 2
    2030:	8f 93       	push	r24
    2032:	cd 5f       	subi	r28, 0xFD	; 253
    2034:	dd 4f       	sbci	r29, 0xFD	; 253
    2036:	88 81       	ld	r24, Y
    2038:	c3 50       	subi	r28, 0x03	; 3
    203a:	d2 40       	sbci	r29, 0x02	; 2
    203c:	8f 93       	push	r24
    203e:	ce 5f       	subi	r28, 0xFE	; 254
    2040:	dd 4f       	sbci	r29, 0xFD	; 253
    2042:	88 81       	ld	r24, Y
    2044:	c2 50       	subi	r28, 0x02	; 2
    2046:	d2 40       	sbci	r29, 0x02	; 2
    2048:	8f 93       	push	r24
    204a:	cf 5f       	subi	r28, 0xFF	; 255
    204c:	dd 4f       	sbci	r29, 0xFD	; 253
    204e:	88 81       	ld	r24, Y
    2050:	c1 50       	subi	r28, 0x01	; 1
    2052:	d2 40       	sbci	r29, 0x02	; 2
    2054:	8f 93       	push	r24
    2056:	ce 01       	movw	r24, r28
    2058:	8c 5c       	subi	r24, 0xCC	; 204
    205a:	9e 4f       	sbci	r25, 0xFE	; 254
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	1f 93       	push	r17
    2062:	0f 93       	push	r16
    2064:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	42 e0       	ldi	r20, 0x02	; 2
    206e:	b8 01       	movw	r22, r16
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2076:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2078:	c2 c1       	rjmp	.+900    	; 0x23fe <report+0x902>

		case 'p':
			get_time(currenttime);
    207a:	ce 01       	movw	r24, r28
    207c:	8a 56       	subi	r24, 0x6A	; 106
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2084:	9e 01       	movw	r18, r28
    2086:	20 5f       	subi	r18, 0xF0	; 240
    2088:	3d 4f       	sbci	r19, 0xFD	; 253
    208a:	ae 01       	movw	r20, r28
    208c:	41 5f       	subi	r20, 0xF1	; 241
    208e:	5d 4f       	sbci	r21, 0xFD	; 253
    2090:	be 01       	movw	r22, r28
    2092:	62 5f       	subi	r22, 0xF2	; 242
    2094:	7d 4f       	sbci	r23, 0xFD	; 253
    2096:	ce 01       	movw	r24, r28
    2098:	83 5f       	subi	r24, 0xF3	; 243
    209a:	9d 4f       	sbci	r25, 0xFD	; 253
    209c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    20a0:	24 e3       	ldi	r18, 0x34	; 52
    20a2:	20 9f       	mul	r18, r16
    20a4:	c0 01       	movw	r24, r0
    20a6:	21 9f       	mul	r18, r17
    20a8:	90 0d       	add	r25, r0
    20aa:	11 24       	eor	r1, r1
    20ac:	81 5d       	subi	r24, 0xD1	; 209
    20ae:	97 4d       	sbci	r25, 0xD7	; 215
    20b0:	c0 5f       	subi	r28, 0xF0	; 240
    20b2:	dd 4f       	sbci	r29, 0xFD	; 253
    20b4:	78 81       	ld	r23, Y
    20b6:	c0 51       	subi	r28, 0x10	; 16
    20b8:	d2 40       	sbci	r29, 0x02	; 2
    20ba:	c1 5f       	subi	r28, 0xF1	; 241
    20bc:	dd 4f       	sbci	r29, 0xFD	; 253
    20be:	68 81       	ld	r22, Y
    20c0:	cf 50       	subi	r28, 0x0F	; 15
    20c2:	d2 40       	sbci	r29, 0x02	; 2
    20c4:	c2 5f       	subi	r28, 0xF2	; 242
    20c6:	dd 4f       	sbci	r29, 0xFD	; 253
    20c8:	58 81       	ld	r21, Y
    20ca:	ce 50       	subi	r28, 0x0E	; 14
    20cc:	d2 40       	sbci	r29, 0x02	; 2
    20ce:	c3 5f       	subi	r28, 0xF3	; 243
    20d0:	dd 4f       	sbci	r29, 0xFD	; 253
    20d2:	48 81       	ld	r20, Y
    20d4:	cd 50       	subi	r28, 0x0D	; 13
    20d6:	d2 40       	sbci	r29, 0x02	; 2
    20d8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    20dc:	22 ff       	sbrs	r18, 2
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <report+0x5ea>
    20e0:	22 e0       	ldi	r18, 0x02	; 2
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <report+0x5ee>
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	9f 93       	push	r25
    20ec:	8f 93       	push	r24
    20ee:	1f 92       	push	r1
    20f0:	7f 93       	push	r23
    20f2:	1f 92       	push	r1
    20f4:	6f 93       	push	r22
    20f6:	1f 92       	push	r1
    20f8:	5f 93       	push	r21
    20fa:	1f 92       	push	r1
    20fc:	4f 93       	push	r20
    20fe:	ce 01       	movw	r24, r28
    2100:	8a 56       	subi	r24, 0x6A	; 106
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	9f 93       	push	r25
    2106:	8f 93       	push	r24
    2108:	3f 93       	push	r19
    210a:	2f 93       	push	r18
    210c:	80 55       	subi	r24, 0x50	; 80
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	9f 93       	push	r25
    2112:	8f 93       	push	r24
    2114:	8e 01       	movw	r16, r28
    2116:	0f 5f       	subi	r16, 0xFF	; 255
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	1f 93       	push	r17
    211c:	0f 93       	push	r16
    211e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			checksum_NMEA(outbuf);
    2122:	c8 01       	movw	r24, r16
    2124:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2128:	f8 01       	movw	r30, r16
    212a:	01 90       	ld	r0, Z+
    212c:	00 20       	and	r0, r0
    212e:	e9 f7       	brne	.-6      	; 0x212a <report+0x62e>
    2130:	31 97       	sbiw	r30, 0x01	; 1
    2132:	af 01       	movw	r20, r30
    2134:	40 1b       	sub	r20, r16
    2136:	51 0b       	sbc	r21, r17
    2138:	b8 01       	movw	r22, r16
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2140:	c1 5f       	subi	r28, 0xF1	; 241
    2142:	dd 4f       	sbci	r29, 0xFD	; 253
    2144:	88 81       	ld	r24, Y
    2146:	cf 50       	subi	r28, 0x0F	; 15
    2148:	d2 40       	sbci	r29, 0x02	; 2
    214a:	1f 92       	push	r1
    214c:	8f 93       	push	r24
    214e:	c2 5f       	subi	r28, 0xF2	; 242
    2150:	dd 4f       	sbci	r29, 0xFD	; 253
    2152:	88 81       	ld	r24, Y
    2154:	ce 50       	subi	r28, 0x0E	; 14
    2156:	d2 40       	sbci	r29, 0x02	; 2
    2158:	1f 92       	push	r1
    215a:	8f 93       	push	r24
    215c:	ce 01       	movw	r24, r28
    215e:	89 58       	subi	r24, 0x89	; 137
    2160:	9e 4f       	sbci	r25, 0xFE	; 254
    2162:	9f 93       	push	r25
    2164:	8f 93       	push	r24
    2166:	1f 93       	push	r17
    2168:	0f 93       	push	r16
    216a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			writestr_OLED(1, outbuf, 1);
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	b8 01       	movw	r22, r16
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2178:	c0 5f       	subi	r28, 0xF0	; 240
    217a:	dd 4f       	sbci	r29, 0xFD	; 253
    217c:	88 81       	ld	r24, Y
    217e:	c0 51       	subi	r28, 0x10	; 16
    2180:	d2 40       	sbci	r29, 0x02	; 2
    2182:	1f 92       	push	r1
    2184:	8f 93       	push	r24
    2186:	c3 5f       	subi	r28, 0xF3	; 243
    2188:	dd 4f       	sbci	r29, 0xFD	; 253
    218a:	88 81       	ld	r24, Y
    218c:	cd 50       	subi	r28, 0x0D	; 13
    218e:	d2 40       	sbci	r29, 0x02	; 2
    2190:	1f 92       	push	r1
    2192:	8f 93       	push	r24
    2194:	ce 01       	movw	r24, r28
    2196:	86 57       	subi	r24, 0x76	; 118
    2198:	9e 4f       	sbci	r25, 0xFE	; 254
    219a:	9f 93       	push	r25
    219c:	8f 93       	push	r24
    219e:	1f 93       	push	r17
    21a0:	0f 93       	push	r16
    21a2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			writestr_OLED(1, outbuf, 2);
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	42 e0       	ldi	r20, 0x02	; 2
    21ac:	b8 01       	movw	r22, r16
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    21b4:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    21b6:	23 c1       	rjmp	.+582    	; 0x23fe <report+0x902>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    21b8:	ce 01       	movw	r24, r28
    21ba:	8a 56       	subi	r24, 0x6A	; 106
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    21c2:	24 e1       	ldi	r18, 0x14	; 20
    21c4:	ae 01       	movw	r20, r28
    21c6:	46 55       	subi	r20, 0x56	; 86
    21c8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	80 e5       	ldi	r24, 0x50	; 80
    21d0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <read_FRAM>
			get_BOOTTIME(boottime);
    21d4:	ce 01       	movw	r24, r28
    21d6:	82 54       	subi	r24, 0x42	; 66
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	0e 94 a1 05 	call	0xb42	; 0xb42 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    21de:	24 e3       	ldi	r18, 0x34	; 52
    21e0:	20 9f       	mul	r18, r16
    21e2:	c0 01       	movw	r24, r0
    21e4:	21 9f       	mul	r18, r17
    21e6:	90 0d       	add	r25, r0
    21e8:	11 24       	eor	r1, r1
    21ea:	81 5d       	subi	r24, 0xD1	; 209
    21ec:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    21ee:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    21f2:	22 ff       	sbrs	r18, 2
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <report+0x700>
    21f6:	22 e0       	ldi	r18, 0x02	; 2
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <report+0x704>
    21fc:	21 e0       	ldi	r18, 0x01	; 1
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	9f 93       	push	r25
    2202:	8f 93       	push	r24
    2204:	ce 01       	movw	r24, r28
    2206:	82 54       	subi	r24, 0x42	; 66
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	9f 93       	push	r25
    220c:	8f 93       	push	r24
    220e:	44 97       	sbiw	r24, 0x14	; 20
    2210:	9f 93       	push	r25
    2212:	8f 93       	push	r24
    2214:	8e 01       	movw	r16, r28
    2216:	0a 56       	subi	r16, 0x6A	; 106
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	1f 93       	push	r17
    221c:	0f 93       	push	r16
    221e:	3f 93       	push	r19
    2220:	2f 93       	push	r18
    2222:	8d 50       	subi	r24, 0x0D	; 13
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	8c 59       	subi	r24, 0x9C	; 156
    222c:	91 40       	sbci	r25, 0x01	; 1
    222e:	7c 01       	movw	r14, r24
    2230:	9f 93       	push	r25
    2232:	8f 93       	push	r24
    2234:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2238:	c7 01       	movw	r24, r14
    223a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    223e:	f7 01       	movw	r30, r14
    2240:	01 90       	ld	r0, Z+
    2242:	00 20       	and	r0, r0
    2244:	e9 f7       	brne	.-6      	; 0x2240 <report+0x744>
    2246:	31 97       	sbiw	r30, 0x01	; 1
    2248:	af 01       	movw	r20, r30
    224a:	4e 19       	sub	r20, r14
    224c:	5f 09       	sbc	r21, r15
    224e:	b7 01       	movw	r22, r14
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			writestr_OLED(1, "Time", 1);
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	65 ef       	ldi	r22, 0xF5	; 245
    225a:	7a e7       	ldi	r23, 0x7A	; 122
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2262:	b8 01       	movw	r22, r16
    2264:	65 5f       	subi	r22, 0xF5	; 245
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	42 e0       	ldi	r20, 0x02	; 2
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			break;
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2274:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2276:	c3 c0       	rjmp	.+390    	; 0x23fe <report+0x902>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 31 07 	call	0xe62	; 0xe62 <read_ionpump>
    227e:	f6 2e       	mov	r15, r22
    2280:	e7 2e       	mov	r14, r23
    2282:	d8 2e       	mov	r13, r24
    2284:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	0e 94 31 07 	call	0xe62	; 0xe62 <read_ionpump>
    228c:	b6 2e       	mov	r11, r22
    228e:	a7 2e       	mov	r10, r23
    2290:	98 2e       	mov	r9, r24
    2292:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2294:	ce 01       	movw	r24, r28
    2296:	8a 56       	subi	r24, 0x6A	; 106
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    229e:	24 e3       	ldi	r18, 0x34	; 52
    22a0:	20 9f       	mul	r18, r16
    22a2:	c0 01       	movw	r24, r0
    22a4:	21 9f       	mul	r18, r17
    22a6:	90 0d       	add	r25, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	81 5d       	subi	r24, 0xD1	; 209
    22ac:	97 4d       	sbci	r25, 0xD7	; 215
    22ae:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22b2:	22 ff       	sbrs	r18, 2
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <report+0x7c0>
    22b6:	22 e0       	ldi	r18, 0x02	; 2
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <report+0x7c4>
    22bc:	21 e0       	ldi	r18, 0x01	; 1
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	8f 92       	push	r8
    22c6:	9f 92       	push	r9
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	ce 01       	movw	r24, r28
    22d6:	8a 56       	subi	r24, 0x6A	; 106
    22d8:	9f 4f       	sbci	r25, 0xFF	; 255
    22da:	9f 93       	push	r25
    22dc:	8f 93       	push	r24
    22de:	3f 93       	push	r19
    22e0:	2f 93       	push	r18
    22e2:	8c 5d       	subi	r24, 0xDC	; 220
    22e4:	9e 4f       	sbci	r25, 0xFE	; 254
    22e6:	9f 93       	push	r25
    22e8:	8f 93       	push	r24
    22ea:	8e 01       	movw	r16, r28
    22ec:	0f 5f       	subi	r16, 0xFF	; 255
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	1f 93       	push	r17
    22f2:	0f 93       	push	r16
    22f4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			checksum_NMEA(outbuf);
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    22fe:	f8 01       	movw	r30, r16
    2300:	01 90       	ld	r0, Z+
    2302:	00 20       	and	r0, r0
    2304:	e9 f7       	brne	.-6      	; 0x2300 <report+0x804>
    2306:	31 97       	sbiw	r30, 0x01	; 1
    2308:	af 01       	movw	r20, r30
    230a:	40 1b       	sub	r20, r16
    230c:	51 0b       	sbc	r21, r17
    230e:	b8 01       	movw	r22, r16
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	6a ef       	ldi	r22, 0xFA	; 250
    231a:	7a e7       	ldi	r23, 0x7A	; 122
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2322:	8f 92       	push	r8
    2324:	9f 92       	push	r9
    2326:	af 92       	push	r10
    2328:	bf 92       	push	r11
    232a:	cf 92       	push	r12
    232c:	df 92       	push	r13
    232e:	ef 92       	push	r14
    2330:	ff 92       	push	r15
    2332:	ce 01       	movw	r24, r28
    2334:	8d 51       	subi	r24, 0x1D	; 29
    2336:	9e 4f       	sbci	r25, 0xFE	; 254
    2338:	9f 93       	push	r25
    233a:	8f 93       	push	r24
    233c:	1f 93       	push	r17
    233e:	0f 93       	push	r16
    2340:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2344:	42 e0       	ldi	r20, 0x02	; 2
    2346:	b8 01       	movw	r22, r16
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			break;
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2352:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2354:	54 c0       	rjmp	.+168    	; 0x23fe <report+0x902>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2356:	ce 01       	movw	r24, r28
    2358:	85 57       	subi	r24, 0x75	; 117
    235a:	9f 4f       	sbci	r25, 0xFF	; 255
    235c:	0e 94 a8 05 	call	0xb50	; 0xb50 <get_VERSION>
			get_time(currenttime);
    2360:	ce 01       	movw	r24, r28
    2362:	8a 56       	subi	r24, 0x6A	; 106
    2364:	9f 4f       	sbci	r25, 0xFF	; 255
    2366:	0e 94 25 05 	call	0xa4a	; 0xa4a <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    236a:	24 e3       	ldi	r18, 0x34	; 52
    236c:	20 9f       	mul	r18, r16
    236e:	c0 01       	movw	r24, r0
    2370:	21 9f       	mul	r18, r17
    2372:	90 0d       	add	r25, r0
    2374:	11 24       	eor	r1, r1
    2376:	81 5d       	subi	r24, 0xD1	; 209
    2378:	97 4d       	sbci	r25, 0xD7	; 215
    237a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    237e:	22 ff       	sbrs	r18, 2
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <report+0x88c>
    2382:	22 e0       	ldi	r18, 0x02	; 2
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	02 c0       	rjmp	.+4      	; 0x238c <report+0x890>
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	ce 01       	movw	r24, r28
    2392:	85 57       	subi	r24, 0x75	; 117
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	9f 93       	push	r25
    2398:	8f 93       	push	r24
    239a:	0b 96       	adiw	r24, 0x0b	; 11
    239c:	9f 93       	push	r25
    239e:	8f 93       	push	r24
    23a0:	3f 93       	push	r19
    23a2:	2f 93       	push	r18
    23a4:	86 5a       	subi	r24, 0xA6	; 166
    23a6:	9e 4f       	sbci	r25, 0xFE	; 254
    23a8:	9f 93       	push	r25
    23aa:	8f 93       	push	r24
    23ac:	8e 01       	movw	r16, r28
    23ae:	0f 5f       	subi	r16, 0xFF	; 255
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	1f 93       	push	r17
    23b4:	0f 93       	push	r16
    23b6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <sprintf>
			checksum_NMEA(outbuf);
    23ba:	c8 01       	movw	r24, r16
    23bc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23c0:	f8 01       	movw	r30, r16
    23c2:	01 90       	ld	r0, Z+
    23c4:	00 20       	and	r0, r0
    23c6:	e9 f7       	brne	.-6      	; 0x23c2 <report+0x8c6>
    23c8:	31 97       	sbiw	r30, 0x01	; 1
    23ca:	af 01       	movw	r20, r30
    23cc:	40 1b       	sub	r20, r16
    23ce:	51 0b       	sbc	r21, r17
    23d0:	b8 01       	movw	r22, r16
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0e 94 88 13 	call	0x2710	; 0x2710 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	68 e6       	ldi	r22, 0x68	; 104
    23dc:	7a e7       	ldi	r23, 0x7A	; 122
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			get_VERSION(outbuf);
    23e4:	c8 01       	movw	r24, r16
    23e6:	0e 94 a8 05 	call	0xb50	; 0xb50 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    23ea:	42 e0       	ldi	r20, 0x02	; 2
    23ec:	b8 01       	movw	r22, r16
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	0e 94 ad 0a 	call	0x155a	; 0x155a <writestr_OLED>
			break;
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <report+0x902>

		default:
			return(ERRORPROMPT);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    23fe:	c2 5e       	subi	r28, 0xE2	; 226
    2400:	dd 4f       	sbci	r29, 0xFD	; 253
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	bf 90       	pop	r11
    2418:	af 90       	pop	r10
    241a:	9f 90       	pop	r9
    241c:	8f 90       	pop	r8
    241e:	7f 90       	pop	r7
    2420:	6f 90       	pop	r6
    2422:	5f 90       	pop	r5
    2424:	4f 90       	pop	r4
    2426:	3f 90       	pop	r3
    2428:	2f 90       	pop	r2
    242a:	08 95       	ret

0000242c <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    242c:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    242e:	e0 e6       	ldi	r30, 0x60	; 96
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2434:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2436:	88 ed       	ldi	r24, 0xD8	; 216
    2438:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    243a:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <init_RTC+0x14>
		asm("nop");
    243e:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2440:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2444:	96 fd       	sbrc	r25, 6
    2446:	fb cf       	rjmp	.-10     	; 0x243e <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2448:	e0 e6       	ldi	r30, 0x60	; 96
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    244e:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2450:	28 ed       	ldi	r18, 0xD8	; 216
    2452:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2454:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2456:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2458:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    245a:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    245c:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <init_RTC+0x36>
		asm("nop");
    2460:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2462:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2466:	91 11       	cpse	r25, r1
    2468:	fb cf       	rjmp	.-10     	; 0x2460 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    246a:	e0 e4       	ldi	r30, 0x40	; 64
    246c:	f1 e0       	ldi	r31, 0x01	; 1
    246e:	42 87       	std	Z+10, r20	; 0x0a
    2470:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2476:	85 81       	ldd	r24, Z+5	; 0x05
    2478:	81 60       	ori	r24, 0x01	; 1
    247a:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    247c:	81 eb       	ldi	r24, 0xB1	; 177
    247e:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	81 60       	ori	r24, 0x01	; 1
    2484:	82 83       	std	Z+2, r24	; 0x02
    2486:	08 95       	ret

00002488 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	2f 93       	push	r18
    2494:	3f 93       	push	r19
    2496:	4f 93       	push	r20
    2498:	5f 93       	push	r21
    249a:	6f 93       	push	r22
    249c:	7f 93       	push	r23
    249e:	8f 93       	push	r24
    24a0:	9f 93       	push	r25
    24a2:	af 93       	push	r26
    24a4:	bf 93       	push	r27
    24a6:	ef 93       	push	r30
    24a8:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    24b0:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <timerOLED>
    24b4:	90 91 0d 2a 	lds	r25, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	b9 f0       	breq	.+46     	; 0x24ea <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    24bc:	20 91 0e 2a 	lds	r18, 0x2A0E	; 0x802a0e <timeoutOLED>
    24c0:	30 91 0f 2a 	lds	r19, 0x2A0F	; 0x802a0f <timeoutOLED+0x1>
    24c4:	28 17       	cp	r18, r24
    24c6:	39 07       	cpc	r19, r25
    24c8:	58 f4       	brcc	.+22     	; 0x24e0 <__vector_3+0x58>
			clear_OLED(0);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <clear_OLED>
			clear_OLED(1);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <clear_OLED>
			timerOLED = 0;
    24d6:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    24da:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
    24de:	05 c0       	rjmp	.+10     	; 0x24ea <__vector_3+0x62>
		} else {
			timerOLED++;
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    24e6:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    24ea:	80 e2       	ldi	r24, 0x20	; 32
    24ec:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	bf 91       	pop	r27
    24f6:	af 91       	pop	r26
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	7f 91       	pop	r23
    24fe:	6f 91       	pop	r22
    2500:	5f 91       	pop	r21
    2502:	4f 91       	pop	r20
    2504:	3f 91       	pop	r19
    2506:	2f 91       	pop	r18
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	0f 90       	pop	r0
    250e:	1f 90       	pop	r1
    2510:	18 95       	reti

00002512 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	24 e3       	ldi	r18, 0x34	; 52
    251a:	28 9f       	mul	r18, r24
    251c:	f0 01       	movw	r30, r0
    251e:	29 9f       	mul	r18, r25
    2520:	f0 0d       	add	r31, r0
    2522:	11 24       	eor	r1, r1
    2524:	ec 5f       	subi	r30, 0xFC	; 252
    2526:	f7 4d       	sbci	r31, 0xD7	; 215
    2528:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    252a:	24 37       	cpi	r18, 0x74	; 116
    252c:	e9 f4       	brne	.+58     	; 0x2568 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    252e:	24 e3       	ldi	r18, 0x34	; 52
    2530:	28 9f       	mul	r18, r24
    2532:	e0 01       	movw	r28, r0
    2534:	29 9f       	mul	r18, r25
    2536:	d0 0d       	add	r29, r0
    2538:	11 24       	eor	r1, r1
    253a:	ca 5f       	subi	r28, 0xFA	; 250
    253c:	d7 4d       	sbci	r29, 0xD7	; 215
    253e:	fe 01       	movw	r30, r28
    2540:	01 90       	ld	r0, Z+
    2542:	00 20       	and	r0, r0
    2544:	e9 f7       	brne	.-6      	; 0x2540 <set+0x2e>
    2546:	31 97       	sbiw	r30, 0x01	; 1
    2548:	ec 1b       	sub	r30, r28
    254a:	fd 0b       	sbc	r31, r29
    254c:	73 97       	sbiw	r30, 0x13	; 19
    254e:	71 f4       	brne	.+28     	; 0x256c <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2550:	ce 01       	movw	r24, r28
    2552:	0e 94 89 05 	call	0xb12	; 0xb12 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2556:	24 e1       	ldi	r18, 0x14	; 20
    2558:	ae 01       	movw	r20, r28
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	80 e5       	ldi	r24, 0x50	; 80
    2560:	0e 94 2d 06 	call	0xc5a	; 0xc5a <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	03 c0       	rjmp	.+6      	; 0x256e <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	01 c0       	rjmp	.+2      	; 0x256e <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    256c:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	08 95       	ret

00002574 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2574:	e0 ea       	ldi	r30, 0xA0	; 160
    2576:	f4 e0       	ldi	r31, 0x04	; 4
    2578:	82 89       	ldd	r24, Z+18	; 0x12
    257a:	87 7f       	andi	r24, 0xF7	; 247
    257c:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    257e:	84 e0       	ldi	r24, 0x04	; 4
    2580:	82 83       	std	Z+2, r24	; 0x02
    2582:	08 95       	ret

00002584 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	18 f0       	brcs	.+6      	; 0x258e <get_temperature+0xa>
    2588:	83 30       	cpi	r24, 0x03	; 3
    258a:	21 f0       	breq	.+8      	; 0x2594 <get_temperature+0x10>
    258c:	06 c0       	rjmp	.+12     	; 0x259a <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    258e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <read_AD590>
			break;
    2592:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2594:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <read_MCP9808>
			break;
    2598:	08 95       	ret
		default:
			temperature = -999.9;
    259a:	6a e9       	ldi	r22, 0x9A	; 154
    259c:	79 ef       	ldi	r23, 0xF9	; 249
    259e:	89 e7       	ldi	r24, 0x79	; 121
    25a0:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    25a2:	08 95       	ret

000025a4 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    25a4:	e0 ea       	ldi	r30, 0xA0	; 160
    25a6:	f8 e0       	ldi	r31, 0x08	; 8
    25a8:	8b e0       	ldi	r24, 0x0B	; 11
    25aa:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    25ac:	83 81       	ldd	r24, Z+3	; 0x03
    25ae:	81 60       	ori	r24, 0x01	; 1
    25b0:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    25b2:	85 81       	ldd	r24, Z+5	; 0x05
    25b4:	81 60       	ori	r24, 0x01	; 1
    25b6:	85 83       	std	Z+5, r24	; 0x05
    25b8:	08 95       	ret

000025ba <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <read_TWI+0x4>
		asm("nop");								// Should set timer here
    25bc:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    25be:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    25c2:	88 23       	and	r24, r24
    25c4:	dc f7       	brge	.-10     	; 0x25bc <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    25c6:	e0 ea       	ldi	r30, 0xA0	; 160
    25c8:	f8 e0       	ldi	r31, 0x08	; 8
    25ca:	84 81       	ldd	r24, Z+4	; 0x04
    25cc:	8b 7f       	andi	r24, 0xFB	; 251
    25ce:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    25d0:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    25d2:	94 81       	ldd	r25, Z+4	; 0x04
    25d4:	92 60       	ori	r25, 0x02	; 2
    25d6:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    25d8:	08 95       	ret

000025da <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    25da:	01 c0       	rjmp	.+2      	; 0x25de <readlast_TWI+0x4>
		asm("nop");
    25dc:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    25de:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    25e2:	88 23       	and	r24, r24
    25e4:	dc f7       	brge	.-10     	; 0x25dc <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    25e6:	e0 ea       	ldi	r30, 0xA0	; 160
    25e8:	f8 e0       	ldi	r31, 0x08	; 8
    25ea:	84 81       	ldd	r24, Z+4	; 0x04
    25ec:	84 60       	ori	r24, 0x04	; 4
    25ee:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    25f0:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    25f2:	08 95       	ret

000025f4 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    25f4:	61 30       	cpi	r22, 0x01	; 1
    25f6:	29 f4       	brne	.+10     	; 0x2602 <start_TWI+0xe>
//		addr |= 0x01;
		addr = ((addr << 1) | 0x01);
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	81 60       	ori	r24, 0x01	; 1
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <start_TWI+0x10>

	} else {
		addr = ((addr << 1) & ~0x01);
    2602:	88 0f       	add	r24, r24
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition
    2604:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    2608:	01 c0       	rjmp	.+2      	; 0x260c <start_TWI+0x18>
		asm("nop");								// Wait for addr transmission
    260a:	00 00       	nop
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    260c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2610:	80 7c       	andi	r24, 0xC0	; 192
    2612:	d9 f3       	breq	.-10     	; 0x260a <start_TWI+0x16>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    2614:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2618:	82 fd       	sbrc	r24, 2
    261a:	0c c0       	rjmp	.+24     	; 0x2634 <start_TWI+0x40>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    261c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2620:	83 fd       	sbrc	r24, 3
    2622:	0a c0       	rjmp	.+20     	; 0x2638 <start_TWI+0x44>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2624:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2628:	89 2f       	mov	r24, r25
    262a:	80 71       	andi	r24, 0x10	; 16
    262c:	94 ff       	sbrs	r25, 4
    262e:	05 c0       	rjmp	.+10     	; 0x263a <start_TWI+0x46>
		return(TWINODEVICE);
    2630:	84 e0       	ldi	r24, 0x04	; 4
    2632:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2638:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    263a:	08 95       	ret

0000263c <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    263c:	87 e0       	ldi	r24, 0x07	; 7
    263e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2642:	08 95       	ret

00002644 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <write_TWI+0x4>
		asm("nop");
    2646:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2648:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    264c:	96 ff       	sbrs	r25, 6
    264e:	fb cf       	rjmp	.-10     	; 0x2646 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2650:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <write_TWI+0x14>
		asm("nop");
    2656:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2658:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    265c:	86 ff       	sbrs	r24, 6
    265e:	fb cf       	rjmp	.-10     	; 0x2656 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2660:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2664:	89 2f       	mov	r24, r25
    2666:	80 71       	andi	r24, 0x10	; 16
    2668:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    266a:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    266c:	08 95       	ret

0000266e <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    266e:	e0 e0       	ldi	r30, 0x00	; 0
    2670:	f4 e0       	ldi	r31, 0x04	; 4
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2676:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2678:	e0 e0       	ldi	r30, 0x00	; 0
    267a:	f8 e0       	ldi	r31, 0x08	; 8
    267c:	2d e6       	ldi	r18, 0x6D	; 109
    267e:	35 e0       	ldi	r19, 0x05	; 5
    2680:	20 87       	std	Z+8, r18	; 0x08
    2682:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2684:	95 81       	ldd	r25, Z+5	; 0x05
    2686:	90 68       	ori	r25, 0x80	; 128
    2688:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    268a:	96 81       	ldd	r25, Z+6	; 0x06
    268c:	90 64       	ori	r25, 0x40	; 64
    268e:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2690:	96 81       	ldd	r25, Z+6	; 0x06
    2692:	90 68       	ori	r25, 0x80	; 128
    2694:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2696:	10 92 9b 2b 	sts	0x2B9B, r1	; 0x802b9b <send0_buf+0x80>
	send0_buf.tail = 0;
    269a:	10 92 9c 2b 	sts	0x2B9C, r1	; 0x802b9c <send0_buf+0x81>
	send0_buf.done = YES;
    269e:	80 93 9f 2b 	sts	0x2B9F, r24	; 0x802b9f <send0_buf+0x84>
	recv0_buf.head = 0;
    26a2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv0_buf+0x80>
	recv0_buf.tail = 0;
    26a6:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf+0x81>
	recv0_buf.data[0] = '\0';
    26aa:	10 92 96 2a 	sts	0x2A96, r1	; 0x802a96 <recv0_buf>
	recv0_buf.done = NO;
    26ae:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv0_buf+0x84>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    26b2:	e0 e4       	ldi	r30, 0x40	; 64
    26b4:	f4 e0       	ldi	r31, 0x04	; 4
    26b6:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    26b8:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    26ba:	e0 e2       	ldi	r30, 0x20	; 32
    26bc:	f8 e0       	ldi	r31, 0x08	; 8
    26be:	20 87       	std	Z+8, r18	; 0x08
    26c0:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    26c2:	96 81       	ldd	r25, Z+6	; 0x06
    26c4:	90 64       	ori	r25, 0x40	; 64
    26c6:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    26c8:	96 81       	ldd	r25, Z+6	; 0x06
    26ca:	90 68       	ori	r25, 0x80	; 128
    26cc:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    26ce:	10 92 2a 2d 	sts	0x2D2A, r1	; 0x802d2a <send1_buf+0x80>
	send1_buf.tail = 0;
    26d2:	10 92 2b 2d 	sts	0x2D2B, r1	; 0x802d2b <send1_buf+0x81>
	send1_buf.done = YES;
    26d6:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <send1_buf+0x84>
	recv1_buf.head = 0;
    26da:	10 92 91 2a 	sts	0x2A91, r1	; 0x802a91 <recv1_buf+0x80>
	recv1_buf.tail = 0;
    26de:	10 92 92 2a 	sts	0x2A92, r1	; 0x802a92 <recv1_buf+0x81>
	recv1_buf.data[0] = '\0';
    26e2:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <recv1_buf>
	recv1_buf.done = NO;
    26e6:	10 92 95 2a 	sts	0x2A95, r1	; 0x802a95 <recv1_buf+0x84>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    26ea:	e0 e2       	ldi	r30, 0x20	; 32
    26ec:	f4 e0       	ldi	r31, 0x04	; 4
    26ee:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    26f0:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    26f2:	e0 e6       	ldi	r30, 0x60	; 96
    26f4:	f8 e0       	ldi	r31, 0x08	; 8
    26f6:	20 87       	std	Z+8, r18	; 0x08
    26f8:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    26fa:	96 81       	ldd	r25, Z+6	; 0x06
    26fc:	90 64       	ori	r25, 0x40	; 64
    26fe:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    2700:	96 81       	ldd	r25, Z+6	; 0x06
    2702:	90 68       	ori	r25, 0x80	; 128
    2704:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    2706:	80 93 a9 2c 	sts	0x2CA9, r24	; 0x802ca9 <send3_buf+0x84>
	recv3_buf.done = NO;
    270a:	10 92 24 2c 	sts	0x2C24, r1	; 0x802c24 <recv3_buf+0x84>
    270e:	08 95       	ret

00002710 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    2710:	fb 01       	movw	r30, r22

	uint8_t i;

	switch (port) {
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	09 f4       	brne	.+2      	; 0x2718 <send_USART+0x8>
    2716:	40 c0       	rjmp	.+128    	; 0x2798 <send_USART+0x88>
    2718:	e8 f0       	brcs	.+58     	; 0x2754 <send_USART+0x44>
    271a:	83 30       	cpi	r24, 0x03	; 3
    271c:	09 f4       	brne	.+2      	; 0x2720 <send_USART+0x10>
    271e:	5e c0       	rjmp	.+188    	; 0x27dc <send_USART+0xcc>
    2720:	08 95       	ret
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2722:	80 91 9b 2b 	lds	r24, 0x2B9B	; 0x802b9b <send0_buf+0x80>
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	bf 01       	movw	r22, r30
    272a:	6f 5f       	subi	r22, 0xFF	; 255
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	30 81       	ld	r19, Z
    2730:	fc 01       	movw	r30, r24
    2732:	e5 5e       	subi	r30, 0xE5	; 229
    2734:	f4 4d       	sbci	r31, 0xD4	; 212
    2736:	30 83       	st	Z, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	8f 77       	andi	r24, 0x7F	; 127
    273c:	90 78       	andi	r25, 0x80	; 128
    273e:	99 23       	and	r25, r25
    2740:	24 f4       	brge	.+8      	; 0x274a <send_USART+0x3a>
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	80 68       	ori	r24, 0x80	; 128
    2746:	9f 6f       	ori	r25, 0xFF	; 255
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	80 93 9b 2b 	sts	0x2B9B, r24	; 0x802b9b <send0_buf+0x80>

	uint8_t i;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    274e:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2750:	fb 01       	movw	r30, r22
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <send_USART+0x46>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2754:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2756:	24 17       	cp	r18, r20
    2758:	20 f3       	brcs	.-56     	; 0x2722 <send_USART+0x12>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    275a:	e0 e0       	ldi	r30, 0x00	; 0
    275c:	f8 e0       	ldi	r31, 0x08	; 8
    275e:	85 81       	ldd	r24, Z+5	; 0x05
    2760:	80 62       	ori	r24, 0x20	; 32
    2762:	85 83       	std	Z+5, r24	; 0x05
			break;
    2764:	08 95       	ret

		case 1:
			for (i = 0; i < nbytes; i++) {
				send1_buf.data[send1_buf.head] = *data++;
    2766:	80 91 2a 2d 	lds	r24, 0x2D2A	; 0x802d2a <send1_buf+0x80>
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	bf 01       	movw	r22, r30
    276e:	6f 5f       	subi	r22, 0xFF	; 255
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	30 81       	ld	r19, Z
    2774:	fc 01       	movw	r30, r24
    2776:	e6 55       	subi	r30, 0x56	; 86
    2778:	f3 4d       	sbci	r31, 0xD3	; 211
    277a:	30 83       	st	Z, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	8f 77       	andi	r24, 0x7F	; 127
    2780:	90 78       	andi	r25, 0x80	; 128
    2782:	99 23       	and	r25, r25
    2784:	24 f4       	brge	.+8      	; 0x278e <send_USART+0x7e>
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	80 68       	ori	r24, 0x80	; 128
    278a:	9f 6f       	ori	r25, 0xFF	; 255
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	80 93 2a 2d 	sts	0x2D2A, r24	; 0x802d2a <send1_buf+0x80>
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    2792:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2794:	fb 01       	movw	r30, r22
    2796:	01 c0       	rjmp	.+2      	; 0x279a <send_USART+0x8a>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2798:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    279a:	24 17       	cp	r18, r20
    279c:	20 f3       	brcs	.-56     	; 0x2766 <send_USART+0x56>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    279e:	e0 e2       	ldi	r30, 0x20	; 32
    27a0:	f8 e0       	ldi	r31, 0x08	; 8
    27a2:	85 81       	ldd	r24, Z+5	; 0x05
    27a4:	80 62       	ori	r24, 0x20	; 32
    27a6:	85 83       	std	Z+5, r24	; 0x05
			break;
    27a8:	08 95       	ret

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    27aa:	80 91 a5 2c 	lds	r24, 0x2CA5	; 0x802ca5 <send3_buf+0x80>
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	bf 01       	movw	r22, r30
    27b2:	6f 5f       	subi	r22, 0xFF	; 255
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	30 81       	ld	r19, Z
    27b8:	fc 01       	movw	r30, r24
    27ba:	eb 5d       	subi	r30, 0xDB	; 219
    27bc:	f3 4d       	sbci	r31, 0xD3	; 211
    27be:	30 83       	st	Z, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	8f 77       	andi	r24, 0x7F	; 127
    27c4:	90 78       	andi	r25, 0x80	; 128
    27c6:	99 23       	and	r25, r25
    27c8:	24 f4       	brge	.+8      	; 0x27d2 <send_USART+0xc2>
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	80 68       	ori	r24, 0x80	; 128
    27ce:	9f 6f       	ori	r25, 0xFF	; 255
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	80 93 a5 2c 	sts	0x2CA5, r24	; 0x802ca5 <send3_buf+0x80>
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    27d6:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    27d8:	fb 01       	movw	r30, r22
    27da:	01 c0       	rjmp	.+2      	; 0x27de <send_USART+0xce>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    27dc:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    27de:	24 17       	cp	r18, r20
    27e0:	20 f3       	brcs	.-56     	; 0x27aa <send_USART+0x9a>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    27e2:	e0 e6       	ldi	r30, 0x60	; 96
    27e4:	f8 e0       	ldi	r31, 0x08	; 8
    27e6:	85 81       	ldd	r24, Z+5	; 0x05
    27e8:	80 62       	ori	r24, 0x20	; 32
    27ea:	85 83       	std	Z+5, r24	; 0x05
    27ec:	08 95       	ret

000027ee <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	8f 93       	push	r24
    27fa:	9f 93       	push	r25
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    2800:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    2804:	8d 30       	cpi	r24, 0x0D	; 13
    2806:	61 f4       	brne	.+24     	; 0x2820 <__vector_17+0x32>
		recv0_buf.done = YES;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 1a 2b 	sts	0x2B1A, r24	; 0x802b1a <recv0_buf+0x84>
		recv0_buf.data[recv0_buf.head] = '\0';
    280e:	e0 91 16 2b 	lds	r30, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	ea 56       	subi	r30, 0x6A	; 106
    2816:	f5 4d       	sbci	r31, 0xD5	; 213
    2818:	10 82       	st	Z, r1
		charcount = 0;
    281a:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <charcount>
    281e:	0b c0       	rjmp	.+22     	; 0x2836 <__vector_17+0x48>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    2820:	e0 91 16 2b 	lds	r30, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	ea 56       	subi	r30, 0x6A	; 106
    2828:	f5 4d       	sbci	r31, 0xD5	; 213
    282a:	80 83       	st	Z, r24
		charcount++;
    282c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <charcount>
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <charcount>
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2836:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	8f 77       	andi	r24, 0x7F	; 127
    2840:	90 78       	andi	r25, 0x80	; 128
    2842:	99 23       	and	r25, r25
    2844:	24 f4       	brge	.+8      	; 0x284e <__vector_17+0x60>
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	80 68       	ori	r24, 0x80	; 128
    284a:	9f 6f       	ori	r25, 0xFF	; 255
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv0_buf+0x80>

}
    2852:	ff 91       	pop	r31
    2854:	ef 91       	pop	r30
    2856:	9f 91       	pop	r25
    2858:	8f 91       	pop	r24
    285a:	0f 90       	pop	r0
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	0f 90       	pop	r0
    2860:	1f 90       	pop	r1
    2862:	18 95       	reti

00002864 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2864:	1f 92       	push	r1
    2866:	0f 92       	push	r0
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	0f 92       	push	r0
    286c:	11 24       	eor	r1, r1
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	ef 93       	push	r30
    2874:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2876:	e0 e0       	ldi	r30, 0x00	; 0
    2878:	f8 e0       	ldi	r31, 0x08	; 8
    287a:	85 81       	ldd	r24, Z+5	; 0x05
    287c:	8f 7d       	andi	r24, 0xDF	; 223
    287e:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2880:	80 91 9b 2b 	lds	r24, 0x2B9B	; 0x802b9b <send0_buf+0x80>
    2884:	e0 91 9c 2b 	lds	r30, 0x2B9C	; 0x802b9c <send0_buf+0x81>
    2888:	8e 17       	cp	r24, r30
    288a:	81 f0       	breq	.+32     	; 0x28ac <__vector_18+0x48>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	8e 0f       	add	r24, r30
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	e5 5e       	subi	r30, 0xE5	; 229
    2894:	f4 4d       	sbci	r31, 0xD4	; 212
    2896:	90 81       	ld	r25, Z
    2898:	e0 e0       	ldi	r30, 0x00	; 0
    289a:	f8 e0       	ldi	r31, 0x08	; 8
    289c:	92 83       	std	Z+2, r25	; 0x02
		send0_buf.tail %= BUFSIZE;
    289e:	8f 77       	andi	r24, 0x7F	; 127
    28a0:	80 93 9c 2b 	sts	0x2B9C, r24	; 0x802b9c <send0_buf+0x81>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    28a4:	85 81       	ldd	r24, Z+5	; 0x05
    28a6:	80 62       	ori	r24, 0x20	; 32
    28a8:	85 83       	std	Z+5, r24	; 0x05
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <__vector_18+0x4e>
	} else {
		send0_buf.done = YES;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	80 93 9f 2b 	sts	0x2B9F, r24	; 0x802b9f <send0_buf+0x84>
	}

}
    28b2:	ff 91       	pop	r31
    28b4:	ef 91       	pop	r30
    28b6:	9f 91       	pop	r25
    28b8:	8f 91       	pop	r24
    28ba:	0f 90       	pop	r0
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	0f 90       	pop	r0
    28c0:	1f 90       	pop	r1
    28c2:	18 95       	reti

000028c4 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	8f 93       	push	r24
    28d0:	9f 93       	push	r25
    28d2:	af 93       	push	r26
    28d4:	bf 93       	push	r27
    28d6:	ef 93       	push	r30
    28d8:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    28da:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    28de:	8d 30       	cpi	r24, 0x0D	; 13
    28e0:	21 f0       	breq	.+8      	; 0x28ea <__vector_26+0x26>
    28e2:	e0 91 94 2a 	lds	r30, 0x2A94	; 0x802a94 <recv1_buf+0x83>
    28e6:	ef 37       	cpi	r30, 0x7F	; 127
    28e8:	78 f0       	brcs	.+30     	; 0x2908 <__vector_26+0x44>
		recv1_buf.done = YES;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 95 2a 	sts	0x2A95, r24	; 0x802a95 <recv1_buf+0x84>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    28f0:	a4 e9       	ldi	r26, 0x94	; 148
    28f2:	ba e2       	ldi	r27, 0x2A	; 42
    28f4:	8c 91       	ld	r24, X
    28f6:	e8 2f       	mov	r30, r24
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	ef 5e       	subi	r30, 0xEF	; 239
    28fc:	f5 4d       	sbci	r31, 0xD5	; 213
    28fe:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    2900:	80 93 93 2a 	sts	0x2A93, r24	; 0x802a93 <recv1_buf+0x82>
		recv1_buf.nxfrd = 0;
    2904:	1c 92       	st	X, r1
		return;
    2906:	08 c0       	rjmp	.+16     	; 0x2918 <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	9e 0f       	add	r25, r30
    290c:	90 93 94 2a 	sts	0x2A94, r25	; 0x802a94 <recv1_buf+0x83>
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	ef 5e       	subi	r30, 0xEF	; 239
    2914:	f5 4d       	sbci	r31, 0xD5	; 213
    2916:	80 83       	st	Z, r24
	}

}
    2918:	ff 91       	pop	r31
    291a:	ef 91       	pop	r30
    291c:	bf 91       	pop	r27
    291e:	af 91       	pop	r26
    2920:	9f 91       	pop	r25
    2922:	8f 91       	pop	r24
    2924:	0f 90       	pop	r0
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	0f 90       	pop	r0
    292a:	1f 90       	pop	r1
    292c:	18 95       	reti

0000292e <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    292e:	1f 92       	push	r1
    2930:	0f 92       	push	r0
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	0f 92       	push	r0
    2936:	11 24       	eor	r1, r1
    2938:	8f 93       	push	r24
    293a:	9f 93       	push	r25
    293c:	ef 93       	push	r30
    293e:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2940:	e0 e2       	ldi	r30, 0x20	; 32
    2942:	f8 e0       	ldi	r31, 0x08	; 8
    2944:	85 81       	ldd	r24, Z+5	; 0x05
    2946:	8f 7d       	andi	r24, 0xDF	; 223
    2948:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    294a:	80 91 2a 2d 	lds	r24, 0x2D2A	; 0x802d2a <send1_buf+0x80>
    294e:	e0 91 2b 2d 	lds	r30, 0x2D2B	; 0x802d2b <send1_buf+0x81>
    2952:	8e 17       	cp	r24, r30
    2954:	81 f0       	breq	.+32     	; 0x2976 <__vector_27+0x48>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	8e 0f       	add	r24, r30
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	e6 55       	subi	r30, 0x56	; 86
    295e:	f3 4d       	sbci	r31, 0xD3	; 211
    2960:	90 81       	ld	r25, Z
    2962:	e0 e2       	ldi	r30, 0x20	; 32
    2964:	f8 e0       	ldi	r31, 0x08	; 8
    2966:	92 83       	std	Z+2, r25	; 0x02
		send1_buf.tail %= BUFSIZE;
    2968:	8f 77       	andi	r24, 0x7F	; 127
    296a:	80 93 2b 2d 	sts	0x2D2B, r24	; 0x802d2b <send1_buf+0x81>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    296e:	85 81       	ldd	r24, Z+5	; 0x05
    2970:	80 62       	ori	r24, 0x20	; 32
    2972:	85 83       	std	Z+5, r24	; 0x05
    2974:	03 c0       	rjmp	.+6      	; 0x297c <__vector_27+0x4e>
		} else {
		send1_buf.done = YES;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <send1_buf+0x84>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    297c:	ff 91       	pop	r31
    297e:	ef 91       	pop	r30
    2980:	9f 91       	pop	r25
    2982:	8f 91       	pop	r24
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	0f 90       	pop	r0
    298a:	1f 90       	pop	r1
    298c:	18 95       	reti

0000298e <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    298e:	1f 92       	push	r1
    2990:	0f 92       	push	r0
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	0f 92       	push	r0
    2996:	11 24       	eor	r1, r1
    2998:	8f 93       	push	r24
    299a:	9f 93       	push	r25
    299c:	af 93       	push	r26
    299e:	bf 93       	push	r27
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    29a4:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    29a8:	8d 30       	cpi	r24, 0x0D	; 13
    29aa:	21 f0       	breq	.+8      	; 0x29b4 <__vector_37+0x26>
    29ac:	e0 91 23 2c 	lds	r30, 0x2C23	; 0x802c23 <recv3_buf+0x83>
    29b0:	ef 37       	cpi	r30, 0x7F	; 127
    29b2:	78 f0       	brcs	.+30     	; 0x29d2 <__vector_37+0x44>
		recv3_buf.done = YES;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <recv3_buf+0x84>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    29ba:	a3 e2       	ldi	r26, 0x23	; 35
    29bc:	bc e2       	ldi	r27, 0x2C	; 44
    29be:	8c 91       	ld	r24, X
    29c0:	e8 2f       	mov	r30, r24
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	e0 56       	subi	r30, 0x60	; 96
    29c6:	f4 4d       	sbci	r31, 0xD4	; 212
    29c8:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    29ca:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <recv3_buf+0x82>
		recv3_buf.nxfrd = 0;
    29ce:	1c 92       	st	X, r1
		return;
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	9e 0f       	add	r25, r30
    29d6:	90 93 23 2c 	sts	0x2C23, r25	; 0x802c23 <recv3_buf+0x83>
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	e0 56       	subi	r30, 0x60	; 96
    29de:	f4 4d       	sbci	r31, 0xD4	; 212
    29e0:	80 83       	st	Z, r24
	}

}
    29e2:	ff 91       	pop	r31
    29e4:	ef 91       	pop	r30
    29e6:	bf 91       	pop	r27
    29e8:	af 91       	pop	r26
    29ea:	9f 91       	pop	r25
    29ec:	8f 91       	pop	r24
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	0f 90       	pop	r0
    29f4:	1f 90       	pop	r1
    29f6:	18 95       	reti

000029f8 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    29f8:	1f 92       	push	r1
    29fa:	0f 92       	push	r0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	0f 92       	push	r0
    2a00:	11 24       	eor	r1, r1
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	ef 93       	push	r30
    2a0c:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2a0e:	a8 ea       	ldi	r26, 0xA8	; 168
    2a10:	bc e2       	ldi	r27, 0x2C	; 44
    2a12:	ec 91       	ld	r30, X
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	8e 0f       	add	r24, r30
    2a18:	8c 93       	st	X, r24
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	eb 5d       	subi	r30, 0xDB	; 219
    2a1e:	f3 4d       	sbci	r31, 0xD3	; 211
    2a20:	90 81       	ld	r25, Z
    2a22:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2a26:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <send3_buf+0x82>
    2a2a:	89 17       	cp	r24, r25
    2a2c:	40 f0       	brcs	.+16     	; 0x2a3e <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2a2e:	e0 e6       	ldi	r30, 0x60	; 96
    2a30:	f8 e0       	ldi	r31, 0x08	; 8
    2a32:	85 81       	ldd	r24, Z+5	; 0x05
    2a34:	8f 7d       	andi	r24, 0xDF	; 223
    2a36:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 a9 2c 	sts	0x2CA9, r24	; 0x802ca9 <send3_buf+0x84>
	}

}
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	0f 90       	pop	r0
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	0f 90       	pop	r0
    2a50:	1f 90       	pop	r1
    2a52:	18 95       	reti

00002a54 <reboot>:
#include "globals.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    2a54:	88 ed       	ldi	r24, 0xD8	; 216
    2a56:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2a5e:	08 95       	ret

00002a60 <__subsf3>:
    2a60:	50 58       	subi	r21, 0x80	; 128

00002a62 <__addsf3>:
    2a62:	bb 27       	eor	r27, r27
    2a64:	aa 27       	eor	r26, r26
    2a66:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__addsf3x>
    2a6a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__fp_round>
    2a6e:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscA>
    2a72:	38 f0       	brcs	.+14     	; 0x2a82 <__addsf3+0x20>
    2a74:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__fp_pscB>
    2a78:	20 f0       	brcs	.+8      	; 0x2a82 <__addsf3+0x20>
    2a7a:	39 f4       	brne	.+14     	; 0x2a8a <__addsf3+0x28>
    2a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a7e:	19 f4       	brne	.+6      	; 0x2a86 <__addsf3+0x24>
    2a80:	26 f4       	brtc	.+8      	; 0x2a8a <__addsf3+0x28>
    2a82:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__fp_nan>
    2a86:	0e f4       	brtc	.+2      	; 0x2a8a <__addsf3+0x28>
    2a88:	e0 95       	com	r30
    2a8a:	e7 fb       	bst	r30, 7
    2a8c:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_inf>

00002a90 <__addsf3x>:
    2a90:	e9 2f       	mov	r30, r25
    2a92:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__fp_split3>
    2a96:	58 f3       	brcs	.-42     	; 0x2a6e <__addsf3+0xc>
    2a98:	ba 17       	cp	r27, r26
    2a9a:	62 07       	cpc	r22, r18
    2a9c:	73 07       	cpc	r23, r19
    2a9e:	84 07       	cpc	r24, r20
    2aa0:	95 07       	cpc	r25, r21
    2aa2:	20 f0       	brcs	.+8      	; 0x2aac <__addsf3x+0x1c>
    2aa4:	79 f4       	brne	.+30     	; 0x2ac4 <__addsf3x+0x34>
    2aa6:	a6 f5       	brtc	.+104    	; 0x2b10 <__addsf3x+0x80>
    2aa8:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__fp_zero>
    2aac:	0e f4       	brtc	.+2      	; 0x2ab0 <__addsf3x+0x20>
    2aae:	e0 95       	com	r30
    2ab0:	0b 2e       	mov	r0, r27
    2ab2:	ba 2f       	mov	r27, r26
    2ab4:	a0 2d       	mov	r26, r0
    2ab6:	0b 01       	movw	r0, r22
    2ab8:	b9 01       	movw	r22, r18
    2aba:	90 01       	movw	r18, r0
    2abc:	0c 01       	movw	r0, r24
    2abe:	ca 01       	movw	r24, r20
    2ac0:	a0 01       	movw	r20, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	ff 27       	eor	r31, r31
    2ac6:	59 1b       	sub	r21, r25
    2ac8:	99 f0       	breq	.+38     	; 0x2af0 <__addsf3x+0x60>
    2aca:	59 3f       	cpi	r21, 0xF9	; 249
    2acc:	50 f4       	brcc	.+20     	; 0x2ae2 <__addsf3x+0x52>
    2ace:	50 3e       	cpi	r21, 0xE0	; 224
    2ad0:	68 f1       	brcs	.+90     	; 0x2b2c <__addsf3x+0x9c>
    2ad2:	1a 16       	cp	r1, r26
    2ad4:	f0 40       	sbci	r31, 0x00	; 0
    2ad6:	a2 2f       	mov	r26, r18
    2ad8:	23 2f       	mov	r18, r19
    2ada:	34 2f       	mov	r19, r20
    2adc:	44 27       	eor	r20, r20
    2ade:	58 5f       	subi	r21, 0xF8	; 248
    2ae0:	f3 cf       	rjmp	.-26     	; 0x2ac8 <__addsf3x+0x38>
    2ae2:	46 95       	lsr	r20
    2ae4:	37 95       	ror	r19
    2ae6:	27 95       	ror	r18
    2ae8:	a7 95       	ror	r26
    2aea:	f0 40       	sbci	r31, 0x00	; 0
    2aec:	53 95       	inc	r21
    2aee:	c9 f7       	brne	.-14     	; 0x2ae2 <__addsf3x+0x52>
    2af0:	7e f4       	brtc	.+30     	; 0x2b10 <__addsf3x+0x80>
    2af2:	1f 16       	cp	r1, r31
    2af4:	ba 0b       	sbc	r27, r26
    2af6:	62 0b       	sbc	r22, r18
    2af8:	73 0b       	sbc	r23, r19
    2afa:	84 0b       	sbc	r24, r20
    2afc:	ba f0       	brmi	.+46     	; 0x2b2c <__addsf3x+0x9c>
    2afe:	91 50       	subi	r25, 0x01	; 1
    2b00:	a1 f0       	breq	.+40     	; 0x2b2a <__addsf3x+0x9a>
    2b02:	ff 0f       	add	r31, r31
    2b04:	bb 1f       	adc	r27, r27
    2b06:	66 1f       	adc	r22, r22
    2b08:	77 1f       	adc	r23, r23
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	c2 f7       	brpl	.-16     	; 0x2afe <__addsf3x+0x6e>
    2b0e:	0e c0       	rjmp	.+28     	; 0x2b2c <__addsf3x+0x9c>
    2b10:	ba 0f       	add	r27, r26
    2b12:	62 1f       	adc	r22, r18
    2b14:	73 1f       	adc	r23, r19
    2b16:	84 1f       	adc	r24, r20
    2b18:	48 f4       	brcc	.+18     	; 0x2b2c <__addsf3x+0x9c>
    2b1a:	87 95       	ror	r24
    2b1c:	77 95       	ror	r23
    2b1e:	67 95       	ror	r22
    2b20:	b7 95       	ror	r27
    2b22:	f7 95       	ror	r31
    2b24:	9e 3f       	cpi	r25, 0xFE	; 254
    2b26:	08 f0       	brcs	.+2      	; 0x2b2a <__addsf3x+0x9a>
    2b28:	b0 cf       	rjmp	.-160    	; 0x2a8a <__addsf3+0x28>
    2b2a:	93 95       	inc	r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <__addsf3x+0xa2>
    2b30:	99 27       	eor	r25, r25
    2b32:	ee 0f       	add	r30, r30
    2b34:	97 95       	ror	r25
    2b36:	87 95       	ror	r24
    2b38:	08 95       	ret

00002b3a <__cmpsf2>:
    2b3a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__fp_cmp>
    2b3e:	08 f4       	brcc	.+2      	; 0x2b42 <__cmpsf2+0x8>
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	08 95       	ret

00002b44 <__divsf3>:
    2b44:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__divsf3x>
    2b48:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__fp_round>
    2b4c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__fp_pscB>
    2b50:	58 f0       	brcs	.+22     	; 0x2b68 <__divsf3+0x24>
    2b52:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscA>
    2b56:	40 f0       	brcs	.+16     	; 0x2b68 <__divsf3+0x24>
    2b58:	29 f4       	brne	.+10     	; 0x2b64 <__divsf3+0x20>
    2b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b5c:	29 f0       	breq	.+10     	; 0x2b68 <__divsf3+0x24>
    2b5e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_inf>
    2b62:	51 11       	cpse	r21, r1
    2b64:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__fp_szero>
    2b68:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__fp_nan>

00002b6c <__divsf3x>:
    2b6c:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__fp_split3>
    2b70:	68 f3       	brcs	.-38     	; 0x2b4c <__divsf3+0x8>

00002b72 <__divsf3_pse>:
    2b72:	99 23       	and	r25, r25
    2b74:	b1 f3       	breq	.-20     	; 0x2b62 <__divsf3+0x1e>
    2b76:	55 23       	and	r21, r21
    2b78:	91 f3       	breq	.-28     	; 0x2b5e <__divsf3+0x1a>
    2b7a:	95 1b       	sub	r25, r21
    2b7c:	55 0b       	sbc	r21, r21
    2b7e:	bb 27       	eor	r27, r27
    2b80:	aa 27       	eor	r26, r26
    2b82:	62 17       	cp	r22, r18
    2b84:	73 07       	cpc	r23, r19
    2b86:	84 07       	cpc	r24, r20
    2b88:	38 f0       	brcs	.+14     	; 0x2b98 <__divsf3_pse+0x26>
    2b8a:	9f 5f       	subi	r25, 0xFF	; 255
    2b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8e:	22 0f       	add	r18, r18
    2b90:	33 1f       	adc	r19, r19
    2b92:	44 1f       	adc	r20, r20
    2b94:	aa 1f       	adc	r26, r26
    2b96:	a9 f3       	breq	.-22     	; 0x2b82 <__divsf3_pse+0x10>
    2b98:	35 d0       	rcall	.+106    	; 0x2c04 <__divsf3_pse+0x92>
    2b9a:	0e 2e       	mov	r0, r30
    2b9c:	3a f0       	brmi	.+14     	; 0x2bac <__divsf3_pse+0x3a>
    2b9e:	e0 e8       	ldi	r30, 0x80	; 128
    2ba0:	32 d0       	rcall	.+100    	; 0x2c06 <__divsf3_pse+0x94>
    2ba2:	91 50       	subi	r25, 0x01	; 1
    2ba4:	50 40       	sbci	r21, 0x00	; 0
    2ba6:	e6 95       	lsr	r30
    2ba8:	00 1c       	adc	r0, r0
    2baa:	ca f7       	brpl	.-14     	; 0x2b9e <__divsf3_pse+0x2c>
    2bac:	2b d0       	rcall	.+86     	; 0x2c04 <__divsf3_pse+0x92>
    2bae:	fe 2f       	mov	r31, r30
    2bb0:	29 d0       	rcall	.+82     	; 0x2c04 <__divsf3_pse+0x92>
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	bb 1f       	adc	r27, r27
    2bba:	26 17       	cp	r18, r22
    2bbc:	37 07       	cpc	r19, r23
    2bbe:	48 07       	cpc	r20, r24
    2bc0:	ab 07       	cpc	r26, r27
    2bc2:	b0 e8       	ldi	r27, 0x80	; 128
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <__divsf3_pse+0x56>
    2bc6:	bb 0b       	sbc	r27, r27
    2bc8:	80 2d       	mov	r24, r0
    2bca:	bf 01       	movw	r22, r30
    2bcc:	ff 27       	eor	r31, r31
    2bce:	93 58       	subi	r25, 0x83	; 131
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd2:	3a f0       	brmi	.+14     	; 0x2be2 <__divsf3_pse+0x70>
    2bd4:	9e 3f       	cpi	r25, 0xFE	; 254
    2bd6:	51 05       	cpc	r21, r1
    2bd8:	78 f0       	brcs	.+30     	; 0x2bf8 <__divsf3_pse+0x86>
    2bda:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_inf>
    2bde:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__fp_szero>
    2be2:	5f 3f       	cpi	r21, 0xFF	; 255
    2be4:	e4 f3       	brlt	.-8      	; 0x2bde <__divsf3_pse+0x6c>
    2be6:	98 3e       	cpi	r25, 0xE8	; 232
    2be8:	d4 f3       	brlt	.-12     	; 0x2bde <__divsf3_pse+0x6c>
    2bea:	86 95       	lsr	r24
    2bec:	77 95       	ror	r23
    2bee:	67 95       	ror	r22
    2bf0:	b7 95       	ror	r27
    2bf2:	f7 95       	ror	r31
    2bf4:	9f 5f       	subi	r25, 0xFF	; 255
    2bf6:	c9 f7       	brne	.-14     	; 0x2bea <__divsf3_pse+0x78>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	91 1d       	adc	r25, r1
    2bfc:	96 95       	lsr	r25
    2bfe:	87 95       	ror	r24
    2c00:	97 f9       	bld	r25, 7
    2c02:	08 95       	ret
    2c04:	e1 e0       	ldi	r30, 0x01	; 1
    2c06:	66 0f       	add	r22, r22
    2c08:	77 1f       	adc	r23, r23
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	62 17       	cp	r22, r18
    2c10:	73 07       	cpc	r23, r19
    2c12:	84 07       	cpc	r24, r20
    2c14:	ba 07       	cpc	r27, r26
    2c16:	20 f0       	brcs	.+8      	; 0x2c20 <__divsf3_pse+0xae>
    2c18:	62 1b       	sub	r22, r18
    2c1a:	73 0b       	sbc	r23, r19
    2c1c:	84 0b       	sbc	r24, r20
    2c1e:	ba 0b       	sbc	r27, r26
    2c20:	ee 1f       	adc	r30, r30
    2c22:	88 f7       	brcc	.-30     	; 0x2c06 <__divsf3_pse+0x94>
    2c24:	e0 95       	com	r30
    2c26:	08 95       	ret

00002c28 <__floatunsisf>:
    2c28:	e8 94       	clt
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <__floatsisf+0x12>

00002c2c <__floatsisf>:
    2c2c:	97 fb       	bst	r25, 7
    2c2e:	3e f4       	brtc	.+14     	; 0x2c3e <__floatsisf+0x12>
    2c30:	90 95       	com	r25
    2c32:	80 95       	com	r24
    2c34:	70 95       	com	r23
    2c36:	61 95       	neg	r22
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	99 23       	and	r25, r25
    2c40:	a9 f0       	breq	.+42     	; 0x2c6c <__floatsisf+0x40>
    2c42:	f9 2f       	mov	r31, r25
    2c44:	96 e9       	ldi	r25, 0x96	; 150
    2c46:	bb 27       	eor	r27, r27
    2c48:	93 95       	inc	r25
    2c4a:	f6 95       	lsr	r31
    2c4c:	87 95       	ror	r24
    2c4e:	77 95       	ror	r23
    2c50:	67 95       	ror	r22
    2c52:	b7 95       	ror	r27
    2c54:	f1 11       	cpse	r31, r1
    2c56:	f8 cf       	rjmp	.-16     	; 0x2c48 <__floatsisf+0x1c>
    2c58:	fa f4       	brpl	.+62     	; 0x2c98 <__floatsisf+0x6c>
    2c5a:	bb 0f       	add	r27, r27
    2c5c:	11 f4       	brne	.+4      	; 0x2c62 <__floatsisf+0x36>
    2c5e:	60 ff       	sbrs	r22, 0
    2c60:	1b c0       	rjmp	.+54     	; 0x2c98 <__floatsisf+0x6c>
    2c62:	6f 5f       	subi	r22, 0xFF	; 255
    2c64:	7f 4f       	sbci	r23, 0xFF	; 255
    2c66:	8f 4f       	sbci	r24, 0xFF	; 255
    2c68:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6a:	16 c0       	rjmp	.+44     	; 0x2c98 <__floatsisf+0x6c>
    2c6c:	88 23       	and	r24, r24
    2c6e:	11 f0       	breq	.+4      	; 0x2c74 <__floatsisf+0x48>
    2c70:	96 e9       	ldi	r25, 0x96	; 150
    2c72:	11 c0       	rjmp	.+34     	; 0x2c96 <__floatsisf+0x6a>
    2c74:	77 23       	and	r23, r23
    2c76:	21 f0       	breq	.+8      	; 0x2c80 <__floatsisf+0x54>
    2c78:	9e e8       	ldi	r25, 0x8E	; 142
    2c7a:	87 2f       	mov	r24, r23
    2c7c:	76 2f       	mov	r23, r22
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <__floatsisf+0x5e>
    2c80:	66 23       	and	r22, r22
    2c82:	71 f0       	breq	.+28     	; 0x2ca0 <__floatsisf+0x74>
    2c84:	96 e8       	ldi	r25, 0x86	; 134
    2c86:	86 2f       	mov	r24, r22
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	2a f0       	brmi	.+10     	; 0x2c98 <__floatsisf+0x6c>
    2c8e:	9a 95       	dec	r25
    2c90:	66 0f       	add	r22, r22
    2c92:	77 1f       	adc	r23, r23
    2c94:	88 1f       	adc	r24, r24
    2c96:	da f7       	brpl	.-10     	; 0x2c8e <__floatsisf+0x62>
    2c98:	88 0f       	add	r24, r24
    2c9a:	96 95       	lsr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	97 f9       	bld	r25, 7
    2ca0:	08 95       	ret

00002ca2 <__fp_cmp>:
    2ca2:	99 0f       	add	r25, r25
    2ca4:	00 08       	sbc	r0, r0
    2ca6:	55 0f       	add	r21, r21
    2ca8:	aa 0b       	sbc	r26, r26
    2caa:	e0 e8       	ldi	r30, 0x80	; 128
    2cac:	fe ef       	ldi	r31, 0xFE	; 254
    2cae:	16 16       	cp	r1, r22
    2cb0:	17 06       	cpc	r1, r23
    2cb2:	e8 07       	cpc	r30, r24
    2cb4:	f9 07       	cpc	r31, r25
    2cb6:	c0 f0       	brcs	.+48     	; 0x2ce8 <__fp_cmp+0x46>
    2cb8:	12 16       	cp	r1, r18
    2cba:	13 06       	cpc	r1, r19
    2cbc:	e4 07       	cpc	r30, r20
    2cbe:	f5 07       	cpc	r31, r21
    2cc0:	98 f0       	brcs	.+38     	; 0x2ce8 <__fp_cmp+0x46>
    2cc2:	62 1b       	sub	r22, r18
    2cc4:	73 0b       	sbc	r23, r19
    2cc6:	84 0b       	sbc	r24, r20
    2cc8:	95 0b       	sbc	r25, r21
    2cca:	39 f4       	brne	.+14     	; 0x2cda <__fp_cmp+0x38>
    2ccc:	0a 26       	eor	r0, r26
    2cce:	61 f0       	breq	.+24     	; 0x2ce8 <__fp_cmp+0x46>
    2cd0:	23 2b       	or	r18, r19
    2cd2:	24 2b       	or	r18, r20
    2cd4:	25 2b       	or	r18, r21
    2cd6:	21 f4       	brne	.+8      	; 0x2ce0 <__fp_cmp+0x3e>
    2cd8:	08 95       	ret
    2cda:	0a 26       	eor	r0, r26
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__fp_cmp+0x3e>
    2cde:	a1 40       	sbci	r26, 0x01	; 1
    2ce0:	a6 95       	lsr	r26
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	81 1d       	adc	r24, r1
    2ce6:	81 1d       	adc	r24, r1
    2ce8:	08 95       	ret

00002cea <__fp_inf>:
    2cea:	97 f9       	bld	r25, 7
    2cec:	9f 67       	ori	r25, 0x7F	; 127
    2cee:	80 e8       	ldi	r24, 0x80	; 128
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	08 95       	ret

00002cf6 <__fp_nan>:
    2cf6:	9f ef       	ldi	r25, 0xFF	; 255
    2cf8:	80 ec       	ldi	r24, 0xC0	; 192
    2cfa:	08 95       	ret

00002cfc <__fp_pscA>:
    2cfc:	00 24       	eor	r0, r0
    2cfe:	0a 94       	dec	r0
    2d00:	16 16       	cp	r1, r22
    2d02:	17 06       	cpc	r1, r23
    2d04:	18 06       	cpc	r1, r24
    2d06:	09 06       	cpc	r0, r25
    2d08:	08 95       	ret

00002d0a <__fp_pscB>:
    2d0a:	00 24       	eor	r0, r0
    2d0c:	0a 94       	dec	r0
    2d0e:	12 16       	cp	r1, r18
    2d10:	13 06       	cpc	r1, r19
    2d12:	14 06       	cpc	r1, r20
    2d14:	05 06       	cpc	r0, r21
    2d16:	08 95       	ret

00002d18 <__fp_round>:
    2d18:	09 2e       	mov	r0, r25
    2d1a:	03 94       	inc	r0
    2d1c:	00 0c       	add	r0, r0
    2d1e:	11 f4       	brne	.+4      	; 0x2d24 <__fp_round+0xc>
    2d20:	88 23       	and	r24, r24
    2d22:	52 f0       	brmi	.+20     	; 0x2d38 <__fp_round+0x20>
    2d24:	bb 0f       	add	r27, r27
    2d26:	40 f4       	brcc	.+16     	; 0x2d38 <__fp_round+0x20>
    2d28:	bf 2b       	or	r27, r31
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <__fp_round+0x18>
    2d2c:	60 ff       	sbrs	r22, 0
    2d2e:	04 c0       	rjmp	.+8      	; 0x2d38 <__fp_round+0x20>
    2d30:	6f 5f       	subi	r22, 0xFF	; 255
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	8f 4f       	sbci	r24, 0xFF	; 255
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	08 95       	ret

00002d3a <__fp_split3>:
    2d3a:	57 fd       	sbrc	r21, 7
    2d3c:	90 58       	subi	r25, 0x80	; 128
    2d3e:	44 0f       	add	r20, r20
    2d40:	55 1f       	adc	r21, r21
    2d42:	59 f0       	breq	.+22     	; 0x2d5a <__fp_splitA+0x10>
    2d44:	5f 3f       	cpi	r21, 0xFF	; 255
    2d46:	71 f0       	breq	.+28     	; 0x2d64 <__fp_splitA+0x1a>
    2d48:	47 95       	ror	r20

00002d4a <__fp_splitA>:
    2d4a:	88 0f       	add	r24, r24
    2d4c:	97 fb       	bst	r25, 7
    2d4e:	99 1f       	adc	r25, r25
    2d50:	61 f0       	breq	.+24     	; 0x2d6a <__fp_splitA+0x20>
    2d52:	9f 3f       	cpi	r25, 0xFF	; 255
    2d54:	79 f0       	breq	.+30     	; 0x2d74 <__fp_splitA+0x2a>
    2d56:	87 95       	ror	r24
    2d58:	08 95       	ret
    2d5a:	12 16       	cp	r1, r18
    2d5c:	13 06       	cpc	r1, r19
    2d5e:	14 06       	cpc	r1, r20
    2d60:	55 1f       	adc	r21, r21
    2d62:	f2 cf       	rjmp	.-28     	; 0x2d48 <__fp_split3+0xe>
    2d64:	46 95       	lsr	r20
    2d66:	f1 df       	rcall	.-30     	; 0x2d4a <__fp_splitA>
    2d68:	08 c0       	rjmp	.+16     	; 0x2d7a <__fp_splitA+0x30>
    2d6a:	16 16       	cp	r1, r22
    2d6c:	17 06       	cpc	r1, r23
    2d6e:	18 06       	cpc	r1, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	f1 cf       	rjmp	.-30     	; 0x2d56 <__fp_splitA+0xc>
    2d74:	86 95       	lsr	r24
    2d76:	71 05       	cpc	r23, r1
    2d78:	61 05       	cpc	r22, r1
    2d7a:	08 94       	sec
    2d7c:	08 95       	ret

00002d7e <__fp_zero>:
    2d7e:	e8 94       	clt

00002d80 <__fp_szero>:
    2d80:	bb 27       	eor	r27, r27
    2d82:	66 27       	eor	r22, r22
    2d84:	77 27       	eor	r23, r23
    2d86:	cb 01       	movw	r24, r22
    2d88:	97 f9       	bld	r25, 7
    2d8a:	08 95       	ret

00002d8c <__gesf2>:
    2d8c:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__fp_cmp>
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <__gesf2+0x8>
    2d92:	8f ef       	ldi	r24, 0xFF	; 255
    2d94:	08 95       	ret

00002d96 <__mulsf3>:
    2d96:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__mulsf3x>
    2d9a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__fp_round>
    2d9e:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscA>
    2da2:	38 f0       	brcs	.+14     	; 0x2db2 <__mulsf3+0x1c>
    2da4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__fp_pscB>
    2da8:	20 f0       	brcs	.+8      	; 0x2db2 <__mulsf3+0x1c>
    2daa:	95 23       	and	r25, r21
    2dac:	11 f0       	breq	.+4      	; 0x2db2 <__mulsf3+0x1c>
    2dae:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_inf>
    2db2:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__fp_nan>
    2db6:	11 24       	eor	r1, r1
    2db8:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__fp_szero>

00002dbc <__mulsf3x>:
    2dbc:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__fp_split3>
    2dc0:	70 f3       	brcs	.-36     	; 0x2d9e <__mulsf3+0x8>

00002dc2 <__mulsf3_pse>:
    2dc2:	95 9f       	mul	r25, r21
    2dc4:	c1 f3       	breq	.-16     	; 0x2db6 <__mulsf3+0x20>
    2dc6:	95 0f       	add	r25, r21
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	55 1f       	adc	r21, r21
    2dcc:	62 9f       	mul	r22, r18
    2dce:	f0 01       	movw	r30, r0
    2dd0:	72 9f       	mul	r23, r18
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	f0 0d       	add	r31, r0
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	63 9f       	mul	r22, r19
    2dda:	aa 27       	eor	r26, r26
    2ddc:	f0 0d       	add	r31, r0
    2dde:	b1 1d       	adc	r27, r1
    2de0:	aa 1f       	adc	r26, r26
    2de2:	64 9f       	mul	r22, r20
    2de4:	66 27       	eor	r22, r22
    2de6:	b0 0d       	add	r27, r0
    2de8:	a1 1d       	adc	r26, r1
    2dea:	66 1f       	adc	r22, r22
    2dec:	82 9f       	mul	r24, r18
    2dee:	22 27       	eor	r18, r18
    2df0:	b0 0d       	add	r27, r0
    2df2:	a1 1d       	adc	r26, r1
    2df4:	62 1f       	adc	r22, r18
    2df6:	73 9f       	mul	r23, r19
    2df8:	b0 0d       	add	r27, r0
    2dfa:	a1 1d       	adc	r26, r1
    2dfc:	62 1f       	adc	r22, r18
    2dfe:	83 9f       	mul	r24, r19
    2e00:	a0 0d       	add	r26, r0
    2e02:	61 1d       	adc	r22, r1
    2e04:	22 1f       	adc	r18, r18
    2e06:	74 9f       	mul	r23, r20
    2e08:	33 27       	eor	r19, r19
    2e0a:	a0 0d       	add	r26, r0
    2e0c:	61 1d       	adc	r22, r1
    2e0e:	23 1f       	adc	r18, r19
    2e10:	84 9f       	mul	r24, r20
    2e12:	60 0d       	add	r22, r0
    2e14:	21 1d       	adc	r18, r1
    2e16:	82 2f       	mov	r24, r18
    2e18:	76 2f       	mov	r23, r22
    2e1a:	6a 2f       	mov	r22, r26
    2e1c:	11 24       	eor	r1, r1
    2e1e:	9f 57       	subi	r25, 0x7F	; 127
    2e20:	50 40       	sbci	r21, 0x00	; 0
    2e22:	9a f0       	brmi	.+38     	; 0x2e4a <__mulsf3_pse+0x88>
    2e24:	f1 f0       	breq	.+60     	; 0x2e62 <__mulsf3_pse+0xa0>
    2e26:	88 23       	and	r24, r24
    2e28:	4a f0       	brmi	.+18     	; 0x2e3c <__mulsf3_pse+0x7a>
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	bb 1f       	adc	r27, r27
    2e30:	66 1f       	adc	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	88 1f       	adc	r24, r24
    2e36:	91 50       	subi	r25, 0x01	; 1
    2e38:	50 40       	sbci	r21, 0x00	; 0
    2e3a:	a9 f7       	brne	.-22     	; 0x2e26 <__mulsf3_pse+0x64>
    2e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e3e:	51 05       	cpc	r21, r1
    2e40:	80 f0       	brcs	.+32     	; 0x2e62 <__mulsf3_pse+0xa0>
    2e42:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_inf>
    2e46:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__fp_szero>
    2e4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e4c:	e4 f3       	brlt	.-8      	; 0x2e46 <__mulsf3_pse+0x84>
    2e4e:	98 3e       	cpi	r25, 0xE8	; 232
    2e50:	d4 f3       	brlt	.-12     	; 0x2e46 <__mulsf3_pse+0x84>
    2e52:	86 95       	lsr	r24
    2e54:	77 95       	ror	r23
    2e56:	67 95       	ror	r22
    2e58:	b7 95       	ror	r27
    2e5a:	f7 95       	ror	r31
    2e5c:	e7 95       	ror	r30
    2e5e:	9f 5f       	subi	r25, 0xFF	; 255
    2e60:	c1 f7       	brne	.-16     	; 0x2e52 <__mulsf3_pse+0x90>
    2e62:	fe 2b       	or	r31, r30
    2e64:	88 0f       	add	r24, r24
    2e66:	91 1d       	adc	r25, r1
    2e68:	96 95       	lsr	r25
    2e6a:	87 95       	ror	r24
    2e6c:	97 f9       	bld	r25, 7
    2e6e:	08 95       	ret

00002e70 <vfprintf>:
    2e70:	a0 e1       	ldi	r26, 0x10	; 16
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	ee e3       	ldi	r30, 0x3E	; 62
    2e76:	f7 e1       	ldi	r31, 0x17	; 23
    2e78:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__prologue_saves__>
    2e7c:	7c 01       	movw	r14, r24
    2e7e:	1b 01       	movw	r2, r22
    2e80:	6a 01       	movw	r12, r20
    2e82:	fc 01       	movw	r30, r24
    2e84:	16 82       	std	Z+6, r1	; 0x06
    2e86:	17 82       	std	Z+7, r1	; 0x07
    2e88:	83 81       	ldd	r24, Z+3	; 0x03
    2e8a:	81 ff       	sbrs	r24, 1
    2e8c:	44 c3       	rjmp	.+1672   	; 0x3516 <vfprintf+0x6a6>
    2e8e:	9e 01       	movw	r18, r28
    2e90:	2f 5f       	subi	r18, 0xFF	; 255
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	39 01       	movw	r6, r18
    2e96:	f7 01       	movw	r30, r14
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	f1 01       	movw	r30, r2
    2e9c:	93 fd       	sbrc	r25, 3
    2e9e:	85 91       	lpm	r24, Z+
    2ea0:	93 ff       	sbrs	r25, 3
    2ea2:	81 91       	ld	r24, Z+
    2ea4:	1f 01       	movw	r2, r30
    2ea6:	88 23       	and	r24, r24
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <vfprintf+0x3c>
    2eaa:	31 c3       	rjmp	.+1634   	; 0x350e <vfprintf+0x69e>
    2eac:	85 32       	cpi	r24, 0x25	; 37
    2eae:	39 f4       	brne	.+14     	; 0x2ebe <vfprintf+0x4e>
    2eb0:	93 fd       	sbrc	r25, 3
    2eb2:	85 91       	lpm	r24, Z+
    2eb4:	93 ff       	sbrs	r25, 3
    2eb6:	81 91       	ld	r24, Z+
    2eb8:	1f 01       	movw	r2, r30
    2eba:	85 32       	cpi	r24, 0x25	; 37
    2ebc:	39 f4       	brne	.+14     	; 0x2ecc <vfprintf+0x5c>
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    2ec6:	56 01       	movw	r10, r12
    2ec8:	65 01       	movw	r12, r10
    2eca:	e5 cf       	rjmp	.-54     	; 0x2e96 <vfprintf+0x26>
    2ecc:	10 e0       	ldi	r17, 0x00	; 0
    2ece:	51 2c       	mov	r5, r1
    2ed0:	91 2c       	mov	r9, r1
    2ed2:	ff e1       	ldi	r31, 0x1F	; 31
    2ed4:	f9 15       	cp	r31, r9
    2ed6:	d8 f0       	brcs	.+54     	; 0x2f0e <vfprintf+0x9e>
    2ed8:	8b 32       	cpi	r24, 0x2B	; 43
    2eda:	79 f0       	breq	.+30     	; 0x2efa <vfprintf+0x8a>
    2edc:	38 f4       	brcc	.+14     	; 0x2eec <vfprintf+0x7c>
    2ede:	80 32       	cpi	r24, 0x20	; 32
    2ee0:	79 f0       	breq	.+30     	; 0x2f00 <vfprintf+0x90>
    2ee2:	83 32       	cpi	r24, 0x23	; 35
    2ee4:	a1 f4       	brne	.+40     	; 0x2f0e <vfprintf+0x9e>
    2ee6:	f9 2d       	mov	r31, r9
    2ee8:	f0 61       	ori	r31, 0x10	; 16
    2eea:	2e c0       	rjmp	.+92     	; 0x2f48 <vfprintf+0xd8>
    2eec:	8d 32       	cpi	r24, 0x2D	; 45
    2eee:	61 f0       	breq	.+24     	; 0x2f08 <vfprintf+0x98>
    2ef0:	80 33       	cpi	r24, 0x30	; 48
    2ef2:	69 f4       	brne	.+26     	; 0x2f0e <vfprintf+0x9e>
    2ef4:	29 2d       	mov	r18, r9
    2ef6:	21 60       	ori	r18, 0x01	; 1
    2ef8:	2d c0       	rjmp	.+90     	; 0x2f54 <vfprintf+0xe4>
    2efa:	39 2d       	mov	r19, r9
    2efc:	32 60       	ori	r19, 0x02	; 2
    2efe:	93 2e       	mov	r9, r19
    2f00:	89 2d       	mov	r24, r9
    2f02:	84 60       	ori	r24, 0x04	; 4
    2f04:	98 2e       	mov	r9, r24
    2f06:	2a c0       	rjmp	.+84     	; 0x2f5c <vfprintf+0xec>
    2f08:	e9 2d       	mov	r30, r9
    2f0a:	e8 60       	ori	r30, 0x08	; 8
    2f0c:	15 c0       	rjmp	.+42     	; 0x2f38 <vfprintf+0xc8>
    2f0e:	97 fc       	sbrc	r9, 7
    2f10:	2d c0       	rjmp	.+90     	; 0x2f6c <vfprintf+0xfc>
    2f12:	20 ed       	ldi	r18, 0xD0	; 208
    2f14:	28 0f       	add	r18, r24
    2f16:	2a 30       	cpi	r18, 0x0A	; 10
    2f18:	88 f4       	brcc	.+34     	; 0x2f3c <vfprintf+0xcc>
    2f1a:	96 fe       	sbrs	r9, 6
    2f1c:	06 c0       	rjmp	.+12     	; 0x2f2a <vfprintf+0xba>
    2f1e:	3a e0       	ldi	r19, 0x0A	; 10
    2f20:	13 9f       	mul	r17, r19
    2f22:	20 0d       	add	r18, r0
    2f24:	11 24       	eor	r1, r1
    2f26:	12 2f       	mov	r17, r18
    2f28:	19 c0       	rjmp	.+50     	; 0x2f5c <vfprintf+0xec>
    2f2a:	8a e0       	ldi	r24, 0x0A	; 10
    2f2c:	58 9e       	mul	r5, r24
    2f2e:	20 0d       	add	r18, r0
    2f30:	11 24       	eor	r1, r1
    2f32:	52 2e       	mov	r5, r18
    2f34:	e9 2d       	mov	r30, r9
    2f36:	e0 62       	ori	r30, 0x20	; 32
    2f38:	9e 2e       	mov	r9, r30
    2f3a:	10 c0       	rjmp	.+32     	; 0x2f5c <vfprintf+0xec>
    2f3c:	8e 32       	cpi	r24, 0x2E	; 46
    2f3e:	31 f4       	brne	.+12     	; 0x2f4c <vfprintf+0xdc>
    2f40:	96 fc       	sbrc	r9, 6
    2f42:	e5 c2       	rjmp	.+1482   	; 0x350e <vfprintf+0x69e>
    2f44:	f9 2d       	mov	r31, r9
    2f46:	f0 64       	ori	r31, 0x40	; 64
    2f48:	9f 2e       	mov	r9, r31
    2f4a:	08 c0       	rjmp	.+16     	; 0x2f5c <vfprintf+0xec>
    2f4c:	8c 36       	cpi	r24, 0x6C	; 108
    2f4e:	21 f4       	brne	.+8      	; 0x2f58 <vfprintf+0xe8>
    2f50:	29 2d       	mov	r18, r9
    2f52:	20 68       	ori	r18, 0x80	; 128
    2f54:	92 2e       	mov	r9, r18
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <vfprintf+0xec>
    2f58:	88 36       	cpi	r24, 0x68	; 104
    2f5a:	41 f4       	brne	.+16     	; 0x2f6c <vfprintf+0xfc>
    2f5c:	f1 01       	movw	r30, r2
    2f5e:	93 fd       	sbrc	r25, 3
    2f60:	85 91       	lpm	r24, Z+
    2f62:	93 ff       	sbrs	r25, 3
    2f64:	81 91       	ld	r24, Z+
    2f66:	1f 01       	movw	r2, r30
    2f68:	81 11       	cpse	r24, r1
    2f6a:	b3 cf       	rjmp	.-154    	; 0x2ed2 <vfprintf+0x62>
    2f6c:	9b eb       	ldi	r25, 0xBB	; 187
    2f6e:	98 0f       	add	r25, r24
    2f70:	93 30       	cpi	r25, 0x03	; 3
    2f72:	20 f4       	brcc	.+8      	; 0x2f7c <vfprintf+0x10c>
    2f74:	99 2d       	mov	r25, r9
    2f76:	90 61       	ori	r25, 0x10	; 16
    2f78:	80 5e       	subi	r24, 0xE0	; 224
    2f7a:	07 c0       	rjmp	.+14     	; 0x2f8a <vfprintf+0x11a>
    2f7c:	9b e9       	ldi	r25, 0x9B	; 155
    2f7e:	98 0f       	add	r25, r24
    2f80:	93 30       	cpi	r25, 0x03	; 3
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <vfprintf+0x116>
    2f84:	66 c1       	rjmp	.+716    	; 0x3252 <vfprintf+0x3e2>
    2f86:	99 2d       	mov	r25, r9
    2f88:	9f 7e       	andi	r25, 0xEF	; 239
    2f8a:	96 ff       	sbrs	r25, 6
    2f8c:	16 e0       	ldi	r17, 0x06	; 6
    2f8e:	9f 73       	andi	r25, 0x3F	; 63
    2f90:	99 2e       	mov	r9, r25
    2f92:	85 36       	cpi	r24, 0x65	; 101
    2f94:	19 f4       	brne	.+6      	; 0x2f9c <vfprintf+0x12c>
    2f96:	90 64       	ori	r25, 0x40	; 64
    2f98:	99 2e       	mov	r9, r25
    2f9a:	08 c0       	rjmp	.+16     	; 0x2fac <vfprintf+0x13c>
    2f9c:	86 36       	cpi	r24, 0x66	; 102
    2f9e:	21 f4       	brne	.+8      	; 0x2fa8 <vfprintf+0x138>
    2fa0:	39 2f       	mov	r19, r25
    2fa2:	30 68       	ori	r19, 0x80	; 128
    2fa4:	93 2e       	mov	r9, r19
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <vfprintf+0x13c>
    2fa8:	11 11       	cpse	r17, r1
    2faa:	11 50       	subi	r17, 0x01	; 1
    2fac:	97 fe       	sbrs	r9, 7
    2fae:	07 c0       	rjmp	.+14     	; 0x2fbe <vfprintf+0x14e>
    2fb0:	1c 33       	cpi	r17, 0x3C	; 60
    2fb2:	50 f4       	brcc	.+20     	; 0x2fc8 <vfprintf+0x158>
    2fb4:	44 24       	eor	r4, r4
    2fb6:	43 94       	inc	r4
    2fb8:	41 0e       	add	r4, r17
    2fba:	27 e0       	ldi	r18, 0x07	; 7
    2fbc:	0b c0       	rjmp	.+22     	; 0x2fd4 <vfprintf+0x164>
    2fbe:	18 30       	cpi	r17, 0x08	; 8
    2fc0:	38 f0       	brcs	.+14     	; 0x2fd0 <vfprintf+0x160>
    2fc2:	27 e0       	ldi	r18, 0x07	; 7
    2fc4:	17 e0       	ldi	r17, 0x07	; 7
    2fc6:	05 c0       	rjmp	.+10     	; 0x2fd2 <vfprintf+0x162>
    2fc8:	27 e0       	ldi	r18, 0x07	; 7
    2fca:	9c e3       	ldi	r25, 0x3C	; 60
    2fcc:	49 2e       	mov	r4, r25
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <vfprintf+0x164>
    2fd0:	21 2f       	mov	r18, r17
    2fd2:	41 2c       	mov	r4, r1
    2fd4:	56 01       	movw	r10, r12
    2fd6:	84 e0       	ldi	r24, 0x04	; 4
    2fd8:	a8 0e       	add	r10, r24
    2fda:	b1 1c       	adc	r11, r1
    2fdc:	f6 01       	movw	r30, r12
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	04 2d       	mov	r16, r4
    2fe8:	a3 01       	movw	r20, r6
    2fea:	0e 94 0e 1b 	call	0x361c	; 0x361c <__ftoa_engine>
    2fee:	6c 01       	movw	r12, r24
    2ff0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ff2:	fc 87       	std	Y+12, r31	; 0x0c
    2ff4:	f0 ff       	sbrs	r31, 0
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <vfprintf+0x18c>
    2ff8:	f3 ff       	sbrs	r31, 3
    2ffa:	06 c0       	rjmp	.+12     	; 0x3008 <vfprintf+0x198>
    2ffc:	91 fc       	sbrc	r9, 1
    2ffe:	06 c0       	rjmp	.+12     	; 0x300c <vfprintf+0x19c>
    3000:	92 fe       	sbrs	r9, 2
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <vfprintf+0x1a0>
    3004:	00 e2       	ldi	r16, 0x20	; 32
    3006:	05 c0       	rjmp	.+10     	; 0x3012 <vfprintf+0x1a2>
    3008:	0d e2       	ldi	r16, 0x2D	; 45
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <vfprintf+0x1a2>
    300c:	0b e2       	ldi	r16, 0x2B	; 43
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <vfprintf+0x1a2>
    3010:	00 e0       	ldi	r16, 0x00	; 0
    3012:	8c 85       	ldd	r24, Y+12	; 0x0c
    3014:	8c 70       	andi	r24, 0x0C	; 12
    3016:	19 f0       	breq	.+6      	; 0x301e <vfprintf+0x1ae>
    3018:	01 11       	cpse	r16, r1
    301a:	5a c2       	rjmp	.+1204   	; 0x34d0 <vfprintf+0x660>
    301c:	9b c2       	rjmp	.+1334   	; 0x3554 <vfprintf+0x6e4>
    301e:	97 fe       	sbrs	r9, 7
    3020:	10 c0       	rjmp	.+32     	; 0x3042 <vfprintf+0x1d2>
    3022:	4c 0c       	add	r4, r12
    3024:	fc 85       	ldd	r31, Y+12	; 0x0c
    3026:	f4 ff       	sbrs	r31, 4
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <vfprintf+0x1c2>
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	81 33       	cpi	r24, 0x31	; 49
    302e:	09 f4       	brne	.+2      	; 0x3032 <vfprintf+0x1c2>
    3030:	4a 94       	dec	r4
    3032:	14 14       	cp	r1, r4
    3034:	74 f5       	brge	.+92     	; 0x3092 <vfprintf+0x222>
    3036:	28 e0       	ldi	r18, 0x08	; 8
    3038:	24 15       	cp	r18, r4
    303a:	78 f5       	brcc	.+94     	; 0x309a <vfprintf+0x22a>
    303c:	88 e0       	ldi	r24, 0x08	; 8
    303e:	48 2e       	mov	r4, r24
    3040:	2c c0       	rjmp	.+88     	; 0x309a <vfprintf+0x22a>
    3042:	96 fc       	sbrc	r9, 6
    3044:	2a c0       	rjmp	.+84     	; 0x309a <vfprintf+0x22a>
    3046:	81 2f       	mov	r24, r17
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	8c 15       	cp	r24, r12
    304c:	9d 05       	cpc	r25, r13
    304e:	9c f0       	brlt	.+38     	; 0x3076 <vfprintf+0x206>
    3050:	3c ef       	ldi	r19, 0xFC	; 252
    3052:	c3 16       	cp	r12, r19
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	d3 06       	cpc	r13, r19
    3058:	74 f0       	brlt	.+28     	; 0x3076 <vfprintf+0x206>
    305a:	89 2d       	mov	r24, r9
    305c:	80 68       	ori	r24, 0x80	; 128
    305e:	98 2e       	mov	r9, r24
    3060:	0a c0       	rjmp	.+20     	; 0x3076 <vfprintf+0x206>
    3062:	e2 e0       	ldi	r30, 0x02	; 2
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	ec 0f       	add	r30, r28
    3068:	fd 1f       	adc	r31, r29
    306a:	e1 0f       	add	r30, r17
    306c:	f1 1d       	adc	r31, r1
    306e:	80 81       	ld	r24, Z
    3070:	80 33       	cpi	r24, 0x30	; 48
    3072:	19 f4       	brne	.+6      	; 0x307a <vfprintf+0x20a>
    3074:	11 50       	subi	r17, 0x01	; 1
    3076:	11 11       	cpse	r17, r1
    3078:	f4 cf       	rjmp	.-24     	; 0x3062 <vfprintf+0x1f2>
    307a:	97 fe       	sbrs	r9, 7
    307c:	0e c0       	rjmp	.+28     	; 0x309a <vfprintf+0x22a>
    307e:	44 24       	eor	r4, r4
    3080:	43 94       	inc	r4
    3082:	41 0e       	add	r4, r17
    3084:	81 2f       	mov	r24, r17
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	c8 16       	cp	r12, r24
    308a:	d9 06       	cpc	r13, r25
    308c:	2c f4       	brge	.+10     	; 0x3098 <vfprintf+0x228>
    308e:	1c 19       	sub	r17, r12
    3090:	04 c0       	rjmp	.+8      	; 0x309a <vfprintf+0x22a>
    3092:	44 24       	eor	r4, r4
    3094:	43 94       	inc	r4
    3096:	01 c0       	rjmp	.+2      	; 0x309a <vfprintf+0x22a>
    3098:	10 e0       	ldi	r17, 0x00	; 0
    309a:	97 fe       	sbrs	r9, 7
    309c:	06 c0       	rjmp	.+12     	; 0x30aa <vfprintf+0x23a>
    309e:	1c 14       	cp	r1, r12
    30a0:	1d 04       	cpc	r1, r13
    30a2:	34 f4       	brge	.+12     	; 0x30b0 <vfprintf+0x240>
    30a4:	c6 01       	movw	r24, r12
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	05 c0       	rjmp	.+10     	; 0x30b4 <vfprintf+0x244>
    30aa:	85 e0       	ldi	r24, 0x05	; 5
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <vfprintf+0x244>
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	01 11       	cpse	r16, r1
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	11 23       	and	r17, r17
    30ba:	31 f0       	breq	.+12     	; 0x30c8 <vfprintf+0x258>
    30bc:	21 2f       	mov	r18, r17
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	2f 5f       	subi	r18, 0xFF	; 255
    30c2:	3f 4f       	sbci	r19, 0xFF	; 255
    30c4:	82 0f       	add	r24, r18
    30c6:	93 1f       	adc	r25, r19
    30c8:	25 2d       	mov	r18, r5
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	82 17       	cp	r24, r18
    30ce:	93 07       	cpc	r25, r19
    30d0:	14 f4       	brge	.+4      	; 0x30d6 <vfprintf+0x266>
    30d2:	58 1a       	sub	r5, r24
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <vfprintf+0x268>
    30d6:	51 2c       	mov	r5, r1
    30d8:	89 2d       	mov	r24, r9
    30da:	89 70       	andi	r24, 0x09	; 9
    30dc:	49 f4       	brne	.+18     	; 0x30f0 <vfprintf+0x280>
    30de:	55 20       	and	r5, r5
    30e0:	39 f0       	breq	.+14     	; 0x30f0 <vfprintf+0x280>
    30e2:	b7 01       	movw	r22, r14
    30e4:	80 e2       	ldi	r24, 0x20	; 32
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    30ec:	5a 94       	dec	r5
    30ee:	f7 cf       	rjmp	.-18     	; 0x30de <vfprintf+0x26e>
    30f0:	00 23       	and	r16, r16
    30f2:	29 f0       	breq	.+10     	; 0x30fe <vfprintf+0x28e>
    30f4:	b7 01       	movw	r22, r14
    30f6:	80 2f       	mov	r24, r16
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    30fe:	93 fc       	sbrc	r9, 3
    3100:	09 c0       	rjmp	.+18     	; 0x3114 <vfprintf+0x2a4>
    3102:	55 20       	and	r5, r5
    3104:	39 f0       	breq	.+14     	; 0x3114 <vfprintf+0x2a4>
    3106:	b7 01       	movw	r22, r14
    3108:	80 e3       	ldi	r24, 0x30	; 48
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3110:	5a 94       	dec	r5
    3112:	f7 cf       	rjmp	.-18     	; 0x3102 <vfprintf+0x292>
    3114:	97 fe       	sbrs	r9, 7
    3116:	4c c0       	rjmp	.+152    	; 0x31b0 <vfprintf+0x340>
    3118:	46 01       	movw	r8, r12
    311a:	d7 fe       	sbrs	r13, 7
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <vfprintf+0x2b2>
    311e:	81 2c       	mov	r8, r1
    3120:	91 2c       	mov	r9, r1
    3122:	c6 01       	movw	r24, r12
    3124:	88 19       	sub	r24, r8
    3126:	99 09       	sbc	r25, r9
    3128:	f3 01       	movw	r30, r6
    312a:	e8 0f       	add	r30, r24
    312c:	f9 1f       	adc	r31, r25
    312e:	ed 87       	std	Y+13, r30	; 0x0d
    3130:	fe 87       	std	Y+14, r31	; 0x0e
    3132:	96 01       	movw	r18, r12
    3134:	24 19       	sub	r18, r4
    3136:	31 09       	sbc	r19, r1
    3138:	2f 87       	std	Y+15, r18	; 0x0f
    313a:	38 8b       	std	Y+16, r19	; 0x10
    313c:	01 2f       	mov	r16, r17
    313e:	10 e0       	ldi	r17, 0x00	; 0
    3140:	11 95       	neg	r17
    3142:	01 95       	neg	r16
    3144:	11 09       	sbc	r17, r1
    3146:	3f ef       	ldi	r19, 0xFF	; 255
    3148:	83 16       	cp	r8, r19
    314a:	93 06       	cpc	r9, r19
    314c:	29 f4       	brne	.+10     	; 0x3158 <vfprintf+0x2e8>
    314e:	b7 01       	movw	r22, r14
    3150:	8e e2       	ldi	r24, 0x2E	; 46
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3158:	c8 14       	cp	r12, r8
    315a:	d9 04       	cpc	r13, r9
    315c:	4c f0       	brlt	.+18     	; 0x3170 <vfprintf+0x300>
    315e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3160:	98 89       	ldd	r25, Y+16	; 0x10
    3162:	88 15       	cp	r24, r8
    3164:	99 05       	cpc	r25, r9
    3166:	24 f4       	brge	.+8      	; 0x3170 <vfprintf+0x300>
    3168:	ed 85       	ldd	r30, Y+13	; 0x0d
    316a:	fe 85       	ldd	r31, Y+14	; 0x0e
    316c:	81 81       	ldd	r24, Z+1	; 0x01
    316e:	01 c0       	rjmp	.+2      	; 0x3172 <vfprintf+0x302>
    3170:	80 e3       	ldi	r24, 0x30	; 48
    3172:	f1 e0       	ldi	r31, 0x01	; 1
    3174:	8f 1a       	sub	r8, r31
    3176:	91 08       	sbc	r9, r1
    3178:	2d 85       	ldd	r18, Y+13	; 0x0d
    317a:	3e 85       	ldd	r19, Y+14	; 0x0e
    317c:	2f 5f       	subi	r18, 0xFF	; 255
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	2d 87       	std	Y+13, r18	; 0x0d
    3182:	3e 87       	std	Y+14, r19	; 0x0e
    3184:	80 16       	cp	r8, r16
    3186:	91 06       	cpc	r9, r17
    3188:	2c f0       	brlt	.+10     	; 0x3194 <vfprintf+0x324>
    318a:	b7 01       	movw	r22, r14
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3192:	d9 cf       	rjmp	.-78     	; 0x3146 <vfprintf+0x2d6>
    3194:	c8 14       	cp	r12, r8
    3196:	d9 04       	cpc	r13, r9
    3198:	41 f4       	brne	.+16     	; 0x31aa <vfprintf+0x33a>
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	96 33       	cpi	r25, 0x36	; 54
    319e:	20 f4       	brcc	.+8      	; 0x31a8 <vfprintf+0x338>
    31a0:	95 33       	cpi	r25, 0x35	; 53
    31a2:	19 f4       	brne	.+6      	; 0x31aa <vfprintf+0x33a>
    31a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    31a6:	34 ff       	sbrs	r19, 4
    31a8:	81 e3       	ldi	r24, 0x31	; 49
    31aa:	b7 01       	movw	r22, r14
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	4e c0       	rjmp	.+156    	; 0x324c <vfprintf+0x3dc>
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	81 33       	cpi	r24, 0x31	; 49
    31b4:	19 f0       	breq	.+6      	; 0x31bc <vfprintf+0x34c>
    31b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    31b8:	9f 7e       	andi	r25, 0xEF	; 239
    31ba:	9c 87       	std	Y+12, r25	; 0x0c
    31bc:	b7 01       	movw	r22, r14
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    31c4:	11 11       	cpse	r17, r1
    31c6:	05 c0       	rjmp	.+10     	; 0x31d2 <vfprintf+0x362>
    31c8:	94 fc       	sbrc	r9, 4
    31ca:	18 c0       	rjmp	.+48     	; 0x31fc <vfprintf+0x38c>
    31cc:	85 e6       	ldi	r24, 0x65	; 101
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	17 c0       	rjmp	.+46     	; 0x3200 <vfprintf+0x390>
    31d2:	b7 01       	movw	r22, r14
    31d4:	8e e2       	ldi	r24, 0x2E	; 46
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    31dc:	1e 5f       	subi	r17, 0xFE	; 254
    31de:	82 e0       	ldi	r24, 0x02	; 2
    31e0:	01 e0       	ldi	r16, 0x01	; 1
    31e2:	08 0f       	add	r16, r24
    31e4:	f3 01       	movw	r30, r6
    31e6:	e8 0f       	add	r30, r24
    31e8:	f1 1d       	adc	r31, r1
    31ea:	80 81       	ld	r24, Z
    31ec:	b7 01       	movw	r22, r14
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    31f4:	80 2f       	mov	r24, r16
    31f6:	01 13       	cpse	r16, r17
    31f8:	f3 cf       	rjmp	.-26     	; 0x31e0 <vfprintf+0x370>
    31fa:	e6 cf       	rjmp	.-52     	; 0x31c8 <vfprintf+0x358>
    31fc:	85 e4       	ldi	r24, 0x45	; 69
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	b7 01       	movw	r22, r14
    3202:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3206:	d7 fc       	sbrc	r13, 7
    3208:	06 c0       	rjmp	.+12     	; 0x3216 <vfprintf+0x3a6>
    320a:	c1 14       	cp	r12, r1
    320c:	d1 04       	cpc	r13, r1
    320e:	41 f4       	brne	.+16     	; 0x3220 <vfprintf+0x3b0>
    3210:	ec 85       	ldd	r30, Y+12	; 0x0c
    3212:	e4 ff       	sbrs	r30, 4
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <vfprintf+0x3b0>
    3216:	d1 94       	neg	r13
    3218:	c1 94       	neg	r12
    321a:	d1 08       	sbc	r13, r1
    321c:	8d e2       	ldi	r24, 0x2D	; 45
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <vfprintf+0x3b2>
    3220:	8b e2       	ldi	r24, 0x2B	; 43
    3222:	b7 01       	movw	r22, r14
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    322a:	80 e3       	ldi	r24, 0x30	; 48
    322c:	2a e0       	ldi	r18, 0x0A	; 10
    322e:	c2 16       	cp	r12, r18
    3230:	d1 04       	cpc	r13, r1
    3232:	2c f0       	brlt	.+10     	; 0x323e <vfprintf+0x3ce>
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	fa e0       	ldi	r31, 0x0A	; 10
    3238:	cf 1a       	sub	r12, r31
    323a:	d1 08       	sbc	r13, r1
    323c:	f7 cf       	rjmp	.-18     	; 0x322c <vfprintf+0x3bc>
    323e:	b7 01       	movw	r22, r14
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3246:	b7 01       	movw	r22, r14
    3248:	c6 01       	movw	r24, r12
    324a:	c0 96       	adiw	r24, 0x30	; 48
    324c:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3250:	54 c1       	rjmp	.+680    	; 0x34fa <vfprintf+0x68a>
    3252:	83 36       	cpi	r24, 0x63	; 99
    3254:	31 f0       	breq	.+12     	; 0x3262 <vfprintf+0x3f2>
    3256:	83 37       	cpi	r24, 0x73	; 115
    3258:	79 f0       	breq	.+30     	; 0x3278 <vfprintf+0x408>
    325a:	83 35       	cpi	r24, 0x53	; 83
    325c:	09 f0       	breq	.+2      	; 0x3260 <vfprintf+0x3f0>
    325e:	56 c0       	rjmp	.+172    	; 0x330c <vfprintf+0x49c>
    3260:	20 c0       	rjmp	.+64     	; 0x32a2 <vfprintf+0x432>
    3262:	56 01       	movw	r10, r12
    3264:	32 e0       	ldi	r19, 0x02	; 2
    3266:	a3 0e       	add	r10, r19
    3268:	b1 1c       	adc	r11, r1
    326a:	f6 01       	movw	r30, r12
    326c:	80 81       	ld	r24, Z
    326e:	89 83       	std	Y+1, r24	; 0x01
    3270:	01 e0       	ldi	r16, 0x01	; 1
    3272:	10 e0       	ldi	r17, 0x00	; 0
    3274:	63 01       	movw	r12, r6
    3276:	12 c0       	rjmp	.+36     	; 0x329c <vfprintf+0x42c>
    3278:	56 01       	movw	r10, r12
    327a:	f2 e0       	ldi	r31, 0x02	; 2
    327c:	af 0e       	add	r10, r31
    327e:	b1 1c       	adc	r11, r1
    3280:	f6 01       	movw	r30, r12
    3282:	c0 80       	ld	r12, Z
    3284:	d1 80       	ldd	r13, Z+1	; 0x01
    3286:	96 fe       	sbrs	r9, 6
    3288:	03 c0       	rjmp	.+6      	; 0x3290 <vfprintf+0x420>
    328a:	61 2f       	mov	r22, r17
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <vfprintf+0x424>
    3290:	6f ef       	ldi	r22, 0xFF	; 255
    3292:	7f ef       	ldi	r23, 0xFF	; 255
    3294:	c6 01       	movw	r24, r12
    3296:	0e 94 03 1c 	call	0x3806	; 0x3806 <strnlen>
    329a:	8c 01       	movw	r16, r24
    329c:	f9 2d       	mov	r31, r9
    329e:	ff 77       	andi	r31, 0x7F	; 127
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <vfprintf+0x45a>
    32a2:	56 01       	movw	r10, r12
    32a4:	22 e0       	ldi	r18, 0x02	; 2
    32a6:	a2 0e       	add	r10, r18
    32a8:	b1 1c       	adc	r11, r1
    32aa:	f6 01       	movw	r30, r12
    32ac:	c0 80       	ld	r12, Z
    32ae:	d1 80       	ldd	r13, Z+1	; 0x01
    32b0:	96 fe       	sbrs	r9, 6
    32b2:	03 c0       	rjmp	.+6      	; 0x32ba <vfprintf+0x44a>
    32b4:	61 2f       	mov	r22, r17
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <vfprintf+0x44e>
    32ba:	6f ef       	ldi	r22, 0xFF	; 255
    32bc:	7f ef       	ldi	r23, 0xFF	; 255
    32be:	c6 01       	movw	r24, r12
    32c0:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <strnlen_P>
    32c4:	8c 01       	movw	r16, r24
    32c6:	f9 2d       	mov	r31, r9
    32c8:	f0 68       	ori	r31, 0x80	; 128
    32ca:	9f 2e       	mov	r9, r31
    32cc:	f3 fd       	sbrc	r31, 3
    32ce:	1a c0       	rjmp	.+52     	; 0x3304 <vfprintf+0x494>
    32d0:	85 2d       	mov	r24, r5
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	08 17       	cp	r16, r24
    32d6:	19 07       	cpc	r17, r25
    32d8:	a8 f4       	brcc	.+42     	; 0x3304 <vfprintf+0x494>
    32da:	b7 01       	movw	r22, r14
    32dc:	80 e2       	ldi	r24, 0x20	; 32
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    32e4:	5a 94       	dec	r5
    32e6:	f4 cf       	rjmp	.-24     	; 0x32d0 <vfprintf+0x460>
    32e8:	f6 01       	movw	r30, r12
    32ea:	97 fc       	sbrc	r9, 7
    32ec:	85 91       	lpm	r24, Z+
    32ee:	97 fe       	sbrs	r9, 7
    32f0:	81 91       	ld	r24, Z+
    32f2:	6f 01       	movw	r12, r30
    32f4:	b7 01       	movw	r22, r14
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    32fc:	51 10       	cpse	r5, r1
    32fe:	5a 94       	dec	r5
    3300:	01 50       	subi	r16, 0x01	; 1
    3302:	11 09       	sbc	r17, r1
    3304:	01 15       	cp	r16, r1
    3306:	11 05       	cpc	r17, r1
    3308:	79 f7       	brne	.-34     	; 0x32e8 <vfprintf+0x478>
    330a:	f7 c0       	rjmp	.+494    	; 0x34fa <vfprintf+0x68a>
    330c:	84 36       	cpi	r24, 0x64	; 100
    330e:	11 f0       	breq	.+4      	; 0x3314 <vfprintf+0x4a4>
    3310:	89 36       	cpi	r24, 0x69	; 105
    3312:	61 f5       	brne	.+88     	; 0x336c <vfprintf+0x4fc>
    3314:	56 01       	movw	r10, r12
    3316:	97 fe       	sbrs	r9, 7
    3318:	09 c0       	rjmp	.+18     	; 0x332c <vfprintf+0x4bc>
    331a:	24 e0       	ldi	r18, 0x04	; 4
    331c:	a2 0e       	add	r10, r18
    331e:	b1 1c       	adc	r11, r1
    3320:	f6 01       	movw	r30, r12
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	0a c0       	rjmp	.+20     	; 0x3340 <vfprintf+0x4d0>
    332c:	f2 e0       	ldi	r31, 0x02	; 2
    332e:	af 0e       	add	r10, r31
    3330:	b1 1c       	adc	r11, r1
    3332:	f6 01       	movw	r30, r12
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	07 2e       	mov	r0, r23
    333a:	00 0c       	add	r0, r0
    333c:	88 0b       	sbc	r24, r24
    333e:	99 0b       	sbc	r25, r25
    3340:	f9 2d       	mov	r31, r9
    3342:	ff 76       	andi	r31, 0x6F	; 111
    3344:	9f 2e       	mov	r9, r31
    3346:	97 ff       	sbrs	r25, 7
    3348:	09 c0       	rjmp	.+18     	; 0x335c <vfprintf+0x4ec>
    334a:	90 95       	com	r25
    334c:	80 95       	com	r24
    334e:	70 95       	com	r23
    3350:	61 95       	neg	r22
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	8f 4f       	sbci	r24, 0xFF	; 255
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	f0 68       	ori	r31, 0x80	; 128
    335a:	9f 2e       	mov	r9, r31
    335c:	2a e0       	ldi	r18, 0x0A	; 10
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	a3 01       	movw	r20, r6
    3362:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__ultoa_invert>
    3366:	c8 2e       	mov	r12, r24
    3368:	c6 18       	sub	r12, r6
    336a:	3f c0       	rjmp	.+126    	; 0x33ea <vfprintf+0x57a>
    336c:	09 2d       	mov	r16, r9
    336e:	85 37       	cpi	r24, 0x75	; 117
    3370:	21 f4       	brne	.+8      	; 0x337a <vfprintf+0x50a>
    3372:	0f 7e       	andi	r16, 0xEF	; 239
    3374:	2a e0       	ldi	r18, 0x0A	; 10
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	1d c0       	rjmp	.+58     	; 0x33b4 <vfprintf+0x544>
    337a:	09 7f       	andi	r16, 0xF9	; 249
    337c:	8f 36       	cpi	r24, 0x6F	; 111
    337e:	91 f0       	breq	.+36     	; 0x33a4 <vfprintf+0x534>
    3380:	18 f4       	brcc	.+6      	; 0x3388 <vfprintf+0x518>
    3382:	88 35       	cpi	r24, 0x58	; 88
    3384:	59 f0       	breq	.+22     	; 0x339c <vfprintf+0x52c>
    3386:	c3 c0       	rjmp	.+390    	; 0x350e <vfprintf+0x69e>
    3388:	80 37       	cpi	r24, 0x70	; 112
    338a:	19 f0       	breq	.+6      	; 0x3392 <vfprintf+0x522>
    338c:	88 37       	cpi	r24, 0x78	; 120
    338e:	11 f0       	breq	.+4      	; 0x3394 <vfprintf+0x524>
    3390:	be c0       	rjmp	.+380    	; 0x350e <vfprintf+0x69e>
    3392:	00 61       	ori	r16, 0x10	; 16
    3394:	04 ff       	sbrs	r16, 4
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <vfprintf+0x53a>
    3398:	04 60       	ori	r16, 0x04	; 4
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <vfprintf+0x53a>
    339c:	94 fe       	sbrs	r9, 4
    339e:	08 c0       	rjmp	.+16     	; 0x33b0 <vfprintf+0x540>
    33a0:	06 60       	ori	r16, 0x06	; 6
    33a2:	06 c0       	rjmp	.+12     	; 0x33b0 <vfprintf+0x540>
    33a4:	28 e0       	ldi	r18, 0x08	; 8
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	05 c0       	rjmp	.+10     	; 0x33b4 <vfprintf+0x544>
    33aa:	20 e1       	ldi	r18, 0x10	; 16
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <vfprintf+0x544>
    33b0:	20 e1       	ldi	r18, 0x10	; 16
    33b2:	32 e0       	ldi	r19, 0x02	; 2
    33b4:	56 01       	movw	r10, r12
    33b6:	07 ff       	sbrs	r16, 7
    33b8:	09 c0       	rjmp	.+18     	; 0x33cc <vfprintf+0x55c>
    33ba:	84 e0       	ldi	r24, 0x04	; 4
    33bc:	a8 0e       	add	r10, r24
    33be:	b1 1c       	adc	r11, r1
    33c0:	f6 01       	movw	r30, r12
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	08 c0       	rjmp	.+16     	; 0x33dc <vfprintf+0x56c>
    33cc:	f2 e0       	ldi	r31, 0x02	; 2
    33ce:	af 0e       	add	r10, r31
    33d0:	b1 1c       	adc	r11, r1
    33d2:	f6 01       	movw	r30, r12
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	a3 01       	movw	r20, r6
    33de:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__ultoa_invert>
    33e2:	c8 2e       	mov	r12, r24
    33e4:	c6 18       	sub	r12, r6
    33e6:	0f 77       	andi	r16, 0x7F	; 127
    33e8:	90 2e       	mov	r9, r16
    33ea:	96 fe       	sbrs	r9, 6
    33ec:	0b c0       	rjmp	.+22     	; 0x3404 <vfprintf+0x594>
    33ee:	09 2d       	mov	r16, r9
    33f0:	0e 7f       	andi	r16, 0xFE	; 254
    33f2:	c1 16       	cp	r12, r17
    33f4:	50 f4       	brcc	.+20     	; 0x340a <vfprintf+0x59a>
    33f6:	94 fe       	sbrs	r9, 4
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <vfprintf+0x59e>
    33fa:	92 fc       	sbrc	r9, 2
    33fc:	08 c0       	rjmp	.+16     	; 0x340e <vfprintf+0x59e>
    33fe:	09 2d       	mov	r16, r9
    3400:	0e 7e       	andi	r16, 0xEE	; 238
    3402:	05 c0       	rjmp	.+10     	; 0x340e <vfprintf+0x59e>
    3404:	dc 2c       	mov	r13, r12
    3406:	09 2d       	mov	r16, r9
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <vfprintf+0x5a0>
    340a:	dc 2c       	mov	r13, r12
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <vfprintf+0x5a0>
    340e:	d1 2e       	mov	r13, r17
    3410:	04 ff       	sbrs	r16, 4
    3412:	0d c0       	rjmp	.+26     	; 0x342e <vfprintf+0x5be>
    3414:	fe 01       	movw	r30, r28
    3416:	ec 0d       	add	r30, r12
    3418:	f1 1d       	adc	r31, r1
    341a:	80 81       	ld	r24, Z
    341c:	80 33       	cpi	r24, 0x30	; 48
    341e:	11 f4       	brne	.+4      	; 0x3424 <vfprintf+0x5b4>
    3420:	09 7e       	andi	r16, 0xE9	; 233
    3422:	09 c0       	rjmp	.+18     	; 0x3436 <vfprintf+0x5c6>
    3424:	02 ff       	sbrs	r16, 2
    3426:	06 c0       	rjmp	.+12     	; 0x3434 <vfprintf+0x5c4>
    3428:	d3 94       	inc	r13
    342a:	d3 94       	inc	r13
    342c:	04 c0       	rjmp	.+8      	; 0x3436 <vfprintf+0x5c6>
    342e:	80 2f       	mov	r24, r16
    3430:	86 78       	andi	r24, 0x86	; 134
    3432:	09 f0       	breq	.+2      	; 0x3436 <vfprintf+0x5c6>
    3434:	d3 94       	inc	r13
    3436:	03 fd       	sbrc	r16, 3
    3438:	11 c0       	rjmp	.+34     	; 0x345c <vfprintf+0x5ec>
    343a:	00 ff       	sbrs	r16, 0
    343c:	06 c0       	rjmp	.+12     	; 0x344a <vfprintf+0x5da>
    343e:	1c 2d       	mov	r17, r12
    3440:	d5 14       	cp	r13, r5
    3442:	80 f4       	brcc	.+32     	; 0x3464 <vfprintf+0x5f4>
    3444:	15 0d       	add	r17, r5
    3446:	1d 19       	sub	r17, r13
    3448:	0d c0       	rjmp	.+26     	; 0x3464 <vfprintf+0x5f4>
    344a:	d5 14       	cp	r13, r5
    344c:	58 f4       	brcc	.+22     	; 0x3464 <vfprintf+0x5f4>
    344e:	b7 01       	movw	r22, r14
    3450:	80 e2       	ldi	r24, 0x20	; 32
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3458:	d3 94       	inc	r13
    345a:	f7 cf       	rjmp	.-18     	; 0x344a <vfprintf+0x5da>
    345c:	d5 14       	cp	r13, r5
    345e:	10 f4       	brcc	.+4      	; 0x3464 <vfprintf+0x5f4>
    3460:	5d 18       	sub	r5, r13
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <vfprintf+0x5f6>
    3464:	51 2c       	mov	r5, r1
    3466:	04 ff       	sbrs	r16, 4
    3468:	10 c0       	rjmp	.+32     	; 0x348a <vfprintf+0x61a>
    346a:	b7 01       	movw	r22, r14
    346c:	80 e3       	ldi	r24, 0x30	; 48
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3474:	02 ff       	sbrs	r16, 2
    3476:	17 c0       	rjmp	.+46     	; 0x34a6 <vfprintf+0x636>
    3478:	01 fd       	sbrc	r16, 1
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <vfprintf+0x612>
    347c:	88 e7       	ldi	r24, 0x78	; 120
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <vfprintf+0x616>
    3482:	88 e5       	ldi	r24, 0x58	; 88
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	b7 01       	movw	r22, r14
    3488:	0c c0       	rjmp	.+24     	; 0x34a2 <vfprintf+0x632>
    348a:	80 2f       	mov	r24, r16
    348c:	86 78       	andi	r24, 0x86	; 134
    348e:	59 f0       	breq	.+22     	; 0x34a6 <vfprintf+0x636>
    3490:	01 ff       	sbrs	r16, 1
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <vfprintf+0x628>
    3494:	8b e2       	ldi	r24, 0x2B	; 43
    3496:	01 c0       	rjmp	.+2      	; 0x349a <vfprintf+0x62a>
    3498:	80 e2       	ldi	r24, 0x20	; 32
    349a:	07 fd       	sbrc	r16, 7
    349c:	8d e2       	ldi	r24, 0x2D	; 45
    349e:	b7 01       	movw	r22, r14
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    34a6:	c1 16       	cp	r12, r17
    34a8:	38 f4       	brcc	.+14     	; 0x34b8 <vfprintf+0x648>
    34aa:	b7 01       	movw	r22, r14
    34ac:	80 e3       	ldi	r24, 0x30	; 48
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    34b4:	11 50       	subi	r17, 0x01	; 1
    34b6:	f7 cf       	rjmp	.-18     	; 0x34a6 <vfprintf+0x636>
    34b8:	ca 94       	dec	r12
    34ba:	f3 01       	movw	r30, r6
    34bc:	ec 0d       	add	r30, r12
    34be:	f1 1d       	adc	r31, r1
    34c0:	80 81       	ld	r24, Z
    34c2:	b7 01       	movw	r22, r14
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    34ca:	c1 10       	cpse	r12, r1
    34cc:	f5 cf       	rjmp	.-22     	; 0x34b8 <vfprintf+0x648>
    34ce:	15 c0       	rjmp	.+42     	; 0x34fa <vfprintf+0x68a>
    34d0:	f4 e0       	ldi	r31, 0x04	; 4
    34d2:	f5 15       	cp	r31, r5
    34d4:	60 f5       	brcc	.+88     	; 0x352e <vfprintf+0x6be>
    34d6:	84 e0       	ldi	r24, 0x04	; 4
    34d8:	58 1a       	sub	r5, r24
    34da:	93 fe       	sbrs	r9, 3
    34dc:	1f c0       	rjmp	.+62     	; 0x351c <vfprintf+0x6ac>
    34de:	01 11       	cpse	r16, r1
    34e0:	27 c0       	rjmp	.+78     	; 0x3530 <vfprintf+0x6c0>
    34e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    34e4:	23 ff       	sbrs	r18, 3
    34e6:	2a c0       	rjmp	.+84     	; 0x353c <vfprintf+0x6cc>
    34e8:	00 ea       	ldi	r16, 0xA0	; 160
    34ea:	10 e0       	ldi	r17, 0x00	; 0
    34ec:	39 2d       	mov	r19, r9
    34ee:	30 71       	andi	r19, 0x10	; 16
    34f0:	93 2e       	mov	r9, r19
    34f2:	f8 01       	movw	r30, r16
    34f4:	84 91       	lpm	r24, Z
    34f6:	81 11       	cpse	r24, r1
    34f8:	24 c0       	rjmp	.+72     	; 0x3542 <vfprintf+0x6d2>
    34fa:	55 20       	and	r5, r5
    34fc:	09 f4       	brne	.+2      	; 0x3500 <vfprintf+0x690>
    34fe:	e4 cc       	rjmp	.-1592   	; 0x2ec8 <vfprintf+0x58>
    3500:	b7 01       	movw	r22, r14
    3502:	80 e2       	ldi	r24, 0x20	; 32
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    350a:	5a 94       	dec	r5
    350c:	f6 cf       	rjmp	.-20     	; 0x34fa <vfprintf+0x68a>
    350e:	f7 01       	movw	r30, r14
    3510:	86 81       	ldd	r24, Z+6	; 0x06
    3512:	97 81       	ldd	r25, Z+7	; 0x07
    3514:	26 c0       	rjmp	.+76     	; 0x3562 <vfprintf+0x6f2>
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	9f ef       	ldi	r25, 0xFF	; 255
    351a:	23 c0       	rjmp	.+70     	; 0x3562 <vfprintf+0x6f2>
    351c:	b7 01       	movw	r22, r14
    351e:	80 e2       	ldi	r24, 0x20	; 32
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    3526:	5a 94       	dec	r5
    3528:	51 10       	cpse	r5, r1
    352a:	f8 cf       	rjmp	.-16     	; 0x351c <vfprintf+0x6ac>
    352c:	d8 cf       	rjmp	.-80     	; 0x34de <vfprintf+0x66e>
    352e:	51 2c       	mov	r5, r1
    3530:	b7 01       	movw	r22, r14
    3532:	80 2f       	mov	r24, r16
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    353a:	d3 cf       	rjmp	.-90     	; 0x34e2 <vfprintf+0x672>
    353c:	04 ea       	ldi	r16, 0xA4	; 164
    353e:	10 e0       	ldi	r17, 0x00	; 0
    3540:	d5 cf       	rjmp	.-86     	; 0x34ec <vfprintf+0x67c>
    3542:	91 10       	cpse	r9, r1
    3544:	80 52       	subi	r24, 0x20	; 32
    3546:	b7 01       	movw	r22, r14
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 0e 1c 	call	0x381c	; 0x381c <fputc>
    354e:	0f 5f       	subi	r16, 0xFF	; 255
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	cf cf       	rjmp	.-98     	; 0x34f2 <vfprintf+0x682>
    3554:	23 e0       	ldi	r18, 0x03	; 3
    3556:	25 15       	cp	r18, r5
    3558:	10 f4       	brcc	.+4      	; 0x355e <vfprintf+0x6ee>
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	bd cf       	rjmp	.-134    	; 0x34d8 <vfprintf+0x668>
    355e:	51 2c       	mov	r5, r1
    3560:	c0 cf       	rjmp	.-128    	; 0x34e2 <vfprintf+0x672>
    3562:	60 96       	adiw	r28, 0x10	; 16
    3564:	e2 e1       	ldi	r30, 0x12	; 18
    3566:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__>

0000356a <__divmodhi4>:
    356a:	97 fb       	bst	r25, 7
    356c:	07 2e       	mov	r0, r23
    356e:	16 f4       	brtc	.+4      	; 0x3574 <__divmodhi4+0xa>
    3570:	00 94       	com	r0
    3572:	07 d0       	rcall	.+14     	; 0x3582 <__divmodhi4_neg1>
    3574:	77 fd       	sbrc	r23, 7
    3576:	09 d0       	rcall	.+18     	; 0x358a <__divmodhi4_neg2>
    3578:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__udivmodhi4>
    357c:	07 fc       	sbrc	r0, 7
    357e:	05 d0       	rcall	.+10     	; 0x358a <__divmodhi4_neg2>
    3580:	3e f4       	brtc	.+14     	; 0x3590 <__divmodhi4_exit>

00003582 <__divmodhi4_neg1>:
    3582:	90 95       	com	r25
    3584:	81 95       	neg	r24
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	08 95       	ret

0000358a <__divmodhi4_neg2>:
    358a:	70 95       	com	r23
    358c:	61 95       	neg	r22
    358e:	7f 4f       	sbci	r23, 0xFF	; 255

00003590 <__divmodhi4_exit>:
    3590:	08 95       	ret

00003592 <__prologue_saves__>:
    3592:	2f 92       	push	r2
    3594:	3f 92       	push	r3
    3596:	4f 92       	push	r4
    3598:	5f 92       	push	r5
    359a:	6f 92       	push	r6
    359c:	7f 92       	push	r7
    359e:	8f 92       	push	r8
    35a0:	9f 92       	push	r9
    35a2:	af 92       	push	r10
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	ca 1b       	sub	r28, r26
    35bc:	db 0b       	sbc	r29, r27
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	09 94       	ijmp

000035c4 <__epilogue_restores__>:
    35c4:	2a 88       	ldd	r2, Y+18	; 0x12
    35c6:	39 88       	ldd	r3, Y+17	; 0x11
    35c8:	48 88       	ldd	r4, Y+16	; 0x10
    35ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    35cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    35d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35d6:	b9 84       	ldd	r11, Y+9	; 0x09
    35d8:	c8 84       	ldd	r12, Y+8	; 0x08
    35da:	df 80       	ldd	r13, Y+7	; 0x07
    35dc:	ee 80       	ldd	r14, Y+6	; 0x06
    35de:	fd 80       	ldd	r15, Y+5	; 0x05
    35e0:	0c 81       	ldd	r16, Y+4	; 0x04
    35e2:	1b 81       	ldd	r17, Y+3	; 0x03
    35e4:	aa 81       	ldd	r26, Y+2	; 0x02
    35e6:	b9 81       	ldd	r27, Y+1	; 0x01
    35e8:	ce 0f       	add	r28, r30
    35ea:	d1 1d       	adc	r29, r1
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	ed 01       	movw	r28, r26
    35f2:	08 95       	ret

000035f4 <__udivmodhi4>:
    35f4:	aa 1b       	sub	r26, r26
    35f6:	bb 1b       	sub	r27, r27
    35f8:	51 e1       	ldi	r21, 0x11	; 17
    35fa:	07 c0       	rjmp	.+14     	; 0x360a <__udivmodhi4_ep>

000035fc <__udivmodhi4_loop>:
    35fc:	aa 1f       	adc	r26, r26
    35fe:	bb 1f       	adc	r27, r27
    3600:	a6 17       	cp	r26, r22
    3602:	b7 07       	cpc	r27, r23
    3604:	10 f0       	brcs	.+4      	; 0x360a <__udivmodhi4_ep>
    3606:	a6 1b       	sub	r26, r22
    3608:	b7 0b       	sbc	r27, r23

0000360a <__udivmodhi4_ep>:
    360a:	88 1f       	adc	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	5a 95       	dec	r21
    3610:	a9 f7       	brne	.-22     	; 0x35fc <__udivmodhi4_loop>
    3612:	80 95       	com	r24
    3614:	90 95       	com	r25
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	08 95       	ret

0000361c <__ftoa_engine>:
    361c:	28 30       	cpi	r18, 0x08	; 8
    361e:	08 f0       	brcs	.+2      	; 0x3622 <__ftoa_engine+0x6>
    3620:	27 e0       	ldi	r18, 0x07	; 7
    3622:	33 27       	eor	r19, r19
    3624:	da 01       	movw	r26, r20
    3626:	99 0f       	add	r25, r25
    3628:	31 1d       	adc	r19, r1
    362a:	87 fd       	sbrc	r24, 7
    362c:	91 60       	ori	r25, 0x01	; 1
    362e:	00 96       	adiw	r24, 0x00	; 0
    3630:	61 05       	cpc	r22, r1
    3632:	71 05       	cpc	r23, r1
    3634:	39 f4       	brne	.+14     	; 0x3644 <__ftoa_engine+0x28>
    3636:	32 60       	ori	r19, 0x02	; 2
    3638:	2e 5f       	subi	r18, 0xFE	; 254
    363a:	3d 93       	st	X+, r19
    363c:	30 e3       	ldi	r19, 0x30	; 48
    363e:	2a 95       	dec	r18
    3640:	e1 f7       	brne	.-8      	; 0x363a <__ftoa_engine+0x1e>
    3642:	08 95       	ret
    3644:	9f 3f       	cpi	r25, 0xFF	; 255
    3646:	30 f0       	brcs	.+12     	; 0x3654 <__ftoa_engine+0x38>
    3648:	80 38       	cpi	r24, 0x80	; 128
    364a:	71 05       	cpc	r23, r1
    364c:	61 05       	cpc	r22, r1
    364e:	09 f0       	breq	.+2      	; 0x3652 <__ftoa_engine+0x36>
    3650:	3c 5f       	subi	r19, 0xFC	; 252
    3652:	3c 5f       	subi	r19, 0xFC	; 252
    3654:	3d 93       	st	X+, r19
    3656:	91 30       	cpi	r25, 0x01	; 1
    3658:	08 f0       	brcs	.+2      	; 0x365c <__ftoa_engine+0x40>
    365a:	80 68       	ori	r24, 0x80	; 128
    365c:	91 1d       	adc	r25, r1
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	1f 93       	push	r17
    3664:	0f 93       	push	r16
    3666:	ff 92       	push	r15
    3668:	ef 92       	push	r14
    366a:	19 2f       	mov	r17, r25
    366c:	98 7f       	andi	r25, 0xF8	; 248
    366e:	96 95       	lsr	r25
    3670:	e9 2f       	mov	r30, r25
    3672:	96 95       	lsr	r25
    3674:	96 95       	lsr	r25
    3676:	e9 0f       	add	r30, r25
    3678:	ff 27       	eor	r31, r31
    367a:	ee 5f       	subi	r30, 0xFE	; 254
    367c:	fe 4f       	sbci	r31, 0xFE	; 254
    367e:	99 27       	eor	r25, r25
    3680:	33 27       	eor	r19, r19
    3682:	ee 24       	eor	r14, r14
    3684:	ff 24       	eor	r15, r15
    3686:	a7 01       	movw	r20, r14
    3688:	e7 01       	movw	r28, r14
    368a:	05 90       	lpm	r0, Z+
    368c:	08 94       	sec
    368e:	07 94       	ror	r0
    3690:	28 f4       	brcc	.+10     	; 0x369c <__ftoa_engine+0x80>
    3692:	36 0f       	add	r19, r22
    3694:	e7 1e       	adc	r14, r23
    3696:	f8 1e       	adc	r15, r24
    3698:	49 1f       	adc	r20, r25
    369a:	51 1d       	adc	r21, r1
    369c:	66 0f       	add	r22, r22
    369e:	77 1f       	adc	r23, r23
    36a0:	88 1f       	adc	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	06 94       	lsr	r0
    36a6:	a1 f7       	brne	.-24     	; 0x3690 <__ftoa_engine+0x74>
    36a8:	05 90       	lpm	r0, Z+
    36aa:	07 94       	ror	r0
    36ac:	28 f4       	brcc	.+10     	; 0x36b8 <__ftoa_engine+0x9c>
    36ae:	e7 0e       	add	r14, r23
    36b0:	f8 1e       	adc	r15, r24
    36b2:	49 1f       	adc	r20, r25
    36b4:	56 1f       	adc	r21, r22
    36b6:	c1 1d       	adc	r28, r1
    36b8:	77 0f       	add	r23, r23
    36ba:	88 1f       	adc	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	66 1f       	adc	r22, r22
    36c0:	06 94       	lsr	r0
    36c2:	a1 f7       	brne	.-24     	; 0x36ac <__ftoa_engine+0x90>
    36c4:	05 90       	lpm	r0, Z+
    36c6:	07 94       	ror	r0
    36c8:	28 f4       	brcc	.+10     	; 0x36d4 <__ftoa_engine+0xb8>
    36ca:	f8 0e       	add	r15, r24
    36cc:	49 1f       	adc	r20, r25
    36ce:	56 1f       	adc	r21, r22
    36d0:	c7 1f       	adc	r28, r23
    36d2:	d1 1d       	adc	r29, r1
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	66 1f       	adc	r22, r22
    36da:	77 1f       	adc	r23, r23
    36dc:	06 94       	lsr	r0
    36de:	a1 f7       	brne	.-24     	; 0x36c8 <__ftoa_engine+0xac>
    36e0:	05 90       	lpm	r0, Z+
    36e2:	07 94       	ror	r0
    36e4:	20 f4       	brcc	.+8      	; 0x36ee <__ftoa_engine+0xd2>
    36e6:	49 0f       	add	r20, r25
    36e8:	56 1f       	adc	r21, r22
    36ea:	c7 1f       	adc	r28, r23
    36ec:	d8 1f       	adc	r29, r24
    36ee:	99 0f       	add	r25, r25
    36f0:	66 1f       	adc	r22, r22
    36f2:	77 1f       	adc	r23, r23
    36f4:	88 1f       	adc	r24, r24
    36f6:	06 94       	lsr	r0
    36f8:	a9 f7       	brne	.-22     	; 0x36e4 <__ftoa_engine+0xc8>
    36fa:	84 91       	lpm	r24, Z
    36fc:	10 95       	com	r17
    36fe:	17 70       	andi	r17, 0x07	; 7
    3700:	41 f0       	breq	.+16     	; 0x3712 <__ftoa_engine+0xf6>
    3702:	d6 95       	lsr	r29
    3704:	c7 95       	ror	r28
    3706:	57 95       	ror	r21
    3708:	47 95       	ror	r20
    370a:	f7 94       	ror	r15
    370c:	e7 94       	ror	r14
    370e:	1a 95       	dec	r17
    3710:	c1 f7       	brne	.-16     	; 0x3702 <__ftoa_engine+0xe6>
    3712:	e8 ea       	ldi	r30, 0xA8	; 168
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	68 94       	set
    3718:	15 90       	lpm	r1, Z+
    371a:	15 91       	lpm	r17, Z+
    371c:	35 91       	lpm	r19, Z+
    371e:	65 91       	lpm	r22, Z+
    3720:	95 91       	lpm	r25, Z+
    3722:	05 90       	lpm	r0, Z+
    3724:	7f e2       	ldi	r23, 0x2F	; 47
    3726:	73 95       	inc	r23
    3728:	e1 18       	sub	r14, r1
    372a:	f1 0a       	sbc	r15, r17
    372c:	43 0b       	sbc	r20, r19
    372e:	56 0b       	sbc	r21, r22
    3730:	c9 0b       	sbc	r28, r25
    3732:	d0 09       	sbc	r29, r0
    3734:	c0 f7       	brcc	.-16     	; 0x3726 <__ftoa_engine+0x10a>
    3736:	e1 0c       	add	r14, r1
    3738:	f1 1e       	adc	r15, r17
    373a:	43 1f       	adc	r20, r19
    373c:	56 1f       	adc	r21, r22
    373e:	c9 1f       	adc	r28, r25
    3740:	d0 1d       	adc	r29, r0
    3742:	7e f4       	brtc	.+30     	; 0x3762 <__ftoa_engine+0x146>
    3744:	70 33       	cpi	r23, 0x30	; 48
    3746:	11 f4       	brne	.+4      	; 0x374c <__ftoa_engine+0x130>
    3748:	8a 95       	dec	r24
    374a:	e6 cf       	rjmp	.-52     	; 0x3718 <__ftoa_engine+0xfc>
    374c:	e8 94       	clt
    374e:	01 50       	subi	r16, 0x01	; 1
    3750:	30 f0       	brcs	.+12     	; 0x375e <__ftoa_engine+0x142>
    3752:	08 0f       	add	r16, r24
    3754:	0a f4       	brpl	.+2      	; 0x3758 <__ftoa_engine+0x13c>
    3756:	00 27       	eor	r16, r16
    3758:	02 17       	cp	r16, r18
    375a:	08 f4       	brcc	.+2      	; 0x375e <__ftoa_engine+0x142>
    375c:	20 2f       	mov	r18, r16
    375e:	23 95       	inc	r18
    3760:	02 2f       	mov	r16, r18
    3762:	7a 33       	cpi	r23, 0x3A	; 58
    3764:	28 f0       	brcs	.+10     	; 0x3770 <__ftoa_engine+0x154>
    3766:	79 e3       	ldi	r23, 0x39	; 57
    3768:	7d 93       	st	X+, r23
    376a:	2a 95       	dec	r18
    376c:	e9 f7       	brne	.-6      	; 0x3768 <__ftoa_engine+0x14c>
    376e:	10 c0       	rjmp	.+32     	; 0x3790 <__ftoa_engine+0x174>
    3770:	7d 93       	st	X+, r23
    3772:	2a 95       	dec	r18
    3774:	89 f6       	brne	.-94     	; 0x3718 <__ftoa_engine+0xfc>
    3776:	06 94       	lsr	r0
    3778:	97 95       	ror	r25
    377a:	67 95       	ror	r22
    377c:	37 95       	ror	r19
    377e:	17 95       	ror	r17
    3780:	17 94       	ror	r1
    3782:	e1 18       	sub	r14, r1
    3784:	f1 0a       	sbc	r15, r17
    3786:	43 0b       	sbc	r20, r19
    3788:	56 0b       	sbc	r21, r22
    378a:	c9 0b       	sbc	r28, r25
    378c:	d0 09       	sbc	r29, r0
    378e:	98 f0       	brcs	.+38     	; 0x37b6 <__ftoa_engine+0x19a>
    3790:	23 95       	inc	r18
    3792:	7e 91       	ld	r23, -X
    3794:	73 95       	inc	r23
    3796:	7a 33       	cpi	r23, 0x3A	; 58
    3798:	08 f0       	brcs	.+2      	; 0x379c <__ftoa_engine+0x180>
    379a:	70 e3       	ldi	r23, 0x30	; 48
    379c:	7c 93       	st	X, r23
    379e:	20 13       	cpse	r18, r16
    37a0:	b8 f7       	brcc	.-18     	; 0x3790 <__ftoa_engine+0x174>
    37a2:	7e 91       	ld	r23, -X
    37a4:	70 61       	ori	r23, 0x10	; 16
    37a6:	7d 93       	st	X+, r23
    37a8:	30 f0       	brcs	.+12     	; 0x37b6 <__ftoa_engine+0x19a>
    37aa:	83 95       	inc	r24
    37ac:	71 e3       	ldi	r23, 0x31	; 49
    37ae:	7d 93       	st	X+, r23
    37b0:	70 e3       	ldi	r23, 0x30	; 48
    37b2:	2a 95       	dec	r18
    37b4:	e1 f7       	brne	.-8      	; 0x37ae <__ftoa_engine+0x192>
    37b6:	11 24       	eor	r1, r1
    37b8:	ef 90       	pop	r14
    37ba:	ff 90       	pop	r15
    37bc:	0f 91       	pop	r16
    37be:	1f 91       	pop	r17
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	99 27       	eor	r25, r25
    37c6:	87 fd       	sbrc	r24, 7
    37c8:	90 95       	com	r25
    37ca:	08 95       	ret

000037cc <strnlen_P>:
    37cc:	fc 01       	movw	r30, r24
    37ce:	05 90       	lpm	r0, Z+
    37d0:	61 50       	subi	r22, 0x01	; 1
    37d2:	70 40       	sbci	r23, 0x00	; 0
    37d4:	01 10       	cpse	r0, r1
    37d6:	d8 f7       	brcc	.-10     	; 0x37ce <strnlen_P+0x2>
    37d8:	80 95       	com	r24
    37da:	90 95       	com	r25
    37dc:	8e 0f       	add	r24, r30
    37de:	9f 1f       	adc	r25, r31
    37e0:	08 95       	ret

000037e2 <strcat>:
    37e2:	fb 01       	movw	r30, r22
    37e4:	dc 01       	movw	r26, r24
    37e6:	0d 90       	ld	r0, X+
    37e8:	00 20       	and	r0, r0
    37ea:	e9 f7       	brne	.-6      	; 0x37e6 <strcat+0x4>
    37ec:	11 97       	sbiw	r26, 0x01	; 1
    37ee:	01 90       	ld	r0, Z+
    37f0:	0d 92       	st	X+, r0
    37f2:	00 20       	and	r0, r0
    37f4:	e1 f7       	brne	.-8      	; 0x37ee <strcat+0xc>
    37f6:	08 95       	ret

000037f8 <strcpy>:
    37f8:	fb 01       	movw	r30, r22
    37fa:	dc 01       	movw	r26, r24
    37fc:	01 90       	ld	r0, Z+
    37fe:	0d 92       	st	X+, r0
    3800:	00 20       	and	r0, r0
    3802:	e1 f7       	brne	.-8      	; 0x37fc <strcpy+0x4>
    3804:	08 95       	ret

00003806 <strnlen>:
    3806:	fc 01       	movw	r30, r24
    3808:	61 50       	subi	r22, 0x01	; 1
    380a:	70 40       	sbci	r23, 0x00	; 0
    380c:	01 90       	ld	r0, Z+
    380e:	01 10       	cpse	r0, r1
    3810:	d8 f7       	brcc	.-10     	; 0x3808 <strnlen+0x2>
    3812:	80 95       	com	r24
    3814:	90 95       	com	r25
    3816:	8e 0f       	add	r24, r30
    3818:	9f 1f       	adc	r25, r31
    381a:	08 95       	ret

0000381c <fputc>:
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	fb 01       	movw	r30, r22
    3826:	23 81       	ldd	r18, Z+3	; 0x03
    3828:	21 fd       	sbrc	r18, 1
    382a:	03 c0       	rjmp	.+6      	; 0x3832 <fputc+0x16>
    382c:	8f ef       	ldi	r24, 0xFF	; 255
    382e:	9f ef       	ldi	r25, 0xFF	; 255
    3830:	2c c0       	rjmp	.+88     	; 0x388a <fputc+0x6e>
    3832:	22 ff       	sbrs	r18, 2
    3834:	16 c0       	rjmp	.+44     	; 0x3862 <fputc+0x46>
    3836:	46 81       	ldd	r20, Z+6	; 0x06
    3838:	57 81       	ldd	r21, Z+7	; 0x07
    383a:	24 81       	ldd	r18, Z+4	; 0x04
    383c:	35 81       	ldd	r19, Z+5	; 0x05
    383e:	42 17       	cp	r20, r18
    3840:	53 07       	cpc	r21, r19
    3842:	44 f4       	brge	.+16     	; 0x3854 <fputc+0x38>
    3844:	a0 81       	ld	r26, Z
    3846:	b1 81       	ldd	r27, Z+1	; 0x01
    3848:	9d 01       	movw	r18, r26
    384a:	2f 5f       	subi	r18, 0xFF	; 255
    384c:	3f 4f       	sbci	r19, 0xFF	; 255
    384e:	20 83       	st	Z, r18
    3850:	31 83       	std	Z+1, r19	; 0x01
    3852:	8c 93       	st	X, r24
    3854:	26 81       	ldd	r18, Z+6	; 0x06
    3856:	37 81       	ldd	r19, Z+7	; 0x07
    3858:	2f 5f       	subi	r18, 0xFF	; 255
    385a:	3f 4f       	sbci	r19, 0xFF	; 255
    385c:	26 83       	std	Z+6, r18	; 0x06
    385e:	37 83       	std	Z+7, r19	; 0x07
    3860:	14 c0       	rjmp	.+40     	; 0x388a <fputc+0x6e>
    3862:	8b 01       	movw	r16, r22
    3864:	ec 01       	movw	r28, r24
    3866:	fb 01       	movw	r30, r22
    3868:	00 84       	ldd	r0, Z+8	; 0x08
    386a:	f1 85       	ldd	r31, Z+9	; 0x09
    386c:	e0 2d       	mov	r30, r0
    386e:	09 95       	icall
    3870:	89 2b       	or	r24, r25
    3872:	e1 f6       	brne	.-72     	; 0x382c <fputc+0x10>
    3874:	d8 01       	movw	r26, r16
    3876:	16 96       	adiw	r26, 0x06	; 6
    3878:	8d 91       	ld	r24, X+
    387a:	9c 91       	ld	r25, X
    387c:	17 97       	sbiw	r26, 0x07	; 7
    387e:	01 96       	adiw	r24, 0x01	; 1
    3880:	16 96       	adiw	r26, 0x06	; 6
    3882:	8d 93       	st	X+, r24
    3884:	9c 93       	st	X, r25
    3886:	17 97       	sbiw	r26, 0x07	; 7
    3888:	ce 01       	movw	r24, r28
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	08 95       	ret

00003894 <sprintf>:
    3894:	ae e0       	ldi	r26, 0x0E	; 14
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e0 e5       	ldi	r30, 0x50	; 80
    389a:	fc e1       	ldi	r31, 0x1C	; 28
    389c:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__+0x1c>
    38a0:	0d 89       	ldd	r16, Y+21	; 0x15
    38a2:	1e 89       	ldd	r17, Y+22	; 0x16
    38a4:	86 e0       	ldi	r24, 0x06	; 6
    38a6:	8c 83       	std	Y+4, r24	; 0x04
    38a8:	09 83       	std	Y+1, r16	; 0x01
    38aa:	1a 83       	std	Y+2, r17	; 0x02
    38ac:	8f ef       	ldi	r24, 0xFF	; 255
    38ae:	9f e7       	ldi	r25, 0x7F	; 127
    38b0:	8d 83       	std	Y+5, r24	; 0x05
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	ae 01       	movw	r20, r28
    38b6:	47 5e       	subi	r20, 0xE7	; 231
    38b8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ba:	6f 89       	ldd	r22, Y+23	; 0x17
    38bc:	78 8d       	ldd	r23, Y+24	; 0x18
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <vfprintf>
    38c6:	ef 81       	ldd	r30, Y+7	; 0x07
    38c8:	f8 85       	ldd	r31, Y+8	; 0x08
    38ca:	e0 0f       	add	r30, r16
    38cc:	f1 1f       	adc	r31, r17
    38ce:	10 82       	st	Z, r1
    38d0:	2e 96       	adiw	r28, 0x0e	; 14
    38d2:	e4 e0       	ldi	r30, 0x04	; 4
    38d4:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x1c>

000038d8 <__ultoa_invert>:
    38d8:	fa 01       	movw	r30, r20
    38da:	aa 27       	eor	r26, r26
    38dc:	28 30       	cpi	r18, 0x08	; 8
    38de:	51 f1       	breq	.+84     	; 0x3934 <__ultoa_invert+0x5c>
    38e0:	20 31       	cpi	r18, 0x10	; 16
    38e2:	81 f1       	breq	.+96     	; 0x3944 <__ultoa_invert+0x6c>
    38e4:	e8 94       	clt
    38e6:	6f 93       	push	r22
    38e8:	6e 7f       	andi	r22, 0xFE	; 254
    38ea:	6e 5f       	subi	r22, 0xFE	; 254
    38ec:	7f 4f       	sbci	r23, 0xFF	; 255
    38ee:	8f 4f       	sbci	r24, 0xFF	; 255
    38f0:	9f 4f       	sbci	r25, 0xFF	; 255
    38f2:	af 4f       	sbci	r26, 0xFF	; 255
    38f4:	b1 e0       	ldi	r27, 0x01	; 1
    38f6:	3e d0       	rcall	.+124    	; 0x3974 <__ultoa_invert+0x9c>
    38f8:	b4 e0       	ldi	r27, 0x04	; 4
    38fa:	3c d0       	rcall	.+120    	; 0x3974 <__ultoa_invert+0x9c>
    38fc:	67 0f       	add	r22, r23
    38fe:	78 1f       	adc	r23, r24
    3900:	89 1f       	adc	r24, r25
    3902:	9a 1f       	adc	r25, r26
    3904:	a1 1d       	adc	r26, r1
    3906:	68 0f       	add	r22, r24
    3908:	79 1f       	adc	r23, r25
    390a:	8a 1f       	adc	r24, r26
    390c:	91 1d       	adc	r25, r1
    390e:	a1 1d       	adc	r26, r1
    3910:	6a 0f       	add	r22, r26
    3912:	71 1d       	adc	r23, r1
    3914:	81 1d       	adc	r24, r1
    3916:	91 1d       	adc	r25, r1
    3918:	a1 1d       	adc	r26, r1
    391a:	20 d0       	rcall	.+64     	; 0x395c <__ultoa_invert+0x84>
    391c:	09 f4       	brne	.+2      	; 0x3920 <__ultoa_invert+0x48>
    391e:	68 94       	set
    3920:	3f 91       	pop	r19
    3922:	2a e0       	ldi	r18, 0x0A	; 10
    3924:	26 9f       	mul	r18, r22
    3926:	11 24       	eor	r1, r1
    3928:	30 19       	sub	r19, r0
    392a:	30 5d       	subi	r19, 0xD0	; 208
    392c:	31 93       	st	Z+, r19
    392e:	de f6       	brtc	.-74     	; 0x38e6 <__ultoa_invert+0xe>
    3930:	cf 01       	movw	r24, r30
    3932:	08 95       	ret
    3934:	46 2f       	mov	r20, r22
    3936:	47 70       	andi	r20, 0x07	; 7
    3938:	40 5d       	subi	r20, 0xD0	; 208
    393a:	41 93       	st	Z+, r20
    393c:	b3 e0       	ldi	r27, 0x03	; 3
    393e:	0f d0       	rcall	.+30     	; 0x395e <__ultoa_invert+0x86>
    3940:	c9 f7       	brne	.-14     	; 0x3934 <__ultoa_invert+0x5c>
    3942:	f6 cf       	rjmp	.-20     	; 0x3930 <__ultoa_invert+0x58>
    3944:	46 2f       	mov	r20, r22
    3946:	4f 70       	andi	r20, 0x0F	; 15
    3948:	40 5d       	subi	r20, 0xD0	; 208
    394a:	4a 33       	cpi	r20, 0x3A	; 58
    394c:	18 f0       	brcs	.+6      	; 0x3954 <__ultoa_invert+0x7c>
    394e:	49 5d       	subi	r20, 0xD9	; 217
    3950:	31 fd       	sbrc	r19, 1
    3952:	40 52       	subi	r20, 0x20	; 32
    3954:	41 93       	st	Z+, r20
    3956:	02 d0       	rcall	.+4      	; 0x395c <__ultoa_invert+0x84>
    3958:	a9 f7       	brne	.-22     	; 0x3944 <__ultoa_invert+0x6c>
    395a:	ea cf       	rjmp	.-44     	; 0x3930 <__ultoa_invert+0x58>
    395c:	b4 e0       	ldi	r27, 0x04	; 4
    395e:	a6 95       	lsr	r26
    3960:	97 95       	ror	r25
    3962:	87 95       	ror	r24
    3964:	77 95       	ror	r23
    3966:	67 95       	ror	r22
    3968:	ba 95       	dec	r27
    396a:	c9 f7       	brne	.-14     	; 0x395e <__ultoa_invert+0x86>
    396c:	00 97       	sbiw	r24, 0x00	; 0
    396e:	61 05       	cpc	r22, r1
    3970:	71 05       	cpc	r23, r1
    3972:	08 95       	ret
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	0a 2e       	mov	r0, r26
    397a:	06 94       	lsr	r0
    397c:	57 95       	ror	r21
    397e:	47 95       	ror	r20
    3980:	37 95       	ror	r19
    3982:	27 95       	ror	r18
    3984:	ba 95       	dec	r27
    3986:	c9 f7       	brne	.-14     	; 0x397a <__ultoa_invert+0xa2>
    3988:	62 0f       	add	r22, r18
    398a:	73 1f       	adc	r23, r19
    398c:	84 1f       	adc	r24, r20
    398e:	95 1f       	adc	r25, r21
    3990:	a0 1d       	adc	r26, r0
    3992:	08 95       	ret

00003994 <eeprom_read_block>:
    3994:	60 50       	subi	r22, 0x00	; 0
    3996:	7c 4e       	sbci	r23, 0xEC	; 236
    3998:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <memcpy>

0000399c <eeprom_update_block>:
    399c:	dc 01       	movw	r26, r24
    399e:	a4 0f       	add	r26, r20
    39a0:	b5 1f       	adc	r27, r21
    39a2:	41 50       	subi	r20, 0x01	; 1
    39a4:	50 40       	sbci	r21, 0x00	; 0
    39a6:	48 f0       	brcs	.+18     	; 0x39ba <eeprom_update_block+0x1e>
    39a8:	cb 01       	movw	r24, r22
    39aa:	84 0f       	add	r24, r20
    39ac:	95 1f       	adc	r25, r21
    39ae:	2e 91       	ld	r18, -X
    39b0:	0e 94 df 1c 	call	0x39be	; 0x39be <eeprom_update_r18>
    39b4:	41 50       	subi	r20, 0x01	; 1
    39b6:	50 40       	sbci	r21, 0x00	; 0
    39b8:	d0 f7       	brcc	.-12     	; 0x39ae <eeprom_update_block+0x12>
    39ba:	08 95       	ret

000039bc <eeprom_update_byte>:
    39bc:	26 2f       	mov	r18, r22

000039be <eeprom_update_r18>:
    39be:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <eeprom_mapen>
    39c2:	00 80       	ld	r0, Z
    39c4:	02 16       	cp	r0, r18
    39c6:	19 f0       	breq	.+6      	; 0x39ce <eeprom_update_r18+0x10>
    39c8:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <eeprom_write_r18>
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	08 95       	ret

000039d2 <eeprom_write_byte>:
    39d2:	26 2f       	mov	r18, r22

000039d4 <eeprom_write_r18>:
    39d4:	af 93       	push	r26
    39d6:	bf 93       	push	r27
    39d8:	e0 e0       	ldi	r30, 0x00	; 0
    39da:	f0 e1       	ldi	r31, 0x10	; 16
    39dc:	32 81       	ldd	r19, Z+2	; 0x02
    39de:	31 fd       	sbrc	r19, 1
    39e0:	fd cf       	rjmp	.-6      	; 0x39dc <eeprom_write_r18+0x8>
    39e2:	dc 01       	movw	r26, r24
    39e4:	a0 50       	subi	r26, 0x00	; 0
    39e6:	bc 4e       	sbci	r27, 0xEC	; 236
    39e8:	2c 93       	st	X, r18
    39ea:	2d e9       	ldi	r18, 0x9D	; 157
    39ec:	24 bf       	out	0x34, r18	; 52
    39ee:	23 e0       	ldi	r18, 0x03	; 3
    39f0:	20 83       	st	Z, r18
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	bf 91       	pop	r27
    39f6:	af 91       	pop	r26
    39f8:	08 95       	ret

000039fa <eeprom_read_byte>:
    39fa:	03 d0       	rcall	.+6      	; 0x3a02 <eeprom_mapen>
    39fc:	80 81       	ld	r24, Z
    39fe:	99 27       	eor	r25, r25
    3a00:	08 95       	ret

00003a02 <eeprom_mapen>:
    3a02:	fc 01       	movw	r30, r24
    3a04:	e0 50       	subi	r30, 0x00	; 0
    3a06:	fc 4e       	sbci	r31, 0xEC	; 236
    3a08:	08 95       	ret

00003a0a <memcpy>:
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <memcpy+0xa>
    3a10:	01 90       	ld	r0, Z+
    3a12:	0d 92       	st	X+, r0
    3a14:	41 50       	subi	r20, 0x01	; 1
    3a16:	50 40       	sbci	r21, 0x00	; 0
    3a18:	d8 f7       	brcc	.-10     	; 0x3a10 <memcpy+0x6>
    3a1a:	08 95       	ret

00003a1c <_exit>:
    3a1c:	f8 94       	cli

00003a1e <__stop_program>:
    3a1e:	ff cf       	rjmp	.-2      	; 0x3a1e <__stop_program>
