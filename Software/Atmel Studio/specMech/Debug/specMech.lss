
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00006ec3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2d  0000a302  00006302  00006396  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a53  00802800  00802800  00006ec3  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00006ec3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f20  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  00006f60  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b961  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044d2  00000000  00000000  00012f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004ac6  00000000  00000000  000173e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001320  00000000  00000000  0001beac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024da  00000000  00000000  0001d1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005730  00000000  00000000  0001f6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  00024dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
       c:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__vector_3>
      10:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      18:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      1c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      20:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      24:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      28:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      2c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      30:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <__vector_12>
      34:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      38:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      3c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      40:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      44:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__vector_17>
      48:	0c 94 0e 28 	jmp	0x501c	; 0x501c <__vector_18>
      4c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      50:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_20>
      54:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      58:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      5c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      60:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      64:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      68:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <__vector_26>
      6c:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__vector_27>
      70:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      74:	0c 94 b3 28 	jmp	0x5166	; 0x5166 <__vector_29>
      78:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      7c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      80:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      84:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      88:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      8c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      90:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      94:	0c 94 4a 28 	jmp	0x5094	; 0x5094 <__vector_37>
      98:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_38>
      9c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__bad_interrupt>
      a0:	e4 04       	cpc	r14, r4
      a2:	0b 05       	cpc	r16, r11
      a4:	0b 05       	cpc	r16, r11
      a6:	0b 05       	cpc	r16, r11
      a8:	0b 05       	cpc	r16, r11
      aa:	0b 05       	cpc	r16, r11
      ac:	0b 05       	cpc	r16, r11
      ae:	0b 05       	cpc	r16, r11
      b0:	0b 05       	cpc	r16, r11
      b2:	e7 04       	cpc	r14, r7
      b4:	0b 05       	cpc	r16, r11
      b6:	0b 05       	cpc	r16, r11
      b8:	0b 05       	cpc	r16, r11
      ba:	0b 05       	cpc	r16, r11
      bc:	0b 05       	cpc	r16, r11
      be:	0b 05       	cpc	r16, r11
      c0:	0b 05       	cpc	r16, r11
      c2:	0b 05       	cpc	r16, r11
      c4:	0b 05       	cpc	r16, r11
      c6:	0b 05       	cpc	r16, r11
      c8:	0b 05       	cpc	r16, r11
      ca:	0b 05       	cpc	r16, r11
      cc:	0b 05       	cpc	r16, r11
      ce:	0b 05       	cpc	r16, r11
      d0:	0b 05       	cpc	r16, r11
      d2:	0b 05       	cpc	r16, r11
      d4:	d2 04       	cpc	r13, r2
      d6:	0b 05       	cpc	r16, r11
      d8:	0b 05       	cpc	r16, r11
      da:	0b 05       	cpc	r16, r11
      dc:	0b 05       	cpc	r16, r11
      de:	0b 05       	cpc	r16, r11
      e0:	0b 05       	cpc	r16, r11
      e2:	0b 05       	cpc	r16, r11
      e4:	0b 05       	cpc	r16, r11
      e6:	0b 05       	cpc	r16, r11
      e8:	d8 04       	cpc	r13, r8
      ea:	0b 05       	cpc	r16, r11
      ec:	d5 04       	cpc	r13, r5
      ee:	0b 05       	cpc	r16, r11
      f0:	0b 05       	cpc	r16, r11
      f2:	db 04       	cpc	r13, r11
      f4:	de 04       	cpc	r13, r14
      f6:	e1 04       	cpc	r14, r1
      f8:	40 11       	cpse	r20, r0
      fa:	40 11       	cpse	r20, r0
      fc:	40 11       	cpse	r20, r0
      fe:	60 17       	cp	r22, r16
     100:	60 17       	cp	r22, r16
     102:	60 17       	cp	r22, r16
     104:	60 17       	cp	r22, r16
     106:	60 17       	cp	r22, r16
     108:	60 17       	cp	r22, r16
     10a:	60 17       	cp	r22, r16
     10c:	60 17       	cp	r22, r16
     10e:	60 17       	cp	r22, r16
     110:	60 17       	cp	r22, r16
     112:	60 17       	cp	r22, r16
     114:	60 17       	cp	r22, r16
     116:	60 17       	cp	r22, r16
     118:	60 17       	cp	r22, r16
     11a:	60 17       	cp	r22, r16
     11c:	60 17       	cp	r22, r16
     11e:	60 17       	cp	r22, r16
     120:	60 17       	cp	r22, r16
     122:	22 17       	cp	r18, r18
     124:	60 17       	cp	r22, r16
     126:	60 17       	cp	r22, r16
     128:	60 17       	cp	r22, r16
     12a:	60 17       	cp	r22, r16
     12c:	60 17       	cp	r22, r16
     12e:	60 17       	cp	r22, r16
     130:	60 17       	cp	r22, r16
     132:	60 17       	cp	r22, r16
     134:	60 17       	cp	r22, r16
     136:	60 17       	cp	r22, r16
     138:	37 13       	cpse	r19, r23
     13a:	37 13       	cpse	r19, r23
     13c:	37 13       	cpse	r19, r23
     13e:	60 17       	cp	r22, r16
     140:	e5 13       	cpse	r30, r21
     142:	60 17       	cp	r22, r16
     144:	60 17       	cp	r22, r16
     146:	60 17       	cp	r22, r16
     148:	60 17       	cp	r22, r16
     14a:	60 17       	cp	r22, r16
     14c:	60 17       	cp	r22, r16
     14e:	60 17       	cp	r22, r16
     150:	60 17       	cp	r22, r16
     152:	60 17       	cp	r22, r16
     154:	22 15       	cp	r18, r2
     156:	f8 15       	cp	r31, r8
     158:	60 17       	cp	r22, r16
     15a:	60 17       	cp	r22, r16
     15c:	60 17       	cp	r22, r16
     15e:	81 16       	cp	r8, r17
     160:	60 17       	cp	r22, r16
     162:	c9 16       	cp	r12, r25
     164:	3f 22       	and	r3, r31
     166:	3f 22       	and	r3, r31
     168:	3f 22       	and	r3, r31
     16a:	4b 22       	and	r4, r27
     16c:	d4 22       	and	r13, r20
     16e:	d4 22       	and	r13, r20
     170:	d4 22       	and	r13, r20
     172:	d4 22       	and	r13, r20
     174:	d4 22       	and	r13, r20
     176:	d4 22       	and	r13, r20
     178:	d4 22       	and	r13, r20
     17a:	d4 22       	and	r13, r20
     17c:	d4 22       	and	r13, r20
     17e:	d4 22       	and	r13, r20
     180:	d4 22       	and	r13, r20
     182:	d4 22       	and	r13, r20
     184:	d4 22       	and	r13, r20
     186:	d4 22       	and	r13, r20
     188:	d4 22       	and	r13, r20
     18a:	d4 22       	and	r13, r20
     18c:	d4 22       	and	r13, r20
     18e:	d4 22       	and	r13, r20
     190:	d4 22       	and	r13, r20
     192:	d4 22       	and	r13, r20
     194:	d4 22       	and	r13, r20
     196:	d4 22       	and	r13, r20
     198:	d4 22       	and	r13, r20
     19a:	d4 22       	and	r13, r20
     19c:	d4 22       	and	r13, r20
     19e:	d4 22       	and	r13, r20
     1a0:	d4 22       	and	r13, r20
     1a2:	d4 22       	and	r13, r20
     1a4:	83 22       	and	r8, r19
     1a6:	83 22       	and	r8, r19
     1a8:	83 22       	and	r8, r19
     1aa:	a8 22       	and	r10, r24
     1ac:	d4 22       	and	r13, r20
     1ae:	d4 22       	and	r13, r20
     1b0:	d4 22       	and	r13, r20
     1b2:	d4 22       	and	r13, r20
     1b4:	d4 22       	and	r13, r20
     1b6:	d4 22       	and	r13, r20
     1b8:	d4 22       	and	r13, r20
     1ba:	d4 22       	and	r13, r20
     1bc:	d4 22       	and	r13, r20
     1be:	d4 22       	and	r13, r20
     1c0:	d4 22       	and	r13, r20
     1c2:	d4 22       	and	r13, r20
     1c4:	d4 22       	and	r13, r20
     1c6:	d4 22       	and	r13, r20
     1c8:	d4 22       	and	r13, r20
     1ca:	d4 22       	and	r13, r20
     1cc:	d4 22       	and	r13, r20
     1ce:	d4 22       	and	r13, r20
     1d0:	d4 22       	and	r13, r20
     1d2:	3b 22       	and	r3, r27

000001d4 <__trampolines_end>:
     1d4:	6e 61       	ori	r22, 0x1E	; 30
     1d6:	6e 00       	.word	0x006e	; ????

000001d8 <__c.2332>:
     1d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     208:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     218:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     228:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     238:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     248:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     258:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     268:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     278:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     288:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     298:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf ef       	ldi	r28, 0xFF	; 255
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df e3       	ldi	r29, 0x3F	; 63
     2e0:	de bf       	out	0x3e, r29	; 62

000002e2 <__do_clear_bss>:
     2e2:	22 e3       	ldi	r18, 0x32	; 50
     2e4:	a0 e0       	ldi	r26, 0x00	; 0
     2e6:	b8 e2       	ldi	r27, 0x28	; 40
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <.do_clear_bss_start>

000002ea <.do_clear_bss_loop>:
     2ea:	1d 92       	st	X+, r1

000002ec <.do_clear_bss_start>:
     2ec:	a3 35       	cpi	r26, 0x53	; 83
     2ee:	b2 07       	cpc	r27, r18
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <.do_clear_bss_loop>
     2f2:	0e 94 91 0a 	call	0x1522	; 0x1522 <main>
     2f6:	0c 94 7f 31 	jmp	0x62fe	; 0x62fe <_exit>

000002fa <__bad_interrupt>:
     2fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fe <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     2fe:	8f 92       	push	r8
     300:	9f 92       	push	r9
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <read_AD590+0x16>
     314:	00 d0       	rcall	.+0      	; 0x316 <read_AD590+0x18>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	c9 f0       	breq	.+50     	; 0x352 <read_AD590+0x54>
     320:	18 f0       	brcs	.+6      	; 0x328 <read_AD590+0x2a>
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	61 f0       	breq	.+24     	; 0x33e <read_AD590+0x40>
     326:	10 c0       	rjmp	.+32     	; 0x348 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     328:	0f 2e       	mov	r0, r31
     32a:	f3 e3       	ldi	r31, 0x33	; 51
     32c:	8f 2e       	mov	r8, r31
     32e:	98 2c       	mov	r9, r8
     330:	f3 ef       	ldi	r31, 0xF3	; 243
     332:	af 2e       	mov	r10, r31
     334:	f0 e4       	ldi	r31, 0x40	; 64
     336:	bf 2e       	mov	r11, r31
     338:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     33a:	11 e0       	ldi	r17, 0x01	; 1
     33c:	0e c0       	rjmp	.+28     	; 0x35a <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     33e:	81 2c       	mov	r8, r1
     340:	91 2c       	mov	r9, r1
     342:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     344:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     346:	09 c0       	rjmp	.+18     	; 0x35a <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     348:	81 2c       	mov	r8, r1
     34a:	91 2c       	mov	r9, r1
     34c:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     34e:	10 e0       	ldi	r17, 0x00	; 0
			break;
     350:	04 c0       	rjmp	.+8      	; 0x35a <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     352:	81 2c       	mov	r8, r1
     354:	91 2c       	mov	r9, r1
     356:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     358:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	66 e0       	ldi	r22, 0x06	; 6
     35e:	87 e2       	ldi	r24, 0x27	; 39
     360:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     364:	41 2f       	mov	r20, r17
     366:	40 95       	com	r20
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	87 e2       	ldi	r24, 0x27	; 39
     36c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     370:	41 2f       	mov	r20, r17
     372:	6a e0       	ldi	r22, 0x0A	; 10
     374:	87 e2       	ldi	r24, 0x27	; 39
     376:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	86 e1       	ldi	r24, 0x16	; 22
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <read_AD590+0x7e>
     380:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     382:	8e 01       	movw	r16, r28
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	20 e8       	ldi	r18, 0x80	; 128
     38a:	40 e7       	ldi	r20, 0x70	; 112
     38c:	68 e0       	ldi	r22, 0x08	; 8
     38e:	88 e4       	ldi	r24, 0x48	; 72
     390:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	51 f4       	brne	.+20     	; 0x3ac <read_AD590+0xae>
		*temperature = BADFLOAT;
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e8       	ldi	r21, 0x80	; 128
     39c:	66 e2       	ldi	r22, 0x26	; 38
     39e:	74 ec       	ldi	r23, 0xC4	; 196
     3a0:	f7 01       	movw	r30, r14
     3a2:	40 83       	st	Z, r20
     3a4:	51 83       	std	Z+1, r21	; 0x01
     3a6:	62 83       	std	Z+2, r22	; 0x02
     3a8:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     3aa:	1c c0       	rjmp	.+56     	; 0x3e4 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	4a e7       	ldi	r20, 0x7A	; 122
     3b2:	54 e4       	ldi	r21, 0x44	; 68
     3b4:	69 81       	ldd	r22, Y+1	; 0x01
     3b6:	7a 81       	ldd	r23, Y+2	; 0x02
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e9       	ldi	r19, 0x93	; 147
     3c4:	48 e8       	ldi	r20, 0x88	; 136
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 de 28 	call	0x51bc	; 0x51bc <__subsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c5 01       	movw	r24, r10
     3d2:	b4 01       	movw	r22, r8
     3d4:	0e 94 df 28 	call	0x51be	; 0x51be <__addsf3>
     3d8:	f7 01       	movw	r30, r14
     3da:	60 83       	st	Z, r22
     3dc:	71 83       	std	Z+1, r23	; 0x01
     3de:	82 83       	std	Z+2, r24	; 0x02
     3e0:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     3e2:	80 e0       	ldi	r24, 0x00	; 0

}
     3e4:	24 96       	adiw	r28, 0x04	; 4
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	08 95       	ret

00000400 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	f8 2e       	mov	r15, r24
     41a:	e6 2e       	mov	r14, r22
     41c:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     41e:	46 2b       	or	r20, r22
     420:	c4 2f       	mov	r28, r20
     422:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     424:	d2 2f       	mov	r29, r18
     426:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e8       	ldi	r25, 0x80	; 128
     42c:	a6 e2       	ldi	r26, 0x26	; 38
     42e:	b4 ec       	ldi	r27, 0xC4	; 196
     430:	f8 01       	movw	r30, r16
     432:	80 83       	st	Z, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	a2 83       	std	Z+2, r26	; 0x02
     438:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8f 2d       	mov	r24, r15
     43e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
     442:	08 2f       	mov	r16, r24
     444:	88 23       	and	r24, r24
     446:	21 f0       	breq	.+8      	; 0x450 <read_ADS1115+0x50>
		stop_TWI();
     448:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     44c:	13 e6       	ldi	r17, 0x63	; 99
     44e:	b4 c0       	rjmp	.+360    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     456:	18 2f       	mov	r17, r24
     458:	83 36       	cpi	r24, 0x63	; 99
     45a:	19 f4       	brne	.+6      	; 0x462 <read_ADS1115+0x62>
		stop_TWI();
     45c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     460:	ab c0       	rjmp	.+342    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     468:	18 2f       	mov	r17, r24
     46a:	83 36       	cpi	r24, 0x63	; 99
     46c:	19 f4       	brne	.+6      	; 0x474 <read_ADS1115+0x74>
		stop_TWI();
     46e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     472:	a2 c0       	rjmp	.+324    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     474:	8d 2f       	mov	r24, r29
     476:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     47a:	18 2f       	mov	r17, r24
     47c:	83 36       	cpi	r24, 0x63	; 99
     47e:	19 f4       	brne	.+6      	; 0x486 <read_ADS1115+0x86>
		stop_TWI();
     480:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     484:	99 c0       	rjmp	.+306    	; 0x5b8 <read_ADS1115+0x1b8>
	}
	stop_TWI();
     486:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
     48a:	fc e1       	ldi	r31, 0x1C	; 28
     48c:	fa 95       	dec	r31
     48e:	f1 f7       	brne	.-4      	; 0x48c <read_ADS1115+0x8c>

	_delay_us(25);									// Power-up time

	converting = YES;
     490:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <read_ADS1115+0xa6>
		start_TWI(addr, TWIREAD);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8f 2d       	mov	r24, r15
     498:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
		flag = readlast_TWI();
     49c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
		if (flag & 0b10000000) {
     4a0:	88 23       	and	r24, r24
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <read_ADS1115+0xa6>
			converting = NO;
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     4a6:	c1 11       	cpse	r28, r1
     4a8:	f5 cf       	rjmp	.-22     	; 0x494 <read_ADS1115+0x94>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     4aa:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	8f 2d       	mov	r24, r15
     4b2:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8f 2d       	mov	r24, r15
     4c0:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
	highbyte = read_TWI();
     4c4:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <read_TWI>
     4c8:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     4ca:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
     4ce:	d8 2f       	mov	r29, r24
	stop_TWI();
     4d0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	value = highbyte;
     4d4:	6c 2f       	mov	r22, r28
     4d6:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     4d8:	76 2f       	mov	r23, r22
     4da:	66 27       	eor	r22, r22
	value |= lowbyte;
     4dc:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	e8 16       	cp	r14, r24
     4e2:	49 f1       	breq	.+82     	; 0x536 <read_ADS1115+0x136>
     4e4:	8e 15       	cp	r24, r14
     4e6:	30 f0       	brcs	.+12     	; 0x4f4 <read_ADS1115+0xf4>
     4e8:	ee 20       	and	r14, r14
     4ea:	d9 f1       	breq	.+118    	; 0x562 <read_ADS1115+0x162>
     4ec:	e2 e0       	ldi	r30, 0x02	; 2
     4ee:	ee 16       	cp	r14, r30
     4f0:	69 f1       	breq	.+90     	; 0x54c <read_ADS1115+0x14c>
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <read_ADS1115+0x178>
     4f4:	f8 e0       	ldi	r31, 0x08	; 8
     4f6:	ef 16       	cp	r14, r31
     4f8:	09 f4       	brne	.+2      	; 0x4fc <read_ADS1115+0xfc>
     4fa:	42 c0       	rjmp	.+132    	; 0x580 <read_ADS1115+0x180>
     4fc:	8a e0       	ldi	r24, 0x0A	; 10
     4fe:	e8 16       	cp	r14, r24
     500:	21 f0       	breq	.+8      	; 0x50a <read_ADS1115+0x10a>
     502:	e6 e0       	ldi	r30, 0x06	; 6
     504:	ee 12       	cpse	r14, r30
     506:	38 c0       	rjmp	.+112    	; 0x578 <read_ADS1115+0x178>
     508:	0b c0       	rjmp	.+22     	; 0x520 <read_ADS1115+0x120>
		case PGA0256:
			scale = SCA0256;
     50a:	0f 2e       	mov	r0, r31
     50c:	f4 e7       	ldi	r31, 0x74	; 116
     50e:	8f 2e       	mov	r8, r31
     510:	f3 e1       	ldi	r31, 0x13	; 19
     512:	9f 2e       	mov	r9, r31
     514:	f3 e0       	ldi	r31, 0x03	; 3
     516:	af 2e       	mov	r10, r31
     518:	f7 e3       	ldi	r31, 0x37	; 55
     51a:	bf 2e       	mov	r11, r31
     51c:	f0 2d       	mov	r31, r0
     51e:	3a c0       	rjmp	.+116    	; 0x594 <read_ADS1115+0x194>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     520:	0f 2e       	mov	r0, r31
     522:	f4 e7       	ldi	r31, 0x74	; 116
     524:	8f 2e       	mov	r8, r31
     526:	f3 e1       	ldi	r31, 0x13	; 19
     528:	9f 2e       	mov	r9, r31
     52a:	f3 e0       	ldi	r31, 0x03	; 3
     52c:	af 2e       	mov	r10, r31
     52e:	f8 e3       	ldi	r31, 0x38	; 56
     530:	bf 2e       	mov	r11, r31
     532:	f0 2d       	mov	r31, r0
			break;
     534:	2f c0       	rjmp	.+94     	; 0x594 <read_ADS1115+0x194>
		case PGA2048:
			scale = SCA2048;
     536:	0f 2e       	mov	r0, r31
     538:	f2 e1       	ldi	r31, 0x12	; 18
     53a:	8f 2e       	mov	r8, r31
     53c:	f3 e1       	ldi	r31, 0x13	; 19
     53e:	9f 2e       	mov	r9, r31
     540:	f3 e8       	ldi	r31, 0x83	; 131
     542:	af 2e       	mov	r10, r31
     544:	f8 e3       	ldi	r31, 0x38	; 56
     546:	bf 2e       	mov	r11, r31
     548:	f0 2d       	mov	r31, r0
			break;
     54a:	24 c0       	rjmp	.+72     	; 0x594 <read_ADS1115+0x194>
		case PGA4096:
			scale = SCA4096;
     54c:	0f 2e       	mov	r0, r31
     54e:	f4 e7       	ldi	r31, 0x74	; 116
     550:	8f 2e       	mov	r8, r31
     552:	f3 e1       	ldi	r31, 0x13	; 19
     554:	9f 2e       	mov	r9, r31
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	af 2e       	mov	r10, r31
     55a:	f9 e3       	ldi	r31, 0x39	; 57
     55c:	bf 2e       	mov	r11, r31
     55e:	f0 2d       	mov	r31, r0
			break;
     560:	19 c0       	rjmp	.+50     	; 0x594 <read_ADS1115+0x194>
		case PGA6144:
			scale = SCA6144;
     562:	0f 2e       	mov	r0, r31
     564:	fe e2       	ldi	r31, 0x2E	; 46
     566:	8f 2e       	mov	r8, r31
     568:	fd e9       	ldi	r31, 0x9D	; 157
     56a:	9f 2e       	mov	r9, r31
     56c:	f4 e4       	ldi	r31, 0x44	; 68
     56e:	af 2e       	mov	r10, r31
     570:	f9 e3       	ldi	r31, 0x39	; 57
     572:	bf 2e       	mov	r11, r31
     574:	f0 2d       	mov	r31, r0
			break;
     576:	0e c0       	rjmp	.+28     	; 0x594 <read_ADS1115+0x194>
		default:
			scale = 0.0;
     578:	81 2c       	mov	r8, r1
     57a:	91 2c       	mov	r9, r1
     57c:	54 01       	movw	r10, r8
			break;
     57e:	0a c0       	rjmp	.+20     	; 0x594 <read_ADS1115+0x194>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     580:	0f 2e       	mov	r0, r31
     582:	f1 e7       	ldi	r31, 0x71	; 113
     584:	8f 2e       	mov	r8, r31
     586:	f3 e1       	ldi	r31, 0x13	; 19
     588:	9f 2e       	mov	r9, r31
     58a:	f3 e8       	ldi	r31, 0x83	; 131
     58c:	af 2e       	mov	r10, r31
     58e:	f7 e3       	ldi	r31, 0x37	; 55
     590:	bf 2e       	mov	r11, r31
     592:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
     5ac:	f6 01       	movw	r30, r12
     5ae:	60 83       	st	Z, r22
     5b0:	71 83       	std	Z+1, r23	; 0x01
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     5b6:	10 2f       	mov	r17, r16

}
     5b8:	81 2f       	mov	r24, r17
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	9c 01       	movw	r18, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <get_cmdline+0x42>
     5de:	ce e3       	ldi	r28, 0x3E	; 62
     5e0:	de e2       	ldi	r29, 0x2E	; 46
     5e2:	e8 81       	ld	r30, Y
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e1 5c       	subi	r30, 0xC1	; 193
     5e8:	f2 4d       	sbci	r31, 0xD2	; 210
     5ea:	80 81       	ld	r24, Z
     5ec:	f9 01       	movw	r30, r18
     5ee:	e4 0f       	add	r30, r20
     5f0:	f1 1d       	adc	r31, r1
     5f2:	80 83       	st	Z, r24
     5f4:	a0 e4       	ldi	r26, 0x40	; 64
     5f6:	be e2       	ldi	r27, 0x2E	; 46
     5f8:	8c 91       	ld	r24, X
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	8c 93       	st	X, r24
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	6e ef       	ldi	r22, 0xFE	; 254
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
     60c:	88 83       	st	Y, r24
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <get_cmdline+0x4a>
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
     61a:	81 11       	cpse	r24, r1
     61c:	e0 cf       	rjmp	.-64     	; 0x5de <get_cmdline+0xa>
     61e:	f9 01       	movw	r30, r18
     620:	e4 0f       	add	r30, r20
     622:	f1 1d       	adc	r31, r1
     624:	10 82       	st	Z, r1
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     62c:	9f e9       	ldi	r25, 0x9F	; 159
     62e:	98 0f       	add	r25, r24
     630:	9a 31       	cpi	r25, 0x1A	; 26
     632:	28 f0       	brcs	.+10     	; 0x63e <isaletter+0x12>
     634:	81 54       	subi	r24, 0x41	; 65
     636:	8a 31       	cpi	r24, 0x1A	; 26
     638:	20 f4       	brcc	.+8      	; 0x642 <isaletter+0x16>
		return(ERROR);
     63a:	83 e6       	ldi	r24, 0x63	; 99
     63c:	08 95       	ret
     63e:	83 e6       	ldi	r24, 0x63	; 99
     640:	08 95       	ret
	}
	return(NOERROR);
     642:	80 e0       	ldi	r24, 0x00	; 0

}
     644:	08 95       	ret

00000646 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     652:	e6 2e       	mov	r14, r22
     654:	f1 2c       	mov	r15, r1
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	8e 9d       	mul	r24, r14
     65a:	f0 01       	movw	r30, r0
     65c:	8f 9d       	mul	r24, r15
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	e3 5f       	subi	r30, 0xF3	; 243
     664:	f7 4d       	sbci	r31, 0xD7	; 215
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     66a:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     66c:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     66e:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x34>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x32>
     676:	75 c0       	rjmp	.+234    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	e3 5f       	subi	r30, 0xF3	; 243
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     69c:	11 23       	and	r17, r17
     69e:	09 f4       	brne	.+2      	; 0x6a2 <parse_cmd+0x5c>
     6a0:	60 c0       	rjmp	.+192    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6a4:	18 81       	ld	r17, Y
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     6ac:	88 23       	and	r24, r24
     6ae:	b1 f3       	breq	.-20     	; 0x69c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	84 e3       	ldi	r24, 0x34	; 52
     6b4:	8e 9d       	mul	r24, r14
     6b6:	f0 01       	movw	r30, r0
     6b8:	8f 9d       	mul	r24, r15
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	e3 5f       	subi	r30, 0xF3	; 243
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	2a c0       	rjmp	.+84     	; 0x71c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e3 5f       	subi	r30, 0xF3	; 243
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	12 82       	std	Z+2, r1	; 0x02
			return;
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     6e6:	9b 33       	cpi	r25, 0x3B	; 59
     6e8:	61 f4       	brne	.+24     	; 0x702 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6ea:	94 e3       	ldi	r25, 0x34	; 52
     6ec:	9e 9d       	mul	r25, r14
     6ee:	f0 01       	movw	r30, r0
     6f0:	9f 9d       	mul	r25, r15
     6f2:	f0 0d       	add	r31, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	e3 5f       	subi	r30, 0xF3	; 243
     6f8:	f7 4d       	sbci	r31, 0xD7	; 215
     6fa:	e8 0f       	add	r30, r24
     6fc:	f1 1d       	adc	r31, r1
     6fe:	12 82       	std	Z+2, r1	; 0x02
			break;
     700:	0f c0       	rjmp	.+30     	; 0x720 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	24 e3       	ldi	r18, 0x34	; 52
     706:	2e 9d       	mul	r18, r14
     708:	f0 01       	movw	r30, r0
     70a:	2f 9d       	mul	r18, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	e3 5f       	subi	r30, 0xF3	; 243
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	89 32       	cpi	r24, 0x29	; 41
     71e:	a0 f2       	brcs	.-88     	; 0x6c8 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     720:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	1c c0       	rjmp	.+56     	; 0x75e <parse_cmd+0x118>
		if (*ptr == '\0') {
     726:	98 81       	ld	r25, Y
     728:	91 11       	cpse	r25, r1
     72a:	0c c0       	rjmp	.+24     	; 0x744 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     72c:	94 e3       	ldi	r25, 0x34	; 52
     72e:	9e 9d       	mul	r25, r14
     730:	f0 01       	movw	r30, r0
     732:	9f 9d       	mul	r25, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e3 5f       	subi	r30, 0xF3	; 243
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     742:	0f c0       	rjmp	.+30     	; 0x762 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	24 e3       	ldi	r18, 0x34	; 52
     748:	2e 9d       	mul	r18, r14
     74a:	f0 01       	movw	r30, r0
     74c:	2f 9d       	mul	r18, r15
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	e3 5f       	subi	r30, 0xF3	; 243
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	e8 0f       	add	r30, r24
     758:	f1 1d       	adc	r31, r1
     75a:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f3       	brcs	.-60     	; 0x726 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	08 95       	ret

0000076e <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	c5 50       	subi	r28, 0x05	; 5
     77c:	d1 40       	sbci	r29, 0x01	; 1
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     782:	27 e0       	ldi	r18, 0x07	; 7
     784:	e8 e0       	ldi	r30, 0x08	; 8
     786:	f3 ea       	ldi	r31, 0xA3	; 163
     788:	de 01       	movw	r26, r28
     78a:	a1 50       	subi	r26, 0x01	; 1
     78c:	bf 4f       	sbci	r27, 0xFF	; 255
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	2a 95       	dec	r18
     794:	e1 f7       	brne	.-8      	; 0x78e <printLine+0x20>

	if (firstpass) {
     796:	20 91 15 2a 	lds	r18, 0x2A15	; 0x802a15 <firstpass>
     79a:	21 11       	cpse	r18, r1
     79c:	2a c0       	rjmp	.+84     	; 0x7f2 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     79e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     7a2:	22 ff       	sbrs	r18, 2
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <printLine+0x3e>
     7a6:	22 e0       	ldi	r18, 0x02	; 2
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <printLine+0x42>
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	3f 93       	push	r19
     7b6:	2f 93       	push	r18
     7b8:	ce 01       	movw	r24, r28
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
	checksum_NMEA(strbuf);
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7d6:	f8 01       	movw	r30, r16
     7d8:	01 90       	ld	r0, Z+
     7da:	00 20       	and	r0, r0
     7dc:	e9 f7       	brne	.-6      	; 0x7d8 <printLine+0x6a>
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	af 01       	movw	r20, r30
     7e2:	40 1b       	sub	r20, r16
     7e4:	51 0b       	sbc	r21, r17
     7e6:	b8 01       	movw	r22, r16
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <send_USART>
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	de bf       	out	0x3e, r29	; 62

}
     7f2:	cb 5f       	subi	r28, 0xFB	; 251
     7f4:	de 4f       	sbci	r29, 0xFE	; 254
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	cc 51       	subi	r28, 0x1C	; 28
     81a:	d1 40       	sbci	r29, 0x01	; 1
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	de bf       	out	0x3e, r29	; 62
     820:	d8 2e       	mov	r13, r24
     822:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	ef e0       	ldi	r30, 0x0F	; 15
     828:	f3 ea       	ldi	r31, 0xA3	; 163
     82a:	9e 01       	movw	r18, r28
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	79 01       	movw	r14, r18
     832:	d9 01       	movw	r26, r18
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	8a 95       	dec	r24
     83a:	e1 f7       	brne	.-8      	; 0x834 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     83c:	8e 01       	movw	r16, r28
     83e:	05 5f       	subi	r16, 0xF5	; 245
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	c8 01       	movw	r24, r16
     844:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	1f 93       	push	r17
     84e:	0f 93       	push	r16
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	0c 5e       	subi	r16, 0xEC	; 236
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
	printLine(strbuf);
     860:	c8 01       	movw	r24, r16
     862:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

}
     866:	cd bf       	out	0x3d, r28	; 61
     868:	de bf       	out	0x3e, r29	; 62
     86a:	c4 5e       	subi	r28, 0xE4	; 228
     86c:	de 4f       	sbci	r29, 0xFE	; 254
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	de bf       	out	0x3e, r29	; 62
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	08 95       	ret

00000884 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <send_EXprompt+0x6>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     88e:	81 e2       	ldi	r24, 0x21	; 33
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	be 01       	movw	r22, r28
     89a:	6f 5f       	subi	r22, 0xFF	; 255
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <send_USART>

}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     8ae:	cf 93       	push	r28

	if (!rebootackd) {
     8b0:	c0 91 0c 28 	lds	r28, 0x280C	; 0x80280c <rebootackd>
     8b4:	c1 11       	cpse	r28, r1
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <rebootACKd+0x4c>
     8b8:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     8ba:	80 81       	ld	r24, Z
     8bc:	81 32       	cpi	r24, 0x21	; 33
     8be:	91 f4       	brne	.+36     	; 0x8e4 <rebootACKd+0x36>
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	91 11       	cpse	r25, r1
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8d6:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <rebootackd>
			return(YES);
     8e0:	c1 e0       	ldi	r28, 0x01	; 1
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     8e4:	81 32       	cpi	r24, 0x21	; 33
     8e6:	31 f4       	brne	.+12     	; 0x8f4 <rebootACKd+0x46>
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	88 23       	and	r24, r24
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <rebootACKd+0x46>
			reboot();
     8ee:	0e 94 ad 28 	call	0x515a	; 0x515a <reboot>
			return(NO);
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     8f4:	0e 94 42 04 	call	0x884	; 0x884 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <rebootACKd+0x4e>
		}
	}

	return(YES);
     8fa:	c1 e0       	ldi	r28, 0x01	; 1

}
     8fc:	8c 2f       	mov	r24, r28
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <send_GTprompt+0x6>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     90c:	8e e3       	ldi	r24, 0x3E	; 62
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	be 01       	movw	r22, r28
     918:	6f 5f       	subi	r22, 0xFF	; 255
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <send_USART>

}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	d1 09       	sbc	r29, r1
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	0e 94 57 04 	call	0x8ae	; 0x8ae <rebootACKd>
     94c:	88 23       	and	r24, r24
     94e:	09 f4       	brne	.+2      	; 0x952 <commands+0x26>
     950:	74 c0       	rjmp	.+232    	; 0xa3a <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	88 23       	and	r24, r24
     956:	11 f0       	breq	.+4      	; 0x95c <commands+0x30>
     958:	81 32       	cpi	r24, 0x21	; 33
     95a:	29 f4       	brne	.+10     	; 0x966 <commands+0x3a>
		firstpass = NO;
     95c:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <firstpass>
		send_GTprompt();
     960:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
		return;
     964:	6a c0       	rjmp	.+212    	; 0xa3a <commands+0x10e>
	}

	echo_cmd(cmdline);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 02 04 	call	0x804	; 0x804 <echo_cmd>
	parse_cmd(cmdline, cstack);
     96e:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	0e 94 23 03 	call	0x646	; 0x646 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     97a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     97e:	24 e3       	ldi	r18, 0x34	; 52
     980:	82 9f       	mul	r24, r18
     982:	f0 01       	movw	r30, r0
     984:	11 24       	eor	r1, r1
     986:	e3 5f       	subi	r30, 0xF3	; 243
     988:	f7 4d       	sbci	r31, 0xD7	; 215
     98a:	e0 81       	ld	r30, Z
     98c:	4e 2f       	mov	r20, r30
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	fa 01       	movw	r30, r20
     992:	e9 54       	subi	r30, 0x49	; 73
     994:	f1 09       	sbc	r31, r1
     996:	ec 32       	cpi	r30, 0x2C	; 44
     998:	f1 05       	cpc	r31, r1
     99a:	e8 f5       	brcc	.+122    	; 0xa16 <commands+0xea>
     99c:	e0 5b       	subi	r30, 0xB0	; 176
     99e:	ff 4f       	sbci	r31, 0xFF	; 255
     9a0:	0c 94 96 2e 	jmp	0x5d2c	; 0x5d2c <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     9a4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <close_PNEU>
			break;
     9a8:	3c c0       	rjmp	.+120    	; 0xa22 <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     9aa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <open_PNEU>
			break;
     9ae:	39 c0       	rjmp	.+114    	; 0xa22 <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     9b0:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <move_MOTOR_CMD>
			break;
     9b4:	36 c0       	rjmp	.+108    	; 0xa22 <commands+0xf6>

		case 'r':				// report
			report(cstack);
     9b6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <report>
			break;
     9ba:	33 c0       	rjmp	.+102    	; 0xa22 <commands+0xf6>

		case 's':				// set
			set(cstack);
     9bc:	0e 94 36 23 	call	0x466c	; 0x466c <set>
			break;
     9c0:	30 c0       	rjmp	.+96     	; 0xa22 <commands+0xf6>

		case 't':
			testroutine();
     9c2:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <testroutine>
			break;
     9c6:	2d c0       	rjmp	.+90     	; 0xa22 <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9c8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <init_MOTORS>
			break;
     9cc:	2a c0       	rjmp	.+84     	; 0xa22 <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9ce:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <motorsMoving>
     9d2:	88 23       	and	r24, r24
     9d4:	39 f0       	breq	.+14     	; 0x9e4 <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     9d6:	69 e1       	ldi	r22, 0x19	; 25
     9d8:	73 ea       	ldi	r23, 0xA3	; 163
     9da:	86 e3       	ldi	r24, 0x36	; 54
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				break;
     9e2:	1f c0       	rjmp	.+62     	; 0xa22 <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     9e4:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <put_FRAM_ENCODERS>
     9e8:	83 36       	cpi	r24, 0x63	; 99
     9ea:	31 f4       	brne	.+12     	; 0x9f8 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     9ec:	6e e3       	ldi	r22, 0x3E	; 62
     9ee:	73 ea       	ldi	r23, 0xA3	; 163
     9f0:	83 e9       	ldi	r24, 0x93	; 147
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				}
				timerSAVEENCODER = 0;
     9f8:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     9fc:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	8a e6       	ldi	r24, 0x6A	; 106
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	81 50       	subi	r24, 0x01	; 1
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	20 40       	sbci	r18, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <commands+0xda>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <commands+0xe4>
				_delay_ms(100);
				reboot();			// in wdt.c
     a10:	0e 94 ad 28 	call	0x515a	; 0x515a <reboot>
				return;
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     a16:	60 e6       	ldi	r22, 0x60	; 96
     a18:	73 ea       	ldi	r23, 0xA3	; 163
     a1a:	89 ec       	ldi	r24, 0xC9	; 201
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a22:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	6a e0       	ldi	r22, 0x0A	; 10
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
     a32:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a36:	0e 94 81 04 	call	0x902	; 0x902 <send_GTprompt>

}
     a3a:	c1 50       	subi	r28, 0x01	; 1
     a3c:	df 4f       	sbci	r29, 0xFF	; 255
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	c0 5f       	subi	r28, 0xF0	; 240
     a56:	d1 09       	sbc	r29, r1
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	ee e6       	ldi	r30, 0x6E	; 110
     a62:	f3 ea       	ldi	r31, 0xA3	; 163
     a64:	de 01       	movw	r26, r28
     a66:	a5 5a       	subi	r26, 0xA5	; 165
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	8a 95       	dec	r24
     a70:	e1 f7       	brne	.-8      	; 0xa6a <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     a72:	89 e1       	ldi	r24, 0x19	; 25
     a74:	e6 e8       	ldi	r30, 0x86	; 134
     a76:	f3 ea       	ldi	r31, 0xA3	; 163
     a78:	de 01       	movw	r26, r28
     a7a:	ad 58       	subi	r26, 0x8D	; 141
     a7c:	bf 4f       	sbci	r27, 0xFF	; 255
     a7e:	01 90       	ld	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	8a 95       	dec	r24
     a84:	e1 f7       	brne	.-8      	; 0xa7e <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     a86:	87 e1       	ldi	r24, 0x17	; 23
     a88:	ef e9       	ldi	r30, 0x9F	; 159
     a8a:	f3 ea       	ldi	r31, 0xA3	; 163
     a8c:	de 01       	movw	r26, r28
     a8e:	a4 57       	subi	r26, 0x74	; 116
     a90:	bf 4f       	sbci	r27, 0xFF	; 255
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	8a 95       	dec	r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     a9a:	88 e1       	ldi	r24, 0x18	; 24
     a9c:	e6 eb       	ldi	r30, 0xB6	; 182
     a9e:	f3 ea       	ldi	r31, 0xA3	; 163
     aa0:	de 01       	movw	r26, r28
     aa2:	ad 55       	subi	r26, 0x5D	; 93
     aa4:	bf 4f       	sbci	r27, 0xFF	; 255
     aa6:	01 90       	ld	r0, Z+
     aa8:	0d 92       	st	X+, r0
     aaa:	8a 95       	dec	r24
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     aae:	8b e1       	ldi	r24, 0x1B	; 27
     ab0:	ee ec       	ldi	r30, 0xCE	; 206
     ab2:	f3 ea       	ldi	r31, 0xA3	; 163
     ab4:	de 01       	movw	r26, r28
     ab6:	a5 54       	subi	r26, 0x45	; 69
     ab8:	bf 4f       	sbci	r27, 0xFF	; 255
     aba:	01 90       	ld	r0, Z+
     abc:	0d 92       	st	X+, r0
     abe:	8a 95       	dec	r24
     ac0:	e1 f7       	brne	.-8      	; 0xaba <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     ac2:	8b e1       	ldi	r24, 0x1B	; 27
     ac4:	e9 ee       	ldi	r30, 0xE9	; 233
     ac6:	f3 ea       	ldi	r31, 0xA3	; 163
     ac8:	de 01       	movw	r26, r28
     aca:	aa 52       	subi	r26, 0x2A	; 42
     acc:	bf 4f       	sbci	r27, 0xFF	; 255
     ace:	01 90       	ld	r0, Z+
     ad0:	0d 92       	st	X+, r0
     ad2:	8a 95       	dec	r24
     ad4:	e1 f7       	brne	.-8      	; 0xace <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <check_isotime+0xae>
		sbuf[i] = isotime[i];
     ada:	82 2f       	mov	r24, r18
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	f8 01       	movw	r30, r16
     ae0:	e8 0f       	add	r30, r24
     ae2:	f9 1f       	adc	r31, r25
     ae4:	30 81       	ld	r19, Z
     ae6:	e1 e0       	ldi	r30, 0x01	; 1
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ec 0f       	add	r30, r28
     aec:	fd 1f       	adc	r31, r29
     aee:	e8 0f       	add	r30, r24
     af0:	f9 1f       	adc	r31, r25
     af2:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     af4:	2f 5f       	subi	r18, 0xFF	; 255
     af6:	24 30       	cpi	r18, 0x04	; 4
     af8:	80 f3       	brcs	.-32     	; 0xada <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     afa:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((year < 2021) || year > 2030) {
     b04:	85 5e       	subi	r24, 0xE5	; 229
     b06:	97 40       	sbci	r25, 0x07	; 7
     b08:	0a 97       	sbiw	r24, 0x0a	; 10
     b0a:	40 f1       	brcs	.+80     	; 0xb5c <check_isotime+0x114>
		sprintf(strbuf, msg0);
     b0c:	ce 01       	movw	r24, r28
     b0e:	85 5a       	subi	r24, 0xA5	; 165
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	8e 01       	movw	r16, r28
     b18:	05 5f       	subi	r16, 0xF5	; 245
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	1f 93       	push	r17
     b1e:	0f 93       	push	r16
     b20:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     b24:	b8 01       	movw	r22, r16
     b26:	8b e5       	ldi	r24, 0x5B	; 91
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	83 e6       	ldi	r24, 0x63	; 99
     b38:	fd c0       	rjmp	.+506    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	35 97       	sbiw	r30, 0x05	; 5
     b42:	d8 01       	movw	r26, r16
     b44:	a2 0f       	add	r26, r18
     b46:	b3 1f       	adc	r27, r19
     b48:	9c 91       	ld	r25, X
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	2c 0f       	add	r18, r28
     b50:	3d 1f       	adc	r19, r29
     b52:	e2 0f       	add	r30, r18
     b54:	f3 1f       	adc	r31, r19
     b56:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <check_isotime+0x116>
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	87 30       	cpi	r24, 0x07	; 7
     b60:	60 f3       	brcs	.-40     	; 0xb3a <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b62:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((month < 1) || (month > 12)) {
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	0c 97       	sbiw	r24, 0x0c	; 12
     b70:	40 f1       	brcs	.+80     	; 0xbc2 <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     b72:	ce 01       	movw	r24, r28
     b74:	8d 58       	subi	r24, 0x8D	; 141
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	8e 01       	movw	r16, r28
     b7e:	05 5f       	subi	r16, 0xF5	; 245
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	1f 93       	push	r17
     b84:	0f 93       	push	r16
     b86:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     b8a:	b8 01       	movw	r22, r16
     b8c:	8b e5       	ldi	r24, 0x5B	; 91
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	83 e6       	ldi	r24, 0x63	; 99
     b9e:	ca c0       	rjmp	.+404    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	f9 01       	movw	r30, r18
     ba6:	38 97       	sbiw	r30, 0x08	; 8
     ba8:	d8 01       	movw	r26, r16
     baa:	a2 0f       	add	r26, r18
     bac:	b3 1f       	adc	r27, r19
     bae:	9c 91       	ld	r25, X
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	2c 0f       	add	r18, r28
     bb6:	3d 1f       	adc	r19, r29
     bb8:	e2 0f       	add	r30, r18
     bba:	f3 1f       	adc	r31, r19
     bbc:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <check_isotime+0x17c>
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	8a 30       	cpi	r24, 0x0A	; 10
     bc6:	60 f3       	brcs	.-40     	; 0xba0 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     bc8:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((day < 1) || (day > 31)) {
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	4f 97       	sbiw	r24, 0x1f	; 31
     bd6:	40 f1       	brcs	.+80     	; 0xc28 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     bd8:	ce 01       	movw	r24, r28
     bda:	84 57       	subi	r24, 0x74	; 116
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	8e 01       	movw	r16, r28
     be4:	05 5f       	subi	r16, 0xF5	; 245
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	1f 93       	push	r17
     bea:	0f 93       	push	r16
     bec:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     bf0:	b8 01       	movw	r22, r16
     bf2:	8b e5       	ldi	r24, 0x5B	; 91
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	83 e6       	ldi	r24, 0x63	; 99
     c04:	97 c0       	rjmp	.+302    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	f9 01       	movw	r30, r18
     c0c:	3b 97       	sbiw	r30, 0x0b	; 11
     c0e:	d8 01       	movw	r26, r16
     c10:	a2 0f       	add	r26, r18
     c12:	b3 1f       	adc	r27, r19
     c14:	9c 91       	ld	r25, X
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	2c 0f       	add	r18, r28
     c1c:	3d 1f       	adc	r19, r29
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <check_isotime+0x1e2>
     c28:	8b e0       	ldi	r24, 0x0B	; 11
     c2a:	8d 30       	cpi	r24, 0x0D	; 13
     c2c:	60 f3       	brcs	.-40     	; 0xc06 <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     c2e:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((hours < 0) || (hours > 23)) {
     c38:	48 97       	sbiw	r24, 0x18	; 24
     c3a:	40 f1       	brcs	.+80     	; 0xc8c <check_isotime+0x244>
		sprintf(strbuf, msg3);
     c3c:	ce 01       	movw	r24, r28
     c3e:	8d 55       	subi	r24, 0x5D	; 93
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	8e 01       	movw	r16, r28
     c48:	05 5f       	subi	r16, 0xF5	; 245
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	1f 93       	push	r17
     c4e:	0f 93       	push	r16
     c50:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     c54:	b8 01       	movw	r22, r16
     c56:	8b e5       	ldi	r24, 0x5B	; 91
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	83 e6       	ldi	r24, 0x63	; 99
     c68:	65 c0       	rjmp	.+202    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	3e 97       	sbiw	r30, 0x0e	; 14
     c72:	d8 01       	movw	r26, r16
     c74:	a2 0f       	add	r26, r18
     c76:	b3 1f       	adc	r27, r19
     c78:	9c 91       	ld	r25, X
     c7a:	21 e0       	ldi	r18, 0x01	; 1
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	2c 0f       	add	r18, r28
     c80:	3d 1f       	adc	r19, r29
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <check_isotime+0x246>
     c8c:	8e e0       	ldi	r24, 0x0E	; 14
     c8e:	80 31       	cpi	r24, 0x10	; 16
     c90:	60 f3       	brcs	.-40     	; 0xc6a <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     c92:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     c9c:	cc 97       	sbiw	r24, 0x3c	; 60
     c9e:	40 f1       	brcs	.+80     	; 0xcf0 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     ca0:	ce 01       	movw	r24, r28
     ca2:	85 54       	subi	r24, 0x45	; 69
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	8e 01       	movw	r16, r28
     cac:	05 5f       	subi	r16, 0xF5	; 245
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	1f 93       	push	r17
     cb2:	0f 93       	push	r16
     cb4:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     cb8:	b8 01       	movw	r22, r16
     cba:	8b e5       	ldi	r24, 0x5B	; 91
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	83 e6       	ldi	r24, 0x63	; 99
     ccc:	33 c0       	rjmp	.+102    	; 0xd34 <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	f9 01       	movw	r30, r18
     cd4:	71 97       	sbiw	r30, 0x11	; 17
     cd6:	d8 01       	movw	r26, r16
     cd8:	a2 0f       	add	r26, r18
     cda:	b3 1f       	adc	r27, r19
     cdc:	9c 91       	ld	r25, X
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	2c 0f       	add	r18, r28
     ce4:	3d 1f       	adc	r19, r29
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <check_isotime+0x2aa>
     cf0:	81 e1       	ldi	r24, 0x11	; 17
     cf2:	83 31       	cpi	r24, 0x13	; 19
     cf4:	60 f3       	brcs	.-40     	; 0xcce <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     cf6:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     d00:	cc 97       	sbiw	r24, 0x3c	; 60
     d02:	b8 f0       	brcs	.+46     	; 0xd32 <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     d04:	ce 01       	movw	r24, r28
     d06:	8a 52       	subi	r24, 0x2A	; 42
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	8e 01       	movw	r16, r28
     d10:	05 5f       	subi	r16, 0xF5	; 245
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	1f 93       	push	r17
     d16:	0f 93       	push	r16
     d18:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_ISO, strbuf);
     d1c:	b8 01       	movw	r22, r16
     d1e:	8b e5       	ldi	r24, 0x5B	; 91
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	83 e6       	ldi	r24, 0x63	; 99
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <check_isotime+0x2ec>
	}
	return(NOERROR);
     d32:	80 e0       	ldi	r24, 0x00	; 0
}
     d34:	c0 51       	subi	r28, 0x10	; 16
     d36:	df 4f       	sbci	r29, 0xFF	; 255
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	a0 97       	sbiw	r28, 0x20	; 32
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	e4 e0       	ldi	r30, 0x04	; 4
     d5c:	f4 ea       	ldi	r31, 0xA4	; 164
     d5e:	9e 01       	movw	r18, r28
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	d9 01       	movw	r26, r18
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	4a 95       	dec	r20
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     d6e:	fb 01       	movw	r30, r22
     d70:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     d72:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     d74:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     d76:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     d78:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     d7a:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     d7c:	1f 92       	push	r1
     d7e:	bf 93       	push	r27
     d80:	1f 92       	push	r1
     d82:	af 93       	push	r26
     d84:	1f 92       	push	r1
     d86:	1f 93       	push	r17
     d88:	1f 92       	push	r1
     d8a:	0f 93       	push	r16
     d8c:	1f 92       	push	r1
     d8e:	5f 93       	push	r21
     d90:	1f 92       	push	r1
     d92:	4f 93       	push	r20
     d94:	3f 93       	push	r19
     d96:	2f 93       	push	r18
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>

}
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	a0 96       	adiw	r28, 0x20	; 32
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     db4:	dc 01       	movw	r26, r24
     db6:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     db8:	81 89       	ldd	r24, Z+17	; 0x11
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	c0 97       	sbiw	r24, 0x30	; 48
     dbe:	82 95       	swap	r24
     dc0:	92 95       	swap	r25
     dc2:	90 7f       	andi	r25, 0xF0	; 240
     dc4:	98 27       	eor	r25, r24
     dc6:	80 7f       	andi	r24, 0xF0	; 240
     dc8:	98 27       	eor	r25, r24
     dca:	92 89       	ldd	r25, Z+18	; 0x12
     dcc:	90 53       	subi	r25, 0x30	; 48
     dce:	89 2b       	or	r24, r25
     dd0:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     dd2:	86 85       	ldd	r24, Z+14	; 0x0e
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	c0 97       	sbiw	r24, 0x30	; 48
     dd8:	82 95       	swap	r24
     dda:	92 95       	swap	r25
     ddc:	90 7f       	andi	r25, 0xF0	; 240
     dde:	98 27       	eor	r25, r24
     de0:	80 7f       	andi	r24, 0xF0	; 240
     de2:	98 27       	eor	r25, r24
     de4:	97 85       	ldd	r25, Z+15	; 0x0f
     de6:	90 53       	subi	r25, 0x30	; 48
     de8:	89 2b       	or	r24, r25
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	8c 93       	st	X, r24
     dee:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     df0:	83 85       	ldd	r24, Z+11	; 0x0b
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	c0 97       	sbiw	r24, 0x30	; 48
     df6:	82 95       	swap	r24
     df8:	92 95       	swap	r25
     dfa:	90 7f       	andi	r25, 0xF0	; 240
     dfc:	98 27       	eor	r25, r24
     dfe:	80 7f       	andi	r24, 0xF0	; 240
     e00:	98 27       	eor	r25, r24
     e02:	94 85       	ldd	r25, Z+12	; 0x0c
     e04:	90 53       	subi	r25, 0x30	; 48
     e06:	89 2b       	or	r24, r25
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	8c 93       	st	X, r24
     e0c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     e16:	80 85       	ldd	r24, Z+8	; 0x08
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	c0 97       	sbiw	r24, 0x30	; 48
     e1c:	82 95       	swap	r24
     e1e:	92 95       	swap	r25
     e20:	90 7f       	andi	r25, 0xF0	; 240
     e22:	98 27       	eor	r25, r24
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	98 27       	eor	r25, r24
     e28:	91 85       	ldd	r25, Z+9	; 0x09
     e2a:	90 53       	subi	r25, 0x30	; 48
     e2c:	89 2b       	or	r24, r25
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	8c 93       	st	X, r24
     e32:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     e34:	25 81       	ldd	r18, Z+5	; 0x05
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	20 53       	subi	r18, 0x30	; 48
     e3a:	31 09       	sbc	r19, r1
     e3c:	22 95       	swap	r18
     e3e:	32 95       	swap	r19
     e40:	30 7f       	andi	r19, 0xF0	; 240
     e42:	32 27       	eor	r19, r18
     e44:	20 7f       	andi	r18, 0xF0	; 240
     e46:	32 27       	eor	r19, r18
     e48:	86 81       	ldd	r24, Z+6	; 0x06
     e4a:	80 53       	subi	r24, 0x30	; 48
     e4c:	28 2b       	or	r18, r24
     e4e:	15 96       	adiw	r26, 0x05	; 5
     e50:	2c 93       	st	X, r18
     e52:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     e54:	22 81       	ldd	r18, Z+2	; 0x02
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	20 53       	subi	r18, 0x30	; 48
     e5a:	31 09       	sbc	r19, r1
     e5c:	22 95       	swap	r18
     e5e:	32 95       	swap	r19
     e60:	30 7f       	andi	r19, 0xF0	; 240
     e62:	32 27       	eor	r19, r18
     e64:	20 7f       	andi	r18, 0xF0	; 240
     e66:	32 27       	eor	r19, r18
     e68:	83 81       	ldd	r24, Z+3	; 0x03
     e6a:	80 53       	subi	r24, 0x30	; 48
     e6c:	28 2b       	or	r18, r24
     e6e:	16 96       	adiw	r26, 0x06	; 6
     e70:	2c 93       	st	X, r18
     e72:	08 95       	ret

00000e74 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
     e86:	c8 2f       	mov	r28, r24
     e88:	83 36       	cpi	r24, 0x63	; 99
     e8a:	19 f4       	brne	.+6      	; 0xe92 <read_DS3231+0x1e>
		stop_TWI();
     e8c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     e90:	26 c0       	rjmp	.+76     	; 0xede <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     e98:	c8 2f       	mov	r28, r24
     e9a:	83 36       	cpi	r24, 0x63	; 99
     e9c:	19 f4       	brne	.+6      	; 0xea4 <read_DS3231+0x30>
		stop_TWI();
     e9e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     ea2:	1d c0       	rjmp	.+58     	; 0xede <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	88 e6       	ldi	r24, 0x68	; 104
     ea8:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
     eac:	c8 2f       	mov	r28, r24
     eae:	83 36       	cpi	r24, 0x63	; 99
     eb0:	61 f4       	brne	.+24     	; 0xeca <read_DS3231+0x56>
		stop_TWI();
     eb2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     eb6:	13 c0       	rjmp	.+38     	; 0xede <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     eb8:	87 01       	movw	r16, r14
     eba:	0c 0f       	add	r16, r28
     ebc:	11 1d       	adc	r17, r1
     ebe:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <read_TWI>
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     ec6:	cf 5f       	subi	r28, 0xFF	; 255
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <read_DS3231+0x58>
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	c6 30       	cpi	r28, 0x06	; 6
     ece:	a0 f3       	brcs	.-24     	; 0xeb8 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     ed0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
     ed4:	f7 01       	movw	r30, r14
     ed6:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ed8:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	return(NOERROR);
     edc:	c0 e0       	ldi	r28, 0x00	; 0

}
     ede:	8c 2f       	mov	r24, r28
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	88 e6       	ldi	r24, 0x68	; 104
     f0a:	0e 94 3a 07 	call	0xe74	; 0xe74 <read_DS3231>
     f0e:	18 2f       	mov	r17, r24
     f10:	83 36       	cpi	r24, 0x63	; 99
     f12:	79 f4       	brne	.+30     	; 0xf32 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     f14:	64 e2       	ldi	r22, 0x24	; 36
     f16:	74 ea       	ldi	r23, 0xA4	; 164
     f18:	85 e6       	ldi	r24, 0x65	; 101
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		strcpy(isotime, "DateTime?");
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	e4 e3       	ldi	r30, 0x34	; 52
     f24:	f4 ea       	ldi	r31, 0xA4	; 164
     f26:	d7 01       	movw	r26, r14
     f28:	01 90       	ld	r0, Z+
     f2a:	0d 92       	st	X+, r0
     f2c:	8a 95       	dec	r24
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <get_time+0x3c>
		return(ERROR);
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     f32:	be 01       	movw	r22, r28
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	c7 01       	movw	r24, r14
     f3a:	0e 94 a3 06 	call	0xd46	; 0xd46 <convert_ds2iso>
	return(NOERROR);
     f3e:	10 e0       	ldi	r17, 0x00	; 0

}
     f40:	81 2f       	mov	r24, r17
     f42:	27 96       	adiw	r28, 0x07	; 7
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	08 95       	ret

00000f54 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
     f68:	c8 2f       	mov	r28, r24
     f6a:	83 36       	cpi	r24, 0x63	; 99
     f6c:	19 f4       	brne	.+6      	; 0xf74 <write_DS3231+0x20>
		stop_TWI();
     f6e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     f72:	20 c0       	rjmp	.+64     	; 0xfb4 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     f7a:	c8 2f       	mov	r28, r24
     f7c:	83 36       	cpi	r24, 0x63	; 99
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <write_DS3231+0x54>
		stop_TWI();
     f80:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
     f84:	17 c0       	rjmp	.+46     	; 0xfb4 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f86:	78 01       	movw	r14, r16
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	e8 1a       	sub	r14, r24
     f8c:	f8 0a       	sbc	r15, r24
     f8e:	f8 01       	movw	r30, r16
     f90:	80 81       	ld	r24, Z
     f92:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
     f96:	c8 2f       	mov	r28, r24
     f98:	83 36       	cpi	r24, 0x63	; 99
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <write_DS3231+0x4e>
			stop_TWI();
     f9c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
			return(ERROR);
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fa2:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fa4:	87 01       	movw	r16, r14
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <write_DS3231+0x56>
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     faa:	d7 30       	cpi	r29, 0x07	; 7
     fac:	60 f3       	brcs	.-40     	; 0xf86 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     fae:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	return(NOERROR);
     fb2:	c0 e0       	ldi	r28, 0x00	; 0

}
     fb4:	8c 2f       	mov	r24, r28
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	08 95       	ret

00000fc4 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	27 97       	sbiw	r28, 0x07	; 7
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     fda:	0e 94 24 05 	call	0xa48	; 0xa48 <check_isotime>
     fde:	18 2f       	mov	r17, r24
     fe0:	83 36       	cpi	r24, 0x63	; 99
     fe2:	39 f4       	brne	.+14     	; 0xff2 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     fe4:	6e e3       	ldi	r22, 0x3E	; 62
     fe6:	74 ea       	ldi	r23, 0xA4	; 164
     fe8:	8b e5       	ldi	r24, 0x5B	; 91
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     ff2:	b7 01       	movw	r22, r14
     ff4:	ce 01       	movw	r24, r28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	88 e6       	ldi	r24, 0x68	; 104
    1004:	0e 94 aa 07 	call	0xf54	; 0xf54 <write_DS3231>
    1008:	18 2f       	mov	r17, r24
    100a:	83 36       	cpi	r24, 0x63	; 99
    100c:	39 f4       	brne	.+14     	; 0x101c <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
    100e:	6c e5       	ldi	r22, 0x5C	; 92
    1010:	74 ea       	ldi	r23, 0xA4	; 164
    1012:	86 e6       	ldi	r24, 0x66	; 102
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    101a:	01 c0       	rjmp	.+2      	; 0x101e <put_time+0x5a>
	}
	return(NOERROR);
    101c:	10 e0       	ldi	r17, 0x00	; 0

}
    101e:	81 2f       	mov	r24, r17
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1032:	45 e1       	ldi	r20, 0x15	; 21
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	6b e0       	ldi	r22, 0x0B	; 11
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 3b 31 	call	0x6276	; 0x6276 <eeprom_read_block>
    103e:	08 95       	ret

00001040 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
    1040:	4b e0       	ldi	r20, 0x0B	; 11
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 3b 31 	call	0x6276	; 0x6276 <eeprom_read_block>
    104c:	08 95       	ret

0000104e <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	65 97       	sbiw	r28, 0x15	; 21
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1064:	45 e1       	ldi	r20, 0x15	; 21
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	6b e0       	ldi	r22, 0x0B	; 11
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 3f 31 	call	0x627e	; 0x627e <eeprom_update_block>

}
    1074:	65 96       	adiw	r28, 0x15	; 21
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <update_VERSION>:

void update_VERSION(void)
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2b 97       	sbiw	r28, 0x0b	; 11
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    108e:	8b e0       	ldi	r24, 0x0B	; 11
    1090:	e9 e7       	ldi	r30, 0x79	; 121
    1092:	f4 ea       	ldi	r31, 0xA4	; 164
    1094:	de 01       	movw	r26, r28
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	8a 95       	dec	r24
    109e:	e1 f7       	brne	.-8      	; 0x1098 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    10a0:	4b e0       	ldi	r20, 0x0B	; 11
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	0e 94 3f 31 	call	0x627e	; 0x627e <eeprom_update_block>

}
    10b0:	2b 96       	adiw	r28, 0x0b	; 11
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    10bc:	0e 94 27 08 	call	0x104e	; 0x104e <update_BOOTTIME>
	update_VERSION();
    10c0:	0e 94 40 08 	call	0x1080	; 0x1080 <update_VERSION>
    10c4:	08 95       	ret

000010c6 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	c8 50       	subi	r28, 0x08	; 8
    10d4:	d1 40       	sbci	r29, 0x01	; 1
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	e4 e8       	ldi	r30, 0x84	; 132
    10de:	f4 ea       	ldi	r31, 0xA4	; 164
    10e0:	de 01       	movw	r26, r28
    10e2:	a1 50       	subi	r26, 0x01	; 1
    10e4:	bf 4f       	sbci	r27, 0xFF	; 255
    10e6:	01 90       	ld	r0, Z+
    10e8:	0d 92       	st	X+, r0
    10ea:	2a 95       	dec	r18
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <printError+0x20>

	if (!squelchErrors) {
    10ee:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <squelchErrors>
    10f2:	21 11       	cpse	r18, r1
    10f4:	15 c0       	rjmp	.+42     	; 0x1120 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    10f6:	7f 93       	push	r23
    10f8:	6f 93       	push	r22
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	ce 01       	movw	r24, r28
    1100:	81 50       	subi	r24, 0x01	; 1
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	8e 01       	movw	r16, r28
    110a:	0f 5f       	subi	r16, 0xFF	; 255
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	1f 93       	push	r17
    1110:	0f 93       	push	r16
    1112:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printLine(strbuf);
    1116:	c8 01       	movw	r24, r16
    1118:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	de bf       	out	0x3e, r29	; 62
	}

}
    1120:	c8 5f       	subi	r28, 0xF8	; 248
    1122:	de 4f       	sbci	r29, 0xFE	; 254
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	d8 2f       	mov	r29, r24
    1144:	d6 2e       	mov	r13, r22
    1146:	07 2f       	mov	r16, r23
    1148:	7a 01       	movw	r14, r20
    114a:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    1152:	c8 2f       	mov	r28, r24
    1154:	83 36       	cpi	r24, 0x63	; 99
    1156:	19 f4       	brne	.+6      	; 0x115e <read_FRAM+0x2c>
		stop_TWI();
    1158:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    115c:	2e c0       	rjmp	.+92     	; 0x11ba <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    115e:	80 2f       	mov	r24, r16
    1160:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1164:	c8 2f       	mov	r28, r24
    1166:	83 36       	cpi	r24, 0x63	; 99
    1168:	41 f1       	breq	.+80     	; 0x11ba <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    116a:	8d 2d       	mov	r24, r13
    116c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1170:	c8 2f       	mov	r28, r24
    1172:	83 36       	cpi	r24, 0x63	; 99
    1174:	11 f1       	breq	.+68     	; 0x11ba <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	8d 2f       	mov	r24, r29
    117a:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    117e:	c8 2f       	mov	r28, r24
    1180:	83 36       	cpi	r24, 0x63	; 99
    1182:	d9 f0       	breq	.+54     	; 0x11ba <read_FRAM+0x88>
    1184:	c0 e0       	ldi	r28, 0x00	; 0
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    1188:	67 01       	movw	r12, r14
    118a:	cc 0e       	add	r12, r28
    118c:	d1 1c       	adc	r13, r1
    118e:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <read_TWI>
    1192:	f6 01       	movw	r30, r12
    1194:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    1196:	cf 5f       	subi	r28, 0xFF	; 255
    1198:	2c 2f       	mov	r18, r28
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 2f       	mov	r24, r17
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	84 f3       	brlt	.-32     	; 0x1188 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    11a8:	ec 01       	movw	r28, r24
    11aa:	ce 0d       	add	r28, r14
    11ac:	df 1d       	adc	r29, r15
    11ae:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
    11b2:	88 83       	st	Y, r24

	stop_TWI();
    11b4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	return(NOERROR);
    11b8:	c0 e0       	ldi	r28, 0x00	; 0

}
    11ba:	8c 2f       	mov	r24, r28
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	08 95       	ret

000011ce <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	2a 97       	sbiw	r28, 0x0a	; 10
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	ee e8       	ldi	r30, 0x8E	; 142
    11e8:	f4 ea       	ldi	r31, 0xA4	; 164
    11ea:	de 01       	movw	r26, r28
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	01 90       	ld	r0, Z+
    11f0:	0d 92       	st	X+, r0
    11f2:	8a 95       	dec	r24
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    11f6:	24 e1       	ldi	r18, 0x14	; 20
    11f8:	a7 01       	movw	r20, r14
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e5       	ldi	r24, 0x50	; 80
    1200:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    1204:	18 2f       	mov	r17, r24
    1206:	83 36       	cpi	r24, 0x63	; 99
    1208:	39 f4       	brne	.+14     	; 0x1218 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    120a:	be 01       	movw	r22, r28
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	c7 01       	movw	r24, r14
    1212:	0e 94 50 30 	call	0x60a0	; 0x60a0 <strcpy>
		return(ERROR);
    1216:	01 c0       	rjmp	.+2      	; 0x121a <get_SETTIME+0x4c>
	}
	return(NOERROR);
    1218:	10 e0       	ldi	r17, 0x00	; 0
}
    121a:	81 2f       	mov	r24, r17
    121c:	2a 96       	adiw	r28, 0x0a	; 10
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	08 95       	ret

0000122e <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	f6 2e       	mov	r15, r22
    123c:	17 2f       	mov	r17, r23
    123e:	ea 01       	movw	r28, r20
    1240:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    1248:	83 36       	cpi	r24, 0x63	; 99
    124a:	e1 f0       	breq	.+56     	; 0x1284 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    124c:	81 2f       	mov	r24, r17
    124e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1252:	83 36       	cpi	r24, 0x63	; 99
    1254:	b9 f0       	breq	.+46     	; 0x1284 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    1256:	8f 2d       	mov	r24, r15
    1258:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    125c:	83 36       	cpi	r24, 0x63	; 99
    125e:	91 f0       	breq	.+36     	; 0x1284 <write_FRAM+0x56>
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	0b c0       	rjmp	.+22     	; 0x127a <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1264:	7e 01       	movw	r14, r28
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	e8 1a       	sub	r14, r24
    126a:	f8 0a       	sbc	r15, r24
    126c:	88 81       	ld	r24, Y
    126e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1272:	83 36       	cpi	r24, 0x63	; 99
    1274:	39 f0       	breq	.+14     	; 0x1284 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    1276:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1278:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    127a:	10 17       	cp	r17, r16
    127c:	98 f3       	brcs	.-26     	; 0x1264 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    127e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	return(NOERROR);
    1282:	80 e0       	ldi	r24, 0x00	; 0

}
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <get_humidity+0x1a>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <get_humidity+0x1c>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	59 f0       	breq	.+22     	; 0x12cc <get_humidity+0x3a>
    12b6:	18 f0       	brcs	.+6      	; 0x12be <get_humidity+0x2c>
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	79 f0       	breq	.+30     	; 0x12da <get_humidity+0x48>
    12bc:	15 c0       	rjmp	.+42     	; 0x12e8 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    12c4:	6b 01       	movw	r12, r22
    12c6:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    12c8:	40 e4       	ldi	r20, 0x40	; 64
			break;
    12ca:	17 c0       	rjmp	.+46     	; 0x12fa <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    12d2:	6b 01       	movw	r12, r22
    12d4:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    12d6:	40 e5       	ldi	r20, 0x50	; 80
			break;
    12d8:	10 c0       	rjmp	.+32     	; 0x12fa <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    12e0:	6b 01       	movw	r12, r22
    12e2:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    12e4:	40 e6       	ldi	r20, 0x60	; 96
			break;
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    12e8:	0f 2e       	mov	r0, r31
    12ea:	c1 2c       	mov	r12, r1
    12ec:	d1 2c       	mov	r13, r1
    12ee:	f0 ea       	ldi	r31, 0xA0	; 160
    12f0:	ef 2e       	mov	r14, r31
    12f2:	f1 e4       	ldi	r31, 0x41	; 65
    12f4:	ff 2e       	mov	r15, r31
    12f6:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    12f8:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    12fa:	8e 01       	movw	r16, r28
    12fc:	0f 5f       	subi	r16, 0xFF	; 255
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	20 e8       	ldi	r18, 0x80	; 128
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	88 e4       	ldi	r24, 0x48	; 72
    1306:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    130a:	83 36       	cpi	r24, 0x63	; 99
    130c:	89 f1       	breq	.+98     	; 0x1370 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 ea       	ldi	r20, 0xA0	; 160
    1314:	50 e4       	ldi	r21, 0x40	; 64
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	37 ed       	ldi	r19, 0xD7	; 215
    1326:	43 e2       	ldi	r20, 0x23	; 35
    1328:	5e e3       	ldi	r21, 0x3E	; 62
    132a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__subsf3>
    132e:	2f e5       	ldi	r18, 0x5F	; 95
    1330:	39 e2       	ldi	r19, 0x29	; 41
    1332:	4b ec       	ldi	r20, 0xCB	; 203
    1334:	5b e3       	ldi	r21, 0x3B	; 59
    1336:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    133a:	4b 01       	movw	r8, r22
    133c:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    133e:	29 ec       	ldi	r18, 0xC9	; 201
    1340:	3e e8       	ldi	r19, 0x8E	; 142
    1342:	4d e0       	ldi	r20, 0x0D	; 13
    1344:	5b e3       	ldi	r21, 0x3B	; 59
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	62 e2       	ldi	r22, 0x22	; 34
    1354:	7d ef       	ldi	r23, 0xFD	; 253
    1356:	86 e8       	ldi	r24, 0x86	; 134
    1358:	9f e3       	ldi	r25, 0x3F	; 63
    135a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__subsf3>
    135e:	9b 01       	movw	r18, r22
    1360:	ac 01       	movw	r20, r24
    1362:	c5 01       	movw	r24, r10
    1364:	b4 01       	movw	r22, r8
    1366:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1370:	0f 2e       	mov	r0, r31
    1372:	c1 2c       	mov	r12, r1
    1374:	f0 e8       	ldi	r31, 0x80	; 128
    1376:	df 2e       	mov	r13, r31
    1378:	f6 e2       	ldi	r31, 0x26	; 38
    137a:	ef 2e       	mov	r14, r31
    137c:	f4 ec       	ldi	r31, 0xC4	; 196
    137e:	ff 2e       	mov	r15, r31
    1380:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 4b 29 	call	0x5296	; 0x5296 <__cmpsf2>
    1390:	88 23       	and	r24, r24
    1392:	4c f4       	brge	.+18     	; 0x13a6 <get_humidity+0x114>
		humidity = BADFLOAT;
    1394:	0f 2e       	mov	r0, r31
    1396:	c1 2c       	mov	r12, r1
    1398:	f0 e8       	ldi	r31, 0x80	; 128
    139a:	df 2e       	mov	r13, r31
    139c:	f6 e2       	ldi	r31, 0x26	; 38
    139e:	ef 2e       	mov	r14, r31
    13a0:	f4 ec       	ldi	r31, 0xC4	; 196
    13a2:	ff 2e       	mov	r15, r31
    13a4:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	24 96       	adiw	r28, 0x04	; 4
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	9f 90       	pop	r9
    13c6:	8f 90       	pop	r8
    13c8:	08 95       	ret

000013ca <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2b 97       	sbiw	r28, 0x0b	; 11
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    13d8:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <rebootackd>
	timerOLED = 0;					// See oled.h
    13dc:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    13e0:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    13e4:	80 ee       	ldi	r24, 0xE0	; 224
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    13ec:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    13f0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <init_PORTS>
	init_TWI();
    13f4:	0e 94 92 25 	call	0x4b24	; 0x4b24 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1400:	0e 94 9a 0c 	call	0x1934	; 0x1934 <init_MMA8451>
	init_OLED();	// Needs TWI
    1404:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    1408:	0e 94 5e 08 	call	0x10bc	; 0x10bc <init_EEPROM>
	init_USART();
    140c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <init_USART>
	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <start_TCB0>
	sei();
    1418:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    141a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <init_MOTORS>
	get_VERSION(versionstr);
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	68 e9       	ldi	r22, 0x98	; 152
    142a:	74 ea       	ldi	r23, 0xA4	; 164
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1432:	42 e0       	ldi	r20, 0x02	; 2
    1434:	be 01       	movw	r22, r28
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>

}
    1440:	2b 96       	adiw	r28, 0x0b	; 11
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	00 d0       	rcall	.+0      	; 0x145e <read_ionpump+0x12>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <read_ionpump+0x14>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	21 f0       	breq	.+8      	; 0x1470 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	c1 f5       	brne	.+112    	; 0x14dc <read_ionpump+0x90>
		pins = AIN23;
    146c:	40 e3       	ldi	r20, 0x30	; 48
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1470:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1472:	8e 01       	movw	r16, r28
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	20 e8       	ldi	r18, 0x80	; 128
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	89 e4       	ldi	r24, 0x49	; 73
    147e:	0e 94 00 02 	call	0x400	; 0x400 <read_ADS1115>
    1482:	83 36       	cpi	r24, 0x63	; 99
    1484:	81 f1       	breq	.+96     	; 0x14e6 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    1486:	c9 80       	ldd	r12, Y+1	; 0x01
    1488:	da 80       	ldd	r13, Y+2	; 0x02
    148a:	eb 80       	ldd	r14, Y+3	; 0x03
    148c:	fc 80       	ldd	r15, Y+4	; 0x04
    148e:	2d ec       	ldi	r18, 0xCD	; 205
    1490:	3c ec       	ldi	r19, 0xCC	; 204
    1492:	4c ec       	ldi	r20, 0xCC	; 204
    1494:	5e e3       	ldi	r21, 0x3E	; 62
    1496:	c7 01       	movw	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 4b 29 	call	0x5296	; 0x5296 <__cmpsf2>
    149e:	88 23       	and	r24, r24
    14a0:	3c f1       	brlt	.+78     	; 0x14f0 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e4       	ldi	r21, 0x40	; 64
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__gesf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	14 f1       	brlt	.+68     	; 0x14fa <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    14b6:	29 e7       	ldi	r18, 0x79	; 121
    14b8:	39 ee       	ldi	r19, 0xE9	; 233
    14ba:	42 e0       	ldi	r20, 0x02	; 2
    14bc:	50 e4       	ldi	r21, 0x40	; 64
    14be:	c7 01       	movw	r24, r14
    14c0:	b6 01       	movw	r22, r12
    14c2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    14c6:	2e e6       	ldi	r18, 0x6E	; 110
    14c8:	33 ea       	ldi	r19, 0xA3	; 163
    14ca:	4b ed       	ldi	r20, 0xDB	; 219
    14cc:	50 e4       	ldi	r21, 0x40	; 64
    14ce:	0e 94 de 28 	call	0x51bc	; 0x51bc <__subsf3>
	return(vacuum);
    14d2:	56 2f       	mov	r21, r22
    14d4:	47 2f       	mov	r20, r23
    14d6:	38 2f       	mov	r19, r24
    14d8:	29 2f       	mov	r18, r25
    14da:	13 c0       	rjmp	.+38     	; 0x1502 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	36 e2       	ldi	r19, 0x26	; 38
    14e2:	24 ec       	ldi	r18, 0xC4	; 196
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	36 e2       	ldi	r19, 0x26	; 38
    14ec:	24 ec       	ldi	r18, 0xC4	; 196
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	36 e2       	ldi	r19, 0x26	; 38
    14f6:	24 ec       	ldi	r18, 0xC4	; 196
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	36 e2       	ldi	r19, 0x26	; 38
    1500:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1502:	65 2f       	mov	r22, r21
    1504:	74 2f       	mov	r23, r20
    1506:	83 2f       	mov	r24, r19
    1508:	92 2f       	mov	r25, r18
    150a:	24 96       	adiw	r28, 0x04	; 4
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	08 95       	ret

00001522 <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <firstpass>
	squelchErrors = YES;
    1528:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
	initialize();
    152c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <initialize>
	squelchErrors = NO;
    1530:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1534:	80 91 42 2e 	lds	r24, 0x2E42	; 0x802e42 <recv0_buf+0x103>
    1538:	88 23       	and	r24, r24
    153a:	21 f0       	breq	.+8      	; 0x1544 <main+0x22>
			recv0_buf.done = NO;
    153c:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
			commands();
    1540:	0e 94 96 04 	call	0x92c	; 0x92c <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1544:	20 91 16 2a 	lds	r18, 0x2A16	; 0x802a16 <timerOLED>
    1548:	30 91 17 2a 	lds	r19, 0x2A17	; 0x802a17 <timerOLED+0x1>
    154c:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    1550:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    1554:	82 17       	cp	r24, r18
    1556:	93 07       	cpc	r25, r19
    1558:	78 f4       	brcc	.+30     	; 0x1578 <main+0x56>
			squelchErrors = YES;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			clear_OLED(0);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear_OLED>
			clear_OLED(1);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear_OLED>
			timerOLED = 0;
    156c:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1570:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
			squelchErrors = NO;
    1574:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    1578:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    157c:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <timeoutSAVEENCODER>
    1580:	89 17       	cp	r24, r25
    1582:	c0 f6       	brcc	.-80     	; 0x1534 <main+0x12>
    1584:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rebootackd>
    1588:	88 23       	and	r24, r24
    158a:	a1 f2       	breq	.-88     	; 0x1534 <main+0x12>
			squelchErrors = YES;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    1592:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    1596:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
			squelchErrors = NO;
    159a:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
    159e:	ca cf       	rjmp	.-108    	; 0x1534 <main+0x12>

000015a0 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	c8 2f       	mov	r28, r24
    15a6:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    15ae:	83 36       	cpi	r24, 0x63	; 99
    15b0:	51 f4       	brne	.+20     	; 0x15c6 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    15b2:	69 ea       	ldi	r22, 0xA9	; 169
    15b4:	74 ea       	ldi	r23, 0xA4	; 164
    15b6:	82 e9       	ldi	r24, 0x92	; 146
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    15be:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(0xFF);
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	19 c0       	rjmp	.+50     	; 0x15f8 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    15c6:	8d 2f       	mov	r24, r29
    15c8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	8c 2f       	mov	r24, r28
    15d0:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    15d4:	83 36       	cpi	r24, 0x63	; 99
    15d6:	51 f4       	brne	.+20     	; 0x15ec <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    15d8:	69 ea       	ldi	r22, 0xA9	; 169
    15da:	74 ea       	ldi	r23, 0xA4	; 164
    15dc:	82 e9       	ldi	r24, 0x92	; 146
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    15e4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(0xFF);
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    15ec:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
    15f0:	c8 2f       	mov	r28, r24
	stop_TWI();
    15f2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
	return(value);
    15f6:	8c 2f       	mov	r24, r28

}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	d6 2f       	mov	r29, r22
    1606:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    160e:	c8 2f       	mov	r28, r24
    1610:	83 36       	cpi	r24, 0x63	; 99
    1612:	49 f4       	brne	.+18     	; 0x1626 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1614:	6d eb       	ldi	r22, 0xBD	; 189
    1616:	74 ea       	ldi	r23, 0xA4	; 164
    1618:	82 e9       	ldi	r24, 0x92	; 146
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		stop_TWI();
    1620:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    1624:	15 c0       	rjmp	.+42     	; 0x1650 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1626:	8d 2f       	mov	r24, r29
    1628:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    162c:	88 23       	and	r24, r24
    162e:	21 f0       	breq	.+8      	; 0x1638 <write_MCP23008+0x3a>
		stop_TWI();
    1630:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    1634:	c3 e6       	ldi	r28, 0x63	; 99
    1636:	0c c0       	rjmp	.+24     	; 0x1650 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1638:	81 2f       	mov	r24, r17
    163a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    163e:	88 23       	and	r24, r24
    1640:	21 f0       	breq	.+8      	; 0x164a <write_MCP23008+0x4c>
		stop_TWI();
    1642:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    1646:	c3 e6       	ldi	r28, 0x63	; 99
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <write_MCP23008+0x52>
	}
	stop_TWI();
    164a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
	return(NOERROR);
    164e:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1650:	8c 2f       	mov	r24, r28
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	08 95       	ret

0000165a <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	88 e1       	ldi	r24, 0x18	; 24
    1672:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    1676:	83 36       	cpi	r24, 0x63	; 99
    1678:	51 f4       	brne	.+20     	; 0x168e <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e8       	ldi	r21, 0x80	; 128
    167e:	66 e2       	ldi	r22, 0x26	; 38
    1680:	74 ec       	ldi	r23, 0xC4	; 196
    1682:	f8 01       	movw	r30, r16
    1684:	40 83       	st	Z, r20
    1686:	51 83       	std	Z+1, r21	; 0x01
    1688:	62 83       	std	Z+2, r22	; 0x02
    168a:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    168c:	43 c0       	rjmp	.+134    	; 0x1714 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    168e:	85 e0       	ldi	r24, 0x05	; 5
    1690:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	88 e1       	ldi	r24, 0x18	; 24
    1698:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
	highbyte = read_TWI();
    169c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <read_TWI>
    16a0:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    16a2:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
    16a6:	d8 2f       	mov	r29, r24
	stop_TWI();
    16a8:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    16ac:	fc 2f       	mov	r31, r28
    16ae:	f0 71       	andi	r31, 0x10	; 16
    16b0:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    16b2:	6c 2f       	mov	r22, r28
    16b4:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 c2 29 	call	0x5384	; 0x5384 <__floatunsisf>
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    16cc:	4b 01       	movw	r8, r22
    16ce:	5c 01       	movw	r10, r24
    16d0:	6d 2f       	mov	r22, r29
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 c2 29 	call	0x5384	; 0x5384 <__floatunsisf>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5d e3       	ldi	r21, 0x3D	; 61
    16e4:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	c5 01       	movw	r24, r10
    16ee:	b4 01       	movw	r22, r8
    16f0:	0e 94 df 28 	call	0x51be	; 0x51be <__addsf3>
	if (sign) {
    16f4:	ff 20       	and	r15, r15
    16f6:	41 f0       	breq	.+16     	; 0x1708 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	80 e8       	ldi	r24, 0x80	; 128
    1702:	93 e4       	ldi	r25, 0x43	; 67
    1704:	0e 94 de 28 	call	0x51bc	; 0x51bc <__subsf3>
	}
	*temperature = temp;
    1708:	f8 01       	movw	r30, r16
    170a:	60 83       	st	Z, r22
    170c:	71 83       	std	Z+1, r23	; 0x01
    170e:	82 83       	std	Z+2, r24	; 0x02
    1710:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1712:	80 e0       	ldi	r24, 0x00	; 0
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	9f 90       	pop	r9
    1724:	8f 90       	pop	r8
    1726:	08 95       	ret

00001728 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	f8 2e       	mov	r15, r24
    1736:	e6 2e       	mov	r14, r22
    1738:	ea 01       	movw	r28, r20
    173a:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    1742:	18 2f       	mov	r17, r24
    1744:	83 36       	cpi	r24, 0x63	; 99
    1746:	19 f4       	brne	.+6      	; 0x174e <read_MMA8451+0x26>
		stop_TWI();
    1748:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    174c:	23 c0       	rjmp	.+70     	; 0x1794 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    174e:	8e 2d       	mov	r24, r14
    1750:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1754:	18 2f       	mov	r17, r24
    1756:	83 36       	cpi	r24, 0x63	; 99
    1758:	e9 f0       	breq	.+58     	; 0x1794 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	8f 2d       	mov	r24, r15
    175e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    1762:	18 2f       	mov	r17, r24
    1764:	83 36       	cpi	r24, 0x63	; 99
    1766:	69 f4       	brne	.+26     	; 0x1782 <read_MMA8451+0x5a>
		stop_TWI();
    1768:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(ERROR);
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    176e:	7e 01       	movw	r14, r28
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	e8 1a       	sub	r14, r24
    1774:	f8 0a       	sbc	r15, r24
    1776:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <read_TWI>
    177a:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    177c:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    177e:	e7 01       	movw	r28, r14
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <read_MMA8451+0x5c>
    1782:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1784:	10 17       	cp	r17, r16
    1786:	98 f3       	brcs	.-26     	; 0x176e <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1788:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <readlast_TWI>
    178c:	88 83       	st	Y, r24
	stop_TWI();
    178e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
	return(NOERROR);
    1792:	10 e0       	ldi	r17, 0x00	; 0

}
    1794:	81 2f       	mov	r24, r17
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	08 95       	ret

000017a4 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	26 97       	sbiw	r28, 0x06	; 6
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	6c 01       	movw	r12, r24
    17c0:	7b 01       	movw	r14, r22
    17c2:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e8       	ldi	r25, 0x80	; 128
    17c8:	a6 e2       	ldi	r26, 0x26	; 38
    17ca:	b4 ec       	ldi	r27, 0xC4	; 196
    17cc:	fa 01       	movw	r30, r20
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
    17d6:	fb 01       	movw	r30, r22
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
    17e0:	f6 01       	movw	r30, r12
    17e2:	80 83       	st	Z, r24
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	a2 83       	std	Z+2, r26	; 0x02
    17e8:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    17ea:	26 e0       	ldi	r18, 0x06	; 6
    17ec:	ae 01       	movw	r20, r28
    17ee:	4f 5f       	subi	r20, 0xFF	; 255
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	8d e1       	ldi	r24, 0x1D	; 29
    17f6:	0e 94 94 0b 	call	0x1728	; 0x1728 <read_MMA8451>
    17fa:	83 36       	cpi	r24, 0x63	; 99
    17fc:	09 f4       	brne	.+2      	; 0x1800 <__DATA_REGION_LENGTH__>
    17fe:	64 c0       	rjmp	.+200    	; 0x18c8 <__DATA_REGION_LENGTH__+0xc8>
		return(ERROR);
	}

	ix = datain[0];
    1800:	69 81       	ldd	r22, Y+1	; 0x01
    1802:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1804:	76 2f       	mov	r23, r22
    1806:	66 27       	eor	r22, r22
	ix |= datain[1];
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	68 2b       	or	r22, r24
	ix >>= 2;
    180c:	75 95       	asr	r23
    180e:	67 95       	ror	r22
    1810:	75 95       	asr	r23
    1812:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1814:	07 2e       	mov	r0, r23
    1816:	00 0c       	add	r0, r0
    1818:	88 0b       	sbc	r24, r24
    181a:	99 0b       	sbc	r25, r25
    181c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	59 e3       	ldi	r21, 0x39	; 57
    1828:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    182c:	26 e6       	ldi	r18, 0x66	; 102
    182e:	36 e2       	ldi	r19, 0x26	; 38
    1830:	45 e7       	ldi	r20, 0x75	; 117
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    1838:	f6 01       	movw	r30, r12
    183a:	60 83       	st	Z, r22
    183c:	71 83       	std	Z+1, r23	; 0x01
    183e:	82 83       	std	Z+2, r24	; 0x02
    1840:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1842:	6b 81       	ldd	r22, Y+3	; 0x03
    1844:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    1846:	76 2f       	mov	r23, r22
    1848:	66 27       	eor	r22, r22
	iy |= datain[3];
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	68 2b       	or	r22, r24
	iy >>= 2;
    184e:	75 95       	asr	r23
    1850:	67 95       	ror	r22
    1852:	75 95       	asr	r23
    1854:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1856:	07 2e       	mov	r0, r23
    1858:	00 0c       	add	r0, r0
    185a:	88 0b       	sbc	r24, r24
    185c:	99 0b       	sbc	r25, r25
    185e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	59 e3       	ldi	r21, 0x39	; 57
    186a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    186e:	26 e6       	ldi	r18, 0x66	; 102
    1870:	36 e2       	ldi	r19, 0x26	; 38
    1872:	45 e7       	ldi	r20, 0x75	; 117
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    187a:	f7 01       	movw	r30, r14
    187c:	60 83       	st	Z, r22
    187e:	71 83       	std	Z+1, r23	; 0x01
    1880:	82 83       	std	Z+2, r24	; 0x02
    1882:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1884:	6d 81       	ldd	r22, Y+5	; 0x05
    1886:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    1888:	76 2f       	mov	r23, r22
    188a:	66 27       	eor	r22, r22
	iz |= datain[5];
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	68 2b       	or	r22, r24
	iz >>= 2;
    1890:	75 95       	asr	r23
    1892:	67 95       	ror	r22
    1894:	75 95       	asr	r23
    1896:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    1898:	07 2e       	mov	r0, r23
    189a:	00 0c       	add	r0, r0
    189c:	88 0b       	sbc	r24, r24
    189e:	99 0b       	sbc	r25, r25
    18a0:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	59 e3       	ldi	r21, 0x39	; 57
    18ac:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    18b0:	26 e6       	ldi	r18, 0x66	; 102
    18b2:	36 e2       	ldi	r19, 0x26	; 38
    18b4:	45 e7       	ldi	r20, 0x75	; 117
    18b6:	54 e4       	ldi	r21, 0x44	; 68
    18b8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    18bc:	f8 01       	movw	r30, r16
    18be:	60 83       	st	Z, r22
    18c0:	71 83       	std	Z+1, r23	; 0x01
    18c2:	82 83       	std	Z+2, r24	; 0x02
    18c4:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    18c6:	80 e0       	ldi	r24, 0x00	; 0

}
    18c8:	26 96       	adiw	r28, 0x06	; 6
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	08 95       	ret

000018e0 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	d6 2f       	mov	r29, r22
    18e8:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
    18f0:	c8 2f       	mov	r28, r24
    18f2:	88 23       	and	r24, r24
    18f4:	21 f0       	breq	.+8      	; 0x18fe <write_MMA8451+0x1e>
		stop_TWI();
    18f6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(retval);
    18fa:	8c 2f       	mov	r24, r28
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    18fe:	8d 2f       	mov	r24, r29
    1900:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1904:	c8 2f       	mov	r28, r24
    1906:	88 23       	and	r24, r24
    1908:	21 f0       	breq	.+8      	; 0x1912 <write_MMA8451+0x32>
		stop_TWI();
    190a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(retval);
    190e:	8c 2f       	mov	r24, r28
    1910:	0d c0       	rjmp	.+26     	; 0x192c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1912:	81 2f       	mov	r24, r17
    1914:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
    1918:	c8 2f       	mov	r28, r24
    191a:	88 23       	and	r24, r24
    191c:	21 f0       	breq	.+8      	; 0x1926 <write_MMA8451+0x46>
		stop_TWI();
    191e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
		return(retval);
    1922:	8c 2f       	mov	r24, r28
    1924:	03 c0       	rjmp	.+6      	; 0x192c <write_MMA8451+0x4c>
	}
	stop_TWI();
    1926:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>
	return(0);
    192a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	08 95       	ret

00001934 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	1f 92       	push	r1
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    193e:	40 e4       	ldi	r20, 0x40	; 64
    1940:	6b e2       	ldi	r22, 0x2B	; 43
    1942:	8d e1       	ldi	r24, 0x1D	; 29
    1944:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1948:	21 e0       	ldi	r18, 0x01	; 1
    194a:	ae 01       	movw	r20, r28
    194c:	4f 5f       	subi	r20, 0xFF	; 255
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	6b e2       	ldi	r22, 0x2B	; 43
    1952:	8d e1       	ldi	r24, 0x1D	; 29
    1954:	0e 94 94 0b 	call	0x1728	; 0x1728 <read_MMA8451>
	while (retval & 0x40) {
    1958:	08 c0       	rjmp	.+16     	; 0x196a <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    195a:	21 e0       	ldi	r18, 0x01	; 1
    195c:	ae 01       	movw	r20, r28
    195e:	4f 5f       	subi	r20, 0xFF	; 255
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	6b e2       	ldi	r22, 0x2B	; 43
    1964:	8d e1       	ldi	r24, 0x1D	; 29
    1966:	0e 94 94 0b 	call	0x1728	; 0x1728 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	86 fd       	sbrc	r24, 6
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1970:	40 ec       	ldi	r20, 0xC0	; 192
    1972:	6f e0       	ldi	r22, 0x0F	; 15
    1974:	8d e1       	ldi	r24, 0x1D	; 29
    1976:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    197a:	42 e0       	ldi	r20, 0x02	; 2
    197c:	6b e2       	ldi	r22, 0x2B	; 43
    197e:	8d e1       	ldi	r24, 0x1D	; 29
    1980:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1984:	4d e3       	ldi	r20, 0x3D	; 61
    1986:	6a e2       	ldi	r22, 0x2A	; 42
    1988:	8d e1       	ldi	r24, 0x1D	; 29
    198a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_MMA8451>

	return(retval);

}
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	0f 90       	pop	r0
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	2e 97       	sbiw	r28, 0x0e	; 14
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    19b0:	88 e0       	ldi	r24, 0x08	; 8
    19b2:	e2 ed       	ldi	r30, 0xD2	; 210
    19b4:	f4 ea       	ldi	r31, 0xA4	; 164
    19b6:	de 01       	movw	r26, r28
    19b8:	11 96       	adiw	r26, 0x01	; 1
    19ba:	01 90       	ld	r0, Z+
    19bc:	0d 92       	st	X+, r0
    19be:	8a 95       	dec	r24
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    19c2:	f8 01       	movw	r30, r16
    19c4:	01 90       	ld	r0, Z+
    19c6:	00 20       	and	r0, r0
    19c8:	e9 f7       	brne	.-6      	; 0x19c4 <checksum_NMEA+0x2c>
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	3e 2f       	mov	r19, r30
    19ce:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    19d0:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    19d6:	f8 01       	movw	r30, r16
    19d8:	e8 0f       	add	r30, r24
    19da:	f1 1d       	adc	r31, r1
    19dc:	20 81       	ld	r18, Z
    19de:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	83 17       	cp	r24, r19
    19e4:	c0 f3       	brcs	.-16     	; 0x19d6 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    19e6:	1f 92       	push	r1
    19e8:	9f 93       	push	r25
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	7e 01       	movw	r14, r28
    19f4:	89 e0       	ldi	r24, 0x09	; 9
    19f6:	e8 0e       	add	r14, r24
    19f8:	f1 1c       	adc	r15, r1
    19fa:	ff 92       	push	r15
    19fc:	ef 92       	push	r14
    19fe:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
	strcat(str, chksum);
    1a02:	b7 01       	movw	r22, r14
    1a04:	c8 01       	movw	r24, r16
    1a06:	0e 94 45 30 	call	0x608a	; 0x608a <strcat>

}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	2e 96       	adiw	r28, 0x0e	; 14
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	08 95       	ret

00001a2a <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1a2a:	e0 e6       	ldi	r30, 0x60	; 96
    1a2c:	f4 e0       	ldi	r31, 0x04	; 4
    1a2e:	80 e4       	ldi	r24, 0x40	; 64
    1a30:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1a32:	81 83       	std	Z+1, r24	; 0x01
    1a34:	a1 e4       	ldi	r26, 0x41	; 65
    1a36:	b3 e0       	ldi	r27, 0x03	; 3
    1a38:	11 97       	sbiw	r26, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <reset_OLED+0xe>
    1a3c:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1a3e:	85 83       	std	Z+5, r24	; 0x05
    1a40:	08 95       	ret

00001a42 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	d6 2f       	mov	r29, r22
    1a48:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <start_TWI>
	write_TWI(type);
    1a50:	8d 2f       	mov	r24, r29
    1a52:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
	write_TWI(byteToSend);
    1a56:	8c 2f       	mov	r24, r28
    1a58:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <write_TWI>
	stop_TWI();
    1a5c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <stop_TWI>

}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1a66:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1a68:	88 23       	and	r24, r24
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <init_OLEDDISPLAY+0xc>
    1a70:	9e c0       	rjmp	.+316    	; 0x1bae <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1a72:	cd e3       	ldi	r28, 0x3D	; 61
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1a76:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1a78:	4a e2       	ldi	r20, 0x2A	; 42
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	8c 2f       	mov	r24, r28
    1a7e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1a82:	41 e7       	ldi	r20, 0x71	; 113
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	8c 2f       	mov	r24, r28
    1a88:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1a8c:	4c e5       	ldi	r20, 0x5C	; 92
    1a8e:	60 e4       	ldi	r22, 0x40	; 64
    1a90:	8c 2f       	mov	r24, r28
    1a92:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1a96:	48 e2       	ldi	r20, 0x28	; 40
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	8c 2f       	mov	r24, r28
    1a9c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1aa0:	48 e0       	ldi	r20, 0x08	; 8
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8c 2f       	mov	r24, r28
    1aa6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1aaa:	4a e2       	ldi	r20, 0x2A	; 42
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ab4:	49 e7       	ldi	r20, 0x79	; 121
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	8c 2f       	mov	r24, r28
    1aba:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1abe:	45 ed       	ldi	r20, 0xD5	; 213
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	8c 2f       	mov	r24, r28
    1ac4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1ac8:	40 e7       	ldi	r20, 0x70	; 112
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	8c 2f       	mov	r24, r28
    1ace:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1ad2:	48 e7       	ldi	r20, 0x78	; 120
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	8c 2f       	mov	r24, r28
    1ad8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1adc:	48 e0       	ldi	r20, 0x08	; 8
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	8c 2f       	mov	r24, r28
    1ae2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1ae6:	46 e0       	ldi	r20, 0x06	; 6
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	8c 2f       	mov	r24, r28
    1aec:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1af0:	42 e7       	ldi	r20, 0x72	; 114
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	8c 2f       	mov	r24, r28
    1af6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	60 e4       	ldi	r22, 0x40	; 64
    1afe:	8c 2f       	mov	r24, r28
    1b00:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b04:	4a e2       	ldi	r20, 0x2A	; 42
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	8c 2f       	mov	r24, r28
    1b0a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1b0e:	49 e7       	ldi	r20, 0x79	; 121
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	8c 2f       	mov	r24, r28
    1b14:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1b18:	4a ed       	ldi	r20, 0xDA	; 218
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	8c 2f       	mov	r24, r28
    1b1e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	8c 2f       	mov	r24, r28
    1b28:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1b2c:	4c ed       	ldi	r20, 0xDC	; 220
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	8c 2f       	mov	r24, r28
    1b32:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1b40:	41 e8       	ldi	r20, 0x81	; 129
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	8c 2f       	mov	r24, r28
    1b46:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	8c 2f       	mov	r24, r28
    1b50:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1b54:	49 ed       	ldi	r20, 0xD9	; 217
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	8c 2f       	mov	r24, r28
    1b5a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1b5e:	41 ef       	ldi	r20, 0xF1	; 241
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	8c 2f       	mov	r24, r28
    1b64:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1b68:	4b ed       	ldi	r20, 0xDB	; 219
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1b72:	40 e4       	ldi	r20, 0x40	; 64
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8c 2f       	mov	r24, r28
    1b78:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b7c:	48 e7       	ldi	r20, 0x78	; 120
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	8c 2f       	mov	r24, r28
    1b82:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b86:	48 e2       	ldi	r20, 0x28	; 40
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	8c 2f       	mov	r24, r28
    1b8c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	8c 2f       	mov	r24, r28
    1b96:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	8c 2f       	mov	r24, r28
    1ba0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1ba4:	4c e0       	ldi	r20, 0x0C	; 12
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	8c 2f       	mov	r24, r28
    1baa:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>

}
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1bb2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <reset_OLED>
	init_OLEDDISPLAY(0);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <init_OLEDDISPLAY>
    1bc2:	2a e6       	ldi	r18, 0x6A	; 106
    1bc4:	84 e0       	ldi	r24, 0x04	; 4
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	21 50       	subi	r18, 0x01	; 1
    1bca:	80 40       	sbci	r24, 0x00	; 0
    1bcc:	90 40       	sbci	r25, 0x00	; 0
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <init_OLED+0x16>
    1bd0:	00 c0       	rjmp	.+0      	; 0x1bd2 <init_OLED+0x20>
    1bd2:	08 95       	ret

00001bd4 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	e2 97       	sbiw	r28, 0x32	; 50
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1bec:	91 e1       	ldi	r25, 0x11	; 17
    1bee:	ea ed       	ldi	r30, 0xDA	; 218
    1bf0:	f4 ea       	ldi	r31, 0xA4	; 164
    1bf2:	de 01       	movw	r26, r28
    1bf4:	92 96       	adiw	r26, 0x22	; 34
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	0d 92       	st	X+, r0
    1bfa:	9a 95       	dec	r25
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1bfe:	81 11       	cpse	r24, r1
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1c02:	0c e3       	ldi	r16, 0x3C	; 60
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1c06:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <strcpy>
	if (strlen(strbuf) > 16) {
    1c12:	f7 01       	movw	r30, r14
    1c14:	01 90       	ld	r0, Z+
    1c16:	00 20       	and	r0, r0
    1c18:	e9 f7       	brne	.-6      	; 0x1c14 <writestr_OLED+0x40>
    1c1a:	31 97       	sbiw	r30, 0x01	; 1
    1c1c:	ee 19       	sub	r30, r14
    1c1e:	ff 09       	sbc	r31, r15
    1c20:	71 97       	sbiw	r30, 0x11	; 17
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1c24:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1c26:	be 01       	movw	r22, r28
    1c28:	6e 5d       	subi	r22, 0xDE	; 222
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	0e 94 45 30 	call	0x608a	; 0x608a <strcat>

	if (lineno == 1) {
    1c34:	11 30       	cpi	r17, 0x01	; 1
    1c36:	39 f4       	brne	.+14     	; 0x1c46 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	80 2f       	mov	r24, r16
    1c3e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1c42:	10 e0       	ldi	r17, 0x00	; 0
    1c44:	12 c0       	rjmp	.+36     	; 0x1c6a <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1c46:	40 ec       	ldi	r20, 0xC0	; 192
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	80 2f       	mov	r24, r16
    1c4c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>
    1c50:	f8 cf       	rjmp	.-16     	; 0x1c42 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1c52:	e1 e0       	ldi	r30, 0x01	; 1
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	ec 0f       	add	r30, r28
    1c58:	fd 1f       	adc	r31, r29
    1c5a:	e1 0f       	add	r30, r17
    1c5c:	f1 1d       	adc	r31, r1
    1c5e:	40 81       	ld	r20, Z
    1c60:	60 e4       	ldi	r22, 0x40	; 64
    1c62:	80 2f       	mov	r24, r16
    1c64:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1c68:	1f 5f       	subi	r17, 0xFF	; 255
    1c6a:	10 31       	cpi	r17, 0x10	; 16
    1c6c:	90 f3       	brcs	.-28     	; 0x1c52 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1c6e:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1c72:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1c76:	e2 96       	adiw	r28, 0x32	; 50
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	08 95       	ret

00001c8a <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	1f 92       	push	r1
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1c98:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1ca6:	42 e0       	ldi	r20, 0x02	; 2
    1ca8:	be 01       	movw	r22, r28
    1caa:	6f 5f       	subi	r22, 0xFF	; 255
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	81 2f       	mov	r24, r17
    1cb0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
	timerOLED = 0;
    1cb4:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1cb8:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1cbc:	0f 90       	pop	r0
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	08 95       	ret

00001cc6 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	6c 01       	movw	r12, r24
    1cd8:	8b 01       	movw	r16, r22
    1cda:	7a 01       	movw	r14, r20
    1cdc:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1cde:	69 e0       	ldi	r22, 0x09	; 9
    1ce0:	81 e2       	ldi	r24, 0x21	; 33
    1ce2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	92 95       	swap	r25
    1cea:	96 95       	lsr	r25
    1cec:	96 95       	lsr	r25
    1cee:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1cf0:	91 30       	cpi	r25, 0x01	; 1
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <read_PNEUSensors+0x36>
		*shutter = 'c';
    1cf4:	93 e6       	ldi	r25, 0x63	; 99
    1cf6:	f6 01       	movw	r30, r12
    1cf8:	90 83       	st	Z, r25
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1cfc:	92 30       	cpi	r25, 0x02	; 2
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d00:	9f e6       	ldi	r25, 0x6F	; 111
    1d02:	f6 01       	movw	r30, r12
    1d04:	90 83       	st	Z, r25
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1d08:	93 30       	cpi	r25, 0x03	; 3
    1d0a:	21 f4       	brne	.+8      	; 0x1d14 <read_PNEUSensors+0x4e>
		*shutter = 't';
    1d0c:	94 e7       	ldi	r25, 0x74	; 116
    1d0e:	f6 01       	movw	r30, r12
    1d10:	90 83       	st	Z, r25
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1d14:	98 e7       	ldi	r25, 0x78	; 120
    1d16:	f6 01       	movw	r30, r12
    1d18:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	96 95       	lsr	r25
    1d1e:	96 95       	lsr	r25
	state &= 0b00000011;
    1d20:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d22:	91 30       	cpi	r25, 0x01	; 1
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <read_PNEUSensors+0x68>
		*right = 'c';
    1d26:	93 e6       	ldi	r25, 0x63	; 99
    1d28:	f7 01       	movw	r30, r14
    1d2a:	90 83       	st	Z, r25
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1d2e:	92 30       	cpi	r25, 0x02	; 2
    1d30:	21 f4       	brne	.+8      	; 0x1d3a <read_PNEUSensors+0x74>
		*right = 'o';
    1d32:	9f e6       	ldi	r25, 0x6F	; 111
    1d34:	f7 01       	movw	r30, r14
    1d36:	90 83       	st	Z, r25
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1d3a:	93 30       	cpi	r25, 0x03	; 3
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <read_PNEUSensors+0x80>
		*right = 't';
    1d3e:	94 e7       	ldi	r25, 0x74	; 116
    1d40:	f7 01       	movw	r30, r14
    1d42:	90 83       	st	Z, r25
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1d46:	98 e7       	ldi	r25, 0x78	; 120
    1d48:	f7 01       	movw	r30, r14
    1d4a:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	92 95       	swap	r25
    1d50:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1d52:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d54:	91 30       	cpi	r25, 0x01	; 1
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <read_PNEUSensors+0x9a>
		*left = 'o';
    1d58:	9f e6       	ldi	r25, 0x6F	; 111
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	90 83       	st	Z, r25
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1d60:	92 30       	cpi	r25, 0x02	; 2
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <read_PNEUSensors+0xa6>
		*left = 'c';
    1d64:	93 e6       	ldi	r25, 0x63	; 99
    1d66:	f8 01       	movw	r30, r16
    1d68:	90 83       	st	Z, r25
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1d6c:	93 30       	cpi	r25, 0x03	; 3
    1d6e:	21 f4       	brne	.+8      	; 0x1d78 <read_PNEUSensors+0xb2>
		*left = 't';
    1d70:	94 e7       	ldi	r25, 0x74	; 116
    1d72:	f8 01       	movw	r30, r16
    1d74:	90 83       	st	Z, r25
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1d78:	98 e7       	ldi	r25, 0x78	; 120
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1d7e:	81 ff       	sbrs	r24, 1
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <read_PNEUSensors+0xc2>
		*air = '0';
    1d82:	80 e3       	ldi	r24, 0x30	; 48
    1d84:	88 83       	st	Y, r24
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1d88:	81 e3       	ldi	r24, 0x31	; 49
    1d8a:	88 83       	st	Y, r24
	}
}
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	08 95       	ret

00001d9e <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	d8 2f       	mov	r29, r24
    1da4:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1da6:	69 e0       	ldi	r22, 0x09	; 9
    1da8:	84 e2       	ldi	r24, 0x24	; 36
    1daa:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1dae:	8d 2b       	or	r24, r29
    1db0:	48 2f       	mov	r20, r24
    1db2:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1db4:	6a e0       	ldi	r22, 0x0A	; 10
    1db6:	84 e2       	ldi	r24, 0x24	; 36
    1db8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	6a 97       	sbiw	r28, 0x1a	; 26
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1dd0:	99 e0       	ldi	r25, 0x09	; 9
    1dd2:	e5 e2       	ldi	r30, 0x25	; 37
    1dd4:	f5 ea       	ldi	r31, 0xA5	; 165
    1dd6:	de 01       	movw	r26, r28
    1dd8:	11 96       	adiw	r26, 0x01	; 1
    1dda:	01 90       	ld	r0, Z+
    1ddc:	0d 92       	st	X+, r0
    1dde:	9a 95       	dec	r25
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1de2:	24 e3       	ldi	r18, 0x34	; 52
    1de4:	82 9f       	mul	r24, r18
    1de6:	c0 01       	movw	r24, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	fc 01       	movw	r30, r24
    1dec:	e3 5f       	subi	r30, 0xF3	; 243
    1dee:	f7 4d       	sbci	r31, 0xD7	; 215
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	8c 36       	cpi	r24, 0x6C	; 108
    1df4:	31 f1       	breq	.+76     	; 0x1e42 <close_PNEU+0x80>
    1df6:	18 f4       	brcc	.+6      	; 0x1dfe <close_PNEU+0x3c>
    1df8:	82 36       	cpi	r24, 0x62	; 98
    1dfa:	39 f0       	breq	.+14     	; 0x1e0a <close_PNEU+0x48>
    1dfc:	6a c0       	rjmp	.+212    	; 0x1ed2 <close_PNEU+0x110>
    1dfe:	82 37       	cpi	r24, 0x72	; 114
    1e00:	c1 f1       	breq	.+112    	; 0x1e72 <close_PNEU+0xb0>
    1e02:	83 37       	cpi	r24, 0x73	; 115
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <close_PNEU+0x46>
    1e06:	4d c0       	rjmp	.+154    	; 0x1ea2 <close_PNEU+0xe0>
    1e08:	64 c0       	rjmp	.+200    	; 0x1ed2 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e0a:	6a ee       	ldi	r22, 0xEA	; 234
    1e0c:	84 e4       	ldi	r24, 0x44	; 68
    1e0e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e12:	66 ee       	ldi	r22, 0xE6	; 230
    1e14:	88 e8       	ldi	r24, 0x88	; 136
    1e16:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1e1a:	8b ee       	ldi	r24, 0xEB	; 235
    1e1c:	94 ea       	ldi	r25, 0xA4	; 164
    1e1e:	9f 93       	push	r25
    1e20:	8f 93       	push	r24
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	9f 93       	push	r25
    1e28:	8f 93       	push	r24
    1e2a:	09 96       	adiw	r24, 0x09	; 9
    1e2c:	9f 93       	push	r25
    1e2e:	8f 93       	push	r24
    1e30:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	59 c0       	rjmp	.+178    	; 0x1ef4 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e42:	6a ee       	ldi	r22, 0xEA	; 234
    1e44:	84 e4       	ldi	r24, 0x44	; 68
    1e46:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1e4a:	80 ef       	ldi	r24, 0xF0	; 240
    1e4c:	94 ea       	ldi	r25, 0xA4	; 164
    1e4e:	9f 93       	push	r25
    1e50:	8f 93       	push	r24
    1e52:	ce 01       	movw	r24, r28
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	09 96       	adiw	r24, 0x09	; 9
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	41 c0       	rjmp	.+130    	; 0x1ef4 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e72:	66 ee       	ldi	r22, 0xE6	; 230
    1e74:	88 e8       	ldi	r24, 0x88	; 136
    1e76:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1e7a:	85 ef       	ldi	r24, 0xF5	; 245
    1e7c:	94 ea       	ldi	r25, 0xA4	; 164
    1e7e:	9f 93       	push	r25
    1e80:	8f 93       	push	r24
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	9f 93       	push	r25
    1e88:	8f 93       	push	r24
    1e8a:	09 96       	adiw	r24, 0x09	; 9
    1e8c:	9f 93       	push	r25
    1e8e:	8f 93       	push	r24
    1e90:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	29 c0       	rjmp	.+82     	; 0x1ef4 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1ea2:	6c ee       	ldi	r22, 0xEC	; 236
    1ea4:	82 e2       	ldi	r24, 0x22	; 34
    1ea6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1eaa:	8b ef       	ldi	r24, 0xFB	; 251
    1eac:	94 ea       	ldi	r25, 0xA4	; 164
    1eae:	9f 93       	push	r25
    1eb0:	8f 93       	push	r24
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	09 96       	adiw	r24, 0x09	; 9
    1ebc:	9f 93       	push	r25
    1ebe:	8f 93       	push	r24
    1ec0:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	11 c0       	rjmp	.+34     	; 0x1ef4 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1ed2:	63 e0       	ldi	r22, 0x03	; 3
    1ed4:	75 ea       	ldi	r23, 0xA5	; 165
    1ed6:	85 ef       	ldi	r24, 0xF5	; 245
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			strcpy(outbuf, "close what?");
    1ede:	8c e0       	ldi	r24, 0x0C	; 12
    1ee0:	e9 e1       	ldi	r30, 0x19	; 25
    1ee2:	f5 ea       	ldi	r31, 0xA5	; 165
    1ee4:	de 01       	movw	r26, r28
    1ee6:	1a 96       	adiw	r26, 0x0a	; 10
    1ee8:	01 90       	ld	r0, Z+
    1eea:	0d 92       	st	X+, r0
    1eec:	8a 95       	dec	r24
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <close_PNEU+0x126>
			return(ERROR);
    1ef0:	83 e6       	ldi	r24, 0x63	; 99
    1ef2:	0b c0       	rjmp	.+22     	; 0x1f0a <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	be 01       	movw	r22, r28
    1efe:	66 5f       	subi	r22, 0xF6	; 246
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
	return(NOERROR);
    1f08:	80 e0       	ldi	r24, 0x00	; 0

}
    1f0a:	6a 96       	adiw	r28, 0x1a	; 26
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	69 97       	sbiw	r28, 0x19	; 25
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1f24:	98 e0       	ldi	r25, 0x08	; 8
    1f26:	ee e4       	ldi	r30, 0x4E	; 78
    1f28:	f5 ea       	ldi	r31, 0xA5	; 165
    1f2a:	de 01       	movw	r26, r28
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	01 90       	ld	r0, Z+
    1f30:	0d 92       	st	X+, r0
    1f32:	9a 95       	dec	r25
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1f36:	24 e3       	ldi	r18, 0x34	; 52
    1f38:	82 9f       	mul	r24, r18
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	fc 01       	movw	r30, r24
    1f40:	e3 5f       	subi	r30, 0xF3	; 243
    1f42:	f7 4d       	sbci	r31, 0xD7	; 215
    1f44:	81 81       	ldd	r24, Z+1	; 0x01
    1f46:	8c 36       	cpi	r24, 0x6C	; 108
    1f48:	31 f1       	breq	.+76     	; 0x1f96 <open_PNEU+0x80>
    1f4a:	18 f4       	brcc	.+6      	; 0x1f52 <open_PNEU+0x3c>
    1f4c:	82 36       	cpi	r24, 0x62	; 98
    1f4e:	39 f0       	breq	.+14     	; 0x1f5e <open_PNEU+0x48>
    1f50:	6a c0       	rjmp	.+212    	; 0x2026 <open_PNEU+0x110>
    1f52:	82 37       	cpi	r24, 0x72	; 114
    1f54:	c1 f1       	breq	.+112    	; 0x1fc6 <open_PNEU+0xb0>
    1f56:	83 37       	cpi	r24, 0x73	; 115
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <open_PNEU+0x46>
    1f5a:	4d c0       	rjmp	.+154    	; 0x1ff6 <open_PNEU+0xe0>
    1f5c:	64 c0       	rjmp	.+200    	; 0x2026 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1f5e:	6e ea       	ldi	r22, 0xAE	; 174
    1f60:	84 e4       	ldi	r24, 0x44	; 68
    1f62:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1f66:	6e e6       	ldi	r22, 0x6E	; 110
    1f68:	88 e8       	ldi	r24, 0x88	; 136
    1f6a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1f6e:	8b ee       	ldi	r24, 0xEB	; 235
    1f70:	94 ea       	ldi	r25, 0xA4	; 164
    1f72:	9f 93       	push	r25
    1f74:	8f 93       	push	r24
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	9f 93       	push	r25
    1f7c:	8f 93       	push	r24
    1f7e:	08 96       	adiw	r24, 0x08	; 8
    1f80:	9f 93       	push	r25
    1f82:	8f 93       	push	r24
    1f84:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	59 c0       	rjmp	.+178    	; 0x2048 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1f96:	6e ea       	ldi	r22, 0xAE	; 174
    1f98:	84 e4       	ldi	r24, 0x44	; 68
    1f9a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1f9e:	80 ef       	ldi	r24, 0xF0	; 240
    1fa0:	94 ea       	ldi	r25, 0xA4	; 164
    1fa2:	9f 93       	push	r25
    1fa4:	8f 93       	push	r24
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	08 96       	adiw	r24, 0x08	; 8
    1fb0:	9f 93       	push	r25
    1fb2:	8f 93       	push	r24
    1fb4:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	41 c0       	rjmp	.+130    	; 0x2048 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1fc6:	6e e6       	ldi	r22, 0x6E	; 110
    1fc8:	88 e8       	ldi	r24, 0x88	; 136
    1fca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1fce:	85 ef       	ldi	r24, 0xF5	; 245
    1fd0:	94 ea       	ldi	r25, 0xA4	; 164
    1fd2:	9f 93       	push	r25
    1fd4:	8f 93       	push	r24
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	08 96       	adiw	r24, 0x08	; 8
    1fe0:	9f 93       	push	r25
    1fe2:	8f 93       	push	r24
    1fe4:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	29 c0       	rjmp	.+82     	; 0x2048 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1ff6:	6e ec       	ldi	r22, 0xCE	; 206
    1ff8:	82 e2       	ldi	r24, 0x22	; 34
    1ffa:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1ffe:	8b ef       	ldi	r24, 0xFB	; 251
    2000:	94 ea       	ldi	r25, 0xA4	; 164
    2002:	9f 93       	push	r25
    2004:	8f 93       	push	r24
    2006:	ce 01       	movw	r24, r28
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	08 96       	adiw	r24, 0x08	; 8
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			break;
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	11 c0       	rjmp	.+34     	; 0x2048 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    2026:	6e e2       	ldi	r22, 0x2E	; 46
    2028:	75 ea       	ldi	r23, 0xA5	; 165
    202a:	85 ef       	ldi	r24, 0xF5	; 245
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			strcpy(outbuf, "open what?");
    2032:	8b e0       	ldi	r24, 0x0B	; 11
    2034:	e3 e4       	ldi	r30, 0x43	; 67
    2036:	f5 ea       	ldi	r31, 0xA5	; 165
    2038:	de 01       	movw	r26, r28
    203a:	19 96       	adiw	r26, 0x09	; 9
    203c:	01 90       	ld	r0, Z+
    203e:	0d 92       	st	X+, r0
    2040:	8a 95       	dec	r24
    2042:	e1 f7       	brne	.-8      	; 0x203c <open_PNEU+0x126>
			return(ERROR);
    2044:	83 e6       	ldi	r24, 0x63	; 99
    2046:	0b c0       	rjmp	.+22     	; 0x205e <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	be 01       	movw	r22, r28
    2052:	67 5f       	subi	r22, 0xF7	; 247
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
	return(NOERROR);
    205c:	80 e0       	ldi	r24, 0x00	; 0

}
    205e:	69 96       	adiw	r28, 0x19	; 25
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	08 95       	ret

0000206a <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	2f 93       	push	r18
    2076:	3f 93       	push	r19
    2078:	4f 93       	push	r20
    207a:	5f 93       	push	r21
    207c:	6f 93       	push	r22
    207e:	7f 93       	push	r23
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
    2088:	ef 93       	push	r30
    208a:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    208c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    2090:	88 23       	and	r24, r24
    2092:	4c f4       	brge	.+18     	; 0x20a6 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    2094:	80 e8       	ldi	r24, 0x80	; 128
    2096:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    209a:	68 e0       	ldi	r22, 0x08	; 8
    209c:	81 e2       	ldi	r24, 0x21	; 33
    209e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <read_MCP23008>
    20a2:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <pneuState>
	}

}
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    20ce:	e0 ea       	ldi	r30, 0xA0	; 160
    20d0:	f4 e0       	ldi	r31, 0x04	; 4
    20d2:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    20d4:	80 e2       	ldi	r24, 0x20	; 32
    20d6:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    20d8:	8b e0       	ldi	r24, 0x0B	; 11
    20da:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    20dc:	e0 e4       	ldi	r30, 0x40	; 64
    20de:	f4 e0       	ldi	r31, 0x04	; 4
    20e0:	88 e0       	ldi	r24, 0x08	; 8
    20e2:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    20e4:	81 83       	std	Z+1, r24	; 0x01
    20e6:	ad e8       	ldi	r26, 0x8D	; 141
    20e8:	b0 e2       	ldi	r27, 0x20	; 32
    20ea:	11 97       	sbiw	r26, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <init_PORTS+0x22>
    20ee:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    20f0:	85 83       	std	Z+5, r24	; 0x05
    20f2:	08 95       	ret

000020f4 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    20f4:	2f 92       	push	r2
    20f6:	3f 92       	push	r3
    20f8:	4f 92       	push	r4
    20fa:	5f 92       	push	r5
    20fc:	6f 92       	push	r6
    20fe:	7f 92       	push	r7
    2100:	8f 92       	push	r8
    2102:	9f 92       	push	r9
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	c1 5a       	subi	r28, 0xA1	; 161
    211e:	d3 40       	sbci	r29, 0x03	; 3
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    2124:	95 e4       	ldi	r25, 0x45	; 69
    2126:	e2 ec       	ldi	r30, 0xC2	; 194
    2128:	f6 ea       	ldi	r31, 0xA6	; 166
    212a:	de 01       	movw	r26, r28
    212c:	a2 5a       	subi	r26, 0xA2	; 162
    212e:	be 4f       	sbci	r27, 0xFE	; 254
    2130:	01 90       	ld	r0, Z+
    2132:	0d 92       	st	X+, r0
    2134:	9a 95       	dec	r25
    2136:	e1 f7       	brne	.-8      	; 0x2130 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%s";
    2138:	93 e2       	ldi	r25, 0x23	; 35
    213a:	e7 e0       	ldi	r30, 0x07	; 7
    213c:	f7 ea       	ldi	r31, 0xA7	; 167
    213e:	de 01       	movw	r26, r28
    2140:	ad 55       	subi	r26, 0x5D	; 93
    2142:	be 4f       	sbci	r27, 0xFE	; 254
    2144:	01 90       	ld	r0, Z+
    2146:	0d 92       	st	X+, r0
    2148:	9a 95       	dec	r25
    214a:	e1 f7       	brne	.-8      	; 0x2144 <report+0x50>
	const char format_MT0[] = "ETI,%s,Mtr%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";
    214c:	9f e2       	ldi	r25, 0x2F	; 47
    214e:	ea e2       	ldi	r30, 0x2A	; 42
    2150:	f7 ea       	ldi	r31, 0xA7	; 167
    2152:	de 01       	movw	r26, r28
    2154:	aa 53       	subi	r26, 0x3A	; 58
    2156:	be 4f       	sbci	r27, 0xFE	; 254
    2158:	01 90       	ld	r0, Z+
    215a:	0d 92       	st	X+, r0
    215c:	9a 95       	dec	r25
    215e:	e1 f7       	brne	.-8      	; 0x2158 <report+0x64>
//	const char format_MT0[] = "ETI,%s,Mtr %c,%3.1f,V,%3.1f,C,%ld,mA,0x%02x,S4,%s";
	const char format_MT1[] = "PID,%s,Mtr%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    2160:	90 e3       	ldi	r25, 0x30	; 48
    2162:	e9 e5       	ldi	r30, 0x59	; 89
    2164:	f7 ea       	ldi	r31, 0xA7	; 167
    2166:	de 01       	movw	r26, r28
    2168:	ab 50       	subi	r26, 0x0B	; 11
    216a:	be 4f       	sbci	r27, 0xFE	; 254
    216c:	01 90       	ld	r0, Z+
    216e:	0d 92       	st	X+, r0
    2170:	9a 95       	dec	r25
    2172:	e1 f7       	brne	.-8      	; 0x216c <report+0x78>
	const char format_MT2[] = "DMM,%s,Mtr%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    2174:	94 e3       	ldi	r25, 0x34	; 52
    2176:	e9 e8       	ldi	r30, 0x89	; 137
    2178:	f7 ea       	ldi	r31, 0xA7	; 167
    217a:	de 01       	movw	r26, r28
    217c:	ab 5d       	subi	r26, 0xDB	; 219
    217e:	bd 4f       	sbci	r27, 0xFD	; 253
    2180:	01 90       	ld	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	9a 95       	dec	r25
    2186:	e1 f7       	brne	.-8      	; 0x2180 <report+0x8c>
	const char format_MT3[] = "MTC,%s,Mtr%c,%ld,mA,0x%02x,S4,%s";
    2188:	91 e2       	ldi	r25, 0x21	; 33
    218a:	ed eb       	ldi	r30, 0xBD	; 189
    218c:	f7 ea       	ldi	r31, 0xA7	; 167
    218e:	de 01       	movw	r26, r28
    2190:	a7 5a       	subi	r26, 0xA7	; 167
    2192:	bd 4f       	sbci	r27, 0xFD	; 253
    2194:	01 90       	ld	r0, Z+
    2196:	0d 92       	st	X+, r0
    2198:	9a 95       	dec	r25
    219a:	e1 f7       	brne	.-8      	; 0x2194 <report+0xa0>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    219c:	9c e1       	ldi	r25, 0x1C	; 28
    219e:	ee ed       	ldi	r30, 0xDE	; 222
    21a0:	f7 ea       	ldi	r31, 0xA7	; 167
    21a2:	de 01       	movw	r26, r28
    21a4:	a6 58       	subi	r26, 0x86	; 134
    21a6:	bd 4f       	sbci	r27, 0xFD	; 253
    21a8:	01 90       	ld	r0, Z+
    21aa:	0d 92       	st	X+, r0
    21ac:	9a 95       	dec	r25
    21ae:	e1 f7       	brne	.-8      	; 0x21a8 <report+0xb4>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    21b0:	92 e1       	ldi	r25, 0x12	; 18
    21b2:	ea ef       	ldi	r30, 0xFA	; 250
    21b4:	f7 ea       	ldi	r31, 0xA7	; 167
    21b6:	de 01       	movw	r26, r28
    21b8:	aa 56       	subi	r26, 0x6A	; 106
    21ba:	bd 4f       	sbci	r27, 0xFD	; 253
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	9a 95       	dec	r25
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <report+0xc8>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    21c4:	9d e2       	ldi	r25, 0x2D	; 45
    21c6:	ec e0       	ldi	r30, 0x0C	; 12
    21c8:	f8 ea       	ldi	r31, 0xA8	; 168
    21ca:	de 01       	movw	r26, r28
    21cc:	a8 55       	subi	r26, 0x58	; 88
    21ce:	bd 4f       	sbci	r27, 0xFD	; 253
    21d0:	01 90       	ld	r0, Z+
    21d2:	0d 92       	st	X+, r0
    21d4:	9a 95       	dec	r25
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <report+0xdc>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    21d8:	93 e1       	ldi	r25, 0x13	; 19
    21da:	e9 e3       	ldi	r30, 0x39	; 57
    21dc:	f8 ea       	ldi	r31, 0xA8	; 168
    21de:	de 01       	movw	r26, r28
    21e0:	ab 52       	subi	r26, 0x2B	; 43
    21e2:	bd 4f       	sbci	r27, 0xFD	; 253
    21e4:	01 90       	ld	r0, Z+
    21e6:	0d 92       	st	X+, r0
    21e8:	9a 95       	dec	r25
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <report+0xf0>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    21ec:	93 e1       	ldi	r25, 0x13	; 19
    21ee:	ec e4       	ldi	r30, 0x4C	; 76
    21f0:	f8 ea       	ldi	r31, 0xA8	; 168
    21f2:	de 01       	movw	r26, r28
    21f4:	a8 51       	subi	r26, 0x18	; 24
    21f6:	bd 4f       	sbci	r27, 0xFD	; 253
    21f8:	01 90       	ld	r0, Z+
    21fa:	0d 92       	st	X+, r0
    21fc:	9a 95       	dec	r25
    21fe:	e1 f7       	brne	.-8      	; 0x21f8 <report+0x104>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    2200:	99 e1       	ldi	r25, 0x19	; 25
    2202:	ef e5       	ldi	r30, 0x5F	; 95
    2204:	f8 ea       	ldi	r31, 0xA8	; 168
    2206:	de 01       	movw	r26, r28
    2208:	a5 50       	subi	r26, 0x05	; 5
    220a:	bd 4f       	sbci	r27, 0xFD	; 253
    220c:	01 90       	ld	r0, Z+
    220e:	0d 92       	st	X+, r0
    2210:	9a 95       	dec	r25
    2212:	e1 f7       	brne	.-8      	; 0x220c <report+0x118>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    2214:	95 e2       	ldi	r25, 0x25	; 37
    2216:	e8 e7       	ldi	r30, 0x78	; 120
    2218:	f8 ea       	ldi	r31, 0xA8	; 168
    221a:	de 01       	movw	r26, r28
    221c:	ac 5e       	subi	r26, 0xEC	; 236
    221e:	bc 4f       	sbci	r27, 0xFC	; 252
    2220:	01 90       	ld	r0, Z+
    2222:	0d 92       	st	X+, r0
    2224:	9a 95       	dec	r25
    2226:	e1 f7       	brne	.-8      	; 0x2220 <report+0x12c>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    2228:	9d e0       	ldi	r25, 0x0D	; 13
    222a:	ed e9       	ldi	r30, 0x9D	; 157
    222c:	f8 ea       	ldi	r31, 0xA8	; 168
    222e:	de 01       	movw	r26, r28
    2230:	a7 5c       	subi	r26, 0xC7	; 199
    2232:	bc 4f       	sbci	r27, 0xFC	; 252
    2234:	01 90       	ld	r0, Z+
    2236:	0d 92       	st	X+, r0
    2238:	9a 95       	dec	r25
    223a:	e1 f7       	brne	.-8      	; 0x2234 <report+0x140>
	const char format_VER[] = "VER,%s,%s,%s";
    223c:	9d e0       	ldi	r25, 0x0D	; 13
    223e:	ea ea       	ldi	r30, 0xAA	; 170
    2240:	f8 ea       	ldi	r31, 0xA8	; 168
    2242:	de 01       	movw	r26, r28
    2244:	aa 5b       	subi	r26, 0xBA	; 186
    2246:	bc 4f       	sbci	r27, 0xFC	; 252
    2248:	01 90       	ld	r0, Z+
    224a:	0d 92       	st	X+, r0
    224c:	9a 95       	dec	r25
    224e:	e1 f7       	brne	.-8      	; 0x2248 <report+0x154>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2250:	08 2f       	mov	r16, r24
    2252:	10 e0       	ldi	r17, 0x00	; 0
    2254:	84 e3       	ldi	r24, 0x34	; 52
    2256:	80 9f       	mul	r24, r16
    2258:	f0 01       	movw	r30, r0
    225a:	81 9f       	mul	r24, r17
    225c:	f0 0d       	add	r31, r0
    225e:	11 24       	eor	r1, r1
    2260:	e3 5f       	subi	r30, 0xF3	; 243
    2262:	f7 4d       	sbci	r31, 0xD7	; 215
    2264:	e1 81       	ldd	r30, Z+1	; 0x01
    2266:	8e 2f       	mov	r24, r30
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	fc 01       	movw	r30, r24
    226c:	e1 54       	subi	r30, 0x41	; 65
    226e:	f1 09       	sbc	r31, r1
    2270:	e6 33       	cpi	r30, 0x36	; 54
    2272:	f1 05       	cpc	r31, r1
    2274:	08 f0       	brcs	.+2      	; 0x2278 <report+0x184>
    2276:	24 c6       	rjmp	.+3144   	; 0x2ec0 <report+0xdcc>
    2278:	e4 58       	subi	r30, 0x84	; 132
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	0c 94 96 2e 	jmp	0x5d2c	; 0x5d2c <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    2280:	ce 01       	movw	r24, r28
    2282:	86 5f       	subi	r24, 0xF6	; 246
    2284:	9e 4f       	sbci	r25, 0xFE	; 254
    2286:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			controller = pcmd[cstack].cobject + 63;
    228a:	84 e3       	ldi	r24, 0x34	; 52
    228c:	80 9f       	mul	r24, r16
    228e:	f0 01       	movw	r30, r0
    2290:	81 9f       	mul	r24, r17
    2292:	f0 0d       	add	r31, r0
    2294:	11 24       	eor	r1, r1
    2296:	e3 5f       	subi	r30, 0xF3	; 243
    2298:	f7 4d       	sbci	r31, 0xD7	; 215
    229a:	d1 80       	ldd	r13, Z+1	; 0x01
    229c:	0f 2e       	mov	r0, r31
    229e:	ff e3       	ldi	r31, 0x3F	; 63
    22a0:	ef 2e       	mov	r14, r31
    22a2:	f0 2d       	mov	r31, r0
    22a4:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    22a6:	ae 01       	movw	r20, r28
    22a8:	4c 59       	subi	r20, 0x9C	; 156
    22aa:	5c 4f       	sbci	r21, 0xFC	; 252
    22ac:	68 e1       	ldi	r22, 0x18	; 24
    22ae:	8e 2d       	mov	r24, r14
    22b0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <get_MOTOR_FLOAT>
    22b4:	f8 2e       	mov	r15, r24
    22b6:	83 e6       	ldi	r24, 0x63	; 99
    22b8:	f8 12       	cpse	r15, r24
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <report+0x1d6>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    22bc:	66 e5       	ldi	r22, 0x56	; 86
    22be:	75 ea       	ldi	r23, 0xA5	; 165
    22c0:	86 e3       	ldi	r24, 0x36	; 54
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    22c8:	05 c6       	rjmp	.+3082   	; 0x2ed4 <report+0xde0>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    22ca:	ce 01       	movw	r24, r28
    22cc:	8a 5b       	subi	r24, 0xBA	; 186
    22ce:	9e 4f       	sbci	r25, 0xFE	; 254
    22d0:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_FRAM_ENCSAVETIME>
    22d4:	f8 2e       	mov	r15, r24
    22d6:	93 e6       	ldi	r25, 0x63	; 99
    22d8:	89 13       	cpse	r24, r25
    22da:	11 c0       	rjmp	.+34     	; 0x22fe <report+0x20a>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    22dc:	82 e2       	ldi	r24, 0x22	; 34
    22de:	ea e7       	ldi	r30, 0x7A	; 122
    22e0:	f5 ea       	ldi	r31, 0xA5	; 165
    22e2:	de 01       	movw	r26, r28
    22e4:	11 96       	adiw	r26, 0x01	; 1
    22e6:	01 90       	ld	r0, Z+
    22e8:	0d 92       	st	X+, r0
    22ea:	8a 95       	dec	r24
    22ec:	e1 f7       	brne	.-8      	; 0x22e6 <report+0x1f2>
				printError(ERR_MTR, outbuf);
    22ee:	be 01       	movw	r22, r28
    22f0:	6f 5f       	subi	r22, 0xFF	; 255
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	86 e3       	ldi	r24, 0x36	; 54
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    22fc:	eb c5       	rjmp	.+3030   	; 0x2ed4 <report+0xde0>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    22fe:	ae 01       	movw	r20, r28
    2300:	40 5a       	subi	r20, 0xA0	; 160
    2302:	5c 4f       	sbci	r21, 0xFC	; 252
    2304:	62 e5       	ldi	r22, 0x52	; 82
    2306:	8e 2d       	mov	r24, r14
    2308:	0e 94 4a 1a 	call	0x3494	; 0x3494 <get_MOTOR_FLOAT>
    230c:	f8 2e       	mov	r15, r24
    230e:	83 e6       	ldi	r24, 0x63	; 99
    2310:	f8 12       	cpse	r15, r24
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <report+0x22e>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2314:	6c e9       	ldi	r22, 0x9C	; 156
    2316:	75 ea       	ldi	r23, 0xA5	; 165
    2318:	86 e3       	ldi	r24, 0x36	; 54
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2320:	d9 c5       	rjmp	.+2994   	; 0x2ed4 <report+0xde0>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    2322:	be 01       	movw	r22, r28
    2324:	64 5a       	subi	r22, 0xA4	; 164
    2326:	7c 4f       	sbci	r23, 0xFC	; 252
    2328:	8e 2d       	mov	r24, r14
    232a:	0e 94 be 1a 	call	0x357c	; 0x357c <get_MOTOR_MAXCURRENT>
    232e:	f8 2e       	mov	r15, r24
    2330:	93 e6       	ldi	r25, 0x63	; 99
    2332:	89 13       	cpse	r24, r25
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <report+0x250>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    2336:	66 ec       	ldi	r22, 0xC6	; 198
    2338:	75 ea       	ldi	r23, 0xA5	; 165
    233a:	86 e3       	ldi	r24, 0x36	; 54
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2342:	c8 c5       	rjmp	.+2960   	; 0x2ed4 <report+0xde0>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    2344:	be 01       	movw	r22, r28
    2346:	6d 5a       	subi	r22, 0xAD	; 173
    2348:	7c 4f       	sbci	r23, 0xFC	; 252
    234a:	8e 2d       	mov	r24, r14
    234c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <get_MOTOR_S4MODE>
    2350:	f8 2e       	mov	r15, r24
    2352:	83 e6       	ldi	r24, 0x63	; 99
    2354:	f8 12       	cpse	r15, r24
    2356:	07 c0       	rjmp	.+14     	; 0x2366 <report+0x272>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    2358:	69 ee       	ldi	r22, 0xE9	; 233
    235a:	75 ea       	ldi	r23, 0xA5	; 165
    235c:	86 e3       	ldi	r24, 0x36	; 54
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2364:	b7 c5       	rjmp	.+2926   	; 0x2ed4 <report+0xde0>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2366:	be 01       	movw	r22, r28
    2368:	6a 58       	subi	r22, 0x8A	; 138
    236a:	7c 4f       	sbci	r23, 0xFC	; 252
    236c:	8e 2d       	mov	r24, r14
    236e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <get_MOTOR_PID>
    2372:	f8 2e       	mov	r15, r24
    2374:	93 e6       	ldi	r25, 0x63	; 99
    2376:	89 13       	cpse	r24, r25
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <report+0x294>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    237a:	68 e0       	ldi	r22, 0x08	; 8
    237c:	76 ea       	ldi	r23, 0xA6	; 166
    237e:	86 e3       	ldi	r24, 0x36	; 54
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    2386:	a6 c5       	rjmp	.+2892   	; 0x2ed4 <report+0xde0>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    2388:	24 e3       	ldi	r18, 0x34	; 52
    238a:	20 9f       	mul	r18, r16
    238c:	c0 01       	movw	r24, r0
    238e:	21 9f       	mul	r18, r17
    2390:	90 0d       	add	r25, r0
    2392:	11 24       	eor	r1, r1
    2394:	8c 01       	movw	r16, r24
    2396:	08 5c       	subi	r16, 0xC8	; 200
    2398:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    239a:	1f 93       	push	r17
    239c:	0f 93       	push	r16
    239e:	ce 01       	movw	r24, r28
    23a0:	8a 5b       	subi	r24, 0xBA	; 186
    23a2:	9e 4f       	sbci	r25, 0xFE	; 254
    23a4:	9f 93       	push	r25
    23a6:	8f 93       	push	r24
    23a8:	cd 59       	subi	r28, 0x9D	; 157
    23aa:	dc 4f       	sbci	r29, 0xFC	; 252
    23ac:	88 81       	ld	r24, Y
    23ae:	c3 56       	subi	r28, 0x63	; 99
    23b0:	d3 40       	sbci	r29, 0x03	; 3
    23b2:	8f 93       	push	r24
    23b4:	ce 59       	subi	r28, 0x9E	; 158
    23b6:	dc 4f       	sbci	r29, 0xFC	; 252
    23b8:	88 81       	ld	r24, Y
    23ba:	c2 56       	subi	r28, 0x62	; 98
    23bc:	d3 40       	sbci	r29, 0x03	; 3
    23be:	8f 93       	push	r24
    23c0:	cf 59       	subi	r28, 0x9F	; 159
    23c2:	dc 4f       	sbci	r29, 0xFC	; 252
    23c4:	88 81       	ld	r24, Y
    23c6:	c1 56       	subi	r28, 0x61	; 97
    23c8:	d3 40       	sbci	r29, 0x03	; 3
    23ca:	8f 93       	push	r24
    23cc:	c0 5a       	subi	r28, 0xA0	; 160
    23ce:	dc 4f       	sbci	r29, 0xFC	; 252
    23d0:	88 81       	ld	r24, Y
    23d2:	c0 56       	subi	r28, 0x60	; 96
    23d4:	d3 40       	sbci	r29, 0x03	; 3
    23d6:	8f 93       	push	r24
    23d8:	c9 59       	subi	r28, 0x99	; 153
    23da:	dc 4f       	sbci	r29, 0xFC	; 252
    23dc:	88 81       	ld	r24, Y
    23de:	c7 56       	subi	r28, 0x67	; 103
    23e0:	d3 40       	sbci	r29, 0x03	; 3
    23e2:	8f 93       	push	r24
    23e4:	ca 59       	subi	r28, 0x9A	; 154
    23e6:	dc 4f       	sbci	r29, 0xFC	; 252
    23e8:	88 81       	ld	r24, Y
    23ea:	c6 56       	subi	r28, 0x66	; 102
    23ec:	d3 40       	sbci	r29, 0x03	; 3
    23ee:	8f 93       	push	r24
    23f0:	cb 59       	subi	r28, 0x9B	; 155
    23f2:	dc 4f       	sbci	r29, 0xFC	; 252
    23f4:	88 81       	ld	r24, Y
    23f6:	c5 56       	subi	r28, 0x65	; 101
    23f8:	d3 40       	sbci	r29, 0x03	; 3
    23fa:	8f 93       	push	r24
    23fc:	cc 59       	subi	r28, 0x9C	; 156
    23fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2400:	88 81       	ld	r24, Y
    2402:	c4 56       	subi	r28, 0x64	; 100
    2404:	d3 40       	sbci	r29, 0x03	; 3
    2406:	8f 93       	push	r24
    2408:	1f 92       	push	r1
    240a:	df 92       	push	r13
    240c:	5e 01       	movw	r10, r28
    240e:	86 ef       	ldi	r24, 0xF6	; 246
    2410:	a8 1a       	sub	r10, r24
    2412:	8e ef       	ldi	r24, 0xFE	; 254
    2414:	b8 0a       	sbc	r11, r24
    2416:	bf 92       	push	r11
    2418:	af 92       	push	r10
    241a:	ce 01       	movw	r24, r28
    241c:	8a 53       	subi	r24, 0x3A	; 58
    241e:	9e 4f       	sbci	r25, 0xFE	; 254
    2420:	9f 93       	push	r25
    2422:	8f 93       	push	r24
    2424:	85 5c       	subi	r24, 0xC5	; 197
    2426:	91 40       	sbci	r25, 0x01	; 1
    2428:	7c 01       	movw	r14, r24
    242a:	9f 93       	push	r25
    242c:	8f 93       	push	r24
    242e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    2432:	c7 01       	movw	r24, r14
    2434:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    2438:	1f 93       	push	r17
    243a:	0f 93       	push	r16
    243c:	cd 5a       	subi	r28, 0xAD	; 173
    243e:	dc 4f       	sbci	r29, 0xFC	; 252
    2440:	88 81       	ld	r24, Y
    2442:	c3 55       	subi	r28, 0x53	; 83
    2444:	d3 40       	sbci	r29, 0x03	; 3
    2446:	1f 92       	push	r1
    2448:	8f 93       	push	r24
    244a:	c1 5a       	subi	r28, 0xA1	; 161
    244c:	dc 4f       	sbci	r29, 0xFC	; 252
    244e:	88 81       	ld	r24, Y
    2450:	cf 55       	subi	r28, 0x5F	; 95
    2452:	d3 40       	sbci	r29, 0x03	; 3
    2454:	8f 93       	push	r24
    2456:	c2 5a       	subi	r28, 0xA2	; 162
    2458:	dc 4f       	sbci	r29, 0xFC	; 252
    245a:	88 81       	ld	r24, Y
    245c:	ce 55       	subi	r28, 0x5E	; 94
    245e:	d3 40       	sbci	r29, 0x03	; 3
    2460:	8f 93       	push	r24
    2462:	c3 5a       	subi	r28, 0xA3	; 163
    2464:	dc 4f       	sbci	r29, 0xFC	; 252
    2466:	88 81       	ld	r24, Y
    2468:	cd 55       	subi	r28, 0x5D	; 93
    246a:	d3 40       	sbci	r29, 0x03	; 3
    246c:	8f 93       	push	r24
    246e:	c4 5a       	subi	r28, 0xA4	; 164
    2470:	dc 4f       	sbci	r29, 0xFC	; 252
    2472:	88 81       	ld	r24, Y
    2474:	cc 55       	subi	r28, 0x5C	; 92
    2476:	d3 40       	sbci	r29, 0x03	; 3
    2478:	8f 93       	push	r24
    247a:	1f 92       	push	r1
    247c:	df 92       	push	r13
    247e:	bf 92       	push	r11
    2480:	af 92       	push	r10
    2482:	ce 01       	movw	r24, r28
    2484:	87 5a       	subi	r24, 0xA7	; 167
    2486:	9d 4f       	sbci	r25, 0xFD	; 253
    2488:	9f 93       	push	r25
    248a:	8f 93       	push	r24
    248c:	ff 92       	push	r15
    248e:	ef 92       	push	r14
    2490:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	c7 01       	movw	r24, r14
    249a:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    249e:	c2 58       	subi	r28, 0x82	; 130
    24a0:	dc 4f       	sbci	r29, 0xFC	; 252
    24a2:	e8 81       	ld	r30, Y
    24a4:	ce 57       	subi	r28, 0x7E	; 126
    24a6:	d3 40       	sbci	r29, 0x03	; 3
    24a8:	c1 58       	subi	r28, 0x81	; 129
    24aa:	dc 4f       	sbci	r29, 0xFC	; 252
    24ac:	f8 81       	ld	r31, Y
    24ae:	cf 57       	subi	r28, 0x7F	; 127
    24b0:	d3 40       	sbci	r29, 0x03	; 3
    24b2:	c0 58       	subi	r28, 0x80	; 128
    24b4:	dc 4f       	sbci	r29, 0xFC	; 252
    24b6:	a8 81       	ld	r26, Y
    24b8:	c0 58       	subi	r28, 0x80	; 128
    24ba:	d3 40       	sbci	r29, 0x03	; 3
    24bc:	cf 57       	subi	r28, 0x7F	; 127
    24be:	dc 4f       	sbci	r29, 0xFC	; 252
    24c0:	b8 81       	ld	r27, Y
    24c2:	c1 58       	subi	r28, 0x81	; 129
    24c4:	d3 40       	sbci	r29, 0x03	; 3
    24c6:	c6 58       	subi	r28, 0x86	; 134
    24c8:	dc 4f       	sbci	r29, 0xFC	; 252
    24ca:	48 81       	ld	r20, Y
    24cc:	ca 57       	subi	r28, 0x7A	; 122
    24ce:	d3 40       	sbci	r29, 0x03	; 3
    24d0:	c5 58       	subi	r28, 0x85	; 133
    24d2:	dc 4f       	sbci	r29, 0xFC	; 252
    24d4:	58 81       	ld	r21, Y
    24d6:	cb 57       	subi	r28, 0x7B	; 123
    24d8:	d3 40       	sbci	r29, 0x03	; 3
    24da:	c4 58       	subi	r28, 0x84	; 132
    24dc:	dc 4f       	sbci	r29, 0xFC	; 252
    24de:	68 81       	ld	r22, Y
    24e0:	cc 57       	subi	r28, 0x7C	; 124
    24e2:	d3 40       	sbci	r29, 0x03	; 3
    24e4:	c3 58       	subi	r28, 0x83	; 131
    24e6:	dc 4f       	sbci	r29, 0xFC	; 252
    24e8:	78 81       	ld	r23, Y
    24ea:	cd 57       	subi	r28, 0x7D	; 125
    24ec:	d3 40       	sbci	r29, 0x03	; 3
    24ee:	ca 58       	subi	r28, 0x8A	; 138
    24f0:	dc 4f       	sbci	r29, 0xFC	; 252
    24f2:	88 81       	ld	r24, Y
    24f4:	c6 57       	subi	r28, 0x76	; 118
    24f6:	d3 40       	sbci	r29, 0x03	; 3
    24f8:	c9 58       	subi	r28, 0x89	; 137
    24fa:	dc 4f       	sbci	r29, 0xFC	; 252
    24fc:	98 81       	ld	r25, Y
    24fe:	c7 57       	subi	r28, 0x77	; 119
    2500:	d3 40       	sbci	r29, 0x03	; 3
    2502:	c8 58       	subi	r28, 0x88	; 136
    2504:	dc 4f       	sbci	r29, 0xFC	; 252
    2506:	28 81       	ld	r18, Y
    2508:	c8 57       	subi	r28, 0x78	; 120
    250a:	d3 40       	sbci	r29, 0x03	; 3
    250c:	c7 58       	subi	r28, 0x87	; 135
    250e:	dc 4f       	sbci	r29, 0xFC	; 252
    2510:	38 81       	ld	r19, Y
    2512:	c9 57       	subi	r28, 0x79	; 121
    2514:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    2516:	1f 93       	push	r17
    2518:	0f 93       	push	r16
    251a:	cb 57       	subi	r28, 0x7B	; 123
    251c:	dc 4f       	sbci	r29, 0xFC	; 252
    251e:	c8 80       	ld	r12, Y
    2520:	c5 58       	subi	r28, 0x85	; 133
    2522:	d3 40       	sbci	r29, 0x03	; 3
    2524:	cf 92       	push	r12
    2526:	cc 57       	subi	r28, 0x7C	; 124
    2528:	dc 4f       	sbci	r29, 0xFC	; 252
    252a:	c8 80       	ld	r12, Y
    252c:	c4 58       	subi	r28, 0x84	; 132
    252e:	d3 40       	sbci	r29, 0x03	; 3
    2530:	cf 92       	push	r12
    2532:	cd 57       	subi	r28, 0x7D	; 125
    2534:	dc 4f       	sbci	r29, 0xFC	; 252
    2536:	c8 80       	ld	r12, Y
    2538:	c3 58       	subi	r28, 0x83	; 131
    253a:	d3 40       	sbci	r29, 0x03	; 3
    253c:	cf 92       	push	r12
    253e:	ce 57       	subi	r28, 0x7E	; 126
    2540:	dc 4f       	sbci	r29, 0xFC	; 252
    2542:	c8 80       	ld	r12, Y
    2544:	c2 58       	subi	r28, 0x82	; 130
    2546:	d3 40       	sbci	r29, 0x03	; 3
    2548:	cf 92       	push	r12
    254a:	bf 93       	push	r27
    254c:	af 93       	push	r26
    254e:	ff 93       	push	r31
    2550:	ef 93       	push	r30
    2552:	7f 93       	push	r23
    2554:	6f 93       	push	r22
    2556:	5f 93       	push	r21
    2558:	4f 93       	push	r20
    255a:	3f 93       	push	r19
    255c:	2f 93       	push	r18
    255e:	9f 93       	push	r25
    2560:	8f 93       	push	r24
    2562:	1f 92       	push	r1
    2564:	df 92       	push	r13
    2566:	bf 92       	push	r11
    2568:	af 92       	push	r10
    256a:	ce 01       	movw	r24, r28
    256c:	8b 50       	subi	r24, 0x0B	; 11
    256e:	9e 4f       	sbci	r25, 0xFE	; 254
    2570:	9f 93       	push	r25
    2572:	8f 93       	push	r24
    2574:	ff 92       	push	r15
    2576:	ef 92       	push	r14
    2578:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    257c:	c7 01       	movw	r24, r14
    257e:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    2582:	1f 93       	push	r17
    2584:	0f 93       	push	r16
    2586:	cb 56       	subi	r28, 0x6B	; 107
    2588:	dc 4f       	sbci	r29, 0xFC	; 252
    258a:	88 81       	ld	r24, Y
    258c:	c5 59       	subi	r28, 0x95	; 149
    258e:	d3 40       	sbci	r29, 0x03	; 3
    2590:	8f 93       	push	r24
    2592:	cc 56       	subi	r28, 0x6C	; 108
    2594:	dc 4f       	sbci	r29, 0xFC	; 252
    2596:	88 81       	ld	r24, Y
    2598:	c4 59       	subi	r28, 0x94	; 148
    259a:	d3 40       	sbci	r29, 0x03	; 3
    259c:	8f 93       	push	r24
    259e:	cd 56       	subi	r28, 0x6D	; 109
    25a0:	dc 4f       	sbci	r29, 0xFC	; 252
    25a2:	88 81       	ld	r24, Y
    25a4:	c3 59       	subi	r28, 0x93	; 147
    25a6:	d3 40       	sbci	r29, 0x03	; 3
    25a8:	8f 93       	push	r24
    25aa:	ce 56       	subi	r28, 0x6E	; 110
    25ac:	dc 4f       	sbci	r29, 0xFC	; 252
    25ae:	88 81       	ld	r24, Y
    25b0:	c2 59       	subi	r28, 0x92	; 146
    25b2:	d3 40       	sbci	r29, 0x03	; 3
    25b4:	8f 93       	push	r24
    25b6:	cf 56       	subi	r28, 0x6F	; 111
    25b8:	dc 4f       	sbci	r29, 0xFC	; 252
    25ba:	88 81       	ld	r24, Y
    25bc:	c1 59       	subi	r28, 0x91	; 145
    25be:	d3 40       	sbci	r29, 0x03	; 3
    25c0:	8f 93       	push	r24
    25c2:	c0 57       	subi	r28, 0x70	; 112
    25c4:	dc 4f       	sbci	r29, 0xFC	; 252
    25c6:	88 81       	ld	r24, Y
    25c8:	c0 59       	subi	r28, 0x90	; 144
    25ca:	d3 40       	sbci	r29, 0x03	; 3
    25cc:	8f 93       	push	r24
    25ce:	c1 57       	subi	r28, 0x71	; 113
    25d0:	dc 4f       	sbci	r29, 0xFC	; 252
    25d2:	88 81       	ld	r24, Y
    25d4:	cf 58       	subi	r28, 0x8F	; 143
    25d6:	d3 40       	sbci	r29, 0x03	; 3
    25d8:	8f 93       	push	r24
    25da:	c2 57       	subi	r28, 0x72	; 114
    25dc:	dc 4f       	sbci	r29, 0xFC	; 252
    25de:	88 81       	ld	r24, Y
    25e0:	ce 58       	subi	r28, 0x8E	; 142
    25e2:	d3 40       	sbci	r29, 0x03	; 3
    25e4:	8f 93       	push	r24
    25e6:	c3 57       	subi	r28, 0x73	; 115
    25e8:	dc 4f       	sbci	r29, 0xFC	; 252
    25ea:	88 81       	ld	r24, Y
    25ec:	cd 58       	subi	r28, 0x8D	; 141
    25ee:	d3 40       	sbci	r29, 0x03	; 3
    25f0:	8f 93       	push	r24
    25f2:	c4 57       	subi	r28, 0x74	; 116
    25f4:	dc 4f       	sbci	r29, 0xFC	; 252
    25f6:	88 81       	ld	r24, Y
    25f8:	cc 58       	subi	r28, 0x8C	; 140
    25fa:	d3 40       	sbci	r29, 0x03	; 3
    25fc:	8f 93       	push	r24
    25fe:	c5 57       	subi	r28, 0x75	; 117
    2600:	dc 4f       	sbci	r29, 0xFC	; 252
    2602:	88 81       	ld	r24, Y
    2604:	cb 58       	subi	r28, 0x8B	; 139
    2606:	d3 40       	sbci	r29, 0x03	; 3
    2608:	8f 93       	push	r24
    260a:	c6 57       	subi	r28, 0x76	; 118
    260c:	dc 4f       	sbci	r29, 0xFC	; 252
    260e:	88 81       	ld	r24, Y
    2610:	ca 58       	subi	r28, 0x8A	; 138
    2612:	d3 40       	sbci	r29, 0x03	; 3
    2614:	8f 93       	push	r24
    2616:	c7 57       	subi	r28, 0x77	; 119
    2618:	dc 4f       	sbci	r29, 0xFC	; 252
    261a:	88 81       	ld	r24, Y
    261c:	c9 58       	subi	r28, 0x89	; 137
    261e:	d3 40       	sbci	r29, 0x03	; 3
    2620:	8f 93       	push	r24
    2622:	c8 57       	subi	r28, 0x78	; 120
    2624:	dc 4f       	sbci	r29, 0xFC	; 252
    2626:	88 81       	ld	r24, Y
    2628:	c8 58       	subi	r28, 0x88	; 136
    262a:	d3 40       	sbci	r29, 0x03	; 3
    262c:	8f 93       	push	r24
    262e:	c9 57       	subi	r28, 0x79	; 121
    2630:	dc 4f       	sbci	r29, 0xFC	; 252
    2632:	88 81       	ld	r24, Y
    2634:	c7 58       	subi	r28, 0x87	; 135
    2636:	d3 40       	sbci	r29, 0x03	; 3
    2638:	8f 93       	push	r24
    263a:	ca 57       	subi	r28, 0x7A	; 122
    263c:	dc 4f       	sbci	r29, 0xFC	; 252
    263e:	88 81       	ld	r24, Y
    2640:	c6 58       	subi	r28, 0x86	; 134
    2642:	d3 40       	sbci	r29, 0x03	; 3
    2644:	8f 93       	push	r24
    2646:	1f 92       	push	r1
    2648:	df 92       	push	r13
    264a:	bf 92       	push	r11
    264c:	af 92       	push	r10
    264e:	ce 01       	movw	r24, r28
    2650:	8b 5d       	subi	r24, 0xDB	; 219
    2652:	9d 4f       	sbci	r25, 0xFD	; 253
    2654:	9f 93       	push	r25
    2656:	8f 93       	push	r24
    2658:	ff 92       	push	r15
    265a:	ef 92       	push	r14
    265c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	c7 01       	movw	r24, r14
    2666:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    266a:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    266c:	33 c4       	rjmp	.+2150   	; 0x2ed4 <report+0xde0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    266e:	ce 01       	movw	r24, r28
    2670:	86 5f       	subi	r24, 0xF6	; 246
    2672:	9e 4f       	sbci	r25, 0xFE	; 254
    2674:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			controller = pcmd[cstack].cobject + 31;
    2678:	84 e3       	ldi	r24, 0x34	; 52
    267a:	80 9f       	mul	r24, r16
    267c:	f0 01       	movw	r30, r0
    267e:	81 9f       	mul	r24, r17
    2680:	f0 0d       	add	r31, r0
    2682:	11 24       	eor	r1, r1
    2684:	e3 5f       	subi	r30, 0xF3	; 243
    2686:	f7 4d       	sbci	r31, 0xD7	; 215
    2688:	81 81       	ldd	r24, Z+1	; 0x01
    268a:	0f 2e       	mov	r0, r31
    268c:	ff e1       	ldi	r31, 0x1F	; 31
    268e:	ef 2e       	mov	r14, r31
    2690:	f0 2d       	mov	r31, r0
    2692:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2694:	be 01       	movw	r22, r28
    2696:	6c 5a       	subi	r22, 0xAC	; 172
    2698:	7c 4f       	sbci	r23, 0xFC	; 252
    269a:	8e 2d       	mov	r24, r14
    269c:	0e 94 ce 19 	call	0x339c	; 0x339c <get_MOTOR_ENCODER>
    26a0:	f8 2e       	mov	r15, r24
    26a2:	93 e6       	ldi	r25, 0x63	; 99
    26a4:	89 13       	cpse	r24, r25
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <report+0x5c2>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    26a8:	64 e2       	ldi	r22, 0x24	; 36
    26aa:	76 ea       	ldi	r23, 0xA6	; 166
    26ac:	86 e3       	ldi	r24, 0x36	; 54
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    26b4:	0f c4       	rjmp	.+2078   	; 0x2ed4 <report+0xde0>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    26b6:	cc 5a       	subi	r28, 0xAC	; 172
    26b8:	dc 4f       	sbci	r29, 0xFC	; 252
    26ba:	68 81       	ld	r22, Y
    26bc:	79 81       	ldd	r23, Y+1	; 0x01
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	c4 55       	subi	r28, 0x54	; 84
    26c4:	d3 40       	sbci	r29, 0x03	; 3
    26c6:	2b e1       	ldi	r18, 0x1B	; 27
    26c8:	31 e0       	ldi	r19, 0x01	; 1
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	0e 94 77 2e 	call	0x5cee	; 0x5cee <__divmodsi4>
    26d2:	f2 2e       	mov	r15, r18
    26d4:	d3 2e       	mov	r13, r19
    26d6:	c4 2e       	mov	r12, r20
    26d8:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    26da:	be 01       	movw	r22, r28
    26dc:	68 5a       	subi	r22, 0xA8	; 168
    26de:	7c 4f       	sbci	r23, 0xFC	; 252
    26e0:	8e 2d       	mov	r24, r14
    26e2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <get_MOTOR_SPEED>
    26e6:	83 36       	cpi	r24, 0x63	; 99
    26e8:	61 f4       	brne	.+24     	; 0x2702 <report+0x60e>
				encoderSpeed = 0x7FFFFFFF;
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	9f ef       	ldi	r25, 0xFF	; 255
    26ee:	af ef       	ldi	r26, 0xFF	; 255
    26f0:	bf e7       	ldi	r27, 0x7F	; 127
    26f2:	c8 5a       	subi	r28, 0xA8	; 168
    26f4:	dc 4f       	sbci	r29, 0xFC	; 252
    26f6:	88 83       	st	Y, r24
    26f8:	99 83       	std	Y+1, r25	; 0x01
    26fa:	aa 83       	std	Y+2, r26	; 0x02
    26fc:	bb 83       	std	Y+3, r27	; 0x03
    26fe:	c8 55       	subi	r28, 0x58	; 88
    2700:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2702:	c8 5a       	subi	r28, 0xA8	; 168
    2704:	dc 4f       	sbci	r29, 0xFC	; 252
    2706:	68 81       	ld	r22, Y
    2708:	79 81       	ldd	r23, Y+1	; 0x01
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	c8 55       	subi	r28, 0x58	; 88
    2710:	d3 40       	sbci	r29, 0x03	; 3
    2712:	2b e1       	ldi	r18, 0x1B	; 27
    2714:	31 e0       	ldi	r19, 0x01	; 1
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	0e 94 77 2e 	call	0x5cee	; 0x5cee <__divmodsi4>
    271e:	a2 2e       	mov	r10, r18
    2720:	93 2e       	mov	r9, r19
    2722:	84 2e       	mov	r8, r20
    2724:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2726:	be 01       	movw	r22, r28
    2728:	68 59       	subi	r22, 0x98	; 152
    272a:	7c 4f       	sbci	r23, 0xFC	; 252
    272c:	8e 2d       	mov	r24, r14
    272e:	0e 94 61 19 	call	0x32c2	; 0x32c2 <get_MOTOR_CURRENT>
    2732:	83 36       	cpi	r24, 0x63	; 99
    2734:	71 f4       	brne	.+28     	; 0x2752 <report+0x65e>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2736:	64 e4       	ldi	r22, 0x44	; 68
    2738:	76 ea       	ldi	r23, 0xA6	; 166
    273a:	86 e3       	ldi	r24, 0x36	; 54
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				motorCurrent = 0xFFFF;
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	9f ef       	ldi	r25, 0xFF	; 255
    2746:	c8 59       	subi	r28, 0x98	; 152
    2748:	dc 4f       	sbci	r29, 0xFC	; 252
    274a:	88 83       	st	Y, r24
    274c:	99 83       	std	Y+1, r25	; 0x01
    274e:	c8 56       	subi	r28, 0x68	; 104
    2750:	d3 40       	sbci	r29, 0x03	; 3
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    2752:	24 e3       	ldi	r18, 0x34	; 52
    2754:	20 9f       	mul	r18, r16
    2756:	c0 01       	movw	r24, r0
    2758:	21 9f       	mul	r18, r17
    275a:	90 0d       	add	r25, r0
    275c:	11 24       	eor	r1, r1
    275e:	9c 01       	movw	r18, r24
    2760:	28 5c       	subi	r18, 0xC8	; 200
    2762:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2764:	fc 01       	movw	r30, r24
    2766:	e3 5f       	subi	r30, 0xF3	; 243
    2768:	f7 4d       	sbci	r31, 0xD7	; 215
    276a:	81 81       	ldd	r24, Z+1	; 0x01
    276c:	3f 93       	push	r19
    276e:	2f 93       	push	r18
    2770:	c7 59       	subi	r28, 0x97	; 151
    2772:	dc 4f       	sbci	r29, 0xFC	; 252
    2774:	98 81       	ld	r25, Y
    2776:	c9 56       	subi	r28, 0x69	; 105
    2778:	d3 40       	sbci	r29, 0x03	; 3
    277a:	9f 93       	push	r25
    277c:	c8 59       	subi	r28, 0x98	; 152
    277e:	dc 4f       	sbci	r29, 0xFC	; 252
    2780:	98 81       	ld	r25, Y
    2782:	c8 56       	subi	r28, 0x68	; 104
    2784:	d3 40       	sbci	r29, 0x03	; 3
    2786:	9f 93       	push	r25
    2788:	7f 92       	push	r7
    278a:	8f 92       	push	r8
    278c:	9f 92       	push	r9
    278e:	af 92       	push	r10
    2790:	bf 92       	push	r11
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ff 92       	push	r15
    2798:	1f 92       	push	r1
    279a:	8f 93       	push	r24
    279c:	ce 01       	movw	r24, r28
    279e:	86 5f       	subi	r24, 0xF6	; 246
    27a0:	9e 4f       	sbci	r25, 0xFE	; 254
    27a2:	9f 93       	push	r25
    27a4:	8f 93       	push	r24
    27a6:	87 56       	subi	r24, 0x67	; 103
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	9f 93       	push	r25
    27ac:	8f 93       	push	r24
    27ae:	8e 01       	movw	r16, r28
    27b0:	0f 5f       	subi	r16, 0xFF	; 255
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	1f 93       	push	r17
    27b6:	0f 93       	push	r16
    27b8:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    27bc:	c8 01       	movw	r24, r16
    27be:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			break;
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27c6:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    27c8:	85 c3       	rjmp	.+1802   	; 0x2ed4 <report+0xde0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    27d0:	c0 5a       	subi	r28, 0xA0	; 160
    27d2:	dc 4f       	sbci	r29, 0xFC	; 252
    27d4:	68 83       	st	Y, r22
    27d6:	79 83       	std	Y+1, r23	; 0x01
    27d8:	8a 83       	std	Y+2, r24	; 0x02
    27da:	9b 83       	std	Y+3, r25	; 0x03
    27dc:	c0 56       	subi	r28, 0x60	; 96
    27de:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    27e6:	d6 2e       	mov	r13, r22
    27e8:	c7 2e       	mov	r12, r23
    27ea:	b8 2e       	mov	r11, r24
    27ec:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    27f4:	ca 56       	subi	r28, 0x6A	; 106
    27f6:	dc 4f       	sbci	r29, 0xFC	; 252
    27f8:	68 83       	st	Y, r22
    27fa:	c6 59       	subi	r28, 0x96	; 150
    27fc:	d3 40       	sbci	r29, 0x03	; 3
    27fe:	c9 56       	subi	r28, 0x69	; 105
    2800:	dc 4f       	sbci	r29, 0xFC	; 252
    2802:	78 83       	st	Y, r23
    2804:	c7 59       	subi	r28, 0x97	; 151
    2806:	d3 40       	sbci	r29, 0x03	; 3
    2808:	c8 56       	subi	r28, 0x68	; 104
    280a:	dc 4f       	sbci	r29, 0xFC	; 252
    280c:	88 83       	st	Y, r24
    280e:	c8 59       	subi	r28, 0x98	; 152
    2810:	d3 40       	sbci	r29, 0x03	; 3
    2812:	c7 56       	subi	r28, 0x67	; 103
    2814:	dc 4f       	sbci	r29, 0xFC	; 252
    2816:	98 83       	st	Y, r25
    2818:	c9 59       	subi	r28, 0x99	; 153
    281a:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    2822:	c6 56       	subi	r28, 0x66	; 102
    2824:	dc 4f       	sbci	r29, 0xFC	; 252
    2826:	68 83       	st	Y, r22
    2828:	ca 59       	subi	r28, 0x9A	; 154
    282a:	d3 40       	sbci	r29, 0x03	; 3
    282c:	c5 56       	subi	r28, 0x65	; 101
    282e:	dc 4f       	sbci	r29, 0xFC	; 252
    2830:	78 83       	st	Y, r23
    2832:	cb 59       	subi	r28, 0x9B	; 155
    2834:	d3 40       	sbci	r29, 0x03	; 3
    2836:	c4 56       	subi	r28, 0x64	; 100
    2838:	dc 4f       	sbci	r29, 0xFC	; 252
    283a:	88 83       	st	Y, r24
    283c:	cc 59       	subi	r28, 0x9C	; 156
    283e:	d3 40       	sbci	r29, 0x03	; 3
    2840:	c3 56       	subi	r28, 0x63	; 99
    2842:	dc 4f       	sbci	r29, 0xFC	; 252
    2844:	98 83       	st	Y, r25
    2846:	cd 59       	subi	r28, 0x9D	; 157
    2848:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    2850:	c2 56       	subi	r28, 0x62	; 98
    2852:	dc 4f       	sbci	r29, 0xFC	; 252
    2854:	68 83       	st	Y, r22
    2856:	ce 59       	subi	r28, 0x9E	; 158
    2858:	d3 40       	sbci	r29, 0x03	; 3
    285a:	c1 56       	subi	r28, 0x61	; 97
    285c:	dc 4f       	sbci	r29, 0xFC	; 252
    285e:	78 83       	st	Y, r23
    2860:	cf 59       	subi	r28, 0x9F	; 159
    2862:	d3 40       	sbci	r29, 0x03	; 3
    2864:	98 2e       	mov	r9, r24
    2866:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	0e 94 49 09 	call	0x1292	; 0x1292 <get_humidity>
    286e:	76 2e       	mov	r7, r22
    2870:	67 2e       	mov	r6, r23
    2872:	58 2e       	mov	r5, r24
    2874:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	0e 94 96 24 	call	0x492c	; 0x492c <get_temperature>
    287c:	c0 56       	subi	r28, 0x60	; 96
    287e:	dc 4f       	sbci	r29, 0xFC	; 252
    2880:	68 83       	st	Y, r22
    2882:	c0 5a       	subi	r28, 0xA0	; 160
    2884:	d3 40       	sbci	r29, 0x03	; 3
    2886:	cf 55       	subi	r28, 0x5F	; 95
    2888:	dc 4f       	sbci	r29, 0xFC	; 252
    288a:	78 83       	st	Y, r23
    288c:	c1 5a       	subi	r28, 0xA1	; 161
    288e:	d3 40       	sbci	r29, 0x03	; 3
    2890:	38 2e       	mov	r3, r24
    2892:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2894:	7e 01       	movw	r14, r28
    2896:	96 ef       	ldi	r25, 0xF6	; 246
    2898:	e9 1a       	sub	r14, r25
    289a:	9e ef       	ldi	r25, 0xFE	; 254
    289c:	f9 0a       	sbc	r15, r25
    289e:	c7 01       	movw	r24, r14
    28a0:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    28a4:	24 e3       	ldi	r18, 0x34	; 52
    28a6:	20 9f       	mul	r18, r16
    28a8:	c0 01       	movw	r24, r0
    28aa:	21 9f       	mul	r18, r17
    28ac:	90 0d       	add	r25, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	88 5c       	subi	r24, 0xC8	; 200
    28b2:	97 4d       	sbci	r25, 0xD7	; 215
    28b4:	9f 93       	push	r25
    28b6:	8f 93       	push	r24
    28b8:	2f 92       	push	r2
    28ba:	3f 92       	push	r3
    28bc:	cf 55       	subi	r28, 0x5F	; 95
    28be:	dc 4f       	sbci	r29, 0xFC	; 252
    28c0:	88 81       	ld	r24, Y
    28c2:	c1 5a       	subi	r28, 0xA1	; 161
    28c4:	d3 40       	sbci	r29, 0x03	; 3
    28c6:	8f 93       	push	r24
    28c8:	c0 56       	subi	r28, 0x60	; 96
    28ca:	dc 4f       	sbci	r29, 0xFC	; 252
    28cc:	98 81       	ld	r25, Y
    28ce:	c0 5a       	subi	r28, 0xA0	; 160
    28d0:	d3 40       	sbci	r29, 0x03	; 3
    28d2:	9f 93       	push	r25
    28d4:	4f 92       	push	r4
    28d6:	5f 92       	push	r5
    28d8:	6f 92       	push	r6
    28da:	7f 92       	push	r7
    28dc:	8f 92       	push	r8
    28de:	9f 92       	push	r9
    28e0:	c1 56       	subi	r28, 0x61	; 97
    28e2:	dc 4f       	sbci	r29, 0xFC	; 252
    28e4:	88 81       	ld	r24, Y
    28e6:	cf 59       	subi	r28, 0x9F	; 159
    28e8:	d3 40       	sbci	r29, 0x03	; 3
    28ea:	8f 93       	push	r24
    28ec:	c2 56       	subi	r28, 0x62	; 98
    28ee:	dc 4f       	sbci	r29, 0xFC	; 252
    28f0:	98 81       	ld	r25, Y
    28f2:	ce 59       	subi	r28, 0x9E	; 158
    28f4:	d3 40       	sbci	r29, 0x03	; 3
    28f6:	9f 93       	push	r25
    28f8:	c3 56       	subi	r28, 0x63	; 99
    28fa:	dc 4f       	sbci	r29, 0xFC	; 252
    28fc:	88 81       	ld	r24, Y
    28fe:	cd 59       	subi	r28, 0x9D	; 157
    2900:	d3 40       	sbci	r29, 0x03	; 3
    2902:	8f 93       	push	r24
    2904:	c4 56       	subi	r28, 0x64	; 100
    2906:	dc 4f       	sbci	r29, 0xFC	; 252
    2908:	98 81       	ld	r25, Y
    290a:	cc 59       	subi	r28, 0x9C	; 156
    290c:	d3 40       	sbci	r29, 0x03	; 3
    290e:	9f 93       	push	r25
    2910:	c5 56       	subi	r28, 0x65	; 101
    2912:	dc 4f       	sbci	r29, 0xFC	; 252
    2914:	88 81       	ld	r24, Y
    2916:	cb 59       	subi	r28, 0x9B	; 155
    2918:	d3 40       	sbci	r29, 0x03	; 3
    291a:	8f 93       	push	r24
    291c:	c6 56       	subi	r28, 0x66	; 102
    291e:	dc 4f       	sbci	r29, 0xFC	; 252
    2920:	98 81       	ld	r25, Y
    2922:	ca 59       	subi	r28, 0x9A	; 154
    2924:	d3 40       	sbci	r29, 0x03	; 3
    2926:	9f 93       	push	r25
    2928:	c7 56       	subi	r28, 0x67	; 103
    292a:	dc 4f       	sbci	r29, 0xFC	; 252
    292c:	88 81       	ld	r24, Y
    292e:	c9 59       	subi	r28, 0x99	; 153
    2930:	d3 40       	sbci	r29, 0x03	; 3
    2932:	8f 93       	push	r24
    2934:	c8 56       	subi	r28, 0x68	; 104
    2936:	dc 4f       	sbci	r29, 0xFC	; 252
    2938:	98 81       	ld	r25, Y
    293a:	c8 59       	subi	r28, 0x98	; 152
    293c:	d3 40       	sbci	r29, 0x03	; 3
    293e:	9f 93       	push	r25
    2940:	c9 56       	subi	r28, 0x69	; 105
    2942:	dc 4f       	sbci	r29, 0xFC	; 252
    2944:	88 81       	ld	r24, Y
    2946:	c7 59       	subi	r28, 0x97	; 151
    2948:	d3 40       	sbci	r29, 0x03	; 3
    294a:	8f 93       	push	r24
    294c:	ca 56       	subi	r28, 0x6A	; 106
    294e:	dc 4f       	sbci	r29, 0xFC	; 252
    2950:	98 81       	ld	r25, Y
    2952:	c6 59       	subi	r28, 0x96	; 150
    2954:	d3 40       	sbci	r29, 0x03	; 3
    2956:	9f 93       	push	r25
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	cd 59       	subi	r28, 0x9D	; 157
    2962:	dc 4f       	sbci	r29, 0xFC	; 252
    2964:	88 81       	ld	r24, Y
    2966:	c3 56       	subi	r28, 0x63	; 99
    2968:	d3 40       	sbci	r29, 0x03	; 3
    296a:	8f 93       	push	r24
    296c:	ce 59       	subi	r28, 0x9E	; 158
    296e:	dc 4f       	sbci	r29, 0xFC	; 252
    2970:	88 81       	ld	r24, Y
    2972:	c2 56       	subi	r28, 0x62	; 98
    2974:	d3 40       	sbci	r29, 0x03	; 3
    2976:	8f 93       	push	r24
    2978:	cf 59       	subi	r28, 0x9F	; 159
    297a:	dc 4f       	sbci	r29, 0xFC	; 252
    297c:	88 81       	ld	r24, Y
    297e:	c1 56       	subi	r28, 0x61	; 97
    2980:	d3 40       	sbci	r29, 0x03	; 3
    2982:	8f 93       	push	r24
    2984:	c0 5a       	subi	r28, 0xA0	; 160
    2986:	dc 4f       	sbci	r29, 0xFC	; 252
    2988:	88 81       	ld	r24, Y
    298a:	c0 56       	subi	r28, 0x60	; 96
    298c:	d3 40       	sbci	r29, 0x03	; 3
    298e:	8f 93       	push	r24
    2990:	ff 92       	push	r15
    2992:	ef 92       	push	r14
    2994:	ce 01       	movw	r24, r28
    2996:	82 5a       	subi	r24, 0xA2	; 162
    2998:	9e 4f       	sbci	r25, 0xFE	; 254
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	8e 01       	movw	r16, r28
    29a0:	0f 5f       	subi	r16, 0xFF	; 255
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	1f 93       	push	r17
    29a6:	0f 93       	push	r16
    29a8:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printLine(outbuf);
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	c8 01       	movw	r24, r16
    29b2:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	64 e6       	ldi	r22, 0x64	; 100
    29ba:	76 ea       	ldi	r23, 0xA6	; 166
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    29c2:	c0 5a       	subi	r28, 0xA0	; 160
    29c4:	dc 4f       	sbci	r29, 0xFC	; 252
    29c6:	f8 80       	ld	r15, Y
    29c8:	c0 56       	subi	r28, 0x60	; 96
    29ca:	d3 40       	sbci	r29, 0x03	; 3
    29cc:	cf 59       	subi	r28, 0x9F	; 159
    29ce:	dc 4f       	sbci	r29, 0xFC	; 252
    29d0:	e8 80       	ld	r14, Y
    29d2:	c1 56       	subi	r28, 0x61	; 97
    29d4:	d3 40       	sbci	r29, 0x03	; 3
    29d6:	ce 59       	subi	r28, 0x9E	; 158
    29d8:	dc 4f       	sbci	r29, 0xFC	; 252
    29da:	98 80       	ld	r9, Y
    29dc:	c2 56       	subi	r28, 0x62	; 98
    29de:	d3 40       	sbci	r29, 0x03	; 3
    29e0:	cd 59       	subi	r28, 0x9D	; 157
    29e2:	dc 4f       	sbci	r29, 0xFC	; 252
    29e4:	88 80       	ld	r8, Y
    29e6:	c3 56       	subi	r28, 0x63	; 99
    29e8:	d3 40       	sbci	r29, 0x03	; 3
    29ea:	26 e6       	ldi	r18, 0x66	; 102
    29ec:	36 e6       	ldi	r19, 0x66	; 102
    29ee:	46 ee       	ldi	r20, 0xE6	; 230
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	6f 2d       	mov	r22, r15
    29f4:	7e 2d       	mov	r23, r14
    29f6:	89 2d       	mov	r24, r9
    29f8:	98 2d       	mov	r25, r8
    29fa:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	52 e4       	ldi	r21, 0x42	; 66
    2a0e:	0e 94 df 28 	call	0x51be	; 0x51be <__addsf3>
    2a12:	9f 93       	push	r25
    2a14:	8f 93       	push	r24
    2a16:	7f 93       	push	r23
    2a18:	6f 93       	push	r22
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	84 e7       	ldi	r24, 0x74	; 116
    2a24:	96 ea       	ldi	r25, 0xA6	; 166
    2a26:	9f 93       	push	r25
    2a28:	8f 93       	push	r24
    2a2a:	1f 93       	push	r17
    2a2c:	0f 93       	push	r16
    2a2e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2a32:	42 e0       	ldi	r20, 0x02	; 2
    2a34:	b8 01       	movw	r22, r16
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			break;
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2a40:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2a42:	48 c2       	rjmp	.+1168   	; 0x2ed4 <report+0xde0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2a44:	ae 01       	movw	r20, r28
    2a46:	4e 58       	subi	r20, 0x8E	; 142
    2a48:	5c 4f       	sbci	r21, 0xFC	; 252
    2a4a:	be 01       	movw	r22, r28
    2a4c:	62 59       	subi	r22, 0x92	; 146
    2a4e:	7c 4f       	sbci	r23, 0xFC	; 252
    2a50:	ce 01       	movw	r24, r28
    2a52:	86 59       	subi	r24, 0x96	; 150
    2a54:	9c 4f       	sbci	r25, 0xFC	; 252
    2a56:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <get_orientation>
			get_time(currenttime);
    2a5a:	7e 01       	movw	r14, r28
    2a5c:	96 ef       	ldi	r25, 0xF6	; 246
    2a5e:	e9 1a       	sub	r14, r25
    2a60:	9e ef       	ldi	r25, 0xFE	; 254
    2a62:	f9 0a       	sbc	r15, r25
    2a64:	c7 01       	movw	r24, r14
    2a66:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2a6a:	24 e3       	ldi	r18, 0x34	; 52
    2a6c:	20 9f       	mul	r18, r16
    2a6e:	c0 01       	movw	r24, r0
    2a70:	21 9f       	mul	r18, r17
    2a72:	90 0d       	add	r25, r0
    2a74:	11 24       	eor	r1, r1
    2a76:	88 5c       	subi	r24, 0xC8	; 200
    2a78:	97 4d       	sbci	r25, 0xD7	; 215
    2a7a:	9f 93       	push	r25
    2a7c:	8f 93       	push	r24
    2a7e:	cb 58       	subi	r28, 0x8B	; 139
    2a80:	dc 4f       	sbci	r29, 0xFC	; 252
    2a82:	88 81       	ld	r24, Y
    2a84:	c5 57       	subi	r28, 0x75	; 117
    2a86:	d3 40       	sbci	r29, 0x03	; 3
    2a88:	8f 93       	push	r24
    2a8a:	cc 58       	subi	r28, 0x8C	; 140
    2a8c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a8e:	88 81       	ld	r24, Y
    2a90:	c4 57       	subi	r28, 0x74	; 116
    2a92:	d3 40       	sbci	r29, 0x03	; 3
    2a94:	8f 93       	push	r24
    2a96:	cd 58       	subi	r28, 0x8D	; 141
    2a98:	dc 4f       	sbci	r29, 0xFC	; 252
    2a9a:	88 81       	ld	r24, Y
    2a9c:	c3 57       	subi	r28, 0x73	; 115
    2a9e:	d3 40       	sbci	r29, 0x03	; 3
    2aa0:	8f 93       	push	r24
    2aa2:	ce 58       	subi	r28, 0x8E	; 142
    2aa4:	dc 4f       	sbci	r29, 0xFC	; 252
    2aa6:	88 81       	ld	r24, Y
    2aa8:	c2 57       	subi	r28, 0x72	; 114
    2aaa:	d3 40       	sbci	r29, 0x03	; 3
    2aac:	8f 93       	push	r24
    2aae:	cf 58       	subi	r28, 0x8F	; 143
    2ab0:	dc 4f       	sbci	r29, 0xFC	; 252
    2ab2:	88 81       	ld	r24, Y
    2ab4:	c1 57       	subi	r28, 0x71	; 113
    2ab6:	d3 40       	sbci	r29, 0x03	; 3
    2ab8:	8f 93       	push	r24
    2aba:	c0 59       	subi	r28, 0x90	; 144
    2abc:	dc 4f       	sbci	r29, 0xFC	; 252
    2abe:	88 81       	ld	r24, Y
    2ac0:	c0 57       	subi	r28, 0x70	; 112
    2ac2:	d3 40       	sbci	r29, 0x03	; 3
    2ac4:	8f 93       	push	r24
    2ac6:	c1 59       	subi	r28, 0x91	; 145
    2ac8:	dc 4f       	sbci	r29, 0xFC	; 252
    2aca:	88 81       	ld	r24, Y
    2acc:	cf 56       	subi	r28, 0x6F	; 111
    2ace:	d3 40       	sbci	r29, 0x03	; 3
    2ad0:	8f 93       	push	r24
    2ad2:	c2 59       	subi	r28, 0x92	; 146
    2ad4:	dc 4f       	sbci	r29, 0xFC	; 252
    2ad6:	88 81       	ld	r24, Y
    2ad8:	ce 56       	subi	r28, 0x6E	; 110
    2ada:	d3 40       	sbci	r29, 0x03	; 3
    2adc:	8f 93       	push	r24
    2ade:	c3 59       	subi	r28, 0x93	; 147
    2ae0:	dc 4f       	sbci	r29, 0xFC	; 252
    2ae2:	88 81       	ld	r24, Y
    2ae4:	cd 56       	subi	r28, 0x6D	; 109
    2ae6:	d3 40       	sbci	r29, 0x03	; 3
    2ae8:	8f 93       	push	r24
    2aea:	c4 59       	subi	r28, 0x94	; 148
    2aec:	dc 4f       	sbci	r29, 0xFC	; 252
    2aee:	88 81       	ld	r24, Y
    2af0:	cc 56       	subi	r28, 0x6C	; 108
    2af2:	d3 40       	sbci	r29, 0x03	; 3
    2af4:	8f 93       	push	r24
    2af6:	c5 59       	subi	r28, 0x95	; 149
    2af8:	dc 4f       	sbci	r29, 0xFC	; 252
    2afa:	88 81       	ld	r24, Y
    2afc:	cb 56       	subi	r28, 0x6B	; 107
    2afe:	d3 40       	sbci	r29, 0x03	; 3
    2b00:	8f 93       	push	r24
    2b02:	c6 59       	subi	r28, 0x96	; 150
    2b04:	dc 4f       	sbci	r29, 0xFC	; 252
    2b06:	88 81       	ld	r24, Y
    2b08:	ca 56       	subi	r28, 0x6A	; 106
    2b0a:	d3 40       	sbci	r29, 0x03	; 3
    2b0c:	8f 93       	push	r24
    2b0e:	ff 92       	push	r15
    2b10:	ef 92       	push	r14
    2b12:	ce 01       	movw	r24, r28
    2b14:	86 58       	subi	r24, 0x86	; 134
    2b16:	9d 4f       	sbci	r25, 0xFD	; 253
    2b18:	9f 93       	push	r25
    2b1a:	8f 93       	push	r24
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	0f 5f       	subi	r16, 0xFF	; 255
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	1f 93       	push	r17
    2b24:	0f 93       	push	r16
    2b26:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printLine(outbuf);
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Orientation", 1);
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	6a e8       	ldi	r22, 0x8A	; 138
    2b34:	76 ea       	ldi	r23, 0xA6	; 166
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2b3c:	cb 58       	subi	r28, 0x8B	; 139
    2b3e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b40:	88 81       	ld	r24, Y
    2b42:	c5 57       	subi	r28, 0x75	; 117
    2b44:	d3 40       	sbci	r29, 0x03	; 3
    2b46:	8f 93       	push	r24
    2b48:	cc 58       	subi	r28, 0x8C	; 140
    2b4a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b4c:	88 81       	ld	r24, Y
    2b4e:	c4 57       	subi	r28, 0x74	; 116
    2b50:	d3 40       	sbci	r29, 0x03	; 3
    2b52:	8f 93       	push	r24
    2b54:	cd 58       	subi	r28, 0x8D	; 141
    2b56:	dc 4f       	sbci	r29, 0xFC	; 252
    2b58:	88 81       	ld	r24, Y
    2b5a:	c3 57       	subi	r28, 0x73	; 115
    2b5c:	d3 40       	sbci	r29, 0x03	; 3
    2b5e:	8f 93       	push	r24
    2b60:	ce 58       	subi	r28, 0x8E	; 142
    2b62:	dc 4f       	sbci	r29, 0xFC	; 252
    2b64:	88 81       	ld	r24, Y
    2b66:	c2 57       	subi	r28, 0x72	; 114
    2b68:	d3 40       	sbci	r29, 0x03	; 3
    2b6a:	8f 93       	push	r24
    2b6c:	cf 58       	subi	r28, 0x8F	; 143
    2b6e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b70:	88 81       	ld	r24, Y
    2b72:	c1 57       	subi	r28, 0x71	; 113
    2b74:	d3 40       	sbci	r29, 0x03	; 3
    2b76:	8f 93       	push	r24
    2b78:	c0 59       	subi	r28, 0x90	; 144
    2b7a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b7c:	88 81       	ld	r24, Y
    2b7e:	c0 57       	subi	r28, 0x70	; 112
    2b80:	d3 40       	sbci	r29, 0x03	; 3
    2b82:	8f 93       	push	r24
    2b84:	c1 59       	subi	r28, 0x91	; 145
    2b86:	dc 4f       	sbci	r29, 0xFC	; 252
    2b88:	88 81       	ld	r24, Y
    2b8a:	cf 56       	subi	r28, 0x6F	; 111
    2b8c:	d3 40       	sbci	r29, 0x03	; 3
    2b8e:	8f 93       	push	r24
    2b90:	c2 59       	subi	r28, 0x92	; 146
    2b92:	dc 4f       	sbci	r29, 0xFC	; 252
    2b94:	88 81       	ld	r24, Y
    2b96:	ce 56       	subi	r28, 0x6E	; 110
    2b98:	d3 40       	sbci	r29, 0x03	; 3
    2b9a:	8f 93       	push	r24
    2b9c:	c3 59       	subi	r28, 0x93	; 147
    2b9e:	dc 4f       	sbci	r29, 0xFC	; 252
    2ba0:	88 81       	ld	r24, Y
    2ba2:	cd 56       	subi	r28, 0x6D	; 109
    2ba4:	d3 40       	sbci	r29, 0x03	; 3
    2ba6:	8f 93       	push	r24
    2ba8:	c4 59       	subi	r28, 0x94	; 148
    2baa:	dc 4f       	sbci	r29, 0xFC	; 252
    2bac:	88 81       	ld	r24, Y
    2bae:	cc 56       	subi	r28, 0x6C	; 108
    2bb0:	d3 40       	sbci	r29, 0x03	; 3
    2bb2:	8f 93       	push	r24
    2bb4:	c5 59       	subi	r28, 0x95	; 149
    2bb6:	dc 4f       	sbci	r29, 0xFC	; 252
    2bb8:	88 81       	ld	r24, Y
    2bba:	cb 56       	subi	r28, 0x6B	; 107
    2bbc:	d3 40       	sbci	r29, 0x03	; 3
    2bbe:	8f 93       	push	r24
    2bc0:	c6 59       	subi	r28, 0x96	; 150
    2bc2:	dc 4f       	sbci	r29, 0xFC	; 252
    2bc4:	88 81       	ld	r24, Y
    2bc6:	ca 56       	subi	r28, 0x6A	; 106
    2bc8:	d3 40       	sbci	r29, 0x03	; 3
    2bca:	8f 93       	push	r24
    2bcc:	ce 01       	movw	r24, r28
    2bce:	8a 56       	subi	r24, 0x6A	; 106
    2bd0:	9d 4f       	sbci	r25, 0xFD	; 253
    2bd2:	9f 93       	push	r25
    2bd4:	8f 93       	push	r24
    2bd6:	1f 93       	push	r17
    2bd8:	0f 93       	push	r16
    2bda:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	42 e0       	ldi	r20, 0x02	; 2
    2be4:	b8 01       	movw	r22, r16
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2bec:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2bee:	72 c1       	rjmp	.+740    	; 0x2ed4 <report+0xde0>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2bf0:	7e 01       	movw	r14, r28
    2bf2:	96 ef       	ldi	r25, 0xF6	; 246
    2bf4:	e9 1a       	sub	r14, r25
    2bf6:	9e ef       	ldi	r25, 0xFE	; 254
    2bf8:	f9 0a       	sbc	r15, r25
    2bfa:	c7 01       	movw	r24, r14
    2bfc:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2c00:	9e 01       	movw	r18, r28
    2c02:	23 5a       	subi	r18, 0xA3	; 163
    2c04:	3e 4f       	sbci	r19, 0xFE	; 254
    2c06:	ae 01       	movw	r20, r28
    2c08:	44 5a       	subi	r20, 0xA4	; 164
    2c0a:	5e 4f       	sbci	r21, 0xFE	; 254
    2c0c:	be 01       	movw	r22, r28
    2c0e:	65 5a       	subi	r22, 0xA5	; 165
    2c10:	7e 4f       	sbci	r23, 0xFE	; 254
    2c12:	ce 01       	movw	r24, r28
    2c14:	86 5a       	subi	r24, 0xA6	; 166
    2c16:	9e 4f       	sbci	r25, 0xFE	; 254
    2c18:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2c1c:	24 e3       	ldi	r18, 0x34	; 52
    2c1e:	20 9f       	mul	r18, r16
    2c20:	c0 01       	movw	r24, r0
    2c22:	21 9f       	mul	r18, r17
    2c24:	90 0d       	add	r25, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	88 5c       	subi	r24, 0xC8	; 200
    2c2a:	97 4d       	sbci	r25, 0xD7	; 215
    2c2c:	9f 93       	push	r25
    2c2e:	8f 93       	push	r24
    2c30:	c3 5a       	subi	r28, 0xA3	; 163
    2c32:	de 4f       	sbci	r29, 0xFE	; 254
    2c34:	88 81       	ld	r24, Y
    2c36:	cd 55       	subi	r28, 0x5D	; 93
    2c38:	d1 40       	sbci	r29, 0x01	; 1
    2c3a:	1f 92       	push	r1
    2c3c:	8f 93       	push	r24
    2c3e:	c4 5a       	subi	r28, 0xA4	; 164
    2c40:	de 4f       	sbci	r29, 0xFE	; 254
    2c42:	88 81       	ld	r24, Y
    2c44:	cc 55       	subi	r28, 0x5C	; 92
    2c46:	d1 40       	sbci	r29, 0x01	; 1
    2c48:	1f 92       	push	r1
    2c4a:	8f 93       	push	r24
    2c4c:	c5 5a       	subi	r28, 0xA5	; 165
    2c4e:	de 4f       	sbci	r29, 0xFE	; 254
    2c50:	88 81       	ld	r24, Y
    2c52:	cb 55       	subi	r28, 0x5B	; 91
    2c54:	d1 40       	sbci	r29, 0x01	; 1
    2c56:	1f 92       	push	r1
    2c58:	8f 93       	push	r24
    2c5a:	c6 5a       	subi	r28, 0xA6	; 166
    2c5c:	de 4f       	sbci	r29, 0xFE	; 254
    2c5e:	88 81       	ld	r24, Y
    2c60:	ca 55       	subi	r28, 0x5A	; 90
    2c62:	d1 40       	sbci	r29, 0x01	; 1
    2c64:	1f 92       	push	r1
    2c66:	8f 93       	push	r24
    2c68:	ff 92       	push	r15
    2c6a:	ef 92       	push	r14
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	88 55       	subi	r24, 0x58	; 88
    2c70:	9d 4f       	sbci	r25, 0xFD	; 253
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
    2c76:	8e 01       	movw	r16, r28
    2c78:	0f 5f       	subi	r16, 0xFF	; 255
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	1f 93       	push	r17
    2c7e:	0f 93       	push	r16
    2c80:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printLine(outbuf);
    2c84:	c8 01       	movw	r24, r16
    2c86:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2c8a:	c4 5a       	subi	r28, 0xA4	; 164
    2c8c:	de 4f       	sbci	r29, 0xFE	; 254
    2c8e:	88 81       	ld	r24, Y
    2c90:	cc 55       	subi	r28, 0x5C	; 92
    2c92:	d1 40       	sbci	r29, 0x01	; 1
    2c94:	1f 92       	push	r1
    2c96:	8f 93       	push	r24
    2c98:	c5 5a       	subi	r28, 0xA5	; 165
    2c9a:	de 4f       	sbci	r29, 0xFE	; 254
    2c9c:	88 81       	ld	r24, Y
    2c9e:	cb 55       	subi	r28, 0x5B	; 91
    2ca0:	d1 40       	sbci	r29, 0x01	; 1
    2ca2:	1f 92       	push	r1
    2ca4:	8f 93       	push	r24
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	8b 52       	subi	r24, 0x2B	; 43
    2caa:	9d 4f       	sbci	r25, 0xFD	; 253
    2cac:	9f 93       	push	r25
    2cae:	8f 93       	push	r24
    2cb0:	1f 93       	push	r17
    2cb2:	0f 93       	push	r16
    2cb4:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	b8 01       	movw	r22, r16
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2cc2:	c3 5a       	subi	r28, 0xA3	; 163
    2cc4:	de 4f       	sbci	r29, 0xFE	; 254
    2cc6:	88 81       	ld	r24, Y
    2cc8:	cd 55       	subi	r28, 0x5D	; 93
    2cca:	d1 40       	sbci	r29, 0x01	; 1
    2ccc:	1f 92       	push	r1
    2cce:	8f 93       	push	r24
    2cd0:	c6 5a       	subi	r28, 0xA6	; 166
    2cd2:	de 4f       	sbci	r29, 0xFE	; 254
    2cd4:	88 81       	ld	r24, Y
    2cd6:	ca 55       	subi	r28, 0x5A	; 90
    2cd8:	d1 40       	sbci	r29, 0x01	; 1
    2cda:	1f 92       	push	r1
    2cdc:	8f 93       	push	r24
    2cde:	ce 01       	movw	r24, r28
    2ce0:	88 51       	subi	r24, 0x18	; 24
    2ce2:	9d 4f       	sbci	r25, 0xFD	; 253
    2ce4:	9f 93       	push	r25
    2ce6:	8f 93       	push	r24
    2ce8:	1f 93       	push	r17
    2cea:	0f 93       	push	r16
    2cec:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	42 e0       	ldi	r20, 0x02	; 2
    2cf6:	b8 01       	movw	r22, r16
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2cfe:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2d00:	e9 c0       	rjmp	.+466    	; 0x2ed4 <report+0xde0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2d02:	7e 01       	movw	r14, r28
    2d04:	96 ef       	ldi	r25, 0xF6	; 246
    2d06:	e9 1a       	sub	r14, r25
    2d08:	9e ef       	ldi	r25, 0xFE	; 254
    2d0a:	f9 0a       	sbc	r15, r25
    2d0c:	c7 01       	movw	r24, r14
    2d0e:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			get_SETTIME(lastsettime);
    2d12:	6e 01       	movw	r12, r28
    2d14:	82 ee       	ldi	r24, 0xE2	; 226
    2d16:	c8 1a       	sub	r12, r24
    2d18:	8e ef       	ldi	r24, 0xFE	; 254
    2d1a:	d8 0a       	sbc	r13, r24
    2d1c:	c6 01       	movw	r24, r12
    2d1e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <get_SETTIME>
			get_BOOTTIME(boottime);
    2d22:	5e 01       	movw	r10, r28
    2d24:	9e ec       	ldi	r25, 0xCE	; 206
    2d26:	a9 1a       	sub	r10, r25
    2d28:	9e ef       	ldi	r25, 0xFE	; 254
    2d2a:	b9 0a       	sbc	r11, r25
    2d2c:	c5 01       	movw	r24, r10
    2d2e:	0e 94 19 08 	call	0x1032	; 0x1032 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2d32:	24 e3       	ldi	r18, 0x34	; 52
    2d34:	20 9f       	mul	r18, r16
    2d36:	c0 01       	movw	r24, r0
    2d38:	21 9f       	mul	r18, r17
    2d3a:	90 0d       	add	r25, r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	88 5c       	subi	r24, 0xC8	; 200
    2d40:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2d42:	9f 93       	push	r25
    2d44:	8f 93       	push	r24
    2d46:	bf 92       	push	r11
    2d48:	af 92       	push	r10
    2d4a:	df 92       	push	r13
    2d4c:	cf 92       	push	r12
    2d4e:	ff 92       	push	r15
    2d50:	ef 92       	push	r14
    2d52:	ce 01       	movw	r24, r28
    2d54:	85 50       	subi	r24, 0x05	; 5
    2d56:	9d 4f       	sbci	r25, 0xFD	; 253
    2d58:	9f 93       	push	r25
    2d5a:	8f 93       	push	r24
    2d5c:	8e 01       	movw	r16, r28
    2d5e:	0f 5f       	subi	r16, 0xFF	; 255
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	1f 93       	push	r17
    2d64:	0f 93       	push	r16
    2d66:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2d6a:	c8 01       	movw	r24, r16
    2d6c:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "Time", 1);
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	66 e9       	ldi	r22, 0x96	; 150
    2d74:	76 ea       	ldi	r23, 0xA6	; 166
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2d7c:	b7 01       	movw	r22, r14
    2d7e:	65 5f       	subi	r22, 0xF5	; 245
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	42 e0       	ldi	r20, 0x02	; 2
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			break;
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2d8e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2d90:	a1 c0       	rjmp	.+322    	; 0x2ed4 <report+0xde0>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	0e 94 26 0a 	call	0x144c	; 0x144c <read_ionpump>
    2d98:	d6 2e       	mov	r13, r22
    2d9a:	c7 2e       	mov	r12, r23
    2d9c:	b8 2e       	mov	r11, r24
    2d9e:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	0e 94 26 0a 	call	0x144c	; 0x144c <read_ionpump>
    2da6:	96 2e       	mov	r9, r22
    2da8:	87 2e       	mov	r8, r23
    2daa:	78 2e       	mov	r7, r24
    2dac:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2dae:	7e 01       	movw	r14, r28
    2db0:	96 ef       	ldi	r25, 0xF6	; 246
    2db2:	e9 1a       	sub	r14, r25
    2db4:	9e ef       	ldi	r25, 0xFE	; 254
    2db6:	f9 0a       	sbc	r15, r25
    2db8:	c7 01       	movw	r24, r14
    2dba:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2dbe:	24 e3       	ldi	r18, 0x34	; 52
    2dc0:	20 9f       	mul	r18, r16
    2dc2:	c0 01       	movw	r24, r0
    2dc4:	21 9f       	mul	r18, r17
    2dc6:	90 0d       	add	r25, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	88 5c       	subi	r24, 0xC8	; 200
    2dcc:	97 4d       	sbci	r25, 0xD7	; 215
    2dce:	9f 93       	push	r25
    2dd0:	8f 93       	push	r24
    2dd2:	6f 92       	push	r6
    2dd4:	7f 92       	push	r7
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ff 92       	push	r15
    2de4:	ef 92       	push	r14
    2de6:	ce 01       	movw	r24, r28
    2de8:	8c 5e       	subi	r24, 0xEC	; 236
    2dea:	9c 4f       	sbci	r25, 0xFC	; 252
    2dec:	9f 93       	push	r25
    2dee:	8f 93       	push	r24
    2df0:	8e 01       	movw	r16, r28
    2df2:	0f 5f       	subi	r16, 0xFF	; 255
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	1f 93       	push	r17
    2df8:	0f 93       	push	r16
    2dfa:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printLine(outbuf);
    2dfe:	c8 01       	movw	r24, r16
    2e00:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	6b e9       	ldi	r22, 0x9B	; 155
    2e08:	76 ea       	ldi	r23, 0xA6	; 166
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ce 01       	movw	r24, r28
    2e22:	87 5c       	subi	r24, 0xC7	; 199
    2e24:	9c 4f       	sbci	r25, 0xFC	; 252
    2e26:	9f 93       	push	r25
    2e28:	8f 93       	push	r24
    2e2a:	1f 93       	push	r17
    2e2c:	0f 93       	push	r16
    2e2e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2e32:	42 e0       	ldi	r20, 0x02	; 2
    2e34:	b8 01       	movw	r22, r16
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			break;
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e40:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2e42:	48 c0       	rjmp	.+144    	; 0x2ed4 <report+0xde0>

		case 'V':					// Version
			get_VERSION(version);
    2e44:	6e 01       	movw	r12, r28
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	c9 0e       	add	r12, r25
    2e4a:	d1 1c       	adc	r13, r1
    2e4c:	c6 01       	movw	r24, r12
    2e4e:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
			get_time(currenttime);
    2e52:	7e 01       	movw	r14, r28
    2e54:	86 ef       	ldi	r24, 0xF6	; 246
    2e56:	e8 1a       	sub	r14, r24
    2e58:	8e ef       	ldi	r24, 0xFE	; 254
    2e5a:	f8 0a       	sbc	r15, r24
    2e5c:	c7 01       	movw	r24, r14
    2e5e:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2e62:	24 e3       	ldi	r18, 0x34	; 52
    2e64:	20 9f       	mul	r18, r16
    2e66:	c0 01       	movw	r24, r0
    2e68:	21 9f       	mul	r18, r17
    2e6a:	90 0d       	add	r25, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	88 5c       	subi	r24, 0xC8	; 200
    2e70:	97 4d       	sbci	r25, 0xD7	; 215
    2e72:	9f 93       	push	r25
    2e74:	8f 93       	push	r24
    2e76:	df 92       	push	r13
    2e78:	cf 92       	push	r12
    2e7a:	ff 92       	push	r15
    2e7c:	ef 92       	push	r14
    2e7e:	ce 01       	movw	r24, r28
    2e80:	8a 5b       	subi	r24, 0xBA	; 186
    2e82:	9c 4f       	sbci	r25, 0xFC	; 252
    2e84:	9f 93       	push	r25
    2e86:	8f 93       	push	r24
    2e88:	8e 01       	movw	r16, r28
    2e8a:	0f 5f       	subi	r16, 0xFF	; 255
    2e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8e:	1f 93       	push	r17
    2e90:	0f 93       	push	r16
    2e92:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printLine(outbuf);
    2e96:	c8 01       	movw	r24, r16
    2e98:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2e9c:	41 e0       	ldi	r20, 0x01	; 1
    2e9e:	68 e9       	ldi	r22, 0x98	; 152
    2ea0:	74 ea       	ldi	r23, 0xA4	; 164
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			get_VERSION(outbuf);
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	0e 94 20 08 	call	0x1040	; 0x1040 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2eae:	42 e0       	ldi	r20, 0x02	; 2
    2eb0:	b8 01       	movw	r22, r16
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <writestr_OLED>
			break;
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2ebc:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <report+0xde0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2ec0:	6b ea       	ldi	r22, 0xAB	; 171
    2ec2:	76 ea       	ldi	r23, 0xA6	; 166
    2ec4:	8a ec       	ldi	r24, 0xCA	; 202
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    2ecc:	0f 2e       	mov	r0, r31
    2ece:	f3 e6       	ldi	r31, 0x63	; 99
    2ed0:	ff 2e       	mov	r15, r31
    2ed2:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2ed4:	8f 2d       	mov	r24, r15
    2ed6:	cf 55       	subi	r28, 0x5F	; 95
    2ed8:	dc 4f       	sbci	r29, 0xFC	; 252
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	7f 90       	pop	r7
    2ef8:	6f 90       	pop	r6
    2efa:	5f 90       	pop	r5
    2efc:	4f 90       	pop	r4
    2efe:	3f 90       	pop	r3
    2f00:	2f 90       	pop	r2
    2f02:	08 95       	ret

00002f04 <crc16>:

-------------*/

	return(NOERROR);

}
    2f04:	dc 01       	movw	r26, r24
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	1b c0       	rjmp	.+54     	; 0x2f46 <crc16+0x42>
    2f10:	fd 01       	movw	r30, r26
    2f12:	e4 0f       	add	r30, r20
    2f14:	f5 1f       	adc	r31, r21
    2f16:	20 81       	ld	r18, Z
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	32 2f       	mov	r19, r18
    2f1c:	22 27       	eor	r18, r18
    2f1e:	82 27       	eor	r24, r18
    2f20:	93 27       	eor	r25, r19
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	0c c0       	rjmp	.+24     	; 0x2f3e <crc16+0x3a>
    2f26:	99 23       	and	r25, r25
    2f28:	3c f4       	brge	.+14     	; 0x2f38 <crc16+0x34>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	31 e2       	ldi	r19, 0x21	; 33
    2f30:	83 27       	eor	r24, r19
    2f32:	30 e1       	ldi	r19, 0x10	; 16
    2f34:	93 27       	eor	r25, r19
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <crc16+0x38>
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	2f 5f       	subi	r18, 0xFF	; 255
    2f3e:	28 30       	cpi	r18, 0x08	; 8
    2f40:	90 f3       	brcs	.-28     	; 0x2f26 <crc16+0x22>
    2f42:	4f 5f       	subi	r20, 0xFF	; 255
    2f44:	5f 4f       	sbci	r21, 0xFF	; 255
    2f46:	46 17       	cp	r20, r22
    2f48:	57 07       	cpc	r21, r23
    2f4a:	10 f3       	brcs	.-60     	; 0x2f10 <crc16+0xc>
    2f4c:	08 95       	ret

00002f4e <get_FRAM_ENCSAVETIME>:
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	c6 57       	subi	r28, 0x76	; 118
    2f5e:	d1 09       	sbc	r29, r1
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	7c 01       	movw	r14, r24
    2f66:	86 e2       	ldi	r24, 0x26	; 38
    2f68:	e7 eb       	ldi	r30, 0xB7	; 183
    2f6a:	f8 ea       	ldi	r31, 0xA8	; 168
    2f6c:	de 01       	movw	r26, r28
    2f6e:	af 5a       	subi	r26, 0xAF	; 175
    2f70:	bf 4f       	sbci	r27, 0xFF	; 255
    2f72:	01 90       	ld	r0, Z+
    2f74:	0d 92       	st	X+, r0
    2f76:	8a 95       	dec	r24
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <get_FRAM_ENCSAVETIME+0x24>
    2f7a:	24 e1       	ldi	r18, 0x14	; 20
    2f7c:	a7 01       	movw	r20, r14
    2f7e:	60 e2       	ldi	r22, 0x20	; 32
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	80 e5       	ldi	r24, 0x50	; 80
    2f84:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    2f88:	18 2f       	mov	r17, r24
    2f8a:	83 36       	cpi	r24, 0x63	; 99
    2f8c:	b1 f4       	brne	.+44     	; 0x2fba <get_FRAM_ENCSAVETIME+0x6c>
    2f8e:	ce 01       	movw	r24, r28
    2f90:	8f 5a       	subi	r24, 0xAF	; 175
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	80 55       	subi	r24, 0x50	; 80
    2f9a:	91 09       	sbc	r25, r1
    2f9c:	7c 01       	movw	r14, r24
    2f9e:	9f 93       	push	r25
    2fa0:	8f 93       	push	r24
    2fa2:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    2fa6:	b7 01       	movw	r22, r14
    2fa8:	86 e3       	ldi	r24, 0x36	; 54
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <get_FRAM_ENCSAVETIME+0x72>
    2fba:	f7 01       	movw	r30, r14
    2fbc:	13 8a       	std	Z+19, r1	; 0x13
    2fbe:	10 e0       	ldi	r17, 0x00	; 0
    2fc0:	81 2f       	mov	r24, r17
    2fc2:	ca 58       	subi	r28, 0x8A	; 138
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	ff 90       	pop	r15
    2fd2:	ef 90       	pop	r14
    2fd4:	08 95       	ret

00002fd6 <get_FRAM_MOTOR_ENCODER>:
    2fd6:	cf 92       	push	r12
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	c3 58       	subi	r28, 0x83	; 131
    2fec:	d1 09       	sbc	r29, r1
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	8b 01       	movw	r16, r22
    2ff4:	9f e2       	ldi	r25, 0x2F	; 47
    2ff6:	ed ed       	ldi	r30, 0xDD	; 221
    2ff8:	f8 ea       	ldi	r31, 0xA8	; 168
    2ffa:	de 01       	movw	r26, r28
    2ffc:	ab 5a       	subi	r26, 0xAB	; 171
    2ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    3000:	01 90       	ld	r0, Z+
    3002:	0d 92       	st	X+, r0
    3004:	9a 95       	dec	r25
    3006:	e1 f7       	brne	.-8      	; 0x3000 <get_FRAM_MOTOR_ENCODER+0x2a>
    3008:	81 38       	cpi	r24, 0x81	; 129
    300a:	59 f0       	breq	.+22     	; 0x3022 <get_FRAM_MOTOR_ENCODER+0x4c>
    300c:	82 38       	cpi	r24, 0x82	; 130
    300e:	31 f0       	breq	.+12     	; 0x301c <get_FRAM_MOTOR_ENCODER+0x46>
    3010:	80 38       	cpi	r24, 0x80	; 128
    3012:	09 f0       	breq	.+2      	; 0x3016 <get_FRAM_MOTOR_ENCODER+0x40>
    3014:	69 c0       	rjmp	.+210    	; 0x30e8 <get_FRAM_MOTOR_ENCODER+0x112>
    3016:	64 e1       	ldi	r22, 0x14	; 20
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	05 c0       	rjmp	.+10     	; 0x3026 <get_FRAM_MOTOR_ENCODER+0x50>
    301c:	6c e1       	ldi	r22, 0x1C	; 28
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <get_FRAM_MOTOR_ENCODER+0x50>
    3022:	68 e1       	ldi	r22, 0x18	; 24
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	f8 2e       	mov	r15, r24
    3028:	24 e0       	ldi	r18, 0x04	; 4
    302a:	ae 01       	movw	r20, r28
    302c:	4f 5a       	subi	r20, 0xAF	; 175
    302e:	5f 4f       	sbci	r21, 0xFF	; 255
    3030:	80 e5       	ldi	r24, 0x50	; 80
    3032:	0e 94 99 08 	call	0x1132	; 0x1132 <read_FRAM>
    3036:	e8 2e       	mov	r14, r24
    3038:	83 e6       	ldi	r24, 0x63	; 99
    303a:	e8 12       	cpse	r14, r24
    303c:	24 c0       	rjmp	.+72     	; 0x3086 <get_FRAM_MOTOR_ENCODER+0xb0>
    303e:	81 ec       	ldi	r24, 0xC1	; 193
    3040:	8f 0d       	add	r24, r15
    3042:	1f 92       	push	r1
    3044:	8f 93       	push	r24
    3046:	ce 01       	movw	r24, r28
    3048:	8b 5a       	subi	r24, 0xAB	; 171
    304a:	9f 4f       	sbci	r25, 0xFF	; 255
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	fe 01       	movw	r30, r28
    3052:	31 96       	adiw	r30, 0x01	; 1
    3054:	6f 01       	movw	r12, r30
    3056:	ff 93       	push	r31
    3058:	ef 93       	push	r30
    305a:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    305e:	b6 01       	movw	r22, r12
    3060:	83 e9       	ldi	r24, 0x93	; 147
    3062:	91 e0       	ldi	r25, 0x01	; 1
    3064:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3068:	8f ef       	ldi	r24, 0xFF	; 255
    306a:	9f ef       	ldi	r25, 0xFF	; 255
    306c:	dc 01       	movw	r26, r24
    306e:	f8 01       	movw	r30, r16
    3070:	80 83       	st	Z, r24
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	a2 83       	std	Z+2, r26	; 0x02
    3076:	b3 83       	std	Z+3, r27	; 0x03
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	35 c0       	rjmp	.+106    	; 0x30f0 <get_FRAM_MOTOR_ENCODER+0x11a>
    3086:	62 96       	adiw	r28, 0x12	; 18
    3088:	8f ad       	ldd	r24, Y+63	; 0x3f
    308a:	62 97       	sbiw	r28, 0x12	; 18
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a0 e0       	ldi	r26, 0x00	; 0
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	78 2f       	mov	r23, r24
    3094:	66 27       	eor	r22, r22
    3096:	55 27       	eor	r21, r21
    3098:	44 27       	eor	r20, r20
    309a:	63 96       	adiw	r28, 0x13	; 19
    309c:	9f ad       	ldd	r25, Y+63	; 0x3f
    309e:	63 97       	sbiw	r28, 0x13	; 19
    30a0:	89 2f       	mov	r24, r25
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a0 e0       	ldi	r26, 0x00	; 0
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	dc 01       	movw	r26, r24
    30aa:	99 27       	eor	r25, r25
    30ac:	88 27       	eor	r24, r24
    30ae:	84 2b       	or	r24, r20
    30b0:	95 2b       	or	r25, r21
    30b2:	a6 2b       	or	r26, r22
    30b4:	b7 2b       	or	r27, r23
    30b6:	64 96       	adiw	r28, 0x14	; 20
    30b8:	4f ad       	ldd	r20, Y+63	; 0x3f
    30ba:	64 97       	sbiw	r28, 0x14	; 20
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	76 2f       	mov	r23, r22
    30c4:	65 2f       	mov	r22, r21
    30c6:	54 2f       	mov	r21, r20
    30c8:	44 27       	eor	r20, r20
    30ca:	84 2b       	or	r24, r20
    30cc:	95 2b       	or	r25, r21
    30ce:	a6 2b       	or	r26, r22
    30d0:	b7 2b       	or	r27, r23
    30d2:	65 96       	adiw	r28, 0x15	; 21
    30d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    30d6:	65 97       	sbiw	r28, 0x15	; 21
    30d8:	82 2b       	or	r24, r18
    30da:	f8 01       	movw	r30, r16
    30dc:	80 83       	st	Z, r24
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	a2 83       	std	Z+2, r26	; 0x02
    30e2:	b3 83       	std	Z+3, r27	; 0x03
    30e4:	e1 2c       	mov	r14, r1
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <get_FRAM_MOTOR_ENCODER+0x11a>
    30e8:	0f 2e       	mov	r0, r31
    30ea:	f3 e6       	ldi	r31, 0x63	; 99
    30ec:	ef 2e       	mov	r14, r31
    30ee:	f0 2d       	mov	r31, r0
    30f0:	8e 2d       	mov	r24, r14
    30f2:	cd 57       	subi	r28, 0x7D	; 125
    30f4:	df 4f       	sbci	r29, 0xFF	; 255
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	1f 91       	pop	r17
    3100:	0f 91       	pop	r16
    3102:	ff 90       	pop	r15
    3104:	ef 90       	pop	r14
    3106:	df 90       	pop	r13
    3108:	cf 90       	pop	r12
    310a:	08 95       	ret

0000310c <get_MOTOR>:
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	c2 59       	subi	r28, 0x92	; 146
    3124:	d1 09       	sbc	r29, r1
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	e8 2e       	mov	r14, r24
    312c:	8a 01       	movw	r16, r20
    312e:	f2 2e       	mov	r15, r18
    3130:	80 e2       	ldi	r24, 0x20	; 32
    3132:	ec e0       	ldi	r30, 0x0C	; 12
    3134:	f9 ea       	ldi	r31, 0xA9	; 169
    3136:	de 01       	movw	r26, r28
    3138:	ab 5a       	subi	r26, 0xAB	; 171
    313a:	bf 4f       	sbci	r27, 0xFF	; 255
    313c:	01 90       	ld	r0, Z+
    313e:	0d 92       	st	X+, r0
    3140:	8a 95       	dec	r24
    3142:	e1 f7       	brne	.-8      	; 0x313c <get_MOTOR+0x30>
    3144:	8e e1       	ldi	r24, 0x1E	; 30
    3146:	ec e2       	ldi	r30, 0x2C	; 44
    3148:	f9 ea       	ldi	r31, 0xA9	; 169
    314a:	de 01       	movw	r26, r28
    314c:	ab 58       	subi	r26, 0x8B	; 139
    314e:	bf 4f       	sbci	r27, 0xFF	; 255
    3150:	01 90       	ld	r0, Z+
    3152:	0d 92       	st	X+, r0
    3154:	8a 95       	dec	r24
    3156:	e1 f7       	brne	.-8      	; 0x3150 <get_MOTOR+0x44>
    3158:	68 94       	set
    315a:	bb 24       	eor	r11, r11
    315c:	b1 f8       	bld	r11, 1
    315e:	b2 0e       	add	r11, r18
    3160:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    3164:	b0 92 39 2b 	sts	0x2B39, r11	; 0x802b39 <ser_recv1+0xfe>
    3168:	62 96       	adiw	r28, 0x12	; 18
    316a:	ef ae       	std	Y+63, r14	; 0x3f
    316c:	62 97       	sbiw	r28, 0x12	; 18
    316e:	63 96       	adiw	r28, 0x13	; 19
    3170:	6f af       	std	Y+63, r22	; 0x3f
    3172:	63 97       	sbiw	r28, 0x13	; 19
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	ce 01       	movw	r24, r28
    317a:	8f 5a       	subi	r24, 0xAF	; 175
    317c:	9f 4f       	sbci	r25, 0xFF	; 255
    317e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <crc16>
    3182:	64 96       	adiw	r28, 0x14	; 20
    3184:	9f af       	std	Y+63, r25	; 0x3f
    3186:	64 97       	sbiw	r28, 0x14	; 20
    3188:	65 96       	adiw	r28, 0x15	; 21
    318a:	8f af       	std	Y+63, r24	; 0x3f
    318c:	65 97       	sbiw	r28, 0x15	; 21
    318e:	62 e0       	ldi	r22, 0x02	; 2
    3190:	ce 01       	movw	r24, r28
    3192:	8f 5a       	subi	r24, 0xAF	; 175
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <send_USART1>
    319a:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    319e:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    31a2:	24 c0       	rjmp	.+72     	; 0x31ec <get_MOTOR+0xe0>
    31a4:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    31a8:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    31ac:	85 36       	cpi	r24, 0x65	; 101
    31ae:	91 05       	cpc	r25, r1
    31b0:	e8 f0       	brcs	.+58     	; 0x31ec <get_MOTOR+0xe0>
    31b2:	81 ec       	ldi	r24, 0xC1	; 193
    31b4:	8e 0d       	add	r24, r14
    31b6:	1f 92       	push	r1
    31b8:	8f 93       	push	r24
    31ba:	ce 01       	movw	r24, r28
    31bc:	8b 5a       	subi	r24, 0xAB	; 171
    31be:	9f 4f       	sbci	r25, 0xFF	; 255
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	8e 01       	movw	r16, r28
    31c6:	0f 5f       	subi	r16, 0xFF	; 255
    31c8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ca:	1f 93       	push	r17
    31cc:	0f 93       	push	r16
    31ce:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    31d2:	b8 01       	movw	r22, r16
    31d4:	80 e3       	ldi	r24, 0x30	; 48
    31d6:	91 e0       	ldi	r25, 0x01	; 1
    31d8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	83 e6       	ldi	r24, 0x63	; 99
    31ea:	5d c0       	rjmp	.+186    	; 0x32a6 <get_MOTOR+0x19a>
    31ec:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    31f0:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    31f4:	98 17       	cp	r25, r24
    31f6:	b0 f2       	brcs	.-84     	; 0x31a4 <get_MOTOR+0x98>
    31f8:	8f 2d       	mov	r24, r15
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	fc 01       	movw	r30, r24
    31fe:	e5 5c       	subi	r30, 0xC5	; 197
    3200:	f5 4d       	sbci	r31, 0xD5	; 213
    3202:	c0 80       	ld	r12, Z
    3204:	d1 2c       	mov	r13, r1
    3206:	dc 2c       	mov	r13, r12
    3208:	cc 24       	eor	r12, r12
    320a:	fc 01       	movw	r30, r24
    320c:	e4 5c       	subi	r30, 0xC4	; 196
    320e:	f5 4d       	sbci	r31, 0xD5	; 213
    3210:	80 81       	ld	r24, Z
    3212:	c8 2a       	or	r12, r24
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	0e c0       	rjmp	.+28     	; 0x3234 <get_MOTOR+0x128>
    3218:	28 2f       	mov	r18, r24
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	f9 01       	movw	r30, r18
    321e:	e7 5c       	subi	r30, 0xC7	; 199
    3220:	f5 4d       	sbci	r31, 0xD5	; 213
    3222:	90 81       	ld	r25, Z
    3224:	e1 e5       	ldi	r30, 0x51	; 81
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	ec 0f       	add	r30, r28
    322a:	fd 1f       	adc	r31, r29
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	90 83       	st	Z, r25
    3232:	8f 5f       	subi	r24, 0xFF	; 255
    3234:	8b 15       	cp	r24, r11
    3236:	80 f3       	brcs	.-32     	; 0x3218 <get_MOTOR+0x10c>
    3238:	6b 2d       	mov	r22, r11
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	ce 01       	movw	r24, r28
    323e:	8f 5a       	subi	r24, 0xAF	; 175
    3240:	9f 4f       	sbci	r25, 0xFF	; 255
    3242:	0e 94 82 17 	call	0x2f04	; 0x2f04 <crc16>
    3246:	c8 16       	cp	r12, r24
    3248:	d9 06       	cpc	r13, r25
    324a:	49 f1       	breq	.+82     	; 0x329e <get_MOTOR+0x192>
    324c:	81 ec       	ldi	r24, 0xC1	; 193
    324e:	8e 0d       	add	r24, r14
    3250:	1f 92       	push	r1
    3252:	8f 93       	push	r24
    3254:	ce 01       	movw	r24, r28
    3256:	8b 58       	subi	r24, 0x8B	; 139
    3258:	9f 4f       	sbci	r25, 0xFF	; 255
    325a:	9f 93       	push	r25
    325c:	8f 93       	push	r24
    325e:	8e 01       	movw	r16, r28
    3260:	0f 5f       	subi	r16, 0xFF	; 255
    3262:	1f 4f       	sbci	r17, 0xFF	; 255
    3264:	1f 93       	push	r17
    3266:	0f 93       	push	r16
    3268:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    326c:	b8 01       	movw	r22, r16
    326e:	81 e3       	ldi	r24, 0x31	; 49
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	83 e6       	ldi	r24, 0x63	; 99
    3284:	10 c0       	rjmp	.+32     	; 0x32a6 <get_MOTOR+0x19a>
    3286:	82 2f       	mov	r24, r18
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	f8 01       	movw	r30, r16
    328c:	e8 0f       	add	r30, r24
    328e:	f9 1f       	adc	r31, r25
    3290:	dc 01       	movw	r26, r24
    3292:	a5 5c       	subi	r26, 0xC5	; 197
    3294:	b5 4d       	sbci	r27, 0xD5	; 213
    3296:	8c 91       	ld	r24, X
    3298:	80 83       	st	Z, r24
    329a:	2f 5f       	subi	r18, 0xFF	; 255
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <get_MOTOR+0x194>
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	2f 15       	cp	r18, r15
    32a2:	88 f3       	brcs	.-30     	; 0x3286 <get_MOTOR+0x17a>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	ce 56       	subi	r28, 0x6E	; 110
    32a8:	df 4f       	sbci	r29, 0xFF	; 255
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	ff 90       	pop	r15
    32b8:	ef 90       	pop	r14
    32ba:	df 90       	pop	r13
    32bc:	cf 90       	pop	r12
    32be:	bf 90       	pop	r11
    32c0:	08 95       	ret

000032c2 <get_MOTOR_CURRENT>:
    32c2:	cf 92       	push	r12
    32c4:	df 92       	push	r13
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	cd 57       	subi	r28, 0x7D	; 125
    32d8:	d1 09       	sbc	r29, r1
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	e8 2e       	mov	r14, r24
    32e0:	8b 01       	movw	r16, r22
    32e2:	89 e2       	ldi	r24, 0x29	; 41
    32e4:	ea e4       	ldi	r30, 0x4A	; 74
    32e6:	f9 ea       	ldi	r31, 0xA9	; 169
    32e8:	de 01       	movw	r26, r28
    32ea:	11 96       	adiw	r26, 0x01	; 1
    32ec:	01 90       	ld	r0, Z+
    32ee:	0d 92       	st	X+, r0
    32f0:	8a 95       	dec	r24
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <get_MOTOR_CURRENT+0x2a>
    32f4:	24 e0       	ldi	r18, 0x04	; 4
    32f6:	ae 01       	movw	r20, r28
    32f8:	46 58       	subi	r20, 0x86	; 134
    32fa:	5f 4f       	sbci	r21, 0xFF	; 255
    32fc:	61 e3       	ldi	r22, 0x31	; 49
    32fe:	8e 2d       	mov	r24, r14
    3300:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    3304:	f8 2e       	mov	r15, r24
    3306:	83 e6       	ldi	r24, 0x63	; 99
    3308:	f8 12       	cpse	r15, r24
    330a:	21 c0       	rjmp	.+66     	; 0x334e <get_MOTOR_CURRENT+0x8c>
    330c:	81 ec       	ldi	r24, 0xC1	; 193
    330e:	8e 0d       	add	r24, r14
    3310:	1f 92       	push	r1
    3312:	8f 93       	push	r24
    3314:	ce 01       	movw	r24, r28
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	9f 93       	push	r25
    331a:	8f 93       	push	r24
    331c:	6e 01       	movw	r12, r28
    331e:	ea e2       	ldi	r30, 0x2A	; 42
    3320:	ce 0e       	add	r12, r30
    3322:	d1 1c       	adc	r13, r1
    3324:	df 92       	push	r13
    3326:	cf 92       	push	r12
    3328:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    332c:	b6 01       	movw	r22, r12
    332e:	86 e3       	ldi	r24, 0x36	; 54
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	9f ef       	ldi	r25, 0xFF	; 255
    333a:	f8 01       	movw	r30, r16
    333c:	80 83       	st	Z, r24
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	19 c0       	rjmp	.+50     	; 0x3380 <get_MOTOR_CURRENT+0xbe>
    334e:	eb 96       	adiw	r28, 0x3b	; 59
    3350:	8f ad       	ldd	r24, Y+63	; 0x3f
    3352:	eb 97       	sbiw	r28, 0x3b	; 59
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	98 2f       	mov	r25, r24
    3358:	88 27       	eor	r24, r24
    335a:	ec 96       	adiw	r28, 0x3c	; 60
    335c:	2f ad       	ldd	r18, Y+63	; 0x3f
    335e:	ec 97       	sbiw	r28, 0x3c	; 60
    3360:	82 2b       	or	r24, r18
    3362:	9c 01       	movw	r18, r24
    3364:	22 0f       	add	r18, r18
    3366:	33 1f       	adc	r19, r19
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	82 0f       	add	r24, r18
    3376:	93 1f       	adc	r25, r19
    3378:	f8 01       	movw	r30, r16
    337a:	80 83       	st	Z, r24
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	f1 2c       	mov	r15, r1
    3380:	8f 2d       	mov	r24, r15
    3382:	c3 58       	subi	r28, 0x83	; 131
    3384:	df 4f       	sbci	r29, 0xFF	; 255
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	ff 90       	pop	r15
    3394:	ef 90       	pop	r14
    3396:	df 90       	pop	r13
    3398:	cf 90       	pop	r12
    339a:	08 95       	ret

0000339c <get_MOTOR_ENCODER>:
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	ce 57       	subi	r28, 0x7E	; 126
    33ae:	d1 09       	sbc	r29, r1
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	e8 2e       	mov	r14, r24
    33b6:	8b 01       	movw	r16, r22
    33b8:	89 e2       	ldi	r24, 0x29	; 41
    33ba:	e3 e7       	ldi	r30, 0x73	; 115
    33bc:	f9 ea       	ldi	r31, 0xA9	; 169
    33be:	de 01       	movw	r26, r28
    33c0:	aa 5a       	subi	r26, 0xAA	; 170
    33c2:	bf 4f       	sbci	r27, 0xFF	; 255
    33c4:	01 90       	ld	r0, Z+
    33c6:	0d 92       	st	X+, r0
    33c8:	8a 95       	dec	r24
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <get_MOTOR_ENCODER+0x28>
    33cc:	25 e0       	ldi	r18, 0x05	; 5
    33ce:	ae 01       	movw	r20, r28
    33d0:	4f 5a       	subi	r20, 0xAF	; 175
    33d2:	5f 4f       	sbci	r21, 0xFF	; 255
    33d4:	60 e1       	ldi	r22, 0x10	; 16
    33d6:	8e 2d       	mov	r24, r14
    33d8:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    33dc:	f8 2e       	mov	r15, r24
    33de:	83 e6       	ldi	r24, 0x63	; 99
    33e0:	f8 12       	cpse	r15, r24
    33e2:	1c c0       	rjmp	.+56     	; 0x341c <get_MOTOR_ENCODER+0x80>
    33e4:	81 ec       	ldi	r24, 0xC1	; 193
    33e6:	8e 0d       	add	r24, r14
    33e8:	1f 92       	push	r1
    33ea:	8f 93       	push	r24
    33ec:	ce 01       	movw	r24, r28
    33ee:	8a 5a       	subi	r24, 0xAA	; 170
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	9f 93       	push	r25
    33f4:	8f 93       	push	r24
    33f6:	8e 01       	movw	r16, r28
    33f8:	0f 5f       	subi	r16, 0xFF	; 255
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	1f 93       	push	r17
    33fe:	0f 93       	push	r16
    3400:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3404:	b8 01       	movw	r22, r16
    3406:	86 e3       	ldi	r24, 0x36	; 54
    3408:	91 e0       	ldi	r25, 0x01	; 1
    340a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	30 c0       	rjmp	.+96     	; 0x347c <get_MOTOR_ENCODER+0xe0>
    341c:	62 96       	adiw	r28, 0x12	; 18
    341e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3420:	62 97       	sbiw	r28, 0x12	; 18
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	a0 e0       	ldi	r26, 0x00	; 0
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	78 2f       	mov	r23, r24
    342a:	66 27       	eor	r22, r22
    342c:	55 27       	eor	r21, r21
    342e:	44 27       	eor	r20, r20
    3430:	63 96       	adiw	r28, 0x13	; 19
    3432:	9f ad       	ldd	r25, Y+63	; 0x3f
    3434:	63 97       	sbiw	r28, 0x13	; 19
    3436:	89 2f       	mov	r24, r25
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a0 e0       	ldi	r26, 0x00	; 0
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	dc 01       	movw	r26, r24
    3440:	99 27       	eor	r25, r25
    3442:	88 27       	eor	r24, r24
    3444:	84 2b       	or	r24, r20
    3446:	95 2b       	or	r25, r21
    3448:	a6 2b       	or	r26, r22
    344a:	b7 2b       	or	r27, r23
    344c:	64 96       	adiw	r28, 0x14	; 20
    344e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3450:	64 97       	sbiw	r28, 0x14	; 20
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	76 2f       	mov	r23, r22
    345a:	65 2f       	mov	r22, r21
    345c:	54 2f       	mov	r21, r20
    345e:	44 27       	eor	r20, r20
    3460:	84 2b       	or	r24, r20
    3462:	95 2b       	or	r25, r21
    3464:	a6 2b       	or	r26, r22
    3466:	b7 2b       	or	r27, r23
    3468:	65 96       	adiw	r28, 0x15	; 21
    346a:	2f ad       	ldd	r18, Y+63	; 0x3f
    346c:	65 97       	sbiw	r28, 0x15	; 21
    346e:	82 2b       	or	r24, r18
    3470:	f8 01       	movw	r30, r16
    3472:	80 83       	st	Z, r24
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	a2 83       	std	Z+2, r26	; 0x02
    3478:	b3 83       	std	Z+3, r27	; 0x03
    347a:	f1 2c       	mov	r15, r1
    347c:	8f 2d       	mov	r24, r15
    347e:	c2 58       	subi	r28, 0x82	; 130
    3480:	df 4f       	sbci	r29, 0xFF	; 255
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	1f 91       	pop	r17
    348c:	0f 91       	pop	r16
    348e:	ff 90       	pop	r15
    3490:	ef 90       	pop	r14
    3492:	08 95       	ret

00003494 <get_MOTOR_FLOAT>:
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	c9 57       	subi	r28, 0x79	; 121
    34aa:	d1 09       	sbc	r29, r1
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	e8 2e       	mov	r14, r24
    34b2:	8a 01       	movw	r16, r20
    34b4:	87 e2       	ldi	r24, 0x27	; 39
    34b6:	ec e9       	ldi	r30, 0x9C	; 156
    34b8:	f9 ea       	ldi	r31, 0xA9	; 169
    34ba:	de 01       	movw	r26, r28
    34bc:	ad 5a       	subi	r26, 0xAD	; 173
    34be:	bf 4f       	sbci	r27, 0xFF	; 255
    34c0:	01 90       	ld	r0, Z+
    34c2:	0d 92       	st	X+, r0
    34c4:	8a 95       	dec	r24
    34c6:	e1 f7       	brne	.-8      	; 0x34c0 <get_MOTOR_FLOAT+0x2c>
    34c8:	22 e0       	ldi	r18, 0x02	; 2
    34ca:	ae 01       	movw	r20, r28
    34cc:	4f 5a       	subi	r20, 0xAF	; 175
    34ce:	5f 4f       	sbci	r21, 0xFF	; 255
    34d0:	8e 2d       	mov	r24, r14
    34d2:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    34d6:	f8 2e       	mov	r15, r24
    34d8:	83 e6       	ldi	r24, 0x63	; 99
    34da:	f8 12       	cpse	r15, r24
    34dc:	25 c0       	rjmp	.+74     	; 0x3528 <get_MOTOR_FLOAT+0x94>
    34de:	81 ec       	ldi	r24, 0xC1	; 193
    34e0:	8e 0d       	add	r24, r14
    34e2:	1f 92       	push	r1
    34e4:	8f 93       	push	r24
    34e6:	ce 01       	movw	r24, r28
    34e8:	8d 5a       	subi	r24, 0xAD	; 173
    34ea:	9f 4f       	sbci	r25, 0xFF	; 255
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	fe 01       	movw	r30, r28
    34f2:	31 96       	adiw	r30, 0x01	; 1
    34f4:	6f 01       	movw	r12, r30
    34f6:	ff 93       	push	r31
    34f8:	ef 93       	push	r30
    34fa:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    34fe:	b6 01       	movw	r22, r12
    3500:	86 e3       	ldi	r24, 0x36	; 54
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e8       	ldi	r25, 0x80	; 128
    350c:	a6 e2       	ldi	r26, 0x26	; 38
    350e:	b4 ec       	ldi	r27, 0xC4	; 196
    3510:	f8 01       	movw	r30, r16
    3512:	80 83       	st	Z, r24
    3514:	91 83       	std	Z+1, r25	; 0x01
    3516:	a2 83       	std	Z+2, r26	; 0x02
    3518:	b3 83       	std	Z+3, r27	; 0x03
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	1c c0       	rjmp	.+56     	; 0x3560 <get_MOTOR_FLOAT+0xcc>
    3528:	62 96       	adiw	r28, 0x12	; 18
    352a:	6f ad       	ldd	r22, Y+63	; 0x3f
    352c:	62 97       	sbiw	r28, 0x12	; 18
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	76 2f       	mov	r23, r22
    3532:	66 27       	eor	r22, r22
    3534:	63 96       	adiw	r28, 0x13	; 19
    3536:	8f ad       	ldd	r24, Y+63	; 0x3f
    3538:	63 97       	sbiw	r28, 0x13	; 19
    353a:	68 2b       	or	r22, r24
    353c:	07 2e       	mov	r0, r23
    353e:	00 0c       	add	r0, r0
    3540:	88 0b       	sbc	r24, r24
    3542:	99 0b       	sbc	r25, r25
    3544:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    3554:	f8 01       	movw	r30, r16
    3556:	60 83       	st	Z, r22
    3558:	71 83       	std	Z+1, r23	; 0x01
    355a:	82 83       	std	Z+2, r24	; 0x02
    355c:	93 83       	std	Z+3, r25	; 0x03
    355e:	f1 2c       	mov	r15, r1
    3560:	8f 2d       	mov	r24, r15
    3562:	c7 58       	subi	r28, 0x87	; 135
    3564:	df 4f       	sbci	r29, 0xFF	; 255
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	cf 90       	pop	r12
    357a:	08 95       	ret

0000357c <get_MOTOR_MAXCURRENT>:
    357c:	cf 92       	push	r12
    357e:	df 92       	push	r13
    3580:	ef 92       	push	r14
    3582:	ff 92       	push	r15
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	c4 58       	subi	r28, 0x84	; 132
    3592:	d1 09       	sbc	r29, r1
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	e8 2e       	mov	r14, r24
    359a:	8b 01       	movw	r16, r22
    359c:	8c e2       	ldi	r24, 0x2C	; 44
    359e:	e3 ec       	ldi	r30, 0xC3	; 195
    35a0:	f9 ea       	ldi	r31, 0xA9	; 169
    35a2:	de 01       	movw	r26, r28
    35a4:	11 96       	adiw	r26, 0x01	; 1
    35a6:	01 90       	ld	r0, Z+
    35a8:	0d 92       	st	X+, r0
    35aa:	8a 95       	dec	r24
    35ac:	e1 f7       	brne	.-8      	; 0x35a6 <get_MOTOR_MAXCURRENT+0x2a>
    35ae:	28 e0       	ldi	r18, 0x08	; 8
    35b0:	ae 01       	movw	r20, r28
    35b2:	43 58       	subi	r20, 0x83	; 131
    35b4:	5f 4f       	sbci	r21, 0xFF	; 255
    35b6:	67 e8       	ldi	r22, 0x87	; 135
    35b8:	8e 2d       	mov	r24, r14
    35ba:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    35be:	f8 2e       	mov	r15, r24
    35c0:	83 e6       	ldi	r24, 0x63	; 99
    35c2:	f8 12       	cpse	r15, r24
    35c4:	1b c0       	rjmp	.+54     	; 0x35fc <get_MOTOR_MAXCURRENT+0x80>
    35c6:	81 ec       	ldi	r24, 0xC1	; 193
    35c8:	8e 0d       	add	r24, r14
    35ca:	1f 92       	push	r1
    35cc:	8f 93       	push	r24
    35ce:	ce 01       	movw	r24, r28
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	9f 93       	push	r25
    35d4:	8f 93       	push	r24
    35d6:	8e 01       	movw	r16, r28
    35d8:	03 5d       	subi	r16, 0xD3	; 211
    35da:	1f 4f       	sbci	r17, 0xFF	; 255
    35dc:	1f 93       	push	r17
    35de:	0f 93       	push	r16
    35e0:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    35e4:	b8 01       	movw	r22, r16
    35e6:	86 e3       	ldi	r24, 0x36	; 54
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	45 c0       	rjmp	.+138    	; 0x3686 <get_MOTOR_MAXCURRENT+0x10a>
    35fc:	ee 96       	adiw	r28, 0x3e	; 62
    35fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3600:	ee 97       	sbiw	r28, 0x3e	; 62
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	a0 e0       	ldi	r26, 0x00	; 0
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	f8 2e       	mov	r15, r24
    360a:	ee 24       	eor	r14, r14
    360c:	dd 24       	eor	r13, r13
    360e:	cc 24       	eor	r12, r12
    3610:	ef 96       	adiw	r28, 0x3f	; 63
    3612:	4f ad       	ldd	r20, Y+63	; 0x3f
    3614:	ef 97       	sbiw	r28, 0x3f	; 63
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	da 01       	movw	r26, r20
    361e:	99 27       	eor	r25, r25
    3620:	88 27       	eor	r24, r24
    3622:	8c 29       	or	r24, r12
    3624:	9d 29       	or	r25, r13
    3626:	ae 29       	or	r26, r14
    3628:	bf 29       	or	r27, r15
    362a:	c1 58       	subi	r28, 0x81	; 129
    362c:	df 4f       	sbci	r29, 0xFF	; 255
    362e:	48 81       	ld	r20, Y
    3630:	cf 57       	subi	r28, 0x7F	; 127
    3632:	d0 40       	sbci	r29, 0x00	; 0
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	76 2f       	mov	r23, r22
    363c:	65 2f       	mov	r22, r21
    363e:	54 2f       	mov	r21, r20
    3640:	44 27       	eor	r20, r20
    3642:	84 2b       	or	r24, r20
    3644:	95 2b       	or	r25, r21
    3646:	a6 2b       	or	r26, r22
    3648:	b7 2b       	or	r27, r23
    364a:	c0 58       	subi	r28, 0x80	; 128
    364c:	df 4f       	sbci	r29, 0xFF	; 255
    364e:	28 81       	ld	r18, Y
    3650:	c0 58       	subi	r28, 0x80	; 128
    3652:	d0 40       	sbci	r29, 0x00	; 0
    3654:	82 2b       	or	r24, r18
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	aa 1f       	adc	r26, r26
    365c:	bb 1f       	adc	r27, r27
    365e:	ac 01       	movw	r20, r24
    3660:	bd 01       	movw	r22, r26
    3662:	44 0f       	add	r20, r20
    3664:	55 1f       	adc	r21, r21
    3666:	66 1f       	adc	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	44 0f       	add	r20, r20
    366c:	55 1f       	adc	r21, r21
    366e:	66 1f       	adc	r22, r22
    3670:	77 1f       	adc	r23, r23
    3672:	84 0f       	add	r24, r20
    3674:	95 1f       	adc	r25, r21
    3676:	a6 1f       	adc	r26, r22
    3678:	b7 1f       	adc	r27, r23
    367a:	f8 01       	movw	r30, r16
    367c:	80 83       	st	Z, r24
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	a2 83       	std	Z+2, r26	; 0x02
    3682:	b3 83       	std	Z+3, r27	; 0x03
    3684:	f1 2c       	mov	r15, r1
    3686:	8f 2d       	mov	r24, r15
    3688:	cc 57       	subi	r28, 0x7C	; 124
    368a:	df 4f       	sbci	r29, 0xFF	; 255
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	08 95       	ret

000036a2 <get_MOTOR_PID>:
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	c1 59       	subi	r28, 0x91	; 145
    36b4:	d1 09       	sbc	r29, r1
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	f8 2e       	mov	r15, r24
    36bc:	8b 01       	movw	r16, r22
    36be:	85 e2       	ldi	r24, 0x25	; 37
    36c0:	ef ee       	ldi	r30, 0xEF	; 239
    36c2:	f9 ea       	ldi	r31, 0xA9	; 169
    36c4:	de 01       	movw	r26, r28
    36c6:	11 96       	adiw	r26, 0x01	; 1
    36c8:	01 90       	ld	r0, Z+
    36ca:	0d 92       	st	X+, r0
    36cc:	8a 95       	dec	r24
    36ce:	e1 f7       	brne	.-8      	; 0x36c8 <get_MOTOR_PID+0x26>
    36d0:	2c e1       	ldi	r18, 0x1C	; 28
    36d2:	ae 01       	movw	r20, r28
    36d4:	4a 58       	subi	r20, 0x8A	; 138
    36d6:	5f 4f       	sbci	r21, 0xFF	; 255
    36d8:	6f e3       	ldi	r22, 0x3F	; 63
    36da:	8f 2d       	mov	r24, r15
    36dc:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    36e0:	e8 2e       	mov	r14, r24
    36e2:	83 e6       	ldi	r24, 0x63	; 99
    36e4:	e8 12       	cpse	r14, r24
    36e6:	1b c0       	rjmp	.+54     	; 0x371e <get_MOTOR_PID+0x7c>
    36e8:	81 ec       	ldi	r24, 0xC1	; 193
    36ea:	8f 0d       	add	r24, r15
    36ec:	1f 92       	push	r1
    36ee:	8f 93       	push	r24
    36f0:	ce 01       	movw	r24, r28
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	9f 93       	push	r25
    36f6:	8f 93       	push	r24
    36f8:	8e 01       	movw	r16, r28
    36fa:	0a 5d       	subi	r16, 0xDA	; 218
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
    36fe:	1f 93       	push	r17
    3700:	0f 93       	push	r16
    3702:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3706:	b8 01       	movw	r22, r16
    3708:	86 e3       	ldi	r24, 0x36	; 54
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	e5 c1       	rjmp	.+970    	; 0x3ae8 <get_MOTOR_PID+0x446>
    371e:	e7 96       	adiw	r28, 0x37	; 55
    3720:	4f ad       	ldd	r20, Y+63	; 0x3f
    3722:	e7 97       	sbiw	r28, 0x37	; 55
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	74 2f       	mov	r23, r20
    372c:	66 27       	eor	r22, r22
    372e:	55 27       	eor	r21, r21
    3730:	44 27       	eor	r20, r20
    3732:	e8 96       	adiw	r28, 0x38	; 56
    3734:	8f ad       	ldd	r24, Y+63	; 0x3f
    3736:	e8 97       	sbiw	r28, 0x38	; 56
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	a0 e0       	ldi	r26, 0x00	; 0
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	dc 01       	movw	r26, r24
    3740:	99 27       	eor	r25, r25
    3742:	88 27       	eor	r24, r24
    3744:	48 2b       	or	r20, r24
    3746:	59 2b       	or	r21, r25
    3748:	6a 2b       	or	r22, r26
    374a:	7b 2b       	or	r23, r27
    374c:	e9 96       	adiw	r28, 0x39	; 57
    374e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3750:	e9 97       	sbiw	r28, 0x39	; 57
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a0 e0       	ldi	r26, 0x00	; 0
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	ba 2f       	mov	r27, r26
    375a:	a9 2f       	mov	r26, r25
    375c:	98 2f       	mov	r25, r24
    375e:	88 27       	eor	r24, r24
    3760:	84 2b       	or	r24, r20
    3762:	95 2b       	or	r25, r21
    3764:	a6 2b       	or	r26, r22
    3766:	b7 2b       	or	r27, r23
    3768:	ea 96       	adiw	r28, 0x3a	; 58
    376a:	2f ad       	ldd	r18, Y+63	; 0x3f
    376c:	ea 97       	sbiw	r28, 0x3a	; 58
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	62 2b       	or	r22, r18
    3774:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e8       	ldi	r20, 0x80	; 128
    377e:	5a e3       	ldi	r21, 0x3A	; 58
    3780:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    3784:	f8 01       	movw	r30, r16
    3786:	60 83       	st	Z, r22
    3788:	71 83       	std	Z+1, r23	; 0x01
    378a:	82 83       	std	Z+2, r24	; 0x02
    378c:	93 83       	std	Z+3, r25	; 0x03
    378e:	eb 96       	adiw	r28, 0x3b	; 59
    3790:	4f ad       	ldd	r20, Y+63	; 0x3f
    3792:	eb 97       	sbiw	r28, 0x3b	; 59
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	70 e0       	ldi	r23, 0x00	; 0
    379a:	74 2f       	mov	r23, r20
    379c:	66 27       	eor	r22, r22
    379e:	55 27       	eor	r21, r21
    37a0:	44 27       	eor	r20, r20
    37a2:	ec 96       	adiw	r28, 0x3c	; 60
    37a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    37a6:	ec 97       	sbiw	r28, 0x3c	; 60
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a0 e0       	ldi	r26, 0x00	; 0
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	dc 01       	movw	r26, r24
    37b0:	99 27       	eor	r25, r25
    37b2:	88 27       	eor	r24, r24
    37b4:	48 2b       	or	r20, r24
    37b6:	59 2b       	or	r21, r25
    37b8:	6a 2b       	or	r22, r26
    37ba:	7b 2b       	or	r23, r27
    37bc:	ed 96       	adiw	r28, 0x3d	; 61
    37be:	8f ad       	ldd	r24, Y+63	; 0x3f
    37c0:	ed 97       	sbiw	r28, 0x3d	; 61
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a0 e0       	ldi	r26, 0x00	; 0
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	ba 2f       	mov	r27, r26
    37ca:	a9 2f       	mov	r26, r25
    37cc:	98 2f       	mov	r25, r24
    37ce:	88 27       	eor	r24, r24
    37d0:	84 2b       	or	r24, r20
    37d2:	95 2b       	or	r25, r21
    37d4:	a6 2b       	or	r26, r22
    37d6:	b7 2b       	or	r27, r23
    37d8:	ee 96       	adiw	r28, 0x3e	; 62
    37da:	2f ad       	ldd	r18, Y+63	; 0x3f
    37dc:	ee 97       	sbiw	r28, 0x3e	; 62
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	62 2b       	or	r22, r18
    37e4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5a e3       	ldi	r21, 0x3A	; 58
    37f0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    37f4:	f8 01       	movw	r30, r16
    37f6:	64 83       	std	Z+4, r22	; 0x04
    37f8:	75 83       	std	Z+5, r23	; 0x05
    37fa:	86 83       	std	Z+6, r24	; 0x06
    37fc:	97 83       	std	Z+7, r25	; 0x07
    37fe:	ef 96       	adiw	r28, 0x3f	; 63
    3800:	4f ad       	ldd	r20, Y+63	; 0x3f
    3802:	ef 97       	sbiw	r28, 0x3f	; 63
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	74 2f       	mov	r23, r20
    380c:	66 27       	eor	r22, r22
    380e:	55 27       	eor	r21, r21
    3810:	44 27       	eor	r20, r20
    3812:	c1 58       	subi	r28, 0x81	; 129
    3814:	df 4f       	sbci	r29, 0xFF	; 255
    3816:	88 81       	ld	r24, Y
    3818:	cf 57       	subi	r28, 0x7F	; 127
    381a:	d0 40       	sbci	r29, 0x00	; 0
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	dc 01       	movw	r26, r24
    3824:	99 27       	eor	r25, r25
    3826:	88 27       	eor	r24, r24
    3828:	48 2b       	or	r20, r24
    382a:	59 2b       	or	r21, r25
    382c:	6a 2b       	or	r22, r26
    382e:	7b 2b       	or	r23, r27
    3830:	c0 58       	subi	r28, 0x80	; 128
    3832:	df 4f       	sbci	r29, 0xFF	; 255
    3834:	88 81       	ld	r24, Y
    3836:	c0 58       	subi	r28, 0x80	; 128
    3838:	d0 40       	sbci	r29, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	a0 e0       	ldi	r26, 0x00	; 0
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	ba 2f       	mov	r27, r26
    3842:	a9 2f       	mov	r26, r25
    3844:	98 2f       	mov	r25, r24
    3846:	88 27       	eor	r24, r24
    3848:	84 2b       	or	r24, r20
    384a:	95 2b       	or	r25, r21
    384c:	a6 2b       	or	r26, r22
    384e:	b7 2b       	or	r27, r23
    3850:	cf 57       	subi	r28, 0x7F	; 127
    3852:	df 4f       	sbci	r29, 0xFF	; 255
    3854:	28 81       	ld	r18, Y
    3856:	c1 58       	subi	r28, 0x81	; 129
    3858:	d0 40       	sbci	r29, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	62 2b       	or	r22, r18
    3860:	0e 94 c4 29 	call	0x5388	; 0x5388 <__floatsisf>
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e8       	ldi	r20, 0x80	; 128
    386a:	5a e3       	ldi	r21, 0x3A	; 58
    386c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__mulsf3>
    3870:	f8 01       	movw	r30, r16
    3872:	60 87       	std	Z+8, r22	; 0x08
    3874:	71 87       	std	Z+9, r23	; 0x09
    3876:	82 87       	std	Z+10, r24	; 0x0a
    3878:	93 87       	std	Z+11, r25	; 0x0b
    387a:	ce 57       	subi	r28, 0x7E	; 126
    387c:	df 4f       	sbci	r29, 0xFF	; 255
    387e:	88 81       	ld	r24, Y
    3880:	c2 58       	subi	r28, 0x82	; 130
    3882:	d0 40       	sbci	r29, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	a0 e0       	ldi	r26, 0x00	; 0
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	78 2f       	mov	r23, r24
    388c:	66 27       	eor	r22, r22
    388e:	55 27       	eor	r21, r21
    3890:	44 27       	eor	r20, r20
    3892:	cd 57       	subi	r28, 0x7D	; 125
    3894:	df 4f       	sbci	r29, 0xFF	; 255
    3896:	98 81       	ld	r25, Y
    3898:	c3 58       	subi	r28, 0x83	; 131
    389a:	d0 40       	sbci	r29, 0x00	; 0
    389c:	89 2f       	mov	r24, r25
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e0       	ldi	r26, 0x00	; 0
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	dc 01       	movw	r26, r24
    38a6:	99 27       	eor	r25, r25
    38a8:	88 27       	eor	r24, r24
    38aa:	84 2b       	or	r24, r20
    38ac:	95 2b       	or	r25, r21
    38ae:	a6 2b       	or	r26, r22
    38b0:	b7 2b       	or	r27, r23
    38b2:	cc 57       	subi	r28, 0x7C	; 124
    38b4:	df 4f       	sbci	r29, 0xFF	; 255
    38b6:	48 81       	ld	r20, Y
    38b8:	c4 58       	subi	r28, 0x84	; 132
    38ba:	d0 40       	sbci	r29, 0x00	; 0
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	70 e0       	ldi	r23, 0x00	; 0
    38c2:	76 2f       	mov	r23, r22
    38c4:	65 2f       	mov	r22, r21
    38c6:	54 2f       	mov	r21, r20
    38c8:	44 27       	eor	r20, r20
    38ca:	84 2b       	or	r24, r20
    38cc:	95 2b       	or	r25, r21
    38ce:	a6 2b       	or	r26, r22
    38d0:	b7 2b       	or	r27, r23
    38d2:	cb 57       	subi	r28, 0x7B	; 123
    38d4:	df 4f       	sbci	r29, 0xFF	; 255
    38d6:	28 81       	ld	r18, Y
    38d8:	c5 58       	subi	r28, 0x85	; 133
    38da:	d0 40       	sbci	r29, 0x00	; 0
    38dc:	82 2b       	or	r24, r18
    38de:	84 87       	std	Z+12, r24	; 0x0c
    38e0:	95 87       	std	Z+13, r25	; 0x0d
    38e2:	a6 87       	std	Z+14, r26	; 0x0e
    38e4:	b7 87       	std	Z+15, r27	; 0x0f
    38e6:	ca 57       	subi	r28, 0x7A	; 122
    38e8:	df 4f       	sbci	r29, 0xFF	; 255
    38ea:	88 81       	ld	r24, Y
    38ec:	c6 58       	subi	r28, 0x86	; 134
    38ee:	d0 40       	sbci	r29, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	a0 e0       	ldi	r26, 0x00	; 0
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	78 2f       	mov	r23, r24
    38f8:	66 27       	eor	r22, r22
    38fa:	55 27       	eor	r21, r21
    38fc:	44 27       	eor	r20, r20
    38fe:	c9 57       	subi	r28, 0x79	; 121
    3900:	df 4f       	sbci	r29, 0xFF	; 255
    3902:	98 81       	ld	r25, Y
    3904:	c7 58       	subi	r28, 0x87	; 135
    3906:	d0 40       	sbci	r29, 0x00	; 0
    3908:	89 2f       	mov	r24, r25
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	a0 e0       	ldi	r26, 0x00	; 0
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	dc 01       	movw	r26, r24
    3912:	99 27       	eor	r25, r25
    3914:	88 27       	eor	r24, r24
    3916:	84 2b       	or	r24, r20
    3918:	95 2b       	or	r25, r21
    391a:	a6 2b       	or	r26, r22
    391c:	b7 2b       	or	r27, r23
    391e:	c8 57       	subi	r28, 0x78	; 120
    3920:	df 4f       	sbci	r29, 0xFF	; 255
    3922:	48 81       	ld	r20, Y
    3924:	c8 58       	subi	r28, 0x88	; 136
    3926:	d0 40       	sbci	r29, 0x00	; 0
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	76 2f       	mov	r23, r22
    3930:	65 2f       	mov	r22, r21
    3932:	54 2f       	mov	r21, r20
    3934:	44 27       	eor	r20, r20
    3936:	84 2b       	or	r24, r20
    3938:	95 2b       	or	r25, r21
    393a:	a6 2b       	or	r26, r22
    393c:	b7 2b       	or	r27, r23
    393e:	c7 57       	subi	r28, 0x77	; 119
    3940:	df 4f       	sbci	r29, 0xFF	; 255
    3942:	28 81       	ld	r18, Y
    3944:	c9 58       	subi	r28, 0x89	; 137
    3946:	d0 40       	sbci	r29, 0x00	; 0
    3948:	82 2b       	or	r24, r18
    394a:	80 8b       	std	Z+16, r24	; 0x10
    394c:	91 8b       	std	Z+17, r25	; 0x11
    394e:	a2 8b       	std	Z+18, r26	; 0x12
    3950:	b3 8b       	std	Z+19, r27	; 0x13
    3952:	c6 57       	subi	r28, 0x76	; 118
    3954:	df 4f       	sbci	r29, 0xFF	; 255
    3956:	88 81       	ld	r24, Y
    3958:	ca 58       	subi	r28, 0x8A	; 138
    395a:	d0 40       	sbci	r29, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	a0 e0       	ldi	r26, 0x00	; 0
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	78 2f       	mov	r23, r24
    3964:	66 27       	eor	r22, r22
    3966:	55 27       	eor	r21, r21
    3968:	44 27       	eor	r20, r20
    396a:	c5 57       	subi	r28, 0x75	; 117
    396c:	df 4f       	sbci	r29, 0xFF	; 255
    396e:	98 81       	ld	r25, Y
    3970:	cb 58       	subi	r28, 0x8B	; 139
    3972:	d0 40       	sbci	r29, 0x00	; 0
    3974:	89 2f       	mov	r24, r25
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	a0 e0       	ldi	r26, 0x00	; 0
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	dc 01       	movw	r26, r24
    397e:	99 27       	eor	r25, r25
    3980:	88 27       	eor	r24, r24
    3982:	84 2b       	or	r24, r20
    3984:	95 2b       	or	r25, r21
    3986:	a6 2b       	or	r26, r22
    3988:	b7 2b       	or	r27, r23
    398a:	c4 57       	subi	r28, 0x74	; 116
    398c:	df 4f       	sbci	r29, 0xFF	; 255
    398e:	48 81       	ld	r20, Y
    3990:	cc 58       	subi	r28, 0x8C	; 140
    3992:	d0 40       	sbci	r29, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	76 2f       	mov	r23, r22
    399c:	65 2f       	mov	r22, r21
    399e:	54 2f       	mov	r21, r20
    39a0:	44 27       	eor	r20, r20
    39a2:	84 2b       	or	r24, r20
    39a4:	95 2b       	or	r25, r21
    39a6:	a6 2b       	or	r26, r22
    39a8:	b7 2b       	or	r27, r23
    39aa:	c3 57       	subi	r28, 0x73	; 115
    39ac:	df 4f       	sbci	r29, 0xFF	; 255
    39ae:	28 81       	ld	r18, Y
    39b0:	cd 58       	subi	r28, 0x8D	; 141
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	82 2b       	or	r24, r18
    39b6:	84 8b       	std	Z+20, r24	; 0x14
    39b8:	95 8b       	std	Z+21, r25	; 0x15
    39ba:	a6 8b       	std	Z+22, r26	; 0x16
    39bc:	b7 8b       	std	Z+23, r27	; 0x17
    39be:	c2 57       	subi	r28, 0x72	; 114
    39c0:	df 4f       	sbci	r29, 0xFF	; 255
    39c2:	88 81       	ld	r24, Y
    39c4:	ce 58       	subi	r28, 0x8E	; 142
    39c6:	d0 40       	sbci	r29, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a0 e0       	ldi	r26, 0x00	; 0
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	78 2f       	mov	r23, r24
    39d0:	66 27       	eor	r22, r22
    39d2:	55 27       	eor	r21, r21
    39d4:	44 27       	eor	r20, r20
    39d6:	c1 57       	subi	r28, 0x71	; 113
    39d8:	df 4f       	sbci	r29, 0xFF	; 255
    39da:	98 81       	ld	r25, Y
    39dc:	cf 58       	subi	r28, 0x8F	; 143
    39de:	d0 40       	sbci	r29, 0x00	; 0
    39e0:	89 2f       	mov	r24, r25
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	a0 e0       	ldi	r26, 0x00	; 0
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	dc 01       	movw	r26, r24
    39ea:	99 27       	eor	r25, r25
    39ec:	88 27       	eor	r24, r24
    39ee:	84 2b       	or	r24, r20
    39f0:	95 2b       	or	r25, r21
    39f2:	a6 2b       	or	r26, r22
    39f4:	b7 2b       	or	r27, r23
    39f6:	c0 57       	subi	r28, 0x70	; 112
    39f8:	df 4f       	sbci	r29, 0xFF	; 255
    39fa:	48 81       	ld	r20, Y
    39fc:	c0 59       	subi	r28, 0x90	; 144
    39fe:	d0 40       	sbci	r29, 0x00	; 0
    3a00:	50 e0       	ldi	r21, 0x00	; 0
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	76 2f       	mov	r23, r22
    3a08:	65 2f       	mov	r22, r21
    3a0a:	54 2f       	mov	r21, r20
    3a0c:	44 27       	eor	r20, r20
    3a0e:	84 2b       	or	r24, r20
    3a10:	95 2b       	or	r25, r21
    3a12:	a6 2b       	or	r26, r22
    3a14:	b7 2b       	or	r27, r23
    3a16:	cf 56       	subi	r28, 0x6F	; 111
    3a18:	df 4f       	sbci	r29, 0xFF	; 255
    3a1a:	28 81       	ld	r18, Y
    3a1c:	c1 59       	subi	r28, 0x91	; 145
    3a1e:	d0 40       	sbci	r29, 0x00	; 0
    3a20:	82 2b       	or	r24, r18
    3a22:	80 8f       	std	Z+24, r24	; 0x18
    3a24:	91 8f       	std	Z+25, r25	; 0x19
    3a26:	a2 8f       	std	Z+26, r26	; 0x1a
    3a28:	b3 8f       	std	Z+27, r27	; 0x1b
    3a2a:	20 e1       	ldi	r18, 0x10	; 16
    3a2c:	ae 01       	movw	r20, r28
    3a2e:	4a 58       	subi	r20, 0x8A	; 138
    3a30:	5f 4f       	sbci	r21, 0xFF	; 255
    3a32:	67 e3       	ldi	r22, 0x37	; 55
    3a34:	8f 2d       	mov	r24, r15
    3a36:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    3a3a:	e8 2e       	mov	r14, r24
    3a3c:	f3 e6       	ldi	r31, 0x63	; 99
    3a3e:	8f 13       	cpse	r24, r31
    3a40:	1b c0       	rjmp	.+54     	; 0x3a78 <get_MOTOR_PID+0x3d6>
    3a42:	81 ec       	ldi	r24, 0xC1	; 193
    3a44:	8f 0d       	add	r24, r15
    3a46:	1f 92       	push	r1
    3a48:	8f 93       	push	r24
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	9f 93       	push	r25
    3a50:	8f 93       	push	r24
    3a52:	8e 01       	movw	r16, r28
    3a54:	0a 5d       	subi	r16, 0xDA	; 218
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	1f 93       	push	r17
    3a5a:	0f 93       	push	r16
    3a5c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3a60:	b8 01       	movw	r22, r16
    3a62:	86 e3       	ldi	r24, 0x36	; 54
    3a64:	91 e0       	ldi	r25, 0x01	; 1
    3a66:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	38 c0       	rjmp	.+112    	; 0x3ae8 <get_MOTOR_PID+0x446>
    3a78:	ce 57       	subi	r28, 0x7E	; 126
    3a7a:	df 4f       	sbci	r29, 0xFF	; 255
    3a7c:	88 81       	ld	r24, Y
    3a7e:	c2 58       	subi	r28, 0x82	; 130
    3a80:	d0 40       	sbci	r29, 0x00	; 0
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	a0 e0       	ldi	r26, 0x00	; 0
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	78 2f       	mov	r23, r24
    3a8a:	66 27       	eor	r22, r22
    3a8c:	55 27       	eor	r21, r21
    3a8e:	44 27       	eor	r20, r20
    3a90:	cd 57       	subi	r28, 0x7D	; 125
    3a92:	df 4f       	sbci	r29, 0xFF	; 255
    3a94:	98 81       	ld	r25, Y
    3a96:	c3 58       	subi	r28, 0x83	; 131
    3a98:	d0 40       	sbci	r29, 0x00	; 0
    3a9a:	89 2f       	mov	r24, r25
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	a0 e0       	ldi	r26, 0x00	; 0
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	99 27       	eor	r25, r25
    3aa6:	88 27       	eor	r24, r24
    3aa8:	84 2b       	or	r24, r20
    3aaa:	95 2b       	or	r25, r21
    3aac:	a6 2b       	or	r26, r22
    3aae:	b7 2b       	or	r27, r23
    3ab0:	cc 57       	subi	r28, 0x7C	; 124
    3ab2:	df 4f       	sbci	r29, 0xFF	; 255
    3ab4:	48 81       	ld	r20, Y
    3ab6:	c4 58       	subi	r28, 0x84	; 132
    3ab8:	d0 40       	sbci	r29, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	60 e0       	ldi	r22, 0x00	; 0
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	76 2f       	mov	r23, r22
    3ac2:	65 2f       	mov	r22, r21
    3ac4:	54 2f       	mov	r21, r20
    3ac6:	44 27       	eor	r20, r20
    3ac8:	84 2b       	or	r24, r20
    3aca:	95 2b       	or	r25, r21
    3acc:	a6 2b       	or	r26, r22
    3ace:	b7 2b       	or	r27, r23
    3ad0:	cb 57       	subi	r28, 0x7B	; 123
    3ad2:	df 4f       	sbci	r29, 0xFF	; 255
    3ad4:	28 81       	ld	r18, Y
    3ad6:	c5 58       	subi	r28, 0x85	; 133
    3ad8:	d0 40       	sbci	r29, 0x00	; 0
    3ada:	82 2b       	or	r24, r18
    3adc:	f8 01       	movw	r30, r16
    3ade:	84 8f       	std	Z+28, r24	; 0x1c
    3ae0:	95 8f       	std	Z+29, r25	; 0x1d
    3ae2:	a6 8f       	std	Z+30, r26	; 0x1e
    3ae4:	b7 8f       	std	Z+31, r27	; 0x1f
    3ae6:	e1 2c       	mov	r14, r1
    3ae8:	8e 2d       	mov	r24, r14
    3aea:	cf 56       	subi	r28, 0x6F	; 111
    3aec:	df 4f       	sbci	r29, 0xFF	; 255
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	ff 90       	pop	r15
    3afc:	ef 90       	pop	r14
    3afe:	08 95       	ret

00003b00 <get_MOTOR_S4MODE>:
    3b00:	cf 92       	push	r12
    3b02:	df 92       	push	r13
    3b04:	ef 92       	push	r14
    3b06:	ff 92       	push	r15
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	c7 57       	subi	r28, 0x77	; 119
    3b16:	d1 09       	sbc	r29, r1
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	08 2f       	mov	r16, r24
    3b1e:	7b 01       	movw	r14, r22
    3b20:	84 e2       	ldi	r24, 0x24	; 36
    3b22:	e4 e1       	ldi	r30, 0x14	; 20
    3b24:	fa ea       	ldi	r31, 0xAA	; 170
    3b26:	de 01       	movw	r26, r28
    3b28:	11 96       	adiw	r26, 0x01	; 1
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	0d 92       	st	X+, r0
    3b2e:	8a 95       	dec	r24
    3b30:	e1 f7       	brne	.-8      	; 0x3b2a <get_MOTOR_S4MODE+0x2a>
    3b32:	23 e0       	ldi	r18, 0x03	; 3
    3b34:	ae 01       	movw	r20, r28
    3b36:	4b 58       	subi	r20, 0x8B	; 139
    3b38:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3a:	6b e4       	ldi	r22, 0x4B	; 75
    3b3c:	80 2f       	mov	r24, r16
    3b3e:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    3b42:	18 2f       	mov	r17, r24
    3b44:	83 36       	cpi	r24, 0x63	; 99
    3b46:	f1 f4       	brne	.+60     	; 0x3b84 <get_MOTOR_S4MODE+0x84>
    3b48:	0f 53       	subi	r16, 0x3F	; 63
    3b4a:	1f 92       	push	r1
    3b4c:	0f 93       	push	r16
    3b4e:	ce 01       	movw	r24, r28
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	9f 93       	push	r25
    3b54:	8f 93       	push	r24
    3b56:	6e 01       	movw	r12, r28
    3b58:	85 e2       	ldi	r24, 0x25	; 37
    3b5a:	c8 0e       	add	r12, r24
    3b5c:	d1 1c       	adc	r13, r1
    3b5e:	df 92       	push	r13
    3b60:	cf 92       	push	r12
    3b62:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3b66:	b6 01       	movw	r22, r12
    3b68:	86 e3       	ldi	r24, 0x36	; 54
    3b6a:	91 e0       	ldi	r25, 0x01	; 1
    3b6c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3b70:	8f ef       	ldi	r24, 0xFF	; 255
    3b72:	f7 01       	movw	r30, r14
    3b74:	80 83       	st	Z, r24
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	06 c0       	rjmp	.+12     	; 0x3b90 <get_MOTOR_S4MODE+0x90>
    3b84:	e7 96       	adiw	r28, 0x37	; 55
    3b86:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b88:	e7 97       	sbiw	r28, 0x37	; 55
    3b8a:	f7 01       	movw	r30, r14
    3b8c:	80 83       	st	Z, r24
    3b8e:	10 e0       	ldi	r17, 0x00	; 0
    3b90:	81 2f       	mov	r24, r17
    3b92:	c9 58       	subi	r28, 0x89	; 137
    3b94:	df 4f       	sbci	r29, 0xFF	; 255
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	08 95       	ret

00003bac <get_MOTOR_SPEED>:
    3bac:	ef 92       	push	r14
    3bae:	ff 92       	push	r15
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	c1 58       	subi	r28, 0x81	; 129
    3bbe:	d1 09       	sbc	r29, r1
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	e8 2e       	mov	r14, r24
    3bc6:	8b 01       	movw	r16, r22
    3bc8:	8c e2       	ldi	r24, 0x2C	; 44
    3bca:	e8 e3       	ldi	r30, 0x38	; 56
    3bcc:	fa ea       	ldi	r31, 0xAA	; 170
    3bce:	de 01       	movw	r26, r28
    3bd0:	aa 5a       	subi	r26, 0xAA	; 170
    3bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	0d 92       	st	X+, r0
    3bd8:	8a 95       	dec	r24
    3bda:	e1 f7       	brne	.-8      	; 0x3bd4 <get_MOTOR_SPEED+0x28>
    3bdc:	25 e0       	ldi	r18, 0x05	; 5
    3bde:	ae 01       	movw	r20, r28
    3be0:	4f 5a       	subi	r20, 0xAF	; 175
    3be2:	5f 4f       	sbci	r21, 0xFF	; 255
    3be4:	62 e1       	ldi	r22, 0x12	; 18
    3be6:	8e 2d       	mov	r24, r14
    3be8:	0e 94 86 18 	call	0x310c	; 0x310c <get_MOTOR>
    3bec:	f8 2e       	mov	r15, r24
    3bee:	83 e6       	ldi	r24, 0x63	; 99
    3bf0:	f8 12       	cpse	r15, r24
    3bf2:	1c c0       	rjmp	.+56     	; 0x3c2c <get_MOTOR_SPEED+0x80>
    3bf4:	81 ec       	ldi	r24, 0xC1	; 193
    3bf6:	8e 0d       	add	r24, r14
    3bf8:	1f 92       	push	r1
    3bfa:	8f 93       	push	r24
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	8a 5a       	subi	r24, 0xAA	; 170
    3c00:	9f 4f       	sbci	r25, 0xFF	; 255
    3c02:	9f 93       	push	r25
    3c04:	8f 93       	push	r24
    3c06:	8e 01       	movw	r16, r28
    3c08:	0f 5f       	subi	r16, 0xFF	; 255
    3c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0c:	1f 93       	push	r17
    3c0e:	0f 93       	push	r16
    3c10:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3c14:	b8 01       	movw	r22, r16
    3c16:	86 e3       	ldi	r24, 0x36	; 54
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	30 c0       	rjmp	.+96     	; 0x3c8c <get_MOTOR_SPEED+0xe0>
    3c2c:	62 96       	adiw	r28, 0x12	; 18
    3c2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c30:	62 97       	sbiw	r28, 0x12	; 18
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	a0 e0       	ldi	r26, 0x00	; 0
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	78 2f       	mov	r23, r24
    3c3a:	66 27       	eor	r22, r22
    3c3c:	55 27       	eor	r21, r21
    3c3e:	44 27       	eor	r20, r20
    3c40:	63 96       	adiw	r28, 0x13	; 19
    3c42:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c44:	63 97       	sbiw	r28, 0x13	; 19
    3c46:	89 2f       	mov	r24, r25
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	a0 e0       	ldi	r26, 0x00	; 0
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	dc 01       	movw	r26, r24
    3c50:	99 27       	eor	r25, r25
    3c52:	88 27       	eor	r24, r24
    3c54:	84 2b       	or	r24, r20
    3c56:	95 2b       	or	r25, r21
    3c58:	a6 2b       	or	r26, r22
    3c5a:	b7 2b       	or	r27, r23
    3c5c:	64 96       	adiw	r28, 0x14	; 20
    3c5e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3c60:	64 97       	sbiw	r28, 0x14	; 20
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	70 e0       	ldi	r23, 0x00	; 0
    3c68:	76 2f       	mov	r23, r22
    3c6a:	65 2f       	mov	r22, r21
    3c6c:	54 2f       	mov	r21, r20
    3c6e:	44 27       	eor	r20, r20
    3c70:	84 2b       	or	r24, r20
    3c72:	95 2b       	or	r25, r21
    3c74:	a6 2b       	or	r26, r22
    3c76:	b7 2b       	or	r27, r23
    3c78:	65 96       	adiw	r28, 0x15	; 21
    3c7a:	2f ad       	ldd	r18, Y+63	; 0x3f
    3c7c:	65 97       	sbiw	r28, 0x15	; 21
    3c7e:	82 2b       	or	r24, r18
    3c80:	f8 01       	movw	r30, r16
    3c82:	80 83       	st	Z, r24
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	a2 83       	std	Z+2, r26	; 0x02
    3c88:	b3 83       	std	Z+3, r27	; 0x03
    3c8a:	f1 2c       	mov	r15, r1
    3c8c:	8f 2d       	mov	r24, r15
    3c8e:	cf 57       	subi	r28, 0x7F	; 127
    3c90:	df 4f       	sbci	r29, 0xFF	; 255
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	ff 90       	pop	r15
    3ca0:	ef 90       	pop	r14
    3ca2:	08 95       	ret

00003ca4 <motorsMoving>:
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	ce 57       	subi	r28, 0x7E	; 126
    3cb6:	d1 09       	sbc	r29, r1
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	8a e2       	ldi	r24, 0x2A	; 42
    3cbe:	ed e8       	ldi	r30, 0x8D	; 141
    3cc0:	fa ea       	ldi	r31, 0xAA	; 170
    3cc2:	de 01       	movw	r26, r28
    3cc4:	11 96       	adiw	r26, 0x01	; 1
    3cc6:	01 90       	ld	r0, Z+
    3cc8:	0d 92       	st	X+, r0
    3cca:	8a 95       	dec	r24
    3ccc:	e1 f7       	brne	.-8      	; 0x3cc6 <motorsMoving+0x22>
    3cce:	ef 96       	adiw	r28, 0x3f	; 63
    3cd0:	1c ae       	std	Y+60, r1	; 0x3c
    3cd2:	1d ae       	std	Y+61, r1	; 0x3d
    3cd4:	1e ae       	std	Y+62, r1	; 0x3e
    3cd6:	1f ae       	std	Y+63, r1	; 0x3f
    3cd8:	ef 97       	sbiw	r28, 0x3f	; 63
    3cda:	00 e0       	ldi	r16, 0x00	; 0
    3cdc:	10 e0       	ldi	r17, 0x00	; 0
    3cde:	31 c0       	rjmp	.+98     	; 0x3d42 <motorsMoving+0x9e>
    3ce0:	be 01       	movw	r22, r28
    3ce2:	65 58       	subi	r22, 0x85	; 133
    3ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce6:	80 e8       	ldi	r24, 0x80	; 128
    3ce8:	81 0f       	add	r24, r17
    3cea:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <get_MOTOR_SPEED>
    3cee:	83 36       	cpi	r24, 0x63	; 99
    3cf0:	e1 f4       	brne	.+56     	; 0x3d2a <motorsMoving+0x86>
    3cf2:	1f 92       	push	r1
    3cf4:	81 e4       	ldi	r24, 0x41	; 65
    3cf6:	81 0f       	add	r24, r17
    3cf8:	8f 93       	push	r24
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	9f 93       	push	r25
    3d00:	8f 93       	push	r24
    3d02:	7e 01       	movw	r14, r28
    3d04:	8b e2       	ldi	r24, 0x2B	; 43
    3d06:	e8 0e       	add	r14, r24
    3d08:	f1 1c       	adc	r15, r1
    3d0a:	ff 92       	push	r15
    3d0c:	ef 92       	push	r14
    3d0e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3d12:	b7 01       	movw	r22, r14
    3d14:	86 e3       	ldi	r24, 0x36	; 54
    3d16:	91 e0       	ldi	r25, 0x01	; 1
    3d18:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0b c0       	rjmp	.+22     	; 0x3d40 <motorsMoving+0x9c>
    3d2a:	ef 96       	adiw	r28, 0x3f	; 63
    3d2c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3d2e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3d30:	ae ad       	ldd	r26, Y+62	; 0x3e
    3d32:	bf ad       	ldd	r27, Y+63	; 0x3f
    3d34:	ef 97       	sbiw	r28, 0x3f	; 63
    3d36:	89 2b       	or	r24, r25
    3d38:	8a 2b       	or	r24, r26
    3d3a:	8b 2b       	or	r24, r27
    3d3c:	09 f0       	breq	.+2      	; 0x3d40 <motorsMoving+0x9c>
    3d3e:	0f 5f       	subi	r16, 0xFF	; 255
    3d40:	1f 5f       	subi	r17, 0xFF	; 255
    3d42:	11 23       	and	r17, r17
    3d44:	69 f2       	breq	.-102    	; 0x3ce0 <motorsMoving+0x3c>
    3d46:	00 23       	and	r16, r16
    3d48:	11 f0       	breq	.+4      	; 0x3d4e <motorsMoving+0xaa>
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <motorsMoving+0xac>
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	c2 58       	subi	r28, 0x82	; 130
    3d52:	df 4f       	sbci	r29, 0xFF	; 255
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	08 95       	ret

00003d66 <put_FRAM_ENCODERS>:
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	a2 97       	sbiw	r28, 0x22	; 34
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	86 e0       	ldi	r24, 0x06	; 6
    3d78:	e2 e0       	ldi	r30, 0x02	; 2
    3d7a:	f3 ea       	ldi	r31, 0xA3	; 163
    3d7c:	de 01       	movw	r26, r28
    3d7e:	59 96       	adiw	r26, 0x19	; 25
    3d80:	01 90       	ld	r0, Z+
    3d82:	0d 92       	st	X+, r0
    3d84:	8a 95       	dec	r24
    3d86:	e1 f7       	brne	.-8      	; 0x3d80 <put_FRAM_ENCODERS+0x1a>
    3d88:	10 e0       	ldi	r17, 0x00	; 0
    3d8a:	27 c0       	rjmp	.+78     	; 0x3dda <put_FRAM_ENCODERS+0x74>
    3d8c:	be 01       	movw	r22, r28
    3d8e:	61 5e       	subi	r22, 0xE1	; 225
    3d90:	7f 4f       	sbci	r23, 0xFF	; 255
    3d92:	80 e8       	ldi	r24, 0x80	; 128
    3d94:	81 0f       	add	r24, r17
    3d96:	0e 94 ce 19 	call	0x339c	; 0x339c <get_MOTOR_ENCODER>
    3d9a:	83 36       	cpi	r24, 0x63	; 99
    3d9c:	71 f1       	breq	.+92     	; 0x3dfa <put_FRAM_ENCODERS+0x94>
    3d9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3da0:	98 a1       	ldd	r25, Y+32	; 0x20
    3da2:	29 a1       	ldd	r18, Y+33	; 0x21
    3da4:	3a a1       	ldd	r19, Y+34	; 0x22
    3da6:	3d 8b       	std	Y+21, r19	; 0x15
    3da8:	2e 8b       	std	Y+22, r18	; 0x16
    3daa:	9f 8b       	std	Y+23, r25	; 0x17
    3dac:	88 8f       	std	Y+24, r24	; 0x18
    3dae:	e1 2f       	mov	r30, r17
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	ee 0f       	add	r30, r30
    3db4:	ff 1f       	adc	r31, r31
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	8c 0f       	add	r24, r28
    3dbc:	9d 1f       	adc	r25, r29
    3dbe:	e8 0f       	add	r30, r24
    3dc0:	f9 1f       	adc	r31, r25
    3dc2:	60 8d       	ldd	r22, Z+24	; 0x18
    3dc4:	71 8d       	ldd	r23, Z+25	; 0x19
    3dc6:	24 e0       	ldi	r18, 0x04	; 4
    3dc8:	ae 01       	movw	r20, r28
    3dca:	4b 5e       	subi	r20, 0xEB	; 235
    3dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dce:	80 e5       	ldi	r24, 0x50	; 80
    3dd0:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    3dd4:	83 36       	cpi	r24, 0x63	; 99
    3dd6:	89 f0       	breq	.+34     	; 0x3dfa <put_FRAM_ENCODERS+0x94>
    3dd8:	1f 5f       	subi	r17, 0xFF	; 255
    3dda:	11 23       	and	r17, r17
    3ddc:	b9 f2       	breq	.-82     	; 0x3d8c <put_FRAM_ENCODERS+0x26>
    3dde:	ce 01       	movw	r24, r28
    3de0:	01 96       	adiw	r24, 0x01	; 1
    3de2:	0e 94 76 07 	call	0xeec	; 0xeec <get_time>
    3de6:	24 e1       	ldi	r18, 0x14	; 20
    3de8:	ae 01       	movw	r20, r28
    3dea:	4f 5f       	subi	r20, 0xFF	; 255
    3dec:	5f 4f       	sbci	r21, 0xFF	; 255
    3dee:	60 e2       	ldi	r22, 0x20	; 32
    3df0:	70 e0       	ldi	r23, 0x00	; 0
    3df2:	80 e5       	ldi	r24, 0x50	; 80
    3df4:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	a2 96       	adiw	r28, 0x22	; 34
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	08 95       	ret

00003e08 <put_MOTOR>:
    3e08:	8f 92       	push	r8
    3e0a:	9f 92       	push	r9
    3e0c:	af 92       	push	r10
    3e0e:	bf 92       	push	r11
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	ff 92       	push	r15
    3e18:	0f 93       	push	r16
    3e1a:	1f 93       	push	r17
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	c5 59       	subi	r28, 0x95	; 149
    3e26:	d1 09       	sbc	r29, r1
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	a8 2e       	mov	r10, r24
    3e2e:	b2 2e       	mov	r11, r18
    3e30:	cd b6       	in	r12, 0x3d	; 61
    3e32:	de b6       	in	r13, 0x3e	; 62
    3e34:	80 e2       	ldi	r24, 0x20	; 32
    3e36:	e7 eb       	ldi	r30, 0xB7	; 183
    3e38:	fa ea       	ldi	r31, 0xAA	; 170
    3e3a:	de 01       	movw	r26, r28
    3e3c:	11 96       	adiw	r26, 0x01	; 1
    3e3e:	01 90       	ld	r0, Z+
    3e40:	0d 92       	st	X+, r0
    3e42:	8a 95       	dec	r24
    3e44:	e1 f7       	brne	.-8      	; 0x3e3e <put_MOTOR+0x36>
    3e46:	85 e2       	ldi	r24, 0x25	; 37
    3e48:	e7 ed       	ldi	r30, 0xD7	; 215
    3e4a:	fa ea       	ldi	r31, 0xAA	; 170
    3e4c:	de 01       	movw	r26, r28
    3e4e:	91 96       	adiw	r26, 0x21	; 33
    3e50:	01 90       	ld	r0, Z+
    3e52:	0d 92       	st	X+, r0
    3e54:	8a 95       	dec	r24
    3e56:	e1 f7       	brne	.-8      	; 0x3e50 <put_MOTOR+0x48>
    3e58:	82 2e       	mov	r8, r18
    3e5a:	91 2c       	mov	r9, r1
    3e5c:	c4 01       	movw	r24, r8
    3e5e:	04 96       	adiw	r24, 0x04	; 4
    3e60:	74 01       	movw	r14, r8
    3e62:	23 e0       	ldi	r18, 0x03	; 3
    3e64:	e2 0e       	add	r14, r18
    3e66:	f1 1c       	adc	r15, r1
    3e68:	ad b7       	in	r26, 0x3d	; 61
    3e6a:	be b7       	in	r27, 0x3e	; 62
    3e6c:	a8 1b       	sub	r26, r24
    3e6e:	b9 0b       	sbc	r27, r25
    3e70:	ad bf       	out	0x3d, r26	; 61
    3e72:	be bf       	out	0x3e, r27	; 62
    3e74:	0d b7       	in	r16, 0x3d	; 61
    3e76:	1e b7       	in	r17, 0x3e	; 62
    3e78:	0f 5f       	subi	r16, 0xFF	; 255
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	80 93 39 2b 	sts	0x2B39, r24	; 0x802b39 <ser_recv1+0xfe>
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	ac 92       	st	X, r10
    3e8c:	61 83       	std	Z+1, r22	; 0x01
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	0e c0       	rjmp	.+28     	; 0x3eae <put_MOTOR+0xa6>
    3e92:	86 2f       	mov	r24, r22
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	9c 01       	movw	r18, r24
    3e98:	2e 5f       	subi	r18, 0xFE	; 254
    3e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9c:	da 01       	movw	r26, r20
    3e9e:	a8 0f       	add	r26, r24
    3ea0:	b9 1f       	adc	r27, r25
    3ea2:	8c 91       	ld	r24, X
    3ea4:	df 01       	movw	r26, r30
    3ea6:	a2 0f       	add	r26, r18
    3ea8:	b3 1f       	adc	r27, r19
    3eaa:	8c 93       	st	X, r24
    3eac:	6f 5f       	subi	r22, 0xFF	; 255
    3eae:	6b 15       	cp	r22, r11
    3eb0:	80 f3       	brcs	.-32     	; 0x3e92 <put_MOTOR+0x8a>
    3eb2:	b2 e0       	ldi	r27, 0x02	; 2
    3eb4:	8b 0e       	add	r8, r27
    3eb6:	91 1c       	adc	r9, r1
    3eb8:	b4 01       	movw	r22, r8
    3eba:	c8 01       	movw	r24, r16
    3ebc:	0e 94 82 17 	call	0x2f04	; 0x2f04 <crc16>
    3ec0:	d8 01       	movw	r26, r16
    3ec2:	a8 0d       	add	r26, r8
    3ec4:	b9 1d       	adc	r27, r9
    3ec6:	9c 93       	st	X, r25
    3ec8:	f8 01       	movw	r30, r16
    3eca:	ee 0d       	add	r30, r14
    3ecc:	ff 1d       	adc	r31, r15
    3ece:	80 83       	st	Z, r24
    3ed0:	64 e0       	ldi	r22, 0x04	; 4
    3ed2:	6b 0d       	add	r22, r11
    3ed4:	c8 01       	movw	r24, r16
    3ed6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <send_USART1>
    3eda:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    3ede:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    3ee2:	24 c0       	rjmp	.+72     	; 0x3f2c <put_MOTOR+0x124>
    3ee4:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3ee8:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3eec:	85 36       	cpi	r24, 0x65	; 101
    3eee:	91 05       	cpc	r25, r1
    3ef0:	e0 f0       	brcs	.+56     	; 0x3f2a <put_MOTOR+0x122>
    3ef2:	81 ec       	ldi	r24, 0xC1	; 193
    3ef4:	8a 0d       	add	r24, r10
    3ef6:	1f 92       	push	r1
    3ef8:	8f 93       	push	r24
    3efa:	ce 01       	movw	r24, r28
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	9f 93       	push	r25
    3f00:	8f 93       	push	r24
    3f02:	8e 01       	movw	r16, r28
    3f04:	0a 5b       	subi	r16, 0xBA	; 186
    3f06:	1f 4f       	sbci	r17, 0xFF	; 255
    3f08:	1f 93       	push	r17
    3f0a:	0f 93       	push	r16
    3f0c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3f10:	b8 01       	movw	r22, r16
    3f12:	86 e3       	ldi	r24, 0x36	; 54
    3f14:	91 e0       	ldi	r25, 0x01	; 1
    3f16:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	83 e6       	ldi	r24, 0x63	; 99
    3f28:	2a c0       	rjmp	.+84     	; 0x3f7e <put_MOTOR+0x176>
    3f2a:	00 00       	nop
    3f2c:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    3f30:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    3f34:	98 17       	cp	r25, r24
    3f36:	b0 f2       	brcs	.-84     	; 0x3ee4 <put_MOTOR+0xdc>
    3f38:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <ser_recv1>
    3f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f3e:	f1 f0       	breq	.+60     	; 0x3f7c <put_MOTOR+0x174>
    3f40:	81 ec       	ldi	r24, 0xC1	; 193
    3f42:	8a 0d       	add	r24, r10
    3f44:	1f 92       	push	r1
    3f46:	9f 93       	push	r25
    3f48:	1f 92       	push	r1
    3f4a:	8f 93       	push	r24
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	81 96       	adiw	r24, 0x21	; 33
    3f50:	9f 93       	push	r25
    3f52:	8f 93       	push	r24
    3f54:	8e 01       	movw	r16, r28
    3f56:	0a 5b       	subi	r16, 0xBA	; 186
    3f58:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5a:	1f 93       	push	r17
    3f5c:	0f 93       	push	r16
    3f5e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    3f62:	b8 01       	movw	r22, r16
    3f64:	86 e3       	ldi	r24, 0x36	; 54
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    3f6c:	2d b7       	in	r18, 0x3d	; 61
    3f6e:	3e b7       	in	r19, 0x3e	; 62
    3f70:	28 5f       	subi	r18, 0xF8	; 248
    3f72:	3f 4f       	sbci	r19, 0xFF	; 255
    3f74:	2d bf       	out	0x3d, r18	; 61
    3f76:	3e bf       	out	0x3e, r19	; 62
    3f78:	83 e6       	ldi	r24, 0x63	; 99
    3f7a:	01 c0       	rjmp	.+2      	; 0x3f7e <put_MOTOR+0x176>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	cd be       	out	0x3d, r12	; 61
    3f80:	de be       	out	0x3e, r13	; 62
    3f82:	cb 56       	subi	r28, 0x6B	; 107
    3f84:	df 4f       	sbci	r29, 0xFF	; 255
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	df 90       	pop	r13
    3f98:	cf 90       	pop	r12
    3f9a:	bf 90       	pop	r11
    3f9c:	af 90       	pop	r10
    3f9e:	9f 90       	pop	r9
    3fa0:	8f 90       	pop	r8
    3fa2:	08 95       	ret

00003fa4 <move_MOTOR>:
    3fa4:	ef 92       	push	r14
    3fa6:	ff 92       	push	r15
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	c3 58       	subi	r28, 0x83	; 131
    3fb6:	d1 09       	sbc	r29, r1
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	08 2f       	mov	r16, r24
    3fbe:	82 e2       	ldi	r24, 0x22	; 34
    3fc0:	ec ef       	ldi	r30, 0xFC	; 252
    3fc2:	fa ea       	ldi	r31, 0xAA	; 170
    3fc4:	de 01       	movw	r26, r28
    3fc6:	11 96       	adiw	r26, 0x01	; 1
    3fc8:	01 90       	ld	r0, Z+
    3fca:	0d 92       	st	X+, r0
    3fcc:	8a 95       	dec	r24
    3fce:	e1 f7       	brne	.-8      	; 0x3fc8 <move_MOTOR+0x24>
    3fd0:	e4 96       	adiw	r28, 0x34	; 52
    3fd2:	1f ae       	std	Y+63, r1	; 0x3f
    3fd4:	e4 97       	sbiw	r28, 0x34	; 52
    3fd6:	e5 96       	adiw	r28, 0x35	; 53
    3fd8:	1f ae       	std	Y+63, r1	; 0x3f
    3fda:	e5 97       	sbiw	r28, 0x35	; 53
    3fdc:	9b e1       	ldi	r25, 0x1B	; 27
    3fde:	e6 96       	adiw	r28, 0x36	; 54
    3fe0:	9f af       	std	Y+63, r25	; 0x3f
    3fe2:	e6 97       	sbiw	r28, 0x36	; 54
    3fe4:	85 ea       	ldi	r24, 0xA5	; 165
    3fe6:	e7 96       	adiw	r28, 0x37	; 55
    3fe8:	8f af       	std	Y+63, r24	; 0x3f
    3fea:	e7 97       	sbiw	r28, 0x37	; 55
    3fec:	e8 96       	adiw	r28, 0x38	; 56
    3fee:	1f ae       	std	Y+63, r1	; 0x3f
    3ff0:	e8 97       	sbiw	r28, 0x38	; 56
    3ff2:	e9 96       	adiw	r28, 0x39	; 57
    3ff4:	1f ae       	std	Y+63, r1	; 0x3f
    3ff6:	e9 97       	sbiw	r28, 0x39	; 57
    3ff8:	ea 96       	adiw	r28, 0x3a	; 58
    3ffa:	9f af       	std	Y+63, r25	; 0x3f
    3ffc:	ea 97       	sbiw	r28, 0x3a	; 58
    3ffe:	eb 96       	adiw	r28, 0x3b	; 59
    4000:	8f af       	std	Y+63, r24	; 0x3f
    4002:	eb 97       	sbiw	r28, 0x3b	; 59
    4004:	ec 96       	adiw	r28, 0x3c	; 60
    4006:	1f ae       	std	Y+63, r1	; 0x3f
    4008:	ec 97       	sbiw	r28, 0x3c	; 60
    400a:	ed 96       	adiw	r28, 0x3d	; 61
    400c:	1f ae       	std	Y+63, r1	; 0x3f
    400e:	ed 97       	sbiw	r28, 0x3d	; 61
    4010:	8d e0       	ldi	r24, 0x0D	; 13
    4012:	ee 96       	adiw	r28, 0x3e	; 62
    4014:	8f af       	std	Y+63, r24	; 0x3f
    4016:	ee 97       	sbiw	r28, 0x3e	; 62
    4018:	82 ed       	ldi	r24, 0xD2	; 210
    401a:	ef 96       	adiw	r28, 0x3f	; 63
    401c:	8f af       	std	Y+63, r24	; 0x3f
    401e:	ef 97       	sbiw	r28, 0x3f	; 63
    4020:	c1 58       	subi	r28, 0x81	; 129
    4022:	df 4f       	sbci	r29, 0xFF	; 255
    4024:	78 83       	st	Y, r23
    4026:	cf 57       	subi	r28, 0x7F	; 127
    4028:	d0 40       	sbci	r29, 0x00	; 0
    402a:	c0 58       	subi	r28, 0x80	; 128
    402c:	df 4f       	sbci	r29, 0xFF	; 255
    402e:	68 83       	st	Y, r22
    4030:	c0 58       	subi	r28, 0x80	; 128
    4032:	d0 40       	sbci	r29, 0x00	; 0
    4034:	cf 57       	subi	r28, 0x7F	; 127
    4036:	df 4f       	sbci	r29, 0xFF	; 255
    4038:	58 83       	st	Y, r21
    403a:	c1 58       	subi	r28, 0x81	; 129
    403c:	d0 40       	sbci	r29, 0x00	; 0
    403e:	ce 57       	subi	r28, 0x7E	; 126
    4040:	df 4f       	sbci	r29, 0xFF	; 255
    4042:	48 83       	st	Y, r20
    4044:	c2 58       	subi	r28, 0x82	; 130
    4046:	d0 40       	sbci	r29, 0x00	; 0
    4048:	cd 57       	subi	r28, 0x7D	; 125
    404a:	df 4f       	sbci	r29, 0xFF	; 255
    404c:	18 82       	st	Y, r1
    404e:	c3 58       	subi	r28, 0x83	; 131
    4050:	d0 40       	sbci	r29, 0x00	; 0
    4052:	21 e1       	ldi	r18, 0x11	; 17
    4054:	ae 01       	movw	r20, r28
    4056:	4d 58       	subi	r20, 0x8D	; 141
    4058:	5f 4f       	sbci	r21, 0xFF	; 255
    405a:	61 e4       	ldi	r22, 0x41	; 65
    405c:	80 2f       	mov	r24, r16
    405e:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <put_MOTOR>
    4062:	18 2f       	mov	r17, r24
    4064:	83 36       	cpi	r24, 0x63	; 99
    4066:	d9 f4       	brne	.+54     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    4068:	0f 53       	subi	r16, 0x3F	; 63
    406a:	1f 92       	push	r1
    406c:	0f 93       	push	r16
    406e:	ce 01       	movw	r24, r28
    4070:	01 96       	adiw	r24, 0x01	; 1
    4072:	9f 93       	push	r25
    4074:	8f 93       	push	r24
    4076:	7e 01       	movw	r14, r28
    4078:	83 e2       	ldi	r24, 0x23	; 35
    407a:	e8 0e       	add	r14, r24
    407c:	f1 1c       	adc	r15, r1
    407e:	ff 92       	push	r15
    4080:	ef 92       	push	r14
    4082:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
    4086:	b7 01       	movw	r22, r14
    4088:	86 e3       	ldi	r24, 0x36	; 54
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	01 c0       	rjmp	.+2      	; 0x40a0 <__RODATA_PM_OFFSET__+0xa0>
    409e:	10 e0       	ldi	r17, 0x00	; 0
    40a0:	81 2f       	mov	r24, r17
    40a2:	cd 57       	subi	r28, 0x7D	; 125
    40a4:	df 4f       	sbci	r29, 0xFF	; 255
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	de bf       	out	0x3e, r29	; 62
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	ff 90       	pop	r15
    40b4:	ef 90       	pop	r14
    40b6:	08 95       	ret

000040b8 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    40b8:	8f 92       	push	r8
    40ba:	9f 92       	push	r9
    40bc:	af 92       	push	r10
    40be:	bf 92       	push	r11
    40c0:	df 92       	push	r13
    40c2:	ef 92       	push	r14
    40c4:	ff 92       	push	r15
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	c9 5b       	subi	r28, 0xB9	; 185
    40d4:	d1 09       	sbc	r29, r1
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	4b 01       	movw	r8, r22
    40dc:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    40de:	82 e3       	ldi	r24, 0x32	; 50
    40e0:	e3 eb       	ldi	r30, 0xB3	; 179
    40e2:	fb ea       	ldi	r31, 0xAB	; 171
    40e4:	de 01       	movw	r26, r28
    40e6:	a3 5a       	subi	r26, 0xA3	; 163
    40e8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ea:	01 90       	ld	r0, Z+
    40ec:	0d 92       	st	X+, r0
    40ee:	8a 95       	dec	r24
    40f0:	e1 f7       	brne	.-8      	; 0x40ea <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    40f2:	8b e2       	ldi	r24, 0x2B	; 43
    40f4:	e5 ee       	ldi	r30, 0xE5	; 229
    40f6:	fb ea       	ldi	r31, 0xAB	; 171
    40f8:	de 01       	movw	r26, r28
    40fa:	a1 57       	subi	r26, 0x71	; 113
    40fc:	bf 4f       	sbci	r27, 0xFF	; 255
    40fe:	01 90       	ld	r0, Z+
    4100:	0d 92       	st	X+, r0
    4102:	8a 95       	dec	r24
    4104:	e1 f7       	brne	.-8      	; 0x40fe <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    4106:	10 e0       	ldi	r17, 0x00	; 0
    4108:	6a c0       	rjmp	.+212    	; 0x41de <move_MOTORS_PISTON+0x126>
		mtraddr = i + MOTOR_A;
    410a:	68 94       	set
    410c:	dd 24       	eor	r13, r13
    410e:	d7 f8       	bld	r13, 7
    4110:	d1 0e       	add	r13, r17
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    4112:	e1 2e       	mov	r14, r17
    4114:	f1 2c       	mov	r15, r1
    4116:	b7 01       	movw	r22, r14
    4118:	66 0f       	add	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	66 0f       	add	r22, r22
    411e:	77 1f       	adc	r23, r23
    4120:	81 e5       	ldi	r24, 0x51	; 81
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	8c 0f       	add	r24, r28
    4126:	9d 1f       	adc	r25, r29
    4128:	68 0f       	add	r22, r24
    412a:	79 1f       	adc	r23, r25
    412c:	8d 2d       	mov	r24, r13
    412e:	0e 94 ce 19 	call	0x339c	; 0x339c <get_MOTOR_ENCODER>
    4132:	08 2f       	mov	r16, r24
    4134:	83 36       	cpi	r24, 0x63	; 99
    4136:	e9 f4       	brne	.+58     	; 0x4172 <move_MOTORS_PISTON+0xba>
			sprintf(strbuf, fmt0, mtraddr-63);
    4138:	8d 2d       	mov	r24, r13
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	cf 97       	sbiw	r24, 0x3f	; 63
    413e:	9f 93       	push	r25
    4140:	8f 93       	push	r24
    4142:	ce 01       	movw	r24, r28
    4144:	83 5a       	subi	r24, 0xA3	; 163
    4146:	9f 4f       	sbci	r25, 0xFF	; 255
    4148:	9f 93       	push	r25
    414a:	8f 93       	push	r24
    414c:	8c 55       	subi	r24, 0x5C	; 92
    414e:	91 09       	sbc	r25, r1
    4150:	7c 01       	movw	r14, r24
    4152:	9f 93       	push	r25
    4154:	8f 93       	push	r24
    4156:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printError(ERR_MTR, strbuf);
    415a:	b7 01       	movw	r22, r14
    415c:	86 e3       	ldi	r24, 0x36	; 54
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	0f 90       	pop	r0
    4170:	3a c0       	rjmp	.+116    	; 0x41e6 <move_MOTORS_PISTON+0x12e>
		}

		newPos[i] = curPos[i] + deltaValue;
    4172:	ee 0c       	add	r14, r14
    4174:	ff 1c       	adc	r15, r15
    4176:	ee 0c       	add	r14, r14
    4178:	ff 1c       	adc	r15, r15
    417a:	e1 e5       	ldi	r30, 0x51	; 81
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	ec 0f       	add	r30, r28
    4180:	fd 1f       	adc	r31, r29
    4182:	ee 0d       	add	r30, r14
    4184:	ff 1d       	adc	r31, r15
    4186:	40 81       	ld	r20, Z
    4188:	51 81       	ldd	r21, Z+1	; 0x01
    418a:	62 81       	ldd	r22, Z+2	; 0x02
    418c:	73 81       	ldd	r23, Z+3	; 0x03
    418e:	48 0d       	add	r20, r8
    4190:	59 1d       	adc	r21, r9
    4192:	6a 1d       	adc	r22, r10
    4194:	7b 1d       	adc	r23, r11

		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    4196:	8d 2d       	mov	r24, r13
    4198:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <move_MOTOR>
    419c:	08 2f       	mov	r16, r24
    419e:	83 36       	cpi	r24, 0x63	; 99
    41a0:	e9 f4       	brne	.+58     	; 0x41dc <move_MOTORS_PISTON+0x124>
			sprintf(strbuf, fmt1, mtraddr-63);
    41a2:	8d 2d       	mov	r24, r13
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	cf 97       	sbiw	r24, 0x3f	; 63
    41a8:	9f 93       	push	r25
    41aa:	8f 93       	push	r24
    41ac:	ce 01       	movw	r24, r28
    41ae:	81 57       	subi	r24, 0x71	; 113
    41b0:	9f 4f       	sbci	r25, 0xFF	; 255
    41b2:	9f 93       	push	r25
    41b4:	8f 93       	push	r24
    41b6:	8e 58       	subi	r24, 0x8E	; 142
    41b8:	91 09       	sbc	r25, r1
    41ba:	7c 01       	movw	r14, r24
    41bc:	9f 93       	push	r25
    41be:	8f 93       	push	r24
    41c0:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printError(ERR_MTR, strbuf);
    41c4:	b7 01       	movw	r22, r14
    41c6:	86 e3       	ldi	r24, 0x36	; 54
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <move_MOTORS_PISTON+0x12e>
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    41dc:	1f 5f       	subi	r17, 0xFF	; 255
    41de:	11 23       	and	r17, r17
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <move_MOTORS_PISTON+0x12c>
    41e2:	93 cf       	rjmp	.-218    	; 0x410a <move_MOTORS_PISTON+0x52>
			printError(ERR_MTR, strbuf);
			return(ERROR);
		}
	}

	return(NOERROR);
    41e4:	00 e0       	ldi	r16, 0x00	; 0

}
    41e6:	80 2f       	mov	r24, r16
    41e8:	c7 54       	subi	r28, 0x47	; 71
    41ea:	df 4f       	sbci	r29, 0xFF	; 255
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	de bf       	out	0x3e, r29	; 62
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	ff 90       	pop	r15
    41fa:	ef 90       	pop	r14
    41fc:	df 90       	pop	r13
    41fe:	bf 90       	pop	r11
    4200:	af 90       	pop	r10
    4202:	9f 90       	pop	r9
    4204:	8f 90       	pop	r8
    4206:	08 95       	ret

00004208 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4208:	ef 92       	push	r14
    420a:	ff 92       	push	r15
    420c:	0f 93       	push	r16
    420e:	1f 93       	push	r17
    4210:	cf 93       	push	r28
    4212:	df 93       	push	r29
    4214:	cd b7       	in	r28, 0x3d	; 61
    4216:	de b7       	in	r29, 0x3e	; 62
    4218:	cd 57       	subi	r28, 0x7D	; 125
    421a:	d1 09       	sbc	r29, r1
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4222:	89 e2       	ldi	r24, 0x29	; 41
    4224:	e0 e1       	ldi	r30, 0x10	; 16
    4226:	fc ea       	ldi	r31, 0xAC	; 172
    4228:	de 01       	movw	r26, r28
    422a:	11 96       	adiw	r26, 0x01	; 1
    422c:	01 90       	ld	r0, Z+
    422e:	0d 92       	st	X+, r0
    4230:	8a 95       	dec	r24
    4232:	e1 f7       	brne	.-8      	; 0x422c <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    4234:	eb 96       	adiw	r28, 0x3b	; 59
    4236:	7f af       	std	Y+63, r23	; 0x3f
    4238:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    423a:	ec 96       	adiw	r28, 0x3c	; 60
    423c:	6f af       	std	Y+63, r22	; 0x3f
    423e:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4240:	ed 96       	adiw	r28, 0x3d	; 61
    4242:	5f af       	std	Y+63, r21	; 0x3f
    4244:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    4246:	ee 96       	adiw	r28, 0x3e	; 62
    4248:	4f af       	std	Y+63, r20	; 0x3f
    424a:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    424c:	24 e0       	ldi	r18, 0x04	; 4
    424e:	ae 01       	movw	r20, r28
    4250:	46 58       	subi	r20, 0x86	; 134
    4252:	5f 4f       	sbci	r21, 0xFF	; 255
    4254:	66 e1       	ldi	r22, 0x16	; 22
    4256:	80 2f       	mov	r24, r16
    4258:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <put_MOTOR>
    425c:	18 2f       	mov	r17, r24
    425e:	83 36       	cpi	r24, 0x63	; 99
    4260:	d9 f4       	brne	.+54     	; 0x4298 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4262:	0f 53       	subi	r16, 0x3F	; 63
    4264:	1f 92       	push	r1
    4266:	0f 93       	push	r16
    4268:	ce 01       	movw	r24, r28
    426a:	01 96       	adiw	r24, 0x01	; 1
    426c:	9f 93       	push	r25
    426e:	8f 93       	push	r24
    4270:	7e 01       	movw	r14, r28
    4272:	8a e2       	ldi	r24, 0x2A	; 42
    4274:	e8 0e       	add	r14, r24
    4276:	f1 1c       	adc	r15, r1
    4278:	ff 92       	push	r15
    427a:	ef 92       	push	r14
    427c:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_MTR, strbuf);
    4280:	b7 01       	movw	r22, r14
    4282:	86 e3       	ldi	r24, 0x36	; 54
    4284:	91 e0       	ldi	r25, 0x01	; 1
    4286:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	01 c0       	rjmp	.+2      	; 0x429a <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4298:	10 e0       	ldi	r17, 0x00	; 0

}
    429a:	81 2f       	mov	r24, r17
    429c:	c3 58       	subi	r28, 0x83	; 131
    429e:	df 4f       	sbci	r29, 0xFF	; 255
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	de bf       	out	0x3e, r29	; 62
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	08 95       	ret

000042b2 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	00 d0       	rcall	.+0      	; 0x42bc <init_MOTORS+0xa>
    42bc:	00 d0       	rcall	.+0      	; 0x42be <init_MOTORS+0xc>
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	2a e6       	ldi	r18, 0x6A	; 106
    42c4:	84 e0       	ldi	r24, 0x04	; 4
    42c6:	91 e0       	ldi	r25, 0x01	; 1
    42c8:	21 50       	subi	r18, 0x01	; 1
    42ca:	80 40       	sbci	r24, 0x00	; 0
    42cc:	90 40       	sbci	r25, 0x00	; 0
    42ce:	e1 f7       	brne	.-8      	; 0x42c8 <init_MOTORS+0x16>
    42d0:	00 c0       	rjmp	.+0      	; 0x42d2 <init_MOTORS+0x20>

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    42d2:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    42d6:	8b e0       	ldi	r24, 0x0B	; 11
    42d8:	80 93 39 2a 	sts	0x2A39, r24	; 0x802a39 <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    42dc:	10 e0       	ldi	r17, 0x00	; 0
    42de:	10 c0       	rjmp	.+32     	; 0x4300 <init_MOTORS+0x4e>
		mtraddr = i + MOTOR_A;
    42e0:	00 e8       	ldi	r16, 0x80	; 128
    42e2:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    42e4:	be 01       	movw	r22, r28
    42e6:	6f 5f       	subi	r22, 0xFF	; 255
    42e8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ea:	80 2f       	mov	r24, r16
    42ec:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    42f0:	49 81       	ldd	r20, Y+1	; 0x01
    42f2:	5a 81       	ldd	r21, Y+2	; 0x02
    42f4:	6b 81       	ldd	r22, Y+3	; 0x03
    42f6:	7c 81       	ldd	r23, Y+4	; 0x04
    42f8:	80 2f       	mov	r24, r16
    42fa:	0e 94 04 21 	call	0x4208	; 0x4208 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (i = 0; i < NMOTORS; i++) {
    42fe:	1f 5f       	subi	r17, 0xFF	; 255
    4300:	11 23       	and	r17, r17
    4302:	71 f3       	breq	.-36     	; 0x42e0 <init_MOTORS+0x2e>

	}

	return(NOERROR);

}
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	24 96       	adiw	r28, 0x04	; 4
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	08 95       	ret

00004316 <stop_MOTORS>:

	Returns:
		ERROR if the stop_MOTOR command fails
------------------------------------------------------------------------------*/
uint8_t stop_MOTORS(void)
{
    4316:	ef 92       	push	r14
    4318:	ff 92       	push	r15
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	c4 57       	subi	r28, 0x74	; 116
    4328:	d1 09       	sbc	r29, r1
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";
    432e:	83 e2       	ldi	r24, 0x23	; 35
    4330:	e9 e3       	ldi	r30, 0x39	; 57
    4332:	fc ea       	ldi	r31, 0xAC	; 172
    4334:	de 01       	movw	r26, r28
    4336:	ae 5a       	subi	r26, 0xAE	; 174
    4338:	bf 4f       	sbci	r27, 0xFF	; 255
    433a:	01 90       	ld	r0, Z+
    433c:	0d 92       	st	X+, r0
    433e:	8a 95       	dec	r24
    4340:	e1 f7       	brne	.-8      	; 0x433a <stop_MOTORS+0x24>

	tbuf[0] = STOP;
    4342:	62 96       	adiw	r28, 0x12	; 18
    4344:	1f ae       	std	Y+63, r1	; 0x3f
    4346:	62 97       	sbiw	r28, 0x12	; 18
	errflag = 0;
    4348:	00 e0       	ldi	r16, 0x00	; 0
	for (i = 0; i < NMOTORS; i++) {
    434a:	10 e0       	ldi	r17, 0x00	; 0
    434c:	28 c0       	rjmp	.+80     	; 0x439e <stop_MOTORS+0x88>
		mtraddr = i + MOTOR_A;
		if (put_MOTOR(mtraddr, STOP, tbuf, 1) == ERROR) {
    434e:	21 e0       	ldi	r18, 0x01	; 1
    4350:	ae 01       	movw	r20, r28
    4352:	4f 5a       	subi	r20, 0xAF	; 175
    4354:	5f 4f       	sbci	r21, 0xFF	; 255
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	80 e8       	ldi	r24, 0x80	; 128
    435a:	81 0f       	add	r24, r17
    435c:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <put_MOTOR>
    4360:	83 36       	cpi	r24, 0x63	; 99
    4362:	e1 f4       	brne	.+56     	; 0x439c <stop_MOTORS+0x86>
			sprintf(strbuf, fmt, (char) (mtraddr-63));
    4364:	1f 92       	push	r1
    4366:	81 e4       	ldi	r24, 0x41	; 65
    4368:	81 0f       	add	r24, r17
    436a:	8f 93       	push	r24
    436c:	ce 01       	movw	r24, r28
    436e:	8e 5a       	subi	r24, 0xAE	; 174
    4370:	9f 4f       	sbci	r25, 0xFF	; 255
    4372:	9f 93       	push	r25
    4374:	8f 93       	push	r24
    4376:	81 55       	subi	r24, 0x51	; 81
    4378:	91 09       	sbc	r25, r1
    437a:	7c 01       	movw	r14, r24
    437c:	9f 93       	push	r25
    437e:	8f 93       	push	r24
    4380:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printError(ERR_MTR, strbuf);
    4384:	b7 01       	movw	r22, r14
    4386:	86 e3       	ldi	r24, 0x36	; 54
    4388:	91 e0       	ldi	r25, 0x01	; 1
    438a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			errflag++;
    438e:	0f 5f       	subi	r16, 0xFF	; 255
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
	uint8_t i, tbuf[1], mtraddr, errflag;
	const char fmt[] = "stop_MOTORS: put_MOTOR error on %c";

	tbuf[0] = STOP;
	errflag = 0;
	for (i = 0; i < NMOTORS; i++) {
    439c:	1f 5f       	subi	r17, 0xFF	; 255
    439e:	11 23       	and	r17, r17
    43a0:	b1 f2       	breq	.-84     	; 0x434e <stop_MOTORS+0x38>
			printError(ERR_MTR, strbuf);
			errflag++;
		}
	}

	if (errflag) {
    43a2:	00 23       	and	r16, r16
    43a4:	11 f0       	breq	.+4      	; 0x43aa <stop_MOTORS+0x94>
		return(ERROR);
    43a6:	83 e6       	ldi	r24, 0x63	; 99
    43a8:	01 c0       	rjmp	.+2      	; 0x43ac <stop_MOTORS+0x96>
	} else {
		return(NOERROR);
    43aa:	80 e0       	ldi	r24, 0x00	; 0
	}

}
    43ac:	cc 58       	subi	r28, 0x8C	; 140
    43ae:	df 4f       	sbci	r29, 0xFF	; 255
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	1f 91       	pop	r17
    43ba:	0f 91       	pop	r16
    43bc:	ff 90       	pop	r15
    43be:	ef 90       	pop	r14
    43c0:	08 95       	ret

000043c2 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    43c2:	cf 92       	push	r12
    43c4:	df 92       	push	r13
    43c6:	ef 92       	push	r14
    43c8:	ff 92       	push	r15
    43ca:	0f 93       	push	r16
    43cc:	1f 93       	push	r17
    43ce:	cf 93       	push	r28
    43d0:	df 93       	push	r29
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	c4 5e       	subi	r28, 0xE4	; 228
    43d8:	d1 09       	sbc	r29, r1
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, motor, mtraddr, controller, retval;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    43de:	98 e2       	ldi	r25, 0x28	; 40
    43e0:	ec e5       	ldi	r30, 0x5C	; 92
    43e2:	fc ea       	ldi	r31, 0xAC	; 172
    43e4:	de 01       	movw	r26, r28
    43e6:	ab 5a       	subi	r26, 0xAB	; 171
    43e8:	bf 4f       	sbci	r27, 0xFF	; 255
    43ea:	01 90       	ld	r0, Z+
    43ec:	0d 92       	st	X+, r0
    43ee:	9a 95       	dec	r25
    43f0:	e1 f7       	brne	.-8      	; 0x43ea <move_MOTOR_CMD+0x28>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    43f2:	9e e1       	ldi	r25, 0x1E	; 30
    43f4:	e4 e8       	ldi	r30, 0x84	; 132
    43f6:	fc ea       	ldi	r31, 0xAC	; 172
    43f8:	de 01       	movw	r26, r28
    43fa:	a3 58       	subi	r26, 0x83	; 131
    43fc:	bf 4f       	sbci	r27, 0xFF	; 255
    43fe:	01 90       	ld	r0, Z+
    4400:	0d 92       	st	X+, r0
    4402:	9a 95       	dec	r25
    4404:	e1 f7       	brne	.-8      	; 0x43fe <move_MOTOR_CMD+0x3c>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    4406:	91 e2       	ldi	r25, 0x21	; 33
    4408:	e2 ea       	ldi	r30, 0xA2	; 162
    440a:	fc ea       	ldi	r31, 0xAC	; 172
    440c:	de 01       	movw	r26, r28
    440e:	a5 56       	subi	r26, 0x65	; 101
    4410:	bf 4f       	sbci	r27, 0xFF	; 255
    4412:	01 90       	ld	r0, Z+
    4414:	0d 92       	st	X+, r0
    4416:	9a 95       	dec	r25
    4418:	e1 f7       	brne	.-8      	; 0x4412 <move_MOTOR_CMD+0x50>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    441a:	99 e2       	ldi	r25, 0x29	; 41
    441c:	e3 ec       	ldi	r30, 0xC3	; 195
    441e:	fc ea       	ldi	r31, 0xAC	; 172
    4420:	de 01       	movw	r26, r28
    4422:	a4 54       	subi	r26, 0x44	; 68
    4424:	bf 4f       	sbci	r27, 0xFF	; 255
    4426:	01 90       	ld	r0, Z+
    4428:	0d 92       	st	X+, r0
    442a:	9a 95       	dec	r25
    442c:	e1 f7       	brne	.-8      	; 0x4426 <move_MOTOR_CMD+0x64>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    442e:	08 2f       	mov	r16, r24
    4430:	10 e0       	ldi	r17, 0x00	; 0
    4432:	84 e3       	ldi	r24, 0x34	; 52
    4434:	80 9f       	mul	r24, r16
    4436:	f0 01       	movw	r30, r0
    4438:	81 9f       	mul	r24, r17
    443a:	f0 0d       	add	r31, r0
    443c:	11 24       	eor	r1, r1
    443e:	e3 5f       	subi	r30, 0xF3	; 243
    4440:	f7 4d       	sbci	r31, 0xD7	; 215
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	88 23       	and	r24, r24
    4446:	09 f4       	brne	.+2      	; 0x444a <move_MOTOR_CMD+0x88>
    4448:	fe c0       	rjmp	.+508    	; 0x4646 <move_MOTOR_CMD+0x284>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    444a:	84 e3       	ldi	r24, 0x34	; 52
    444c:	80 9f       	mul	r24, r16
    444e:	f0 01       	movw	r30, r0
    4450:	81 9f       	mul	r24, r17
    4452:	f0 0d       	add	r31, r0
    4454:	11 24       	eor	r1, r1
    4456:	e3 5f       	subi	r30, 0xF3	; 243
    4458:	f7 4d       	sbci	r31, 0xD7	; 215
    445a:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    445c:	48 2f       	mov	r20, r24
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	fa 01       	movw	r30, r20
    4462:	e1 54       	subi	r30, 0x41	; 65
    4464:	f1 09       	sbc	r31, r1
    4466:	e8 33       	cpi	r30, 0x38	; 56
    4468:	f1 05       	cpc	r31, r1
    446a:	08 f0       	brcs	.+2      	; 0x446e <move_MOTOR_CMD+0xac>
    446c:	9d c0       	rjmp	.+314    	; 0x45a8 <move_MOTOR_CMD+0x1e6>
    446e:	ee 54       	subi	r30, 0x4E	; 78
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	0c 94 96 2e 	jmp	0x5d2c	; 0x5d2c <__tablejump2__>
		case 'x':			// Immediate halt
			stop_MOTORS();
    4476:	0e 94 8b 21 	call	0x4316	; 0x4316 <stop_MOTORS>
			return(NOERROR);
    447a:	10 e0       	ldi	r17, 0x00	; 0
    447c:	e9 c0       	rjmp	.+466    	; 0x4650 <move_MOTOR_CMD+0x28e>

		case 'A':			// Move to absolute position
		case 'B':
		case 'C':
			controller = motor + 63;
    447e:	0f 2e       	mov	r0, r31
    4480:	ff e3       	ldi	r31, 0x3F	; 63
    4482:	ff 2e       	mov	r15, r31
    4484:	f0 2d       	mov	r31, r0
    4486:	f8 0e       	add	r15, r24
			currentPosition = 0;
    4488:	65 96       	adiw	r28, 0x15	; 21
    448a:	1c ae       	std	Y+60, r1	; 0x3c
    448c:	1d ae       	std	Y+61, r1	; 0x3d
    448e:	1e ae       	std	Y+62, r1	; 0x3e
    4490:	1f ae       	std	Y+63, r1	; 0x3f
    4492:	65 97       	sbiw	r28, 0x15	; 21
			break;
    4494:	a0 c0       	rjmp	.+320    	; 0x45d6 <move_MOTOR_CMD+0x214>

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4496:	24 e3       	ldi	r18, 0x34	; 52
    4498:	20 9f       	mul	r18, r16
    449a:	c0 01       	movw	r24, r0
    449c:	21 9f       	mul	r18, r17
    449e:	90 0d       	add	r25, r0
    44a0:	11 24       	eor	r1, r1
    44a2:	81 5f       	subi	r24, 0xF1	; 241
    44a4:	97 4d       	sbci	r25, 0xD7	; 215
    44a6:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <atol>
    44aa:	9b 01       	movw	r18, r22
    44ac:	ac 01       	movw	r20, r24
    44ae:	ab e1       	ldi	r26, 0x1B	; 27
    44b0:	b1 e0       	ldi	r27, 0x01	; 1
    44b2:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__muluhisi3>
    44b6:	6b 01       	movw	r12, r22
    44b8:	7c 01       	movw	r14, r24
			for (i = 0; i < NMOTORS; i++) {
    44ba:	00 e0       	ldi	r16, 0x00	; 0
    44bc:	20 c0       	rjmp	.+64     	; 0x44fe <move_MOTOR_CMD+0x13c>
				mtraddr = i + MOTOR_A;
				if (move_MOTOR(mtraddr, newPosition) == ERROR) {
    44be:	b7 01       	movw	r22, r14
    44c0:	a6 01       	movw	r20, r12
    44c2:	80 e8       	ldi	r24, 0x80	; 128
    44c4:	80 0f       	add	r24, r16
    44c6:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <move_MOTOR>
    44ca:	18 2f       	mov	r17, r24
    44cc:	83 36       	cpi	r24, 0x63	; 99
    44ce:	b1 f4       	brne	.+44     	; 0x44fc <move_MOTOR_CMD+0x13a>
					sprintf(strbuf, fmt2);
    44d0:	ce 01       	movw	r24, r28
    44d2:	85 56       	subi	r24, 0x65	; 101
    44d4:	9f 4f       	sbci	r25, 0xFF	; 255
    44d6:	9f 93       	push	r25
    44d8:	8f 93       	push	r24
    44da:	8a 59       	subi	r24, 0x9A	; 154
    44dc:	91 09       	sbc	r25, r1
    44de:	7c 01       	movw	r14, r24
    44e0:	9f 93       	push	r25
    44e2:	8f 93       	push	r24
    44e4:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
					printError(ERR_MTR, strbuf);
    44e8:	b7 01       	movw	r22, r14
    44ea:	86 e3       	ldi	r24, 0x36	; 54
    44ec:	91 e0       	ldi	r25, 0x01	; 1
    44ee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
					return(ERROR);
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	aa c0       	rjmp	.+340    	; 0x4650 <move_MOTOR_CMD+0x28e>
			currentPosition = 0;
			break;

		case 'D':			// Move all motors to absolute position
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
			for (i = 0; i < NMOTORS; i++) {
    44fc:	0f 5f       	subi	r16, 0xFF	; 255
    44fe:	00 23       	and	r16, r16
    4500:	f1 f2       	breq	.-68     	; 0x44be <move_MOTOR_CMD+0xfc>
					sprintf(strbuf, fmt2);
					printError(ERR_MTR, strbuf);
					return(ERROR);
				}
			}
			return(NOERROR);
    4502:	10 e0       	ldi	r17, 0x00	; 0
    4504:	a5 c0       	rjmp	.+330    	; 0x4650 <move_MOTOR_CMD+0x28e>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    4506:	0f 2e       	mov	r0, r31
    4508:	ff e1       	ldi	r31, 0x1F	; 31
    450a:	ff 2e       	mov	r15, r31
    450c:	f0 2d       	mov	r31, r0
    450e:	f8 0e       	add	r15, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    4510:	be 01       	movw	r22, r28
    4512:	6f 5a       	subi	r22, 0xAF	; 175
    4514:	7f 4f       	sbci	r23, 0xFF	; 255
    4516:	8f 2d       	mov	r24, r15
    4518:	0e 94 ce 19 	call	0x339c	; 0x339c <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    451c:	83 36       	cpi	r24, 0x63	; 99
    451e:	09 f0       	breq	.+2      	; 0x4522 <move_MOTOR_CMD+0x160>
    4520:	5a c0       	rjmp	.+180    	; 0x45d6 <move_MOTOR_CMD+0x214>
				sprintf(strbuf, fmt0);
    4522:	ce 01       	movw	r24, r28
    4524:	8b 5a       	subi	r24, 0xAB	; 171
    4526:	9f 4f       	sbci	r25, 0xFF	; 255
    4528:	9f 93       	push	r25
    452a:	8f 93       	push	r24
    452c:	8e 01       	movw	r16, r28
    452e:	0f 5f       	subi	r16, 0xFF	; 255
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
    4532:	1f 93       	push	r17
    4534:	0f 93       	push	r16
    4536:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    453a:	b8 01       	movw	r22, r16
    453c:	85 e3       	ldi	r24, 0x35	; 53
    453e:	91 e0       	ldi	r25, 0x01	; 1
    4540:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	13 e6       	ldi	r17, 0x63	; 99
    454e:	80 c0       	rjmp	.+256    	; 0x4650 <move_MOTOR_CMD+0x28e>
			}
			break;

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4550:	24 e3       	ldi	r18, 0x34	; 52
    4552:	20 9f       	mul	r18, r16
    4554:	c0 01       	movw	r24, r0
    4556:	21 9f       	mul	r18, r17
    4558:	90 0d       	add	r25, r0
    455a:	11 24       	eor	r1, r1
    455c:	81 5f       	subi	r24, 0xF1	; 241
    455e:	97 4d       	sbci	r25, 0xD7	; 215
    4560:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <atol>
    4564:	9b 01       	movw	r18, r22
    4566:	ac 01       	movw	r20, r24
    4568:	ab e1       	ldi	r26, 0x1B	; 27
    456a:	b1 e0       	ldi	r27, 0x01	; 1
    456c:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    4570:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <move_MOTORS_PISTON>
    4574:	18 2f       	mov	r17, r24
    4576:	83 36       	cpi	r24, 0x63	; 99
    4578:	09 f0       	breq	.+2      	; 0x457c <move_MOTOR_CMD+0x1ba>
    457a:	67 c0       	rjmp	.+206    	; 0x464a <move_MOTOR_CMD+0x288>
				sprintf(strbuf, fmt3);
    457c:	ce 01       	movw	r24, r28
    457e:	84 54       	subi	r24, 0x44	; 68
    4580:	9f 4f       	sbci	r25, 0xFF	; 255
    4582:	9f 93       	push	r25
    4584:	8f 93       	push	r24
    4586:	8b 5b       	subi	r24, 0xBB	; 187
    4588:	91 09       	sbc	r25, r1
    458a:	7c 01       	movw	r14, r24
    458c:	9f 93       	push	r25
    458e:	8f 93       	push	r24
    4590:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_MTR, strbuf);
    4594:	b7 01       	movw	r22, r14
    4596:	86 e3       	ldi	r24, 0x36	; 54
    4598:	91 e0       	ldi	r25, 0x01	; 1
    459a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	54 c0       	rjmp	.+168    	; 0x4650 <move_MOTOR_CMD+0x28e>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    45a8:	ce 01       	movw	r24, r28
    45aa:	83 58       	subi	r24, 0x83	; 131
    45ac:	9f 4f       	sbci	r25, 0xFF	; 255
    45ae:	9f 93       	push	r25
    45b0:	8f 93       	push	r24
    45b2:	8e 01       	movw	r16, r28
    45b4:	0f 5f       	subi	r16, 0xFF	; 255
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	1f 93       	push	r17
    45ba:	0f 93       	push	r16
    45bc:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printError(ERR_MTR, strbuf);
    45c0:	b8 01       	movw	r22, r16
    45c2:	86 e3       	ldi	r24, 0x36	; 54
    45c4:	91 e0       	ldi	r25, 0x01	; 1
    45c6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	13 e6       	ldi	r17, 0x63	; 99
    45d4:	3d c0       	rjmp	.+122    	; 0x4650 <move_MOTOR_CMD+0x28e>
/*
	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
	}
*/
	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    45d6:	24 e3       	ldi	r18, 0x34	; 52
    45d8:	20 9f       	mul	r18, r16
    45da:	c0 01       	movw	r24, r0
    45dc:	21 9f       	mul	r18, r17
    45de:	90 0d       	add	r25, r0
    45e0:	11 24       	eor	r1, r1
    45e2:	81 5f       	subi	r24, 0xF1	; 241
    45e4:	97 4d       	sbci	r25, 0xD7	; 215
    45e6:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <atol>
    45ea:	9b 01       	movw	r18, r22
    45ec:	ac 01       	movw	r20, r24
    45ee:	ab e1       	ldi	r26, 0x1B	; 27
    45f0:	b1 e0       	ldi	r27, 0x01	; 1
    45f2:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__muluhisi3>
    45f6:	65 96       	adiw	r28, 0x15	; 21
    45f8:	0c ad       	ldd	r16, Y+60	; 0x3c
    45fa:	1d ad       	ldd	r17, Y+61	; 0x3d
    45fc:	2e ad       	ldd	r18, Y+62	; 0x3e
    45fe:	3f ad       	ldd	r19, Y+63	; 0x3f
    4600:	65 97       	sbiw	r28, 0x15	; 21
    4602:	ab 01       	movw	r20, r22
    4604:	bc 01       	movw	r22, r24
    4606:	40 0f       	add	r20, r16
    4608:	51 1f       	adc	r21, r17
    460a:	62 1f       	adc	r22, r18
    460c:	73 1f       	adc	r23, r19

	if (move_MOTOR(controller, newPosition) == ERROR) {
    460e:	8f 2d       	mov	r24, r15
    4610:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <move_MOTOR>
    4614:	18 2f       	mov	r17, r24
    4616:	83 36       	cpi	r24, 0x63	; 99
    4618:	d1 f4       	brne	.+52     	; 0x464e <move_MOTOR_CMD+0x28c>
		sprintf(strbuf, fmt2);
    461a:	ce 01       	movw	r24, r28
    461c:	85 56       	subi	r24, 0x65	; 101
    461e:	9f 4f       	sbci	r25, 0xFF	; 255
    4620:	9f 93       	push	r25
    4622:	8f 93       	push	r24
    4624:	8a 59       	subi	r24, 0x9A	; 154
    4626:	91 09       	sbc	r25, r1
    4628:	7c 01       	movw	r14, r24
    462a:	9f 93       	push	r25
    462c:	8f 93       	push	r24
    462e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
		printError(ERR_MTR, strbuf);
    4632:	b7 01       	movw	r22, r14
    4634:	86 e3       	ldi	r24, 0x36	; 54
    4636:	91 e0       	ldi	r25, 0x01	; 1
    4638:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	05 c0       	rjmp	.+10     	; 0x4650 <move_MOTOR_CMD+0x28e>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4646:	10 e0       	ldi	r17, 0x00	; 0
    4648:	03 c0       	rjmp	.+6      	; 0x4650 <move_MOTOR_CMD+0x28e>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    464a:	10 e0       	ldi	r17, 0x00	; 0
    464c:	01 c0       	rjmp	.+2      	; 0x4650 <move_MOTOR_CMD+0x28e>
		sprintf(strbuf, fmt2);
		printError(ERR_MTR, strbuf);
		return(ERROR);
	}

	return(NOERROR);
    464e:	10 e0       	ldi	r17, 0x00	; 0

}
    4650:	81 2f       	mov	r24, r17
    4652:	cc 51       	subi	r28, 0x1C	; 28
    4654:	df 4f       	sbci	r29, 0xFF	; 255
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	ff 90       	pop	r15
    4664:	ef 90       	pop	r14
    4666:	df 90       	pop	r13
    4668:	cf 90       	pop	r12
    466a:	08 95       	ret

0000466c <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    466c:	cf 92       	push	r12
    466e:	df 92       	push	r13
    4670:	ef 92       	push	r14
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	c1 5e       	subi	r28, 0xE1	; 225
    4682:	d1 09       	sbc	r29, r1
    4684:	cd bf       	out	0x3d, r28	; 61
    4686:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	char object;
	uint8_t mtraddr;
	int32_t newEncoderValue;
	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
    4688:	93 e2       	ldi	r25, 0x23	; 35
    468a:	ec ee       	ldi	r30, 0xEC	; 236
    468c:	fc ea       	ldi	r31, 0xAC	; 172
    468e:	de 01       	movw	r26, r28
    4690:	af 5a       	subi	r26, 0xAF	; 175
    4692:	bf 4f       	sbci	r27, 0xFF	; 255
    4694:	01 90       	ld	r0, Z+
    4696:	0d 92       	st	X+, r0
    4698:	9a 95       	dec	r25
    469a:	e1 f7       	brne	.-8      	; 0x4694 <set+0x28>
	const char fmt1[] = "set: bad time format";
    469c:	95 e1       	ldi	r25, 0x15	; 21
    469e:	ef e0       	ldi	r30, 0x0F	; 15
    46a0:	fd ea       	ldi	r31, 0xAD	; 173
    46a2:	de 01       	movw	r26, r28
    46a4:	ac 58       	subi	r26, 0x8C	; 140
    46a6:	bf 4f       	sbci	r27, 0xFF	; 255
    46a8:	01 90       	ld	r0, Z+
    46aa:	0d 92       	st	X+, r0
    46ac:	9a 95       	dec	r25
    46ae:	e1 f7       	brne	.-8      	; 0x46a8 <set+0x3c>
	const char fmt2[] = "set: put_time error";
    46b0:	94 e1       	ldi	r25, 0x14	; 20
    46b2:	e4 e2       	ldi	r30, 0x24	; 36
    46b4:	fd ea       	ldi	r31, 0xAD	; 173
    46b6:	de 01       	movw	r26, r28
    46b8:	a7 57       	subi	r26, 0x77	; 119
    46ba:	bf 4f       	sbci	r27, 0xFF	; 255
    46bc:	01 90       	ld	r0, Z+
    46be:	0d 92       	st	X+, r0
    46c0:	9a 95       	dec	r25
    46c2:	e1 f7       	brne	.-8      	; 0x46bc <set+0x50>
	const char fmt3[] = "set: write_FRAM error";
    46c4:	96 e1       	ldi	r25, 0x16	; 22
    46c6:	e8 e3       	ldi	r30, 0x38	; 56
    46c8:	fd ea       	ldi	r31, 0xAD	; 173
    46ca:	de 01       	movw	r26, r28
    46cc:	a3 56       	subi	r26, 0x63	; 99
    46ce:	bf 4f       	sbci	r27, 0xFF	; 255
    46d0:	01 90       	ld	r0, Z+
    46d2:	0d 92       	st	X+, r0
    46d4:	9a 95       	dec	r25
    46d6:	e1 f7       	brne	.-8      	; 0x46d0 <set+0x64>
	const char fmt4[] = "set: what?";
    46d8:	9b e0       	ldi	r25, 0x0B	; 11
    46da:	ee e4       	ldi	r30, 0x4E	; 78
    46dc:	fd ea       	ldi	r31, 0xAD	; 173
    46de:	de 01       	movw	r26, r28
    46e0:	ad 54       	subi	r26, 0x4D	; 77
    46e2:	bf 4f       	sbci	r27, 0xFF	; 255
    46e4:	01 90       	ld	r0, Z+
    46e6:	0d 92       	st	X+, r0
    46e8:	9a 95       	dec	r25
    46ea:	e1 f7       	brne	.-8      	; 0x46e4 <set+0x78>
	const char fmt5[] = "set: encoder value out of range %ld";
    46ec:	94 e2       	ldi	r25, 0x24	; 36
    46ee:	e9 e5       	ldi	r30, 0x59	; 89
    46f0:	fd ea       	ldi	r31, 0xAD	; 173
    46f2:	de 01       	movw	r26, r28
    46f4:	a2 54       	subi	r26, 0x42	; 66
    46f6:	bf 4f       	sbci	r27, 0xFF	; 255
    46f8:	01 90       	ld	r0, Z+
    46fa:	0d 92       	st	X+, r0
    46fc:	9a 95       	dec	r25
    46fe:	e1 f7       	brne	.-8      	; 0x46f8 <set+0x8c>

	object = pcmd[cstack].cobject;
    4700:	28 2f       	mov	r18, r24
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	84 e3       	ldi	r24, 0x34	; 52
    4706:	82 9f       	mul	r24, r18
    4708:	f0 01       	movw	r30, r0
    470a:	83 9f       	mul	r24, r19
    470c:	f0 0d       	add	r31, r0
    470e:	11 24       	eor	r1, r1
    4710:	e3 5f       	subi	r30, 0xF3	; 243
    4712:	f7 4d       	sbci	r31, 0xD7	; 215
    4714:	01 81       	ldd	r16, Z+1	; 0x01
	switch(object) {
    4716:	01 36       	cpi	r16, 0x61	; 97
    4718:	08 f4       	brcc	.+2      	; 0x471c <set+0xb0>
    471a:	de c0       	rjmp	.+444    	; 0x48d8 <set+0x26c>
    471c:	04 36       	cpi	r16, 0x64	; 100
    471e:	20 f0       	brcs	.+8      	; 0x4728 <set+0xbc>
    4720:	04 37       	cpi	r16, 0x74	; 116
    4722:	09 f4       	brne	.+2      	; 0x4726 <set+0xba>
    4724:	72 c0       	rjmp	.+228    	; 0x480a <set+0x19e>
    4726:	d8 c0       	rjmp	.+432    	; 0x48d8 <set+0x26c>
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    4728:	84 e3       	ldi	r24, 0x34	; 52
    472a:	82 9f       	mul	r24, r18
    472c:	f0 01       	movw	r30, r0
    472e:	83 9f       	mul	r24, r19
    4730:	f0 0d       	add	r31, r0
    4732:	11 24       	eor	r1, r1
    4734:	e3 5f       	subi	r30, 0xF3	; 243
    4736:	f7 4d       	sbci	r31, 0xD7	; 215
    4738:	82 81       	ldd	r24, Z+2	; 0x02
    473a:	88 23       	and	r24, r24
    473c:	09 f4       	brne	.+2      	; 0x4740 <set+0xd4>
    473e:	e3 c0       	rjmp	.+454    	; 0x4906 <set+0x29a>
				return(NOERROR);
			}
			newEncoderValue = atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON;
    4740:	44 e3       	ldi	r20, 0x34	; 52
    4742:	42 9f       	mul	r20, r18
    4744:	c0 01       	movw	r24, r0
    4746:	43 9f       	mul	r20, r19
    4748:	90 0d       	add	r25, r0
    474a:	11 24       	eor	r1, r1
    474c:	81 5f       	subi	r24, 0xF1	; 241
    474e:	97 4d       	sbci	r25, 0xD7	; 215
    4750:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <atol>
    4754:	9b 01       	movw	r18, r22
    4756:	ac 01       	movw	r20, r24
    4758:	ab e1       	ldi	r26, 0x1B	; 27
    475a:	b1 e0       	ldi	r27, 0x01	; 1
    475c:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__muluhisi3>
			if (newEncoderValue > PID_MAXPOS || newEncoderValue < PID_MINPOS) {
    4760:	6b 01       	movw	r12, r22
    4762:	7c 01       	movw	r14, r24
    4764:	20 e5       	ldi	r18, 0x50	; 80
    4766:	c2 0e       	add	r12, r18
    4768:	28 ef       	ldi	r18, 0xF8	; 248
    476a:	d2 1e       	adc	r13, r18
    476c:	2c e0       	ldi	r18, 0x0C	; 12
    476e:	e2 1e       	adc	r14, r18
    4770:	f1 1c       	adc	r15, r1
    4772:	31 ea       	ldi	r19, 0xA1	; 161
    4774:	c3 16       	cp	r12, r19
    4776:	30 ef       	ldi	r19, 0xF0	; 240
    4778:	d3 06       	cpc	r13, r19
    477a:	39 e1       	ldi	r19, 0x19	; 25
    477c:	e3 06       	cpc	r14, r19
    477e:	f1 04       	cpc	r15, r1
    4780:	f8 f0       	brcs	.+62     	; 0x47c0 <set+0x154>
				sprintf(strbuf, fmt5, newEncoderValue/ENC_COUNTS_PER_MICRON);
    4782:	2b e1       	ldi	r18, 0x1B	; 27
    4784:	31 e0       	ldi	r19, 0x01	; 1
    4786:	40 e0       	ldi	r20, 0x00	; 0
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	0e 94 77 2e 	call	0x5cee	; 0x5cee <__divmodsi4>
    478e:	5f 93       	push	r21
    4790:	4f 93       	push	r20
    4792:	3f 93       	push	r19
    4794:	2f 93       	push	r18
    4796:	ce 01       	movw	r24, r28
    4798:	82 54       	subi	r24, 0x42	; 66
    479a:	9f 4f       	sbci	r25, 0xFF	; 255
    479c:	9f 93       	push	r25
    479e:	8f 93       	push	r24
    47a0:	8e 01       	movw	r16, r28
    47a2:	0f 5f       	subi	r16, 0xFF	; 255
    47a4:	1f 4f       	sbci	r17, 0xFF	; 255
    47a6:	1f 93       	push	r17
    47a8:	0f 93       	push	r16
    47aa:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_MTR, strbuf);
    47ae:	b8 01       	movw	r22, r16
    47b0:	86 e3       	ldi	r24, 0x36	; 54
    47b2:	91 e0       	ldi	r25, 0x01	; 1
    47b4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	13 e6       	ldi	r17, 0x63	; 99
    47be:	a8 c0       	rjmp	.+336    	; 0x4910 <set+0x2a4>
			}
			mtraddr = object + 31;
			if (put_MOTOR_ENCODER(mtraddr, newEncoderValue) == ERROR) {
    47c0:	ab 01       	movw	r20, r22
    47c2:	bc 01       	movw	r22, r24
    47c4:	8f e1       	ldi	r24, 0x1F	; 31
    47c6:	80 0f       	add	r24, r16
    47c8:	0e 94 04 21 	call	0x4208	; 0x4208 <put_MOTOR_ENCODER>
    47cc:	18 2f       	mov	r17, r24
    47ce:	83 36       	cpi	r24, 0x63	; 99
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <set+0x168>
    47d2:	9b c0       	rjmp	.+310    	; 0x490a <set+0x29e>
				sprintf(strbuf, fmt0, object);
    47d4:	1f 92       	push	r1
    47d6:	0f 93       	push	r16
    47d8:	ce 01       	movw	r24, r28
    47da:	8f 5a       	subi	r24, 0xAF	; 175
    47dc:	9f 4f       	sbci	r25, 0xFF	; 255
    47de:	9f 93       	push	r25
    47e0:	8f 93       	push	r24
    47e2:	9e 01       	movw	r18, r28
    47e4:	2f 5f       	subi	r18, 0xFF	; 255
    47e6:	3f 4f       	sbci	r19, 0xFF	; 255
    47e8:	79 01       	movw	r14, r18
    47ea:	3f 93       	push	r19
    47ec:	2f 93       	push	r18
    47ee:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_MTR, strbuf);
    47f2:	b7 01       	movw	r22, r14
    47f4:	86 e3       	ldi	r24, 0x36	; 54
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	83 c0       	rjmp	.+262    	; 0x4910 <set+0x2a4>
			}
			break;

		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    480a:	44 e3       	ldi	r20, 0x34	; 52
    480c:	42 9f       	mul	r20, r18
    480e:	c0 01       	movw	r24, r0
    4810:	43 9f       	mul	r20, r19
    4812:	90 0d       	add	r25, r0
    4814:	11 24       	eor	r1, r1
    4816:	9c 01       	movw	r18, r24
    4818:	21 5f       	subi	r18, 0xF1	; 241
    481a:	37 4d       	sbci	r19, 0xD7	; 215
    481c:	79 01       	movw	r14, r18
    481e:	f9 01       	movw	r30, r18
    4820:	01 90       	ld	r0, Z+
    4822:	00 20       	and	r0, r0
    4824:	e9 f7       	brne	.-6      	; 0x4820 <set+0x1b4>
    4826:	31 97       	sbiw	r30, 0x01	; 1
    4828:	e2 1b       	sub	r30, r18
    482a:	f3 0b       	sbc	r31, r19
    482c:	73 97       	sbiw	r30, 0x13	; 19
    482e:	b9 f0       	breq	.+46     	; 0x485e <set+0x1f2>
				sprintf(strbuf, fmt1);
    4830:	ce 01       	movw	r24, r28
    4832:	8c 58       	subi	r24, 0x8C	; 140
    4834:	9f 4f       	sbci	r25, 0xFF	; 255
    4836:	9f 93       	push	r25
    4838:	8f 93       	push	r24
    483a:	8e 01       	movw	r16, r28
    483c:	0f 5f       	subi	r16, 0xFF	; 255
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	1f 93       	push	r17
    4842:	0f 93       	push	r16
    4844:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_SETTIME, strbuf);
    4848:	b8 01       	movw	r22, r16
    484a:	8a e5       	ldi	r24, 0x5A	; 90
    484c:	92 e0       	ldi	r25, 0x02	; 2
    484e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	13 e6       	ldi	r17, 0x63	; 99
    485c:	59 c0       	rjmp	.+178    	; 0x4910 <set+0x2a4>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    485e:	c9 01       	movw	r24, r18
    4860:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <put_time>
    4864:	18 2f       	mov	r17, r24
    4866:	83 36       	cpi	r24, 0x63	; 99
    4868:	b1 f4       	brne	.+44     	; 0x4896 <set+0x22a>
				sprintf(strbuf, fmt2);
    486a:	ce 01       	movw	r24, r28
    486c:	87 57       	subi	r24, 0x77	; 119
    486e:	9f 4f       	sbci	r25, 0xFF	; 255
    4870:	9f 93       	push	r25
    4872:	8f 93       	push	r24
    4874:	88 58       	subi	r24, 0x88	; 136
    4876:	91 09       	sbc	r25, r1
    4878:	7c 01       	movw	r14, r24
    487a:	9f 93       	push	r25
    487c:	8f 93       	push	r24
    487e:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_ISO, strbuf);
    4882:	b7 01       	movw	r22, r14
    4884:	8b e5       	ldi	r24, 0x5B	; 91
    4886:	92 e0       	ldi	r25, 0x02	; 2
    4888:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    488c:	0f 90       	pop	r0
    488e:	0f 90       	pop	r0
    4890:	0f 90       	pop	r0
    4892:	0f 90       	pop	r0
    4894:	3d c0       	rjmp	.+122    	; 0x4910 <set+0x2a4>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    4896:	24 e1       	ldi	r18, 0x14	; 20
    4898:	a7 01       	movw	r20, r14
    489a:	60 e0       	ldi	r22, 0x00	; 0
    489c:	70 e0       	ldi	r23, 0x00	; 0
    489e:	80 e5       	ldi	r24, 0x50	; 80
    48a0:	0e 94 17 09 	call	0x122e	; 0x122e <write_FRAM>
    48a4:	18 2f       	mov	r17, r24
    48a6:	83 36       	cpi	r24, 0x63	; 99
    48a8:	91 f5       	brne	.+100    	; 0x490e <set+0x2a2>
				sprintf(strbuf, fmt3);
    48aa:	ce 01       	movw	r24, r28
    48ac:	83 56       	subi	r24, 0x63	; 99
    48ae:	9f 4f       	sbci	r25, 0xFF	; 255
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	9e 01       	movw	r18, r28
    48b6:	2f 5f       	subi	r18, 0xFF	; 255
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	79 01       	movw	r14, r18
    48bc:	3f 93       	push	r19
    48be:	2f 93       	push	r18
    48c0:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
				printError(ERR_ISO, strbuf);
    48c4:	b7 01       	movw	r22, r14
    48c6:	8b e5       	ldi	r24, 0x5B	; 91
    48c8:	92 e0       	ldi	r25, 0x02	; 2
    48ca:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
				return(ERROR);
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	1c c0       	rjmp	.+56     	; 0x4910 <set+0x2a4>
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    48d8:	ce 01       	movw	r24, r28
    48da:	8d 54       	subi	r24, 0x4D	; 77
    48dc:	9f 4f       	sbci	r25, 0xFF	; 255
    48de:	9f 93       	push	r25
    48e0:	8f 93       	push	r24
    48e2:	8e 01       	movw	r16, r28
    48e4:	0f 5f       	subi	r16, 0xFF	; 255
    48e6:	1f 4f       	sbci	r17, 0xFF	; 255
    48e8:	1f 93       	push	r17
    48ea:	0f 93       	push	r16
    48ec:	0e 94 bb 30 	call	0x6176	; 0x6176 <sprintf>
			printError(ERR_SET, strbuf);
    48f0:	b8 01       	movw	r22, r16
    48f2:	89 e5       	ldi	r24, 0x59	; 89
    48f4:	92 e0       	ldi	r25, 0x02	; 2
    48f6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
			return(ERROR);
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	13 e6       	ldi	r17, 0x63	; 99
    4904:	05 c0       	rjmp	.+10     	; 0x4910 <set+0x2a4>
	switch(object) {
		case 'a':
		case 'b':
		case 'c':
			if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
				return(NOERROR);
    4906:	10 e0       	ldi	r17, 0x00	; 0
    4908:	03 c0       	rjmp	.+6      	; 0x4910 <set+0x2a4>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    490a:	10 e0       	ldi	r17, 0x00	; 0
    490c:	01 c0       	rjmp	.+2      	; 0x4910 <set+0x2a4>
    490e:	10 e0       	ldi	r17, 0x00	; 0

}
    4910:	81 2f       	mov	r24, r17
    4912:	cf 51       	subi	r28, 0x1F	; 31
    4914:	df 4f       	sbci	r29, 0xFF	; 255
    4916:	cd bf       	out	0x3d, r28	; 61
    4918:	de bf       	out	0x3e, r29	; 62
    491a:	df 91       	pop	r29
    491c:	cf 91       	pop	r28
    491e:	1f 91       	pop	r17
    4920:	0f 91       	pop	r16
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	df 90       	pop	r13
    4928:	cf 90       	pop	r12
    492a:	08 95       	ret

0000492c <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	00 d0       	rcall	.+0      	; 0x4932 <get_temperature+0x6>
    4932:	00 d0       	rcall	.+0      	; 0x4934 <get_temperature+0x8>
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    4938:	83 30       	cpi	r24, 0x03	; 3
    493a:	18 f0       	brcs	.+6      	; 0x4942 <get_temperature+0x16>
    493c:	83 30       	cpi	r24, 0x03	; 3
    493e:	39 f0       	breq	.+14     	; 0x494e <get_temperature+0x22>
    4940:	0b c0       	rjmp	.+22     	; 0x4958 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    4942:	be 01       	movw	r22, r28
    4944:	6f 5f       	subi	r22, 0xFF	; 255
    4946:	7f 4f       	sbci	r23, 0xFF	; 255
    4948:	0e 94 7f 01 	call	0x2fe	; 0x2fe <read_AD590>
			break;
    494c:	0d c0       	rjmp	.+26     	; 0x4968 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    494e:	ce 01       	movw	r24, r28
    4950:	01 96       	adiw	r24, 0x01	; 1
    4952:	0e 94 2d 0b 	call	0x165a	; 0x165a <read_MCP9808>
			break;
    4956:	08 c0       	rjmp	.+16     	; 0x4968 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	90 e8       	ldi	r25, 0x80	; 128
    495c:	a6 e2       	ldi	r26, 0x26	; 38
    495e:	b4 ec       	ldi	r27, 0xC4	; 196
    4960:	89 83       	std	Y+1, r24	; 0x01
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	ab 83       	std	Y+3, r26	; 0x03
    4966:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    4968:	69 81       	ldd	r22, Y+1	; 0x01
    496a:	7a 81       	ldd	r23, Y+2	; 0x02
    496c:	8b 81       	ldd	r24, Y+3	; 0x03
    496e:	9c 81       	ldd	r25, Y+4	; 0x04
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	48 e4       	ldi	r20, 0x48	; 72
    4976:	52 ec       	ldi	r21, 0xC2	; 194
    4978:	0e 94 4b 29 	call	0x5296	; 0x5296 <__cmpsf2>
    497c:	88 23       	and	r24, r24
    497e:	44 f4       	brge	.+16     	; 0x4990 <get_temperature+0x64>
		temperature = BADFLOAT;
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	90 e8       	ldi	r25, 0x80	; 128
    4984:	a6 e2       	ldi	r26, 0x26	; 38
    4986:	b4 ec       	ldi	r27, 0xC4	; 196
    4988:	89 83       	std	Y+1, r24	; 0x01
    498a:	9a 83       	std	Y+2, r25	; 0x02
    498c:	ab 83       	std	Y+3, r26	; 0x03
    498e:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    4990:	69 81       	ldd	r22, Y+1	; 0x01
    4992:	7a 81       	ldd	r23, Y+2	; 0x02
    4994:	8b 81       	ldd	r24, Y+3	; 0x03
    4996:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4998:	24 96       	adiw	r28, 0x04	; 4
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <testroutine>:
#include "initialize.h"
#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	c4 56       	subi	r28, 0x64	; 100
    49ae:	d1 09       	sbc	r29, r1
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	de bf       	out	0x3e, r29	; 62

	char strbuf[80], isotime[20];
	if (get_FRAM_ENCSAVETIME(isotime) == NOERROR) {
    49b4:	ce 01       	movw	r24, r28
    49b6:	8f 5a       	subi	r24, 0xAF	; 175
    49b8:	9f 4f       	sbci	r25, 0xFF	; 255
    49ba:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_FRAM_ENCSAVETIME>
    49be:	81 11       	cpse	r24, r1
    49c0:	06 c0       	rjmp	.+12     	; 0x49ce <testroutine+0x2a>
		printLine(isotime);
    49c2:	ce 01       	movw	r24, r28
    49c4:	8f 5a       	subi	r24, 0xAF	; 175
    49c6:	9f 4f       	sbci	r25, 0xFF	; 255
    49c8:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
    49cc:	0d c0       	rjmp	.+26     	; 0x49e8 <testroutine+0x44>
	} else {
		sprintf(strbuf, "get_FRAM_ENCSAVETIME error");
    49ce:	8b e1       	ldi	r24, 0x1B	; 27
    49d0:	ed e7       	ldi	r30, 0x7D	; 125
    49d2:	fd ea       	ldi	r31, 0xAD	; 173
    49d4:	de 01       	movw	r26, r28
    49d6:	11 96       	adiw	r26, 0x01	; 1
    49d8:	01 90       	ld	r0, Z+
    49da:	0d 92       	st	X+, r0
    49dc:	8a 95       	dec	r24
    49de:	e1 f7       	brne	.-8      	; 0x49d8 <testroutine+0x34>
		printLine(strbuf);
    49e0:	ce 01       	movw	r24, r28
    49e2:	01 96       	adiw	r24, 0x01	; 1
    49e4:	0e 94 b7 03 	call	0x76e	; 0x76e <printLine>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    49e8:	cc 59       	subi	r28, 0x9C	; 156
    49ea:	df 4f       	sbci	r29, 0xFF	; 255
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	de bf       	out	0x3e, r29	; 62
    49f0:	df 91       	pop	r29
    49f2:	cf 91       	pop	r28
    49f4:	08 95       	ret

000049f6 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    49f6:	ac 01       	movw	r20, r24
    49f8:	e0 e6       	ldi	r30, 0x60	; 96
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    49fe:	9e 7f       	andi	r25, 0xFE	; 254
    4a00:	88 ed       	ldi	r24, 0xD8	; 216
    4a02:	84 bf       	out	0x34, r24	; 52
    4a04:	94 8f       	std	Z+28, r25	; 0x1c
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <init_RTC+0x14>
    4a08:	00 00       	nop
    4a0a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    4a0e:	96 fd       	sbrc	r25, 6
    4a10:	fb cf       	rjmp	.-10     	; 0x4a08 <init_RTC+0x12>
    4a12:	e0 e6       	ldi	r30, 0x60	; 96
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	94 8d       	ldd	r25, Z+28	; 0x1c
    4a18:	9b 7f       	andi	r25, 0xFB	; 251
    4a1a:	28 ed       	ldi	r18, 0xD8	; 216
    4a1c:	24 bf       	out	0x34, r18	; 52
    4a1e:	94 8f       	std	Z+28, r25	; 0x1c
    4a20:	94 8d       	ldd	r25, Z+28	; 0x1c
    4a22:	91 60       	ori	r25, 0x01	; 1
    4a24:	24 bf       	out	0x34, r18	; 52
    4a26:	94 8f       	std	Z+28, r25	; 0x1c
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <init_RTC+0x36>
    4a2a:	00 00       	nop
    4a2c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    4a30:	91 11       	cpse	r25, r1
    4a32:	fb cf       	rjmp	.-10     	; 0x4a2a <init_RTC+0x34>
    4a34:	e0 e4       	ldi	r30, 0x40	; 64
    4a36:	f1 e0       	ldi	r31, 0x01	; 1
    4a38:	42 87       	std	Z+10, r20	; 0x0a
    4a3a:	53 87       	std	Z+11, r21	; 0x0b
    4a3c:	82 e0       	ldi	r24, 0x02	; 2
    4a3e:	87 83       	std	Z+7, r24	; 0x07
    4a40:	85 81       	ldd	r24, Z+5	; 0x05
    4a42:	81 60       	ori	r24, 0x01	; 1
    4a44:	85 83       	std	Z+5, r24	; 0x05
    4a46:	81 eb       	ldi	r24, 0xB1	; 177
    4a48:	80 83       	st	Z, r24
    4a4a:	82 81       	ldd	r24, Z+2	; 0x02
    4a4c:	81 60       	ori	r24, 0x01	; 1
    4a4e:	82 83       	std	Z+2, r24	; 0x02
    4a50:	08 95       	ret

00004a52 <__vector_3>:
    4a52:	1f 92       	push	r1
    4a54:	0f 92       	push	r0
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
    4a5c:	8f 93       	push	r24
    4a5e:	9f 93       	push	r25
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    4a66:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerOLED>
    4a6a:	90 91 17 2a 	lds	r25, 0x2A17	; 0x802a17 <timerOLED+0x1>
    4a6e:	01 96       	adiw	r24, 0x01	; 1
    4a70:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    4a74:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>
    4a78:	80 e2       	ldi	r24, 0x20	; 32
    4a7a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    4a7e:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
    4a84:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <timerSAVEENCODER>
    4a88:	9f 91       	pop	r25
    4a8a:	8f 91       	pop	r24
    4a8c:	0f 90       	pop	r0
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	0f 90       	pop	r0
    4a92:	1f 90       	pop	r1
    4a94:	18 95       	reti

00004a96 <start_TCB0>:
    4a96:	25 e0       	ldi	r18, 0x05	; 5
    4a98:	3d e0       	ldi	r19, 0x0D	; 13
    4a9a:	ac 01       	movw	r20, r24
    4a9c:	42 9f       	mul	r20, r18
    4a9e:	c0 01       	movw	r24, r0
    4aa0:	43 9f       	mul	r20, r19
    4aa2:	90 0d       	add	r25, r0
    4aa4:	52 9f       	mul	r21, r18
    4aa6:	90 0d       	add	r25, r0
    4aa8:	11 24       	eor	r1, r1
    4aaa:	e0 e8       	ldi	r30, 0x80	; 128
    4aac:	fa e0       	ldi	r31, 0x0A	; 10
    4aae:	84 87       	std	Z+12, r24	; 0x0c
    4ab0:	95 87       	std	Z+13, r25	; 0x0d
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	85 83       	std	Z+5, r24	; 0x05
    4ab6:	80 83       	st	Z, r24
    4ab8:	08 95       	ret

00004aba <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    4aba:	1f 92       	push	r1
    4abc:	0f 92       	push	r0
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	0f 92       	push	r0
    4ac2:	11 24       	eor	r1, r1
    4ac4:	8f 93       	push	r24
    4ac6:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	USART0_ticks++;
    4ace:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4ad2:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4ad6:	01 96       	adiw	r24, 0x01	; 1
    4ad8:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    4adc:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
	USART1_ticks++;
    4ae0:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4ae4:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4ae8:	01 96       	adiw	r24, 0x01	; 1
    4aea:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    4aee:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
	USART3_ticks++;
    4af2:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    4af6:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    4afa:	01 96       	adiw	r24, 0x01	; 1
    4afc:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    4b00:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
	TWI_ticks++;
    4b04:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4b08:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    4b12:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>

    4b16:	9f 91       	pop	r25
    4b18:	8f 91       	pop	r24
    4b1a:	0f 90       	pop	r0
    4b1c:	0f be       	out	0x3f, r0	; 63
    4b1e:	0f 90       	pop	r0
    4b20:	1f 90       	pop	r1
    4b22:	18 95       	reti

00004b24 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    4b24:	e0 ea       	ldi	r30, 0xA0	; 160
    4b26:	f8 e0       	ldi	r31, 0x08	; 8
    4b28:	8b e0       	ldi	r24, 0x0B	; 11
    4b2a:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    4b2c:	83 81       	ldd	r24, Z+3	; 0x03
    4b2e:	81 60       	ori	r24, 0x01	; 1
    4b30:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    4b32:	85 81       	ldd	r24, Z+5	; 0x05
    4b34:	81 60       	ori	r24, 0x01	; 1
    4b36:	85 83       	std	Z+5, r24	; 0x05
    4b38:	08 95       	ret

00004b3a <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4b3a:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4b3e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4b42:	0f c0       	rjmp	.+30     	; 0x4b62 <read_TWI+0x28>
		asm("nop");
    4b44:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    4b46:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4b4a:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4b4e:	c3 97       	sbiw	r24, 0x33	; 51
    4b50:	40 f0       	brcs	.+16     	; 0x4b62 <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    4b52:	68 e9       	ldi	r22, 0x98	; 152
    4b54:	7d ea       	ldi	r23, 0xAD	; 173
    4b56:	81 e9       	ldi	r24, 0x91	; 145
    4b58:	91 e0       	ldi	r25, 0x01	; 1
    4b5a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(0xFF);
    4b5e:	8f ef       	ldi	r24, 0xFF	; 255
    4b60:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4b62:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4b66:	88 23       	and	r24, r24
    4b68:	6c f7       	brge	.-38     	; 0x4b44 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    4b6a:	e0 ea       	ldi	r30, 0xA0	; 160
    4b6c:	f8 e0       	ldi	r31, 0x08	; 8
    4b6e:	84 81       	ldd	r24, Z+4	; 0x04
    4b70:	8b 7f       	andi	r24, 0xFB	; 251
    4b72:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    4b74:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    4b76:	94 81       	ldd	r25, Z+4	; 0x04
    4b78:	92 60       	ori	r25, 0x02	; 2
    4b7a:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    4b7c:	08 95       	ret

00004b7e <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4b7e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4b82:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4b86:	0f c0       	rjmp	.+30     	; 0x4ba6 <readlast_TWI+0x28>
		asm("nop");
    4b88:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    4b8a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4b8e:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4b92:	c3 97       	sbiw	r24, 0x33	; 51
    4b94:	40 f0       	brcs	.+16     	; 0x4ba6 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    4b96:	69 ea       	ldi	r22, 0xA9	; 169
    4b98:	7d ea       	ldi	r23, 0xAD	; 173
    4b9a:	81 e9       	ldi	r24, 0x91	; 145
    4b9c:	91 e0       	ldi	r25, 0x01	; 1
    4b9e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(0xFF);
    4ba2:	8f ef       	ldi	r24, 0xFF	; 255
    4ba4:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4ba6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4baa:	88 23       	and	r24, r24
    4bac:	6c f7       	brge	.-38     	; 0x4b88 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    4bae:	e0 ea       	ldi	r30, 0xA0	; 160
    4bb0:	f8 e0       	ldi	r31, 0x08	; 8
    4bb2:	84 81       	ldd	r24, Z+4	; 0x04
    4bb4:	84 60       	ori	r24, 0x04	; 4
    4bb6:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    4bb8:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    4bba:	08 95       	ret

00004bbc <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    4bbc:	61 30       	cpi	r22, 0x01	; 1
    4bbe:	39 f4       	brne	.+14     	; 0x4bce <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	88 0f       	add	r24, r24
    4bc4:	99 1f       	adc	r25, r25
    4bc6:	81 60       	ori	r24, 0x01	; 1
    4bc8:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    4bcc:	03 c0       	rjmp	.+6      	; 0x4bd4 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    4bce:	88 0f       	add	r24, r24
    4bd0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    4bd4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4bd8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4bdc:	0f c0       	rjmp	.+30     	; 0x4bfc <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    4bde:	00 00       	nop
		if (TWI_ticks > 50) {
    4be0:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4be4:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4be8:	c3 97       	sbiw	r24, 0x33	; 51
    4bea:	40 f0       	brcs	.+16     	; 0x4bfc <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    4bec:	6a eb       	ldi	r22, 0xBA	; 186
    4bee:	7d ea       	ldi	r23, 0xAD	; 173
    4bf0:	81 e9       	ldi	r24, 0x91	; 145
    4bf2:	91 e0       	ldi	r25, 0x01	; 1
    4bf4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4bf8:	83 e6       	ldi	r24, 0x63	; 99
    4bfa:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4bfc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c00:	80 7c       	andi	r24, 0xC0	; 192
    4c02:	69 f3       	breq	.-38     	; 0x4bde <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    4c04:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c08:	82 ff       	sbrs	r24, 2
    4c0a:	08 c0       	rjmp	.+16     	; 0x4c1c <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    4c0c:	6c ec       	ldi	r22, 0xCC	; 204
    4c0e:	7d ea       	ldi	r23, 0xAD	; 173
    4c10:	81 e9       	ldi	r24, 0x91	; 145
    4c12:	91 e0       	ldi	r25, 0x01	; 1
    4c14:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4c18:	83 e6       	ldi	r24, 0x63	; 99
    4c1a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    4c1c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c20:	83 ff       	sbrs	r24, 3
    4c22:	08 c0       	rjmp	.+16     	; 0x4c34 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    4c24:	64 ed       	ldi	r22, 0xD4	; 212
    4c26:	7d ea       	ldi	r23, 0xAD	; 173
    4c28:	81 e9       	ldi	r24, 0x91	; 145
    4c2a:	91 e0       	ldi	r25, 0x01	; 1
    4c2c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4c30:	83 e6       	ldi	r24, 0x63	; 99
    4c32:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    4c34:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c38:	89 2f       	mov	r24, r25
    4c3a:	80 71       	andi	r24, 0x10	; 16
    4c3c:	94 ff       	sbrs	r25, 4
    4c3e:	07 c0       	rjmp	.+14     	; 0x4c4e <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    4c40:	64 ee       	ldi	r22, 0xE4	; 228
    4c42:	7d ea       	ldi	r23, 0xAD	; 173
    4c44:	81 e9       	ldi	r24, 0x91	; 145
    4c46:	91 e0       	ldi	r25, 0x01	; 1
    4c48:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4c4c:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    4c4e:	08 95       	ret

00004c50 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    4c50:	87 e0       	ldi	r24, 0x07	; 7
    4c52:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    4c56:	08 95       	ret

00004c58 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    4c58:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c5c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4c60:	10 c0       	rjmp	.+32     	; 0x4c82 <write_TWI+0x2a>
		asm("nop");
    4c62:	00 00       	nop
		if (TWI_ticks > 50) {
    4c64:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    4c68:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c6c:	23 33       	cpi	r18, 0x33	; 51
    4c6e:	31 05       	cpc	r19, r1
    4c70:	40 f0       	brcs	.+16     	; 0x4c82 <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    4c72:	6c ef       	ldi	r22, 0xFC	; 252
    4c74:	7d ea       	ldi	r23, 0xAD	; 173
    4c76:	81 e9       	ldi	r24, 0x91	; 145
    4c78:	91 e0       	ldi	r25, 0x01	; 1
    4c7a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4c7e:	83 e6       	ldi	r24, 0x63	; 99
    4c80:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4c82:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c86:	96 ff       	sbrs	r25, 6
    4c88:	ec cf       	rjmp	.-40     	; 0x4c62 <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    4c8a:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    4c8e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c92:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4c96:	0f c0       	rjmp	.+30     	; 0x4cb6 <write_TWI+0x5e>
		asm("nop");
    4c98:	00 00       	nop
		if (TWI_ticks > 50) {
    4c9a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c9e:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4ca2:	c3 97       	sbiw	r24, 0x33	; 51
    4ca4:	40 f0       	brcs	.+16     	; 0x4cb6 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    4ca6:	6d e0       	ldi	r22, 0x0D	; 13
    4ca8:	7e ea       	ldi	r23, 0xAE	; 174
    4caa:	81 e9       	ldi	r24, 0x91	; 145
    4cac:	91 e0       	ldi	r25, 0x01	; 1
    4cae:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
//			stop_TCB0();
			return(ERROR);
    4cb2:	83 e6       	ldi	r24, 0x63	; 99
    4cb4:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4cb6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4cba:	86 ff       	sbrs	r24, 6
    4cbc:	ed cf       	rjmp	.-38     	; 0x4c98 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    4cbe:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4cc2:	89 2f       	mov	r24, r25
    4cc4:	80 71       	andi	r24, 0x10	; 16
    4cc6:	94 ff       	sbrs	r25, 4
    4cc8:	07 c0       	rjmp	.+14     	; 0x4cd8 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    4cca:	6e e1       	ldi	r22, 0x1E	; 30
    4ccc:	7e ea       	ldi	r23, 0xAE	; 174
    4cce:	81 e9       	ldi	r24, 0x91	; 145
    4cd0:	91 e0       	ldi	r25, 0x01	; 1
    4cd2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printError>
		return(ERROR);
    4cd6:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    4cd8:	08 95       	ret

00004cda <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    4cda:	e0 e0       	ldi	r30, 0x00	; 0
    4cdc:	f4 e0       	ldi	r31, 0x04	; 4
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    4ce2:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    4ce4:	e0 e0       	ldi	r30, 0x00	; 0
    4ce6:	f8 e0       	ldi	r31, 0x08	; 8
    4ce8:	24 e7       	ldi	r18, 0x74	; 116
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	20 87       	std	Z+8, r18	; 0x08
    4cee:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4cf0:	95 81       	ldd	r25, Z+5	; 0x05
    4cf2:	90 68       	ori	r25, 0x80	; 128
    4cf4:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4cf6:	96 81       	ldd	r25, Z+6	; 0x06
    4cf8:	90 64       	ori	r25, 0x40	; 64
    4cfa:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4cfc:	96 81       	ldd	r25, Z+6	; 0x06
    4cfe:	90 68       	ori	r25, 0x80	; 128
    4d00:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    4d02:	10 92 41 2f 	sts	0x2F41, r1	; 0x802f41 <send0_buf+0xfe>
	send0_buf.tail = 0;
    4d06:	10 92 42 2f 	sts	0x2F42, r1	; 0x802f42 <send0_buf+0xff>
	send0_buf.done = YES;
    4d0a:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	recv0_buf.head = 0;
    4d0e:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    4d12:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    4d16:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
	recv0_buf.length = 0;
    4d1a:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
	recv0_buf.done = NO;
    4d1e:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    4d22:	e0 e4       	ldi	r30, 0x40	; 64
    4d24:	f4 e0       	ldi	r31, 0x04	; 4
    4d26:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    4d28:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4d2a:	e0 e2       	ldi	r30, 0x20	; 32
    4d2c:	f8 e0       	ldi	r31, 0x08	; 8
    4d2e:	2d e6       	ldi	r18, 0x6D	; 109
    4d30:	35 e0       	ldi	r19, 0x05	; 5
    4d32:	20 87       	std	Z+8, r18	; 0x08
    4d34:	31 87       	std	Z+9, r19	; 0x09
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4d36:	95 81       	ldd	r25, Z+5	; 0x05
    4d38:	90 68       	ori	r25, 0x80	; 128
    4d3a:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4d3c:	96 81       	ldd	r25, Z+6	; 0x06
    4d3e:	90 64       	ori	r25, 0x40	; 64
    4d40:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4d42:	96 81       	ldd	r25, Z+6	; 0x06
    4d44:	90 68       	ori	r25, 0x80	; 128
    4d46:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    4d48:	e0 e2       	ldi	r30, 0x20	; 32
    4d4a:	f4 e0       	ldi	r31, 0x04	; 4
    4d4c:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    4d4e:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4d50:	e0 e6       	ldi	r30, 0x60	; 96
    4d52:	f8 e0       	ldi	r31, 0x08	; 8
    4d54:	20 87       	std	Z+8, r18	; 0x08
    4d56:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    4d58:	96 81       	ldd	r25, Z+6	; 0x06
    4d5a:	90 64       	ori	r25, 0x40	; 64
    4d5c:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    4d5e:	96 81       	ldd	r25, Z+6	; 0x06
    4d60:	90 68       	ori	r25, 0x80	; 128
    4d62:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    4d64:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	recv3_buf.done = NO;
    4d68:	10 92 4a 30 	sts	0x304A, r1	; 0x80304a <recv3_buf+0x103>
    4d6c:	08 95       	ret

00004d6e <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    4d6e:	0f 93       	push	r16
    4d70:	1f 93       	push	r17
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	eb 01       	movw	r28, r22
    4d78:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4d7a:	81 30       	cpi	r24, 0x01	; 1
    4d7c:	b1 f1       	breq	.+108    	; 0x4dea <send_USART+0x7c>
    4d7e:	20 f0       	brcs	.+8      	; 0x4d88 <send_USART+0x1a>
    4d80:	83 30       	cpi	r24, 0x03	; 3
    4d82:	09 f4       	brne	.+2      	; 0x4d86 <send_USART+0x18>
    4d84:	81 c0       	rjmp	.+258    	; 0x4e88 <send_USART+0x11a>
    4d86:	88 c0       	rjmp	.+272    	; 0x4e98 <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    4d88:	10 92 46 2f 	sts	0x2F46, r1	; 0x802f46 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	11 c0       	rjmp	.+34     	; 0x4db2 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    4d90:	e1 e4       	ldi	r30, 0x41	; 65
    4d92:	ff e2       	ldi	r31, 0x2F	; 47
    4d94:	80 81       	ld	r24, Z
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	38 81       	ld	r19, Y
    4d9a:	dc 01       	movw	r26, r24
    4d9c:	ad 5b       	subi	r26, 0xBD	; 189
    4d9e:	b1 4d       	sbci	r27, 0xD1	; 209
    4da0:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    4da2:	01 96       	adiw	r24, 0x01	; 1
    4da4:	6e ef       	ldi	r22, 0xFE	; 254
    4da6:	70 e0       	ldi	r23, 0x00	; 0
    4da8:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
    4dac:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4dae:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    4db0:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4db2:	21 17       	cp	r18, r17
    4db4:	68 f3       	brcs	.-38     	; 0x4d90 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4db6:	e0 e0       	ldi	r30, 0x00	; 0
    4db8:	f8 e0       	ldi	r31, 0x08	; 8
    4dba:	85 81       	ldd	r24, Z+5	; 0x05
    4dbc:	80 62       	ori	r24, 0x20	; 32
    4dbe:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    4dc0:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    4dc4:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    4dc8:	0b c0       	rjmp	.+22     	; 0x4de0 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    4dca:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4dce:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4dd2:	85 36       	cpi	r24, 0x65	; 101
    4dd4:	91 05       	cpc	r25, r1
    4dd6:	20 f0       	brcs	.+8      	; 0x4de0 <send_USART+0x72>
					send0_buf.done = YES;
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
					return;
    4dde:	5c c0       	rjmp	.+184    	; 0x4e98 <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    4de0:	80 91 46 2f 	lds	r24, 0x2F46	; 0x802f46 <send0_buf+0x103>
    4de4:	88 23       	and	r24, r24
    4de6:	89 f3       	breq	.-30     	; 0x4dca <send_USART+0x5c>
    4de8:	57 c0       	rjmp	.+174    	; 0x4e98 <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    4dea:	64 2f       	mov	r22, r20
    4dec:	70 e0       	ldi	r23, 0x00	; 0
    4dee:	ce 01       	movw	r24, r28
    4df0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <crc16>
    4df4:	48 2f       	mov	r20, r24
    4df6:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	11 c0       	rjmp	.+34     	; 0x4e1e <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    4dfc:	ed e4       	ldi	r30, 0x4D	; 77
    4dfe:	f2 e3       	ldi	r31, 0x32	; 50
    4e00:	80 81       	ld	r24, Z
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	38 81       	ld	r19, Y
    4e06:	dc 01       	movw	r26, r24
    4e08:	a1 5b       	subi	r26, 0xB1	; 177
    4e0a:	be 4c       	sbci	r27, 0xCE	; 206
    4e0c:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4e0e:	01 96       	adiw	r24, 0x01	; 1
    4e10:	6e ef       	ldi	r22, 0xFE	; 254
    4e12:	70 e0       	ldi	r23, 0x00	; 0
    4e14:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
    4e18:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4e1a:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    4e1c:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4e1e:	21 17       	cp	r18, r17
    4e20:	68 f3       	brcs	.-38     	; 0x4dfc <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    4e22:	ed e4       	ldi	r30, 0x4D	; 77
    4e24:	f2 e3       	ldi	r31, 0x32	; 50
    4e26:	80 81       	ld	r24, Z
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	a1 5b       	subi	r26, 0xB1	; 177
    4e2e:	be 4c       	sbci	r27, 0xCE	; 206
    4e30:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4e32:	01 96       	adiw	r24, 0x01	; 1
    4e34:	2e ef       	ldi	r18, 0xFE	; 254
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	b9 01       	movw	r22, r18
    4e3a:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	dc 01       	movw	r26, r24
    4e42:	a1 5b       	subi	r26, 0xB1	; 177
    4e44:	be 4c       	sbci	r27, 0xCE	; 206
    4e46:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4e48:	01 96       	adiw	r24, 0x01	; 1
    4e4a:	b9 01       	movw	r22, r18
    4e4c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
    4e50:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    4e52:	1e 5f       	subi	r17, 0xFE	; 254
    4e54:	10 93 4f 32 	sts	0x324F, r17	; 0x80324f <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4e58:	e0 e2       	ldi	r30, 0x20	; 32
    4e5a:	f8 e0       	ldi	r31, 0x08	; 8
    4e5c:	85 81       	ldd	r24, Z+5	; 0x05
    4e5e:	80 62       	ori	r24, 0x20	; 32
    4e60:	85 83       	std	Z+5, r24	; 0x05
			break;
    4e62:	1a c0       	rjmp	.+52     	; 0x4e98 <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    4e64:	e9 e4       	ldi	r30, 0x49	; 73
    4e66:	f1 e3       	ldi	r31, 0x31	; 49
    4e68:	80 81       	ld	r24, Z
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	38 81       	ld	r19, Y
    4e6e:	dc 01       	movw	r26, r24
    4e70:	a5 5b       	subi	r26, 0xB5	; 181
    4e72:	bf 4c       	sbci	r27, 0xCF	; 207
    4e74:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	6e ef       	ldi	r22, 0xFE	; 254
    4e7a:	70 e0       	ldi	r23, 0x00	; 0
    4e7c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
    4e80:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4e82:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    4e84:	21 96       	adiw	r28, 0x01	; 1
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4e88:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4e8a:	21 17       	cp	r18, r17
    4e8c:	58 f3       	brcs	.-42     	; 0x4e64 <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4e8e:	e0 e6       	ldi	r30, 0x60	; 96
    4e90:	f8 e0       	ldi	r31, 0x08	; 8
    4e92:	85 81       	ldd	r24, Z+5	; 0x05
    4e94:	80 62       	ori	r24, 0x20	; 32
    4e96:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	08 95       	ret

00004ea2 <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    4ea2:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    4ea4:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    4ea8:	60 93 39 2c 	sts	0x2C39, r22	; 0x802c39 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	08 c0       	rjmp	.+16     	; 0x4ec0 <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    4eb0:	e9 2f       	mov	r30, r25
    4eb2:	f0 e0       	ldi	r31, 0x00	; 0
    4eb4:	8c 91       	ld	r24, X
    4eb6:	e5 5c       	subi	r30, 0xC5	; 197
    4eb8:	f4 4d       	sbci	r31, 0xD4	; 212
    4eba:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    4ebc:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    4ebe:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    4ec0:	96 17       	cp	r25, r22
    4ec2:	b0 f3       	brcs	.-20     	; 0x4eb0 <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    4ec4:	e0 e2       	ldi	r30, 0x20	; 32
    4ec6:	f8 e0       	ldi	r31, 0x08	; 8
    4ec8:	85 81       	ldd	r24, Z+5	; 0x05
    4eca:	80 62       	ori	r24, 0x20	; 32
    4ecc:	85 83       	std	Z+5, r24	; 0x05
    4ece:	08 95       	ret

00004ed0 <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    4ed0:	1f 92       	push	r1
    4ed2:	0f 92       	push	r0
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	0f 92       	push	r0
    4ed8:	11 24       	eor	r1, r1
    4eda:	8f 93       	push	r24
    4edc:	af 93       	push	r26
    4ede:	bf 93       	push	r27
    4ee0:	ef 93       	push	r30
    4ee2:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    4ee4:	aa e3       	ldi	r26, 0x3A	; 58
    4ee6:	bb e2       	ldi	r27, 0x2B	; 43
    4ee8:	ec 91       	ld	r30, X
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	8e 0f       	add	r24, r30
    4eee:	8c 93       	st	X, r24
    4ef0:	f0 e0       	ldi	r31, 0x00	; 0
    4ef2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    4ef6:	e5 5c       	subi	r30, 0xC5	; 197
    4ef8:	f5 4d       	sbci	r31, 0xD5	; 213
    4efa:	80 83       	st	Z, r24

}
    4efc:	ff 91       	pop	r31
    4efe:	ef 91       	pop	r30
    4f00:	bf 91       	pop	r27
    4f02:	af 91       	pop	r26
    4f04:	8f 91       	pop	r24
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    4f10:	1f 92       	push	r1
    4f12:	0f 92       	push	r0
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	0f 92       	push	r0
    4f18:	11 24       	eor	r1, r1
    4f1a:	8f 93       	push	r24
    4f1c:	9f 93       	push	r25
    4f1e:	af 93       	push	r26
    4f20:	bf 93       	push	r27
    4f22:	cf 93       	push	r28
    4f24:	df 93       	push	r29
    4f26:	ef 93       	push	r30
    4f28:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    4f2a:	a0 e2       	ldi	r26, 0x20	; 32
    4f2c:	b8 e0       	ldi	r27, 0x08	; 8
    4f2e:	15 96       	adiw	r26, 0x05	; 5
    4f30:	8c 91       	ld	r24, X
    4f32:	15 97       	sbiw	r26, 0x05	; 5
    4f34:	8f 7d       	andi	r24, 0xDF	; 223
    4f36:	15 96       	adiw	r26, 0x05	; 5
    4f38:	8c 93       	st	X, r24
    4f3a:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    4f3c:	ca e3       	ldi	r28, 0x3A	; 58
    4f3e:	dc e2       	ldi	r29, 0x2C	; 44
    4f40:	e8 81       	ld	r30, Y
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	8e 0f       	add	r24, r30
    4f46:	88 83       	st	Y, r24
    4f48:	f0 e0       	ldi	r31, 0x00	; 0
    4f4a:	e5 5c       	subi	r30, 0xC5	; 197
    4f4c:	f4 4d       	sbci	r31, 0xD4	; 212
    4f4e:	90 81       	ld	r25, Z
    4f50:	12 96       	adiw	r26, 0x02	; 2
    4f52:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    4f54:	90 91 39 2c 	lds	r25, 0x2C39	; 0x802c39 <ser_send1+0xfe>
    4f58:	89 17       	cp	r24, r25
    4f5a:	28 f4       	brcc	.+10     	; 0x4f66 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    4f5c:	e0 e2       	ldi	r30, 0x20	; 32
    4f5e:	f8 e0       	ldi	r31, 0x08	; 8
    4f60:	85 81       	ldd	r24, Z+5	; 0x05
    4f62:	80 62       	ori	r24, 0x20	; 32
    4f64:	85 83       	std	Z+5, r24	; 0x05
	}

}
    4f66:	ff 91       	pop	r31
    4f68:	ef 91       	pop	r30
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	bf 91       	pop	r27
    4f70:	af 91       	pop	r26
    4f72:	9f 91       	pop	r25
    4f74:	8f 91       	pop	r24
    4f76:	0f 90       	pop	r0
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	0f 90       	pop	r0
    4f7c:	1f 90       	pop	r1
    4f7e:	18 95       	reti

00004f80 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    4f80:	1f 92       	push	r1
    4f82:	0f 92       	push	r0
    4f84:	0f b6       	in	r0, 0x3f	; 63
    4f86:	0f 92       	push	r0
    4f88:	11 24       	eor	r1, r1
    4f8a:	5f 93       	push	r21
    4f8c:	6f 93       	push	r22
    4f8e:	7f 93       	push	r23
    4f90:	8f 93       	push	r24
    4f92:	9f 93       	push	r25
    4f94:	af 93       	push	r26
    4f96:	bf 93       	push	r27
    4f98:	ef 93       	push	r30
    4f9a:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    4f9c:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    4fa0:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
    4fa4:	8d 3f       	cpi	r24, 0xFD	; 253
    4fa6:	10 f5       	brcc	.+68     	; 0x4fec <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    4fa8:	9d 30       	cpi	r25, 0x0D	; 13
    4faa:	51 f4       	brne	.+20     	; 0x4fc0 <__vector_17+0x40>
			recv0_buf.done = YES;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	80 93 42 2e 	sts	0x2E42, r24	; 0x802e42 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    4fb2:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	e1 5c       	subi	r30, 0xC1	; 193
    4fba:	f2 4d       	sbci	r31, 0xD2	; 210
    4fbc:	10 82       	st	Z, r1
    4fbe:	06 c0       	rjmp	.+12     	; 0x4fcc <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    4fc0:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	e1 5c       	subi	r30, 0xC1	; 193
    4fc8:	f2 4d       	sbci	r31, 0xD2	; 210
    4fca:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    4fcc:	e0 e4       	ldi	r30, 0x40	; 64
    4fce:	fe e2       	ldi	r31, 0x2E	; 46
    4fd0:	80 81       	ld	r24, Z
    4fd2:	8f 5f       	subi	r24, 0xFF	; 255
    4fd4:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    4fd6:	ed e3       	ldi	r30, 0x3D	; 61
    4fd8:	fe e2       	ldi	r31, 0x2E	; 46
    4fda:	80 81       	ld	r24, Z
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	01 96       	adiw	r24, 0x01	; 1
    4fe0:	6e ef       	ldi	r22, 0xFE	; 254
    4fe2:	70 e0       	ldi	r23, 0x00	; 0
    4fe4:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodhi4>
    4fe8:	80 83       	st	Z, r24
    4fea:	0a c0       	rjmp	.+20     	; 0x5000 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    4fec:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    4ff0:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    4ff4:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
		recv0_buf.length = 0;
    4ff8:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
		recv0_buf.done = NO;
    4ffc:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
	}
}
    5000:	ff 91       	pop	r31
    5002:	ef 91       	pop	r30
    5004:	bf 91       	pop	r27
    5006:	af 91       	pop	r26
    5008:	9f 91       	pop	r25
    500a:	8f 91       	pop	r24
    500c:	7f 91       	pop	r23
    500e:	6f 91       	pop	r22
    5010:	5f 91       	pop	r21
    5012:	0f 90       	pop	r0
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	0f 90       	pop	r0
    5018:	1f 90       	pop	r1
    501a:	18 95       	reti

0000501c <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    501c:	1f 92       	push	r1
    501e:	0f 92       	push	r0
    5020:	0f b6       	in	r0, 0x3f	; 63
    5022:	0f 92       	push	r0
    5024:	11 24       	eor	r1, r1
    5026:	2f 93       	push	r18
    5028:	8f 93       	push	r24
    502a:	9f 93       	push	r25
    502c:	ef 93       	push	r30
    502e:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5030:	e0 e0       	ldi	r30, 0x00	; 0
    5032:	f8 e0       	ldi	r31, 0x08	; 8
    5034:	85 81       	ldd	r24, Z+5	; 0x05
    5036:	8f 7d       	andi	r24, 0xDF	; 223
    5038:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    503a:	80 91 41 2f 	lds	r24, 0x2F41	; 0x802f41 <send0_buf+0xfe>
    503e:	e0 91 42 2f 	lds	r30, 0x2F42	; 0x802f42 <send0_buf+0xff>
    5042:	8e 17       	cp	r24, r30
    5044:	d1 f0       	breq	.+52     	; 0x507a <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	8e 0f       	add	r24, r30
    504a:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
    504e:	f0 e0       	ldi	r31, 0x00	; 0
    5050:	ed 5b       	subi	r30, 0xBD	; 189
    5052:	f1 4d       	sbci	r31, 0xD1	; 209
    5054:	90 81       	ld	r25, Z
    5056:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    505a:	91 e0       	ldi	r25, 0x01	; 1
    505c:	8e 3f       	cpi	r24, 0xFE	; 254
    505e:	08 f4       	brcc	.+2      	; 0x5062 <__vector_18+0x46>
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	91 95       	neg	r25
    5064:	29 2f       	mov	r18, r25
    5066:	22 0f       	add	r18, r18
    5068:	82 1b       	sub	r24, r18
    506a:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    506e:	e0 e0       	ldi	r30, 0x00	; 0
    5070:	f8 e0       	ldi	r31, 0x08	; 8
    5072:	85 81       	ldd	r24, Z+5	; 0x05
    5074:	80 62       	ori	r24, 0x20	; 32
    5076:	85 83       	std	Z+5, r24	; 0x05
    5078:	03 c0       	rjmp	.+6      	; 0x5080 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	}

}
    5080:	ff 91       	pop	r31
    5082:	ef 91       	pop	r30
    5084:	9f 91       	pop	r25
    5086:	8f 91       	pop	r24
    5088:	2f 91       	pop	r18
    508a:	0f 90       	pop	r0
    508c:	0f be       	out	0x3f, r0	; 63
    508e:	0f 90       	pop	r0
    5090:	1f 90       	pop	r1
    5092:	18 95       	reti

00005094 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5094:	1f 92       	push	r1
    5096:	0f 92       	push	r0
    5098:	0f b6       	in	r0, 0x3f	; 63
    509a:	0f 92       	push	r0
    509c:	11 24       	eor	r1, r1
    509e:	8f 93       	push	r24
    50a0:	9f 93       	push	r25
    50a2:	af 93       	push	r26
    50a4:	bf 93       	push	r27
    50a6:	ef 93       	push	r30
    50a8:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    50aa:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    50ae:	8d 30       	cpi	r24, 0x0D	; 13
    50b0:	21 f0       	breq	.+8      	; 0x50ba <__vector_37+0x26>
    50b2:	e0 91 49 30 	lds	r30, 0x3049	; 0x803049 <recv3_buf+0x102>
    50b6:	ed 3f       	cpi	r30, 0xFD	; 253
    50b8:	78 f0       	brcs	.+30     	; 0x50d8 <__vector_37+0x44>
		recv3_buf.done = YES;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    50c0:	a9 e4       	ldi	r26, 0x49	; 73
    50c2:	b0 e3       	ldi	r27, 0x30	; 48
    50c4:	8c 91       	ld	r24, X
    50c6:	e8 2f       	mov	r30, r24
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	e9 5b       	subi	r30, 0xB9	; 185
    50cc:	f0 4d       	sbci	r31, 0xD0	; 208
    50ce:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    50d0:	80 93 47 30 	sts	0x3047, r24	; 0x803047 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    50d4:	1c 92       	st	X, r1
		return;
    50d6:	08 c0       	rjmp	.+16     	; 0x50e8 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    50d8:	91 e0       	ldi	r25, 0x01	; 1
    50da:	9e 0f       	add	r25, r30
    50dc:	90 93 49 30 	sts	0x3049, r25	; 0x803049 <recv3_buf+0x102>
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	e9 5b       	subi	r30, 0xB9	; 185
    50e4:	f0 4d       	sbci	r31, 0xD0	; 208
    50e6:	80 83       	st	Z, r24
	}

}
    50e8:	ff 91       	pop	r31
    50ea:	ef 91       	pop	r30
    50ec:	bf 91       	pop	r27
    50ee:	af 91       	pop	r26
    50f0:	9f 91       	pop	r25
    50f2:	8f 91       	pop	r24
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	8f 93       	push	r24
    510a:	9f 93       	push	r25
    510c:	af 93       	push	r26
    510e:	bf 93       	push	r27
    5110:	ef 93       	push	r30
    5112:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    5114:	ad e4       	ldi	r26, 0x4D	; 77
    5116:	b1 e3       	ldi	r27, 0x31	; 49
    5118:	ec 91       	ld	r30, X
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	8e 0f       	add	r24, r30
    511e:	8c 93       	st	X, r24
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	e5 5b       	subi	r30, 0xB5	; 181
    5124:	ff 4c       	sbci	r31, 0xCF	; 207
    5126:	90 81       	ld	r25, Z
    5128:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    512c:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <send3_buf+0x100>
    5130:	89 17       	cp	r24, r25
    5132:	40 f0       	brcs	.+16     	; 0x5144 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5134:	e0 e6       	ldi	r30, 0x60	; 96
    5136:	f8 e0       	ldi	r31, 0x08	; 8
    5138:	85 81       	ldd	r24, Z+5	; 0x05
    513a:	8f 7d       	andi	r24, 0xDF	; 223
    513c:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	}

}
    5144:	ff 91       	pop	r31
    5146:	ef 91       	pop	r30
    5148:	bf 91       	pop	r27
    514a:	af 91       	pop	r26
    514c:	9f 91       	pop	r25
    514e:	8f 91       	pop	r24
    5150:	0f 90       	pop	r0
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	0f 90       	pop	r0
    5156:	1f 90       	pop	r1
    5158:	18 95       	reti

0000515a <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    515a:	88 ed       	ldi	r24, 0xD8	; 216
    515c:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    5164:	08 95       	ret

00005166 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    5166:	1f 92       	push	r1
    5168:	0f 92       	push	r0
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	0f 92       	push	r0
    516e:	11 24       	eor	r1, r1
    5170:	2f 93       	push	r18
    5172:	3f 93       	push	r19
    5174:	4f 93       	push	r20
    5176:	5f 93       	push	r21
    5178:	6f 93       	push	r22
    517a:	7f 93       	push	r23
    517c:	8f 93       	push	r24
    517e:	9f 93       	push	r25
    5180:	af 93       	push	r26
    5182:	bf 93       	push	r27
    5184:	ef 93       	push	r30
    5186:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    5188:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    518c:	86 ff       	sbrs	r24, 6
    518e:	05 c0       	rjmp	.+10     	; 0x519a <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    5190:	80 e4       	ldi	r24, 0x40	; 64
    5192:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    5196:	0e 94 ad 28 	call	0x515a	; 0x515a <reboot>
	}

}
    519a:	ff 91       	pop	r31
    519c:	ef 91       	pop	r30
    519e:	bf 91       	pop	r27
    51a0:	af 91       	pop	r26
    51a2:	9f 91       	pop	r25
    51a4:	8f 91       	pop	r24
    51a6:	7f 91       	pop	r23
    51a8:	6f 91       	pop	r22
    51aa:	5f 91       	pop	r21
    51ac:	4f 91       	pop	r20
    51ae:	3f 91       	pop	r19
    51b0:	2f 91       	pop	r18
    51b2:	0f 90       	pop	r0
    51b4:	0f be       	out	0x3f, r0	; 63
    51b6:	0f 90       	pop	r0
    51b8:	1f 90       	pop	r1
    51ba:	18 95       	reti

000051bc <__subsf3>:
    51bc:	50 58       	subi	r21, 0x80	; 128

000051be <__addsf3>:
    51be:	bb 27       	eor	r27, r27
    51c0:	aa 27       	eor	r26, r26
    51c2:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__addsf3x>
    51c6:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <__fp_round>
    51ca:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__fp_pscA>
    51ce:	38 f0       	brcs	.+14     	; 0x51de <__addsf3+0x20>
    51d0:	0e 94 33 2a 	call	0x5466	; 0x5466 <__fp_pscB>
    51d4:	20 f0       	brcs	.+8      	; 0x51de <__addsf3+0x20>
    51d6:	39 f4       	brne	.+14     	; 0x51e6 <__addsf3+0x28>
    51d8:	9f 3f       	cpi	r25, 0xFF	; 255
    51da:	19 f4       	brne	.+6      	; 0x51e2 <__addsf3+0x24>
    51dc:	26 f4       	brtc	.+8      	; 0x51e6 <__addsf3+0x28>
    51de:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__fp_nan>
    51e2:	0e f4       	brtc	.+2      	; 0x51e6 <__addsf3+0x28>
    51e4:	e0 95       	com	r30
    51e6:	e7 fb       	bst	r30, 7
    51e8:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__fp_inf>

000051ec <__addsf3x>:
    51ec:	e9 2f       	mov	r30, r25
    51ee:	0e 94 4b 2a 	call	0x5496	; 0x5496 <__fp_split3>
    51f2:	58 f3       	brcs	.-42     	; 0x51ca <__addsf3+0xc>
    51f4:	ba 17       	cp	r27, r26
    51f6:	62 07       	cpc	r22, r18
    51f8:	73 07       	cpc	r23, r19
    51fa:	84 07       	cpc	r24, r20
    51fc:	95 07       	cpc	r25, r21
    51fe:	20 f0       	brcs	.+8      	; 0x5208 <__addsf3x+0x1c>
    5200:	79 f4       	brne	.+30     	; 0x5220 <__addsf3x+0x34>
    5202:	a6 f5       	brtc	.+104    	; 0x526c <__addsf3x+0x80>
    5204:	0c 94 6d 2a 	jmp	0x54da	; 0x54da <__fp_zero>
    5208:	0e f4       	brtc	.+2      	; 0x520c <__addsf3x+0x20>
    520a:	e0 95       	com	r30
    520c:	0b 2e       	mov	r0, r27
    520e:	ba 2f       	mov	r27, r26
    5210:	a0 2d       	mov	r26, r0
    5212:	0b 01       	movw	r0, r22
    5214:	b9 01       	movw	r22, r18
    5216:	90 01       	movw	r18, r0
    5218:	0c 01       	movw	r0, r24
    521a:	ca 01       	movw	r24, r20
    521c:	a0 01       	movw	r20, r0
    521e:	11 24       	eor	r1, r1
    5220:	ff 27       	eor	r31, r31
    5222:	59 1b       	sub	r21, r25
    5224:	99 f0       	breq	.+38     	; 0x524c <__addsf3x+0x60>
    5226:	59 3f       	cpi	r21, 0xF9	; 249
    5228:	50 f4       	brcc	.+20     	; 0x523e <__addsf3x+0x52>
    522a:	50 3e       	cpi	r21, 0xE0	; 224
    522c:	68 f1       	brcs	.+90     	; 0x5288 <__addsf3x+0x9c>
    522e:	1a 16       	cp	r1, r26
    5230:	f0 40       	sbci	r31, 0x00	; 0
    5232:	a2 2f       	mov	r26, r18
    5234:	23 2f       	mov	r18, r19
    5236:	34 2f       	mov	r19, r20
    5238:	44 27       	eor	r20, r20
    523a:	58 5f       	subi	r21, 0xF8	; 248
    523c:	f3 cf       	rjmp	.-26     	; 0x5224 <__addsf3x+0x38>
    523e:	46 95       	lsr	r20
    5240:	37 95       	ror	r19
    5242:	27 95       	ror	r18
    5244:	a7 95       	ror	r26
    5246:	f0 40       	sbci	r31, 0x00	; 0
    5248:	53 95       	inc	r21
    524a:	c9 f7       	brne	.-14     	; 0x523e <__addsf3x+0x52>
    524c:	7e f4       	brtc	.+30     	; 0x526c <__addsf3x+0x80>
    524e:	1f 16       	cp	r1, r31
    5250:	ba 0b       	sbc	r27, r26
    5252:	62 0b       	sbc	r22, r18
    5254:	73 0b       	sbc	r23, r19
    5256:	84 0b       	sbc	r24, r20
    5258:	ba f0       	brmi	.+46     	; 0x5288 <__addsf3x+0x9c>
    525a:	91 50       	subi	r25, 0x01	; 1
    525c:	a1 f0       	breq	.+40     	; 0x5286 <__addsf3x+0x9a>
    525e:	ff 0f       	add	r31, r31
    5260:	bb 1f       	adc	r27, r27
    5262:	66 1f       	adc	r22, r22
    5264:	77 1f       	adc	r23, r23
    5266:	88 1f       	adc	r24, r24
    5268:	c2 f7       	brpl	.-16     	; 0x525a <__addsf3x+0x6e>
    526a:	0e c0       	rjmp	.+28     	; 0x5288 <__addsf3x+0x9c>
    526c:	ba 0f       	add	r27, r26
    526e:	62 1f       	adc	r22, r18
    5270:	73 1f       	adc	r23, r19
    5272:	84 1f       	adc	r24, r20
    5274:	48 f4       	brcc	.+18     	; 0x5288 <__addsf3x+0x9c>
    5276:	87 95       	ror	r24
    5278:	77 95       	ror	r23
    527a:	67 95       	ror	r22
    527c:	b7 95       	ror	r27
    527e:	f7 95       	ror	r31
    5280:	9e 3f       	cpi	r25, 0xFE	; 254
    5282:	08 f0       	brcs	.+2      	; 0x5286 <__addsf3x+0x9a>
    5284:	b0 cf       	rjmp	.-160    	; 0x51e6 <__addsf3+0x28>
    5286:	93 95       	inc	r25
    5288:	88 0f       	add	r24, r24
    528a:	08 f0       	brcs	.+2      	; 0x528e <__addsf3x+0xa2>
    528c:	99 27       	eor	r25, r25
    528e:	ee 0f       	add	r30, r30
    5290:	97 95       	ror	r25
    5292:	87 95       	ror	r24
    5294:	08 95       	ret

00005296 <__cmpsf2>:
    5296:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__fp_cmp>
    529a:	08 f4       	brcc	.+2      	; 0x529e <__cmpsf2+0x8>
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	08 95       	ret

000052a0 <__divsf3>:
    52a0:	0e 94 64 29 	call	0x52c8	; 0x52c8 <__divsf3x>
    52a4:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <__fp_round>
    52a8:	0e 94 33 2a 	call	0x5466	; 0x5466 <__fp_pscB>
    52ac:	58 f0       	brcs	.+22     	; 0x52c4 <__divsf3+0x24>
    52ae:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__fp_pscA>
    52b2:	40 f0       	brcs	.+16     	; 0x52c4 <__divsf3+0x24>
    52b4:	29 f4       	brne	.+10     	; 0x52c0 <__divsf3+0x20>
    52b6:	5f 3f       	cpi	r21, 0xFF	; 255
    52b8:	29 f0       	breq	.+10     	; 0x52c4 <__divsf3+0x24>
    52ba:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__fp_inf>
    52be:	51 11       	cpse	r21, r1
    52c0:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_szero>
    52c4:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__fp_nan>

000052c8 <__divsf3x>:
    52c8:	0e 94 4b 2a 	call	0x5496	; 0x5496 <__fp_split3>
    52cc:	68 f3       	brcs	.-38     	; 0x52a8 <__divsf3+0x8>

000052ce <__divsf3_pse>:
    52ce:	99 23       	and	r25, r25
    52d0:	b1 f3       	breq	.-20     	; 0x52be <__divsf3+0x1e>
    52d2:	55 23       	and	r21, r21
    52d4:	91 f3       	breq	.-28     	; 0x52ba <__divsf3+0x1a>
    52d6:	95 1b       	sub	r25, r21
    52d8:	55 0b       	sbc	r21, r21
    52da:	bb 27       	eor	r27, r27
    52dc:	aa 27       	eor	r26, r26
    52de:	62 17       	cp	r22, r18
    52e0:	73 07       	cpc	r23, r19
    52e2:	84 07       	cpc	r24, r20
    52e4:	38 f0       	brcs	.+14     	; 0x52f4 <__divsf3_pse+0x26>
    52e6:	9f 5f       	subi	r25, 0xFF	; 255
    52e8:	5f 4f       	sbci	r21, 0xFF	; 255
    52ea:	22 0f       	add	r18, r18
    52ec:	33 1f       	adc	r19, r19
    52ee:	44 1f       	adc	r20, r20
    52f0:	aa 1f       	adc	r26, r26
    52f2:	a9 f3       	breq	.-22     	; 0x52de <__divsf3_pse+0x10>
    52f4:	35 d0       	rcall	.+106    	; 0x5360 <__divsf3_pse+0x92>
    52f6:	0e 2e       	mov	r0, r30
    52f8:	3a f0       	brmi	.+14     	; 0x5308 <__divsf3_pse+0x3a>
    52fa:	e0 e8       	ldi	r30, 0x80	; 128
    52fc:	32 d0       	rcall	.+100    	; 0x5362 <__divsf3_pse+0x94>
    52fe:	91 50       	subi	r25, 0x01	; 1
    5300:	50 40       	sbci	r21, 0x00	; 0
    5302:	e6 95       	lsr	r30
    5304:	00 1c       	adc	r0, r0
    5306:	ca f7       	brpl	.-14     	; 0x52fa <__divsf3_pse+0x2c>
    5308:	2b d0       	rcall	.+86     	; 0x5360 <__divsf3_pse+0x92>
    530a:	fe 2f       	mov	r31, r30
    530c:	29 d0       	rcall	.+82     	; 0x5360 <__divsf3_pse+0x92>
    530e:	66 0f       	add	r22, r22
    5310:	77 1f       	adc	r23, r23
    5312:	88 1f       	adc	r24, r24
    5314:	bb 1f       	adc	r27, r27
    5316:	26 17       	cp	r18, r22
    5318:	37 07       	cpc	r19, r23
    531a:	48 07       	cpc	r20, r24
    531c:	ab 07       	cpc	r26, r27
    531e:	b0 e8       	ldi	r27, 0x80	; 128
    5320:	09 f0       	breq	.+2      	; 0x5324 <__divsf3_pse+0x56>
    5322:	bb 0b       	sbc	r27, r27
    5324:	80 2d       	mov	r24, r0
    5326:	bf 01       	movw	r22, r30
    5328:	ff 27       	eor	r31, r31
    532a:	93 58       	subi	r25, 0x83	; 131
    532c:	5f 4f       	sbci	r21, 0xFF	; 255
    532e:	3a f0       	brmi	.+14     	; 0x533e <__divsf3_pse+0x70>
    5330:	9e 3f       	cpi	r25, 0xFE	; 254
    5332:	51 05       	cpc	r21, r1
    5334:	78 f0       	brcs	.+30     	; 0x5354 <__divsf3_pse+0x86>
    5336:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__fp_inf>
    533a:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_szero>
    533e:	5f 3f       	cpi	r21, 0xFF	; 255
    5340:	e4 f3       	brlt	.-8      	; 0x533a <__divsf3_pse+0x6c>
    5342:	98 3e       	cpi	r25, 0xE8	; 232
    5344:	d4 f3       	brlt	.-12     	; 0x533a <__divsf3_pse+0x6c>
    5346:	86 95       	lsr	r24
    5348:	77 95       	ror	r23
    534a:	67 95       	ror	r22
    534c:	b7 95       	ror	r27
    534e:	f7 95       	ror	r31
    5350:	9f 5f       	subi	r25, 0xFF	; 255
    5352:	c9 f7       	brne	.-14     	; 0x5346 <__divsf3_pse+0x78>
    5354:	88 0f       	add	r24, r24
    5356:	91 1d       	adc	r25, r1
    5358:	96 95       	lsr	r25
    535a:	87 95       	ror	r24
    535c:	97 f9       	bld	r25, 7
    535e:	08 95       	ret
    5360:	e1 e0       	ldi	r30, 0x01	; 1
    5362:	66 0f       	add	r22, r22
    5364:	77 1f       	adc	r23, r23
    5366:	88 1f       	adc	r24, r24
    5368:	bb 1f       	adc	r27, r27
    536a:	62 17       	cp	r22, r18
    536c:	73 07       	cpc	r23, r19
    536e:	84 07       	cpc	r24, r20
    5370:	ba 07       	cpc	r27, r26
    5372:	20 f0       	brcs	.+8      	; 0x537c <__divsf3_pse+0xae>
    5374:	62 1b       	sub	r22, r18
    5376:	73 0b       	sbc	r23, r19
    5378:	84 0b       	sbc	r24, r20
    537a:	ba 0b       	sbc	r27, r26
    537c:	ee 1f       	adc	r30, r30
    537e:	88 f7       	brcc	.-30     	; 0x5362 <__divsf3_pse+0x94>
    5380:	e0 95       	com	r30
    5382:	08 95       	ret

00005384 <__floatunsisf>:
    5384:	e8 94       	clt
    5386:	09 c0       	rjmp	.+18     	; 0x539a <__floatsisf+0x12>

00005388 <__floatsisf>:
    5388:	97 fb       	bst	r25, 7
    538a:	3e f4       	brtc	.+14     	; 0x539a <__floatsisf+0x12>
    538c:	90 95       	com	r25
    538e:	80 95       	com	r24
    5390:	70 95       	com	r23
    5392:	61 95       	neg	r22
    5394:	7f 4f       	sbci	r23, 0xFF	; 255
    5396:	8f 4f       	sbci	r24, 0xFF	; 255
    5398:	9f 4f       	sbci	r25, 0xFF	; 255
    539a:	99 23       	and	r25, r25
    539c:	a9 f0       	breq	.+42     	; 0x53c8 <__floatsisf+0x40>
    539e:	f9 2f       	mov	r31, r25
    53a0:	96 e9       	ldi	r25, 0x96	; 150
    53a2:	bb 27       	eor	r27, r27
    53a4:	93 95       	inc	r25
    53a6:	f6 95       	lsr	r31
    53a8:	87 95       	ror	r24
    53aa:	77 95       	ror	r23
    53ac:	67 95       	ror	r22
    53ae:	b7 95       	ror	r27
    53b0:	f1 11       	cpse	r31, r1
    53b2:	f8 cf       	rjmp	.-16     	; 0x53a4 <__floatsisf+0x1c>
    53b4:	fa f4       	brpl	.+62     	; 0x53f4 <__floatsisf+0x6c>
    53b6:	bb 0f       	add	r27, r27
    53b8:	11 f4       	brne	.+4      	; 0x53be <__floatsisf+0x36>
    53ba:	60 ff       	sbrs	r22, 0
    53bc:	1b c0       	rjmp	.+54     	; 0x53f4 <__floatsisf+0x6c>
    53be:	6f 5f       	subi	r22, 0xFF	; 255
    53c0:	7f 4f       	sbci	r23, 0xFF	; 255
    53c2:	8f 4f       	sbci	r24, 0xFF	; 255
    53c4:	9f 4f       	sbci	r25, 0xFF	; 255
    53c6:	16 c0       	rjmp	.+44     	; 0x53f4 <__floatsisf+0x6c>
    53c8:	88 23       	and	r24, r24
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <__floatsisf+0x48>
    53cc:	96 e9       	ldi	r25, 0x96	; 150
    53ce:	11 c0       	rjmp	.+34     	; 0x53f2 <__floatsisf+0x6a>
    53d0:	77 23       	and	r23, r23
    53d2:	21 f0       	breq	.+8      	; 0x53dc <__floatsisf+0x54>
    53d4:	9e e8       	ldi	r25, 0x8E	; 142
    53d6:	87 2f       	mov	r24, r23
    53d8:	76 2f       	mov	r23, r22
    53da:	05 c0       	rjmp	.+10     	; 0x53e6 <__floatsisf+0x5e>
    53dc:	66 23       	and	r22, r22
    53de:	71 f0       	breq	.+28     	; 0x53fc <__floatsisf+0x74>
    53e0:	96 e8       	ldi	r25, 0x86	; 134
    53e2:	86 2f       	mov	r24, r22
    53e4:	70 e0       	ldi	r23, 0x00	; 0
    53e6:	60 e0       	ldi	r22, 0x00	; 0
    53e8:	2a f0       	brmi	.+10     	; 0x53f4 <__floatsisf+0x6c>
    53ea:	9a 95       	dec	r25
    53ec:	66 0f       	add	r22, r22
    53ee:	77 1f       	adc	r23, r23
    53f0:	88 1f       	adc	r24, r24
    53f2:	da f7       	brpl	.-10     	; 0x53ea <__floatsisf+0x62>
    53f4:	88 0f       	add	r24, r24
    53f6:	96 95       	lsr	r25
    53f8:	87 95       	ror	r24
    53fa:	97 f9       	bld	r25, 7
    53fc:	08 95       	ret

000053fe <__fp_cmp>:
    53fe:	99 0f       	add	r25, r25
    5400:	00 08       	sbc	r0, r0
    5402:	55 0f       	add	r21, r21
    5404:	aa 0b       	sbc	r26, r26
    5406:	e0 e8       	ldi	r30, 0x80	; 128
    5408:	fe ef       	ldi	r31, 0xFE	; 254
    540a:	16 16       	cp	r1, r22
    540c:	17 06       	cpc	r1, r23
    540e:	e8 07       	cpc	r30, r24
    5410:	f9 07       	cpc	r31, r25
    5412:	c0 f0       	brcs	.+48     	; 0x5444 <__fp_cmp+0x46>
    5414:	12 16       	cp	r1, r18
    5416:	13 06       	cpc	r1, r19
    5418:	e4 07       	cpc	r30, r20
    541a:	f5 07       	cpc	r31, r21
    541c:	98 f0       	brcs	.+38     	; 0x5444 <__fp_cmp+0x46>
    541e:	62 1b       	sub	r22, r18
    5420:	73 0b       	sbc	r23, r19
    5422:	84 0b       	sbc	r24, r20
    5424:	95 0b       	sbc	r25, r21
    5426:	39 f4       	brne	.+14     	; 0x5436 <__fp_cmp+0x38>
    5428:	0a 26       	eor	r0, r26
    542a:	61 f0       	breq	.+24     	; 0x5444 <__fp_cmp+0x46>
    542c:	23 2b       	or	r18, r19
    542e:	24 2b       	or	r18, r20
    5430:	25 2b       	or	r18, r21
    5432:	21 f4       	brne	.+8      	; 0x543c <__fp_cmp+0x3e>
    5434:	08 95       	ret
    5436:	0a 26       	eor	r0, r26
    5438:	09 f4       	brne	.+2      	; 0x543c <__fp_cmp+0x3e>
    543a:	a1 40       	sbci	r26, 0x01	; 1
    543c:	a6 95       	lsr	r26
    543e:	8f ef       	ldi	r24, 0xFF	; 255
    5440:	81 1d       	adc	r24, r1
    5442:	81 1d       	adc	r24, r1
    5444:	08 95       	ret

00005446 <__fp_inf>:
    5446:	97 f9       	bld	r25, 7
    5448:	9f 67       	ori	r25, 0x7F	; 127
    544a:	80 e8       	ldi	r24, 0x80	; 128
    544c:	70 e0       	ldi	r23, 0x00	; 0
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	08 95       	ret

00005452 <__fp_nan>:
    5452:	9f ef       	ldi	r25, 0xFF	; 255
    5454:	80 ec       	ldi	r24, 0xC0	; 192
    5456:	08 95       	ret

00005458 <__fp_pscA>:
    5458:	00 24       	eor	r0, r0
    545a:	0a 94       	dec	r0
    545c:	16 16       	cp	r1, r22
    545e:	17 06       	cpc	r1, r23
    5460:	18 06       	cpc	r1, r24
    5462:	09 06       	cpc	r0, r25
    5464:	08 95       	ret

00005466 <__fp_pscB>:
    5466:	00 24       	eor	r0, r0
    5468:	0a 94       	dec	r0
    546a:	12 16       	cp	r1, r18
    546c:	13 06       	cpc	r1, r19
    546e:	14 06       	cpc	r1, r20
    5470:	05 06       	cpc	r0, r21
    5472:	08 95       	ret

00005474 <__fp_round>:
    5474:	09 2e       	mov	r0, r25
    5476:	03 94       	inc	r0
    5478:	00 0c       	add	r0, r0
    547a:	11 f4       	brne	.+4      	; 0x5480 <__fp_round+0xc>
    547c:	88 23       	and	r24, r24
    547e:	52 f0       	brmi	.+20     	; 0x5494 <__fp_round+0x20>
    5480:	bb 0f       	add	r27, r27
    5482:	40 f4       	brcc	.+16     	; 0x5494 <__fp_round+0x20>
    5484:	bf 2b       	or	r27, r31
    5486:	11 f4       	brne	.+4      	; 0x548c <__fp_round+0x18>
    5488:	60 ff       	sbrs	r22, 0
    548a:	04 c0       	rjmp	.+8      	; 0x5494 <__fp_round+0x20>
    548c:	6f 5f       	subi	r22, 0xFF	; 255
    548e:	7f 4f       	sbci	r23, 0xFF	; 255
    5490:	8f 4f       	sbci	r24, 0xFF	; 255
    5492:	9f 4f       	sbci	r25, 0xFF	; 255
    5494:	08 95       	ret

00005496 <__fp_split3>:
    5496:	57 fd       	sbrc	r21, 7
    5498:	90 58       	subi	r25, 0x80	; 128
    549a:	44 0f       	add	r20, r20
    549c:	55 1f       	adc	r21, r21
    549e:	59 f0       	breq	.+22     	; 0x54b6 <__fp_splitA+0x10>
    54a0:	5f 3f       	cpi	r21, 0xFF	; 255
    54a2:	71 f0       	breq	.+28     	; 0x54c0 <__fp_splitA+0x1a>
    54a4:	47 95       	ror	r20

000054a6 <__fp_splitA>:
    54a6:	88 0f       	add	r24, r24
    54a8:	97 fb       	bst	r25, 7
    54aa:	99 1f       	adc	r25, r25
    54ac:	61 f0       	breq	.+24     	; 0x54c6 <__fp_splitA+0x20>
    54ae:	9f 3f       	cpi	r25, 0xFF	; 255
    54b0:	79 f0       	breq	.+30     	; 0x54d0 <__fp_splitA+0x2a>
    54b2:	87 95       	ror	r24
    54b4:	08 95       	ret
    54b6:	12 16       	cp	r1, r18
    54b8:	13 06       	cpc	r1, r19
    54ba:	14 06       	cpc	r1, r20
    54bc:	55 1f       	adc	r21, r21
    54be:	f2 cf       	rjmp	.-28     	; 0x54a4 <__fp_split3+0xe>
    54c0:	46 95       	lsr	r20
    54c2:	f1 df       	rcall	.-30     	; 0x54a6 <__fp_splitA>
    54c4:	08 c0       	rjmp	.+16     	; 0x54d6 <__fp_splitA+0x30>
    54c6:	16 16       	cp	r1, r22
    54c8:	17 06       	cpc	r1, r23
    54ca:	18 06       	cpc	r1, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	f1 cf       	rjmp	.-30     	; 0x54b2 <__fp_splitA+0xc>
    54d0:	86 95       	lsr	r24
    54d2:	71 05       	cpc	r23, r1
    54d4:	61 05       	cpc	r22, r1
    54d6:	08 94       	sec
    54d8:	08 95       	ret

000054da <__fp_zero>:
    54da:	e8 94       	clt

000054dc <__fp_szero>:
    54dc:	bb 27       	eor	r27, r27
    54de:	66 27       	eor	r22, r22
    54e0:	77 27       	eor	r23, r23
    54e2:	cb 01       	movw	r24, r22
    54e4:	97 f9       	bld	r25, 7
    54e6:	08 95       	ret

000054e8 <__gesf2>:
    54e8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__fp_cmp>
    54ec:	08 f4       	brcc	.+2      	; 0x54f0 <__gesf2+0x8>
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	08 95       	ret

000054f2 <__mulsf3>:
    54f2:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__mulsf3x>
    54f6:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <__fp_round>
    54fa:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__fp_pscA>
    54fe:	38 f0       	brcs	.+14     	; 0x550e <__mulsf3+0x1c>
    5500:	0e 94 33 2a 	call	0x5466	; 0x5466 <__fp_pscB>
    5504:	20 f0       	brcs	.+8      	; 0x550e <__mulsf3+0x1c>
    5506:	95 23       	and	r25, r21
    5508:	11 f0       	breq	.+4      	; 0x550e <__mulsf3+0x1c>
    550a:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__fp_inf>
    550e:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__fp_nan>
    5512:	11 24       	eor	r1, r1
    5514:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_szero>

00005518 <__mulsf3x>:
    5518:	0e 94 4b 2a 	call	0x5496	; 0x5496 <__fp_split3>
    551c:	70 f3       	brcs	.-36     	; 0x54fa <__mulsf3+0x8>

0000551e <__mulsf3_pse>:
    551e:	95 9f       	mul	r25, r21
    5520:	c1 f3       	breq	.-16     	; 0x5512 <__mulsf3+0x20>
    5522:	95 0f       	add	r25, r21
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	55 1f       	adc	r21, r21
    5528:	62 9f       	mul	r22, r18
    552a:	f0 01       	movw	r30, r0
    552c:	72 9f       	mul	r23, r18
    552e:	bb 27       	eor	r27, r27
    5530:	f0 0d       	add	r31, r0
    5532:	b1 1d       	adc	r27, r1
    5534:	63 9f       	mul	r22, r19
    5536:	aa 27       	eor	r26, r26
    5538:	f0 0d       	add	r31, r0
    553a:	b1 1d       	adc	r27, r1
    553c:	aa 1f       	adc	r26, r26
    553e:	64 9f       	mul	r22, r20
    5540:	66 27       	eor	r22, r22
    5542:	b0 0d       	add	r27, r0
    5544:	a1 1d       	adc	r26, r1
    5546:	66 1f       	adc	r22, r22
    5548:	82 9f       	mul	r24, r18
    554a:	22 27       	eor	r18, r18
    554c:	b0 0d       	add	r27, r0
    554e:	a1 1d       	adc	r26, r1
    5550:	62 1f       	adc	r22, r18
    5552:	73 9f       	mul	r23, r19
    5554:	b0 0d       	add	r27, r0
    5556:	a1 1d       	adc	r26, r1
    5558:	62 1f       	adc	r22, r18
    555a:	83 9f       	mul	r24, r19
    555c:	a0 0d       	add	r26, r0
    555e:	61 1d       	adc	r22, r1
    5560:	22 1f       	adc	r18, r18
    5562:	74 9f       	mul	r23, r20
    5564:	33 27       	eor	r19, r19
    5566:	a0 0d       	add	r26, r0
    5568:	61 1d       	adc	r22, r1
    556a:	23 1f       	adc	r18, r19
    556c:	84 9f       	mul	r24, r20
    556e:	60 0d       	add	r22, r0
    5570:	21 1d       	adc	r18, r1
    5572:	82 2f       	mov	r24, r18
    5574:	76 2f       	mov	r23, r22
    5576:	6a 2f       	mov	r22, r26
    5578:	11 24       	eor	r1, r1
    557a:	9f 57       	subi	r25, 0x7F	; 127
    557c:	50 40       	sbci	r21, 0x00	; 0
    557e:	9a f0       	brmi	.+38     	; 0x55a6 <__mulsf3_pse+0x88>
    5580:	f1 f0       	breq	.+60     	; 0x55be <__mulsf3_pse+0xa0>
    5582:	88 23       	and	r24, r24
    5584:	4a f0       	brmi	.+18     	; 0x5598 <__mulsf3_pse+0x7a>
    5586:	ee 0f       	add	r30, r30
    5588:	ff 1f       	adc	r31, r31
    558a:	bb 1f       	adc	r27, r27
    558c:	66 1f       	adc	r22, r22
    558e:	77 1f       	adc	r23, r23
    5590:	88 1f       	adc	r24, r24
    5592:	91 50       	subi	r25, 0x01	; 1
    5594:	50 40       	sbci	r21, 0x00	; 0
    5596:	a9 f7       	brne	.-22     	; 0x5582 <__mulsf3_pse+0x64>
    5598:	9e 3f       	cpi	r25, 0xFE	; 254
    559a:	51 05       	cpc	r21, r1
    559c:	80 f0       	brcs	.+32     	; 0x55be <__mulsf3_pse+0xa0>
    559e:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__fp_inf>
    55a2:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_szero>
    55a6:	5f 3f       	cpi	r21, 0xFF	; 255
    55a8:	e4 f3       	brlt	.-8      	; 0x55a2 <__mulsf3_pse+0x84>
    55aa:	98 3e       	cpi	r25, 0xE8	; 232
    55ac:	d4 f3       	brlt	.-12     	; 0x55a2 <__mulsf3_pse+0x84>
    55ae:	86 95       	lsr	r24
    55b0:	77 95       	ror	r23
    55b2:	67 95       	ror	r22
    55b4:	b7 95       	ror	r27
    55b6:	f7 95       	ror	r31
    55b8:	e7 95       	ror	r30
    55ba:	9f 5f       	subi	r25, 0xFF	; 255
    55bc:	c1 f7       	brne	.-16     	; 0x55ae <__mulsf3_pse+0x90>
    55be:	fe 2b       	or	r31, r30
    55c0:	88 0f       	add	r24, r24
    55c2:	91 1d       	adc	r25, r1
    55c4:	96 95       	lsr	r25
    55c6:	87 95       	ror	r24
    55c8:	97 f9       	bld	r25, 7
    55ca:	08 95       	ret

000055cc <vfprintf>:
    55cc:	a0 e1       	ldi	r26, 0x10	; 16
    55ce:	b0 e0       	ldi	r27, 0x00	; 0
    55d0:	ec ee       	ldi	r30, 0xEC	; 236
    55d2:	fa e2       	ldi	r31, 0x2A	; 42
    55d4:	0c 94 a7 2e 	jmp	0x5d4e	; 0x5d4e <__prologue_saves__>
    55d8:	7c 01       	movw	r14, r24
    55da:	1b 01       	movw	r2, r22
    55dc:	6a 01       	movw	r12, r20
    55de:	fc 01       	movw	r30, r24
    55e0:	16 82       	std	Z+6, r1	; 0x06
    55e2:	17 82       	std	Z+7, r1	; 0x07
    55e4:	83 81       	ldd	r24, Z+3	; 0x03
    55e6:	81 ff       	sbrs	r24, 1
    55e8:	44 c3       	rjmp	.+1672   	; 0x5c72 <vfprintf+0x6a6>
    55ea:	9e 01       	movw	r18, r28
    55ec:	2f 5f       	subi	r18, 0xFF	; 255
    55ee:	3f 4f       	sbci	r19, 0xFF	; 255
    55f0:	39 01       	movw	r6, r18
    55f2:	f7 01       	movw	r30, r14
    55f4:	93 81       	ldd	r25, Z+3	; 0x03
    55f6:	f1 01       	movw	r30, r2
    55f8:	93 fd       	sbrc	r25, 3
    55fa:	85 91       	lpm	r24, Z+
    55fc:	93 ff       	sbrs	r25, 3
    55fe:	81 91       	ld	r24, Z+
    5600:	1f 01       	movw	r2, r30
    5602:	88 23       	and	r24, r24
    5604:	09 f4       	brne	.+2      	; 0x5608 <vfprintf+0x3c>
    5606:	31 c3       	rjmp	.+1634   	; 0x5c6a <vfprintf+0x69e>
    5608:	85 32       	cpi	r24, 0x25	; 37
    560a:	39 f4       	brne	.+14     	; 0x561a <vfprintf+0x4e>
    560c:	93 fd       	sbrc	r25, 3
    560e:	85 91       	lpm	r24, Z+
    5610:	93 ff       	sbrs	r25, 3
    5612:	81 91       	ld	r24, Z+
    5614:	1f 01       	movw	r2, r30
    5616:	85 32       	cpi	r24, 0x25	; 37
    5618:	39 f4       	brne	.+14     	; 0x5628 <vfprintf+0x5c>
    561a:	b7 01       	movw	r22, r14
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5622:	56 01       	movw	r10, r12
    5624:	65 01       	movw	r12, r10
    5626:	e5 cf       	rjmp	.-54     	; 0x55f2 <vfprintf+0x26>
    5628:	10 e0       	ldi	r17, 0x00	; 0
    562a:	51 2c       	mov	r5, r1
    562c:	91 2c       	mov	r9, r1
    562e:	ff e1       	ldi	r31, 0x1F	; 31
    5630:	f9 15       	cp	r31, r9
    5632:	d8 f0       	brcs	.+54     	; 0x566a <vfprintf+0x9e>
    5634:	8b 32       	cpi	r24, 0x2B	; 43
    5636:	79 f0       	breq	.+30     	; 0x5656 <vfprintf+0x8a>
    5638:	38 f4       	brcc	.+14     	; 0x5648 <vfprintf+0x7c>
    563a:	80 32       	cpi	r24, 0x20	; 32
    563c:	79 f0       	breq	.+30     	; 0x565c <vfprintf+0x90>
    563e:	83 32       	cpi	r24, 0x23	; 35
    5640:	a1 f4       	brne	.+40     	; 0x566a <vfprintf+0x9e>
    5642:	f9 2d       	mov	r31, r9
    5644:	f0 61       	ori	r31, 0x10	; 16
    5646:	2e c0       	rjmp	.+92     	; 0x56a4 <vfprintf+0xd8>
    5648:	8d 32       	cpi	r24, 0x2D	; 45
    564a:	61 f0       	breq	.+24     	; 0x5664 <vfprintf+0x98>
    564c:	80 33       	cpi	r24, 0x30	; 48
    564e:	69 f4       	brne	.+26     	; 0x566a <vfprintf+0x9e>
    5650:	29 2d       	mov	r18, r9
    5652:	21 60       	ori	r18, 0x01	; 1
    5654:	2d c0       	rjmp	.+90     	; 0x56b0 <vfprintf+0xe4>
    5656:	39 2d       	mov	r19, r9
    5658:	32 60       	ori	r19, 0x02	; 2
    565a:	93 2e       	mov	r9, r19
    565c:	89 2d       	mov	r24, r9
    565e:	84 60       	ori	r24, 0x04	; 4
    5660:	98 2e       	mov	r9, r24
    5662:	2a c0       	rjmp	.+84     	; 0x56b8 <vfprintf+0xec>
    5664:	e9 2d       	mov	r30, r9
    5666:	e8 60       	ori	r30, 0x08	; 8
    5668:	15 c0       	rjmp	.+42     	; 0x5694 <vfprintf+0xc8>
    566a:	97 fc       	sbrc	r9, 7
    566c:	2d c0       	rjmp	.+90     	; 0x56c8 <vfprintf+0xfc>
    566e:	20 ed       	ldi	r18, 0xD0	; 208
    5670:	28 0f       	add	r18, r24
    5672:	2a 30       	cpi	r18, 0x0A	; 10
    5674:	88 f4       	brcc	.+34     	; 0x5698 <vfprintf+0xcc>
    5676:	96 fe       	sbrs	r9, 6
    5678:	06 c0       	rjmp	.+12     	; 0x5686 <vfprintf+0xba>
    567a:	3a e0       	ldi	r19, 0x0A	; 10
    567c:	13 9f       	mul	r17, r19
    567e:	20 0d       	add	r18, r0
    5680:	11 24       	eor	r1, r1
    5682:	12 2f       	mov	r17, r18
    5684:	19 c0       	rjmp	.+50     	; 0x56b8 <vfprintf+0xec>
    5686:	8a e0       	ldi	r24, 0x0A	; 10
    5688:	58 9e       	mul	r5, r24
    568a:	20 0d       	add	r18, r0
    568c:	11 24       	eor	r1, r1
    568e:	52 2e       	mov	r5, r18
    5690:	e9 2d       	mov	r30, r9
    5692:	e0 62       	ori	r30, 0x20	; 32
    5694:	9e 2e       	mov	r9, r30
    5696:	10 c0       	rjmp	.+32     	; 0x56b8 <vfprintf+0xec>
    5698:	8e 32       	cpi	r24, 0x2E	; 46
    569a:	31 f4       	brne	.+12     	; 0x56a8 <vfprintf+0xdc>
    569c:	96 fc       	sbrc	r9, 6
    569e:	e5 c2       	rjmp	.+1482   	; 0x5c6a <vfprintf+0x69e>
    56a0:	f9 2d       	mov	r31, r9
    56a2:	f0 64       	ori	r31, 0x40	; 64
    56a4:	9f 2e       	mov	r9, r31
    56a6:	08 c0       	rjmp	.+16     	; 0x56b8 <vfprintf+0xec>
    56a8:	8c 36       	cpi	r24, 0x6C	; 108
    56aa:	21 f4       	brne	.+8      	; 0x56b4 <vfprintf+0xe8>
    56ac:	29 2d       	mov	r18, r9
    56ae:	20 68       	ori	r18, 0x80	; 128
    56b0:	92 2e       	mov	r9, r18
    56b2:	02 c0       	rjmp	.+4      	; 0x56b8 <vfprintf+0xec>
    56b4:	88 36       	cpi	r24, 0x68	; 104
    56b6:	41 f4       	brne	.+16     	; 0x56c8 <vfprintf+0xfc>
    56b8:	f1 01       	movw	r30, r2
    56ba:	93 fd       	sbrc	r25, 3
    56bc:	85 91       	lpm	r24, Z+
    56be:	93 ff       	sbrs	r25, 3
    56c0:	81 91       	ld	r24, Z+
    56c2:	1f 01       	movw	r2, r30
    56c4:	81 11       	cpse	r24, r1
    56c6:	b3 cf       	rjmp	.-154    	; 0x562e <vfprintf+0x62>
    56c8:	9b eb       	ldi	r25, 0xBB	; 187
    56ca:	98 0f       	add	r25, r24
    56cc:	93 30       	cpi	r25, 0x03	; 3
    56ce:	20 f4       	brcc	.+8      	; 0x56d8 <vfprintf+0x10c>
    56d0:	99 2d       	mov	r25, r9
    56d2:	90 61       	ori	r25, 0x10	; 16
    56d4:	80 5e       	subi	r24, 0xE0	; 224
    56d6:	07 c0       	rjmp	.+14     	; 0x56e6 <vfprintf+0x11a>
    56d8:	9b e9       	ldi	r25, 0x9B	; 155
    56da:	98 0f       	add	r25, r24
    56dc:	93 30       	cpi	r25, 0x03	; 3
    56de:	08 f0       	brcs	.+2      	; 0x56e2 <vfprintf+0x116>
    56e0:	66 c1       	rjmp	.+716    	; 0x59ae <vfprintf+0x3e2>
    56e2:	99 2d       	mov	r25, r9
    56e4:	9f 7e       	andi	r25, 0xEF	; 239
    56e6:	96 ff       	sbrs	r25, 6
    56e8:	16 e0       	ldi	r17, 0x06	; 6
    56ea:	9f 73       	andi	r25, 0x3F	; 63
    56ec:	99 2e       	mov	r9, r25
    56ee:	85 36       	cpi	r24, 0x65	; 101
    56f0:	19 f4       	brne	.+6      	; 0x56f8 <vfprintf+0x12c>
    56f2:	90 64       	ori	r25, 0x40	; 64
    56f4:	99 2e       	mov	r9, r25
    56f6:	08 c0       	rjmp	.+16     	; 0x5708 <vfprintf+0x13c>
    56f8:	86 36       	cpi	r24, 0x66	; 102
    56fa:	21 f4       	brne	.+8      	; 0x5704 <vfprintf+0x138>
    56fc:	39 2f       	mov	r19, r25
    56fe:	30 68       	ori	r19, 0x80	; 128
    5700:	93 2e       	mov	r9, r19
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <vfprintf+0x13c>
    5704:	11 11       	cpse	r17, r1
    5706:	11 50       	subi	r17, 0x01	; 1
    5708:	97 fe       	sbrs	r9, 7
    570a:	07 c0       	rjmp	.+14     	; 0x571a <vfprintf+0x14e>
    570c:	1c 33       	cpi	r17, 0x3C	; 60
    570e:	50 f4       	brcc	.+20     	; 0x5724 <vfprintf+0x158>
    5710:	44 24       	eor	r4, r4
    5712:	43 94       	inc	r4
    5714:	41 0e       	add	r4, r17
    5716:	27 e0       	ldi	r18, 0x07	; 7
    5718:	0b c0       	rjmp	.+22     	; 0x5730 <vfprintf+0x164>
    571a:	18 30       	cpi	r17, 0x08	; 8
    571c:	38 f0       	brcs	.+14     	; 0x572c <vfprintf+0x160>
    571e:	27 e0       	ldi	r18, 0x07	; 7
    5720:	17 e0       	ldi	r17, 0x07	; 7
    5722:	05 c0       	rjmp	.+10     	; 0x572e <vfprintf+0x162>
    5724:	27 e0       	ldi	r18, 0x07	; 7
    5726:	9c e3       	ldi	r25, 0x3C	; 60
    5728:	49 2e       	mov	r4, r25
    572a:	02 c0       	rjmp	.+4      	; 0x5730 <vfprintf+0x164>
    572c:	21 2f       	mov	r18, r17
    572e:	41 2c       	mov	r4, r1
    5730:	56 01       	movw	r10, r12
    5732:	84 e0       	ldi	r24, 0x04	; 4
    5734:	a8 0e       	add	r10, r24
    5736:	b1 1c       	adc	r11, r1
    5738:	f6 01       	movw	r30, r12
    573a:	60 81       	ld	r22, Z
    573c:	71 81       	ldd	r23, Z+1	; 0x01
    573e:	82 81       	ldd	r24, Z+2	; 0x02
    5740:	93 81       	ldd	r25, Z+3	; 0x03
    5742:	04 2d       	mov	r16, r4
    5744:	a3 01       	movw	r20, r6
    5746:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <__ftoa_engine>
    574a:	6c 01       	movw	r12, r24
    574c:	f9 81       	ldd	r31, Y+1	; 0x01
    574e:	fc 87       	std	Y+12, r31	; 0x0c
    5750:	f0 ff       	sbrs	r31, 0
    5752:	02 c0       	rjmp	.+4      	; 0x5758 <vfprintf+0x18c>
    5754:	f3 ff       	sbrs	r31, 3
    5756:	06 c0       	rjmp	.+12     	; 0x5764 <vfprintf+0x198>
    5758:	91 fc       	sbrc	r9, 1
    575a:	06 c0       	rjmp	.+12     	; 0x5768 <vfprintf+0x19c>
    575c:	92 fe       	sbrs	r9, 2
    575e:	06 c0       	rjmp	.+12     	; 0x576c <vfprintf+0x1a0>
    5760:	00 e2       	ldi	r16, 0x20	; 32
    5762:	05 c0       	rjmp	.+10     	; 0x576e <vfprintf+0x1a2>
    5764:	0d e2       	ldi	r16, 0x2D	; 45
    5766:	03 c0       	rjmp	.+6      	; 0x576e <vfprintf+0x1a2>
    5768:	0b e2       	ldi	r16, 0x2B	; 43
    576a:	01 c0       	rjmp	.+2      	; 0x576e <vfprintf+0x1a2>
    576c:	00 e0       	ldi	r16, 0x00	; 0
    576e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5770:	8c 70       	andi	r24, 0x0C	; 12
    5772:	19 f0       	breq	.+6      	; 0x577a <vfprintf+0x1ae>
    5774:	01 11       	cpse	r16, r1
    5776:	5a c2       	rjmp	.+1204   	; 0x5c2c <vfprintf+0x660>
    5778:	9b c2       	rjmp	.+1334   	; 0x5cb0 <vfprintf+0x6e4>
    577a:	97 fe       	sbrs	r9, 7
    577c:	10 c0       	rjmp	.+32     	; 0x579e <vfprintf+0x1d2>
    577e:	4c 0c       	add	r4, r12
    5780:	fc 85       	ldd	r31, Y+12	; 0x0c
    5782:	f4 ff       	sbrs	r31, 4
    5784:	04 c0       	rjmp	.+8      	; 0x578e <vfprintf+0x1c2>
    5786:	8a 81       	ldd	r24, Y+2	; 0x02
    5788:	81 33       	cpi	r24, 0x31	; 49
    578a:	09 f4       	brne	.+2      	; 0x578e <vfprintf+0x1c2>
    578c:	4a 94       	dec	r4
    578e:	14 14       	cp	r1, r4
    5790:	74 f5       	brge	.+92     	; 0x57ee <vfprintf+0x222>
    5792:	28 e0       	ldi	r18, 0x08	; 8
    5794:	24 15       	cp	r18, r4
    5796:	78 f5       	brcc	.+94     	; 0x57f6 <vfprintf+0x22a>
    5798:	88 e0       	ldi	r24, 0x08	; 8
    579a:	48 2e       	mov	r4, r24
    579c:	2c c0       	rjmp	.+88     	; 0x57f6 <vfprintf+0x22a>
    579e:	96 fc       	sbrc	r9, 6
    57a0:	2a c0       	rjmp	.+84     	; 0x57f6 <vfprintf+0x22a>
    57a2:	81 2f       	mov	r24, r17
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	8c 15       	cp	r24, r12
    57a8:	9d 05       	cpc	r25, r13
    57aa:	9c f0       	brlt	.+38     	; 0x57d2 <vfprintf+0x206>
    57ac:	3c ef       	ldi	r19, 0xFC	; 252
    57ae:	c3 16       	cp	r12, r19
    57b0:	3f ef       	ldi	r19, 0xFF	; 255
    57b2:	d3 06       	cpc	r13, r19
    57b4:	74 f0       	brlt	.+28     	; 0x57d2 <vfprintf+0x206>
    57b6:	89 2d       	mov	r24, r9
    57b8:	80 68       	ori	r24, 0x80	; 128
    57ba:	98 2e       	mov	r9, r24
    57bc:	0a c0       	rjmp	.+20     	; 0x57d2 <vfprintf+0x206>
    57be:	e2 e0       	ldi	r30, 0x02	; 2
    57c0:	f0 e0       	ldi	r31, 0x00	; 0
    57c2:	ec 0f       	add	r30, r28
    57c4:	fd 1f       	adc	r31, r29
    57c6:	e1 0f       	add	r30, r17
    57c8:	f1 1d       	adc	r31, r1
    57ca:	80 81       	ld	r24, Z
    57cc:	80 33       	cpi	r24, 0x30	; 48
    57ce:	19 f4       	brne	.+6      	; 0x57d6 <vfprintf+0x20a>
    57d0:	11 50       	subi	r17, 0x01	; 1
    57d2:	11 11       	cpse	r17, r1
    57d4:	f4 cf       	rjmp	.-24     	; 0x57be <vfprintf+0x1f2>
    57d6:	97 fe       	sbrs	r9, 7
    57d8:	0e c0       	rjmp	.+28     	; 0x57f6 <vfprintf+0x22a>
    57da:	44 24       	eor	r4, r4
    57dc:	43 94       	inc	r4
    57de:	41 0e       	add	r4, r17
    57e0:	81 2f       	mov	r24, r17
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	c8 16       	cp	r12, r24
    57e6:	d9 06       	cpc	r13, r25
    57e8:	2c f4       	brge	.+10     	; 0x57f4 <vfprintf+0x228>
    57ea:	1c 19       	sub	r17, r12
    57ec:	04 c0       	rjmp	.+8      	; 0x57f6 <vfprintf+0x22a>
    57ee:	44 24       	eor	r4, r4
    57f0:	43 94       	inc	r4
    57f2:	01 c0       	rjmp	.+2      	; 0x57f6 <vfprintf+0x22a>
    57f4:	10 e0       	ldi	r17, 0x00	; 0
    57f6:	97 fe       	sbrs	r9, 7
    57f8:	06 c0       	rjmp	.+12     	; 0x5806 <vfprintf+0x23a>
    57fa:	1c 14       	cp	r1, r12
    57fc:	1d 04       	cpc	r1, r13
    57fe:	34 f4       	brge	.+12     	; 0x580c <vfprintf+0x240>
    5800:	c6 01       	movw	r24, r12
    5802:	01 96       	adiw	r24, 0x01	; 1
    5804:	05 c0       	rjmp	.+10     	; 0x5810 <vfprintf+0x244>
    5806:	85 e0       	ldi	r24, 0x05	; 5
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	02 c0       	rjmp	.+4      	; 0x5810 <vfprintf+0x244>
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	01 11       	cpse	r16, r1
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	11 23       	and	r17, r17
    5816:	31 f0       	breq	.+12     	; 0x5824 <vfprintf+0x258>
    5818:	21 2f       	mov	r18, r17
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	2f 5f       	subi	r18, 0xFF	; 255
    581e:	3f 4f       	sbci	r19, 0xFF	; 255
    5820:	82 0f       	add	r24, r18
    5822:	93 1f       	adc	r25, r19
    5824:	25 2d       	mov	r18, r5
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	82 17       	cp	r24, r18
    582a:	93 07       	cpc	r25, r19
    582c:	14 f4       	brge	.+4      	; 0x5832 <vfprintf+0x266>
    582e:	58 1a       	sub	r5, r24
    5830:	01 c0       	rjmp	.+2      	; 0x5834 <vfprintf+0x268>
    5832:	51 2c       	mov	r5, r1
    5834:	89 2d       	mov	r24, r9
    5836:	89 70       	andi	r24, 0x09	; 9
    5838:	49 f4       	brne	.+18     	; 0x584c <vfprintf+0x280>
    583a:	55 20       	and	r5, r5
    583c:	39 f0       	breq	.+14     	; 0x584c <vfprintf+0x280>
    583e:	b7 01       	movw	r22, r14
    5840:	80 e2       	ldi	r24, 0x20	; 32
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5848:	5a 94       	dec	r5
    584a:	f7 cf       	rjmp	.-18     	; 0x583a <vfprintf+0x26e>
    584c:	00 23       	and	r16, r16
    584e:	29 f0       	breq	.+10     	; 0x585a <vfprintf+0x28e>
    5850:	b7 01       	movw	r22, r14
    5852:	80 2f       	mov	r24, r16
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    585a:	93 fc       	sbrc	r9, 3
    585c:	09 c0       	rjmp	.+18     	; 0x5870 <vfprintf+0x2a4>
    585e:	55 20       	and	r5, r5
    5860:	39 f0       	breq	.+14     	; 0x5870 <vfprintf+0x2a4>
    5862:	b7 01       	movw	r22, r14
    5864:	80 e3       	ldi	r24, 0x30	; 48
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    586c:	5a 94       	dec	r5
    586e:	f7 cf       	rjmp	.-18     	; 0x585e <vfprintf+0x292>
    5870:	97 fe       	sbrs	r9, 7
    5872:	4c c0       	rjmp	.+152    	; 0x590c <vfprintf+0x340>
    5874:	46 01       	movw	r8, r12
    5876:	d7 fe       	sbrs	r13, 7
    5878:	02 c0       	rjmp	.+4      	; 0x587e <vfprintf+0x2b2>
    587a:	81 2c       	mov	r8, r1
    587c:	91 2c       	mov	r9, r1
    587e:	c6 01       	movw	r24, r12
    5880:	88 19       	sub	r24, r8
    5882:	99 09       	sbc	r25, r9
    5884:	f3 01       	movw	r30, r6
    5886:	e8 0f       	add	r30, r24
    5888:	f9 1f       	adc	r31, r25
    588a:	ed 87       	std	Y+13, r30	; 0x0d
    588c:	fe 87       	std	Y+14, r31	; 0x0e
    588e:	96 01       	movw	r18, r12
    5890:	24 19       	sub	r18, r4
    5892:	31 09       	sbc	r19, r1
    5894:	2f 87       	std	Y+15, r18	; 0x0f
    5896:	38 8b       	std	Y+16, r19	; 0x10
    5898:	01 2f       	mov	r16, r17
    589a:	10 e0       	ldi	r17, 0x00	; 0
    589c:	11 95       	neg	r17
    589e:	01 95       	neg	r16
    58a0:	11 09       	sbc	r17, r1
    58a2:	3f ef       	ldi	r19, 0xFF	; 255
    58a4:	83 16       	cp	r8, r19
    58a6:	93 06       	cpc	r9, r19
    58a8:	29 f4       	brne	.+10     	; 0x58b4 <vfprintf+0x2e8>
    58aa:	b7 01       	movw	r22, r14
    58ac:	8e e2       	ldi	r24, 0x2E	; 46
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    58b4:	c8 14       	cp	r12, r8
    58b6:	d9 04       	cpc	r13, r9
    58b8:	4c f0       	brlt	.+18     	; 0x58cc <vfprintf+0x300>
    58ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    58bc:	98 89       	ldd	r25, Y+16	; 0x10
    58be:	88 15       	cp	r24, r8
    58c0:	99 05       	cpc	r25, r9
    58c2:	24 f4       	brge	.+8      	; 0x58cc <vfprintf+0x300>
    58c4:	ed 85       	ldd	r30, Y+13	; 0x0d
    58c6:	fe 85       	ldd	r31, Y+14	; 0x0e
    58c8:	81 81       	ldd	r24, Z+1	; 0x01
    58ca:	01 c0       	rjmp	.+2      	; 0x58ce <vfprintf+0x302>
    58cc:	80 e3       	ldi	r24, 0x30	; 48
    58ce:	f1 e0       	ldi	r31, 0x01	; 1
    58d0:	8f 1a       	sub	r8, r31
    58d2:	91 08       	sbc	r9, r1
    58d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    58d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    58d8:	2f 5f       	subi	r18, 0xFF	; 255
    58da:	3f 4f       	sbci	r19, 0xFF	; 255
    58dc:	2d 87       	std	Y+13, r18	; 0x0d
    58de:	3e 87       	std	Y+14, r19	; 0x0e
    58e0:	80 16       	cp	r8, r16
    58e2:	91 06       	cpc	r9, r17
    58e4:	2c f0       	brlt	.+10     	; 0x58f0 <vfprintf+0x324>
    58e6:	b7 01       	movw	r22, r14
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    58ee:	d9 cf       	rjmp	.-78     	; 0x58a2 <vfprintf+0x2d6>
    58f0:	c8 14       	cp	r12, r8
    58f2:	d9 04       	cpc	r13, r9
    58f4:	41 f4       	brne	.+16     	; 0x5906 <vfprintf+0x33a>
    58f6:	9a 81       	ldd	r25, Y+2	; 0x02
    58f8:	96 33       	cpi	r25, 0x36	; 54
    58fa:	20 f4       	brcc	.+8      	; 0x5904 <vfprintf+0x338>
    58fc:	95 33       	cpi	r25, 0x35	; 53
    58fe:	19 f4       	brne	.+6      	; 0x5906 <vfprintf+0x33a>
    5900:	3c 85       	ldd	r19, Y+12	; 0x0c
    5902:	34 ff       	sbrs	r19, 4
    5904:	81 e3       	ldi	r24, 0x31	; 49
    5906:	b7 01       	movw	r22, r14
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	4e c0       	rjmp	.+156    	; 0x59a8 <vfprintf+0x3dc>
    590c:	8a 81       	ldd	r24, Y+2	; 0x02
    590e:	81 33       	cpi	r24, 0x31	; 49
    5910:	19 f0       	breq	.+6      	; 0x5918 <vfprintf+0x34c>
    5912:	9c 85       	ldd	r25, Y+12	; 0x0c
    5914:	9f 7e       	andi	r25, 0xEF	; 239
    5916:	9c 87       	std	Y+12, r25	; 0x0c
    5918:	b7 01       	movw	r22, r14
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5920:	11 11       	cpse	r17, r1
    5922:	05 c0       	rjmp	.+10     	; 0x592e <vfprintf+0x362>
    5924:	94 fc       	sbrc	r9, 4
    5926:	18 c0       	rjmp	.+48     	; 0x5958 <vfprintf+0x38c>
    5928:	85 e6       	ldi	r24, 0x65	; 101
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	17 c0       	rjmp	.+46     	; 0x595c <vfprintf+0x390>
    592e:	b7 01       	movw	r22, r14
    5930:	8e e2       	ldi	r24, 0x2E	; 46
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5938:	1e 5f       	subi	r17, 0xFE	; 254
    593a:	82 e0       	ldi	r24, 0x02	; 2
    593c:	01 e0       	ldi	r16, 0x01	; 1
    593e:	08 0f       	add	r16, r24
    5940:	f3 01       	movw	r30, r6
    5942:	e8 0f       	add	r30, r24
    5944:	f1 1d       	adc	r31, r1
    5946:	80 81       	ld	r24, Z
    5948:	b7 01       	movw	r22, r14
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5950:	80 2f       	mov	r24, r16
    5952:	01 13       	cpse	r16, r17
    5954:	f3 cf       	rjmp	.-26     	; 0x593c <vfprintf+0x370>
    5956:	e6 cf       	rjmp	.-52     	; 0x5924 <vfprintf+0x358>
    5958:	85 e4       	ldi	r24, 0x45	; 69
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	b7 01       	movw	r22, r14
    595e:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5962:	d7 fc       	sbrc	r13, 7
    5964:	06 c0       	rjmp	.+12     	; 0x5972 <vfprintf+0x3a6>
    5966:	c1 14       	cp	r12, r1
    5968:	d1 04       	cpc	r13, r1
    596a:	41 f4       	brne	.+16     	; 0x597c <vfprintf+0x3b0>
    596c:	ec 85       	ldd	r30, Y+12	; 0x0c
    596e:	e4 ff       	sbrs	r30, 4
    5970:	05 c0       	rjmp	.+10     	; 0x597c <vfprintf+0x3b0>
    5972:	d1 94       	neg	r13
    5974:	c1 94       	neg	r12
    5976:	d1 08       	sbc	r13, r1
    5978:	8d e2       	ldi	r24, 0x2D	; 45
    597a:	01 c0       	rjmp	.+2      	; 0x597e <vfprintf+0x3b2>
    597c:	8b e2       	ldi	r24, 0x2B	; 43
    597e:	b7 01       	movw	r22, r14
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5986:	80 e3       	ldi	r24, 0x30	; 48
    5988:	2a e0       	ldi	r18, 0x0A	; 10
    598a:	c2 16       	cp	r12, r18
    598c:	d1 04       	cpc	r13, r1
    598e:	2c f0       	brlt	.+10     	; 0x599a <vfprintf+0x3ce>
    5990:	8f 5f       	subi	r24, 0xFF	; 255
    5992:	fa e0       	ldi	r31, 0x0A	; 10
    5994:	cf 1a       	sub	r12, r31
    5996:	d1 08       	sbc	r13, r1
    5998:	f7 cf       	rjmp	.-18     	; 0x5988 <vfprintf+0x3bc>
    599a:	b7 01       	movw	r22, r14
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    59a2:	b7 01       	movw	r22, r14
    59a4:	c6 01       	movw	r24, r12
    59a6:	c0 96       	adiw	r24, 0x30	; 48
    59a8:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    59ac:	54 c1       	rjmp	.+680    	; 0x5c56 <vfprintf+0x68a>
    59ae:	83 36       	cpi	r24, 0x63	; 99
    59b0:	31 f0       	breq	.+12     	; 0x59be <vfprintf+0x3f2>
    59b2:	83 37       	cpi	r24, 0x73	; 115
    59b4:	79 f0       	breq	.+30     	; 0x59d4 <vfprintf+0x408>
    59b6:	83 35       	cpi	r24, 0x53	; 83
    59b8:	09 f0       	breq	.+2      	; 0x59bc <vfprintf+0x3f0>
    59ba:	56 c0       	rjmp	.+172    	; 0x5a68 <vfprintf+0x49c>
    59bc:	20 c0       	rjmp	.+64     	; 0x59fe <vfprintf+0x432>
    59be:	56 01       	movw	r10, r12
    59c0:	32 e0       	ldi	r19, 0x02	; 2
    59c2:	a3 0e       	add	r10, r19
    59c4:	b1 1c       	adc	r11, r1
    59c6:	f6 01       	movw	r30, r12
    59c8:	80 81       	ld	r24, Z
    59ca:	89 83       	std	Y+1, r24	; 0x01
    59cc:	01 e0       	ldi	r16, 0x01	; 1
    59ce:	10 e0       	ldi	r17, 0x00	; 0
    59d0:	63 01       	movw	r12, r6
    59d2:	12 c0       	rjmp	.+36     	; 0x59f8 <vfprintf+0x42c>
    59d4:	56 01       	movw	r10, r12
    59d6:	f2 e0       	ldi	r31, 0x02	; 2
    59d8:	af 0e       	add	r10, r31
    59da:	b1 1c       	adc	r11, r1
    59dc:	f6 01       	movw	r30, r12
    59de:	c0 80       	ld	r12, Z
    59e0:	d1 80       	ldd	r13, Z+1	; 0x01
    59e2:	96 fe       	sbrs	r9, 6
    59e4:	03 c0       	rjmp	.+6      	; 0x59ec <vfprintf+0x420>
    59e6:	61 2f       	mov	r22, r17
    59e8:	70 e0       	ldi	r23, 0x00	; 0
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <vfprintf+0x424>
    59ec:	6f ef       	ldi	r22, 0xFF	; 255
    59ee:	7f ef       	ldi	r23, 0xFF	; 255
    59f0:	c6 01       	movw	r24, r12
    59f2:	0e 94 57 30 	call	0x60ae	; 0x60ae <strnlen>
    59f6:	8c 01       	movw	r16, r24
    59f8:	f9 2d       	mov	r31, r9
    59fa:	ff 77       	andi	r31, 0x7F	; 127
    59fc:	14 c0       	rjmp	.+40     	; 0x5a26 <vfprintf+0x45a>
    59fe:	56 01       	movw	r10, r12
    5a00:	22 e0       	ldi	r18, 0x02	; 2
    5a02:	a2 0e       	add	r10, r18
    5a04:	b1 1c       	adc	r11, r1
    5a06:	f6 01       	movw	r30, r12
    5a08:	c0 80       	ld	r12, Z
    5a0a:	d1 80       	ldd	r13, Z+1	; 0x01
    5a0c:	96 fe       	sbrs	r9, 6
    5a0e:	03 c0       	rjmp	.+6      	; 0x5a16 <vfprintf+0x44a>
    5a10:	61 2f       	mov	r22, r17
    5a12:	70 e0       	ldi	r23, 0x00	; 0
    5a14:	02 c0       	rjmp	.+4      	; 0x5a1a <vfprintf+0x44e>
    5a16:	6f ef       	ldi	r22, 0xFF	; 255
    5a18:	7f ef       	ldi	r23, 0xFF	; 255
    5a1a:	c6 01       	movw	r24, r12
    5a1c:	0e 94 3a 30 	call	0x6074	; 0x6074 <strnlen_P>
    5a20:	8c 01       	movw	r16, r24
    5a22:	f9 2d       	mov	r31, r9
    5a24:	f0 68       	ori	r31, 0x80	; 128
    5a26:	9f 2e       	mov	r9, r31
    5a28:	f3 fd       	sbrc	r31, 3
    5a2a:	1a c0       	rjmp	.+52     	; 0x5a60 <vfprintf+0x494>
    5a2c:	85 2d       	mov	r24, r5
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	08 17       	cp	r16, r24
    5a32:	19 07       	cpc	r17, r25
    5a34:	a8 f4       	brcc	.+42     	; 0x5a60 <vfprintf+0x494>
    5a36:	b7 01       	movw	r22, r14
    5a38:	80 e2       	ldi	r24, 0x20	; 32
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5a40:	5a 94       	dec	r5
    5a42:	f4 cf       	rjmp	.-24     	; 0x5a2c <vfprintf+0x460>
    5a44:	f6 01       	movw	r30, r12
    5a46:	97 fc       	sbrc	r9, 7
    5a48:	85 91       	lpm	r24, Z+
    5a4a:	97 fe       	sbrs	r9, 7
    5a4c:	81 91       	ld	r24, Z+
    5a4e:	6f 01       	movw	r12, r30
    5a50:	b7 01       	movw	r22, r14
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5a58:	51 10       	cpse	r5, r1
    5a5a:	5a 94       	dec	r5
    5a5c:	01 50       	subi	r16, 0x01	; 1
    5a5e:	11 09       	sbc	r17, r1
    5a60:	01 15       	cp	r16, r1
    5a62:	11 05       	cpc	r17, r1
    5a64:	79 f7       	brne	.-34     	; 0x5a44 <vfprintf+0x478>
    5a66:	f7 c0       	rjmp	.+494    	; 0x5c56 <vfprintf+0x68a>
    5a68:	84 36       	cpi	r24, 0x64	; 100
    5a6a:	11 f0       	breq	.+4      	; 0x5a70 <vfprintf+0x4a4>
    5a6c:	89 36       	cpi	r24, 0x69	; 105
    5a6e:	61 f5       	brne	.+88     	; 0x5ac8 <vfprintf+0x4fc>
    5a70:	56 01       	movw	r10, r12
    5a72:	97 fe       	sbrs	r9, 7
    5a74:	09 c0       	rjmp	.+18     	; 0x5a88 <vfprintf+0x4bc>
    5a76:	24 e0       	ldi	r18, 0x04	; 4
    5a78:	a2 0e       	add	r10, r18
    5a7a:	b1 1c       	adc	r11, r1
    5a7c:	f6 01       	movw	r30, r12
    5a7e:	60 81       	ld	r22, Z
    5a80:	71 81       	ldd	r23, Z+1	; 0x01
    5a82:	82 81       	ldd	r24, Z+2	; 0x02
    5a84:	93 81       	ldd	r25, Z+3	; 0x03
    5a86:	0a c0       	rjmp	.+20     	; 0x5a9c <vfprintf+0x4d0>
    5a88:	f2 e0       	ldi	r31, 0x02	; 2
    5a8a:	af 0e       	add	r10, r31
    5a8c:	b1 1c       	adc	r11, r1
    5a8e:	f6 01       	movw	r30, r12
    5a90:	60 81       	ld	r22, Z
    5a92:	71 81       	ldd	r23, Z+1	; 0x01
    5a94:	07 2e       	mov	r0, r23
    5a96:	00 0c       	add	r0, r0
    5a98:	88 0b       	sbc	r24, r24
    5a9a:	99 0b       	sbc	r25, r25
    5a9c:	f9 2d       	mov	r31, r9
    5a9e:	ff 76       	andi	r31, 0x6F	; 111
    5aa0:	9f 2e       	mov	r9, r31
    5aa2:	97 ff       	sbrs	r25, 7
    5aa4:	09 c0       	rjmp	.+18     	; 0x5ab8 <vfprintf+0x4ec>
    5aa6:	90 95       	com	r25
    5aa8:	80 95       	com	r24
    5aaa:	70 95       	com	r23
    5aac:	61 95       	neg	r22
    5aae:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab4:	f0 68       	ori	r31, 0x80	; 128
    5ab6:	9f 2e       	mov	r9, r31
    5ab8:	2a e0       	ldi	r18, 0x0A	; 10
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	a3 01       	movw	r20, r6
    5abe:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__ultoa_invert>
    5ac2:	c8 2e       	mov	r12, r24
    5ac4:	c6 18       	sub	r12, r6
    5ac6:	3f c0       	rjmp	.+126    	; 0x5b46 <vfprintf+0x57a>
    5ac8:	09 2d       	mov	r16, r9
    5aca:	85 37       	cpi	r24, 0x75	; 117
    5acc:	21 f4       	brne	.+8      	; 0x5ad6 <vfprintf+0x50a>
    5ace:	0f 7e       	andi	r16, 0xEF	; 239
    5ad0:	2a e0       	ldi	r18, 0x0A	; 10
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	1d c0       	rjmp	.+58     	; 0x5b10 <vfprintf+0x544>
    5ad6:	09 7f       	andi	r16, 0xF9	; 249
    5ad8:	8f 36       	cpi	r24, 0x6F	; 111
    5ada:	91 f0       	breq	.+36     	; 0x5b00 <vfprintf+0x534>
    5adc:	18 f4       	brcc	.+6      	; 0x5ae4 <vfprintf+0x518>
    5ade:	88 35       	cpi	r24, 0x58	; 88
    5ae0:	59 f0       	breq	.+22     	; 0x5af8 <vfprintf+0x52c>
    5ae2:	c3 c0       	rjmp	.+390    	; 0x5c6a <vfprintf+0x69e>
    5ae4:	80 37       	cpi	r24, 0x70	; 112
    5ae6:	19 f0       	breq	.+6      	; 0x5aee <vfprintf+0x522>
    5ae8:	88 37       	cpi	r24, 0x78	; 120
    5aea:	11 f0       	breq	.+4      	; 0x5af0 <vfprintf+0x524>
    5aec:	be c0       	rjmp	.+380    	; 0x5c6a <vfprintf+0x69e>
    5aee:	00 61       	ori	r16, 0x10	; 16
    5af0:	04 ff       	sbrs	r16, 4
    5af2:	09 c0       	rjmp	.+18     	; 0x5b06 <vfprintf+0x53a>
    5af4:	04 60       	ori	r16, 0x04	; 4
    5af6:	07 c0       	rjmp	.+14     	; 0x5b06 <vfprintf+0x53a>
    5af8:	94 fe       	sbrs	r9, 4
    5afa:	08 c0       	rjmp	.+16     	; 0x5b0c <vfprintf+0x540>
    5afc:	06 60       	ori	r16, 0x06	; 6
    5afe:	06 c0       	rjmp	.+12     	; 0x5b0c <vfprintf+0x540>
    5b00:	28 e0       	ldi	r18, 0x08	; 8
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	05 c0       	rjmp	.+10     	; 0x5b10 <vfprintf+0x544>
    5b06:	20 e1       	ldi	r18, 0x10	; 16
    5b08:	30 e0       	ldi	r19, 0x00	; 0
    5b0a:	02 c0       	rjmp	.+4      	; 0x5b10 <vfprintf+0x544>
    5b0c:	20 e1       	ldi	r18, 0x10	; 16
    5b0e:	32 e0       	ldi	r19, 0x02	; 2
    5b10:	56 01       	movw	r10, r12
    5b12:	07 ff       	sbrs	r16, 7
    5b14:	09 c0       	rjmp	.+18     	; 0x5b28 <vfprintf+0x55c>
    5b16:	84 e0       	ldi	r24, 0x04	; 4
    5b18:	a8 0e       	add	r10, r24
    5b1a:	b1 1c       	adc	r11, r1
    5b1c:	f6 01       	movw	r30, r12
    5b1e:	60 81       	ld	r22, Z
    5b20:	71 81       	ldd	r23, Z+1	; 0x01
    5b22:	82 81       	ldd	r24, Z+2	; 0x02
    5b24:	93 81       	ldd	r25, Z+3	; 0x03
    5b26:	08 c0       	rjmp	.+16     	; 0x5b38 <vfprintf+0x56c>
    5b28:	f2 e0       	ldi	r31, 0x02	; 2
    5b2a:	af 0e       	add	r10, r31
    5b2c:	b1 1c       	adc	r11, r1
    5b2e:	f6 01       	movw	r30, r12
    5b30:	60 81       	ld	r22, Z
    5b32:	71 81       	ldd	r23, Z+1	; 0x01
    5b34:	80 e0       	ldi	r24, 0x00	; 0
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	a3 01       	movw	r20, r6
    5b3a:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__ultoa_invert>
    5b3e:	c8 2e       	mov	r12, r24
    5b40:	c6 18       	sub	r12, r6
    5b42:	0f 77       	andi	r16, 0x7F	; 127
    5b44:	90 2e       	mov	r9, r16
    5b46:	96 fe       	sbrs	r9, 6
    5b48:	0b c0       	rjmp	.+22     	; 0x5b60 <vfprintf+0x594>
    5b4a:	09 2d       	mov	r16, r9
    5b4c:	0e 7f       	andi	r16, 0xFE	; 254
    5b4e:	c1 16       	cp	r12, r17
    5b50:	50 f4       	brcc	.+20     	; 0x5b66 <vfprintf+0x59a>
    5b52:	94 fe       	sbrs	r9, 4
    5b54:	0a c0       	rjmp	.+20     	; 0x5b6a <vfprintf+0x59e>
    5b56:	92 fc       	sbrc	r9, 2
    5b58:	08 c0       	rjmp	.+16     	; 0x5b6a <vfprintf+0x59e>
    5b5a:	09 2d       	mov	r16, r9
    5b5c:	0e 7e       	andi	r16, 0xEE	; 238
    5b5e:	05 c0       	rjmp	.+10     	; 0x5b6a <vfprintf+0x59e>
    5b60:	dc 2c       	mov	r13, r12
    5b62:	09 2d       	mov	r16, r9
    5b64:	03 c0       	rjmp	.+6      	; 0x5b6c <vfprintf+0x5a0>
    5b66:	dc 2c       	mov	r13, r12
    5b68:	01 c0       	rjmp	.+2      	; 0x5b6c <vfprintf+0x5a0>
    5b6a:	d1 2e       	mov	r13, r17
    5b6c:	04 ff       	sbrs	r16, 4
    5b6e:	0d c0       	rjmp	.+26     	; 0x5b8a <vfprintf+0x5be>
    5b70:	fe 01       	movw	r30, r28
    5b72:	ec 0d       	add	r30, r12
    5b74:	f1 1d       	adc	r31, r1
    5b76:	80 81       	ld	r24, Z
    5b78:	80 33       	cpi	r24, 0x30	; 48
    5b7a:	11 f4       	brne	.+4      	; 0x5b80 <vfprintf+0x5b4>
    5b7c:	09 7e       	andi	r16, 0xE9	; 233
    5b7e:	09 c0       	rjmp	.+18     	; 0x5b92 <vfprintf+0x5c6>
    5b80:	02 ff       	sbrs	r16, 2
    5b82:	06 c0       	rjmp	.+12     	; 0x5b90 <vfprintf+0x5c4>
    5b84:	d3 94       	inc	r13
    5b86:	d3 94       	inc	r13
    5b88:	04 c0       	rjmp	.+8      	; 0x5b92 <vfprintf+0x5c6>
    5b8a:	80 2f       	mov	r24, r16
    5b8c:	86 78       	andi	r24, 0x86	; 134
    5b8e:	09 f0       	breq	.+2      	; 0x5b92 <vfprintf+0x5c6>
    5b90:	d3 94       	inc	r13
    5b92:	03 fd       	sbrc	r16, 3
    5b94:	11 c0       	rjmp	.+34     	; 0x5bb8 <vfprintf+0x5ec>
    5b96:	00 ff       	sbrs	r16, 0
    5b98:	06 c0       	rjmp	.+12     	; 0x5ba6 <vfprintf+0x5da>
    5b9a:	1c 2d       	mov	r17, r12
    5b9c:	d5 14       	cp	r13, r5
    5b9e:	80 f4       	brcc	.+32     	; 0x5bc0 <vfprintf+0x5f4>
    5ba0:	15 0d       	add	r17, r5
    5ba2:	1d 19       	sub	r17, r13
    5ba4:	0d c0       	rjmp	.+26     	; 0x5bc0 <vfprintf+0x5f4>
    5ba6:	d5 14       	cp	r13, r5
    5ba8:	58 f4       	brcc	.+22     	; 0x5bc0 <vfprintf+0x5f4>
    5baa:	b7 01       	movw	r22, r14
    5bac:	80 e2       	ldi	r24, 0x20	; 32
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5bb4:	d3 94       	inc	r13
    5bb6:	f7 cf       	rjmp	.-18     	; 0x5ba6 <vfprintf+0x5da>
    5bb8:	d5 14       	cp	r13, r5
    5bba:	10 f4       	brcc	.+4      	; 0x5bc0 <vfprintf+0x5f4>
    5bbc:	5d 18       	sub	r5, r13
    5bbe:	01 c0       	rjmp	.+2      	; 0x5bc2 <vfprintf+0x5f6>
    5bc0:	51 2c       	mov	r5, r1
    5bc2:	04 ff       	sbrs	r16, 4
    5bc4:	10 c0       	rjmp	.+32     	; 0x5be6 <vfprintf+0x61a>
    5bc6:	b7 01       	movw	r22, r14
    5bc8:	80 e3       	ldi	r24, 0x30	; 48
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5bd0:	02 ff       	sbrs	r16, 2
    5bd2:	17 c0       	rjmp	.+46     	; 0x5c02 <vfprintf+0x636>
    5bd4:	01 fd       	sbrc	r16, 1
    5bd6:	03 c0       	rjmp	.+6      	; 0x5bde <vfprintf+0x612>
    5bd8:	88 e7       	ldi	r24, 0x78	; 120
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <vfprintf+0x616>
    5bde:	88 e5       	ldi	r24, 0x58	; 88
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	b7 01       	movw	r22, r14
    5be4:	0c c0       	rjmp	.+24     	; 0x5bfe <vfprintf+0x632>
    5be6:	80 2f       	mov	r24, r16
    5be8:	86 78       	andi	r24, 0x86	; 134
    5bea:	59 f0       	breq	.+22     	; 0x5c02 <vfprintf+0x636>
    5bec:	01 ff       	sbrs	r16, 1
    5bee:	02 c0       	rjmp	.+4      	; 0x5bf4 <vfprintf+0x628>
    5bf0:	8b e2       	ldi	r24, 0x2B	; 43
    5bf2:	01 c0       	rjmp	.+2      	; 0x5bf6 <vfprintf+0x62a>
    5bf4:	80 e2       	ldi	r24, 0x20	; 32
    5bf6:	07 fd       	sbrc	r16, 7
    5bf8:	8d e2       	ldi	r24, 0x2D	; 45
    5bfa:	b7 01       	movw	r22, r14
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c02:	c1 16       	cp	r12, r17
    5c04:	38 f4       	brcc	.+14     	; 0x5c14 <vfprintf+0x648>
    5c06:	b7 01       	movw	r22, r14
    5c08:	80 e3       	ldi	r24, 0x30	; 48
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c10:	11 50       	subi	r17, 0x01	; 1
    5c12:	f7 cf       	rjmp	.-18     	; 0x5c02 <vfprintf+0x636>
    5c14:	ca 94       	dec	r12
    5c16:	f3 01       	movw	r30, r6
    5c18:	ec 0d       	add	r30, r12
    5c1a:	f1 1d       	adc	r31, r1
    5c1c:	80 81       	ld	r24, Z
    5c1e:	b7 01       	movw	r22, r14
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c26:	c1 10       	cpse	r12, r1
    5c28:	f5 cf       	rjmp	.-22     	; 0x5c14 <vfprintf+0x648>
    5c2a:	15 c0       	rjmp	.+42     	; 0x5c56 <vfprintf+0x68a>
    5c2c:	f4 e0       	ldi	r31, 0x04	; 4
    5c2e:	f5 15       	cp	r31, r5
    5c30:	60 f5       	brcc	.+88     	; 0x5c8a <vfprintf+0x6be>
    5c32:	84 e0       	ldi	r24, 0x04	; 4
    5c34:	58 1a       	sub	r5, r24
    5c36:	93 fe       	sbrs	r9, 3
    5c38:	1f c0       	rjmp	.+62     	; 0x5c78 <vfprintf+0x6ac>
    5c3a:	01 11       	cpse	r16, r1
    5c3c:	27 c0       	rjmp	.+78     	; 0x5c8c <vfprintf+0x6c0>
    5c3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5c40:	23 ff       	sbrs	r18, 3
    5c42:	2a c0       	rjmp	.+84     	; 0x5c98 <vfprintf+0x6cc>
    5c44:	04 ed       	ldi	r16, 0xD4	; 212
    5c46:	11 e0       	ldi	r17, 0x01	; 1
    5c48:	39 2d       	mov	r19, r9
    5c4a:	30 71       	andi	r19, 0x10	; 16
    5c4c:	93 2e       	mov	r9, r19
    5c4e:	f8 01       	movw	r30, r16
    5c50:	84 91       	lpm	r24, Z
    5c52:	81 11       	cpse	r24, r1
    5c54:	24 c0       	rjmp	.+72     	; 0x5c9e <vfprintf+0x6d2>
    5c56:	55 20       	and	r5, r5
    5c58:	09 f4       	brne	.+2      	; 0x5c5c <vfprintf+0x690>
    5c5a:	e4 cc       	rjmp	.-1592   	; 0x5624 <vfprintf+0x58>
    5c5c:	b7 01       	movw	r22, r14
    5c5e:	80 e2       	ldi	r24, 0x20	; 32
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c66:	5a 94       	dec	r5
    5c68:	f6 cf       	rjmp	.-20     	; 0x5c56 <vfprintf+0x68a>
    5c6a:	f7 01       	movw	r30, r14
    5c6c:	86 81       	ldd	r24, Z+6	; 0x06
    5c6e:	97 81       	ldd	r25, Z+7	; 0x07
    5c70:	26 c0       	rjmp	.+76     	; 0x5cbe <vfprintf+0x6f2>
    5c72:	8f ef       	ldi	r24, 0xFF	; 255
    5c74:	9f ef       	ldi	r25, 0xFF	; 255
    5c76:	23 c0       	rjmp	.+70     	; 0x5cbe <vfprintf+0x6f2>
    5c78:	b7 01       	movw	r22, r14
    5c7a:	80 e2       	ldi	r24, 0x20	; 32
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c82:	5a 94       	dec	r5
    5c84:	51 10       	cpse	r5, r1
    5c86:	f8 cf       	rjmp	.-16     	; 0x5c78 <vfprintf+0x6ac>
    5c88:	d8 cf       	rjmp	.-80     	; 0x5c3a <vfprintf+0x66e>
    5c8a:	51 2c       	mov	r5, r1
    5c8c:	b7 01       	movw	r22, r14
    5c8e:	80 2f       	mov	r24, r16
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5c96:	d3 cf       	rjmp	.-90     	; 0x5c3e <vfprintf+0x672>
    5c98:	08 ed       	ldi	r16, 0xD8	; 216
    5c9a:	11 e0       	ldi	r17, 0x01	; 1
    5c9c:	d5 cf       	rjmp	.-86     	; 0x5c48 <vfprintf+0x67c>
    5c9e:	91 10       	cpse	r9, r1
    5ca0:	80 52       	subi	r24, 0x20	; 32
    5ca2:	b7 01       	movw	r22, r14
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	0e 94 7f 30 	call	0x60fe	; 0x60fe <fputc>
    5caa:	0f 5f       	subi	r16, 0xFF	; 255
    5cac:	1f 4f       	sbci	r17, 0xFF	; 255
    5cae:	cf cf       	rjmp	.-98     	; 0x5c4e <vfprintf+0x682>
    5cb0:	23 e0       	ldi	r18, 0x03	; 3
    5cb2:	25 15       	cp	r18, r5
    5cb4:	10 f4       	brcc	.+4      	; 0x5cba <vfprintf+0x6ee>
    5cb6:	83 e0       	ldi	r24, 0x03	; 3
    5cb8:	bd cf       	rjmp	.-134    	; 0x5c34 <vfprintf+0x668>
    5cba:	51 2c       	mov	r5, r1
    5cbc:	c0 cf       	rjmp	.-128    	; 0x5c3e <vfprintf+0x672>
    5cbe:	60 96       	adiw	r28, 0x10	; 16
    5cc0:	e2 e1       	ldi	r30, 0x12	; 18
    5cc2:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <__epilogue_restores__>

00005cc6 <__divmodhi4>:
    5cc6:	97 fb       	bst	r25, 7
    5cc8:	07 2e       	mov	r0, r23
    5cca:	16 f4       	brtc	.+4      	; 0x5cd0 <__divmodhi4+0xa>
    5ccc:	00 94       	com	r0
    5cce:	07 d0       	rcall	.+14     	; 0x5cde <__divmodhi4_neg1>
    5cd0:	77 fd       	sbrc	r23, 7
    5cd2:	09 d0       	rcall	.+18     	; 0x5ce6 <__divmodhi4_neg2>
    5cd4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <__udivmodhi4>
    5cd8:	07 fc       	sbrc	r0, 7
    5cda:	05 d0       	rcall	.+10     	; 0x5ce6 <__divmodhi4_neg2>
    5cdc:	3e f4       	brtc	.+14     	; 0x5cec <__divmodhi4_exit>

00005cde <__divmodhi4_neg1>:
    5cde:	90 95       	com	r25
    5ce0:	81 95       	neg	r24
    5ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce4:	08 95       	ret

00005ce6 <__divmodhi4_neg2>:
    5ce6:	70 95       	com	r23
    5ce8:	61 95       	neg	r22
    5cea:	7f 4f       	sbci	r23, 0xFF	; 255

00005cec <__divmodhi4_exit>:
    5cec:	08 95       	ret

00005cee <__divmodsi4>:
    5cee:	05 2e       	mov	r0, r21
    5cf0:	97 fb       	bst	r25, 7
    5cf2:	1e f4       	brtc	.+6      	; 0x5cfa <__divmodsi4+0xc>
    5cf4:	00 94       	com	r0
    5cf6:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__negsi2>
    5cfa:	57 fd       	sbrc	r21, 7
    5cfc:	07 d0       	rcall	.+14     	; 0x5d0c <__divmodsi4_neg2>
    5cfe:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <__udivmodsi4>
    5d02:	07 fc       	sbrc	r0, 7
    5d04:	03 d0       	rcall	.+6      	; 0x5d0c <__divmodsi4_neg2>
    5d06:	4e f4       	brtc	.+18     	; 0x5d1a <__divmodsi4_exit>
    5d08:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <__negsi2>

00005d0c <__divmodsi4_neg2>:
    5d0c:	50 95       	com	r21
    5d0e:	40 95       	com	r20
    5d10:	30 95       	com	r19
    5d12:	21 95       	neg	r18
    5d14:	3f 4f       	sbci	r19, 0xFF	; 255
    5d16:	4f 4f       	sbci	r20, 0xFF	; 255
    5d18:	5f 4f       	sbci	r21, 0xFF	; 255

00005d1a <__divmodsi4_exit>:
    5d1a:	08 95       	ret

00005d1c <__negsi2>:
    5d1c:	90 95       	com	r25
    5d1e:	80 95       	com	r24
    5d20:	70 95       	com	r23
    5d22:	61 95       	neg	r22
    5d24:	7f 4f       	sbci	r23, 0xFF	; 255
    5d26:	8f 4f       	sbci	r24, 0xFF	; 255
    5d28:	9f 4f       	sbci	r25, 0xFF	; 255
    5d2a:	08 95       	ret

00005d2c <__tablejump2__>:
    5d2c:	ee 0f       	add	r30, r30
    5d2e:	ff 1f       	adc	r31, r31
    5d30:	05 90       	lpm	r0, Z+
    5d32:	f4 91       	lpm	r31, Z
    5d34:	e0 2d       	mov	r30, r0
    5d36:	09 94       	ijmp

00005d38 <__muluhisi3>:
    5d38:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__umulhisi3>
    5d3c:	a5 9f       	mul	r26, r21
    5d3e:	90 0d       	add	r25, r0
    5d40:	b4 9f       	mul	r27, r20
    5d42:	90 0d       	add	r25, r0
    5d44:	a4 9f       	mul	r26, r20
    5d46:	80 0d       	add	r24, r0
    5d48:	91 1d       	adc	r25, r1
    5d4a:	11 24       	eor	r1, r1
    5d4c:	08 95       	ret

00005d4e <__prologue_saves__>:
    5d4e:	2f 92       	push	r2
    5d50:	3f 92       	push	r3
    5d52:	4f 92       	push	r4
    5d54:	5f 92       	push	r5
    5d56:	6f 92       	push	r6
    5d58:	7f 92       	push	r7
    5d5a:	8f 92       	push	r8
    5d5c:	9f 92       	push	r9
    5d5e:	af 92       	push	r10
    5d60:	bf 92       	push	r11
    5d62:	cf 92       	push	r12
    5d64:	df 92       	push	r13
    5d66:	ef 92       	push	r14
    5d68:	ff 92       	push	r15
    5d6a:	0f 93       	push	r16
    5d6c:	1f 93       	push	r17
    5d6e:	cf 93       	push	r28
    5d70:	df 93       	push	r29
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
    5d76:	ca 1b       	sub	r28, r26
    5d78:	db 0b       	sbc	r29, r27
    5d7a:	cd bf       	out	0x3d, r28	; 61
    5d7c:	de bf       	out	0x3e, r29	; 62
    5d7e:	09 94       	ijmp

00005d80 <__epilogue_restores__>:
    5d80:	2a 88       	ldd	r2, Y+18	; 0x12
    5d82:	39 88       	ldd	r3, Y+17	; 0x11
    5d84:	48 88       	ldd	r4, Y+16	; 0x10
    5d86:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d88:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d90:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d92:	b9 84       	ldd	r11, Y+9	; 0x09
    5d94:	c8 84       	ldd	r12, Y+8	; 0x08
    5d96:	df 80       	ldd	r13, Y+7	; 0x07
    5d98:	ee 80       	ldd	r14, Y+6	; 0x06
    5d9a:	fd 80       	ldd	r15, Y+5	; 0x05
    5d9c:	0c 81       	ldd	r16, Y+4	; 0x04
    5d9e:	1b 81       	ldd	r17, Y+3	; 0x03
    5da0:	aa 81       	ldd	r26, Y+2	; 0x02
    5da2:	b9 81       	ldd	r27, Y+1	; 0x01
    5da4:	ce 0f       	add	r28, r30
    5da6:	d1 1d       	adc	r29, r1
    5da8:	cd bf       	out	0x3d, r28	; 61
    5daa:	de bf       	out	0x3e, r29	; 62
    5dac:	ed 01       	movw	r28, r26
    5dae:	08 95       	ret

00005db0 <__udivmodhi4>:
    5db0:	aa 1b       	sub	r26, r26
    5db2:	bb 1b       	sub	r27, r27
    5db4:	51 e1       	ldi	r21, 0x11	; 17
    5db6:	07 c0       	rjmp	.+14     	; 0x5dc6 <__udivmodhi4_ep>

00005db8 <__udivmodhi4_loop>:
    5db8:	aa 1f       	adc	r26, r26
    5dba:	bb 1f       	adc	r27, r27
    5dbc:	a6 17       	cp	r26, r22
    5dbe:	b7 07       	cpc	r27, r23
    5dc0:	10 f0       	brcs	.+4      	; 0x5dc6 <__udivmodhi4_ep>
    5dc2:	a6 1b       	sub	r26, r22
    5dc4:	b7 0b       	sbc	r27, r23

00005dc6 <__udivmodhi4_ep>:
    5dc6:	88 1f       	adc	r24, r24
    5dc8:	99 1f       	adc	r25, r25
    5dca:	5a 95       	dec	r21
    5dcc:	a9 f7       	brne	.-22     	; 0x5db8 <__udivmodhi4_loop>
    5dce:	80 95       	com	r24
    5dd0:	90 95       	com	r25
    5dd2:	bc 01       	movw	r22, r24
    5dd4:	cd 01       	movw	r24, r26
    5dd6:	08 95       	ret

00005dd8 <__udivmodsi4>:
    5dd8:	a1 e2       	ldi	r26, 0x21	; 33
    5dda:	1a 2e       	mov	r1, r26
    5ddc:	aa 1b       	sub	r26, r26
    5dde:	bb 1b       	sub	r27, r27
    5de0:	fd 01       	movw	r30, r26
    5de2:	0d c0       	rjmp	.+26     	; 0x5dfe <__udivmodsi4_ep>

00005de4 <__udivmodsi4_loop>:
    5de4:	aa 1f       	adc	r26, r26
    5de6:	bb 1f       	adc	r27, r27
    5de8:	ee 1f       	adc	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	a2 17       	cp	r26, r18
    5dee:	b3 07       	cpc	r27, r19
    5df0:	e4 07       	cpc	r30, r20
    5df2:	f5 07       	cpc	r31, r21
    5df4:	20 f0       	brcs	.+8      	; 0x5dfe <__udivmodsi4_ep>
    5df6:	a2 1b       	sub	r26, r18
    5df8:	b3 0b       	sbc	r27, r19
    5dfa:	e4 0b       	sbc	r30, r20
    5dfc:	f5 0b       	sbc	r31, r21

00005dfe <__udivmodsi4_ep>:
    5dfe:	66 1f       	adc	r22, r22
    5e00:	77 1f       	adc	r23, r23
    5e02:	88 1f       	adc	r24, r24
    5e04:	99 1f       	adc	r25, r25
    5e06:	1a 94       	dec	r1
    5e08:	69 f7       	brne	.-38     	; 0x5de4 <__udivmodsi4_loop>
    5e0a:	60 95       	com	r22
    5e0c:	70 95       	com	r23
    5e0e:	80 95       	com	r24
    5e10:	90 95       	com	r25
    5e12:	9b 01       	movw	r18, r22
    5e14:	ac 01       	movw	r20, r24
    5e16:	bd 01       	movw	r22, r26
    5e18:	cf 01       	movw	r24, r30
    5e1a:	08 95       	ret

00005e1c <__umulhisi3>:
    5e1c:	a2 9f       	mul	r26, r18
    5e1e:	b0 01       	movw	r22, r0
    5e20:	b3 9f       	mul	r27, r19
    5e22:	c0 01       	movw	r24, r0
    5e24:	a3 9f       	mul	r26, r19
    5e26:	70 0d       	add	r23, r0
    5e28:	81 1d       	adc	r24, r1
    5e2a:	11 24       	eor	r1, r1
    5e2c:	91 1d       	adc	r25, r1
    5e2e:	b2 9f       	mul	r27, r18
    5e30:	70 0d       	add	r23, r0
    5e32:	81 1d       	adc	r24, r1
    5e34:	11 24       	eor	r1, r1
    5e36:	91 1d       	adc	r25, r1
    5e38:	08 95       	ret

00005e3a <atoi>:
    5e3a:	fc 01       	movw	r30, r24
    5e3c:	88 27       	eor	r24, r24
    5e3e:	99 27       	eor	r25, r25
    5e40:	e8 94       	clt
    5e42:	21 91       	ld	r18, Z+
    5e44:	20 32       	cpi	r18, 0x20	; 32
    5e46:	e9 f3       	breq	.-6      	; 0x5e42 <atoi+0x8>
    5e48:	29 30       	cpi	r18, 0x09	; 9
    5e4a:	10 f0       	brcs	.+4      	; 0x5e50 <atoi+0x16>
    5e4c:	2e 30       	cpi	r18, 0x0E	; 14
    5e4e:	c8 f3       	brcs	.-14     	; 0x5e42 <atoi+0x8>
    5e50:	2b 32       	cpi	r18, 0x2B	; 43
    5e52:	41 f0       	breq	.+16     	; 0x5e64 <atoi+0x2a>
    5e54:	2d 32       	cpi	r18, 0x2D	; 45
    5e56:	39 f4       	brne	.+14     	; 0x5e66 <atoi+0x2c>
    5e58:	68 94       	set
    5e5a:	04 c0       	rjmp	.+8      	; 0x5e64 <atoi+0x2a>
    5e5c:	0e 94 77 30 	call	0x60ee	; 0x60ee <__mulhi_const_10>
    5e60:	82 0f       	add	r24, r18
    5e62:	91 1d       	adc	r25, r1
    5e64:	21 91       	ld	r18, Z+
    5e66:	20 53       	subi	r18, 0x30	; 48
    5e68:	2a 30       	cpi	r18, 0x0A	; 10
    5e6a:	c0 f3       	brcs	.-16     	; 0x5e5c <atoi+0x22>
    5e6c:	1e f4       	brtc	.+6      	; 0x5e74 <atoi+0x3a>
    5e6e:	90 95       	com	r25
    5e70:	81 95       	neg	r24
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	08 95       	ret

00005e76 <atol>:
    5e76:	1f 93       	push	r17
    5e78:	fc 01       	movw	r30, r24
    5e7a:	99 27       	eor	r25, r25
    5e7c:	88 27       	eor	r24, r24
    5e7e:	bc 01       	movw	r22, r24
    5e80:	e8 94       	clt
    5e82:	11 91       	ld	r17, Z+
    5e84:	10 32       	cpi	r17, 0x20	; 32
    5e86:	e9 f3       	breq	.-6      	; 0x5e82 <atol+0xc>
    5e88:	19 30       	cpi	r17, 0x09	; 9
    5e8a:	10 f0       	brcs	.+4      	; 0x5e90 <atol+0x1a>
    5e8c:	1e 30       	cpi	r17, 0x0E	; 14
    5e8e:	c8 f3       	brcs	.-14     	; 0x5e82 <atol+0xc>
    5e90:	1b 32       	cpi	r17, 0x2B	; 43
    5e92:	51 f0       	breq	.+20     	; 0x5ea8 <atol+0x32>
    5e94:	1d 32       	cpi	r17, 0x2D	; 45
    5e96:	49 f4       	brne	.+18     	; 0x5eaa <atol+0x34>
    5e98:	68 94       	set
    5e9a:	06 c0       	rjmp	.+12     	; 0x5ea8 <atol+0x32>
    5e9c:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsi_const_10>
    5ea0:	61 0f       	add	r22, r17
    5ea2:	71 1d       	adc	r23, r1
    5ea4:	81 1d       	adc	r24, r1
    5ea6:	91 1d       	adc	r25, r1
    5ea8:	11 91       	ld	r17, Z+
    5eaa:	10 53       	subi	r17, 0x30	; 48
    5eac:	1a 30       	cpi	r17, 0x0A	; 10
    5eae:	b0 f3       	brcs	.-20     	; 0x5e9c <atol+0x26>
    5eb0:	3e f4       	brtc	.+14     	; 0x5ec0 <atol+0x4a>
    5eb2:	90 95       	com	r25
    5eb4:	80 95       	com	r24
    5eb6:	70 95       	com	r23
    5eb8:	61 95       	neg	r22
    5eba:	7f 4f       	sbci	r23, 0xFF	; 255
    5ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    5ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec0:	1f 91       	pop	r17
    5ec2:	08 95       	ret

00005ec4 <__ftoa_engine>:
    5ec4:	28 30       	cpi	r18, 0x08	; 8
    5ec6:	08 f0       	brcs	.+2      	; 0x5eca <__ftoa_engine+0x6>
    5ec8:	27 e0       	ldi	r18, 0x07	; 7
    5eca:	33 27       	eor	r19, r19
    5ecc:	da 01       	movw	r26, r20
    5ece:	99 0f       	add	r25, r25
    5ed0:	31 1d       	adc	r19, r1
    5ed2:	87 fd       	sbrc	r24, 7
    5ed4:	91 60       	ori	r25, 0x01	; 1
    5ed6:	00 96       	adiw	r24, 0x00	; 0
    5ed8:	61 05       	cpc	r22, r1
    5eda:	71 05       	cpc	r23, r1
    5edc:	39 f4       	brne	.+14     	; 0x5eec <__ftoa_engine+0x28>
    5ede:	32 60       	ori	r19, 0x02	; 2
    5ee0:	2e 5f       	subi	r18, 0xFE	; 254
    5ee2:	3d 93       	st	X+, r19
    5ee4:	30 e3       	ldi	r19, 0x30	; 48
    5ee6:	2a 95       	dec	r18
    5ee8:	e1 f7       	brne	.-8      	; 0x5ee2 <__ftoa_engine+0x1e>
    5eea:	08 95       	ret
    5eec:	9f 3f       	cpi	r25, 0xFF	; 255
    5eee:	30 f0       	brcs	.+12     	; 0x5efc <__ftoa_engine+0x38>
    5ef0:	80 38       	cpi	r24, 0x80	; 128
    5ef2:	71 05       	cpc	r23, r1
    5ef4:	61 05       	cpc	r22, r1
    5ef6:	09 f0       	breq	.+2      	; 0x5efa <__ftoa_engine+0x36>
    5ef8:	3c 5f       	subi	r19, 0xFC	; 252
    5efa:	3c 5f       	subi	r19, 0xFC	; 252
    5efc:	3d 93       	st	X+, r19
    5efe:	91 30       	cpi	r25, 0x01	; 1
    5f00:	08 f0       	brcs	.+2      	; 0x5f04 <__ftoa_engine+0x40>
    5f02:	80 68       	ori	r24, 0x80	; 128
    5f04:	91 1d       	adc	r25, r1
    5f06:	df 93       	push	r29
    5f08:	cf 93       	push	r28
    5f0a:	1f 93       	push	r17
    5f0c:	0f 93       	push	r16
    5f0e:	ff 92       	push	r15
    5f10:	ef 92       	push	r14
    5f12:	19 2f       	mov	r17, r25
    5f14:	98 7f       	andi	r25, 0xF8	; 248
    5f16:	96 95       	lsr	r25
    5f18:	e9 2f       	mov	r30, r25
    5f1a:	96 95       	lsr	r25
    5f1c:	96 95       	lsr	r25
    5f1e:	e9 0f       	add	r30, r25
    5f20:	ff 27       	eor	r31, r31
    5f22:	ea 5c       	subi	r30, 0xCA	; 202
    5f24:	fd 4f       	sbci	r31, 0xFD	; 253
    5f26:	99 27       	eor	r25, r25
    5f28:	33 27       	eor	r19, r19
    5f2a:	ee 24       	eor	r14, r14
    5f2c:	ff 24       	eor	r15, r15
    5f2e:	a7 01       	movw	r20, r14
    5f30:	e7 01       	movw	r28, r14
    5f32:	05 90       	lpm	r0, Z+
    5f34:	08 94       	sec
    5f36:	07 94       	ror	r0
    5f38:	28 f4       	brcc	.+10     	; 0x5f44 <__ftoa_engine+0x80>
    5f3a:	36 0f       	add	r19, r22
    5f3c:	e7 1e       	adc	r14, r23
    5f3e:	f8 1e       	adc	r15, r24
    5f40:	49 1f       	adc	r20, r25
    5f42:	51 1d       	adc	r21, r1
    5f44:	66 0f       	add	r22, r22
    5f46:	77 1f       	adc	r23, r23
    5f48:	88 1f       	adc	r24, r24
    5f4a:	99 1f       	adc	r25, r25
    5f4c:	06 94       	lsr	r0
    5f4e:	a1 f7       	brne	.-24     	; 0x5f38 <__ftoa_engine+0x74>
    5f50:	05 90       	lpm	r0, Z+
    5f52:	07 94       	ror	r0
    5f54:	28 f4       	brcc	.+10     	; 0x5f60 <__ftoa_engine+0x9c>
    5f56:	e7 0e       	add	r14, r23
    5f58:	f8 1e       	adc	r15, r24
    5f5a:	49 1f       	adc	r20, r25
    5f5c:	56 1f       	adc	r21, r22
    5f5e:	c1 1d       	adc	r28, r1
    5f60:	77 0f       	add	r23, r23
    5f62:	88 1f       	adc	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	66 1f       	adc	r22, r22
    5f68:	06 94       	lsr	r0
    5f6a:	a1 f7       	brne	.-24     	; 0x5f54 <__ftoa_engine+0x90>
    5f6c:	05 90       	lpm	r0, Z+
    5f6e:	07 94       	ror	r0
    5f70:	28 f4       	brcc	.+10     	; 0x5f7c <__ftoa_engine+0xb8>
    5f72:	f8 0e       	add	r15, r24
    5f74:	49 1f       	adc	r20, r25
    5f76:	56 1f       	adc	r21, r22
    5f78:	c7 1f       	adc	r28, r23
    5f7a:	d1 1d       	adc	r29, r1
    5f7c:	88 0f       	add	r24, r24
    5f7e:	99 1f       	adc	r25, r25
    5f80:	66 1f       	adc	r22, r22
    5f82:	77 1f       	adc	r23, r23
    5f84:	06 94       	lsr	r0
    5f86:	a1 f7       	brne	.-24     	; 0x5f70 <__ftoa_engine+0xac>
    5f88:	05 90       	lpm	r0, Z+
    5f8a:	07 94       	ror	r0
    5f8c:	20 f4       	brcc	.+8      	; 0x5f96 <__ftoa_engine+0xd2>
    5f8e:	49 0f       	add	r20, r25
    5f90:	56 1f       	adc	r21, r22
    5f92:	c7 1f       	adc	r28, r23
    5f94:	d8 1f       	adc	r29, r24
    5f96:	99 0f       	add	r25, r25
    5f98:	66 1f       	adc	r22, r22
    5f9a:	77 1f       	adc	r23, r23
    5f9c:	88 1f       	adc	r24, r24
    5f9e:	06 94       	lsr	r0
    5fa0:	a9 f7       	brne	.-22     	; 0x5f8c <__ftoa_engine+0xc8>
    5fa2:	84 91       	lpm	r24, Z
    5fa4:	10 95       	com	r17
    5fa6:	17 70       	andi	r17, 0x07	; 7
    5fa8:	41 f0       	breq	.+16     	; 0x5fba <__ftoa_engine+0xf6>
    5faa:	d6 95       	lsr	r29
    5fac:	c7 95       	ror	r28
    5fae:	57 95       	ror	r21
    5fb0:	47 95       	ror	r20
    5fb2:	f7 94       	ror	r15
    5fb4:	e7 94       	ror	r14
    5fb6:	1a 95       	dec	r17
    5fb8:	c1 f7       	brne	.-16     	; 0x5faa <__ftoa_engine+0xe6>
    5fba:	ec ed       	ldi	r30, 0xDC	; 220
    5fbc:	f1 e0       	ldi	r31, 0x01	; 1
    5fbe:	68 94       	set
    5fc0:	15 90       	lpm	r1, Z+
    5fc2:	15 91       	lpm	r17, Z+
    5fc4:	35 91       	lpm	r19, Z+
    5fc6:	65 91       	lpm	r22, Z+
    5fc8:	95 91       	lpm	r25, Z+
    5fca:	05 90       	lpm	r0, Z+
    5fcc:	7f e2       	ldi	r23, 0x2F	; 47
    5fce:	73 95       	inc	r23
    5fd0:	e1 18       	sub	r14, r1
    5fd2:	f1 0a       	sbc	r15, r17
    5fd4:	43 0b       	sbc	r20, r19
    5fd6:	56 0b       	sbc	r21, r22
    5fd8:	c9 0b       	sbc	r28, r25
    5fda:	d0 09       	sbc	r29, r0
    5fdc:	c0 f7       	brcc	.-16     	; 0x5fce <__ftoa_engine+0x10a>
    5fde:	e1 0c       	add	r14, r1
    5fe0:	f1 1e       	adc	r15, r17
    5fe2:	43 1f       	adc	r20, r19
    5fe4:	56 1f       	adc	r21, r22
    5fe6:	c9 1f       	adc	r28, r25
    5fe8:	d0 1d       	adc	r29, r0
    5fea:	7e f4       	brtc	.+30     	; 0x600a <__ftoa_engine+0x146>
    5fec:	70 33       	cpi	r23, 0x30	; 48
    5fee:	11 f4       	brne	.+4      	; 0x5ff4 <__ftoa_engine+0x130>
    5ff0:	8a 95       	dec	r24
    5ff2:	e6 cf       	rjmp	.-52     	; 0x5fc0 <__ftoa_engine+0xfc>
    5ff4:	e8 94       	clt
    5ff6:	01 50       	subi	r16, 0x01	; 1
    5ff8:	30 f0       	brcs	.+12     	; 0x6006 <__ftoa_engine+0x142>
    5ffa:	08 0f       	add	r16, r24
    5ffc:	0a f4       	brpl	.+2      	; 0x6000 <__ftoa_engine+0x13c>
    5ffe:	00 27       	eor	r16, r16
    6000:	02 17       	cp	r16, r18
    6002:	08 f4       	brcc	.+2      	; 0x6006 <__ftoa_engine+0x142>
    6004:	20 2f       	mov	r18, r16
    6006:	23 95       	inc	r18
    6008:	02 2f       	mov	r16, r18
    600a:	7a 33       	cpi	r23, 0x3A	; 58
    600c:	28 f0       	brcs	.+10     	; 0x6018 <__ftoa_engine+0x154>
    600e:	79 e3       	ldi	r23, 0x39	; 57
    6010:	7d 93       	st	X+, r23
    6012:	2a 95       	dec	r18
    6014:	e9 f7       	brne	.-6      	; 0x6010 <__ftoa_engine+0x14c>
    6016:	10 c0       	rjmp	.+32     	; 0x6038 <__ftoa_engine+0x174>
    6018:	7d 93       	st	X+, r23
    601a:	2a 95       	dec	r18
    601c:	89 f6       	brne	.-94     	; 0x5fc0 <__ftoa_engine+0xfc>
    601e:	06 94       	lsr	r0
    6020:	97 95       	ror	r25
    6022:	67 95       	ror	r22
    6024:	37 95       	ror	r19
    6026:	17 95       	ror	r17
    6028:	17 94       	ror	r1
    602a:	e1 18       	sub	r14, r1
    602c:	f1 0a       	sbc	r15, r17
    602e:	43 0b       	sbc	r20, r19
    6030:	56 0b       	sbc	r21, r22
    6032:	c9 0b       	sbc	r28, r25
    6034:	d0 09       	sbc	r29, r0
    6036:	98 f0       	brcs	.+38     	; 0x605e <__ftoa_engine+0x19a>
    6038:	23 95       	inc	r18
    603a:	7e 91       	ld	r23, -X
    603c:	73 95       	inc	r23
    603e:	7a 33       	cpi	r23, 0x3A	; 58
    6040:	08 f0       	brcs	.+2      	; 0x6044 <__ftoa_engine+0x180>
    6042:	70 e3       	ldi	r23, 0x30	; 48
    6044:	7c 93       	st	X, r23
    6046:	20 13       	cpse	r18, r16
    6048:	b8 f7       	brcc	.-18     	; 0x6038 <__ftoa_engine+0x174>
    604a:	7e 91       	ld	r23, -X
    604c:	70 61       	ori	r23, 0x10	; 16
    604e:	7d 93       	st	X+, r23
    6050:	30 f0       	brcs	.+12     	; 0x605e <__ftoa_engine+0x19a>
    6052:	83 95       	inc	r24
    6054:	71 e3       	ldi	r23, 0x31	; 49
    6056:	7d 93       	st	X+, r23
    6058:	70 e3       	ldi	r23, 0x30	; 48
    605a:	2a 95       	dec	r18
    605c:	e1 f7       	brne	.-8      	; 0x6056 <__ftoa_engine+0x192>
    605e:	11 24       	eor	r1, r1
    6060:	ef 90       	pop	r14
    6062:	ff 90       	pop	r15
    6064:	0f 91       	pop	r16
    6066:	1f 91       	pop	r17
    6068:	cf 91       	pop	r28
    606a:	df 91       	pop	r29
    606c:	99 27       	eor	r25, r25
    606e:	87 fd       	sbrc	r24, 7
    6070:	90 95       	com	r25
    6072:	08 95       	ret

00006074 <strnlen_P>:
    6074:	fc 01       	movw	r30, r24
    6076:	05 90       	lpm	r0, Z+
    6078:	61 50       	subi	r22, 0x01	; 1
    607a:	70 40       	sbci	r23, 0x00	; 0
    607c:	01 10       	cpse	r0, r1
    607e:	d8 f7       	brcc	.-10     	; 0x6076 <strnlen_P+0x2>
    6080:	80 95       	com	r24
    6082:	90 95       	com	r25
    6084:	8e 0f       	add	r24, r30
    6086:	9f 1f       	adc	r25, r31
    6088:	08 95       	ret

0000608a <strcat>:
    608a:	fb 01       	movw	r30, r22
    608c:	dc 01       	movw	r26, r24
    608e:	0d 90       	ld	r0, X+
    6090:	00 20       	and	r0, r0
    6092:	e9 f7       	brne	.-6      	; 0x608e <strcat+0x4>
    6094:	11 97       	sbiw	r26, 0x01	; 1
    6096:	01 90       	ld	r0, Z+
    6098:	0d 92       	st	X+, r0
    609a:	00 20       	and	r0, r0
    609c:	e1 f7       	brne	.-8      	; 0x6096 <strcat+0xc>
    609e:	08 95       	ret

000060a0 <strcpy>:
    60a0:	fb 01       	movw	r30, r22
    60a2:	dc 01       	movw	r26, r24
    60a4:	01 90       	ld	r0, Z+
    60a6:	0d 92       	st	X+, r0
    60a8:	00 20       	and	r0, r0
    60aa:	e1 f7       	brne	.-8      	; 0x60a4 <strcpy+0x4>
    60ac:	08 95       	ret

000060ae <strnlen>:
    60ae:	fc 01       	movw	r30, r24
    60b0:	61 50       	subi	r22, 0x01	; 1
    60b2:	70 40       	sbci	r23, 0x00	; 0
    60b4:	01 90       	ld	r0, Z+
    60b6:	01 10       	cpse	r0, r1
    60b8:	d8 f7       	brcc	.-10     	; 0x60b0 <strnlen+0x2>
    60ba:	80 95       	com	r24
    60bc:	90 95       	com	r25
    60be:	8e 0f       	add	r24, r30
    60c0:	9f 1f       	adc	r25, r31
    60c2:	08 95       	ret

000060c4 <__mulsi_const_10>:
    60c4:	59 2f       	mov	r21, r25
    60c6:	48 2f       	mov	r20, r24
    60c8:	37 2f       	mov	r19, r23
    60ca:	26 2f       	mov	r18, r22
    60cc:	66 0f       	add	r22, r22
    60ce:	77 1f       	adc	r23, r23
    60d0:	88 1f       	adc	r24, r24
    60d2:	99 1f       	adc	r25, r25
    60d4:	66 0f       	add	r22, r22
    60d6:	77 1f       	adc	r23, r23
    60d8:	88 1f       	adc	r24, r24
    60da:	99 1f       	adc	r25, r25
    60dc:	62 0f       	add	r22, r18
    60de:	73 1f       	adc	r23, r19
    60e0:	84 1f       	adc	r24, r20
    60e2:	95 1f       	adc	r25, r21
    60e4:	66 0f       	add	r22, r22
    60e6:	77 1f       	adc	r23, r23
    60e8:	88 1f       	adc	r24, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	08 95       	ret

000060ee <__mulhi_const_10>:
    60ee:	7a e0       	ldi	r23, 0x0A	; 10
    60f0:	97 9f       	mul	r25, r23
    60f2:	90 2d       	mov	r25, r0
    60f4:	87 9f       	mul	r24, r23
    60f6:	80 2d       	mov	r24, r0
    60f8:	91 0d       	add	r25, r1
    60fa:	11 24       	eor	r1, r1
    60fc:	08 95       	ret

000060fe <fputc>:
    60fe:	0f 93       	push	r16
    6100:	1f 93       	push	r17
    6102:	cf 93       	push	r28
    6104:	df 93       	push	r29
    6106:	fb 01       	movw	r30, r22
    6108:	23 81       	ldd	r18, Z+3	; 0x03
    610a:	21 fd       	sbrc	r18, 1
    610c:	03 c0       	rjmp	.+6      	; 0x6114 <fputc+0x16>
    610e:	8f ef       	ldi	r24, 0xFF	; 255
    6110:	9f ef       	ldi	r25, 0xFF	; 255
    6112:	2c c0       	rjmp	.+88     	; 0x616c <fputc+0x6e>
    6114:	22 ff       	sbrs	r18, 2
    6116:	16 c0       	rjmp	.+44     	; 0x6144 <fputc+0x46>
    6118:	46 81       	ldd	r20, Z+6	; 0x06
    611a:	57 81       	ldd	r21, Z+7	; 0x07
    611c:	24 81       	ldd	r18, Z+4	; 0x04
    611e:	35 81       	ldd	r19, Z+5	; 0x05
    6120:	42 17       	cp	r20, r18
    6122:	53 07       	cpc	r21, r19
    6124:	44 f4       	brge	.+16     	; 0x6136 <fputc+0x38>
    6126:	a0 81       	ld	r26, Z
    6128:	b1 81       	ldd	r27, Z+1	; 0x01
    612a:	9d 01       	movw	r18, r26
    612c:	2f 5f       	subi	r18, 0xFF	; 255
    612e:	3f 4f       	sbci	r19, 0xFF	; 255
    6130:	20 83       	st	Z, r18
    6132:	31 83       	std	Z+1, r19	; 0x01
    6134:	8c 93       	st	X, r24
    6136:	26 81       	ldd	r18, Z+6	; 0x06
    6138:	37 81       	ldd	r19, Z+7	; 0x07
    613a:	2f 5f       	subi	r18, 0xFF	; 255
    613c:	3f 4f       	sbci	r19, 0xFF	; 255
    613e:	26 83       	std	Z+6, r18	; 0x06
    6140:	37 83       	std	Z+7, r19	; 0x07
    6142:	14 c0       	rjmp	.+40     	; 0x616c <fputc+0x6e>
    6144:	8b 01       	movw	r16, r22
    6146:	ec 01       	movw	r28, r24
    6148:	fb 01       	movw	r30, r22
    614a:	00 84       	ldd	r0, Z+8	; 0x08
    614c:	f1 85       	ldd	r31, Z+9	; 0x09
    614e:	e0 2d       	mov	r30, r0
    6150:	09 95       	icall
    6152:	89 2b       	or	r24, r25
    6154:	e1 f6       	brne	.-72     	; 0x610e <fputc+0x10>
    6156:	d8 01       	movw	r26, r16
    6158:	16 96       	adiw	r26, 0x06	; 6
    615a:	8d 91       	ld	r24, X+
    615c:	9c 91       	ld	r25, X
    615e:	17 97       	sbiw	r26, 0x07	; 7
    6160:	01 96       	adiw	r24, 0x01	; 1
    6162:	16 96       	adiw	r26, 0x06	; 6
    6164:	8d 93       	st	X+, r24
    6166:	9c 93       	st	X, r25
    6168:	17 97       	sbiw	r26, 0x07	; 7
    616a:	ce 01       	movw	r24, r28
    616c:	df 91       	pop	r29
    616e:	cf 91       	pop	r28
    6170:	1f 91       	pop	r17
    6172:	0f 91       	pop	r16
    6174:	08 95       	ret

00006176 <sprintf>:
    6176:	ae e0       	ldi	r26, 0x0E	; 14
    6178:	b0 e0       	ldi	r27, 0x00	; 0
    617a:	e1 ec       	ldi	r30, 0xC1	; 193
    617c:	f0 e3       	ldi	r31, 0x30	; 48
    617e:	0c 94 b5 2e 	jmp	0x5d6a	; 0x5d6a <__prologue_saves__+0x1c>
    6182:	0d 89       	ldd	r16, Y+21	; 0x15
    6184:	1e 89       	ldd	r17, Y+22	; 0x16
    6186:	86 e0       	ldi	r24, 0x06	; 6
    6188:	8c 83       	std	Y+4, r24	; 0x04
    618a:	09 83       	std	Y+1, r16	; 0x01
    618c:	1a 83       	std	Y+2, r17	; 0x02
    618e:	8f ef       	ldi	r24, 0xFF	; 255
    6190:	9f e7       	ldi	r25, 0x7F	; 127
    6192:	8d 83       	std	Y+5, r24	; 0x05
    6194:	9e 83       	std	Y+6, r25	; 0x06
    6196:	ae 01       	movw	r20, r28
    6198:	47 5e       	subi	r20, 0xE7	; 231
    619a:	5f 4f       	sbci	r21, 0xFF	; 255
    619c:	6f 89       	ldd	r22, Y+23	; 0x17
    619e:	78 8d       	ldd	r23, Y+24	; 0x18
    61a0:	ce 01       	movw	r24, r28
    61a2:	01 96       	adiw	r24, 0x01	; 1
    61a4:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <vfprintf>
    61a8:	ef 81       	ldd	r30, Y+7	; 0x07
    61aa:	f8 85       	ldd	r31, Y+8	; 0x08
    61ac:	e0 0f       	add	r30, r16
    61ae:	f1 1f       	adc	r31, r17
    61b0:	10 82       	st	Z, r1
    61b2:	2e 96       	adiw	r28, 0x0e	; 14
    61b4:	e4 e0       	ldi	r30, 0x04	; 4
    61b6:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__epilogue_restores__+0x1c>

000061ba <__ultoa_invert>:
    61ba:	fa 01       	movw	r30, r20
    61bc:	aa 27       	eor	r26, r26
    61be:	28 30       	cpi	r18, 0x08	; 8
    61c0:	51 f1       	breq	.+84     	; 0x6216 <__ultoa_invert+0x5c>
    61c2:	20 31       	cpi	r18, 0x10	; 16
    61c4:	81 f1       	breq	.+96     	; 0x6226 <__ultoa_invert+0x6c>
    61c6:	e8 94       	clt
    61c8:	6f 93       	push	r22
    61ca:	6e 7f       	andi	r22, 0xFE	; 254
    61cc:	6e 5f       	subi	r22, 0xFE	; 254
    61ce:	7f 4f       	sbci	r23, 0xFF	; 255
    61d0:	8f 4f       	sbci	r24, 0xFF	; 255
    61d2:	9f 4f       	sbci	r25, 0xFF	; 255
    61d4:	af 4f       	sbci	r26, 0xFF	; 255
    61d6:	b1 e0       	ldi	r27, 0x01	; 1
    61d8:	3e d0       	rcall	.+124    	; 0x6256 <__ultoa_invert+0x9c>
    61da:	b4 e0       	ldi	r27, 0x04	; 4
    61dc:	3c d0       	rcall	.+120    	; 0x6256 <__ultoa_invert+0x9c>
    61de:	67 0f       	add	r22, r23
    61e0:	78 1f       	adc	r23, r24
    61e2:	89 1f       	adc	r24, r25
    61e4:	9a 1f       	adc	r25, r26
    61e6:	a1 1d       	adc	r26, r1
    61e8:	68 0f       	add	r22, r24
    61ea:	79 1f       	adc	r23, r25
    61ec:	8a 1f       	adc	r24, r26
    61ee:	91 1d       	adc	r25, r1
    61f0:	a1 1d       	adc	r26, r1
    61f2:	6a 0f       	add	r22, r26
    61f4:	71 1d       	adc	r23, r1
    61f6:	81 1d       	adc	r24, r1
    61f8:	91 1d       	adc	r25, r1
    61fa:	a1 1d       	adc	r26, r1
    61fc:	20 d0       	rcall	.+64     	; 0x623e <__ultoa_invert+0x84>
    61fe:	09 f4       	brne	.+2      	; 0x6202 <__ultoa_invert+0x48>
    6200:	68 94       	set
    6202:	3f 91       	pop	r19
    6204:	2a e0       	ldi	r18, 0x0A	; 10
    6206:	26 9f       	mul	r18, r22
    6208:	11 24       	eor	r1, r1
    620a:	30 19       	sub	r19, r0
    620c:	30 5d       	subi	r19, 0xD0	; 208
    620e:	31 93       	st	Z+, r19
    6210:	de f6       	brtc	.-74     	; 0x61c8 <__ultoa_invert+0xe>
    6212:	cf 01       	movw	r24, r30
    6214:	08 95       	ret
    6216:	46 2f       	mov	r20, r22
    6218:	47 70       	andi	r20, 0x07	; 7
    621a:	40 5d       	subi	r20, 0xD0	; 208
    621c:	41 93       	st	Z+, r20
    621e:	b3 e0       	ldi	r27, 0x03	; 3
    6220:	0f d0       	rcall	.+30     	; 0x6240 <__ultoa_invert+0x86>
    6222:	c9 f7       	brne	.-14     	; 0x6216 <__ultoa_invert+0x5c>
    6224:	f6 cf       	rjmp	.-20     	; 0x6212 <__ultoa_invert+0x58>
    6226:	46 2f       	mov	r20, r22
    6228:	4f 70       	andi	r20, 0x0F	; 15
    622a:	40 5d       	subi	r20, 0xD0	; 208
    622c:	4a 33       	cpi	r20, 0x3A	; 58
    622e:	18 f0       	brcs	.+6      	; 0x6236 <__ultoa_invert+0x7c>
    6230:	49 5d       	subi	r20, 0xD9	; 217
    6232:	31 fd       	sbrc	r19, 1
    6234:	40 52       	subi	r20, 0x20	; 32
    6236:	41 93       	st	Z+, r20
    6238:	02 d0       	rcall	.+4      	; 0x623e <__ultoa_invert+0x84>
    623a:	a9 f7       	brne	.-22     	; 0x6226 <__ultoa_invert+0x6c>
    623c:	ea cf       	rjmp	.-44     	; 0x6212 <__ultoa_invert+0x58>
    623e:	b4 e0       	ldi	r27, 0x04	; 4
    6240:	a6 95       	lsr	r26
    6242:	97 95       	ror	r25
    6244:	87 95       	ror	r24
    6246:	77 95       	ror	r23
    6248:	67 95       	ror	r22
    624a:	ba 95       	dec	r27
    624c:	c9 f7       	brne	.-14     	; 0x6240 <__ultoa_invert+0x86>
    624e:	00 97       	sbiw	r24, 0x00	; 0
    6250:	61 05       	cpc	r22, r1
    6252:	71 05       	cpc	r23, r1
    6254:	08 95       	ret
    6256:	9b 01       	movw	r18, r22
    6258:	ac 01       	movw	r20, r24
    625a:	0a 2e       	mov	r0, r26
    625c:	06 94       	lsr	r0
    625e:	57 95       	ror	r21
    6260:	47 95       	ror	r20
    6262:	37 95       	ror	r19
    6264:	27 95       	ror	r18
    6266:	ba 95       	dec	r27
    6268:	c9 f7       	brne	.-14     	; 0x625c <__ultoa_invert+0xa2>
    626a:	62 0f       	add	r22, r18
    626c:	73 1f       	adc	r23, r19
    626e:	84 1f       	adc	r24, r20
    6270:	95 1f       	adc	r25, r21
    6272:	a0 1d       	adc	r26, r0
    6274:	08 95       	ret

00006276 <eeprom_read_block>:
    6276:	60 50       	subi	r22, 0x00	; 0
    6278:	7c 4e       	sbci	r23, 0xEC	; 236
    627a:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <memcpy>

0000627e <eeprom_update_block>:
    627e:	dc 01       	movw	r26, r24
    6280:	a4 0f       	add	r26, r20
    6282:	b5 1f       	adc	r27, r21
    6284:	41 50       	subi	r20, 0x01	; 1
    6286:	50 40       	sbci	r21, 0x00	; 0
    6288:	48 f0       	brcs	.+18     	; 0x629c <eeprom_update_block+0x1e>
    628a:	cb 01       	movw	r24, r22
    628c:	84 0f       	add	r24, r20
    628e:	95 1f       	adc	r25, r21
    6290:	2e 91       	ld	r18, -X
    6292:	0e 94 50 31 	call	0x62a0	; 0x62a0 <eeprom_update_r18>
    6296:	41 50       	subi	r20, 0x01	; 1
    6298:	50 40       	sbci	r21, 0x00	; 0
    629a:	d0 f7       	brcc	.-12     	; 0x6290 <eeprom_update_block+0x12>
    629c:	08 95       	ret

0000629e <eeprom_update_byte>:
    629e:	26 2f       	mov	r18, r22

000062a0 <eeprom_update_r18>:
    62a0:	0e 94 72 31 	call	0x62e4	; 0x62e4 <eeprom_mapen>
    62a4:	00 80       	ld	r0, Z
    62a6:	02 16       	cp	r0, r18
    62a8:	19 f0       	breq	.+6      	; 0x62b0 <eeprom_update_r18+0x10>
    62aa:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <eeprom_write_r18>
    62ae:	01 97       	sbiw	r24, 0x01	; 1
    62b0:	01 97       	sbiw	r24, 0x01	; 1
    62b2:	08 95       	ret

000062b4 <eeprom_write_byte>:
    62b4:	26 2f       	mov	r18, r22

000062b6 <eeprom_write_r18>:
    62b6:	af 93       	push	r26
    62b8:	bf 93       	push	r27
    62ba:	e0 e0       	ldi	r30, 0x00	; 0
    62bc:	f0 e1       	ldi	r31, 0x10	; 16
    62be:	32 81       	ldd	r19, Z+2	; 0x02
    62c0:	31 fd       	sbrc	r19, 1
    62c2:	fd cf       	rjmp	.-6      	; 0x62be <eeprom_write_r18+0x8>
    62c4:	dc 01       	movw	r26, r24
    62c6:	a0 50       	subi	r26, 0x00	; 0
    62c8:	bc 4e       	sbci	r27, 0xEC	; 236
    62ca:	2c 93       	st	X, r18
    62cc:	2d e9       	ldi	r18, 0x9D	; 157
    62ce:	24 bf       	out	0x34, r18	; 52
    62d0:	23 e0       	ldi	r18, 0x03	; 3
    62d2:	20 83       	st	Z, r18
    62d4:	01 96       	adiw	r24, 0x01	; 1
    62d6:	bf 91       	pop	r27
    62d8:	af 91       	pop	r26
    62da:	08 95       	ret

000062dc <eeprom_read_byte>:
    62dc:	03 d0       	rcall	.+6      	; 0x62e4 <eeprom_mapen>
    62de:	80 81       	ld	r24, Z
    62e0:	99 27       	eor	r25, r25
    62e2:	08 95       	ret

000062e4 <eeprom_mapen>:
    62e4:	fc 01       	movw	r30, r24
    62e6:	e0 50       	subi	r30, 0x00	; 0
    62e8:	fc 4e       	sbci	r31, 0xEC	; 236
    62ea:	08 95       	ret

000062ec <memcpy>:
    62ec:	fb 01       	movw	r30, r22
    62ee:	dc 01       	movw	r26, r24
    62f0:	02 c0       	rjmp	.+4      	; 0x62f6 <memcpy+0xa>
    62f2:	01 90       	ld	r0, Z+
    62f4:	0d 92       	st	X+, r0
    62f6:	41 50       	subi	r20, 0x01	; 1
    62f8:	50 40       	sbci	r21, 0x00	; 0
    62fa:	d8 f7       	brcc	.-10     	; 0x62f2 <memcpy+0x6>
    62fc:	08 95       	ret

000062fe <_exit>:
    62fe:	f8 94       	cli

00006300 <__stop_program>:
    6300:	ff cf       	rjmp	.-2      	; 0x6300 <__stop_program>
