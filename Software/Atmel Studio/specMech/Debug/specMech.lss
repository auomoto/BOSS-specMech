
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  0000374b  000037ff  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035d6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000175  000075d6  000035d6  0000368a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000052b  00802802  00802802  00003801  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008753  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f44  00000000  00000000  0000c54b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003601  00000000  00000000  0001048f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb8  00000000  00000000  00013a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002020  00000000  00000000  00014648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000032aa  00000000  00000000  00016668  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  00019912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_3>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__vector_17>
      48:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_18>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_26>
      6c:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_27>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_29>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_37>
      98:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_38>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	e1 0c       	add	r14, r1
      a2:	e9 0f       	add	r30, r25
      a4:	e9 0f       	add	r30, r25
      a6:	e9 0f       	add	r30, r25
      a8:	e9 0f       	add	r30, r25
      aa:	e9 0f       	add	r30, r25
      ac:	e9 0f       	add	r30, r25
      ae:	e9 0f       	add	r30, r25
      b0:	e9 0f       	add	r30, r25
      b2:	e9 0f       	add	r30, r25
      b4:	e9 0f       	add	r30, r25
      b6:	e9 0f       	add	r30, r25
      b8:	e9 0f       	add	r30, r25
      ba:	e9 0f       	add	r30, r25
      bc:	e9 0f       	add	r30, r25
      be:	e9 0f       	add	r30, r25
      c0:	e9 0f       	add	r30, r25
      c2:	e9 0f       	add	r30, r25
      c4:	e9 0f       	add	r30, r25
      c6:	e9 0f       	add	r30, r25
      c8:	a4 0f       	add	r26, r20
      ca:	e9 0f       	add	r30, r25
      cc:	e9 0f       	add	r30, r25
      ce:	e9 0f       	add	r30, r25
      d0:	e9 0f       	add	r30, r25
      d2:	e9 0f       	add	r30, r25
      d4:	e9 0f       	add	r30, r25
      d6:	e9 0f       	add	r30, r25
      d8:	e9 0f       	add	r30, r25
      da:	e9 0f       	add	r30, r25
      dc:	e9 0f       	add	r30, r25
      de:	e9 0f       	add	r30, r25
      e0:	e9 0f       	add	r30, r25
      e2:	e9 0f       	add	r30, r25
      e4:	e9 0f       	add	r30, r25
      e6:	1d 0d       	add	r17, r13
      e8:	e9 0f       	add	r30, r25
      ea:	e9 0f       	add	r30, r25
      ec:	e9 0f       	add	r30, r25
      ee:	e9 0f       	add	r30, r25
      f0:	e9 0f       	add	r30, r25
      f2:	e9 0f       	add	r30, r25
      f4:	e9 0f       	add	r30, r25
      f6:	e9 0f       	add	r30, r25
      f8:	e9 0f       	add	r30, r25
      fa:	25 0e       	add	r2, r21
      fc:	99 0e       	add	r9, r25
      fe:	e9 0f       	add	r30, r25
     100:	e9 0f       	add	r30, r25
     102:	e9 0f       	add	r30, r25
     104:	00 0f       	add	r16, r16
     106:	e9 0f       	add	r30, r25
     108:	51 0f       	add	r21, r17

0000010a <__trampolines_end>:
     10a:	6e 61       	ori	r22, 0x1E	; 30
     10c:	6e 00       	.word	0x006e	; ????

0000010e <__c.2332>:
     10e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df e3       	ldi	r29, 0x3F	; 63
     216:	de bf       	out	0x3e, r29	; 62

00000218 <__do_copy_data>:
     218:	18 e2       	ldi	r17, 0x28	; 40
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b8 e2       	ldi	r27, 0x28	; 40
     21e:	eb e4       	ldi	r30, 0x4B	; 75
     220:	f7 e3       	ldi	r31, 0x37	; 55
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x10>
     224:	05 90       	lpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 30       	cpi	r26, 0x02	; 2
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0xc>

0000022e <__do_clear_bss>:
     22e:	2d e2       	ldi	r18, 0x2D	; 45
     230:	a2 e0       	ldi	r26, 0x02	; 2
     232:	b8 e2       	ldi	r27, 0x28	; 40
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	ad 32       	cpi	r26, 0x2D	; 45
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 93 07 	call	0xf26	; 0xf26 <main>
     242:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	c9 f0       	breq	.+50     	; 0x28a <read_AD590+0x40>
     258:	18 f0       	brcs	.+6      	; 0x260 <read_AD590+0x16>
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	61 f0       	breq	.+24     	; 0x276 <read_AD590+0x2c>
     25e:	10 c0       	rjmp	.+32     	; 0x280 <read_AD590+0x36>
		case 0:
// The commented alternates are for the prototype ADS1115 board:
//			pins = 0x80;
			pins = 0x01;	// t0
			offset = 7.6;
     260:	0f 2e       	mov	r0, r31
     262:	f3 e3       	ldi	r31, 0x33	; 51
     264:	cf 2e       	mov	r12, r31
     266:	dc 2c       	mov	r13, r12
     268:	f3 ef       	ldi	r31, 0xF3	; 243
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e4       	ldi	r31, 0x40	; 64
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
// The commented alternates are for the prototype ADS1115 board:
//			pins = 0x80;
			pins = 0x01;	// t0
     272:	c1 e0       	ldi	r28, 0x01	; 1
     274:	0e c0       	rjmp	.+28     	; 0x292 <read_AD590+0x48>
			offset = 0.0;
			break;
		case 2:
//			pins = 0x20;
			pins = 0x10;	// t2
			offset = 0.0;
     276:	c1 2c       	mov	r12, r1
     278:	d1 2c       	mov	r13, r1
     27a:	76 01       	movw	r14, r12
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
//			pins = 0x20;
			pins = 0x10;	// t2
     27c:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     27e:	09 c0       	rjmp	.+18     	; 0x292 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	76 01       	movw	r14, r12
//			pins = 0x20;
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     286:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     288:	04 c0       	rjmp	.+8      	; 0x292 <read_AD590+0x48>
			offset = 7.6;
			break;
		case 1:
//			pins = 0x40;
			pins = 0x04;	// t1
			offset = 0.0;
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	76 01       	movw	r14, r12
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
//			pins = 0x40;
			pins = 0x04;	// t1
     290:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	66 e0       	ldi	r22, 0x06	; 6
     296:	8e e4       	ldi	r24, 0x4E	; 78
     298:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     29c:	4c 2f       	mov	r20, r28
     29e:	40 95       	com	r20
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	8e e4       	ldi	r24, 0x4E	; 78
     2a4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2a8:	4c 2f       	mov	r20, r28
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	8e e4       	ldi	r24, 0x4E	; 78
     2ae:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	86 e1       	ldi	r24, 0x16	; 22
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <read_AD590+0x6a>
     2b8:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
//	voltage = read_ADS1115(ADC_TE, PGA0512, AIN2, DR128);		// test board input port is AIN2
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);		// on specMech board
     2ba:	20 e8       	ldi	r18, 0x80	; 128
     2bc:	40 e7       	ldi	r20, 0x70	; 112
     2be:	68 e0       	ldi	r22, 0x08	; 8
     2c0:	80 e9       	ldi	r24, 0x90	; 144
     2c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Include offset calibration
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4a e7       	ldi	r20, 0x7A	; 122
     2cc:	54 e4       	ldi	r21, 0x44	; 68
     2ce:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     2d2:	23 e3       	ldi	r18, 0x33	; 51
     2d4:	33 e9       	ldi	r19, 0x93	; 147
     2d6:	48 e8       	ldi	r20, 0x88	; 136
     2d8:	53 e4       	ldi	r21, 0x43	; 67
     2da:	0e 94 05 13 	call	0x260a	; 0x260a <__subsf3>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 06 13 	call	0x260c	; 0x260c <__addsf3>
	return(temperature);

}
     2ea:	cf 91       	pop	r28
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	d8 2f       	mov	r29, r24
     308:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     30a:	46 2b       	or	r20, r22
     30c:	c4 2f       	mov	r28, r20
     30e:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     310:	12 2f       	mov	r17, r18
     312:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     31a:	08 2f       	mov	r16, r24
     31c:	88 23       	and	r24, r24
     31e:	69 f0       	breq	.+26     	; 0x33a <read_ADS1115+0x44>
		stop_TWI();
     320:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     324:	60 2f       	mov	r22, r16
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
     330:	56 2f       	mov	r21, r22
     332:	47 2f       	mov	r20, r23
     334:	38 2f       	mov	r19, r24
     336:	29 2f       	mov	r18, r25
     338:	d0 c0       	rjmp	.+416    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     340:	08 2f       	mov	r16, r24
     342:	88 23       	and	r24, r24
     344:	69 f0       	breq	.+26     	; 0x360 <read_ADS1115+0x6a>
		stop_TWI();
     346:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     34a:	60 2f       	mov	r22, r16
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
     356:	56 2f       	mov	r21, r22
     358:	47 2f       	mov	r20, r23
     35a:	38 2f       	mov	r19, r24
     35c:	29 2f       	mov	r18, r25
     35e:	bd c0       	rjmp	.+378    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	69 f0       	breq	.+26     	; 0x386 <read_ADS1115+0x90>
		stop_TWI();
     36c:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     370:	6c 2f       	mov	r22, r28
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
     37c:	56 2f       	mov	r21, r22
     37e:	47 2f       	mov	r20, r23
     380:	38 2f       	mov	r19, r24
     382:	29 2f       	mov	r18, r25
     384:	aa c0       	rjmp	.+340    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     386:	81 2f       	mov	r24, r17
     388:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     38c:	c8 2f       	mov	r28, r24
     38e:	88 23       	and	r24, r24
     390:	69 f0       	breq	.+26     	; 0x3ac <read_ADS1115+0xb6>
		stop_TWI();
     392:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     396:	6c 2f       	mov	r22, r28
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
     3a2:	56 2f       	mov	r21, r22
     3a4:	47 2f       	mov	r20, r23
     3a6:	38 2f       	mov	r19, r24
     3a8:	29 2f       	mov	r18, r25
     3aa:	97 c0       	rjmp	.+302    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	stop_TWI();
     3ac:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
     3b0:	8c e1       	ldi	r24, 0x1C	; 28
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3b6:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3b8:	09 c0       	rjmp	.+18     	; 0x3cc <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8d 2f       	mov	r24, r29
     3be:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     3c2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <read_ADS1115+0xd6>
			converting = NO;
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3cc:	c1 11       	cpse	r28, r1
     3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3d0:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8d 2f       	mov	r24, r29
     3e6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
	highbyte = read_TWI();
     3ea:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_TWI>
     3ee:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     3f0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
     3f4:	d8 2f       	mov	r29, r24
	stop_TWI();
     3f6:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	value = highbyte;
     3fa:	6c 2f       	mov	r22, r28
     3fc:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     3fe:	76 2f       	mov	r23, r22
     400:	66 27       	eor	r22, r22
	value |= lowbyte;
     402:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	f8 16       	cp	r15, r24
     408:	49 f1       	breq	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     40a:	8f 15       	cp	r24, r15
     40c:	30 f0       	brcs	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	ff 20       	and	r15, r15
     410:	d9 f1       	breq	.+118    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	f8 16       	cp	r15, r24
     416:	69 f1       	breq	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     418:	42 c0       	rjmp	.+132    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	f8 16       	cp	r15, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	42 c0       	rjmp	.+132    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	f8 16       	cp	r15, r24
     426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	f8 12       	cpse	r15, r24
     42c:	38 c0       	rjmp	.+112    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     42e:	0b c0       	rjmp	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		case PGA0256:
			scale = SCA0256;
     430:	0f 2e       	mov	r0, r31
     432:	f4 e7       	ldi	r31, 0x74	; 116
     434:	cf 2e       	mov	r12, r31
     436:	f3 e1       	ldi	r31, 0x13	; 19
     438:	df 2e       	mov	r13, r31
     43a:	f3 e0       	ldi	r31, 0x03	; 3
     43c:	ef 2e       	mov	r14, r31
     43e:	f7 e3       	ldi	r31, 0x37	; 55
     440:	ff 2e       	mov	r15, r31
     442:	f0 2d       	mov	r31, r0
     444:	3a c0       	rjmp	.+116    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     446:	0f 2e       	mov	r0, r31
     448:	f4 e7       	ldi	r31, 0x74	; 116
     44a:	cf 2e       	mov	r12, r31
     44c:	f3 e1       	ldi	r31, 0x13	; 19
     44e:	df 2e       	mov	r13, r31
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	ef 2e       	mov	r14, r31
     454:	f8 e3       	ldi	r31, 0x38	; 56
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
			break;
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA2048:
			scale = SCA2048;
     45c:	0f 2e       	mov	r0, r31
     45e:	f2 e1       	ldi	r31, 0x12	; 18
     460:	cf 2e       	mov	r12, r31
     462:	f3 e1       	ldi	r31, 0x13	; 19
     464:	df 2e       	mov	r13, r31
     466:	f3 e8       	ldi	r31, 0x83	; 131
     468:	ef 2e       	mov	r14, r31
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
			break;
     470:	24 c0       	rjmp	.+72     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA4096:
			scale = SCA4096;
     472:	0f 2e       	mov	r0, r31
     474:	f4 e7       	ldi	r31, 0x74	; 116
     476:	cf 2e       	mov	r12, r31
     478:	f3 e1       	ldi	r31, 0x13	; 19
     47a:	df 2e       	mov	r13, r31
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	ef 2e       	mov	r14, r31
     480:	f9 e3       	ldi	r31, 0x39	; 57
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
			break;
     486:	19 c0       	rjmp	.+50     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA6144:
			scale = SCA6144;
     488:	0f 2e       	mov	r0, r31
     48a:	fe e2       	ldi	r31, 0x2E	; 46
     48c:	cf 2e       	mov	r12, r31
     48e:	fd e9       	ldi	r31, 0x9D	; 157
     490:	df 2e       	mov	r13, r31
     492:	f4 e4       	ldi	r31, 0x44	; 68
     494:	ef 2e       	mov	r14, r31
     496:	f9 e3       	ldi	r31, 0x39	; 57
     498:	ff 2e       	mov	r15, r31
     49a:	f0 2d       	mov	r31, r0
			break;
     49c:	0e c0       	rjmp	.+28     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		default:
			scale = 0.0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
			break;
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f1 e7       	ldi	r31, 0x71	; 113
     4aa:	cf 2e       	mov	r12, r31
     4ac:	f3 e1       	ldi	r31, 0x13	; 19
     4ae:	df 2e       	mov	r13, r31
     4b0:	f3 e8       	ldi	r31, 0x83	; 131
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f7 e3       	ldi	r31, 0x37	; 55
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
	return(voltage);
     4d2:	56 2f       	mov	r21, r22
     4d4:	47 2f       	mov	r20, r23
     4d6:	38 2f       	mov	r19, r24
     4d8:	29 2f       	mov	r18, r25

}
     4da:	65 2f       	mov	r22, r21
     4dc:	74 2f       	mov	r23, r20
     4de:	83 2f       	mov	r24, r19
     4e0:	92 2f       	mov	r25, r18
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     4f4:	e0 e2       	ldi	r30, 0x20	; 32
     4f6:	f4 e0       	ldi	r31, 0x04	; 4
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     4fc:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     4fe:	86 83       	std	Z+6, r24	; 0x06
     500:	08 95       	ret

00000502 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	c5 59       	subi	r28, 0x95	; 149
     510:	d1 09       	sbc	r29, r1
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     516:	2b e0       	ldi	r18, 0x0B	; 11
     518:	e6 ed       	ldi	r30, 0xD6	; 214
     51a:	f5 e7       	ldi	r31, 0x75	; 117
     51c:	de 01       	movw	r26, r28
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	2a 95       	dec	r18
     526:	e1 f7       	brne	.-8      	; 0x520 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     528:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     52c:	22 ff       	sbrs	r18, 2
     52e:	03 c0       	rjmp	.+6      	; 0x536 <echo_cmd+0x34>
     530:	22 e0       	ldi	r18, 0x02	; 2
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <echo_cmd+0x38>
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	3f 93       	push	r19
     540:	2f 93       	push	r18
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8e 01       	movw	r16, r28
     54c:	04 5f       	subi	r16, 0xF4	; 244
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
	checksum_NMEA(strbuf);
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     55e:	f8 01       	movw	r30, r16
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <echo_cmd+0x5e>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	af 01       	movw	r20, r30
     56a:	40 1b       	sub	r20, r16
     56c:	51 0b       	sbc	r21, r17
     56e:	b8 01       	movw	r22, r16
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>

}
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	cb 56       	subi	r28, 0x6B	; 107
     57c:	df 4f       	sbci	r29, 0xFF	; 255
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	de bf       	out	0x3e, r29	; 62
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     58c:	9f e9       	ldi	r25, 0x9F	; 159
     58e:	98 0f       	add	r25, r24
     590:	9a 31       	cpi	r25, 0x1A	; 26
     592:	28 f0       	brcs	.+10     	; 0x59e <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     594:	81 54       	subi	r24, 0x41	; 65
     596:	8a 31       	cpi	r24, 0x1A	; 26
     598:	20 f4       	brcc	.+8      	; 0x5a2 <isaletter+0x16>
		return(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0

}
     5a4:	08 95       	ret

000005a6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5b2:	e6 2e       	mov	r14, r22
     5b4:	f1 2c       	mov	r15, r1
     5b6:	84 e3       	ldi	r24, 0x34	; 52
     5b8:	8e 9d       	mul	r24, r14
     5ba:	f0 01       	movw	r30, r0
     5bc:	8f 9d       	mul	r24, r15
     5be:	f0 0d       	add	r31, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	ed 5f       	subi	r30, 0xFD	; 253
     5c4:	f7 4d       	sbci	r31, 0xD7	; 215
     5c6:	8f e3       	ldi	r24, 0x3F	; 63
     5c8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5ca:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5cc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5ce:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <parse_cmd+0x34>
		if (*ptr == '\0') {
     5d2:	11 23       	and	r17, r17
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <parse_cmd+0x32>
     5d6:	75 c0       	rjmp	.+234    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5d8:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     5da:	18 81       	ld	r17, Y
     5dc:	81 2f       	mov	r24, r17
     5de:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     5e2:	88 23       	and	r24, r24
     5e4:	b1 f3       	breq	.-20     	; 0x5d2 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	84 e3       	ldi	r24, 0x34	; 52
     5ea:	8e 9d       	mul	r24, r14
     5ec:	f0 01       	movw	r30, r0
     5ee:	8f 9d       	mul	r24, r15
     5f0:	f0 0d       	add	r31, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	ed 5f       	subi	r30, 0xFD	; 253
     5f6:	f7 4d       	sbci	r31, 0xD7	; 215
     5f8:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5fc:	11 23       	and	r17, r17
     5fe:	09 f4       	brne	.+2      	; 0x602 <parse_cmd+0x5c>
     600:	60 c0       	rjmp	.+192    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     602:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     604:	18 81       	ld	r17, Y
     606:	81 2f       	mov	r24, r17
     608:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     60c:	88 23       	and	r24, r24
     60e:	b1 f3       	breq	.-20     	; 0x5fc <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     610:	21 96       	adiw	r28, 0x01	; 1
     612:	84 e3       	ldi	r24, 0x34	; 52
     614:	8e 9d       	mul	r24, r14
     616:	f0 01       	movw	r30, r0
     618:	8f 9d       	mul	r24, r15
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	ed 5f       	subi	r30, 0xFD	; 253
     620:	f7 4d       	sbci	r31, 0xD7	; 215
     622:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	2a c0       	rjmp	.+84     	; 0x67c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     628:	98 81       	ld	r25, Y
     62a:	91 11       	cpse	r25, r1
     62c:	0c c0       	rjmp	.+24     	; 0x646 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     62e:	94 e3       	ldi	r25, 0x34	; 52
     630:	9e 9d       	mul	r25, r14
     632:	f0 01       	movw	r30, r0
     634:	9f 9d       	mul	r25, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	ed 5f       	subi	r30, 0xFD	; 253
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	e8 0f       	add	r30, r24
     640:	f1 1d       	adc	r31, r1
     642:	12 82       	std	Z+2, r1	; 0x02
			return;
     644:	3e c0       	rjmp	.+124    	; 0x6c2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     646:	9b 33       	cpi	r25, 0x3B	; 59
     648:	61 f4       	brne	.+24     	; 0x662 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     64a:	94 e3       	ldi	r25, 0x34	; 52
     64c:	9e 9d       	mul	r25, r14
     64e:	f0 01       	movw	r30, r0
     650:	9f 9d       	mul	r25, r15
     652:	f0 0d       	add	r31, r0
     654:	11 24       	eor	r1, r1
     656:	ed 5f       	subi	r30, 0xFD	; 253
     658:	f7 4d       	sbci	r31, 0xD7	; 215
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	12 82       	std	Z+2, r1	; 0x02
			break;
     660:	0f c0       	rjmp	.+30     	; 0x680 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	24 e3       	ldi	r18, 0x34	; 52
     666:	2e 9d       	mul	r18, r14
     668:	f0 01       	movw	r30, r0
     66a:	2f 9d       	mul	r18, r15
     66c:	f0 0d       	add	r31, r0
     66e:	11 24       	eor	r1, r1
     670:	ed 5f       	subi	r30, 0xFD	; 253
     672:	f7 4d       	sbci	r31, 0xD7	; 215
     674:	e8 0f       	add	r30, r24
     676:	f1 1d       	adc	r31, r1
     678:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	89 32       	cpi	r24, 0x29	; 41
     67e:	a0 f2       	brcs	.-88     	; 0x628 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     680:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	1c c0       	rjmp	.+56     	; 0x6be <parse_cmd+0x118>
		if (*ptr == '\0') {
     686:	98 81       	ld	r25, Y
     688:	91 11       	cpse	r25, r1
     68a:	0c c0       	rjmp	.+24     	; 0x6a4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	ed 5f       	subi	r30, 0xFD	; 253
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	ed 5f       	subi	r30, 0xFD	; 253
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 30       	cpi	r24, 0x09	; 9
     6c0:	10 f3       	brcs	.-60     	; 0x686 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	6d 97       	sbiw	r28, 0x1d	; 29
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     6e0:	2e e3       	ldi	r18, 0x3E	; 62
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	29 83       	std	Y+1, r18	; 0x01
     6e6:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     6e8:	21 e2       	ldi	r18, 0x21	; 33
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	2b 83       	std	Y+3, r18	; 0x03
     6ee:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <send_prompt+0x28>
     6f4:	3f c0       	rjmp	.+126    	; 0x774 <send_prompt+0xa6>
     6f6:	18 f0       	brcs	.+6      	; 0x6fe <send_prompt+0x30>
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	b9 f0       	breq	.+46     	; 0x72a <send_prompt+0x5c>
     6fc:	51 c0       	rjmp	.+162    	; 0x7a0 <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6fe:	8e 01       	movw	r16, r28
     700:	0b 5f       	subi	r16, 0xFB	; 251
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     710:	f8 01       	movw	r30, r16
     712:	01 90       	ld	r0, Z+
     714:	00 20       	and	r0, r0
     716:	e9 f7       	brne	.-6      	; 0x712 <send_prompt+0x44>
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	af 01       	movw	r20, r30
     71c:	40 1b       	sub	r20, r16
     71e:	51 0b       	sbc	r21, r17
     720:	b8 01       	movw	r22, r16
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
     728:	50 c0       	rjmp	.+160    	; 0x7ca <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     72a:	8e 01       	movw	r16, r28
     72c:	0b 5f       	subi	r16, 0xFB	; 251
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	c8 01       	movw	r24, r16
     732:	0e 94 b7 09 	call	0x136e	; 0x136e <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     736:	f8 01       	movw	r30, r16
     738:	01 90       	ld	r0, Z+
     73a:	00 20       	and	r0, r0
     73c:	e9 f7       	brne	.-6      	; 0x738 <send_prompt+0x6a>
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	af 01       	movw	r20, r30
     742:	40 1b       	sub	r20, r16
     744:	51 0b       	sbc	r21, r17
     746:	b8 01       	movw	r22, r16
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			strcpy(prompt_str, str0);
     74e:	be 01       	movw	r22, r28
     750:	6f 5f       	subi	r22, 0xFF	; 255
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	c8 01       	movw	r24, r16
     756:	0e 94 d7 19 	call	0x33ae	; 0x33ae <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     75a:	f8 01       	movw	r30, r16
     75c:	01 90       	ld	r0, Z+
     75e:	00 20       	and	r0, r0
     760:	e9 f7       	brne	.-6      	; 0x75c <send_prompt+0x8e>
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	af 01       	movw	r20, r30
     766:	40 1b       	sub	r20, r16
     768:	51 0b       	sbc	r21, r17
     76a:	b8 01       	movw	r22, r16
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
     772:	2b c0       	rjmp	.+86     	; 0x7ca <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     774:	8e 01       	movw	r16, r28
     776:	0b 5f       	subi	r16, 0xFB	; 251
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	be 01       	movw	r22, r28
     77c:	6d 5f       	subi	r22, 0xFD	; 253
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	c8 01       	movw	r24, r16
     782:	0e 94 d7 19 	call	0x33ae	; 0x33ae <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     786:	f8 01       	movw	r30, r16
     788:	01 90       	ld	r0, Z+
     78a:	00 20       	and	r0, r0
     78c:	e9 f7       	brne	.-6      	; 0x788 <send_prompt+0xba>
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	af 01       	movw	r20, r30
     792:	40 1b       	sub	r20, r16
     794:	51 0b       	sbc	r21, r17
     796:	b8 01       	movw	r22, r16
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     7a0:	8e 01       	movw	r16, r28
     7a2:	0b 5f       	subi	r16, 0xFB	; 251
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	be 01       	movw	r22, r28
     7a8:	6d 5f       	subi	r22, 0xFD	; 253
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	c8 01       	movw	r24, r16
     7ae:	0e 94 d7 19 	call	0x33ae	; 0x33ae <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7b2:	f8 01       	movw	r30, r16
     7b4:	01 90       	ld	r0, Z+
     7b6:	00 20       	and	r0, r0
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <send_prompt+0xe6>
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	af 01       	movw	r20, r30
     7be:	40 1b       	sub	r20, r16
     7c0:	51 0b       	sbc	r21, r17
     7c2:	b8 01       	movw	r22, r16
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;

	}

}
     7ca:	6d 96       	adiw	r28, 0x1d	; 29
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	c0 58       	subi	r28, 0x80	; 128
     7e4:	d1 09       	sbc	r29, r1
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

on_BEEPER;
     7ea:	e0 e2       	ldi	r30, 0x20	; 32
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f2:	a2 ec       	ldi	r26, 0xC2	; 194
     7f4:	b2 ea       	ldi	r27, 0xA2	; 162
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <commands+0x1c>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <commands+0x22>
_delay_ms(50);
off_BEEPER;
     7fc:	86 83       	std	Z+6, r24	; 0x06

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	1c c0       	rjmp	.+56     	; 0x83a <commands+0x60>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     802:	80 91 15 2b 	lds	r24, 0x2B15	; 0x802b15 <recv0_buf+0x81>
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	ec 56       	subi	r30, 0x6C	; 108
     80c:	f5 4d       	sbci	r31, 0xD5	; 213
     80e:	30 81       	ld	r19, Z
     810:	e1 e0       	ldi	r30, 0x01	; 1
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	e2 0f       	add	r30, r18
     81a:	f1 1d       	adc	r31, r1
     81c:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	8f 77       	andi	r24, 0x7F	; 127
     822:	90 78       	andi	r25, 0x80	; 128
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <commands+0x56>
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	9f 6f       	ori	r25, 0xFF	; 255
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
     834:	33 23       	and	r19, r19
     836:	19 f0       	breq	.+6      	; 0x83e <commands+0x64>
on_BEEPER;
_delay_ms(50);
off_BEEPER;

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     838:	2f 5f       	subi	r18, 0xFF	; 255
     83a:	22 23       	and	r18, r18
     83c:	14 f7       	brge	.-60     	; 0x802 <commands+0x28>
			break;
		}
	}

	// Check if rebooted
	if (rebootnack) {
     83e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     842:	88 23       	and	r24, r24
     844:	89 f0       	breq	.+34     	; 0x868 <commands+0x8e>
		if (cmdline[0] != '!') {
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	81 32       	cpi	r24, 0x21	; 33
     84a:	21 f0       	breq	.+8      	; 0x854 <commands+0x7a>
			send_prompt(EXCLAIMPROMPT);		
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			return;
     852:	66 c0       	rjmp	.+204    	; 0x920 <commands+0x146>
		} else {
			init_RTC(511);		// 1-sec RTC clock
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 01 10 	call	0x2002	; 0x2002 <init_RTC>
			send_prompt(GREATERPROMPT);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			rebootnack = 0;
     862:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     866:	5c c0       	rjmp	.+184    	; 0x920 <commands+0x146>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	0e 94 81 02 	call	0x502	; 0x502 <echo_cmd>

//writestr_OLED(0, cmdline, 1);
writestr_OLED(1, cmdline, 1);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <writestr_OLED>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	81 11       	cpse	r24, r1
     882:	03 c0       	rjmp	.+6      	; 0x88a <commands+0xb0>
		send_prompt(GREATERPROMPT);
     884:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
		return;
     888:	4b c0       	rjmp	.+150    	; 0x920 <commands+0x146>
	}

	parse_cmd(cmdline, cstack);
     88a:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <parse_cmd>
	verb = pcmd[cstack].cverb;
     896:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     89a:	b4 e3       	ldi	r27, 0x34	; 52
     89c:	8b 9f       	mul	r24, r27
     89e:	f0 01       	movw	r30, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	ed 5f       	subi	r30, 0xFD	; 253
     8a4:	f7 4d       	sbci	r31, 0xD7	; 215
     8a6:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     8a8:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     8aa:	9f 36       	cpi	r25, 0x6F	; 111
     8ac:	81 f0       	breq	.+32     	; 0x8ce <commands+0xf4>
     8ae:	28 f4       	brcc	.+10     	; 0x8ba <commands+0xe0>
     8b0:	92 35       	cpi	r25, 0x52	; 82
     8b2:	d1 f0       	breq	.+52     	; 0x8e8 <commands+0x10e>
     8b4:	93 36       	cpi	r25, 0x63	; 99
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <commands+0xea>
     8b8:	25 c0       	rjmp	.+74     	; 0x904 <commands+0x12a>
     8ba:	92 37       	cpi	r25, 0x72	; 114
     8bc:	69 f0       	breq	.+26     	; 0x8d8 <commands+0xfe>
     8be:	93 37       	cpi	r25, 0x73	; 115
     8c0:	79 f0       	breq	.+30     	; 0x8e0 <commands+0x106>
     8c2:	20 c0       	rjmp	.+64     	; 0x904 <commands+0x12a>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8c4:	82 2f       	mov	r24, r18
     8c6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <close_PNEU>
     8ca:	28 2f       	mov	r18, r24
			break;
     8cc:	1c c0       	rjmp	.+56     	; 0x906 <commands+0x12c>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8ce:	82 2f       	mov	r24, r18
     8d0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <open_PNEU>
     8d4:	28 2f       	mov	r18, r24
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <commands+0x12c>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8d8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <report>
     8dc:	28 2f       	mov	r18, r24
			break;
     8de:	13 c0       	rjmp	.+38     	; 0x906 <commands+0x12c>

		case 's':				// Set
			prompt_flag = set(cstack);
     8e0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <set>
     8e4:	28 2f       	mov	r18, r24
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <commands+0x12c>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
     8ee:	2a e6       	ldi	r18, 0x6A	; 106
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <commands+0x11a>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <commands+0x124>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     8fe:	0e 94 ff 12 	call	0x25fe	; 0x25fe <reboot>
			return;
     902:	0e c0       	rjmp	.+28     	; 0x920 <commands+0x146>

		default:
			prompt_flag = ERRORPROMPT;
     904:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     906:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	6a e0       	ldi	r22, 0x0A	; 10
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 8a 18 	call	0x3114	; 0x3114 <__divmodhi4>
     916:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     91a:	82 2f       	mov	r24, r18
     91c:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>

}
     920:	c0 58       	subi	r28, 0x80	; 128
     922:	df 4f       	sbci	r29, 0xFF	; 255
     924:	cd bf       	out	0x3d, r28	; 61
     926:	de bf       	out	0x3e, r29	; 62
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     92e:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     930:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     932:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     934:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     936:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     938:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     93a:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     93c:	1f 92       	push	r1
     93e:	7f 93       	push	r23
     940:	1f 92       	push	r1
     942:	6f 93       	push	r22
     944:	1f 92       	push	r1
     946:	5f 93       	push	r21
     948:	1f 92       	push	r1
     94a:	4f 93       	push	r20
     94c:	1f 92       	push	r1
     94e:	3f 93       	push	r19
     950:	1f 92       	push	r1
     952:	2f 93       	push	r18
     954:	21 ee       	ldi	r18, 0xE1	; 225
     956:	35 e7       	ldi	r19, 0x75	; 117
     958:	3f 93       	push	r19
     95a:	2f 93       	push	r18
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
		year, month, date, hours, minutes, seconds);

}
     964:	8d b7       	in	r24, 0x3d	; 61
     966:	9e b7       	in	r25, 0x3e	; 62
     968:	40 96       	adiw	r24, 0x10	; 16
     96a:	8d bf       	out	0x3d, r24	; 61
     96c:	9e bf       	out	0x3e, r25	; 62
     96e:	08 95       	ret

00000970 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     970:	dc 01       	movw	r26, r24
     972:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     974:	81 89       	ldd	r24, Z+17	; 0x11
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	c0 97       	sbiw	r24, 0x30	; 48
     97a:	82 95       	swap	r24
     97c:	92 95       	swap	r25
     97e:	90 7f       	andi	r25, 0xF0	; 240
     980:	98 27       	eor	r25, r24
     982:	80 7f       	andi	r24, 0xF0	; 240
     984:	98 27       	eor	r25, r24
     986:	92 89       	ldd	r25, Z+18	; 0x12
     988:	90 53       	subi	r25, 0x30	; 48
     98a:	89 2b       	or	r24, r25
     98c:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     98e:	86 85       	ldd	r24, Z+14	; 0x0e
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	c0 97       	sbiw	r24, 0x30	; 48
     994:	82 95       	swap	r24
     996:	92 95       	swap	r25
     998:	90 7f       	andi	r25, 0xF0	; 240
     99a:	98 27       	eor	r25, r24
     99c:	80 7f       	andi	r24, 0xF0	; 240
     99e:	98 27       	eor	r25, r24
     9a0:	97 85       	ldd	r25, Z+15	; 0x0f
     9a2:	90 53       	subi	r25, 0x30	; 48
     9a4:	89 2b       	or	r24, r25
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	8c 93       	st	X, r24
     9aa:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9ac:	83 85       	ldd	r24, Z+11	; 0x0b
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	c0 97       	sbiw	r24, 0x30	; 48
     9b2:	82 95       	swap	r24
     9b4:	92 95       	swap	r25
     9b6:	90 7f       	andi	r25, 0xF0	; 240
     9b8:	98 27       	eor	r25, r24
     9ba:	80 7f       	andi	r24, 0xF0	; 240
     9bc:	98 27       	eor	r25, r24
     9be:	94 85       	ldd	r25, Z+12	; 0x0c
     9c0:	90 53       	subi	r25, 0x30	; 48
     9c2:	89 2b       	or	r24, r25
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	8c 93       	st	X, r24
     9c8:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	8c 93       	st	X, r24
     9d0:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9d2:	80 85       	ldd	r24, Z+8	; 0x08
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	c0 97       	sbiw	r24, 0x30	; 48
     9d8:	82 95       	swap	r24
     9da:	92 95       	swap	r25
     9dc:	90 7f       	andi	r25, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	91 85       	ldd	r25, Z+9	; 0x09
     9e6:	90 53       	subi	r25, 0x30	; 48
     9e8:	89 2b       	or	r24, r25
     9ea:	14 96       	adiw	r26, 0x04	; 4
     9ec:	8c 93       	st	X, r24
     9ee:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9f0:	25 81       	ldd	r18, Z+5	; 0x05
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	20 53       	subi	r18, 0x30	; 48
     9f6:	31 09       	sbc	r19, r1
     9f8:	22 95       	swap	r18
     9fa:	32 95       	swap	r19
     9fc:	30 7f       	andi	r19, 0xF0	; 240
     9fe:	32 27       	eor	r19, r18
     a00:	20 7f       	andi	r18, 0xF0	; 240
     a02:	32 27       	eor	r19, r18
     a04:	86 81       	ldd	r24, Z+6	; 0x06
     a06:	80 53       	subi	r24, 0x30	; 48
     a08:	28 2b       	or	r18, r24
     a0a:	15 96       	adiw	r26, 0x05	; 5
     a0c:	2c 93       	st	X, r18
     a0e:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a10:	22 81       	ldd	r18, Z+2	; 0x02
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	20 53       	subi	r18, 0x30	; 48
     a16:	31 09       	sbc	r19, r1
     a18:	22 95       	swap	r18
     a1a:	32 95       	swap	r19
     a1c:	30 7f       	andi	r19, 0xF0	; 240
     a1e:	32 27       	eor	r19, r18
     a20:	20 7f       	andi	r18, 0xF0	; 240
     a22:	32 27       	eor	r19, r18
     a24:	83 81       	ldd	r24, Z+3	; 0x03
     a26:	80 53       	subi	r24, 0x30	; 48
     a28:	28 2b       	or	r18, r24
     a2a:	16 96       	adiw	r26, 0x06	; 6
     a2c:	2c 93       	st	X, r18
     a2e:	08 95       	ret

00000a30 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     a42:	c8 2f       	mov	r28, r24
     a44:	88 23       	and	r24, r24
     a46:	21 f0       	breq	.+8      	; 0xa50 <read_DS3231+0x20>
		stop_TWI();
     a48:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     a4c:	8c 2f       	mov	r24, r28
     a4e:	28 c0       	rjmp	.+80     	; 0xaa0 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     a56:	c8 2f       	mov	r28, r24
     a58:	88 23       	and	r24, r24
     a5a:	21 f0       	breq	.+8      	; 0xa64 <read_DS3231+0x34>
		stop_TWI();
     a5c:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     a60:	8c 2f       	mov	r24, r28
     a62:	1e c0       	rjmp	.+60     	; 0xaa0 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	80 ed       	ldi	r24, 0xD0	; 208
     a68:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     a6c:	c8 2f       	mov	r28, r24
     a6e:	88 23       	and	r24, r24
     a70:	69 f0       	breq	.+26     	; 0xa8c <read_DS3231+0x5c>
		stop_TWI();
     a72:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     a76:	8c 2f       	mov	r24, r28
     a78:	13 c0       	rjmp	.+38     	; 0xaa0 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a7a:	87 01       	movw	r16, r14
     a7c:	0c 0f       	add	r16, r28
     a7e:	11 1d       	adc	r17, r1
     a80:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_TWI>
     a84:	f8 01       	movw	r30, r16
     a86:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a88:	cf 5f       	subi	r28, 0xFF	; 255
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <read_DS3231+0x5e>
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
     a8e:	c6 30       	cpi	r28, 0x06	; 6
     a90:	a0 f3       	brcs	.-24     	; 0xa7a <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a92:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
     a96:	f7 01       	movw	r30, r14
     a98:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a9a:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	return(0);
     a9e:	80 e0       	ldi	r24, 0x00	; 0

}
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	27 97       	sbiw	r28, 0x07	; 7
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     ac0:	be 01       	movw	r22, r28
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	80 ed       	ldi	r24, 0xD0	; 208
     ac8:	0e 94 18 05 	call	0xa30	; 0xa30 <read_DS3231>
     acc:	88 23       	and	r24, r24
     ace:	49 f0       	breq	.+18     	; 0xae2 <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     ad0:	92 e1       	ldi	r25, 0x12	; 18
     ad2:	e1 e0       	ldi	r30, 0x01	; 1
     ad4:	f6 e7       	ldi	r31, 0x76	; 118
     ad6:	d8 01       	movw	r26, r16
     ad8:	01 90       	ld	r0, Z+
     ada:	0d 92       	st	X+, r0
     adc:	9a 95       	dec	r25
     ade:	e1 f7       	brne	.-8      	; 0xad8 <get_time+0x2c>
		return(retval);
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	c8 01       	movw	r24, r16
     aea:	0e 94 97 04 	call	0x92e	; 0x92e <convert_ds2iso>
	return(0);
     aee:	80 e0       	ldi	r24, 0x00	; 0

}
     af0:	27 96       	adiw	r28, 0x07	; 7
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     b14:	c8 2f       	mov	r28, r24
     b16:	88 23       	and	r24, r24
     b18:	21 f0       	breq	.+8      	; 0xb22 <write_DS3231+0x22>
		stop_TWI();
     b1a:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     b1e:	8c 2f       	mov	r24, r28
     b20:	22 c0       	rjmp	.+68     	; 0xb66 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     b28:	c8 2f       	mov	r28, r24
     b2a:	88 23       	and	r24, r24
     b2c:	b1 f0       	breq	.+44     	; 0xb5a <write_DS3231+0x5a>
		stop_TWI();
     b2e:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     b32:	8c 2f       	mov	r24, r28
     b34:	18 c0       	rjmp	.+48     	; 0xb66 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b36:	78 01       	movw	r14, r16
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	e8 1a       	sub	r14, r24
     b3c:	f8 0a       	sbc	r15, r24
     b3e:	f8 01       	movw	r30, r16
     b40:	80 81       	ld	r24, Z
     b42:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     b46:	c8 2f       	mov	r28, r24
     b48:	88 23       	and	r24, r24
     b4a:	21 f0       	breq	.+8      	; 0xb54 <write_DS3231+0x54>
			stop_TWI();
     b4c:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
			return(retval);
     b50:	8c 2f       	mov	r24, r28
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b54:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b56:	87 01       	movw	r16, r14
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <write_DS3231+0x5c>
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b5c:	d7 30       	cpi	r29, 0x07	; 7
     b5e:	58 f3       	brcs	.-42     	; 0xb36 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b60:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	return(0);
     b64:	80 e0       	ldi	r24, 0x00	; 0

}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	08 95       	ret

00000b74 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	27 97       	sbiw	r28, 0x07	; 7
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b82:	bc 01       	movw	r22, r24
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	0e 94 b8 04 	call	0x970	; 0x970 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b8c:	be 01       	movw	r22, r28
     b8e:	6f 5f       	subi	r22, 0xFF	; 255
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	80 ed       	ldi	r24, 0xD0	; 208
     b94:	0e 94 80 05 	call	0xb00	; 0xb00 <write_DS3231>
		return(retval);
	}
	return(0);

}
     b98:	27 96       	adiw	r28, 0x07	; 7
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ba4:	45 e1       	ldi	r20, 0x15	; 21
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	6b e0       	ldi	r22, 0x0B	; 11
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 a5 1a 	call	0x354a	; 0x354a <eeprom_read_block>
     bb0:	08 95       	ret

00000bb2 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bb2:	4b e0       	ldi	r20, 0x0B	; 11
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 a5 1a 	call	0x354a	; 0x354a <eeprom_read_block>
     bbe:	08 95       	ret

00000bc0 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	65 97       	sbiw	r28, 0x15	; 21
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bd6:	45 e1       	ldi	r20, 0x15	; 21
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6b e0       	ldi	r22, 0x0B	; 11
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <eeprom_update_block>

}
     be6:	65 96       	adiw	r28, 0x15	; 21
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <update_VERSION>:

void update_VERSION(void)
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	2b 97       	sbiw	r28, 0x0b	; 11
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c00:	8b e0       	ldi	r24, 0x0B	; 11
     c02:	e3 e1       	ldi	r30, 0x13	; 19
     c04:	f6 e7       	ldi	r31, 0x76	; 118
     c06:	de 01       	movw	r26, r28
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	01 90       	ld	r0, Z+
     c0c:	0d 92       	st	X+, r0
     c0e:	8a 95       	dec	r24
     c10:	e1 f7       	brne	.-8      	; 0xc0a <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c12:	4b e0       	ldi	r20, 0x0B	; 11
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <eeprom_update_block>

}
     c22:	2b 96       	adiw	r28, 0x0b	; 11
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c2e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <update_BOOTTIME>
	update_VERSION();
     c32:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <update_VERSION>
     c36:	08 95       	ret

00000c38 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	c8 2f       	mov	r28, r24
     c46:	e6 2e       	mov	r14, r22
     c48:	f7 2e       	mov	r15, r23
     c4a:	8a 01       	movw	r16, r20
     c4c:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     c54:	81 11       	cpse	r24, r1
     c56:	2b c0       	rjmp	.+86     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c58:	8f 2d       	mov	r24, r15
     c5a:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     c5e:	81 11       	cpse	r24, r1
     c60:	26 c0       	rjmp	.+76     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c62:	8e 2d       	mov	r24, r14
     c64:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     c68:	81 11       	cpse	r24, r1
     c6a:	21 c0       	rjmp	.+66     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	8c 2f       	mov	r24, r28
     c70:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     c74:	81 11       	cpse	r24, r1
     c76:	1b c0       	rjmp	.+54     	; 0xcae <read_FRAM+0x76>
     c78:	c0 e0       	ldi	r28, 0x00	; 0
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c7c:	78 01       	movw	r14, r16
     c7e:	ec 0e       	add	r14, r28
     c80:	f1 1c       	adc	r15, r1
     c82:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_TWI>
     c86:	f7 01       	movw	r30, r14
     c88:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
     c8c:	2c 2f       	mov	r18, r28
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8d 2f       	mov	r24, r29
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	28 17       	cp	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	84 f3       	brlt	.-32     	; 0xc7c <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c9c:	ec 01       	movw	r28, r24
     c9e:	c0 0f       	add	r28, r16
     ca0:	d1 1f       	adc	r29, r17
     ca2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
     ca6:	88 83       	st	Y, r24

	stop_TWI();
     ca8:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	return(0);
     cac:	80 e0       	ldi	r24, 0x00	; 0

}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	08 95       	ret

00000cbc <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	f6 2e       	mov	r15, r22
     cca:	17 2f       	mov	r17, r23
     ccc:	ea 01       	movw	r28, r20
     cce:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     cd6:	81 11       	cpse	r24, r1
     cd8:	1c c0       	rjmp	.+56     	; 0xd12 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     cda:	81 2f       	mov	r24, r17
     cdc:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     ce0:	81 11       	cpse	r24, r1
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     ce4:	8f 2d       	mov	r24, r15
     ce6:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     cea:	81 11       	cpse	r24, r1
     cec:	12 c0       	rjmp	.+36     	; 0xd12 <write_FRAM+0x56>
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cf2:	7e 01       	movw	r14, r28
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	e8 1a       	sub	r14, r24
     cf8:	f8 0a       	sbc	r15, r24
     cfa:	88 81       	ld	r24, Y
     cfc:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     d00:	81 11       	cpse	r24, r1
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d04:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d06:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d08:	10 17       	cp	r17, r16
     d0a:	98 f3       	brcs	.-26     	; 0xcf2 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d0c:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	return(0);
     d10:	80 e0       	ldi	r24, 0x00	; 0

}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	08 95       	ret

00000d20 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	59 f0       	breq	.+22     	; 0xd4a <get_humidity+0x2a>
     d34:	18 f0       	brcs	.+6      	; 0xd3c <get_humidity+0x1c>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	79 f0       	breq	.+30     	; 0xd58 <get_humidity+0x38>
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
     d42:	4b 01       	movw	r8, r22
     d44:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d46:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d48:	17 c0       	rjmp	.+46     	; 0xd78 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
     d50:	4b 01       	movw	r8, r22
     d52:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d54:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d56:	10 c0       	rjmp	.+32     	; 0xd78 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
     d5e:	4b 01       	movw	r8, r22
     d60:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d62:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d66:	0f 2e       	mov	r0, r31
     d68:	81 2c       	mov	r8, r1
     d6a:	91 2c       	mov	r9, r1
     d6c:	f0 ea       	ldi	r31, 0xA0	; 160
     d6e:	af 2e       	mov	r10, r31
     d70:	f1 e4       	ldi	r31, 0x41	; 65
     d72:	bf 2e       	mov	r11, r31
     d74:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d76:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d78:	20 e8       	ldi	r18, 0x80	; 128
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	80 e9       	ldi	r24, 0x90	; 144
     d7e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 ea       	ldi	r20, 0xA0	; 160
     d88:	50 e4       	ldi	r21, 0x40	; 64
     d8a:	0e 94 77 13 	call	0x26ee	; 0x26ee <__divsf3>
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	37 ed       	ldi	r19, 0xD7	; 215
     d92:	43 e2       	ldi	r20, 0x23	; 35
     d94:	5e e3       	ldi	r21, 0x3E	; 62
     d96:	0e 94 05 13 	call	0x260a	; 0x260a <__subsf3>
     d9a:	2f e5       	ldi	r18, 0x5F	; 95
     d9c:	39 e2       	ldi	r19, 0x29	; 41
     d9e:	4b ec       	ldi	r20, 0xCB	; 203
     da0:	5b e3       	ldi	r21, 0x3B	; 59
     da2:	0e 94 77 13 	call	0x26ee	; 0x26ee <__divsf3>
     da6:	6b 01       	movw	r12, r22
     da8:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     daa:	29 ec       	ldi	r18, 0xC9	; 201
     dac:	3e e8       	ldi	r19, 0x8E	; 142
     dae:	4d e0       	ldi	r20, 0x0D	; 13
     db0:	5b e3       	ldi	r21, 0x3B	; 59
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	62 e2       	ldi	r22, 0x22	; 34
     dc0:	7d ef       	ldi	r23, 0xFD	; 253
     dc2:	86 e8       	ldi	r24, 0x86	; 134
     dc4:	9f e3       	ldi	r25, 0x3F	; 63
     dc6:	0e 94 05 13 	call	0x260a	; 0x260a <__subsf3>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 77 13 	call	0x26ee	; 0x26ee <__divsf3>
	return(humidity);

}
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	08 95       	ret

00000de8 <initialize>:
#include "globals.h"

void initialize(void)
{

	init_PORTS();
     de8:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_SPECID();
     df2:	0e 94 a5 10 	call	0x214a	; 0x214a <init_SPECID>
	init_LED();
     df6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <init_LED>
	init_BEEPER();
     dfa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_BEEPER>
	init_RTC(64);	// Fast, for blinking the LED at startup
     dfe:	80 e4       	ldi	r24, 0x40	; 64
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 01 10 	call	0x2002	; 0x2002 <init_RTC>
	init_USART();
     e06:	0e 94 1f 11 	call	0x223e	; 0x223e <init_USART>
	init_TWI();
     e0a:	0e 94 bd 10 	call	0x217a	; 0x217a <init_TWI>
	init_MMA8451();
     e0e:	0e 94 3c 09 	call	0x1278	; 0x1278 <init_MMA8451>
	init_PNEU();
     e12:	0e 94 3b 0b 	call	0x1676	; 0x1676 <init_PNEU>
	init_OLED(0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 02 0a 	call	0x1404	; 0x1404 <init_OLED>
	init_OLED(1);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 02 0a 	call	0x1404	; 0x1404 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e22:	0e 94 17 06 	call	0xc2e	; 0xc2e <init_EEPROM>
     e26:	08 95       	ret

00000e28 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e4a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e4e:	86 ff       	sbrs	r24, 6
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e58:	0e 94 ff 12 	call	0x25fe	; 0x25fe <reboot>
	}

}
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	21 f0       	breq	.+8      	; 0xe92 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	79 f5       	brne	.+94     	; 0xeec <read_ionpump+0x6e>
		pins = AIN23;
     e8e:	40 e3       	ldi	r20, 0x30	; 48
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     e92:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     e94:	20 e8       	ldi	r18, 0x80	; 128
     e96:	62 e0       	ldi	r22, 0x02	; 2
     e98:	82 e9       	ldi	r24, 0x92	; 146
     e9a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24

	if (voltage < 0.5) {						// Useful range for the Modion pump
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__cmpsf2>
     eae:	88 23       	and	r24, r24
     eb0:	14 f1       	brlt	.+68     	; 0xef6 <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e4       	ldi	r21, 0x40	; 64
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	ec f0       	brlt	.+58     	; 0xf00 <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     ec6:	26 ed       	ldi	r18, 0xD6	; 214
     ec8:	36 e5       	ldi	r19, 0x56	; 86
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e4       	ldi	r21, 0x40	; 64
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     ed6:	2e e6       	ldi	r18, 0x6E	; 110
     ed8:	33 ea       	ldi	r19, 0xA3	; 163
     eda:	4b ed       	ldi	r20, 0xDB	; 219
     edc:	50 e4       	ldi	r21, 0x40	; 64
     ede:	0e 94 05 13 	call	0x260a	; 0x260a <__subsf3>
	return(vacuum);
     ee2:	56 2f       	mov	r21, r22
     ee4:	47 2f       	mov	r20, r23
     ee6:	38 2f       	mov	r19, r24
     ee8:	29 2f       	mov	r18, r25
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     eec:	5a e9       	ldi	r21, 0x9A	; 154
     eee:	49 ef       	ldi	r20, 0xF9	; 249
     ef0:	39 e7       	ldi	r19, 0x79	; 121
     ef2:	24 ec       	ldi	r18, 0xC4	; 196
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.5) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     ef6:	5a e9       	ldi	r21, 0x9A	; 154
     ef8:	49 ef       	ldi	r20, 0xF9	; 249
     efa:	39 e7       	ldi	r19, 0x79	; 121
     efc:	24 ec       	ldi	r18, 0xC4	; 196
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f00:	5a e9       	ldi	r21, 0x9A	; 154
     f02:	49 ef       	ldi	r20, 0xF9	; 249
     f04:	39 e7       	ldi	r19, 0x79	; 121
     f06:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
     f08:	65 2f       	mov	r22, r21
     f0a:	74 2f       	mov	r23, r20
     f0c:	83 2f       	mov	r24, r19
     f0e:	92 2f       	mov	r25, r18
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	08 95       	ret

00000f1a <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f1a:	e0 ea       	ldi	r30, 0xA0	; 160
     f1c:	f4 e0       	ldi	r31, 0x04	; 4
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f22:	81 83       	std	Z+1, r24	; 0x01
     f24:	08 95       	ret

00000f26 <main>:
ParsedCMD pcmd[CSTACKSIZE];	// Split the command line into its parts

int main(void)
{

	initialize();
     f26:	0e 94 f4 06 	call	0xde8	; 0xde8 <initialize>
	sei();
     f2a:	78 94       	sei

writestr_OLED(1,"hi1 there", 1);
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	6e e1       	ldi	r22, 0x1E	; 30
     f30:	76 e7       	ldi	r23, 0x76	; 118
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 c2 0a 	call	0x1584	; 0x1584 <writestr_OLED>
writestr_OLED(0,"hi0 there", 1);
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	68 e2       	ldi	r22, 0x28	; 40
     f3c:	76 e7       	ldi	r23, 0x76	; 118
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 c2 0a 	call	0x1584	; 0x1584 <writestr_OLED>

	for (;;) {
		if (recv0_buf.done) {
     f44:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv0_buf+0x84>
     f48:	88 23       	and	r24, r24
     f4a:	e1 f3       	breq	.-8      	; 0xf44 <main+0x1e>
			recv0_buf.done = NO;
     f4c:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv0_buf+0x84>
			commands();
     f50:	0e 94 ed 03 	call	0x7da	; 0x7da <commands>
     f54:	f7 cf       	rjmp	.-18     	; 0xf44 <main+0x1e>

00000f56 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg, uint8_t *val)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	c8 2f       	mov	r28, r24
     f60:	d6 2f       	mov	r29, r22
     f62:	8a 01       	movw	r16, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     f6a:	81 11       	cpse	r24, r1
     f6c:	12 c0       	rjmp	.+36     	; 0xf92 <read_MCP23008+0x3c>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
     f6e:	8d 2f       	mov	r24, r29
     f70:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     f74:	81 11       	cpse	r24, r1
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <read_MCP23008+0x3c>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	8c 2f       	mov	r24, r28
     f7c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     f80:	81 11       	cpse	r24, r1
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <read_MCP23008+0x3c>
		return(retval);
	}
	*val = readlast_TWI();
     f84:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
     f88:	f8 01       	movw	r30, r16
     f8a:	80 83       	st	Z, r24
	stop_TWI();
     f8c:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
	return(0);
     f90:	80 e0       	ldi	r24, 0x00	; 0

}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	d6 2f       	mov	r29, r22
     fa4:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
     fac:	c8 2f       	mov	r28, r24
     fae:	88 23       	and	r24, r24
     fb0:	21 f0       	breq	.+8      	; 0xfba <write_MCP23008+0x1e>
		stop_TWI();
     fb2:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     fb6:	8c 2f       	mov	r24, r28
     fb8:	17 c0       	rjmp	.+46     	; 0xfe8 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     fba:	8d 2f       	mov	r24, r29
     fbc:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     fc0:	c8 2f       	mov	r28, r24
     fc2:	88 23       	and	r24, r24
     fc4:	21 f0       	breq	.+8      	; 0xfce <write_MCP23008+0x32>
		stop_TWI();
     fc6:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     fca:	8c 2f       	mov	r24, r28
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     fce:	81 2f       	mov	r24, r17
     fd0:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
     fd4:	c8 2f       	mov	r28, r24
     fd6:	88 23       	and	r24, r24
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <write_MCP23008+0x46>
		stop_TWI();
     fda:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
     fde:	8c 2f       	mov	r24, r28
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <write_MCP23008+0x4c>
	}
	stop_TWI();
     fe2:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
	return(0);
     fe6:	80 e0       	ldi	r24, 0x00	; 0
	
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	08 95       	ret

00000ff0 <read_MCP9808>:
------------------------------------------------------------------------------*/

#include "globals.h"

float read_MCP9808(void)
{
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
	write_TWI(TEMPREGISTER);
    1006:	85 e0       	ldi	r24, 0x05	; 5
    1008:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
	highbyte = read_TWI();
    1014:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_TWI>
    1018:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    101a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
    101e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1020:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1024:	1c 2f       	mov	r17, r28
    1026:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1028:	6c 2f       	mov	r22, r28
    102a:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1042:	6b 01       	movw	r12, r22
    1044:	7c 01       	movw	r14, r24
    1046:	6d 2f       	mov	r22, r29
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5d e3       	ldi	r21, 0x3D	; 61
    105a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	c7 01       	movw	r24, r14
    1064:	b6 01       	movw	r22, r12
    1066:	0e 94 06 13 	call	0x260c	; 0x260c <__addsf3>
	if (sign) {
    106a:	11 23       	and	r17, r17
    106c:	41 f0       	breq	.+16     	; 0x107e <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	93 e4       	ldi	r25, 0x43	; 67
    107a:	0e 94 05 13 	call	0x260a	; 0x260a <__subsf3>
	}
	return(temperature);
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	08 95       	ret

0000108e <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	18 2f       	mov	r17, r24
    109c:	f6 2e       	mov	r15, r22
    109e:	ea 01       	movw	r28, r20
    10a0:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
    10a8:	81 11       	cpse	r24, r1
    10aa:	1e c0       	rjmp	.+60     	; 0x10e8 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    10ac:	8f 2d       	mov	r24, r15
    10ae:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
    10b2:	81 11       	cpse	r24, r1
    10b4:	19 c0       	rjmp	.+50     	; 0x10e8 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	81 2f       	mov	r24, r17
    10ba:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
    10be:	81 11       	cpse	r24, r1
    10c0:	13 c0       	rjmp	.+38     	; 0x10e8 <read_MMA8451+0x5a>
    10c2:	11 e0       	ldi	r17, 0x01	; 1
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    10c6:	7e 01       	movw	r14, r28
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	e8 1a       	sub	r14, r24
    10cc:	f8 0a       	sbc	r15, r24
    10ce:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_TWI>
    10d2:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10d4:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10d6:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10d8:	10 17       	cp	r17, r16
    10da:	a8 f3       	brcs	.-22     	; 0x10c6 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10dc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <readlast_TWI>
    10e0:	88 83       	st	Y, r24
	stop_TWI();
    10e2:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
	return(0);
    10e6:	80 e0       	ldi	r24, 0x00	; 0

}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	08 95       	ret

000010f6 <get_orientation>:
uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
{
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	26 97       	sbiw	r28, 0x06	; 6
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	6b 01       	movw	r12, r22
    1112:	7a 01       	movw	r14, r20
    1114:	89 01       	movw	r16, r18

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    1116:	4a e9       	ldi	r20, 0x9A	; 154
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	6c e1       	ldi	r22, 0x1C	; 28
    111c:	76 ec       	ldi	r23, 0xC6	; 198
    111e:	f9 01       	movw	r30, r18
    1120:	40 83       	st	Z, r20
    1122:	51 83       	std	Z+1, r21	; 0x01
    1124:	62 83       	std	Z+2, r22	; 0x02
    1126:	73 83       	std	Z+3, r23	; 0x03
    1128:	f7 01       	movw	r30, r14
    112a:	40 83       	st	Z, r20
    112c:	51 83       	std	Z+1, r21	; 0x01
    112e:	62 83       	std	Z+2, r22	; 0x02
    1130:	73 83       	std	Z+3, r23	; 0x03
    1132:	f6 01       	movw	r30, r12
    1134:	40 83       	st	Z, r20
    1136:	51 83       	std	Z+1, r21	; 0x01
    1138:	62 83       	std	Z+2, r22	; 0x02
    113a:	73 83       	std	Z+3, r23	; 0x03

	read_MMA8451(addr, MMA8451OUTXMSB, datain, 6);
    113c:	26 e0       	ldi	r18, 0x06	; 6
    113e:	ae 01       	movw	r20, r28
    1140:	4f 5f       	subi	r20, 0xFF	; 255
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 47 08 	call	0x108e	; 0x108e <read_MMA8451>

	ix = datain[0];
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    114e:	98 2f       	mov	r25, r24
    1150:	88 27       	eor	r24, r24
	ix |= datain[1];
    1152:	2a 81       	ldd	r18, Y+2	; 0x02
    1154:	82 2b       	or	r24, r18
	ix /= 4;
    1156:	bc 01       	movw	r22, r24
    1158:	77 23       	and	r23, r23
    115a:	14 f4       	brge	.+4      	; 0x1160 <get_orientation+0x6a>
    115c:	6d 5f       	subi	r22, 0xFD	; 253
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	75 95       	asr	r23
    1162:	67 95       	ror	r22
    1164:	75 95       	asr	r23
    1166:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1168:	07 2e       	mov	r0, r23
    116a:	00 0c       	add	r0, r0
    116c:	88 0b       	sbc	r24, r24
    116e:	99 0b       	sbc	r25, r25
    1170:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
    1174:	26 e6       	ldi	r18, 0x66	; 102
    1176:	36 e2       	ldi	r19, 0x26	; 38
    1178:	45 e7       	ldi	r20, 0x75	; 117
    117a:	5e e3       	ldi	r21, 0x3E	; 62
    117c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1180:	f6 01       	movw	r30, r12
    1182:	60 83       	st	Z, r22
    1184:	71 83       	std	Z+1, r23	; 0x01
    1186:	82 83       	std	Z+2, r24	; 0x02
    1188:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    118e:	98 2f       	mov	r25, r24
    1190:	88 27       	eor	r24, r24
	iy |= datain[3];
    1192:	2c 81       	ldd	r18, Y+4	; 0x04
    1194:	82 2b       	or	r24, r18
	iy /= 4;
    1196:	bc 01       	movw	r22, r24
    1198:	77 23       	and	r23, r23
    119a:	14 f4       	brge	.+4      	; 0x11a0 <get_orientation+0xaa>
    119c:	6d 5f       	subi	r22, 0xFD	; 253
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	75 95       	asr	r23
    11a2:	67 95       	ror	r22
    11a4:	75 95       	asr	r23
    11a6:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    11a8:	07 2e       	mov	r0, r23
    11aa:	00 0c       	add	r0, r0
    11ac:	88 0b       	sbc	r24, r24
    11ae:	99 0b       	sbc	r25, r25
    11b0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
    11b4:	26 e6       	ldi	r18, 0x66	; 102
    11b6:	36 e2       	ldi	r19, 0x26	; 38
    11b8:	45 e7       	ldi	r20, 0x75	; 117
    11ba:	5e e3       	ldi	r21, 0x3E	; 62
    11bc:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    11c0:	f7 01       	movw	r30, r14
    11c2:	60 83       	st	Z, r22
    11c4:	71 83       	std	Z+1, r23	; 0x01
    11c6:	82 83       	std	Z+2, r24	; 0x02
    11c8:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11ce:	98 2f       	mov	r25, r24
    11d0:	88 27       	eor	r24, r24
	iz |= datain[5];
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	82 2b       	or	r24, r18
	iz /= 4;
    11d6:	bc 01       	movw	r22, r24
    11d8:	77 23       	and	r23, r23
    11da:	14 f4       	brge	.+4      	; 0x11e0 <get_orientation+0xea>
    11dc:	6d 5f       	subi	r22, 0xFD	; 253
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	75 95       	asr	r23
    11e2:	67 95       	ror	r22
    11e4:	75 95       	asr	r23
    11e6:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11e8:	07 2e       	mov	r0, r23
    11ea:	00 0c       	add	r0, r0
    11ec:	88 0b       	sbc	r24, r24
    11ee:	99 0b       	sbc	r25, r25
    11f0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
    11f4:	26 e6       	ldi	r18, 0x66	; 102
    11f6:	36 e2       	ldi	r19, 0x26	; 38
    11f8:	45 e7       	ldi	r20, 0x75	; 117
    11fa:	5e e3       	ldi	r21, 0x3E	; 62
    11fc:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1200:	f8 01       	movw	r30, r16
    1202:	60 83       	st	Z, r22
    1204:	71 83       	std	Z+1, r23	; 0x01
    1206:	82 83       	std	Z+2, r24	; 0x02
    1208:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	26 96       	adiw	r28, 0x06	; 6
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	08 95       	ret

00001224 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	d6 2f       	mov	r29, r22
    122c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
    1234:	c8 2f       	mov	r28, r24
    1236:	88 23       	and	r24, r24
    1238:	21 f0       	breq	.+8      	; 0x1242 <write_MMA8451+0x1e>
		stop_TWI();
    123a:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
    123e:	8c 2f       	mov	r24, r28
    1240:	17 c0       	rjmp	.+46     	; 0x1270 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1242:	8d 2f       	mov	r24, r29
    1244:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
    1248:	c8 2f       	mov	r28, r24
    124a:	88 23       	and	r24, r24
    124c:	21 f0       	breq	.+8      	; 0x1256 <write_MMA8451+0x32>
		stop_TWI();
    124e:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
    1252:	8c 2f       	mov	r24, r28
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1256:	81 2f       	mov	r24, r17
    1258:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
    125c:	c8 2f       	mov	r28, r24
    125e:	88 23       	and	r24, r24
    1260:	21 f0       	breq	.+8      	; 0x126a <write_MMA8451+0x46>
		stop_TWI();
    1262:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
		return(retval);
    1266:	8c 2f       	mov	r24, r28
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <write_MMA8451+0x4c>
	}
	stop_TWI();
    126a:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>
	return(0);
    126e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	08 95       	ret

00001278 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	1f 92       	push	r1
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;

	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1282:	40 e4       	ldi	r20, 0x40	; 64
    1284:	6b e2       	ldi	r22, 0x2B	; 43
    1286:	8a e3       	ldi	r24, 0x3A	; 58
    1288:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	ae 01       	movw	r20, r28
    1290:	4f 5f       	subi	r20, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	6b e2       	ldi	r22, 0x2B	; 43
    1296:	8a e3       	ldi	r24, 0x3A	; 58
    1298:	0e 94 47 08 	call	0x108e	; 0x108e <read_MMA8451>
	while (retval & 0x40) {
    129c:	08 c0       	rjmp	.+16     	; 0x12ae <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	ae 01       	movw	r20, r28
    12a2:	4f 5f       	subi	r20, 0xFF	; 255
    12a4:	5f 4f       	sbci	r21, 0xFF	; 255
    12a6:	6b e2       	ldi	r22, 0x2B	; 43
    12a8:	8a e3       	ldi	r24, 0x3A	; 58
    12aa:	0e 94 47 08 	call	0x108e	; 0x108e <read_MMA8451>

	addr = MMA8451ADDR;

	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	86 fd       	sbrc	r24, 6
    12b2:	f5 cf       	rjmp	.-22     	; 0x129e <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    12b4:	40 ec       	ldi	r20, 0xC0	; 192
    12b6:	6f e0       	ldi	r22, 0x0F	; 15
    12b8:	8a e3       	ldi	r24, 0x3A	; 58
    12ba:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    12be:	42 e0       	ldi	r20, 0x02	; 2
    12c0:	6b e2       	ldi	r22, 0x2B	; 43
    12c2:	8a e3       	ldi	r24, 0x3A	; 58
    12c4:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    12c8:	4d e3       	ldi	r20, 0x3D	; 61
    12ca:	6a e2       	ldi	r22, 0x2A	; 42
    12cc:	8a e3       	ldi	r24, 0x3A	; 58
    12ce:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MMA8451>

	return(retval);

}
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	2e 97       	sbiw	r28, 0x0e	; 14
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    12f4:	88 e0       	ldi	r24, 0x08	; 8
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f6 e7       	ldi	r31, 0x76	; 118
    12fa:	de 01       	movw	r26, r28
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1306:	f8 01       	movw	r30, r16
    1308:	01 90       	ld	r0, Z+
    130a:	00 20       	and	r0, r0
    130c:	e9 f7       	brne	.-6      	; 0x1308 <checksum_NMEA+0x2c>
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	3e 2f       	mov	r19, r30
    1312:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1314:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    131a:	f8 01       	movw	r30, r16
    131c:	e8 0f       	add	r30, r24
    131e:	f1 1d       	adc	r31, r1
    1320:	20 81       	ld	r18, Z
    1322:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	83 17       	cp	r24, r19
    1328:	c0 f3       	brcs	.-16     	; 0x131a <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    132a:	1f 92       	push	r1
    132c:	9f 93       	push	r25
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	7e 01       	movw	r14, r28
    1338:	89 e0       	ldi	r24, 0x09	; 9
    133a:	e8 0e       	add	r14, r24
    133c:	f1 1c       	adc	r15, r1
    133e:	ff 92       	push	r15
    1340:	ef 92       	push	r14
    1342:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
	strcat(str, chksum);
    1346:	b7 01       	movw	r22, r14
    1348:	c8 01       	movw	r24, r16
    134a:	0e 94 cc 19 	call	0x3398	; 0x3398 <strcat>

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	2e 96       	adiw	r28, 0x0e	; 14
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	08 95       	ret

0000136e <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	28 97       	sbiw	r28, 0x08	; 8
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	08 2f       	mov	r16, r24
    1382:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    1384:	88 e0       	ldi	r24, 0x08	; 8
    1386:	ea e3       	ldi	r30, 0x3A	; 58
    1388:	f6 e7       	ldi	r31, 0x76	; 118
    138a:	de 01       	movw	r26, r28
    138c:	11 96       	adiw	r26, 0x01	; 1
    138e:	01 90       	ld	r0, Z+
    1390:	0d 92       	st	X+, r0
    1392:	8a 95       	dec	r24
    1394:	e1 f7       	brne	.-8      	; 0x138e <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    1396:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    139a:	82 ff       	sbrs	r24, 2
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <format_ERR+0x36>
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <format_ERR+0x3a>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9f 93       	push	r25
    13aa:	8f 93       	push	r24
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9f 93       	push	r25
    13b2:	8f 93       	push	r24
    13b4:	1f 93       	push	r17
    13b6:	0f 93       	push	r16
    13b8:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
	checksum_NMEA(str);
    13bc:	80 2f       	mov	r24, r16
    13be:	91 2f       	mov	r25, r17
    13c0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>

}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	28 96       	adiw	r28, 0x08	; 8
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	d6 2f       	mov	r29, r22
    13e6:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	0e 94 e5 10 	call	0x21ca	; 0x21ca <start_TWI>
	write_TWI(type);
    13ee:	8d 2f       	mov	r24, r29
    13f0:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
	write_TWI(byteToSend);
    13f4:	8c 2f       	mov	r24, r28
    13f6:	0e 94 0a 11 	call	0x2214	; 0x2214 <write_TWI>
	stop_TWI();
    13fa:	0e 94 06 11 	call	0x220c	; 0x220c <stop_TWI>

}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1404:	cf 93       	push	r28
		PORTE.OUTSET = PIN1_bm;

	}
*/

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1406:	e0 e6       	ldi	r30, 0x60	; 96
    1408:	f4 e0       	ldi	r31, 0x04	; 4
    140a:	90 e4       	ldi	r25, 0x40	; 64
    140c:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	a1 e4       	ldi	r26, 0x41	; 65
    1412:	b3 e0       	ldi	r27, 0x03	; 3
    1414:	11 97       	sbiw	r26, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <init_OLED+0x10>
    1418:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    141a:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    141c:	81 11       	cpse	r24, r1
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1420:	c8 e7       	ldi	r28, 0x78	; 120
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1424:	ca e7       	ldi	r28, 0x7A	; 122
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1426:	4a e2       	ldi	r20, 0x2A	; 42
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	8c 2f       	mov	r24, r28
    142c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1430:	41 e7       	ldi	r20, 0x71	; 113
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	8c 2f       	mov	r24, r28
    1436:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    143a:	4c e5       	ldi	r20, 0x5C	; 92
    143c:	60 e4       	ldi	r22, 0x40	; 64
    143e:	8c 2f       	mov	r24, r28
    1440:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1444:	48 e2       	ldi	r20, 0x28	; 40
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	8c 2f       	mov	r24, r28
    144a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    144e:	48 e0       	ldi	r20, 0x08	; 8
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	8c 2f       	mov	r24, r28
    1454:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1458:	4a e2       	ldi	r20, 0x2A	; 42
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	8c 2f       	mov	r24, r28
    145e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1462:	49 e7       	ldi	r20, 0x79	; 121
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	8c 2f       	mov	r24, r28
    1468:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    146c:	45 ed       	ldi	r20, 0xD5	; 213
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	8c 2f       	mov	r24, r28
    1472:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1476:	40 e7       	ldi	r20, 0x70	; 112
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	8c 2f       	mov	r24, r28
    147c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1480:	48 e7       	ldi	r20, 0x78	; 120
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	8c 2f       	mov	r24, r28
    1486:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    148a:	48 e0       	ldi	r20, 0x08	; 8
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	8c 2f       	mov	r24, r28
    1490:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1494:	46 e0       	ldi	r20, 0x06	; 6
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	8c 2f       	mov	r24, r28
    149a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    149e:	42 e7       	ldi	r20, 0x72	; 114
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	8c 2f       	mov	r24, r28
    14a4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	60 e4       	ldi	r22, 0x40	; 64
    14ac:	8c 2f       	mov	r24, r28
    14ae:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14b2:	4a e2       	ldi	r20, 0x2A	; 42
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	8c 2f       	mov	r24, r28
    14b8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14bc:	49 e7       	ldi	r20, 0x79	; 121
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	8c 2f       	mov	r24, r28
    14c2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    14c6:	4a ed       	ldi	r20, 0xDA	; 218
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	8c 2f       	mov	r24, r28
    14cc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	8c 2f       	mov	r24, r28
    14d6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14da:	4c ed       	ldi	r20, 0xDC	; 220
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	8c 2f       	mov	r24, r28
    14e0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	8c 2f       	mov	r24, r28
    14ea:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    14ee:	41 e8       	ldi	r20, 0x81	; 129
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	8c 2f       	mov	r24, r28
    14f4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	8c 2f       	mov	r24, r28
    14fe:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1502:	49 ed       	ldi	r20, 0xD9	; 217
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	8c 2f       	mov	r24, r28
    1508:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    150c:	41 ef       	ldi	r20, 0xF1	; 241
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	8c 2f       	mov	r24, r28
    1512:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1516:	4b ed       	ldi	r20, 0xDB	; 219
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	8c 2f       	mov	r24, r28
    151c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1520:	40 e4       	ldi	r20, 0x40	; 64
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	8c 2f       	mov	r24, r28
    1526:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    152a:	48 e7       	ldi	r20, 0x78	; 120
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	8c 2f       	mov	r24, r28
    1530:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1534:	48 e2       	ldi	r20, 0x28	; 40
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	8c 2f       	mov	r24, r28
    153a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	8c 2f       	mov	r24, r28
    1544:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	8c 2f       	mov	r24, r28
    154e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1552:	4c e0       	ldi	r20, 0x0C	; 12
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	8c 2f       	mov	r24, r28
    1558:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
    155c:	ba e6       	ldi	r27, 0x6A	; 106
    155e:	24 e0       	ldi	r18, 0x04	; 4
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	b1 50       	subi	r27, 0x01	; 1
    1564:	20 40       	sbci	r18, 0x00	; 0
    1566:	80 40       	sbci	r24, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <init_OLED+0x15e>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    156c:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1570:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    1574:	85 e0       	ldi	r24, 0x05	; 5
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    157c:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	e2 97       	sbiw	r28, 0x32	; 50
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1598:	91 e1       	ldi	r25, 0x11	; 17
    159a:	e2 e4       	ldi	r30, 0x42	; 66
    159c:	f6 e7       	ldi	r31, 0x76	; 118
    159e:	de 01       	movw	r26, r28
    15a0:	92 96       	adiw	r26, 0x22	; 34
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	9a 95       	dec	r25
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <writestr_OLED+0x1e>

	if (displaynumber == 0) {
    15aa:	81 11       	cpse	r24, r1
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <writestr_OLED+0x2e>
		twiaddr = OLEDADDR0;
    15ae:	08 e7       	ldi	r16, 0x78	; 120
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <writestr_OLED+0x30>
	} else {
		twiaddr = OLEDADDR1;
    15b2:	0a e7       	ldi	r16, 0x7A	; 122
	}

	strcpy(strbuf, str);
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	0e 94 d7 19 	call	0x33ae	; 0x33ae <strcpy>
	strcat(strbuf, blanks);		// pad with blanks
    15bc:	be 01       	movw	r22, r28
    15be:	6e 5d       	subi	r22, 0xDE	; 222
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 cc 19 	call	0x3398	; 0x3398 <strcat>

	if (lineno == 1) {
    15ca:	11 30       	cpi	r17, 0x01	; 1
    15cc:	39 f4       	brne	.+14     	; 0x15dc <writestr_OLED+0x58>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	80 2f       	mov	r24, r16
    15d4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	12 c0       	rjmp	.+36     	; 0x1600 <writestr_OLED+0x7c>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    15dc:	40 ec       	ldi	r20, 0xC0	; 192
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	80 2f       	mov	r24, r16
    15e2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>
    15e6:	f8 cf       	rjmp	.-16     	; 0x15d8 <writestr_OLED+0x54>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    15e8:	e1 e0       	ldi	r30, 0x01	; 1
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	ec 0f       	add	r30, r28
    15ee:	fd 1f       	adc	r31, r29
    15f0:	e1 0f       	add	r30, r17
    15f2:	f1 1d       	adc	r31, r1
    15f4:	40 81       	ld	r20, Z
    15f6:	60 e4       	ldi	r22, 0x40	; 64
    15f8:	80 2f       	mov	r24, r16
    15fa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    15fe:	1f 5f       	subi	r17, 0xFF	; 255
    1600:	10 31       	cpi	r17, 0x10	; 16
    1602:	90 f3       	brcs	.-28     	; 0x15e8 <writestr_OLED+0x64>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    160c:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    1610:	e2 96       	adiw	r28, 0x32	; 50
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	61 97       	sbiw	r28, 0x11	; 17
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1632:	81 e1       	ldi	r24, 0x11	; 17
    1634:	e2 e4       	ldi	r30, 0x42	; 66
    1636:	f6 e7       	ldi	r31, 0x76	; 118
    1638:	de 01       	movw	r26, r28
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	01 90       	ld	r0, Z+
    163e:	0d 92       	st	X+, r0
    1640:	8a 95       	dec	r24
    1642:	e1 f7       	brne	.-8      	; 0x163c <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	be 01       	movw	r22, r28
    1648:	6f 5f       	subi	r22, 0xFF	; 255
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	81 2f       	mov	r24, r17
    164e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1652:	42 e0       	ldi	r20, 0x02	; 2
    1654:	be 01       	movw	r22, r28
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	81 2f       	mov	r24, r17
    165c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <writestr_OLED>
	timerOLED = 0;
    1660:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1664:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    1668:	61 96       	adiw	r28, 0x11	; 17
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	08 95       	ret

00001676 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	88 e4       	ldi	r24, 0x48	; 72
    167c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
    1680:	81 11       	cpse	r24, r1
    1682:	05 c0       	rjmp	.+10     	; 0x168e <init_PNEU+0x18>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	6a e0       	ldi	r22, 0x0A	; 10
    1688:	88 e4       	ldi	r24, 0x48	; 72
    168a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
		return(retval);
	}
	return(0);

}
    168e:	08 95       	ret

00001690 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	1f 92       	push	r1
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	5c 01       	movw	r10, r24
    16ac:	7b 01       	movw	r14, r22
    16ae:	6a 01       	movw	r12, r20
    16b0:	89 01       	movw	r16, r18

	uint8_t sensors, state;

	read_MCP23008(PNEUSENSORS, GPIO, &sensors);
    16b2:	ae 01       	movw	r20, r28
    16b4:	4f 5f       	subi	r20, 0xFF	; 255
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	69 e0       	ldi	r22, 0x09	; 9
    16ba:	82 e4       	ldi	r24, 0x42	; 66
    16bc:	0e 94 ab 07 	call	0xf56	; 0xf56 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	82 95       	swap	r24
    16c4:	86 95       	lsr	r24
    16c6:	86 95       	lsr	r24
    16c8:	83 70       	andi	r24, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <read_PNEUSENSORS+0x46>
		*shutter = 'c';
    16ce:	83 e6       	ldi	r24, 0x63	; 99
    16d0:	f5 01       	movw	r30, r10
    16d2:	80 83       	st	Z, r24
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <read_PNEUSENSORS+0x64>
		} else if (state == 2) {
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <read_PNEUSENSORS+0x52>
		*shutter = 'o';
    16da:	8f e6       	ldi	r24, 0x6F	; 111
    16dc:	f5 01       	movw	r30, r10
    16de:	80 83       	st	Z, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <read_PNEUSENSORS+0x64>
		} else if (state == 3) {
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	21 f4       	brne	.+8      	; 0x16ee <read_PNEUSENSORS+0x5e>
		*shutter = 't';
    16e6:	84 e7       	ldi	r24, 0x74	; 116
    16e8:	f5 01       	movw	r30, r10
    16ea:	80 83       	st	Z, r24
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <read_PNEUSENSORS+0x64>
		} else {
		*shutter = 'x';
    16ee:	88 e7       	ldi	r24, 0x78	; 120
    16f0:	f5 01       	movw	r30, r10
    16f2:	80 83       	st	Z, r24
	}

	// Right
	state = sensors >> 2;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	86 95       	lsr	r24
    16f8:	86 95       	lsr	r24
	state &= 0b00000011;
    16fa:	83 70       	andi	r24, 0x03	; 3
	if (state == 1) {
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	21 f4       	brne	.+8      	; 0x1708 <read_PNEUSENSORS+0x78>
		*right = 'c';
    1700:	83 e6       	ldi	r24, 0x63	; 99
    1702:	f6 01       	movw	r30, r12
    1704:	80 83       	st	Z, r24
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <read_PNEUSENSORS+0x96>
		} else if (state == 2) {
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	21 f4       	brne	.+8      	; 0x1714 <read_PNEUSENSORS+0x84>
		*right = 'o';
    170c:	8f e6       	ldi	r24, 0x6F	; 111
    170e:	f6 01       	movw	r30, r12
    1710:	80 83       	st	Z, r24
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <read_PNEUSENSORS+0x96>
		} else if (state == 3) {
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	21 f4       	brne	.+8      	; 0x1720 <read_PNEUSENSORS+0x90>
		*right = 't';
    1718:	84 e7       	ldi	r24, 0x74	; 116
    171a:	f6 01       	movw	r30, r12
    171c:	80 83       	st	Z, r24
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <read_PNEUSENSORS+0x96>
		} else {
		*right = 'x';
    1720:	88 e7       	ldi	r24, 0x78	; 120
    1722:	f6 01       	movw	r30, r12
    1724:	80 83       	st	Z, r24
	}

	// Left
	state = sensors >> 4;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	82 95       	swap	r24
    172a:	8f 70       	andi	r24, 0x0F	; 15
	state &= 0b00000011;
    172c:	83 70       	andi	r24, 0x03	; 3
	if (state == 1) {
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	21 f4       	brne	.+8      	; 0x173a <read_PNEUSENSORS+0xaa>
		*left = 'o';
    1732:	8f e6       	ldi	r24, 0x6F	; 111
    1734:	f7 01       	movw	r30, r14
    1736:	80 83       	st	Z, r24
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <read_PNEUSENSORS+0xc8>
		} else if (state == 2) {
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	21 f4       	brne	.+8      	; 0x1746 <read_PNEUSENSORS+0xb6>
		*left = 'c';
    173e:	83 e6       	ldi	r24, 0x63	; 99
    1740:	f7 01       	movw	r30, r14
    1742:	80 83       	st	Z, r24
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <read_PNEUSENSORS+0xc8>
		} else if (state == 3) {
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	21 f4       	brne	.+8      	; 0x1752 <read_PNEUSENSORS+0xc2>
		*left = 't';
    174a:	84 e7       	ldi	r24, 0x74	; 116
    174c:	f7 01       	movw	r30, r14
    174e:	80 83       	st	Z, r24
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <read_PNEUSENSORS+0xc8>
		} else {
		*left = 'x';
    1752:	88 e7       	ldi	r24, 0x78	; 120
    1754:	f7 01       	movw	r30, r14
    1756:	80 83       	st	Z, r24
	}

	// Air
	if (sensors & 0b00000010) {
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	81 ff       	sbrs	r24, 1
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <read_PNEUSENSORS+0xd6>
		*air = '0';
    175e:	80 e3       	ldi	r24, 0x30	; 48
    1760:	f8 01       	movw	r30, r16
    1762:	80 83       	st	Z, r24
    1764:	03 c0       	rjmp	.+6      	; 0x176c <read_PNEUSENSORS+0xdc>
		} else {
		*air = '1';
    1766:	81 e3       	ldi	r24, 0x31	; 49
    1768:	f8 01       	movw	r30, r16
    176a:	80 83       	st	Z, r24
	}
}
    176c:	0f 90       	pop	r0
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	08 95       	ret

00001784 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	1f 92       	push	r1
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	08 2f       	mov	r16, r24
    1794:	16 2f       	mov	r17, r22

	uint8_t retval, old_state, new_state;

	if ((retval = read_MCP23008(HIGHCURRENT, GPIO, &old_state))) {
    1796:	ae 01       	movw	r20, r28
    1798:	4f 5f       	subi	r20, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	69 e0       	ldi	r22, 0x09	; 9
    179e:	88 e4       	ldi	r24, 0x48	; 72
    17a0:	0e 94 ab 07 	call	0xf56	; 0xf56 <read_MCP23008>
    17a4:	81 11       	cpse	r24, r1
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <set_PNEUVALVES+0x32>
		return(retval);
	}

	new_state = ((old_state | bitmap) & action);
    17a8:	49 81       	ldd	r20, Y+1	; 0x01
    17aa:	40 2b       	or	r20, r16
    17ac:	41 23       	and	r20, r17

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    17ae:	6a e0       	ldi	r22, 0x0A	; 10
    17b0:	88 e4       	ldi	r24, 0x48	; 72
    17b2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <write_MCP23008>
		return(retval);
	}

	return(0);

}
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <close_PNEU>:
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{

	switch (mech) {
    17c2:	8c 36       	cpi	r24, 0x6C	; 108
    17c4:	99 f0       	breq	.+38     	; 0x17ec <close_PNEU+0x2a>
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <close_PNEU+0xc>
    17c8:	82 36       	cpi	r24, 0x62	; 98
    17ca:	31 f0       	breq	.+12     	; 0x17d8 <close_PNEU+0x16>
    17cc:	21 c0       	rjmp	.+66     	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
    17ce:	82 37       	cpi	r24, 0x72	; 114
    17d0:	99 f0       	breq	.+38     	; 0x17f8 <close_PNEU+0x36>
    17d2:	83 37       	cpi	r24, 0x73	; 115
    17d4:	b9 f0       	breq	.+46     	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
    17d6:	1c c0       	rjmp	.+56     	; 0x1810 <__DATA_REGION_LENGTH__+0x10>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    17d8:	6a ee       	ldi	r22, 0xEA	; 234
    17da:	84 e4       	ldi	r24, 0x44	; 68
    17dc:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    17e0:	66 ee       	ldi	r22, 0xE6	; 230
    17e2:	88 e8       	ldi	r24, 0x88	; 136
    17e4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
	switch (mech) {

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;
    17ea:	08 95       	ret

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    17ec:	6a ee       	ldi	r22, 0xEA	; 234
    17ee:	84 e4       	ldi	r24, 0x44	; 68
    17f0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			break;
    17f6:	08 95       	ret
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    17f8:	66 ee       	ldi	r22, 0xE6	; 230
    17fa:	88 e8       	ldi	r24, 0x88	; 136
    17fc:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    1800:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			break;
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;
    1802:	08 95       	ret

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1804:	6c ee       	ldi	r22, 0xEC	; 236
    1806:	82 e2       	ldi	r24, 0x22	; 34
    1808:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    180c:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			break;
    180e:	08 95       	ret

		default:
			return(ERRORPROMPT);
    1810:	82 e0       	ldi	r24, 0x02	; 2

	}

	return(GREATERPROMPT);

}
    1812:	08 95       	ret

00001814 <open_PNEU>:
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{

	switch (mechanism) {
    1814:	8c 36       	cpi	r24, 0x6C	; 108
    1816:	99 f0       	breq	.+38     	; 0x183e <open_PNEU+0x2a>
    1818:	18 f4       	brcc	.+6      	; 0x1820 <open_PNEU+0xc>
    181a:	82 36       	cpi	r24, 0x62	; 98
    181c:	31 f0       	breq	.+12     	; 0x182a <open_PNEU+0x16>
    181e:	21 c0       	rjmp	.+66     	; 0x1862 <open_PNEU+0x4e>
    1820:	82 37       	cpi	r24, 0x72	; 114
    1822:	99 f0       	breq	.+38     	; 0x184a <open_PNEU+0x36>
    1824:	83 37       	cpi	r24, 0x73	; 115
    1826:	b9 f0       	breq	.+46     	; 0x1856 <open_PNEU+0x42>
    1828:	1c c0       	rjmp	.+56     	; 0x1862 <open_PNEU+0x4e>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    182a:	6e ea       	ldi	r22, 0xAE	; 174
    182c:	84 e4       	ldi	r24, 0x44	; 68
    182e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1832:	6e e6       	ldi	r22, 0x6E	; 110
    1834:	88 e8       	ldi	r24, 0x88	; 136
    1836:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    183a:	80 e0       	ldi	r24, 0x00	; 0
	switch (mechanism) {

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;
    183c:	08 95       	ret

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    183e:	6e ea       	ldi	r22, 0xAE	; 174
    1840:	84 e4       	ldi	r24, 0x44	; 68
    1842:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    1846:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			break;
    1848:	08 95       	ret
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    184a:	6e e6       	ldi	r22, 0x6E	; 110
    184c:	88 e8       	ldi	r24, 0x88	; 136
    184e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    1852:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			break;
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;
    1854:	08 95       	ret

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1856:	6e ec       	ldi	r22, 0xCE	; 206
    1858:	82 e2       	ldi	r24, 0x22	; 34
    185a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    185e:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			break;
    1860:	08 95       	ret

		default:
			return(ERRORPROMPT);
    1862:	82 e0       	ldi	r24, 0x02	; 2

	}

	return(GREATERPROMPT);

}
    1864:	08 95       	ret

00001866 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1866:	e0 e0       	ldi	r30, 0x00	; 0
    1868:	f4 e0       	ldi	r31, 0x04	; 4
    186a:	88 e0       	ldi	r24, 0x08	; 8
    186c:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    186e:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1870:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1872:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1874:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1876:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1878:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    187a:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    187c:	e0 e2       	ldi	r30, 0x20	; 32
    187e:	f4 e0       	ldi	r31, 0x04	; 4
    1880:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1882:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1884:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1886:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1888:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    188a:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    188c:	e0 e4       	ldi	r30, 0x40	; 64
    188e:	f4 e0       	ldi	r31, 0x04	; 4
    1890:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1892:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1894:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1896:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1898:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    189a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    189c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    189e:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18a0:	e0 e6       	ldi	r30, 0x60	; 96
    18a2:	f4 e0       	ldi	r31, 0x04	; 4
    18a4:	94 e0       	ldi	r25, 0x04	; 4
    18a6:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18a8:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18aa:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18ac:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18ae:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18b0:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18b2:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    18b4:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    18b6:	e0 e8       	ldi	r30, 0x80	; 128
    18b8:	f4 e0       	ldi	r31, 0x04	; 4
    18ba:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    18bc:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    18be:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    18c0:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    18c2:	e0 ea       	ldi	r30, 0xA0	; 160
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    18c8:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    18ca:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    18cc:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    18ce:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    18d0:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    18d2:	86 8b       	std	Z+22, r24	; 0x16
    18d4:	08 95       	ret

000018d6 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    18d6:	2f 92       	push	r2
    18d8:	3f 92       	push	r3
    18da:	4f 92       	push	r4
    18dc:	5f 92       	push	r5
    18de:	6f 92       	push	r6
    18e0:	7f 92       	push	r7
    18e2:	8f 92       	push	r8
    18e4:	9f 92       	push	r9
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	c7 5e       	subi	r28, 0xE7	; 231
    1900:	d1 40       	sbci	r29, 0x01	; 1
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_BTM[] = "$S%dBTM,%s,%s";
    1906:	9e e0       	ldi	r25, 0x0E	; 14
    1908:	e3 e5       	ldi	r30, 0x53	; 83
    190a:	f6 e7       	ldi	r31, 0x76	; 118
    190c:	de 01       	movw	r26, r28
    190e:	ae 52       	subi	r26, 0x2E	; 46
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	01 90       	ld	r0, Z+
    1914:	0d 92       	st	X+, r0
    1916:	9a 95       	dec	r25
    1918:	e1 f7       	brne	.-8      	; 0x1912 <report+0x3c>
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    191a:	92 e4       	ldi	r25, 0x42	; 66
    191c:	e1 e6       	ldi	r30, 0x61	; 97
    191e:	f6 e7       	ldi	r31, 0x76	; 118
    1920:	de 01       	movw	r26, r28
    1922:	a0 52       	subi	r26, 0x20	; 32
    1924:	bf 4f       	sbci	r27, 0xFF	; 255
    1926:	01 90       	ld	r0, Z+
    1928:	0d 92       	st	X+, r0
    192a:	9a 95       	dec	r25
    192c:	e1 f7       	brne	.-8      	; 0x1926 <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    192e:	90 e2       	ldi	r25, 0x20	; 32
    1930:	e3 ea       	ldi	r30, 0xA3	; 163
    1932:	f6 e7       	ldi	r31, 0x76	; 118
    1934:	de 01       	movw	r26, r28
    1936:	ae 5d       	subi	r26, 0xDE	; 222
    1938:	be 4f       	sbci	r27, 0xFE	; 254
    193a:	01 90       	ld	r0, Z+
    193c:	0d 92       	st	X+, r0
    193e:	9a 95       	dec	r25
    1940:	e1 f7       	brne	.-8      	; 0x193a <report+0x64>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1942:	91 e3       	ldi	r25, 0x31	; 49
    1944:	e3 ec       	ldi	r30, 0xC3	; 195
    1946:	f6 e7       	ldi	r31, 0x76	; 118
    1948:	de 01       	movw	r26, r28
    194a:	ae 5b       	subi	r26, 0xBE	; 190
    194c:	be 4f       	sbci	r27, 0xFE	; 254
    194e:	01 90       	ld	r0, Z+
    1950:	0d 92       	st	X+, r0
    1952:	9a 95       	dec	r25
    1954:	e1 f7       	brne	.-8      	; 0x194e <report+0x78>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1956:	9d e1       	ldi	r25, 0x1D	; 29
    1958:	e4 ef       	ldi	r30, 0xF4	; 244
    195a:	f6 e7       	ldi	r31, 0x76	; 118
    195c:	de 01       	movw	r26, r28
    195e:	ad 58       	subi	r26, 0x8D	; 141
    1960:	be 4f       	sbci	r27, 0xFE	; 254
    1962:	01 90       	ld	r0, Z+
    1964:	0d 92       	st	X+, r0
    1966:	9a 95       	dec	r25
    1968:	e1 f7       	brne	.-8      	; 0x1962 <report+0x8c>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    196a:	99 e2       	ldi	r25, 0x29	; 41
    196c:	e1 e1       	ldi	r30, 0x11	; 17
    196e:	f7 e7       	ldi	r31, 0x77	; 119
    1970:	de 01       	movw	r26, r28
    1972:	a0 57       	subi	r26, 0x70	; 112
    1974:	be 4f       	sbci	r27, 0xFE	; 254
    1976:	01 90       	ld	r0, Z+
    1978:	0d 92       	st	X+, r0
    197a:	9a 95       	dec	r25
    197c:	e1 f7       	brne	.-8      	; 0x1976 <report+0xa0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    197e:	91 e1       	ldi	r25, 0x11	; 17
    1980:	ea e3       	ldi	r30, 0x3A	; 58
    1982:	f7 e7       	ldi	r31, 0x77	; 119
    1984:	de 01       	movw	r26, r28
    1986:	a7 54       	subi	r26, 0x47	; 71
    1988:	be 4f       	sbci	r27, 0xFE	; 254
    198a:	01 90       	ld	r0, Z+
    198c:	0d 92       	st	X+, r0
    198e:	9a 95       	dec	r25
    1990:	e1 f7       	brne	.-8      	; 0x198a <report+0xb4>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1992:	08 2f       	mov	r16, r24
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	84 e3       	ldi	r24, 0x34	; 52
    1998:	80 9f       	mul	r24, r16
    199a:	f0 01       	movw	r30, r0
    199c:	81 9f       	mul	r24, r17
    199e:	f0 0d       	add	r31, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	ed 5f       	subi	r30, 0xFD	; 253
    19a4:	f7 4d       	sbci	r31, 0xD7	; 215
    19a6:	e1 81       	ldd	r30, Z+1	; 0x01
    19a8:	8e 2f       	mov	r24, r30
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	e2 54       	subi	r30, 0x42	; 66
    19b0:	f1 09       	sbc	r31, r1
    19b2:	e5 33       	cpi	r30, 0x35	; 53
    19b4:	f1 05       	cpc	r31, r1
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <report+0xe4>
    19b8:	0c c3       	rjmp	.+1560   	; 0x1fd2 <report+0x6fc>
    19ba:	e0 5b       	subi	r30, 0xB0	; 176
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	0c 94 9e 18 	jmp	0x313c	; 0x313c <__tablejump2__>

		case 'B':					// Boot time
			get_BOOTTIME(boottime);
    19c2:	ce 01       	movw	r24, r28
    19c4:	82 54       	subi	r24, 0x42	; 66
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	0e 94 d2 05 	call	0xba4	; 0xba4 <get_BOOTTIME>
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
    19cc:	24 e3       	ldi	r18, 0x34	; 52
    19ce:	20 9f       	mul	r18, r16
    19d0:	c0 01       	movw	r24, r0
    19d2:	21 9f       	mul	r18, r17
    19d4:	90 0d       	add	r25, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	82 5d       	subi	r24, 0xD2	; 210
    19da:	97 4d       	sbci	r25, 0xD7	; 215
    19dc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    19e0:	22 ff       	sbrs	r18, 2
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <report+0x114>
    19e4:	22 e0       	ldi	r18, 0x02	; 2
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <report+0x118>
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	ce 01       	movw	r24, r28
    19f4:	82 54       	subi	r24, 0x42	; 66
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	9f 93       	push	r25
    19fa:	8f 93       	push	r24
    19fc:	3f 93       	push	r19
    19fe:	2f 93       	push	r18
    1a00:	44 96       	adiw	r24, 0x14	; 20
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	8e 01       	movw	r16, r28
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	1f 93       	push	r17
    1a0e:	0f 93       	push	r16
    1a10:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1a14:	c8 01       	movw	r24, r16
    1a16:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	01 90       	ld	r0, Z+
    1a1e:	00 20       	and	r0, r0
    1a20:	e9 f7       	brne	.-6      	; 0x1a1c <report+0x146>
    1a22:	31 97       	sbiw	r30, 0x01	; 1
    1a24:	af 01       	movw	r20, r30
    1a26:	40 1b       	sub	r20, r16
    1a28:	51 0b       	sbc	r21, r17
    1a2a:	b8 01       	movw	r22, r16
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':					// Boot time
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1a38:	cd c2       	rjmp	.+1434   	; 0x1fd4 <report+0x6fe>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
    1a40:	c6 52       	subi	r28, 0x26	; 38
    1a42:	de 4f       	sbci	r29, 0xFE	; 254
    1a44:	68 83       	st	Y, r22
    1a46:	ca 5d       	subi	r28, 0xDA	; 218
    1a48:	d1 40       	sbci	r29, 0x01	; 1
    1a4a:	c5 52       	subi	r28, 0x25	; 37
    1a4c:	de 4f       	sbci	r29, 0xFE	; 254
    1a4e:	78 83       	st	Y, r23
    1a50:	cb 5d       	subi	r28, 0xDB	; 219
    1a52:	d1 40       	sbci	r29, 0x01	; 1
    1a54:	c4 52       	subi	r28, 0x24	; 36
    1a56:	de 4f       	sbci	r29, 0xFE	; 254
    1a58:	88 83       	st	Y, r24
    1a5a:	cc 5d       	subi	r28, 0xDC	; 220
    1a5c:	d1 40       	sbci	r29, 0x01	; 1
    1a5e:	c3 52       	subi	r28, 0x23	; 35
    1a60:	de 4f       	sbci	r29, 0xFE	; 254
    1a62:	98 83       	st	Y, r25
    1a64:	cd 5d       	subi	r28, 0xDD	; 221
    1a66:	d1 40       	sbci	r29, 0x01	; 1
			h0 = get_humidity(0);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    1a6e:	c2 52       	subi	r28, 0x22	; 34
    1a70:	de 4f       	sbci	r29, 0xFE	; 254
    1a72:	68 83       	st	Y, r22
    1a74:	ce 5d       	subi	r28, 0xDE	; 222
    1a76:	d1 40       	sbci	r29, 0x01	; 1
    1a78:	c1 52       	subi	r28, 0x21	; 33
    1a7a:	de 4f       	sbci	r29, 0xFE	; 254
    1a7c:	78 83       	st	Y, r23
    1a7e:	cf 5d       	subi	r28, 0xDF	; 223
    1a80:	d1 40       	sbci	r29, 0x01	; 1
    1a82:	c0 52       	subi	r28, 0x20	; 32
    1a84:	de 4f       	sbci	r29, 0xFE	; 254
    1a86:	88 83       	st	Y, r24
    1a88:	c0 5e       	subi	r28, 0xE0	; 224
    1a8a:	d1 40       	sbci	r29, 0x01	; 1
    1a8c:	cf 51       	subi	r28, 0x1F	; 31
    1a8e:	de 4f       	sbci	r29, 0xFE	; 254
    1a90:	98 83       	st	Y, r25
    1a92:	c1 5e       	subi	r28, 0xE1	; 225
    1a94:	d1 40       	sbci	r29, 0x01	; 1
			t1 = get_temperature(1);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
    1a9c:	ce 51       	subi	r28, 0x1E	; 30
    1a9e:	de 4f       	sbci	r29, 0xFE	; 254
    1aa0:	68 83       	st	Y, r22
    1aa2:	c2 5e       	subi	r28, 0xE2	; 226
    1aa4:	d1 40       	sbci	r29, 0x01	; 1
    1aa6:	cd 51       	subi	r28, 0x1D	; 29
    1aa8:	de 4f       	sbci	r29, 0xFE	; 254
    1aaa:	78 83       	st	Y, r23
    1aac:	c3 5e       	subi	r28, 0xE3	; 227
    1aae:	d1 40       	sbci	r29, 0x01	; 1
    1ab0:	cc 51       	subi	r28, 0x1C	; 28
    1ab2:	de 4f       	sbci	r29, 0xFE	; 254
    1ab4:	88 83       	st	Y, r24
    1ab6:	c4 5e       	subi	r28, 0xE4	; 228
    1ab8:	d1 40       	sbci	r29, 0x01	; 1
    1aba:	cb 51       	subi	r28, 0x1B	; 27
    1abc:	de 4f       	sbci	r29, 0xFE	; 254
    1abe:	98 83       	st	Y, r25
    1ac0:	c5 5e       	subi	r28, 0xE5	; 229
    1ac2:	d1 40       	sbci	r29, 0x01	; 1
			h1 = get_humidity(1);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    1aca:	f6 2e       	mov	r15, r22
    1acc:	e7 2e       	mov	r14, r23
    1ace:	d8 2e       	mov	r13, r24
    1ad0:	c9 2e       	mov	r12, r25
			t2 = get_temperature(2);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
    1ad8:	b6 2e       	mov	r11, r22
    1ada:	a7 2e       	mov	r10, r23
    1adc:	98 2e       	mov	r9, r24
    1ade:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    1ae6:	76 2e       	mov	r7, r22
    1ae8:	67 2e       	mov	r6, r23
    1aea:	58 2e       	mov	r5, r24
    1aec:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	0e 94 ad 10 	call	0x215a	; 0x215a <get_temperature>
    1af4:	ca 51       	subi	r28, 0x1A	; 26
    1af6:	de 4f       	sbci	r29, 0xFE	; 254
    1af8:	68 83       	st	Y, r22
    1afa:	c6 5e       	subi	r28, 0xE6	; 230
    1afc:	d1 40       	sbci	r29, 0x01	; 1
    1afe:	c9 51       	subi	r28, 0x19	; 25
    1b00:	de 4f       	sbci	r29, 0xFE	; 254
    1b02:	78 83       	st	Y, r23
    1b04:	c7 5e       	subi	r28, 0xE7	; 231
    1b06:	d1 40       	sbci	r29, 0x01	; 1
    1b08:	38 2e       	mov	r3, r24
    1b0a:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	8a 56       	subi	r24, 0x6A	; 106
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1b16:	24 e3       	ldi	r18, 0x34	; 52
    1b18:	20 9f       	mul	r18, r16
    1b1a:	c0 01       	movw	r24, r0
    1b1c:	21 9f       	mul	r18, r17
    1b1e:	90 0d       	add	r25, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	82 5d       	subi	r24, 0xD2	; 210
    1b24:	97 4d       	sbci	r25, 0xD7	; 215
    1b26:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1b2a:	22 ff       	sbrs	r18, 2
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <report+0x25e>
    1b2e:	22 e0       	ldi	r18, 0x02	; 2
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <report+0x262>
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	9f 93       	push	r25
    1b3a:	8f 93       	push	r24
    1b3c:	2f 92       	push	r2
    1b3e:	3f 92       	push	r3
    1b40:	c9 51       	subi	r28, 0x19	; 25
    1b42:	de 4f       	sbci	r29, 0xFE	; 254
    1b44:	98 81       	ld	r25, Y
    1b46:	c7 5e       	subi	r28, 0xE7	; 231
    1b48:	d1 40       	sbci	r29, 0x01	; 1
    1b4a:	9f 93       	push	r25
    1b4c:	ca 51       	subi	r28, 0x1A	; 26
    1b4e:	de 4f       	sbci	r29, 0xFE	; 254
    1b50:	88 81       	ld	r24, Y
    1b52:	c6 5e       	subi	r28, 0xE6	; 230
    1b54:	d1 40       	sbci	r29, 0x01	; 1
    1b56:	8f 93       	push	r24
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	cb 51       	subi	r28, 0x1B	; 27
    1b72:	de 4f       	sbci	r29, 0xFE	; 254
    1b74:	98 81       	ld	r25, Y
    1b76:	c5 5e       	subi	r28, 0xE5	; 229
    1b78:	d1 40       	sbci	r29, 0x01	; 1
    1b7a:	9f 93       	push	r25
    1b7c:	cc 51       	subi	r28, 0x1C	; 28
    1b7e:	de 4f       	sbci	r29, 0xFE	; 254
    1b80:	88 81       	ld	r24, Y
    1b82:	c4 5e       	subi	r28, 0xE4	; 228
    1b84:	d1 40       	sbci	r29, 0x01	; 1
    1b86:	8f 93       	push	r24
    1b88:	cd 51       	subi	r28, 0x1D	; 29
    1b8a:	de 4f       	sbci	r29, 0xFE	; 254
    1b8c:	98 81       	ld	r25, Y
    1b8e:	c3 5e       	subi	r28, 0xE3	; 227
    1b90:	d1 40       	sbci	r29, 0x01	; 1
    1b92:	9f 93       	push	r25
    1b94:	ce 51       	subi	r28, 0x1E	; 30
    1b96:	de 4f       	sbci	r29, 0xFE	; 254
    1b98:	88 81       	ld	r24, Y
    1b9a:	c2 5e       	subi	r28, 0xE2	; 226
    1b9c:	d1 40       	sbci	r29, 0x01	; 1
    1b9e:	8f 93       	push	r24
    1ba0:	cf 51       	subi	r28, 0x1F	; 31
    1ba2:	de 4f       	sbci	r29, 0xFE	; 254
    1ba4:	98 81       	ld	r25, Y
    1ba6:	c1 5e       	subi	r28, 0xE1	; 225
    1ba8:	d1 40       	sbci	r29, 0x01	; 1
    1baa:	9f 93       	push	r25
    1bac:	c0 52       	subi	r28, 0x20	; 32
    1bae:	de 4f       	sbci	r29, 0xFE	; 254
    1bb0:	88 81       	ld	r24, Y
    1bb2:	c0 5e       	subi	r28, 0xE0	; 224
    1bb4:	d1 40       	sbci	r29, 0x01	; 1
    1bb6:	8f 93       	push	r24
    1bb8:	c1 52       	subi	r28, 0x21	; 33
    1bba:	de 4f       	sbci	r29, 0xFE	; 254
    1bbc:	98 81       	ld	r25, Y
    1bbe:	cf 5d       	subi	r28, 0xDF	; 223
    1bc0:	d1 40       	sbci	r29, 0x01	; 1
    1bc2:	9f 93       	push	r25
    1bc4:	c2 52       	subi	r28, 0x22	; 34
    1bc6:	de 4f       	sbci	r29, 0xFE	; 254
    1bc8:	88 81       	ld	r24, Y
    1bca:	ce 5d       	subi	r28, 0xDE	; 222
    1bcc:	d1 40       	sbci	r29, 0x01	; 1
    1bce:	8f 93       	push	r24
    1bd0:	c3 52       	subi	r28, 0x23	; 35
    1bd2:	de 4f       	sbci	r29, 0xFE	; 254
    1bd4:	98 81       	ld	r25, Y
    1bd6:	cd 5d       	subi	r28, 0xDD	; 221
    1bd8:	d1 40       	sbci	r29, 0x01	; 1
    1bda:	9f 93       	push	r25
    1bdc:	c4 52       	subi	r28, 0x24	; 36
    1bde:	de 4f       	sbci	r29, 0xFE	; 254
    1be0:	88 81       	ld	r24, Y
    1be2:	cc 5d       	subi	r28, 0xDC	; 220
    1be4:	d1 40       	sbci	r29, 0x01	; 1
    1be6:	8f 93       	push	r24
    1be8:	c5 52       	subi	r28, 0x25	; 37
    1bea:	de 4f       	sbci	r29, 0xFE	; 254
    1bec:	98 81       	ld	r25, Y
    1bee:	cb 5d       	subi	r28, 0xDB	; 219
    1bf0:	d1 40       	sbci	r29, 0x01	; 1
    1bf2:	9f 93       	push	r25
    1bf4:	c6 52       	subi	r28, 0x26	; 38
    1bf6:	de 4f       	sbci	r29, 0xFE	; 254
    1bf8:	88 81       	ld	r24, Y
    1bfa:	ca 5d       	subi	r28, 0xDA	; 218
    1bfc:	d1 40       	sbci	r29, 0x01	; 1
    1bfe:	8f 93       	push	r24
    1c00:	ce 01       	movw	r24, r28
    1c02:	8a 56       	subi	r24, 0x6A	; 106
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	3f 93       	push	r19
    1c0c:	2f 93       	push	r18
    1c0e:	86 5b       	subi	r24, 0xB6	; 182
    1c10:	9f 4f       	sbci	r25, 0xFF	; 255
    1c12:	9f 93       	push	r25
    1c14:	8f 93       	push	r24
    1c16:	8e 01       	movw	r16, r28
    1c18:	0f 5f       	subi	r16, 0xFF	; 255
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	1f 93       	push	r17
    1c1e:	0f 93       	push	r16
    1c20:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1c2e:	f8 01       	movw	r30, r16
    1c30:	01 90       	ld	r0, Z+
    1c32:	00 20       	and	r0, r0
    1c34:	e9 f7       	brne	.-6      	; 0x1c30 <report+0x35a>
    1c36:	31 97       	sbiw	r30, 0x01	; 1
    1c38:	af 01       	movw	r20, r30
    1c3a:	40 1b       	sub	r20, r16
    1c3c:	51 0b       	sbc	r21, r17
    1c3e:	b8 01       	movw	r22, r16
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
			t3 = get_temperature(3);
			get_time(currenttime);
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1c48:	c5 c1       	rjmp	.+906    	; 0x1fd4 <report+0x6fe>

		case 'o':					// Orientation
			get_orientation(MMA8451ADDR, &x, &y, &z);
    1c4a:	9e 01       	movw	r18, r28
    1c4c:	2e 52       	subi	r18, 0x2E	; 46
    1c4e:	3e 4f       	sbci	r19, 0xFE	; 254
    1c50:	ae 01       	movw	r20, r28
    1c52:	42 53       	subi	r20, 0x32	; 50
    1c54:	5e 4f       	sbci	r21, 0xFE	; 254
    1c56:	be 01       	movw	r22, r28
    1c58:	66 53       	subi	r22, 0x36	; 54
    1c5a:	7e 4f       	sbci	r23, 0xFE	; 254
    1c5c:	8a e3       	ldi	r24, 0x3A	; 58
    1c5e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_orientation>
			get_time(currenttime);
    1c62:	ce 01       	movw	r24, r28
    1c64:	8a 56       	subi	r24, 0x6A	; 106
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
x=y=z=23.4;
    1c6c:	83 e3       	ldi	r24, 0x33	; 51
    1c6e:	93 e3       	ldi	r25, 0x33	; 51
    1c70:	ab eb       	ldi	r26, 0xBB	; 187
    1c72:	b1 e4       	ldi	r27, 0x41	; 65
    1c74:	ce 52       	subi	r28, 0x2E	; 46
    1c76:	de 4f       	sbci	r29, 0xFE	; 254
    1c78:	88 83       	st	Y, r24
    1c7a:	99 83       	std	Y+1, r25	; 0x01
    1c7c:	aa 83       	std	Y+2, r26	; 0x02
    1c7e:	bb 83       	std	Y+3, r27	; 0x03
    1c80:	c2 5d       	subi	r28, 0xD2	; 210
    1c82:	d1 40       	sbci	r29, 0x01	; 1
    1c84:	c2 53       	subi	r28, 0x32	; 50
    1c86:	de 4f       	sbci	r29, 0xFE	; 254
    1c88:	88 83       	st	Y, r24
    1c8a:	99 83       	std	Y+1, r25	; 0x01
    1c8c:	aa 83       	std	Y+2, r26	; 0x02
    1c8e:	bb 83       	std	Y+3, r27	; 0x03
    1c90:	ce 5c       	subi	r28, 0xCE	; 206
    1c92:	d1 40       	sbci	r29, 0x01	; 1
    1c94:	c6 53       	subi	r28, 0x36	; 54
    1c96:	de 4f       	sbci	r29, 0xFE	; 254
    1c98:	88 83       	st	Y, r24
    1c9a:	99 83       	std	Y+1, r25	; 0x01
    1c9c:	aa 83       	std	Y+2, r26	; 0x02
    1c9e:	bb 83       	std	Y+3, r27	; 0x03
    1ca0:	ca 5c       	subi	r28, 0xCA	; 202
    1ca2:	d1 40       	sbci	r29, 0x01	; 1
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1ca4:	24 e3       	ldi	r18, 0x34	; 52
    1ca6:	20 9f       	mul	r18, r16
    1ca8:	c0 01       	movw	r24, r0
    1caa:	21 9f       	mul	r18, r17
    1cac:	90 0d       	add	r25, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	82 5d       	subi	r24, 0xD2	; 210
    1cb2:	97 4d       	sbci	r25, 0xD7	; 215
    1cb4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1cb8:	22 ff       	sbrs	r18, 2
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <report+0x3ec>
    1cbc:	32 e0       	ldi	r19, 0x02	; 2
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <report+0x3f0>
    1cc2:	31 e0       	ldi	r19, 0x01	; 1
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	9f 93       	push	r25
    1cc8:	8f 93       	push	r24
    1cca:	21 e4       	ldi	r18, 0x41	; 65
    1ccc:	2f 93       	push	r18
    1cce:	9b eb       	ldi	r25, 0xBB	; 187
    1cd0:	9f 93       	push	r25
    1cd2:	83 e3       	ldi	r24, 0x33	; 51
    1cd4:	8f 93       	push	r24
    1cd6:	8f 93       	push	r24
    1cd8:	2f 93       	push	r18
    1cda:	9f 93       	push	r25
    1cdc:	8f 93       	push	r24
    1cde:	8f 93       	push	r24
    1ce0:	2f 93       	push	r18
    1ce2:	9f 93       	push	r25
    1ce4:	8f 93       	push	r24
    1ce6:	8f 93       	push	r24
    1ce8:	ce 01       	movw	r24, r28
    1cea:	8a 56       	subi	r24, 0x6A	; 106
    1cec:	9f 4f       	sbci	r25, 0xFF	; 255
    1cee:	9f 93       	push	r25
    1cf0:	8f 93       	push	r24
    1cf2:	4f 93       	push	r20
    1cf4:	3f 93       	push	r19
    1cf6:	84 57       	subi	r24, 0x74	; 116
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	9f 93       	push	r25
    1cfc:	8f 93       	push	r24
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	1f 93       	push	r17
    1d06:	0f 93       	push	r16
    1d08:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1d12:	f8 01       	movw	r30, r16
    1d14:	01 90       	ld	r0, Z+
    1d16:	00 20       	and	r0, r0
    1d18:	e9 f7       	brne	.-6      	; 0x1d14 <report+0x43e>
    1d1a:	31 97       	sbiw	r30, 0x01	; 1
    1d1c:	af 01       	movw	r20, r30
    1d1e:	40 1b       	sub	r20, r16
    1d20:	51 0b       	sbc	r21, r17
    1d22:	b8 01       	movw	r22, r16
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
			get_time(currenttime);
x=y=z=23.4;
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1d30:	51 c1       	rjmp	.+674    	; 0x1fd4 <report+0x6fe>

		case 'p':
			get_time(currenttime);
    1d32:	ce 01       	movw	r24, r28
    1d34:	8a 56       	subi	r24, 0x6A	; 106
    1d36:	9f 4f       	sbci	r25, 0xFF	; 255
    1d38:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    1d3c:	9e 01       	movw	r18, r28
    1d3e:	27 52       	subi	r18, 0x27	; 39
    1d40:	3e 4f       	sbci	r19, 0xFE	; 254
    1d42:	ae 01       	movw	r20, r28
    1d44:	48 52       	subi	r20, 0x28	; 40
    1d46:	5e 4f       	sbci	r21, 0xFE	; 254
    1d48:	be 01       	movw	r22, r28
    1d4a:	69 52       	subi	r22, 0x29	; 41
    1d4c:	7e 4f       	sbci	r23, 0xFE	; 254
    1d4e:	ce 01       	movw	r24, r28
    1d50:	8a 52       	subi	r24, 0x2A	; 42
    1d52:	9e 4f       	sbci	r25, 0xFE	; 254
    1d54:	0e 94 48 0b 	call	0x1690	; 0x1690 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    1d58:	24 e3       	ldi	r18, 0x34	; 52
    1d5a:	20 9f       	mul	r18, r16
    1d5c:	c0 01       	movw	r24, r0
    1d5e:	21 9f       	mul	r18, r17
    1d60:	90 0d       	add	r25, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	82 5d       	subi	r24, 0xD2	; 210
    1d66:	97 4d       	sbci	r25, 0xD7	; 215
    1d68:	c7 52       	subi	r28, 0x27	; 39
    1d6a:	de 4f       	sbci	r29, 0xFE	; 254
    1d6c:	58 81       	ld	r21, Y
    1d6e:	c9 5d       	subi	r28, 0xD9	; 217
    1d70:	d1 40       	sbci	r29, 0x01	; 1
    1d72:	c8 52       	subi	r28, 0x28	; 40
    1d74:	de 4f       	sbci	r29, 0xFE	; 254
    1d76:	48 81       	ld	r20, Y
    1d78:	c8 5d       	subi	r28, 0xD8	; 216
    1d7a:	d1 40       	sbci	r29, 0x01	; 1
    1d7c:	c9 52       	subi	r28, 0x29	; 41
    1d7e:	de 4f       	sbci	r29, 0xFE	; 254
    1d80:	38 81       	ld	r19, Y
    1d82:	c7 5d       	subi	r28, 0xD7	; 215
    1d84:	d1 40       	sbci	r29, 0x01	; 1
    1d86:	ca 52       	subi	r28, 0x2A	; 42
    1d88:	de 4f       	sbci	r29, 0xFE	; 254
    1d8a:	28 81       	ld	r18, Y
    1d8c:	c6 5d       	subi	r28, 0xD6	; 214
    1d8e:	d1 40       	sbci	r29, 0x01	; 1
    1d90:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d94:	62 ff       	sbrs	r22, 2
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <report+0x4c8>
    1d98:	62 e0       	ldi	r22, 0x02	; 2
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <report+0x4cc>
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	1f 92       	push	r1
    1da8:	5f 93       	push	r21
    1daa:	1f 92       	push	r1
    1dac:	4f 93       	push	r20
    1dae:	1f 92       	push	r1
    1db0:	3f 93       	push	r19
    1db2:	1f 92       	push	r1
    1db4:	2f 93       	push	r18
    1db6:	ce 01       	movw	r24, r28
    1db8:	8a 56       	subi	r24, 0x6A	; 106
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	9f 93       	push	r25
    1dbe:	8f 93       	push	r24
    1dc0:	7f 93       	push	r23
    1dc2:	6f 93       	push	r22
    1dc4:	84 55       	subi	r24, 0x54	; 84
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	9f 93       	push	r25
    1dca:	8f 93       	push	r24
    1dcc:	8e 01       	movw	r16, r28
    1dce:	0f 5f       	subi	r16, 0xFF	; 255
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	1f 93       	push	r17
    1dd4:	0f 93       	push	r16
    1dd6:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1dda:	c8 01       	movw	r24, r16
    1ddc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1de0:	f8 01       	movw	r30, r16
    1de2:	01 90       	ld	r0, Z+
    1de4:	00 20       	and	r0, r0
    1de6:	e9 f7       	brne	.-6      	; 0x1de2 <report+0x50c>
    1de8:	31 97       	sbiw	r30, 0x01	; 1
    1dea:	af 01       	movw	r20, r30
    1dec:	40 1b       	sub	r20, r16
    1dee:	51 0b       	sbc	r21, r17
    1df0:	b8 01       	movw	r22, r16
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
			get_time(currenttime);
			read_PNEUSENSORS(&shutter, &left, &right, &air);
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1dfe:	ea c0       	rjmp	.+468    	; 0x1fd4 <report+0x6fe>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    1e00:	ce 01       	movw	r24, r28
    1e02:	8a 56       	subi	r24, 0x6A	; 106
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    1e0a:	24 e1       	ldi	r18, 0x14	; 20
    1e0c:	ae 01       	movw	r20, r28
    1e0e:	46 55       	subi	r20, 0x56	; 86
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	80 ea       	ldi	r24, 0xA0	; 160
    1e18:	0e 94 1c 06 	call	0xc38	; 0xc38 <read_FRAM>
			get_BOOTTIME(boottime);
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	82 54       	subi	r24, 0x42	; 66
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	0e 94 d2 05 	call	0xba4	; 0xba4 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    1e26:	24 e3       	ldi	r18, 0x34	; 52
    1e28:	20 9f       	mul	r18, r16
    1e2a:	c0 01       	movw	r24, r0
    1e2c:	21 9f       	mul	r18, r17
    1e2e:	90 0d       	add	r25, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	82 5d       	subi	r24, 0xD2	; 210
    1e34:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    1e36:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1e3a:	22 ff       	sbrs	r18, 2
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <report+0x56e>
    1e3e:	22 e0       	ldi	r18, 0x02	; 2
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <report+0x572>
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	9f 93       	push	r25
    1e4a:	8f 93       	push	r24
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	82 54       	subi	r24, 0x42	; 66
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	9f 93       	push	r25
    1e54:	8f 93       	push	r24
    1e56:	44 97       	sbiw	r24, 0x14	; 20
    1e58:	9f 93       	push	r25
    1e5a:	8f 93       	push	r24
    1e5c:	44 97       	sbiw	r24, 0x14	; 20
    1e5e:	9f 93       	push	r25
    1e60:	8f 93       	push	r24
    1e62:	3f 93       	push	r19
    1e64:	2f 93       	push	r18
    1e66:	83 52       	subi	r24, 0x23	; 35
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	8e 01       	movw	r16, r28
    1e70:	0f 5f       	subi	r16, 0xFF	; 255
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	1f 93       	push	r17
    1e76:	0f 93       	push	r16
    1e78:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e82:	f8 01       	movw	r30, r16
    1e84:	01 90       	ld	r0, Z+
    1e86:	00 20       	and	r0, r0
    1e88:	e9 f7       	brne	.-6      	; 0x1e84 <report+0x5ae>
    1e8a:	31 97       	sbiw	r30, 0x01	; 1
    1e8c:	af 01       	movw	r20, r30
    1e8e:	40 1b       	sub	r20, r16
    1e90:	51 0b       	sbc	r21, r17
    1e92:	b8 01       	movw	r22, r16
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1ea0:	99 c0       	rjmp	.+306    	; 0x1fd4 <report+0x6fe>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <read_ionpump>
    1ea8:	f6 2e       	mov	r15, r22
    1eaa:	e7 2e       	mov	r14, r23
    1eac:	d8 2e       	mov	r13, r24
    1eae:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <read_ionpump>
    1eb6:	b6 2e       	mov	r11, r22
    1eb8:	a7 2e       	mov	r10, r23
    1eba:	98 2e       	mov	r9, r24
    1ebc:	89 2e       	mov	r8, r25
			get_time(currenttime);
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	8a 56       	subi	r24, 0x6A	; 106
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    1ec8:	24 e3       	ldi	r18, 0x34	; 52
    1eca:	20 9f       	mul	r18, r16
    1ecc:	c0 01       	movw	r24, r0
    1ece:	21 9f       	mul	r18, r17
    1ed0:	90 0d       	add	r25, r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	82 5d       	subi	r24, 0xD2	; 210
    1ed6:	97 4d       	sbci	r25, 0xD7	; 215
    1ed8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1edc:	22 ff       	sbrs	r18, 2
    1ede:	03 c0       	rjmp	.+6      	; 0x1ee6 <report+0x610>
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <report+0x614>
    1ee6:	21 e0       	ldi	r18, 0x01	; 1
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	9f 93       	push	r25
    1eec:	8f 93       	push	r24
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	ce 01       	movw	r24, r28
    1f00:	8a 56       	subi	r24, 0x6A	; 106
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	3f 93       	push	r19
    1f0a:	2f 93       	push	r18
    1f0c:	86 50       	subi	r24, 0x06	; 6
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	8e 01       	movw	r16, r28
    1f16:	0f 5f       	subi	r16, 0xFF	; 255
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	1f 93       	push	r17
    1f1c:	0f 93       	push	r16
    1f1e:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1f22:	c8 01       	movw	r24, r16
    1f24:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1f28:	f8 01       	movw	r30, r16
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	00 20       	and	r0, r0
    1f2e:	e9 f7       	brne	.-6      	; 0x1f2a <report+0x654>
    1f30:	31 97       	sbiw	r30, 0x01	; 1
    1f32:	af 01       	movw	r20, r30
    1f34:	40 1b       	sub	r20, r16
    1f36:	51 0b       	sbc	r21, r17
    1f38:	b8 01       	movw	r22, r16
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
			bluvac = read_ionpump(BLUEPUMP);
			get_time(currenttime);
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1f46:	46 c0       	rjmp	.+140    	; 0x1fd4 <report+0x6fe>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    1f48:	ce 01       	movw	r24, r28
    1f4a:	85 57       	subi	r24, 0x75	; 117
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <get_VERSION>
			get_time(currenttime);
    1f52:	ce 01       	movw	r24, r28
    1f54:	8a 56       	subi	r24, 0x6A	; 106
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    1f5c:	24 e3       	ldi	r18, 0x34	; 52
    1f5e:	20 9f       	mul	r18, r16
    1f60:	c0 01       	movw	r24, r0
    1f62:	21 9f       	mul	r18, r17
    1f64:	90 0d       	add	r25, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	82 5d       	subi	r24, 0xD2	; 210
    1f6a:	97 4d       	sbci	r25, 0xD7	; 215
    1f6c:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f70:	22 ff       	sbrs	r18, 2
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <report+0x6a4>
    1f74:	22 e0       	ldi	r18, 0x02	; 2
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <report+0x6a8>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	ce 01       	movw	r24, r28
    1f84:	85 57       	subi	r24, 0x75	; 117
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	9f 93       	push	r25
    1f8a:	8f 93       	push	r24
    1f8c:	0b 96       	adiw	r24, 0x0b	; 11
    1f8e:	9f 93       	push	r25
    1f90:	8f 93       	push	r24
    1f92:	3f 93       	push	r19
    1f94:	2f 93       	push	r18
    1f96:	8d 5d       	subi	r24, 0xDD	; 221
    1f98:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9a:	9f 93       	push	r25
    1f9c:	8f 93       	push	r24
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	0f 5f       	subi	r16, 0xFF	; 255
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	1f 93       	push	r17
    1fa6:	0f 93       	push	r16
    1fa8:	0e 94 25 1a 	call	0x344a	; 0x344a <sprintf>
			checksum_NMEA(outbuf);
    1fac:	c8 01       	movw	r24, r16
    1fae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	01 90       	ld	r0, Z+
    1fb6:	00 20       	and	r0, r0
    1fb8:	e9 f7       	brne	.-6      	; 0x1fb4 <report+0x6de>
    1fba:	31 97       	sbiw	r30, 0x01	; 1
    1fbc:	af 01       	movw	r20, r30
    1fbe:	40 1b       	sub	r20, r16
    1fc0:	51 0b       	sbc	r21, r17
    1fc2:	b8 01       	movw	r22, r16
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	0e 94 66 11 	call	0x22cc	; 0x22cc <send_USART>
			break;
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1fce:	80 e0       	ldi	r24, 0x00	; 0
			get_VERSION(version);	// Send the specMech version
			get_time(currenttime);
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <report+0x6fe>

		default:
			return(ERRORPROMPT);
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    1fd4:	c9 51       	subi	r28, 0x19	; 25
    1fd6:	de 4f       	sbci	r29, 0xFE	; 254
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	cf 90       	pop	r12
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	9f 90       	pop	r9
    1ff2:	8f 90       	pop	r8
    1ff4:	7f 90       	pop	r7
    1ff6:	6f 90       	pop	r6
    1ff8:	5f 90       	pop	r5
    1ffa:	4f 90       	pop	r4
    1ffc:	3f 90       	pop	r3
    1ffe:	2f 90       	pop	r2
    2000:	08 95       	ret

00002002 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    2002:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2004:	e0 e6       	ldi	r30, 0x60	; 96
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    200a:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    200c:	88 ed       	ldi	r24, 0xD8	; 216
    200e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2010:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <init_RTC+0x14>
		asm("nop");
    2014:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2016:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    201a:	96 fd       	sbrc	r25, 6
    201c:	fb cf       	rjmp	.-10     	; 0x2014 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    201e:	e0 e6       	ldi	r30, 0x60	; 96
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2024:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2026:	28 ed       	ldi	r18, 0xD8	; 216
    2028:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    202a:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    202c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    202e:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2030:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2032:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <init_RTC+0x36>
		asm("nop");
    2036:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2038:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    203c:	91 11       	cpse	r25, r1
    203e:	fb cf       	rjmp	.-10     	; 0x2036 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2040:	e0 e4       	ldi	r30, 0x40	; 64
    2042:	f1 e0       	ldi	r31, 0x01	; 1
    2044:	42 87       	std	Z+10, r20	; 0x0a
    2046:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    204c:	85 81       	ldd	r24, Z+5	; 0x05
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2052:	81 eb       	ldi	r24, 0xB1	; 177
    2054:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	81 60       	ori	r24, 0x01	; 1
    205a:	82 83       	std	Z+2, r24	; 0x02
    205c:	08 95       	ret

0000205e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2086:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    208a:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	b9 f0       	breq	.+46     	; 0x20c0 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2092:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    2096:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	58 f4       	brcc	.+22     	; 0x20b6 <__vector_3+0x58>
			clear_OLED(0);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	0e 94 10 0b 	call	0x1620	; 0x1620 <clear_OLED>
			clear_OLED(1);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <clear_OLED>
			timerOLED = 0;
    20ac:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    20b0:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    20b4:	05 c0       	rjmp	.+10     	; 0x20c0 <__vector_3+0x62>
		} else {
			timerOLED++;
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    20bc:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	24 e3       	ldi	r18, 0x34	; 52
    20f0:	28 9f       	mul	r18, r24
    20f2:	f0 01       	movw	r30, r0
    20f4:	29 9f       	mul	r18, r25
    20f6:	f0 0d       	add	r31, r0
    20f8:	11 24       	eor	r1, r1
    20fa:	ed 5f       	subi	r30, 0xFD	; 253
    20fc:	f7 4d       	sbci	r31, 0xD7	; 215
    20fe:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2100:	24 37       	cpi	r18, 0x74	; 116
    2102:	e9 f4       	brne	.+58     	; 0x213e <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2104:	24 e3       	ldi	r18, 0x34	; 52
    2106:	28 9f       	mul	r18, r24
    2108:	e0 01       	movw	r28, r0
    210a:	29 9f       	mul	r18, r25
    210c:	d0 0d       	add	r29, r0
    210e:	11 24       	eor	r1, r1
    2110:	cb 5f       	subi	r28, 0xFB	; 251
    2112:	d7 4d       	sbci	r29, 0xD7	; 215
    2114:	fe 01       	movw	r30, r28
    2116:	01 90       	ld	r0, Z+
    2118:	00 20       	and	r0, r0
    211a:	e9 f7       	brne	.-6      	; 0x2116 <set+0x2e>
    211c:	31 97       	sbiw	r30, 0x01	; 1
    211e:	ec 1b       	sub	r30, r28
    2120:	fd 0b       	sbc	r31, r29
    2122:	73 97       	sbiw	r30, 0x13	; 19
    2124:	71 f4       	brne	.+28     	; 0x2142 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2126:	ce 01       	movw	r24, r28
    2128:	0e 94 ba 05 	call	0xb74	; 0xb74 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    212c:	24 e1       	ldi	r18, 0x14	; 20
    212e:	ae 01       	movw	r20, r28
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	80 ea       	ldi	r24, 0xA0	; 160
    2136:	0e 94 5e 06 	call	0xcbc	; 0xcbc <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2142:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    214a:	e0 ea       	ldi	r30, 0xA0	; 160
    214c:	f4 e0       	ldi	r31, 0x04	; 4
    214e:	82 89       	ldd	r24, Z+18	; 0x12
    2150:	87 7f       	andi	r24, 0xF7	; 247
    2152:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	82 83       	std	Z+2, r24	; 0x02
    2158:	08 95       	ret

0000215a <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	18 f0       	brcs	.+6      	; 0x2164 <get_temperature+0xa>
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	21 f0       	breq	.+8      	; 0x216a <get_temperature+0x10>
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2164:	0e 94 25 01 	call	0x24a	; 0x24a <read_AD590>
			break;
    2168:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    216a:	0e 94 f8 07 	call	0xff0	; 0xff0 <read_MCP9808>
			break;
    216e:	08 95       	ret
		default:
			temperature = -999.9;
    2170:	6a e9       	ldi	r22, 0x9A	; 154
    2172:	79 ef       	ldi	r23, 0xF9	; 249
    2174:	89 e7       	ldi	r24, 0x79	; 121
    2176:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2178:	08 95       	ret

0000217a <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    217a:	e0 ea       	ldi	r30, 0xA0	; 160
    217c:	f8 e0       	ldi	r31, 0x08	; 8
    217e:	8b e0       	ldi	r24, 0x0B	; 11
    2180:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2182:	83 81       	ldd	r24, Z+3	; 0x03
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2188:	85 81       	ldd	r24, Z+5	; 0x05
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	85 83       	std	Z+5, r24	; 0x05
    218e:	08 95       	ret

00002190 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2192:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2194:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2198:	88 23       	and	r24, r24
    219a:	dc f7       	brge	.-10     	; 0x2192 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    219c:	e0 ea       	ldi	r30, 0xA0	; 160
    219e:	f8 e0       	ldi	r31, 0x08	; 8
    21a0:	84 81       	ldd	r24, Z+4	; 0x04
    21a2:	8b 7f       	andi	r24, 0xFB	; 251
    21a4:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    21a6:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    21a8:	94 81       	ldd	r25, Z+4	; 0x04
    21aa:	92 60       	ori	r25, 0x02	; 2
    21ac:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    21ae:	08 95       	ret

000021b0 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <readlast_TWI+0x4>
		asm("nop");
    21b2:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    21b4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    21b8:	88 23       	and	r24, r24
    21ba:	dc f7       	brge	.-10     	; 0x21b2 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    21bc:	e0 ea       	ldi	r30, 0xA0	; 160
    21be:	f8 e0       	ldi	r31, 0x08	; 8
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	84 60       	ori	r24, 0x04	; 4
    21c4:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    21c6:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    21c8:	08 95       	ret

000021ca <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    21ca:	61 30       	cpi	r22, 0x01	; 1
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <start_TWI+0x8>
		addr |= 0x01;
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <start_TWI+0xa>
	} else {
		addr &= ~0x01;
    21d2:	8e 7f       	andi	r24, 0xFE	; 254
	}

	TWI0.MADDR = addr;							// Start condition
    21d4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <start_TWI+0x12>
		asm("nop");								// Wait for addr transmission
    21da:	00 00       	nop
		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    21dc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    21e0:	80 7c       	andi	r24, 0xC0	; 192
    21e2:	d9 f3       	breq	.-10     	; 0x21da <start_TWI+0x10>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    21e4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    21e8:	82 fd       	sbrc	r24, 2
    21ea:	0c c0       	rjmp	.+24     	; 0x2204 <start_TWI+0x3a>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    21ec:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    21f0:	83 fd       	sbrc	r24, 3
    21f2:	0a c0       	rjmp	.+20     	; 0x2208 <start_TWI+0x3e>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    21f4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    21f8:	89 2f       	mov	r24, r25
    21fa:	80 71       	andi	r24, 0x10	; 16
    21fc:	94 ff       	sbrs	r25, 4
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <start_TWI+0x40>
		return(TWINODEVICE);
    2200:	84 e0       	ldi	r24, 0x04	; 4
    2202:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2208:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    220a:	08 95       	ret

0000220c <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    220c:	87 e0       	ldi	r24, 0x07	; 7
    220e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2212:	08 95       	ret

00002214 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <write_TWI+0x4>
		asm("nop");
    2216:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2218:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    221c:	96 ff       	sbrs	r25, 6
    221e:	fb cf       	rjmp	.-10     	; 0x2216 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2220:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <write_TWI+0x14>
		asm("nop");
    2226:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2228:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    222c:	86 ff       	sbrs	r24, 6
    222e:	fb cf       	rjmp	.-10     	; 0x2226 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2230:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2234:	89 2f       	mov	r24, r25
    2236:	80 71       	andi	r24, 0x10	; 16
    2238:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    223a:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    223c:	08 95       	ret

0000223e <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    223e:	e0 e0       	ldi	r30, 0x00	; 0
    2240:	f4 e0       	ldi	r31, 0x04	; 4
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2246:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2248:	e0 e0       	ldi	r30, 0x00	; 0
    224a:	f8 e0       	ldi	r31, 0x08	; 8
    224c:	2d e6       	ldi	r18, 0x6D	; 109
    224e:	35 e0       	ldi	r19, 0x05	; 5
    2250:	20 87       	std	Z+8, r18	; 0x08
    2252:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2254:	95 81       	ldd	r25, Z+5	; 0x05
    2256:	90 68       	ori	r25, 0x80	; 128
    2258:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    225a:	96 81       	ldd	r25, Z+6	; 0x06
    225c:	90 64       	ori	r25, 0x40	; 64
    225e:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2260:	96 81       	ldd	r25, Z+6	; 0x06
    2262:	90 68       	ori	r25, 0x80	; 128
    2264:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2266:	10 92 99 2b 	sts	0x2B99, r1	; 0x802b99 <send0_buf+0x80>
	send0_buf.tail = 0;
    226a:	10 92 9a 2b 	sts	0x2B9A, r1	; 0x802b9a <send0_buf+0x81>
	send0_buf.done = YES;
    226e:	80 93 9d 2b 	sts	0x2B9D, r24	; 0x802b9d <send0_buf+0x84>
	recv0_buf.head = 0;
    2272:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv0_buf+0x80>
	recv0_buf.tail = 0;
    2276:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv0_buf+0x81>
	recv0_buf.data[0] = '\0';
    227a:	10 92 94 2a 	sts	0x2A94, r1	; 0x802a94 <recv0_buf>
	recv0_buf.done = NO;
    227e:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv0_buf+0x84>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2282:	e0 e4       	ldi	r30, 0x40	; 64
    2284:	f4 e0       	ldi	r31, 0x04	; 4
    2286:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2288:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    228a:	e0 e2       	ldi	r30, 0x20	; 32
    228c:	f8 e0       	ldi	r31, 0x08	; 8
    228e:	20 87       	std	Z+8, r18	; 0x08
    2290:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    2292:	96 81       	ldd	r25, Z+6	; 0x06
    2294:	90 64       	ori	r25, 0x40	; 64
    2296:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    2298:	96 81       	ldd	r25, Z+6	; 0x06
    229a:	90 68       	ori	r25, 0x80	; 128
    229c:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.done = YES;
    229e:	80 93 2c 2d 	sts	0x2D2C, r24	; 0x802d2c <send1_buf+0x84>
	recv1_buf.done = NO;
    22a2:	10 92 93 2a 	sts	0x2A93, r1	; 0x802a93 <recv1_buf+0x84>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    22a6:	e0 e2       	ldi	r30, 0x20	; 32
    22a8:	f4 e0       	ldi	r31, 0x04	; 4
    22aa:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    22ac:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    22ae:	e0 e6       	ldi	r30, 0x60	; 96
    22b0:	f8 e0       	ldi	r31, 0x08	; 8
    22b2:	20 87       	std	Z+8, r18	; 0x08
    22b4:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    22b6:	96 81       	ldd	r25, Z+6	; 0x06
    22b8:	90 64       	ori	r25, 0x40	; 64
    22ba:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    22bc:	96 81       	ldd	r25, Z+6	; 0x06
    22be:	90 68       	ori	r25, 0x80	; 128
    22c0:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    22c2:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <send3_buf+0x84>
	recv3_buf.done = NO;
    22c6:	10 92 22 2c 	sts	0x2C22, r1	; 0x802c22 <recv3_buf+0x84>
    22ca:	08 95       	ret

000022cc <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    22cc:	fb 01       	movw	r30, r22

	uint8_t i;

	switch (port) {
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <send_USART+0x8>
    22d2:	40 c0       	rjmp	.+128    	; 0x2354 <send_USART+0x88>
    22d4:	e8 f0       	brcs	.+58     	; 0x2310 <send_USART+0x44>
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	09 f4       	brne	.+2      	; 0x22dc <send_USART+0x10>
    22da:	5e c0       	rjmp	.+188    	; 0x2398 <send_USART+0xcc>
    22dc:	08 95       	ret
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    22de:	80 91 99 2b 	lds	r24, 0x2B99	; 0x802b99 <send0_buf+0x80>
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	bf 01       	movw	r22, r30
    22e6:	6f 5f       	subi	r22, 0xFF	; 255
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	30 81       	ld	r19, Z
    22ec:	fc 01       	movw	r30, r24
    22ee:	e7 5e       	subi	r30, 0xE7	; 231
    22f0:	f4 4d       	sbci	r31, 0xD4	; 212
    22f2:	30 83       	st	Z, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	8f 77       	andi	r24, 0x7F	; 127
    22f8:	90 78       	andi	r25, 0x80	; 128
    22fa:	99 23       	and	r25, r25
    22fc:	24 f4       	brge	.+8      	; 0x2306 <send_USART+0x3a>
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	80 68       	ori	r24, 0x80	; 128
    2302:	9f 6f       	ori	r25, 0xFF	; 255
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	80 93 99 2b 	sts	0x2B99, r24	; 0x802b99 <send0_buf+0x80>

	uint8_t i;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    230a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    230c:	fb 01       	movw	r30, r22
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <send_USART+0x46>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2310:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2312:	24 17       	cp	r18, r20
    2314:	20 f3       	brcs	.-56     	; 0x22de <send_USART+0x12>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2316:	e0 e0       	ldi	r30, 0x00	; 0
    2318:	f8 e0       	ldi	r31, 0x08	; 8
    231a:	85 81       	ldd	r24, Z+5	; 0x05
    231c:	80 62       	ori	r24, 0x20	; 32
    231e:	85 83       	std	Z+5, r24	; 0x05
			break;
    2320:	08 95       	ret

		case 1:
			for (i = 0; i < nbytes; i++) {
				send1_buf.data[send1_buf.head] = *data++;
    2322:	80 91 28 2d 	lds	r24, 0x2D28	; 0x802d28 <send1_buf+0x80>
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	bf 01       	movw	r22, r30
    232a:	6f 5f       	subi	r22, 0xFF	; 255
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	30 81       	ld	r19, Z
    2330:	fc 01       	movw	r30, r24
    2332:	e8 55       	subi	r30, 0x58	; 88
    2334:	f3 4d       	sbci	r31, 0xD3	; 211
    2336:	30 83       	st	Z, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	8f 77       	andi	r24, 0x7F	; 127
    233c:	90 78       	andi	r25, 0x80	; 128
    233e:	99 23       	and	r25, r25
    2340:	24 f4       	brge	.+8      	; 0x234a <send_USART+0x7e>
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	9f 6f       	ori	r25, 0xFF	; 255
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	80 93 28 2d 	sts	0x2D28, r24	; 0x802d28 <send1_buf+0x80>
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    234e:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2350:	fb 01       	movw	r30, r22
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <send_USART+0x8a>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2354:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    2356:	24 17       	cp	r18, r20
    2358:	20 f3       	brcs	.-56     	; 0x2322 <send_USART+0x56>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    235a:	e0 e2       	ldi	r30, 0x20	; 32
    235c:	f8 e0       	ldi	r31, 0x08	; 8
    235e:	85 81       	ldd	r24, Z+5	; 0x05
    2360:	80 62       	ori	r24, 0x20	; 32
    2362:	85 83       	std	Z+5, r24	; 0x05
			break;
    2364:	08 95       	ret

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2366:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <send3_buf+0x80>
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	bf 01       	movw	r22, r30
    236e:	6f 5f       	subi	r22, 0xFF	; 255
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	30 81       	ld	r19, Z
    2374:	fc 01       	movw	r30, r24
    2376:	ed 5d       	subi	r30, 0xDD	; 221
    2378:	f3 4d       	sbci	r31, 0xD3	; 211
    237a:	30 83       	st	Z, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	8f 77       	andi	r24, 0x7F	; 127
    2380:	90 78       	andi	r25, 0x80	; 128
    2382:	99 23       	and	r25, r25
    2384:	24 f4       	brge	.+8      	; 0x238e <send_USART+0xc2>
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	80 68       	ori	r24, 0x80	; 128
    238a:	9f 6f       	ori	r25, 0xFF	; 255
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	80 93 a3 2c 	sts	0x2CA3, r24	; 0x802ca3 <send3_buf+0x80>
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2392:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    2394:	fb 01       	movw	r30, r22
    2396:	01 c0       	rjmp	.+2      	; 0x239a <send_USART+0xce>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2398:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    239a:	24 17       	cp	r18, r20
    239c:	20 f3       	brcs	.-56     	; 0x2366 <send_USART+0x9a>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    239e:	e0 e6       	ldi	r30, 0x60	; 96
    23a0:	f8 e0       	ldi	r31, 0x08	; 8
    23a2:	85 81       	ldd	r24, Z+5	; 0x05
    23a4:	80 62       	ori	r24, 0x20	; 32
    23a6:	85 83       	std	Z+5, r24	; 0x05
    23a8:	08 95       	ret

000023aa <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    23aa:	1f 92       	push	r1
    23ac:	0f 92       	push	r0
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	0f 92       	push	r0
    23b2:	11 24       	eor	r1, r1
    23b4:	8f 93       	push	r24
    23b6:	9f 93       	push	r25
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    23bc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    23c0:	8d 30       	cpi	r24, 0x0D	; 13
    23c2:	51 f4       	brne	.+20     	; 0x23d8 <__vector_17+0x2e>
		recv0_buf.done = YES;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	80 93 18 2b 	sts	0x2B18, r24	; 0x802b18 <recv0_buf+0x84>
		recv0_buf.data[recv0_buf.head] = '\0';
    23ca:	e0 91 14 2b 	lds	r30, 0x2B14	; 0x802b14 <recv0_buf+0x80>
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	ec 56       	subi	r30, 0x6C	; 108
    23d2:	f5 4d       	sbci	r31, 0xD5	; 213
    23d4:	10 82       	st	Z, r1
    23d6:	06 c0       	rjmp	.+12     	; 0x23e4 <__vector_17+0x3a>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    23d8:	e0 91 14 2b 	lds	r30, 0x2B14	; 0x802b14 <recv0_buf+0x80>
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	ec 56       	subi	r30, 0x6C	; 108
    23e0:	f5 4d       	sbci	r31, 0xD5	; 213
    23e2:	80 83       	st	Z, r24
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    23e4:	80 91 14 2b 	lds	r24, 0x2B14	; 0x802b14 <recv0_buf+0x80>
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	8f 77       	andi	r24, 0x7F	; 127
    23ee:	90 78       	andi	r25, 0x80	; 128
    23f0:	99 23       	and	r25, r25
    23f2:	24 f4       	brge	.+8      	; 0x23fc <__vector_17+0x52>
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	9f 6f       	ori	r25, 0xFF	; 255
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	80 93 14 2b 	sts	0x2B14, r24	; 0x802b14 <recv0_buf+0x80>

}
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	0f 90       	pop	r0
    240e:	1f 90       	pop	r1
    2410:	18 95       	reti

00002412 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	ef 93       	push	r30
    2422:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2424:	e0 e0       	ldi	r30, 0x00	; 0
    2426:	f8 e0       	ldi	r31, 0x08	; 8
    2428:	85 81       	ldd	r24, Z+5	; 0x05
    242a:	8f 7d       	andi	r24, 0xDF	; 223
    242c:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    242e:	80 91 99 2b 	lds	r24, 0x2B99	; 0x802b99 <send0_buf+0x80>
    2432:	e0 91 9a 2b 	lds	r30, 0x2B9A	; 0x802b9a <send0_buf+0x81>
    2436:	8e 17       	cp	r24, r30
    2438:	81 f0       	breq	.+32     	; 0x245a <__vector_18+0x48>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	8e 0f       	add	r24, r30
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	e7 5e       	subi	r30, 0xE7	; 231
    2442:	f4 4d       	sbci	r31, 0xD4	; 212
    2444:	90 81       	ld	r25, Z
    2446:	e0 e0       	ldi	r30, 0x00	; 0
    2448:	f8 e0       	ldi	r31, 0x08	; 8
    244a:	92 83       	std	Z+2, r25	; 0x02
		send0_buf.tail %= BUFSIZE;
    244c:	8f 77       	andi	r24, 0x7F	; 127
    244e:	80 93 9a 2b 	sts	0x2B9A, r24	; 0x802b9a <send0_buf+0x81>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2452:	85 81       	ldd	r24, Z+5	; 0x05
    2454:	80 62       	ori	r24, 0x20	; 32
    2456:	85 83       	std	Z+5, r24	; 0x05
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <__vector_18+0x4e>
	} else {
		send0_buf.done = YES;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	80 93 9d 2b 	sts	0x2B9D, r24	; 0x802b9d <send0_buf+0x84>
	}

}
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	0f 90       	pop	r0
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	0f 90       	pop	r0
    246e:	1f 90       	pop	r1
    2470:	18 95       	reti

00002472 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	8f 93       	push	r24
    247e:	9f 93       	push	r25
    2480:	af 93       	push	r26
    2482:	bf 93       	push	r27
    2484:	ef 93       	push	r30
    2486:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2488:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    248c:	8d 30       	cpi	r24, 0x0D	; 13
    248e:	21 f0       	breq	.+8      	; 0x2498 <__vector_26+0x26>
    2490:	e0 91 92 2a 	lds	r30, 0x2A92	; 0x802a92 <recv1_buf+0x83>
    2494:	ef 37       	cpi	r30, 0x7F	; 127
    2496:	78 f0       	brcs	.+30     	; 0x24b6 <__vector_26+0x44>
		recv1_buf.done = YES;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	80 93 93 2a 	sts	0x2A93, r24	; 0x802a93 <recv1_buf+0x84>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    249e:	a2 e9       	ldi	r26, 0x92	; 146
    24a0:	ba e2       	ldi	r27, 0x2A	; 42
    24a2:	8c 91       	ld	r24, X
    24a4:	e8 2f       	mov	r30, r24
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	e1 5f       	subi	r30, 0xF1	; 241
    24aa:	f5 4d       	sbci	r31, 0xD5	; 213
    24ac:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    24ae:	80 93 91 2a 	sts	0x2A91, r24	; 0x802a91 <recv1_buf+0x82>
		recv1_buf.nxfrd = 0;
    24b2:	1c 92       	st	X, r1
		return;
    24b4:	08 c0       	rjmp	.+16     	; 0x24c6 <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	9e 0f       	add	r25, r30
    24ba:	90 93 92 2a 	sts	0x2A92, r25	; 0x802a92 <recv1_buf+0x83>
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	e1 5f       	subi	r30, 0xF1	; 241
    24c2:	f5 4d       	sbci	r31, 0xD5	; 213
    24c4:	80 83       	st	Z, r24
	}

}
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	0f 92       	push	r0
    24e4:	11 24       	eor	r1, r1
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	ef 93       	push	r30
    24f0:	ff 93       	push	r31

	USART1.TXDATAL = send1_buf.data[send1_buf.nxfrd++];
    24f2:	ab e2       	ldi	r26, 0x2B	; 43
    24f4:	bd e2       	ldi	r27, 0x2D	; 45
    24f6:	ec 91       	ld	r30, X
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8e 0f       	add	r24, r30
    24fc:	8c 93       	st	X, r24
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	e8 55       	subi	r30, 0x58	; 88
    2502:	f3 4d       	sbci	r31, 0xD3	; 211
    2504:	90 81       	ld	r25, Z
    2506:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
    250a:	90 91 2a 2d 	lds	r25, 0x2D2A	; 0x802d2a <send1_buf+0x82>
    250e:	89 17       	cp	r24, r25
    2510:	40 f0       	brcs	.+16     	; 0x2522 <__vector_27+0x46>
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2512:	e0 e2       	ldi	r30, 0x20	; 32
    2514:	f8 e0       	ldi	r31, 0x08	; 8
    2516:	85 81       	ldd	r24, Z+5	; 0x05
    2518:	8f 7d       	andi	r24, 0xDF	; 223
    251a:	85 83       	std	Z+5, r24	; 0x05
		send1_buf.done = YES;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 93 2c 2d 	sts	0x2D2C, r24	; 0x802d2c <send1_buf+0x84>
	}

}
    2522:	ff 91       	pop	r31
    2524:	ef 91       	pop	r30
    2526:	bf 91       	pop	r27
    2528:	af 91       	pop	r26
    252a:	9f 91       	pop	r25
    252c:	8f 91       	pop	r24
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	8f 93       	push	r24
    2544:	9f 93       	push	r25
    2546:	af 93       	push	r26
    2548:	bf 93       	push	r27
    254a:	ef 93       	push	r30
    254c:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    254e:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2552:	8d 30       	cpi	r24, 0x0D	; 13
    2554:	21 f0       	breq	.+8      	; 0x255e <__vector_37+0x26>
    2556:	e0 91 21 2c 	lds	r30, 0x2C21	; 0x802c21 <recv3_buf+0x83>
    255a:	ef 37       	cpi	r30, 0x7F	; 127
    255c:	78 f0       	brcs	.+30     	; 0x257c <__vector_37+0x44>
		recv3_buf.done = YES;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <recv3_buf+0x84>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2564:	a1 e2       	ldi	r26, 0x21	; 33
    2566:	bc e2       	ldi	r27, 0x2C	; 44
    2568:	8c 91       	ld	r24, X
    256a:	e8 2f       	mov	r30, r24
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	e2 56       	subi	r30, 0x62	; 98
    2570:	f4 4d       	sbci	r31, 0xD4	; 212
    2572:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2574:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <recv3_buf+0x82>
		recv3_buf.nxfrd = 0;
    2578:	1c 92       	st	X, r1
		return;
    257a:	08 c0       	rjmp	.+16     	; 0x258c <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	9e 0f       	add	r25, r30
    2580:	90 93 21 2c 	sts	0x2C21, r25	; 0x802c21 <recv3_buf+0x83>
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	e2 56       	subi	r30, 0x62	; 98
    2588:	f4 4d       	sbci	r31, 0xD4	; 212
    258a:	80 83       	st	Z, r24
	}

}
    258c:	ff 91       	pop	r31
    258e:	ef 91       	pop	r30
    2590:	bf 91       	pop	r27
    2592:	af 91       	pop	r26
    2594:	9f 91       	pop	r25
    2596:	8f 91       	pop	r24
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    25b8:	a6 ea       	ldi	r26, 0xA6	; 166
    25ba:	bc e2       	ldi	r27, 0x2C	; 44
    25bc:	ec 91       	ld	r30, X
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	8e 0f       	add	r24, r30
    25c2:	8c 93       	st	X, r24
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	ed 5d       	subi	r30, 0xDD	; 221
    25c8:	f3 4d       	sbci	r31, 0xD3	; 211
    25ca:	90 81       	ld	r25, Z
    25cc:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    25d0:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <send3_buf+0x82>
    25d4:	89 17       	cp	r24, r25
    25d6:	40 f0       	brcs	.+16     	; 0x25e8 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    25d8:	e0 e6       	ldi	r30, 0x60	; 96
    25da:	f8 e0       	ldi	r31, 0x08	; 8
    25dc:	85 81       	ldd	r24, Z+5	; 0x05
    25de:	8f 7d       	andi	r24, 0xDF	; 223
    25e0:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <send3_buf+0x84>
	}

}
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	bf 91       	pop	r27
    25ee:	af 91       	pop	r26
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	0f 90       	pop	r0
    25fa:	1f 90       	pop	r1
    25fc:	18 95       	reti

000025fe <reboot>:
#include "globals.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    25fe:	88 ed       	ldi	r24, 0xD8	; 216
    2600:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2608:	08 95       	ret

0000260a <__subsf3>:
    260a:	50 58       	subi	r21, 0x80	; 128

0000260c <__addsf3>:
    260c:	bb 27       	eor	r27, r27
    260e:	aa 27       	eor	r26, r26
    2610:	0e 94 1d 13 	call	0x263a	; 0x263a <__addsf3x>
    2614:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    2618:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    261c:	38 f0       	brcs	.+14     	; 0x262c <__addsf3+0x20>
    261e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    2622:	20 f0       	brcs	.+8      	; 0x262c <__addsf3+0x20>
    2624:	39 f4       	brne	.+14     	; 0x2634 <__addsf3+0x28>
    2626:	9f 3f       	cpi	r25, 0xFF	; 255
    2628:	19 f4       	brne	.+6      	; 0x2630 <__addsf3+0x24>
    262a:	26 f4       	brtc	.+8      	; 0x2634 <__addsf3+0x28>
    262c:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>
    2630:	0e f4       	brtc	.+2      	; 0x2634 <__addsf3+0x28>
    2632:	e0 95       	com	r30
    2634:	e7 fb       	bst	r30, 7
    2636:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>

0000263a <__addsf3x>:
    263a:	e9 2f       	mov	r30, r25
    263c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    2640:	58 f3       	brcs	.-42     	; 0x2618 <__addsf3+0xc>
    2642:	ba 17       	cp	r27, r26
    2644:	62 07       	cpc	r22, r18
    2646:	73 07       	cpc	r23, r19
    2648:	84 07       	cpc	r24, r20
    264a:	95 07       	cpc	r25, r21
    264c:	20 f0       	brcs	.+8      	; 0x2656 <__addsf3x+0x1c>
    264e:	79 f4       	brne	.+30     	; 0x266e <__addsf3x+0x34>
    2650:	a6 f5       	brtc	.+104    	; 0x26ba <__addsf3x+0x80>
    2652:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_zero>
    2656:	0e f4       	brtc	.+2      	; 0x265a <__addsf3x+0x20>
    2658:	e0 95       	com	r30
    265a:	0b 2e       	mov	r0, r27
    265c:	ba 2f       	mov	r27, r26
    265e:	a0 2d       	mov	r26, r0
    2660:	0b 01       	movw	r0, r22
    2662:	b9 01       	movw	r22, r18
    2664:	90 01       	movw	r18, r0
    2666:	0c 01       	movw	r0, r24
    2668:	ca 01       	movw	r24, r20
    266a:	a0 01       	movw	r20, r0
    266c:	11 24       	eor	r1, r1
    266e:	ff 27       	eor	r31, r31
    2670:	59 1b       	sub	r21, r25
    2672:	99 f0       	breq	.+38     	; 0x269a <__addsf3x+0x60>
    2674:	59 3f       	cpi	r21, 0xF9	; 249
    2676:	50 f4       	brcc	.+20     	; 0x268c <__addsf3x+0x52>
    2678:	50 3e       	cpi	r21, 0xE0	; 224
    267a:	68 f1       	brcs	.+90     	; 0x26d6 <__addsf3x+0x9c>
    267c:	1a 16       	cp	r1, r26
    267e:	f0 40       	sbci	r31, 0x00	; 0
    2680:	a2 2f       	mov	r26, r18
    2682:	23 2f       	mov	r18, r19
    2684:	34 2f       	mov	r19, r20
    2686:	44 27       	eor	r20, r20
    2688:	58 5f       	subi	r21, 0xF8	; 248
    268a:	f3 cf       	rjmp	.-26     	; 0x2672 <__addsf3x+0x38>
    268c:	46 95       	lsr	r20
    268e:	37 95       	ror	r19
    2690:	27 95       	ror	r18
    2692:	a7 95       	ror	r26
    2694:	f0 40       	sbci	r31, 0x00	; 0
    2696:	53 95       	inc	r21
    2698:	c9 f7       	brne	.-14     	; 0x268c <__addsf3x+0x52>
    269a:	7e f4       	brtc	.+30     	; 0x26ba <__addsf3x+0x80>
    269c:	1f 16       	cp	r1, r31
    269e:	ba 0b       	sbc	r27, r26
    26a0:	62 0b       	sbc	r22, r18
    26a2:	73 0b       	sbc	r23, r19
    26a4:	84 0b       	sbc	r24, r20
    26a6:	ba f0       	brmi	.+46     	; 0x26d6 <__addsf3x+0x9c>
    26a8:	91 50       	subi	r25, 0x01	; 1
    26aa:	a1 f0       	breq	.+40     	; 0x26d4 <__addsf3x+0x9a>
    26ac:	ff 0f       	add	r31, r31
    26ae:	bb 1f       	adc	r27, r27
    26b0:	66 1f       	adc	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	88 1f       	adc	r24, r24
    26b6:	c2 f7       	brpl	.-16     	; 0x26a8 <__addsf3x+0x6e>
    26b8:	0e c0       	rjmp	.+28     	; 0x26d6 <__addsf3x+0x9c>
    26ba:	ba 0f       	add	r27, r26
    26bc:	62 1f       	adc	r22, r18
    26be:	73 1f       	adc	r23, r19
    26c0:	84 1f       	adc	r24, r20
    26c2:	48 f4       	brcc	.+18     	; 0x26d6 <__addsf3x+0x9c>
    26c4:	87 95       	ror	r24
    26c6:	77 95       	ror	r23
    26c8:	67 95       	ror	r22
    26ca:	b7 95       	ror	r27
    26cc:	f7 95       	ror	r31
    26ce:	9e 3f       	cpi	r25, 0xFE	; 254
    26d0:	08 f0       	brcs	.+2      	; 0x26d4 <__addsf3x+0x9a>
    26d2:	b0 cf       	rjmp	.-160    	; 0x2634 <__addsf3+0x28>
    26d4:	93 95       	inc	r25
    26d6:	88 0f       	add	r24, r24
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <__addsf3x+0xa2>
    26da:	99 27       	eor	r25, r25
    26dc:	ee 0f       	add	r30, r30
    26de:	97 95       	ror	r25
    26e0:	87 95       	ror	r24
    26e2:	08 95       	ret

000026e4 <__cmpsf2>:
    26e4:	0e 94 26 14 	call	0x284c	; 0x284c <__fp_cmp>
    26e8:	08 f4       	brcc	.+2      	; 0x26ec <__cmpsf2+0x8>
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret

000026ee <__divsf3>:
    26ee:	0e 94 8b 13 	call	0x2716	; 0x2716 <__divsf3x>
    26f2:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    26f6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    26fa:	58 f0       	brcs	.+22     	; 0x2712 <__divsf3+0x24>
    26fc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    2700:	40 f0       	brcs	.+16     	; 0x2712 <__divsf3+0x24>
    2702:	29 f4       	brne	.+10     	; 0x270e <__divsf3+0x20>
    2704:	5f 3f       	cpi	r21, 0xFF	; 255
    2706:	29 f0       	breq	.+10     	; 0x2712 <__divsf3+0x24>
    2708:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    270c:	51 11       	cpse	r21, r1
    270e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    2712:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>

00002716 <__divsf3x>:
    2716:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    271a:	68 f3       	brcs	.-38     	; 0x26f6 <__divsf3+0x8>

0000271c <__divsf3_pse>:
    271c:	99 23       	and	r25, r25
    271e:	b1 f3       	breq	.-20     	; 0x270c <__divsf3+0x1e>
    2720:	55 23       	and	r21, r21
    2722:	91 f3       	breq	.-28     	; 0x2708 <__divsf3+0x1a>
    2724:	95 1b       	sub	r25, r21
    2726:	55 0b       	sbc	r21, r21
    2728:	bb 27       	eor	r27, r27
    272a:	aa 27       	eor	r26, r26
    272c:	62 17       	cp	r22, r18
    272e:	73 07       	cpc	r23, r19
    2730:	84 07       	cpc	r24, r20
    2732:	38 f0       	brcs	.+14     	; 0x2742 <__divsf3_pse+0x26>
    2734:	9f 5f       	subi	r25, 0xFF	; 255
    2736:	5f 4f       	sbci	r21, 0xFF	; 255
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	44 1f       	adc	r20, r20
    273e:	aa 1f       	adc	r26, r26
    2740:	a9 f3       	breq	.-22     	; 0x272c <__divsf3_pse+0x10>
    2742:	35 d0       	rcall	.+106    	; 0x27ae <__divsf3_pse+0x92>
    2744:	0e 2e       	mov	r0, r30
    2746:	3a f0       	brmi	.+14     	; 0x2756 <__divsf3_pse+0x3a>
    2748:	e0 e8       	ldi	r30, 0x80	; 128
    274a:	32 d0       	rcall	.+100    	; 0x27b0 <__divsf3_pse+0x94>
    274c:	91 50       	subi	r25, 0x01	; 1
    274e:	50 40       	sbci	r21, 0x00	; 0
    2750:	e6 95       	lsr	r30
    2752:	00 1c       	adc	r0, r0
    2754:	ca f7       	brpl	.-14     	; 0x2748 <__divsf3_pse+0x2c>
    2756:	2b d0       	rcall	.+86     	; 0x27ae <__divsf3_pse+0x92>
    2758:	fe 2f       	mov	r31, r30
    275a:	29 d0       	rcall	.+82     	; 0x27ae <__divsf3_pse+0x92>
    275c:	66 0f       	add	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	bb 1f       	adc	r27, r27
    2764:	26 17       	cp	r18, r22
    2766:	37 07       	cpc	r19, r23
    2768:	48 07       	cpc	r20, r24
    276a:	ab 07       	cpc	r26, r27
    276c:	b0 e8       	ldi	r27, 0x80	; 128
    276e:	09 f0       	breq	.+2      	; 0x2772 <__divsf3_pse+0x56>
    2770:	bb 0b       	sbc	r27, r27
    2772:	80 2d       	mov	r24, r0
    2774:	bf 01       	movw	r22, r30
    2776:	ff 27       	eor	r31, r31
    2778:	93 58       	subi	r25, 0x83	; 131
    277a:	5f 4f       	sbci	r21, 0xFF	; 255
    277c:	3a f0       	brmi	.+14     	; 0x278c <__divsf3_pse+0x70>
    277e:	9e 3f       	cpi	r25, 0xFE	; 254
    2780:	51 05       	cpc	r21, r1
    2782:	78 f0       	brcs	.+30     	; 0x27a2 <__divsf3_pse+0x86>
    2784:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    2788:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    278c:	5f 3f       	cpi	r21, 0xFF	; 255
    278e:	e4 f3       	brlt	.-8      	; 0x2788 <__divsf3_pse+0x6c>
    2790:	98 3e       	cpi	r25, 0xE8	; 232
    2792:	d4 f3       	brlt	.-12     	; 0x2788 <__divsf3_pse+0x6c>
    2794:	86 95       	lsr	r24
    2796:	77 95       	ror	r23
    2798:	67 95       	ror	r22
    279a:	b7 95       	ror	r27
    279c:	f7 95       	ror	r31
    279e:	9f 5f       	subi	r25, 0xFF	; 255
    27a0:	c9 f7       	brne	.-14     	; 0x2794 <__divsf3_pse+0x78>
    27a2:	88 0f       	add	r24, r24
    27a4:	91 1d       	adc	r25, r1
    27a6:	96 95       	lsr	r25
    27a8:	87 95       	ror	r24
    27aa:	97 f9       	bld	r25, 7
    27ac:	08 95       	ret
    27ae:	e1 e0       	ldi	r30, 0x01	; 1
    27b0:	66 0f       	add	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	88 1f       	adc	r24, r24
    27b6:	bb 1f       	adc	r27, r27
    27b8:	62 17       	cp	r22, r18
    27ba:	73 07       	cpc	r23, r19
    27bc:	84 07       	cpc	r24, r20
    27be:	ba 07       	cpc	r27, r26
    27c0:	20 f0       	brcs	.+8      	; 0x27ca <__divsf3_pse+0xae>
    27c2:	62 1b       	sub	r22, r18
    27c4:	73 0b       	sbc	r23, r19
    27c6:	84 0b       	sbc	r24, r20
    27c8:	ba 0b       	sbc	r27, r26
    27ca:	ee 1f       	adc	r30, r30
    27cc:	88 f7       	brcc	.-30     	; 0x27b0 <__divsf3_pse+0x94>
    27ce:	e0 95       	com	r30
    27d0:	08 95       	ret

000027d2 <__floatunsisf>:
    27d2:	e8 94       	clt
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <__floatsisf+0x12>

000027d6 <__floatsisf>:
    27d6:	97 fb       	bst	r25, 7
    27d8:	3e f4       	brtc	.+14     	; 0x27e8 <__floatsisf+0x12>
    27da:	90 95       	com	r25
    27dc:	80 95       	com	r24
    27de:	70 95       	com	r23
    27e0:	61 95       	neg	r22
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	99 23       	and	r25, r25
    27ea:	a9 f0       	breq	.+42     	; 0x2816 <__floatsisf+0x40>
    27ec:	f9 2f       	mov	r31, r25
    27ee:	96 e9       	ldi	r25, 0x96	; 150
    27f0:	bb 27       	eor	r27, r27
    27f2:	93 95       	inc	r25
    27f4:	f6 95       	lsr	r31
    27f6:	87 95       	ror	r24
    27f8:	77 95       	ror	r23
    27fa:	67 95       	ror	r22
    27fc:	b7 95       	ror	r27
    27fe:	f1 11       	cpse	r31, r1
    2800:	f8 cf       	rjmp	.-16     	; 0x27f2 <__floatsisf+0x1c>
    2802:	fa f4       	brpl	.+62     	; 0x2842 <__floatsisf+0x6c>
    2804:	bb 0f       	add	r27, r27
    2806:	11 f4       	brne	.+4      	; 0x280c <__floatsisf+0x36>
    2808:	60 ff       	sbrs	r22, 0
    280a:	1b c0       	rjmp	.+54     	; 0x2842 <__floatsisf+0x6c>
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	16 c0       	rjmp	.+44     	; 0x2842 <__floatsisf+0x6c>
    2816:	88 23       	and	r24, r24
    2818:	11 f0       	breq	.+4      	; 0x281e <__floatsisf+0x48>
    281a:	96 e9       	ldi	r25, 0x96	; 150
    281c:	11 c0       	rjmp	.+34     	; 0x2840 <__floatsisf+0x6a>
    281e:	77 23       	and	r23, r23
    2820:	21 f0       	breq	.+8      	; 0x282a <__floatsisf+0x54>
    2822:	9e e8       	ldi	r25, 0x8E	; 142
    2824:	87 2f       	mov	r24, r23
    2826:	76 2f       	mov	r23, r22
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <__floatsisf+0x5e>
    282a:	66 23       	and	r22, r22
    282c:	71 f0       	breq	.+28     	; 0x284a <__floatsisf+0x74>
    282e:	96 e8       	ldi	r25, 0x86	; 134
    2830:	86 2f       	mov	r24, r22
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	2a f0       	brmi	.+10     	; 0x2842 <__floatsisf+0x6c>
    2838:	9a 95       	dec	r25
    283a:	66 0f       	add	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	88 1f       	adc	r24, r24
    2840:	da f7       	brpl	.-10     	; 0x2838 <__floatsisf+0x62>
    2842:	88 0f       	add	r24, r24
    2844:	96 95       	lsr	r25
    2846:	87 95       	ror	r24
    2848:	97 f9       	bld	r25, 7
    284a:	08 95       	ret

0000284c <__fp_cmp>:
    284c:	99 0f       	add	r25, r25
    284e:	00 08       	sbc	r0, r0
    2850:	55 0f       	add	r21, r21
    2852:	aa 0b       	sbc	r26, r26
    2854:	e0 e8       	ldi	r30, 0x80	; 128
    2856:	fe ef       	ldi	r31, 0xFE	; 254
    2858:	16 16       	cp	r1, r22
    285a:	17 06       	cpc	r1, r23
    285c:	e8 07       	cpc	r30, r24
    285e:	f9 07       	cpc	r31, r25
    2860:	c0 f0       	brcs	.+48     	; 0x2892 <__fp_cmp+0x46>
    2862:	12 16       	cp	r1, r18
    2864:	13 06       	cpc	r1, r19
    2866:	e4 07       	cpc	r30, r20
    2868:	f5 07       	cpc	r31, r21
    286a:	98 f0       	brcs	.+38     	; 0x2892 <__fp_cmp+0x46>
    286c:	62 1b       	sub	r22, r18
    286e:	73 0b       	sbc	r23, r19
    2870:	84 0b       	sbc	r24, r20
    2872:	95 0b       	sbc	r25, r21
    2874:	39 f4       	brne	.+14     	; 0x2884 <__fp_cmp+0x38>
    2876:	0a 26       	eor	r0, r26
    2878:	61 f0       	breq	.+24     	; 0x2892 <__fp_cmp+0x46>
    287a:	23 2b       	or	r18, r19
    287c:	24 2b       	or	r18, r20
    287e:	25 2b       	or	r18, r21
    2880:	21 f4       	brne	.+8      	; 0x288a <__fp_cmp+0x3e>
    2882:	08 95       	ret
    2884:	0a 26       	eor	r0, r26
    2886:	09 f4       	brne	.+2      	; 0x288a <__fp_cmp+0x3e>
    2888:	a1 40       	sbci	r26, 0x01	; 1
    288a:	a6 95       	lsr	r26
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	81 1d       	adc	r24, r1
    2890:	81 1d       	adc	r24, r1
    2892:	08 95       	ret

00002894 <__fp_inf>:
    2894:	97 f9       	bld	r25, 7
    2896:	9f 67       	ori	r25, 0x7F	; 127
    2898:	80 e8       	ldi	r24, 0x80	; 128
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	08 95       	ret

000028a0 <__fp_nan>:
    28a0:	9f ef       	ldi	r25, 0xFF	; 255
    28a2:	80 ec       	ldi	r24, 0xC0	; 192
    28a4:	08 95       	ret

000028a6 <__fp_pscA>:
    28a6:	00 24       	eor	r0, r0
    28a8:	0a 94       	dec	r0
    28aa:	16 16       	cp	r1, r22
    28ac:	17 06       	cpc	r1, r23
    28ae:	18 06       	cpc	r1, r24
    28b0:	09 06       	cpc	r0, r25
    28b2:	08 95       	ret

000028b4 <__fp_pscB>:
    28b4:	00 24       	eor	r0, r0
    28b6:	0a 94       	dec	r0
    28b8:	12 16       	cp	r1, r18
    28ba:	13 06       	cpc	r1, r19
    28bc:	14 06       	cpc	r1, r20
    28be:	05 06       	cpc	r0, r21
    28c0:	08 95       	ret

000028c2 <__fp_round>:
    28c2:	09 2e       	mov	r0, r25
    28c4:	03 94       	inc	r0
    28c6:	00 0c       	add	r0, r0
    28c8:	11 f4       	brne	.+4      	; 0x28ce <__fp_round+0xc>
    28ca:	88 23       	and	r24, r24
    28cc:	52 f0       	brmi	.+20     	; 0x28e2 <__fp_round+0x20>
    28ce:	bb 0f       	add	r27, r27
    28d0:	40 f4       	brcc	.+16     	; 0x28e2 <__fp_round+0x20>
    28d2:	bf 2b       	or	r27, r31
    28d4:	11 f4       	brne	.+4      	; 0x28da <__fp_round+0x18>
    28d6:	60 ff       	sbrs	r22, 0
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <__fp_round+0x20>
    28da:	6f 5f       	subi	r22, 0xFF	; 255
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	8f 4f       	sbci	r24, 0xFF	; 255
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	08 95       	ret

000028e4 <__fp_split3>:
    28e4:	57 fd       	sbrc	r21, 7
    28e6:	90 58       	subi	r25, 0x80	; 128
    28e8:	44 0f       	add	r20, r20
    28ea:	55 1f       	adc	r21, r21
    28ec:	59 f0       	breq	.+22     	; 0x2904 <__fp_splitA+0x10>
    28ee:	5f 3f       	cpi	r21, 0xFF	; 255
    28f0:	71 f0       	breq	.+28     	; 0x290e <__fp_splitA+0x1a>
    28f2:	47 95       	ror	r20

000028f4 <__fp_splitA>:
    28f4:	88 0f       	add	r24, r24
    28f6:	97 fb       	bst	r25, 7
    28f8:	99 1f       	adc	r25, r25
    28fa:	61 f0       	breq	.+24     	; 0x2914 <__fp_splitA+0x20>
    28fc:	9f 3f       	cpi	r25, 0xFF	; 255
    28fe:	79 f0       	breq	.+30     	; 0x291e <__fp_splitA+0x2a>
    2900:	87 95       	ror	r24
    2902:	08 95       	ret
    2904:	12 16       	cp	r1, r18
    2906:	13 06       	cpc	r1, r19
    2908:	14 06       	cpc	r1, r20
    290a:	55 1f       	adc	r21, r21
    290c:	f2 cf       	rjmp	.-28     	; 0x28f2 <__fp_split3+0xe>
    290e:	46 95       	lsr	r20
    2910:	f1 df       	rcall	.-30     	; 0x28f4 <__fp_splitA>
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <__fp_splitA+0x30>
    2914:	16 16       	cp	r1, r22
    2916:	17 06       	cpc	r1, r23
    2918:	18 06       	cpc	r1, r24
    291a:	99 1f       	adc	r25, r25
    291c:	f1 cf       	rjmp	.-30     	; 0x2900 <__fp_splitA+0xc>
    291e:	86 95       	lsr	r24
    2920:	71 05       	cpc	r23, r1
    2922:	61 05       	cpc	r22, r1
    2924:	08 94       	sec
    2926:	08 95       	ret

00002928 <__fp_zero>:
    2928:	e8 94       	clt

0000292a <__fp_szero>:
    292a:	bb 27       	eor	r27, r27
    292c:	66 27       	eor	r22, r22
    292e:	77 27       	eor	r23, r23
    2930:	cb 01       	movw	r24, r22
    2932:	97 f9       	bld	r25, 7
    2934:	08 95       	ret

00002936 <__gesf2>:
    2936:	0e 94 26 14 	call	0x284c	; 0x284c <__fp_cmp>
    293a:	08 f4       	brcc	.+2      	; 0x293e <__gesf2+0x8>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	08 95       	ret

00002940 <__mulsf3>:
    2940:	0e 94 b3 14 	call	0x2966	; 0x2966 <__mulsf3x>
    2944:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    2948:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    294c:	38 f0       	brcs	.+14     	; 0x295c <__mulsf3+0x1c>
    294e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    2952:	20 f0       	brcs	.+8      	; 0x295c <__mulsf3+0x1c>
    2954:	95 23       	and	r25, r21
    2956:	11 f0       	breq	.+4      	; 0x295c <__mulsf3+0x1c>
    2958:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    295c:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>
    2960:	11 24       	eor	r1, r1
    2962:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>

00002966 <__mulsf3x>:
    2966:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    296a:	70 f3       	brcs	.-36     	; 0x2948 <__mulsf3+0x8>

0000296c <__mulsf3_pse>:
    296c:	95 9f       	mul	r25, r21
    296e:	c1 f3       	breq	.-16     	; 0x2960 <__mulsf3+0x20>
    2970:	95 0f       	add	r25, r21
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	55 1f       	adc	r21, r21
    2976:	62 9f       	mul	r22, r18
    2978:	f0 01       	movw	r30, r0
    297a:	72 9f       	mul	r23, r18
    297c:	bb 27       	eor	r27, r27
    297e:	f0 0d       	add	r31, r0
    2980:	b1 1d       	adc	r27, r1
    2982:	63 9f       	mul	r22, r19
    2984:	aa 27       	eor	r26, r26
    2986:	f0 0d       	add	r31, r0
    2988:	b1 1d       	adc	r27, r1
    298a:	aa 1f       	adc	r26, r26
    298c:	64 9f       	mul	r22, r20
    298e:	66 27       	eor	r22, r22
    2990:	b0 0d       	add	r27, r0
    2992:	a1 1d       	adc	r26, r1
    2994:	66 1f       	adc	r22, r22
    2996:	82 9f       	mul	r24, r18
    2998:	22 27       	eor	r18, r18
    299a:	b0 0d       	add	r27, r0
    299c:	a1 1d       	adc	r26, r1
    299e:	62 1f       	adc	r22, r18
    29a0:	73 9f       	mul	r23, r19
    29a2:	b0 0d       	add	r27, r0
    29a4:	a1 1d       	adc	r26, r1
    29a6:	62 1f       	adc	r22, r18
    29a8:	83 9f       	mul	r24, r19
    29aa:	a0 0d       	add	r26, r0
    29ac:	61 1d       	adc	r22, r1
    29ae:	22 1f       	adc	r18, r18
    29b0:	74 9f       	mul	r23, r20
    29b2:	33 27       	eor	r19, r19
    29b4:	a0 0d       	add	r26, r0
    29b6:	61 1d       	adc	r22, r1
    29b8:	23 1f       	adc	r18, r19
    29ba:	84 9f       	mul	r24, r20
    29bc:	60 0d       	add	r22, r0
    29be:	21 1d       	adc	r18, r1
    29c0:	82 2f       	mov	r24, r18
    29c2:	76 2f       	mov	r23, r22
    29c4:	6a 2f       	mov	r22, r26
    29c6:	11 24       	eor	r1, r1
    29c8:	9f 57       	subi	r25, 0x7F	; 127
    29ca:	50 40       	sbci	r21, 0x00	; 0
    29cc:	9a f0       	brmi	.+38     	; 0x29f4 <__mulsf3_pse+0x88>
    29ce:	f1 f0       	breq	.+60     	; 0x2a0c <__mulsf3_pse+0xa0>
    29d0:	88 23       	and	r24, r24
    29d2:	4a f0       	brmi	.+18     	; 0x29e6 <__mulsf3_pse+0x7a>
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	bb 1f       	adc	r27, r27
    29da:	66 1f       	adc	r22, r22
    29dc:	77 1f       	adc	r23, r23
    29de:	88 1f       	adc	r24, r24
    29e0:	91 50       	subi	r25, 0x01	; 1
    29e2:	50 40       	sbci	r21, 0x00	; 0
    29e4:	a9 f7       	brne	.-22     	; 0x29d0 <__mulsf3_pse+0x64>
    29e6:	9e 3f       	cpi	r25, 0xFE	; 254
    29e8:	51 05       	cpc	r21, r1
    29ea:	80 f0       	brcs	.+32     	; 0x2a0c <__mulsf3_pse+0xa0>
    29ec:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    29f0:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    29f4:	5f 3f       	cpi	r21, 0xFF	; 255
    29f6:	e4 f3       	brlt	.-8      	; 0x29f0 <__mulsf3_pse+0x84>
    29f8:	98 3e       	cpi	r25, 0xE8	; 232
    29fa:	d4 f3       	brlt	.-12     	; 0x29f0 <__mulsf3_pse+0x84>
    29fc:	86 95       	lsr	r24
    29fe:	77 95       	ror	r23
    2a00:	67 95       	ror	r22
    2a02:	b7 95       	ror	r27
    2a04:	f7 95       	ror	r31
    2a06:	e7 95       	ror	r30
    2a08:	9f 5f       	subi	r25, 0xFF	; 255
    2a0a:	c1 f7       	brne	.-16     	; 0x29fc <__mulsf3_pse+0x90>
    2a0c:	fe 2b       	or	r31, r30
    2a0e:	88 0f       	add	r24, r24
    2a10:	91 1d       	adc	r25, r1
    2a12:	96 95       	lsr	r25
    2a14:	87 95       	ror	r24
    2a16:	97 f9       	bld	r25, 7
    2a18:	08 95       	ret

00002a1a <vfprintf>:
    2a1a:	a0 e1       	ldi	r26, 0x10	; 16
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e3 e1       	ldi	r30, 0x13	; 19
    2a20:	f5 e1       	ldi	r31, 0x15	; 21
    2a22:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__prologue_saves__>
    2a26:	7c 01       	movw	r14, r24
    2a28:	1b 01       	movw	r2, r22
    2a2a:	6a 01       	movw	r12, r20
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	16 82       	std	Z+6, r1	; 0x06
    2a30:	17 82       	std	Z+7, r1	; 0x07
    2a32:	83 81       	ldd	r24, Z+3	; 0x03
    2a34:	81 ff       	sbrs	r24, 1
    2a36:	44 c3       	rjmp	.+1672   	; 0x30c0 <vfprintf+0x6a6>
    2a38:	9e 01       	movw	r18, r28
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	39 01       	movw	r6, r18
    2a40:	f7 01       	movw	r30, r14
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	f1 01       	movw	r30, r2
    2a46:	93 fd       	sbrc	r25, 3
    2a48:	85 91       	lpm	r24, Z+
    2a4a:	93 ff       	sbrs	r25, 3
    2a4c:	81 91       	ld	r24, Z+
    2a4e:	1f 01       	movw	r2, r30
    2a50:	88 23       	and	r24, r24
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <vfprintf+0x3c>
    2a54:	31 c3       	rjmp	.+1634   	; 0x30b8 <vfprintf+0x69e>
    2a56:	85 32       	cpi	r24, 0x25	; 37
    2a58:	39 f4       	brne	.+14     	; 0x2a68 <vfprintf+0x4e>
    2a5a:	93 fd       	sbrc	r25, 3
    2a5c:	85 91       	lpm	r24, Z+
    2a5e:	93 ff       	sbrs	r25, 3
    2a60:	81 91       	ld	r24, Z+
    2a62:	1f 01       	movw	r2, r30
    2a64:	85 32       	cpi	r24, 0x25	; 37
    2a66:	39 f4       	brne	.+14     	; 0x2a76 <vfprintf+0x5c>
    2a68:	b7 01       	movw	r22, r14
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2a70:	56 01       	movw	r10, r12
    2a72:	65 01       	movw	r12, r10
    2a74:	e5 cf       	rjmp	.-54     	; 0x2a40 <vfprintf+0x26>
    2a76:	10 e0       	ldi	r17, 0x00	; 0
    2a78:	51 2c       	mov	r5, r1
    2a7a:	91 2c       	mov	r9, r1
    2a7c:	ff e1       	ldi	r31, 0x1F	; 31
    2a7e:	f9 15       	cp	r31, r9
    2a80:	d8 f0       	brcs	.+54     	; 0x2ab8 <vfprintf+0x9e>
    2a82:	8b 32       	cpi	r24, 0x2B	; 43
    2a84:	79 f0       	breq	.+30     	; 0x2aa4 <vfprintf+0x8a>
    2a86:	38 f4       	brcc	.+14     	; 0x2a96 <vfprintf+0x7c>
    2a88:	80 32       	cpi	r24, 0x20	; 32
    2a8a:	79 f0       	breq	.+30     	; 0x2aaa <vfprintf+0x90>
    2a8c:	83 32       	cpi	r24, 0x23	; 35
    2a8e:	a1 f4       	brne	.+40     	; 0x2ab8 <vfprintf+0x9e>
    2a90:	f9 2d       	mov	r31, r9
    2a92:	f0 61       	ori	r31, 0x10	; 16
    2a94:	2e c0       	rjmp	.+92     	; 0x2af2 <vfprintf+0xd8>
    2a96:	8d 32       	cpi	r24, 0x2D	; 45
    2a98:	61 f0       	breq	.+24     	; 0x2ab2 <vfprintf+0x98>
    2a9a:	80 33       	cpi	r24, 0x30	; 48
    2a9c:	69 f4       	brne	.+26     	; 0x2ab8 <vfprintf+0x9e>
    2a9e:	29 2d       	mov	r18, r9
    2aa0:	21 60       	ori	r18, 0x01	; 1
    2aa2:	2d c0       	rjmp	.+90     	; 0x2afe <vfprintf+0xe4>
    2aa4:	39 2d       	mov	r19, r9
    2aa6:	32 60       	ori	r19, 0x02	; 2
    2aa8:	93 2e       	mov	r9, r19
    2aaa:	89 2d       	mov	r24, r9
    2aac:	84 60       	ori	r24, 0x04	; 4
    2aae:	98 2e       	mov	r9, r24
    2ab0:	2a c0       	rjmp	.+84     	; 0x2b06 <vfprintf+0xec>
    2ab2:	e9 2d       	mov	r30, r9
    2ab4:	e8 60       	ori	r30, 0x08	; 8
    2ab6:	15 c0       	rjmp	.+42     	; 0x2ae2 <vfprintf+0xc8>
    2ab8:	97 fc       	sbrc	r9, 7
    2aba:	2d c0       	rjmp	.+90     	; 0x2b16 <vfprintf+0xfc>
    2abc:	20 ed       	ldi	r18, 0xD0	; 208
    2abe:	28 0f       	add	r18, r24
    2ac0:	2a 30       	cpi	r18, 0x0A	; 10
    2ac2:	88 f4       	brcc	.+34     	; 0x2ae6 <vfprintf+0xcc>
    2ac4:	96 fe       	sbrs	r9, 6
    2ac6:	06 c0       	rjmp	.+12     	; 0x2ad4 <vfprintf+0xba>
    2ac8:	3a e0       	ldi	r19, 0x0A	; 10
    2aca:	13 9f       	mul	r17, r19
    2acc:	20 0d       	add	r18, r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	12 2f       	mov	r17, r18
    2ad2:	19 c0       	rjmp	.+50     	; 0x2b06 <vfprintf+0xec>
    2ad4:	8a e0       	ldi	r24, 0x0A	; 10
    2ad6:	58 9e       	mul	r5, r24
    2ad8:	20 0d       	add	r18, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	52 2e       	mov	r5, r18
    2ade:	e9 2d       	mov	r30, r9
    2ae0:	e0 62       	ori	r30, 0x20	; 32
    2ae2:	9e 2e       	mov	r9, r30
    2ae4:	10 c0       	rjmp	.+32     	; 0x2b06 <vfprintf+0xec>
    2ae6:	8e 32       	cpi	r24, 0x2E	; 46
    2ae8:	31 f4       	brne	.+12     	; 0x2af6 <vfprintf+0xdc>
    2aea:	96 fc       	sbrc	r9, 6
    2aec:	e5 c2       	rjmp	.+1482   	; 0x30b8 <vfprintf+0x69e>
    2aee:	f9 2d       	mov	r31, r9
    2af0:	f0 64       	ori	r31, 0x40	; 64
    2af2:	9f 2e       	mov	r9, r31
    2af4:	08 c0       	rjmp	.+16     	; 0x2b06 <vfprintf+0xec>
    2af6:	8c 36       	cpi	r24, 0x6C	; 108
    2af8:	21 f4       	brne	.+8      	; 0x2b02 <vfprintf+0xe8>
    2afa:	29 2d       	mov	r18, r9
    2afc:	20 68       	ori	r18, 0x80	; 128
    2afe:	92 2e       	mov	r9, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <vfprintf+0xec>
    2b02:	88 36       	cpi	r24, 0x68	; 104
    2b04:	41 f4       	brne	.+16     	; 0x2b16 <vfprintf+0xfc>
    2b06:	f1 01       	movw	r30, r2
    2b08:	93 fd       	sbrc	r25, 3
    2b0a:	85 91       	lpm	r24, Z+
    2b0c:	93 ff       	sbrs	r25, 3
    2b0e:	81 91       	ld	r24, Z+
    2b10:	1f 01       	movw	r2, r30
    2b12:	81 11       	cpse	r24, r1
    2b14:	b3 cf       	rjmp	.-154    	; 0x2a7c <vfprintf+0x62>
    2b16:	9b eb       	ldi	r25, 0xBB	; 187
    2b18:	98 0f       	add	r25, r24
    2b1a:	93 30       	cpi	r25, 0x03	; 3
    2b1c:	20 f4       	brcc	.+8      	; 0x2b26 <vfprintf+0x10c>
    2b1e:	99 2d       	mov	r25, r9
    2b20:	90 61       	ori	r25, 0x10	; 16
    2b22:	80 5e       	subi	r24, 0xE0	; 224
    2b24:	07 c0       	rjmp	.+14     	; 0x2b34 <vfprintf+0x11a>
    2b26:	9b e9       	ldi	r25, 0x9B	; 155
    2b28:	98 0f       	add	r25, r24
    2b2a:	93 30       	cpi	r25, 0x03	; 3
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <vfprintf+0x116>
    2b2e:	66 c1       	rjmp	.+716    	; 0x2dfc <vfprintf+0x3e2>
    2b30:	99 2d       	mov	r25, r9
    2b32:	9f 7e       	andi	r25, 0xEF	; 239
    2b34:	96 ff       	sbrs	r25, 6
    2b36:	16 e0       	ldi	r17, 0x06	; 6
    2b38:	9f 73       	andi	r25, 0x3F	; 63
    2b3a:	99 2e       	mov	r9, r25
    2b3c:	85 36       	cpi	r24, 0x65	; 101
    2b3e:	19 f4       	brne	.+6      	; 0x2b46 <vfprintf+0x12c>
    2b40:	90 64       	ori	r25, 0x40	; 64
    2b42:	99 2e       	mov	r9, r25
    2b44:	08 c0       	rjmp	.+16     	; 0x2b56 <vfprintf+0x13c>
    2b46:	86 36       	cpi	r24, 0x66	; 102
    2b48:	21 f4       	brne	.+8      	; 0x2b52 <vfprintf+0x138>
    2b4a:	39 2f       	mov	r19, r25
    2b4c:	30 68       	ori	r19, 0x80	; 128
    2b4e:	93 2e       	mov	r9, r19
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <vfprintf+0x13c>
    2b52:	11 11       	cpse	r17, r1
    2b54:	11 50       	subi	r17, 0x01	; 1
    2b56:	97 fe       	sbrs	r9, 7
    2b58:	07 c0       	rjmp	.+14     	; 0x2b68 <vfprintf+0x14e>
    2b5a:	1c 33       	cpi	r17, 0x3C	; 60
    2b5c:	50 f4       	brcc	.+20     	; 0x2b72 <vfprintf+0x158>
    2b5e:	44 24       	eor	r4, r4
    2b60:	43 94       	inc	r4
    2b62:	41 0e       	add	r4, r17
    2b64:	27 e0       	ldi	r18, 0x07	; 7
    2b66:	0b c0       	rjmp	.+22     	; 0x2b7e <vfprintf+0x164>
    2b68:	18 30       	cpi	r17, 0x08	; 8
    2b6a:	38 f0       	brcs	.+14     	; 0x2b7a <vfprintf+0x160>
    2b6c:	27 e0       	ldi	r18, 0x07	; 7
    2b6e:	17 e0       	ldi	r17, 0x07	; 7
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <vfprintf+0x162>
    2b72:	27 e0       	ldi	r18, 0x07	; 7
    2b74:	9c e3       	ldi	r25, 0x3C	; 60
    2b76:	49 2e       	mov	r4, r25
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <vfprintf+0x164>
    2b7a:	21 2f       	mov	r18, r17
    2b7c:	41 2c       	mov	r4, r1
    2b7e:	56 01       	movw	r10, r12
    2b80:	84 e0       	ldi	r24, 0x04	; 4
    2b82:	a8 0e       	add	r10, r24
    2b84:	b1 1c       	adc	r11, r1
    2b86:	f6 01       	movw	r30, r12
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	04 2d       	mov	r16, r4
    2b92:	a3 01       	movw	r20, r6
    2b94:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__ftoa_engine>
    2b98:	6c 01       	movw	r12, r24
    2b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b9c:	fc 87       	std	Y+12, r31	; 0x0c
    2b9e:	f0 ff       	sbrs	r31, 0
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <vfprintf+0x18c>
    2ba2:	f3 ff       	sbrs	r31, 3
    2ba4:	06 c0       	rjmp	.+12     	; 0x2bb2 <vfprintf+0x198>
    2ba6:	91 fc       	sbrc	r9, 1
    2ba8:	06 c0       	rjmp	.+12     	; 0x2bb6 <vfprintf+0x19c>
    2baa:	92 fe       	sbrs	r9, 2
    2bac:	06 c0       	rjmp	.+12     	; 0x2bba <vfprintf+0x1a0>
    2bae:	00 e2       	ldi	r16, 0x20	; 32
    2bb0:	05 c0       	rjmp	.+10     	; 0x2bbc <vfprintf+0x1a2>
    2bb2:	0d e2       	ldi	r16, 0x2D	; 45
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <vfprintf+0x1a2>
    2bb6:	0b e2       	ldi	r16, 0x2B	; 43
    2bb8:	01 c0       	rjmp	.+2      	; 0x2bbc <vfprintf+0x1a2>
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bbe:	8c 70       	andi	r24, 0x0C	; 12
    2bc0:	19 f0       	breq	.+6      	; 0x2bc8 <vfprintf+0x1ae>
    2bc2:	01 11       	cpse	r16, r1
    2bc4:	5a c2       	rjmp	.+1204   	; 0x307a <vfprintf+0x660>
    2bc6:	9b c2       	rjmp	.+1334   	; 0x30fe <vfprintf+0x6e4>
    2bc8:	97 fe       	sbrs	r9, 7
    2bca:	10 c0       	rjmp	.+32     	; 0x2bec <vfprintf+0x1d2>
    2bcc:	4c 0c       	add	r4, r12
    2bce:	fc 85       	ldd	r31, Y+12	; 0x0c
    2bd0:	f4 ff       	sbrs	r31, 4
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <vfprintf+0x1c2>
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	81 33       	cpi	r24, 0x31	; 49
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <vfprintf+0x1c2>
    2bda:	4a 94       	dec	r4
    2bdc:	14 14       	cp	r1, r4
    2bde:	74 f5       	brge	.+92     	; 0x2c3c <vfprintf+0x222>
    2be0:	28 e0       	ldi	r18, 0x08	; 8
    2be2:	24 15       	cp	r18, r4
    2be4:	78 f5       	brcc	.+94     	; 0x2c44 <vfprintf+0x22a>
    2be6:	88 e0       	ldi	r24, 0x08	; 8
    2be8:	48 2e       	mov	r4, r24
    2bea:	2c c0       	rjmp	.+88     	; 0x2c44 <vfprintf+0x22a>
    2bec:	96 fc       	sbrc	r9, 6
    2bee:	2a c0       	rjmp	.+84     	; 0x2c44 <vfprintf+0x22a>
    2bf0:	81 2f       	mov	r24, r17
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	8c 15       	cp	r24, r12
    2bf6:	9d 05       	cpc	r25, r13
    2bf8:	9c f0       	brlt	.+38     	; 0x2c20 <vfprintf+0x206>
    2bfa:	3c ef       	ldi	r19, 0xFC	; 252
    2bfc:	c3 16       	cp	r12, r19
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	d3 06       	cpc	r13, r19
    2c02:	74 f0       	brlt	.+28     	; 0x2c20 <vfprintf+0x206>
    2c04:	89 2d       	mov	r24, r9
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	98 2e       	mov	r9, r24
    2c0a:	0a c0       	rjmp	.+20     	; 0x2c20 <vfprintf+0x206>
    2c0c:	e2 e0       	ldi	r30, 0x02	; 2
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	ec 0f       	add	r30, r28
    2c12:	fd 1f       	adc	r31, r29
    2c14:	e1 0f       	add	r30, r17
    2c16:	f1 1d       	adc	r31, r1
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 33       	cpi	r24, 0x30	; 48
    2c1c:	19 f4       	brne	.+6      	; 0x2c24 <vfprintf+0x20a>
    2c1e:	11 50       	subi	r17, 0x01	; 1
    2c20:	11 11       	cpse	r17, r1
    2c22:	f4 cf       	rjmp	.-24     	; 0x2c0c <vfprintf+0x1f2>
    2c24:	97 fe       	sbrs	r9, 7
    2c26:	0e c0       	rjmp	.+28     	; 0x2c44 <vfprintf+0x22a>
    2c28:	44 24       	eor	r4, r4
    2c2a:	43 94       	inc	r4
    2c2c:	41 0e       	add	r4, r17
    2c2e:	81 2f       	mov	r24, r17
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	c8 16       	cp	r12, r24
    2c34:	d9 06       	cpc	r13, r25
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <vfprintf+0x228>
    2c38:	1c 19       	sub	r17, r12
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <vfprintf+0x22a>
    2c3c:	44 24       	eor	r4, r4
    2c3e:	43 94       	inc	r4
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <vfprintf+0x22a>
    2c42:	10 e0       	ldi	r17, 0x00	; 0
    2c44:	97 fe       	sbrs	r9, 7
    2c46:	06 c0       	rjmp	.+12     	; 0x2c54 <vfprintf+0x23a>
    2c48:	1c 14       	cp	r1, r12
    2c4a:	1d 04       	cpc	r1, r13
    2c4c:	34 f4       	brge	.+12     	; 0x2c5a <vfprintf+0x240>
    2c4e:	c6 01       	movw	r24, r12
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	05 c0       	rjmp	.+10     	; 0x2c5e <vfprintf+0x244>
    2c54:	85 e0       	ldi	r24, 0x05	; 5
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <vfprintf+0x244>
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	01 11       	cpse	r16, r1
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	11 23       	and	r17, r17
    2c64:	31 f0       	breq	.+12     	; 0x2c72 <vfprintf+0x258>
    2c66:	21 2f       	mov	r18, r17
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	25 2d       	mov	r18, r5
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	82 17       	cp	r24, r18
    2c78:	93 07       	cpc	r25, r19
    2c7a:	14 f4       	brge	.+4      	; 0x2c80 <vfprintf+0x266>
    2c7c:	58 1a       	sub	r5, r24
    2c7e:	01 c0       	rjmp	.+2      	; 0x2c82 <vfprintf+0x268>
    2c80:	51 2c       	mov	r5, r1
    2c82:	89 2d       	mov	r24, r9
    2c84:	89 70       	andi	r24, 0x09	; 9
    2c86:	49 f4       	brne	.+18     	; 0x2c9a <vfprintf+0x280>
    2c88:	55 20       	and	r5, r5
    2c8a:	39 f0       	breq	.+14     	; 0x2c9a <vfprintf+0x280>
    2c8c:	b7 01       	movw	r22, r14
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2c96:	5a 94       	dec	r5
    2c98:	f7 cf       	rjmp	.-18     	; 0x2c88 <vfprintf+0x26e>
    2c9a:	00 23       	and	r16, r16
    2c9c:	29 f0       	breq	.+10     	; 0x2ca8 <vfprintf+0x28e>
    2c9e:	b7 01       	movw	r22, r14
    2ca0:	80 2f       	mov	r24, r16
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2ca8:	93 fc       	sbrc	r9, 3
    2caa:	09 c0       	rjmp	.+18     	; 0x2cbe <vfprintf+0x2a4>
    2cac:	55 20       	and	r5, r5
    2cae:	39 f0       	breq	.+14     	; 0x2cbe <vfprintf+0x2a4>
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	80 e3       	ldi	r24, 0x30	; 48
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2cba:	5a 94       	dec	r5
    2cbc:	f7 cf       	rjmp	.-18     	; 0x2cac <vfprintf+0x292>
    2cbe:	97 fe       	sbrs	r9, 7
    2cc0:	4c c0       	rjmp	.+152    	; 0x2d5a <vfprintf+0x340>
    2cc2:	46 01       	movw	r8, r12
    2cc4:	d7 fe       	sbrs	r13, 7
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <vfprintf+0x2b2>
    2cc8:	81 2c       	mov	r8, r1
    2cca:	91 2c       	mov	r9, r1
    2ccc:	c6 01       	movw	r24, r12
    2cce:	88 19       	sub	r24, r8
    2cd0:	99 09       	sbc	r25, r9
    2cd2:	f3 01       	movw	r30, r6
    2cd4:	e8 0f       	add	r30, r24
    2cd6:	f9 1f       	adc	r31, r25
    2cd8:	ed 87       	std	Y+13, r30	; 0x0d
    2cda:	fe 87       	std	Y+14, r31	; 0x0e
    2cdc:	96 01       	movw	r18, r12
    2cde:	24 19       	sub	r18, r4
    2ce0:	31 09       	sbc	r19, r1
    2ce2:	2f 87       	std	Y+15, r18	; 0x0f
    2ce4:	38 8b       	std	Y+16, r19	; 0x10
    2ce6:	01 2f       	mov	r16, r17
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	11 95       	neg	r17
    2cec:	01 95       	neg	r16
    2cee:	11 09       	sbc	r17, r1
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	83 16       	cp	r8, r19
    2cf4:	93 06       	cpc	r9, r19
    2cf6:	29 f4       	brne	.+10     	; 0x2d02 <vfprintf+0x2e8>
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	8e e2       	ldi	r24, 0x2E	; 46
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2d02:	c8 14       	cp	r12, r8
    2d04:	d9 04       	cpc	r13, r9
    2d06:	4c f0       	brlt	.+18     	; 0x2d1a <vfprintf+0x300>
    2d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0a:	98 89       	ldd	r25, Y+16	; 0x10
    2d0c:	88 15       	cp	r24, r8
    2d0e:	99 05       	cpc	r25, r9
    2d10:	24 f4       	brge	.+8      	; 0x2d1a <vfprintf+0x300>
    2d12:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d14:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d16:	81 81       	ldd	r24, Z+1	; 0x01
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <vfprintf+0x302>
    2d1a:	80 e3       	ldi	r24, 0x30	; 48
    2d1c:	f1 e0       	ldi	r31, 0x01	; 1
    2d1e:	8f 1a       	sub	r8, r31
    2d20:	91 08       	sbc	r9, r1
    2d22:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d24:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	2d 87       	std	Y+13, r18	; 0x0d
    2d2c:	3e 87       	std	Y+14, r19	; 0x0e
    2d2e:	80 16       	cp	r8, r16
    2d30:	91 06       	cpc	r9, r17
    2d32:	2c f0       	brlt	.+10     	; 0x2d3e <vfprintf+0x324>
    2d34:	b7 01       	movw	r22, r14
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2d3c:	d9 cf       	rjmp	.-78     	; 0x2cf0 <vfprintf+0x2d6>
    2d3e:	c8 14       	cp	r12, r8
    2d40:	d9 04       	cpc	r13, r9
    2d42:	41 f4       	brne	.+16     	; 0x2d54 <vfprintf+0x33a>
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	96 33       	cpi	r25, 0x36	; 54
    2d48:	20 f4       	brcc	.+8      	; 0x2d52 <vfprintf+0x338>
    2d4a:	95 33       	cpi	r25, 0x35	; 53
    2d4c:	19 f4       	brne	.+6      	; 0x2d54 <vfprintf+0x33a>
    2d4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d50:	34 ff       	sbrs	r19, 4
    2d52:	81 e3       	ldi	r24, 0x31	; 49
    2d54:	b7 01       	movw	r22, r14
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	4e c0       	rjmp	.+156    	; 0x2df6 <vfprintf+0x3dc>
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	81 33       	cpi	r24, 0x31	; 49
    2d5e:	19 f0       	breq	.+6      	; 0x2d66 <vfprintf+0x34c>
    2d60:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d62:	9f 7e       	andi	r25, 0xEF	; 239
    2d64:	9c 87       	std	Y+12, r25	; 0x0c
    2d66:	b7 01       	movw	r22, r14
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2d6e:	11 11       	cpse	r17, r1
    2d70:	05 c0       	rjmp	.+10     	; 0x2d7c <vfprintf+0x362>
    2d72:	94 fc       	sbrc	r9, 4
    2d74:	18 c0       	rjmp	.+48     	; 0x2da6 <vfprintf+0x38c>
    2d76:	85 e6       	ldi	r24, 0x65	; 101
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	17 c0       	rjmp	.+46     	; 0x2daa <vfprintf+0x390>
    2d7c:	b7 01       	movw	r22, r14
    2d7e:	8e e2       	ldi	r24, 0x2E	; 46
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2d86:	1e 5f       	subi	r17, 0xFE	; 254
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	01 e0       	ldi	r16, 0x01	; 1
    2d8c:	08 0f       	add	r16, r24
    2d8e:	f3 01       	movw	r30, r6
    2d90:	e8 0f       	add	r30, r24
    2d92:	f1 1d       	adc	r31, r1
    2d94:	80 81       	ld	r24, Z
    2d96:	b7 01       	movw	r22, r14
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2d9e:	80 2f       	mov	r24, r16
    2da0:	01 13       	cpse	r16, r17
    2da2:	f3 cf       	rjmp	.-26     	; 0x2d8a <vfprintf+0x370>
    2da4:	e6 cf       	rjmp	.-52     	; 0x2d72 <vfprintf+0x358>
    2da6:	85 e4       	ldi	r24, 0x45	; 69
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	b7 01       	movw	r22, r14
    2dac:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2db0:	d7 fc       	sbrc	r13, 7
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <vfprintf+0x3a6>
    2db4:	c1 14       	cp	r12, r1
    2db6:	d1 04       	cpc	r13, r1
    2db8:	41 f4       	brne	.+16     	; 0x2dca <vfprintf+0x3b0>
    2dba:	ec 85       	ldd	r30, Y+12	; 0x0c
    2dbc:	e4 ff       	sbrs	r30, 4
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <vfprintf+0x3b0>
    2dc0:	d1 94       	neg	r13
    2dc2:	c1 94       	neg	r12
    2dc4:	d1 08       	sbc	r13, r1
    2dc6:	8d e2       	ldi	r24, 0x2D	; 45
    2dc8:	01 c0       	rjmp	.+2      	; 0x2dcc <vfprintf+0x3b2>
    2dca:	8b e2       	ldi	r24, 0x2B	; 43
    2dcc:	b7 01       	movw	r22, r14
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2dd4:	80 e3       	ldi	r24, 0x30	; 48
    2dd6:	2a e0       	ldi	r18, 0x0A	; 10
    2dd8:	c2 16       	cp	r12, r18
    2dda:	d1 04       	cpc	r13, r1
    2ddc:	2c f0       	brlt	.+10     	; 0x2de8 <vfprintf+0x3ce>
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	fa e0       	ldi	r31, 0x0A	; 10
    2de2:	cf 1a       	sub	r12, r31
    2de4:	d1 08       	sbc	r13, r1
    2de6:	f7 cf       	rjmp	.-18     	; 0x2dd6 <vfprintf+0x3bc>
    2de8:	b7 01       	movw	r22, r14
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2df0:	b7 01       	movw	r22, r14
    2df2:	c6 01       	movw	r24, r12
    2df4:	c0 96       	adiw	r24, 0x30	; 48
    2df6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2dfa:	54 c1       	rjmp	.+680    	; 0x30a4 <vfprintf+0x68a>
    2dfc:	83 36       	cpi	r24, 0x63	; 99
    2dfe:	31 f0       	breq	.+12     	; 0x2e0c <vfprintf+0x3f2>
    2e00:	83 37       	cpi	r24, 0x73	; 115
    2e02:	79 f0       	breq	.+30     	; 0x2e22 <vfprintf+0x408>
    2e04:	83 35       	cpi	r24, 0x53	; 83
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <vfprintf+0x3f0>
    2e08:	56 c0       	rjmp	.+172    	; 0x2eb6 <vfprintf+0x49c>
    2e0a:	20 c0       	rjmp	.+64     	; 0x2e4c <vfprintf+0x432>
    2e0c:	56 01       	movw	r10, r12
    2e0e:	32 e0       	ldi	r19, 0x02	; 2
    2e10:	a3 0e       	add	r10, r19
    2e12:	b1 1c       	adc	r11, r1
    2e14:	f6 01       	movw	r30, r12
    2e16:	80 81       	ld	r24, Z
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	01 e0       	ldi	r16, 0x01	; 1
    2e1c:	10 e0       	ldi	r17, 0x00	; 0
    2e1e:	63 01       	movw	r12, r6
    2e20:	12 c0       	rjmp	.+36     	; 0x2e46 <vfprintf+0x42c>
    2e22:	56 01       	movw	r10, r12
    2e24:	f2 e0       	ldi	r31, 0x02	; 2
    2e26:	af 0e       	add	r10, r31
    2e28:	b1 1c       	adc	r11, r1
    2e2a:	f6 01       	movw	r30, r12
    2e2c:	c0 80       	ld	r12, Z
    2e2e:	d1 80       	ldd	r13, Z+1	; 0x01
    2e30:	96 fe       	sbrs	r9, 6
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <vfprintf+0x420>
    2e34:	61 2f       	mov	r22, r17
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <vfprintf+0x424>
    2e3a:	6f ef       	ldi	r22, 0xFF	; 255
    2e3c:	7f ef       	ldi	r23, 0xFF	; 255
    2e3e:	c6 01       	movw	r24, r12
    2e40:	0e 94 de 19 	call	0x33bc	; 0x33bc <strnlen>
    2e44:	8c 01       	movw	r16, r24
    2e46:	f9 2d       	mov	r31, r9
    2e48:	ff 77       	andi	r31, 0x7F	; 127
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <vfprintf+0x45a>
    2e4c:	56 01       	movw	r10, r12
    2e4e:	22 e0       	ldi	r18, 0x02	; 2
    2e50:	a2 0e       	add	r10, r18
    2e52:	b1 1c       	adc	r11, r1
    2e54:	f6 01       	movw	r30, r12
    2e56:	c0 80       	ld	r12, Z
    2e58:	d1 80       	ldd	r13, Z+1	; 0x01
    2e5a:	96 fe       	sbrs	r9, 6
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <vfprintf+0x44a>
    2e5e:	61 2f       	mov	r22, r17
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <vfprintf+0x44e>
    2e64:	6f ef       	ldi	r22, 0xFF	; 255
    2e66:	7f ef       	ldi	r23, 0xFF	; 255
    2e68:	c6 01       	movw	r24, r12
    2e6a:	0e 94 c1 19 	call	0x3382	; 0x3382 <strnlen_P>
    2e6e:	8c 01       	movw	r16, r24
    2e70:	f9 2d       	mov	r31, r9
    2e72:	f0 68       	ori	r31, 0x80	; 128
    2e74:	9f 2e       	mov	r9, r31
    2e76:	f3 fd       	sbrc	r31, 3
    2e78:	1a c0       	rjmp	.+52     	; 0x2eae <vfprintf+0x494>
    2e7a:	85 2d       	mov	r24, r5
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	08 17       	cp	r16, r24
    2e80:	19 07       	cpc	r17, r25
    2e82:	a8 f4       	brcc	.+42     	; 0x2eae <vfprintf+0x494>
    2e84:	b7 01       	movw	r22, r14
    2e86:	80 e2       	ldi	r24, 0x20	; 32
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2e8e:	5a 94       	dec	r5
    2e90:	f4 cf       	rjmp	.-24     	; 0x2e7a <vfprintf+0x460>
    2e92:	f6 01       	movw	r30, r12
    2e94:	97 fc       	sbrc	r9, 7
    2e96:	85 91       	lpm	r24, Z+
    2e98:	97 fe       	sbrs	r9, 7
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	6f 01       	movw	r12, r30
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    2ea6:	51 10       	cpse	r5, r1
    2ea8:	5a 94       	dec	r5
    2eaa:	01 50       	subi	r16, 0x01	; 1
    2eac:	11 09       	sbc	r17, r1
    2eae:	01 15       	cp	r16, r1
    2eb0:	11 05       	cpc	r17, r1
    2eb2:	79 f7       	brne	.-34     	; 0x2e92 <vfprintf+0x478>
    2eb4:	f7 c0       	rjmp	.+494    	; 0x30a4 <vfprintf+0x68a>
    2eb6:	84 36       	cpi	r24, 0x64	; 100
    2eb8:	11 f0       	breq	.+4      	; 0x2ebe <vfprintf+0x4a4>
    2eba:	89 36       	cpi	r24, 0x69	; 105
    2ebc:	61 f5       	brne	.+88     	; 0x2f16 <vfprintf+0x4fc>
    2ebe:	56 01       	movw	r10, r12
    2ec0:	97 fe       	sbrs	r9, 7
    2ec2:	09 c0       	rjmp	.+18     	; 0x2ed6 <vfprintf+0x4bc>
    2ec4:	24 e0       	ldi	r18, 0x04	; 4
    2ec6:	a2 0e       	add	r10, r18
    2ec8:	b1 1c       	adc	r11, r1
    2eca:	f6 01       	movw	r30, r12
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	0a c0       	rjmp	.+20     	; 0x2eea <vfprintf+0x4d0>
    2ed6:	f2 e0       	ldi	r31, 0x02	; 2
    2ed8:	af 0e       	add	r10, r31
    2eda:	b1 1c       	adc	r11, r1
    2edc:	f6 01       	movw	r30, r12
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	07 2e       	mov	r0, r23
    2ee4:	00 0c       	add	r0, r0
    2ee6:	88 0b       	sbc	r24, r24
    2ee8:	99 0b       	sbc	r25, r25
    2eea:	f9 2d       	mov	r31, r9
    2eec:	ff 76       	andi	r31, 0x6F	; 111
    2eee:	9f 2e       	mov	r9, r31
    2ef0:	97 ff       	sbrs	r25, 7
    2ef2:	09 c0       	rjmp	.+18     	; 0x2f06 <vfprintf+0x4ec>
    2ef4:	90 95       	com	r25
    2ef6:	80 95       	com	r24
    2ef8:	70 95       	com	r23
    2efa:	61 95       	neg	r22
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	8f 4f       	sbci	r24, 0xFF	; 255
    2f00:	9f 4f       	sbci	r25, 0xFF	; 255
    2f02:	f0 68       	ori	r31, 0x80	; 128
    2f04:	9f 2e       	mov	r9, r31
    2f06:	2a e0       	ldi	r18, 0x0A	; 10
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	a3 01       	movw	r20, r6
    2f0c:	0e 94 47 1a 	call	0x348e	; 0x348e <__ultoa_invert>
    2f10:	c8 2e       	mov	r12, r24
    2f12:	c6 18       	sub	r12, r6
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <vfprintf+0x57a>
    2f16:	09 2d       	mov	r16, r9
    2f18:	85 37       	cpi	r24, 0x75	; 117
    2f1a:	21 f4       	brne	.+8      	; 0x2f24 <vfprintf+0x50a>
    2f1c:	0f 7e       	andi	r16, 0xEF	; 239
    2f1e:	2a e0       	ldi	r18, 0x0A	; 10
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	1d c0       	rjmp	.+58     	; 0x2f5e <vfprintf+0x544>
    2f24:	09 7f       	andi	r16, 0xF9	; 249
    2f26:	8f 36       	cpi	r24, 0x6F	; 111
    2f28:	91 f0       	breq	.+36     	; 0x2f4e <vfprintf+0x534>
    2f2a:	18 f4       	brcc	.+6      	; 0x2f32 <vfprintf+0x518>
    2f2c:	88 35       	cpi	r24, 0x58	; 88
    2f2e:	59 f0       	breq	.+22     	; 0x2f46 <vfprintf+0x52c>
    2f30:	c3 c0       	rjmp	.+390    	; 0x30b8 <vfprintf+0x69e>
    2f32:	80 37       	cpi	r24, 0x70	; 112
    2f34:	19 f0       	breq	.+6      	; 0x2f3c <vfprintf+0x522>
    2f36:	88 37       	cpi	r24, 0x78	; 120
    2f38:	11 f0       	breq	.+4      	; 0x2f3e <vfprintf+0x524>
    2f3a:	be c0       	rjmp	.+380    	; 0x30b8 <vfprintf+0x69e>
    2f3c:	00 61       	ori	r16, 0x10	; 16
    2f3e:	04 ff       	sbrs	r16, 4
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <vfprintf+0x53a>
    2f42:	04 60       	ori	r16, 0x04	; 4
    2f44:	07 c0       	rjmp	.+14     	; 0x2f54 <vfprintf+0x53a>
    2f46:	94 fe       	sbrs	r9, 4
    2f48:	08 c0       	rjmp	.+16     	; 0x2f5a <vfprintf+0x540>
    2f4a:	06 60       	ori	r16, 0x06	; 6
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <vfprintf+0x540>
    2f4e:	28 e0       	ldi	r18, 0x08	; 8
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	05 c0       	rjmp	.+10     	; 0x2f5e <vfprintf+0x544>
    2f54:	20 e1       	ldi	r18, 0x10	; 16
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <vfprintf+0x544>
    2f5a:	20 e1       	ldi	r18, 0x10	; 16
    2f5c:	32 e0       	ldi	r19, 0x02	; 2
    2f5e:	56 01       	movw	r10, r12
    2f60:	07 ff       	sbrs	r16, 7
    2f62:	09 c0       	rjmp	.+18     	; 0x2f76 <vfprintf+0x55c>
    2f64:	84 e0       	ldi	r24, 0x04	; 4
    2f66:	a8 0e       	add	r10, r24
    2f68:	b1 1c       	adc	r11, r1
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	08 c0       	rjmp	.+16     	; 0x2f86 <vfprintf+0x56c>
    2f76:	f2 e0       	ldi	r31, 0x02	; 2
    2f78:	af 0e       	add	r10, r31
    2f7a:	b1 1c       	adc	r11, r1
    2f7c:	f6 01       	movw	r30, r12
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a3 01       	movw	r20, r6
    2f88:	0e 94 47 1a 	call	0x348e	; 0x348e <__ultoa_invert>
    2f8c:	c8 2e       	mov	r12, r24
    2f8e:	c6 18       	sub	r12, r6
    2f90:	0f 77       	andi	r16, 0x7F	; 127
    2f92:	90 2e       	mov	r9, r16
    2f94:	96 fe       	sbrs	r9, 6
    2f96:	0b c0       	rjmp	.+22     	; 0x2fae <vfprintf+0x594>
    2f98:	09 2d       	mov	r16, r9
    2f9a:	0e 7f       	andi	r16, 0xFE	; 254
    2f9c:	c1 16       	cp	r12, r17
    2f9e:	50 f4       	brcc	.+20     	; 0x2fb4 <vfprintf+0x59a>
    2fa0:	94 fe       	sbrs	r9, 4
    2fa2:	0a c0       	rjmp	.+20     	; 0x2fb8 <vfprintf+0x59e>
    2fa4:	92 fc       	sbrc	r9, 2
    2fa6:	08 c0       	rjmp	.+16     	; 0x2fb8 <vfprintf+0x59e>
    2fa8:	09 2d       	mov	r16, r9
    2faa:	0e 7e       	andi	r16, 0xEE	; 238
    2fac:	05 c0       	rjmp	.+10     	; 0x2fb8 <vfprintf+0x59e>
    2fae:	dc 2c       	mov	r13, r12
    2fb0:	09 2d       	mov	r16, r9
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <vfprintf+0x5a0>
    2fb4:	dc 2c       	mov	r13, r12
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <vfprintf+0x5a0>
    2fb8:	d1 2e       	mov	r13, r17
    2fba:	04 ff       	sbrs	r16, 4
    2fbc:	0d c0       	rjmp	.+26     	; 0x2fd8 <vfprintf+0x5be>
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ec 0d       	add	r30, r12
    2fc2:	f1 1d       	adc	r31, r1
    2fc4:	80 81       	ld	r24, Z
    2fc6:	80 33       	cpi	r24, 0x30	; 48
    2fc8:	11 f4       	brne	.+4      	; 0x2fce <vfprintf+0x5b4>
    2fca:	09 7e       	andi	r16, 0xE9	; 233
    2fcc:	09 c0       	rjmp	.+18     	; 0x2fe0 <vfprintf+0x5c6>
    2fce:	02 ff       	sbrs	r16, 2
    2fd0:	06 c0       	rjmp	.+12     	; 0x2fde <vfprintf+0x5c4>
    2fd2:	d3 94       	inc	r13
    2fd4:	d3 94       	inc	r13
    2fd6:	04 c0       	rjmp	.+8      	; 0x2fe0 <vfprintf+0x5c6>
    2fd8:	80 2f       	mov	r24, r16
    2fda:	86 78       	andi	r24, 0x86	; 134
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <vfprintf+0x5c6>
    2fde:	d3 94       	inc	r13
    2fe0:	03 fd       	sbrc	r16, 3
    2fe2:	11 c0       	rjmp	.+34     	; 0x3006 <vfprintf+0x5ec>
    2fe4:	00 ff       	sbrs	r16, 0
    2fe6:	06 c0       	rjmp	.+12     	; 0x2ff4 <vfprintf+0x5da>
    2fe8:	1c 2d       	mov	r17, r12
    2fea:	d5 14       	cp	r13, r5
    2fec:	80 f4       	brcc	.+32     	; 0x300e <vfprintf+0x5f4>
    2fee:	15 0d       	add	r17, r5
    2ff0:	1d 19       	sub	r17, r13
    2ff2:	0d c0       	rjmp	.+26     	; 0x300e <vfprintf+0x5f4>
    2ff4:	d5 14       	cp	r13, r5
    2ff6:	58 f4       	brcc	.+22     	; 0x300e <vfprintf+0x5f4>
    2ff8:	b7 01       	movw	r22, r14
    2ffa:	80 e2       	ldi	r24, 0x20	; 32
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    3002:	d3 94       	inc	r13
    3004:	f7 cf       	rjmp	.-18     	; 0x2ff4 <vfprintf+0x5da>
    3006:	d5 14       	cp	r13, r5
    3008:	10 f4       	brcc	.+4      	; 0x300e <vfprintf+0x5f4>
    300a:	5d 18       	sub	r5, r13
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <vfprintf+0x5f6>
    300e:	51 2c       	mov	r5, r1
    3010:	04 ff       	sbrs	r16, 4
    3012:	10 c0       	rjmp	.+32     	; 0x3034 <vfprintf+0x61a>
    3014:	b7 01       	movw	r22, r14
    3016:	80 e3       	ldi	r24, 0x30	; 48
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    301e:	02 ff       	sbrs	r16, 2
    3020:	17 c0       	rjmp	.+46     	; 0x3050 <vfprintf+0x636>
    3022:	01 fd       	sbrc	r16, 1
    3024:	03 c0       	rjmp	.+6      	; 0x302c <vfprintf+0x612>
    3026:	88 e7       	ldi	r24, 0x78	; 120
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <vfprintf+0x616>
    302c:	88 e5       	ldi	r24, 0x58	; 88
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	b7 01       	movw	r22, r14
    3032:	0c c0       	rjmp	.+24     	; 0x304c <vfprintf+0x632>
    3034:	80 2f       	mov	r24, r16
    3036:	86 78       	andi	r24, 0x86	; 134
    3038:	59 f0       	breq	.+22     	; 0x3050 <vfprintf+0x636>
    303a:	01 ff       	sbrs	r16, 1
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <vfprintf+0x628>
    303e:	8b e2       	ldi	r24, 0x2B	; 43
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <vfprintf+0x62a>
    3042:	80 e2       	ldi	r24, 0x20	; 32
    3044:	07 fd       	sbrc	r16, 7
    3046:	8d e2       	ldi	r24, 0x2D	; 45
    3048:	b7 01       	movw	r22, r14
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    3050:	c1 16       	cp	r12, r17
    3052:	38 f4       	brcc	.+14     	; 0x3062 <vfprintf+0x648>
    3054:	b7 01       	movw	r22, r14
    3056:	80 e3       	ldi	r24, 0x30	; 48
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    305e:	11 50       	subi	r17, 0x01	; 1
    3060:	f7 cf       	rjmp	.-18     	; 0x3050 <vfprintf+0x636>
    3062:	ca 94       	dec	r12
    3064:	f3 01       	movw	r30, r6
    3066:	ec 0d       	add	r30, r12
    3068:	f1 1d       	adc	r31, r1
    306a:	80 81       	ld	r24, Z
    306c:	b7 01       	movw	r22, r14
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    3074:	c1 10       	cpse	r12, r1
    3076:	f5 cf       	rjmp	.-22     	; 0x3062 <vfprintf+0x648>
    3078:	15 c0       	rjmp	.+42     	; 0x30a4 <vfprintf+0x68a>
    307a:	f4 e0       	ldi	r31, 0x04	; 4
    307c:	f5 15       	cp	r31, r5
    307e:	60 f5       	brcc	.+88     	; 0x30d8 <vfprintf+0x6be>
    3080:	84 e0       	ldi	r24, 0x04	; 4
    3082:	58 1a       	sub	r5, r24
    3084:	93 fe       	sbrs	r9, 3
    3086:	1f c0       	rjmp	.+62     	; 0x30c6 <vfprintf+0x6ac>
    3088:	01 11       	cpse	r16, r1
    308a:	27 c0       	rjmp	.+78     	; 0x30da <vfprintf+0x6c0>
    308c:	2c 85       	ldd	r18, Y+12	; 0x0c
    308e:	23 ff       	sbrs	r18, 3
    3090:	2a c0       	rjmp	.+84     	; 0x30e6 <vfprintf+0x6cc>
    3092:	0a e0       	ldi	r16, 0x0A	; 10
    3094:	11 e0       	ldi	r17, 0x01	; 1
    3096:	39 2d       	mov	r19, r9
    3098:	30 71       	andi	r19, 0x10	; 16
    309a:	93 2e       	mov	r9, r19
    309c:	f8 01       	movw	r30, r16
    309e:	84 91       	lpm	r24, Z
    30a0:	81 11       	cpse	r24, r1
    30a2:	24 c0       	rjmp	.+72     	; 0x30ec <vfprintf+0x6d2>
    30a4:	55 20       	and	r5, r5
    30a6:	09 f4       	brne	.+2      	; 0x30aa <vfprintf+0x690>
    30a8:	e4 cc       	rjmp	.-1592   	; 0x2a72 <vfprintf+0x58>
    30aa:	b7 01       	movw	r22, r14
    30ac:	80 e2       	ldi	r24, 0x20	; 32
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    30b4:	5a 94       	dec	r5
    30b6:	f6 cf       	rjmp	.-20     	; 0x30a4 <vfprintf+0x68a>
    30b8:	f7 01       	movw	r30, r14
    30ba:	86 81       	ldd	r24, Z+6	; 0x06
    30bc:	97 81       	ldd	r25, Z+7	; 0x07
    30be:	26 c0       	rjmp	.+76     	; 0x310c <vfprintf+0x6f2>
    30c0:	8f ef       	ldi	r24, 0xFF	; 255
    30c2:	9f ef       	ldi	r25, 0xFF	; 255
    30c4:	23 c0       	rjmp	.+70     	; 0x310c <vfprintf+0x6f2>
    30c6:	b7 01       	movw	r22, r14
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    30d0:	5a 94       	dec	r5
    30d2:	51 10       	cpse	r5, r1
    30d4:	f8 cf       	rjmp	.-16     	; 0x30c6 <vfprintf+0x6ac>
    30d6:	d8 cf       	rjmp	.-80     	; 0x3088 <vfprintf+0x66e>
    30d8:	51 2c       	mov	r5, r1
    30da:	b7 01       	movw	r22, r14
    30dc:	80 2f       	mov	r24, r16
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    30e4:	d3 cf       	rjmp	.-90     	; 0x308c <vfprintf+0x672>
    30e6:	0e e0       	ldi	r16, 0x0E	; 14
    30e8:	11 e0       	ldi	r17, 0x01	; 1
    30ea:	d5 cf       	rjmp	.-86     	; 0x3096 <vfprintf+0x67c>
    30ec:	91 10       	cpse	r9, r1
    30ee:	80 52       	subi	r24, 0x20	; 32
    30f0:	b7 01       	movw	r22, r14
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fputc>
    30f8:	0f 5f       	subi	r16, 0xFF	; 255
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	cf cf       	rjmp	.-98     	; 0x309c <vfprintf+0x682>
    30fe:	23 e0       	ldi	r18, 0x03	; 3
    3100:	25 15       	cp	r18, r5
    3102:	10 f4       	brcc	.+4      	; 0x3108 <vfprintf+0x6ee>
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	bd cf       	rjmp	.-134    	; 0x3082 <vfprintf+0x668>
    3108:	51 2c       	mov	r5, r1
    310a:	c0 cf       	rjmp	.-128    	; 0x308c <vfprintf+0x672>
    310c:	60 96       	adiw	r28, 0x10	; 16
    310e:	e2 e1       	ldi	r30, 0x12	; 18
    3110:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__epilogue_restores__>

00003114 <__divmodhi4>:
    3114:	97 fb       	bst	r25, 7
    3116:	07 2e       	mov	r0, r23
    3118:	16 f4       	brtc	.+4      	; 0x311e <__divmodhi4+0xa>
    311a:	00 94       	com	r0
    311c:	07 d0       	rcall	.+14     	; 0x312c <__divmodhi4_neg1>
    311e:	77 fd       	sbrc	r23, 7
    3120:	09 d0       	rcall	.+18     	; 0x3134 <__divmodhi4_neg2>
    3122:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__udivmodhi4>
    3126:	07 fc       	sbrc	r0, 7
    3128:	05 d0       	rcall	.+10     	; 0x3134 <__divmodhi4_neg2>
    312a:	3e f4       	brtc	.+14     	; 0x313a <__divmodhi4_exit>

0000312c <__divmodhi4_neg1>:
    312c:	90 95       	com	r25
    312e:	81 95       	neg	r24
    3130:	9f 4f       	sbci	r25, 0xFF	; 255
    3132:	08 95       	ret

00003134 <__divmodhi4_neg2>:
    3134:	70 95       	com	r23
    3136:	61 95       	neg	r22
    3138:	7f 4f       	sbci	r23, 0xFF	; 255

0000313a <__divmodhi4_exit>:
    313a:	08 95       	ret

0000313c <__tablejump2__>:
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	05 90       	lpm	r0, Z+
    3142:	f4 91       	lpm	r31, Z
    3144:	e0 2d       	mov	r30, r0
    3146:	09 94       	ijmp

00003148 <__prologue_saves__>:
    3148:	2f 92       	push	r2
    314a:	3f 92       	push	r3
    314c:	4f 92       	push	r4
    314e:	5f 92       	push	r5
    3150:	6f 92       	push	r6
    3152:	7f 92       	push	r7
    3154:	8f 92       	push	r8
    3156:	9f 92       	push	r9
    3158:	af 92       	push	r10
    315a:	bf 92       	push	r11
    315c:	cf 92       	push	r12
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	ca 1b       	sub	r28, r26
    3172:	db 0b       	sbc	r29, r27
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	09 94       	ijmp

0000317a <__epilogue_restores__>:
    317a:	2a 88       	ldd	r2, Y+18	; 0x12
    317c:	39 88       	ldd	r3, Y+17	; 0x11
    317e:	48 88       	ldd	r4, Y+16	; 0x10
    3180:	5f 84       	ldd	r5, Y+15	; 0x0f
    3182:	6e 84       	ldd	r6, Y+14	; 0x0e
    3184:	7d 84       	ldd	r7, Y+13	; 0x0d
    3186:	8c 84       	ldd	r8, Y+12	; 0x0c
    3188:	9b 84       	ldd	r9, Y+11	; 0x0b
    318a:	aa 84       	ldd	r10, Y+10	; 0x0a
    318c:	b9 84       	ldd	r11, Y+9	; 0x09
    318e:	c8 84       	ldd	r12, Y+8	; 0x08
    3190:	df 80       	ldd	r13, Y+7	; 0x07
    3192:	ee 80       	ldd	r14, Y+6	; 0x06
    3194:	fd 80       	ldd	r15, Y+5	; 0x05
    3196:	0c 81       	ldd	r16, Y+4	; 0x04
    3198:	1b 81       	ldd	r17, Y+3	; 0x03
    319a:	aa 81       	ldd	r26, Y+2	; 0x02
    319c:	b9 81       	ldd	r27, Y+1	; 0x01
    319e:	ce 0f       	add	r28, r30
    31a0:	d1 1d       	adc	r29, r1
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	ed 01       	movw	r28, r26
    31a8:	08 95       	ret

000031aa <__udivmodhi4>:
    31aa:	aa 1b       	sub	r26, r26
    31ac:	bb 1b       	sub	r27, r27
    31ae:	51 e1       	ldi	r21, 0x11	; 17
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <__udivmodhi4_ep>

000031b2 <__udivmodhi4_loop>:
    31b2:	aa 1f       	adc	r26, r26
    31b4:	bb 1f       	adc	r27, r27
    31b6:	a6 17       	cp	r26, r22
    31b8:	b7 07       	cpc	r27, r23
    31ba:	10 f0       	brcs	.+4      	; 0x31c0 <__udivmodhi4_ep>
    31bc:	a6 1b       	sub	r26, r22
    31be:	b7 0b       	sbc	r27, r23

000031c0 <__udivmodhi4_ep>:
    31c0:	88 1f       	adc	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	5a 95       	dec	r21
    31c6:	a9 f7       	brne	.-22     	; 0x31b2 <__udivmodhi4_loop>
    31c8:	80 95       	com	r24
    31ca:	90 95       	com	r25
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	08 95       	ret

000031d2 <__ftoa_engine>:
    31d2:	28 30       	cpi	r18, 0x08	; 8
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <__ftoa_engine+0x6>
    31d6:	27 e0       	ldi	r18, 0x07	; 7
    31d8:	33 27       	eor	r19, r19
    31da:	da 01       	movw	r26, r20
    31dc:	99 0f       	add	r25, r25
    31de:	31 1d       	adc	r19, r1
    31e0:	87 fd       	sbrc	r24, 7
    31e2:	91 60       	ori	r25, 0x01	; 1
    31e4:	00 96       	adiw	r24, 0x00	; 0
    31e6:	61 05       	cpc	r22, r1
    31e8:	71 05       	cpc	r23, r1
    31ea:	39 f4       	brne	.+14     	; 0x31fa <__ftoa_engine+0x28>
    31ec:	32 60       	ori	r19, 0x02	; 2
    31ee:	2e 5f       	subi	r18, 0xFE	; 254
    31f0:	3d 93       	st	X+, r19
    31f2:	30 e3       	ldi	r19, 0x30	; 48
    31f4:	2a 95       	dec	r18
    31f6:	e1 f7       	brne	.-8      	; 0x31f0 <__ftoa_engine+0x1e>
    31f8:	08 95       	ret
    31fa:	9f 3f       	cpi	r25, 0xFF	; 255
    31fc:	30 f0       	brcs	.+12     	; 0x320a <__ftoa_engine+0x38>
    31fe:	80 38       	cpi	r24, 0x80	; 128
    3200:	71 05       	cpc	r23, r1
    3202:	61 05       	cpc	r22, r1
    3204:	09 f0       	breq	.+2      	; 0x3208 <__ftoa_engine+0x36>
    3206:	3c 5f       	subi	r19, 0xFC	; 252
    3208:	3c 5f       	subi	r19, 0xFC	; 252
    320a:	3d 93       	st	X+, r19
    320c:	91 30       	cpi	r25, 0x01	; 1
    320e:	08 f0       	brcs	.+2      	; 0x3212 <__ftoa_engine+0x40>
    3210:	80 68       	ori	r24, 0x80	; 128
    3212:	91 1d       	adc	r25, r1
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	1f 93       	push	r17
    321a:	0f 93       	push	r16
    321c:	ff 92       	push	r15
    321e:	ef 92       	push	r14
    3220:	19 2f       	mov	r17, r25
    3222:	98 7f       	andi	r25, 0xF8	; 248
    3224:	96 95       	lsr	r25
    3226:	e9 2f       	mov	r30, r25
    3228:	96 95       	lsr	r25
    322a:	96 95       	lsr	r25
    322c:	e9 0f       	add	r30, r25
    322e:	ff 27       	eor	r31, r31
    3230:	e4 59       	subi	r30, 0x94	; 148
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	99 27       	eor	r25, r25
    3236:	33 27       	eor	r19, r19
    3238:	ee 24       	eor	r14, r14
    323a:	ff 24       	eor	r15, r15
    323c:	a7 01       	movw	r20, r14
    323e:	e7 01       	movw	r28, r14
    3240:	05 90       	lpm	r0, Z+
    3242:	08 94       	sec
    3244:	07 94       	ror	r0
    3246:	28 f4       	brcc	.+10     	; 0x3252 <__ftoa_engine+0x80>
    3248:	36 0f       	add	r19, r22
    324a:	e7 1e       	adc	r14, r23
    324c:	f8 1e       	adc	r15, r24
    324e:	49 1f       	adc	r20, r25
    3250:	51 1d       	adc	r21, r1
    3252:	66 0f       	add	r22, r22
    3254:	77 1f       	adc	r23, r23
    3256:	88 1f       	adc	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	06 94       	lsr	r0
    325c:	a1 f7       	brne	.-24     	; 0x3246 <__ftoa_engine+0x74>
    325e:	05 90       	lpm	r0, Z+
    3260:	07 94       	ror	r0
    3262:	28 f4       	brcc	.+10     	; 0x326e <__ftoa_engine+0x9c>
    3264:	e7 0e       	add	r14, r23
    3266:	f8 1e       	adc	r15, r24
    3268:	49 1f       	adc	r20, r25
    326a:	56 1f       	adc	r21, r22
    326c:	c1 1d       	adc	r28, r1
    326e:	77 0f       	add	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	66 1f       	adc	r22, r22
    3276:	06 94       	lsr	r0
    3278:	a1 f7       	brne	.-24     	; 0x3262 <__ftoa_engine+0x90>
    327a:	05 90       	lpm	r0, Z+
    327c:	07 94       	ror	r0
    327e:	28 f4       	brcc	.+10     	; 0x328a <__ftoa_engine+0xb8>
    3280:	f8 0e       	add	r15, r24
    3282:	49 1f       	adc	r20, r25
    3284:	56 1f       	adc	r21, r22
    3286:	c7 1f       	adc	r28, r23
    3288:	d1 1d       	adc	r29, r1
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	66 1f       	adc	r22, r22
    3290:	77 1f       	adc	r23, r23
    3292:	06 94       	lsr	r0
    3294:	a1 f7       	brne	.-24     	; 0x327e <__ftoa_engine+0xac>
    3296:	05 90       	lpm	r0, Z+
    3298:	07 94       	ror	r0
    329a:	20 f4       	brcc	.+8      	; 0x32a4 <__ftoa_engine+0xd2>
    329c:	49 0f       	add	r20, r25
    329e:	56 1f       	adc	r21, r22
    32a0:	c7 1f       	adc	r28, r23
    32a2:	d8 1f       	adc	r29, r24
    32a4:	99 0f       	add	r25, r25
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	06 94       	lsr	r0
    32ae:	a9 f7       	brne	.-22     	; 0x329a <__ftoa_engine+0xc8>
    32b0:	84 91       	lpm	r24, Z
    32b2:	10 95       	com	r17
    32b4:	17 70       	andi	r17, 0x07	; 7
    32b6:	41 f0       	breq	.+16     	; 0x32c8 <__ftoa_engine+0xf6>
    32b8:	d6 95       	lsr	r29
    32ba:	c7 95       	ror	r28
    32bc:	57 95       	ror	r21
    32be:	47 95       	ror	r20
    32c0:	f7 94       	ror	r15
    32c2:	e7 94       	ror	r14
    32c4:	1a 95       	dec	r17
    32c6:	c1 f7       	brne	.-16     	; 0x32b8 <__ftoa_engine+0xe6>
    32c8:	e2 e1       	ldi	r30, 0x12	; 18
    32ca:	f1 e0       	ldi	r31, 0x01	; 1
    32cc:	68 94       	set
    32ce:	15 90       	lpm	r1, Z+
    32d0:	15 91       	lpm	r17, Z+
    32d2:	35 91       	lpm	r19, Z+
    32d4:	65 91       	lpm	r22, Z+
    32d6:	95 91       	lpm	r25, Z+
    32d8:	05 90       	lpm	r0, Z+
    32da:	7f e2       	ldi	r23, 0x2F	; 47
    32dc:	73 95       	inc	r23
    32de:	e1 18       	sub	r14, r1
    32e0:	f1 0a       	sbc	r15, r17
    32e2:	43 0b       	sbc	r20, r19
    32e4:	56 0b       	sbc	r21, r22
    32e6:	c9 0b       	sbc	r28, r25
    32e8:	d0 09       	sbc	r29, r0
    32ea:	c0 f7       	brcc	.-16     	; 0x32dc <__ftoa_engine+0x10a>
    32ec:	e1 0c       	add	r14, r1
    32ee:	f1 1e       	adc	r15, r17
    32f0:	43 1f       	adc	r20, r19
    32f2:	56 1f       	adc	r21, r22
    32f4:	c9 1f       	adc	r28, r25
    32f6:	d0 1d       	adc	r29, r0
    32f8:	7e f4       	brtc	.+30     	; 0x3318 <__ftoa_engine+0x146>
    32fa:	70 33       	cpi	r23, 0x30	; 48
    32fc:	11 f4       	brne	.+4      	; 0x3302 <__ftoa_engine+0x130>
    32fe:	8a 95       	dec	r24
    3300:	e6 cf       	rjmp	.-52     	; 0x32ce <__ftoa_engine+0xfc>
    3302:	e8 94       	clt
    3304:	01 50       	subi	r16, 0x01	; 1
    3306:	30 f0       	brcs	.+12     	; 0x3314 <__ftoa_engine+0x142>
    3308:	08 0f       	add	r16, r24
    330a:	0a f4       	brpl	.+2      	; 0x330e <__ftoa_engine+0x13c>
    330c:	00 27       	eor	r16, r16
    330e:	02 17       	cp	r16, r18
    3310:	08 f4       	brcc	.+2      	; 0x3314 <__ftoa_engine+0x142>
    3312:	20 2f       	mov	r18, r16
    3314:	23 95       	inc	r18
    3316:	02 2f       	mov	r16, r18
    3318:	7a 33       	cpi	r23, 0x3A	; 58
    331a:	28 f0       	brcs	.+10     	; 0x3326 <__ftoa_engine+0x154>
    331c:	79 e3       	ldi	r23, 0x39	; 57
    331e:	7d 93       	st	X+, r23
    3320:	2a 95       	dec	r18
    3322:	e9 f7       	brne	.-6      	; 0x331e <__ftoa_engine+0x14c>
    3324:	10 c0       	rjmp	.+32     	; 0x3346 <__ftoa_engine+0x174>
    3326:	7d 93       	st	X+, r23
    3328:	2a 95       	dec	r18
    332a:	89 f6       	brne	.-94     	; 0x32ce <__ftoa_engine+0xfc>
    332c:	06 94       	lsr	r0
    332e:	97 95       	ror	r25
    3330:	67 95       	ror	r22
    3332:	37 95       	ror	r19
    3334:	17 95       	ror	r17
    3336:	17 94       	ror	r1
    3338:	e1 18       	sub	r14, r1
    333a:	f1 0a       	sbc	r15, r17
    333c:	43 0b       	sbc	r20, r19
    333e:	56 0b       	sbc	r21, r22
    3340:	c9 0b       	sbc	r28, r25
    3342:	d0 09       	sbc	r29, r0
    3344:	98 f0       	brcs	.+38     	; 0x336c <__ftoa_engine+0x19a>
    3346:	23 95       	inc	r18
    3348:	7e 91       	ld	r23, -X
    334a:	73 95       	inc	r23
    334c:	7a 33       	cpi	r23, 0x3A	; 58
    334e:	08 f0       	brcs	.+2      	; 0x3352 <__ftoa_engine+0x180>
    3350:	70 e3       	ldi	r23, 0x30	; 48
    3352:	7c 93       	st	X, r23
    3354:	20 13       	cpse	r18, r16
    3356:	b8 f7       	brcc	.-18     	; 0x3346 <__ftoa_engine+0x174>
    3358:	7e 91       	ld	r23, -X
    335a:	70 61       	ori	r23, 0x10	; 16
    335c:	7d 93       	st	X+, r23
    335e:	30 f0       	brcs	.+12     	; 0x336c <__ftoa_engine+0x19a>
    3360:	83 95       	inc	r24
    3362:	71 e3       	ldi	r23, 0x31	; 49
    3364:	7d 93       	st	X+, r23
    3366:	70 e3       	ldi	r23, 0x30	; 48
    3368:	2a 95       	dec	r18
    336a:	e1 f7       	brne	.-8      	; 0x3364 <__ftoa_engine+0x192>
    336c:	11 24       	eor	r1, r1
    336e:	ef 90       	pop	r14
    3370:	ff 90       	pop	r15
    3372:	0f 91       	pop	r16
    3374:	1f 91       	pop	r17
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	99 27       	eor	r25, r25
    337c:	87 fd       	sbrc	r24, 7
    337e:	90 95       	com	r25
    3380:	08 95       	ret

00003382 <strnlen_P>:
    3382:	fc 01       	movw	r30, r24
    3384:	05 90       	lpm	r0, Z+
    3386:	61 50       	subi	r22, 0x01	; 1
    3388:	70 40       	sbci	r23, 0x00	; 0
    338a:	01 10       	cpse	r0, r1
    338c:	d8 f7       	brcc	.-10     	; 0x3384 <strnlen_P+0x2>
    338e:	80 95       	com	r24
    3390:	90 95       	com	r25
    3392:	8e 0f       	add	r24, r30
    3394:	9f 1f       	adc	r25, r31
    3396:	08 95       	ret

00003398 <strcat>:
    3398:	fb 01       	movw	r30, r22
    339a:	dc 01       	movw	r26, r24
    339c:	0d 90       	ld	r0, X+
    339e:	00 20       	and	r0, r0
    33a0:	e9 f7       	brne	.-6      	; 0x339c <strcat+0x4>
    33a2:	11 97       	sbiw	r26, 0x01	; 1
    33a4:	01 90       	ld	r0, Z+
    33a6:	0d 92       	st	X+, r0
    33a8:	00 20       	and	r0, r0
    33aa:	e1 f7       	brne	.-8      	; 0x33a4 <strcat+0xc>
    33ac:	08 95       	ret

000033ae <strcpy>:
    33ae:	fb 01       	movw	r30, r22
    33b0:	dc 01       	movw	r26, r24
    33b2:	01 90       	ld	r0, Z+
    33b4:	0d 92       	st	X+, r0
    33b6:	00 20       	and	r0, r0
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <strcpy+0x4>
    33ba:	08 95       	ret

000033bc <strnlen>:
    33bc:	fc 01       	movw	r30, r24
    33be:	61 50       	subi	r22, 0x01	; 1
    33c0:	70 40       	sbci	r23, 0x00	; 0
    33c2:	01 90       	ld	r0, Z+
    33c4:	01 10       	cpse	r0, r1
    33c6:	d8 f7       	brcc	.-10     	; 0x33be <strnlen+0x2>
    33c8:	80 95       	com	r24
    33ca:	90 95       	com	r25
    33cc:	8e 0f       	add	r24, r30
    33ce:	9f 1f       	adc	r25, r31
    33d0:	08 95       	ret

000033d2 <fputc>:
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	fb 01       	movw	r30, r22
    33dc:	23 81       	ldd	r18, Z+3	; 0x03
    33de:	21 fd       	sbrc	r18, 1
    33e0:	03 c0       	rjmp	.+6      	; 0x33e8 <fputc+0x16>
    33e2:	8f ef       	ldi	r24, 0xFF	; 255
    33e4:	9f ef       	ldi	r25, 0xFF	; 255
    33e6:	2c c0       	rjmp	.+88     	; 0x3440 <fputc+0x6e>
    33e8:	22 ff       	sbrs	r18, 2
    33ea:	16 c0       	rjmp	.+44     	; 0x3418 <fputc+0x46>
    33ec:	46 81       	ldd	r20, Z+6	; 0x06
    33ee:	57 81       	ldd	r21, Z+7	; 0x07
    33f0:	24 81       	ldd	r18, Z+4	; 0x04
    33f2:	35 81       	ldd	r19, Z+5	; 0x05
    33f4:	42 17       	cp	r20, r18
    33f6:	53 07       	cpc	r21, r19
    33f8:	44 f4       	brge	.+16     	; 0x340a <fputc+0x38>
    33fa:	a0 81       	ld	r26, Z
    33fc:	b1 81       	ldd	r27, Z+1	; 0x01
    33fe:	9d 01       	movw	r18, r26
    3400:	2f 5f       	subi	r18, 0xFF	; 255
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	20 83       	st	Z, r18
    3406:	31 83       	std	Z+1, r19	; 0x01
    3408:	8c 93       	st	X, r24
    340a:	26 81       	ldd	r18, Z+6	; 0x06
    340c:	37 81       	ldd	r19, Z+7	; 0x07
    340e:	2f 5f       	subi	r18, 0xFF	; 255
    3410:	3f 4f       	sbci	r19, 0xFF	; 255
    3412:	26 83       	std	Z+6, r18	; 0x06
    3414:	37 83       	std	Z+7, r19	; 0x07
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <fputc+0x6e>
    3418:	8b 01       	movw	r16, r22
    341a:	ec 01       	movw	r28, r24
    341c:	fb 01       	movw	r30, r22
    341e:	00 84       	ldd	r0, Z+8	; 0x08
    3420:	f1 85       	ldd	r31, Z+9	; 0x09
    3422:	e0 2d       	mov	r30, r0
    3424:	09 95       	icall
    3426:	89 2b       	or	r24, r25
    3428:	e1 f6       	brne	.-72     	; 0x33e2 <fputc+0x10>
    342a:	d8 01       	movw	r26, r16
    342c:	16 96       	adiw	r26, 0x06	; 6
    342e:	8d 91       	ld	r24, X+
    3430:	9c 91       	ld	r25, X
    3432:	17 97       	sbiw	r26, 0x07	; 7
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	16 96       	adiw	r26, 0x06	; 6
    3438:	8d 93       	st	X+, r24
    343a:	9c 93       	st	X, r25
    343c:	17 97       	sbiw	r26, 0x07	; 7
    343e:	ce 01       	movw	r24, r28
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	08 95       	ret

0000344a <sprintf>:
    344a:	ae e0       	ldi	r26, 0x0E	; 14
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	eb e2       	ldi	r30, 0x2B	; 43
    3450:	fa e1       	ldi	r31, 0x1A	; 26
    3452:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__+0x1c>
    3456:	0d 89       	ldd	r16, Y+21	; 0x15
    3458:	1e 89       	ldd	r17, Y+22	; 0x16
    345a:	86 e0       	ldi	r24, 0x06	; 6
    345c:	8c 83       	std	Y+4, r24	; 0x04
    345e:	09 83       	std	Y+1, r16	; 0x01
    3460:	1a 83       	std	Y+2, r17	; 0x02
    3462:	8f ef       	ldi	r24, 0xFF	; 255
    3464:	9f e7       	ldi	r25, 0x7F	; 127
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	9e 83       	std	Y+6, r25	; 0x06
    346a:	ae 01       	movw	r20, r28
    346c:	47 5e       	subi	r20, 0xE7	; 231
    346e:	5f 4f       	sbci	r21, 0xFF	; 255
    3470:	6f 89       	ldd	r22, Y+23	; 0x17
    3472:	78 8d       	ldd	r23, Y+24	; 0x18
    3474:	ce 01       	movw	r24, r28
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <vfprintf>
    347c:	ef 81       	ldd	r30, Y+7	; 0x07
    347e:	f8 85       	ldd	r31, Y+8	; 0x08
    3480:	e0 0f       	add	r30, r16
    3482:	f1 1f       	adc	r31, r17
    3484:	10 82       	st	Z, r1
    3486:	2e 96       	adiw	r28, 0x0e	; 14
    3488:	e4 e0       	ldi	r30, 0x04	; 4
    348a:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__epilogue_restores__+0x1c>

0000348e <__ultoa_invert>:
    348e:	fa 01       	movw	r30, r20
    3490:	aa 27       	eor	r26, r26
    3492:	28 30       	cpi	r18, 0x08	; 8
    3494:	51 f1       	breq	.+84     	; 0x34ea <__ultoa_invert+0x5c>
    3496:	20 31       	cpi	r18, 0x10	; 16
    3498:	81 f1       	breq	.+96     	; 0x34fa <__ultoa_invert+0x6c>
    349a:	e8 94       	clt
    349c:	6f 93       	push	r22
    349e:	6e 7f       	andi	r22, 0xFE	; 254
    34a0:	6e 5f       	subi	r22, 0xFE	; 254
    34a2:	7f 4f       	sbci	r23, 0xFF	; 255
    34a4:	8f 4f       	sbci	r24, 0xFF	; 255
    34a6:	9f 4f       	sbci	r25, 0xFF	; 255
    34a8:	af 4f       	sbci	r26, 0xFF	; 255
    34aa:	b1 e0       	ldi	r27, 0x01	; 1
    34ac:	3e d0       	rcall	.+124    	; 0x352a <__ultoa_invert+0x9c>
    34ae:	b4 e0       	ldi	r27, 0x04	; 4
    34b0:	3c d0       	rcall	.+120    	; 0x352a <__ultoa_invert+0x9c>
    34b2:	67 0f       	add	r22, r23
    34b4:	78 1f       	adc	r23, r24
    34b6:	89 1f       	adc	r24, r25
    34b8:	9a 1f       	adc	r25, r26
    34ba:	a1 1d       	adc	r26, r1
    34bc:	68 0f       	add	r22, r24
    34be:	79 1f       	adc	r23, r25
    34c0:	8a 1f       	adc	r24, r26
    34c2:	91 1d       	adc	r25, r1
    34c4:	a1 1d       	adc	r26, r1
    34c6:	6a 0f       	add	r22, r26
    34c8:	71 1d       	adc	r23, r1
    34ca:	81 1d       	adc	r24, r1
    34cc:	91 1d       	adc	r25, r1
    34ce:	a1 1d       	adc	r26, r1
    34d0:	20 d0       	rcall	.+64     	; 0x3512 <__ultoa_invert+0x84>
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <__ultoa_invert+0x48>
    34d4:	68 94       	set
    34d6:	3f 91       	pop	r19
    34d8:	2a e0       	ldi	r18, 0x0A	; 10
    34da:	26 9f       	mul	r18, r22
    34dc:	11 24       	eor	r1, r1
    34de:	30 19       	sub	r19, r0
    34e0:	30 5d       	subi	r19, 0xD0	; 208
    34e2:	31 93       	st	Z+, r19
    34e4:	de f6       	brtc	.-74     	; 0x349c <__ultoa_invert+0xe>
    34e6:	cf 01       	movw	r24, r30
    34e8:	08 95       	ret
    34ea:	46 2f       	mov	r20, r22
    34ec:	47 70       	andi	r20, 0x07	; 7
    34ee:	40 5d       	subi	r20, 0xD0	; 208
    34f0:	41 93       	st	Z+, r20
    34f2:	b3 e0       	ldi	r27, 0x03	; 3
    34f4:	0f d0       	rcall	.+30     	; 0x3514 <__ultoa_invert+0x86>
    34f6:	c9 f7       	brne	.-14     	; 0x34ea <__ultoa_invert+0x5c>
    34f8:	f6 cf       	rjmp	.-20     	; 0x34e6 <__ultoa_invert+0x58>
    34fa:	46 2f       	mov	r20, r22
    34fc:	4f 70       	andi	r20, 0x0F	; 15
    34fe:	40 5d       	subi	r20, 0xD0	; 208
    3500:	4a 33       	cpi	r20, 0x3A	; 58
    3502:	18 f0       	brcs	.+6      	; 0x350a <__ultoa_invert+0x7c>
    3504:	49 5d       	subi	r20, 0xD9	; 217
    3506:	31 fd       	sbrc	r19, 1
    3508:	40 52       	subi	r20, 0x20	; 32
    350a:	41 93       	st	Z+, r20
    350c:	02 d0       	rcall	.+4      	; 0x3512 <__ultoa_invert+0x84>
    350e:	a9 f7       	brne	.-22     	; 0x34fa <__ultoa_invert+0x6c>
    3510:	ea cf       	rjmp	.-44     	; 0x34e6 <__ultoa_invert+0x58>
    3512:	b4 e0       	ldi	r27, 0x04	; 4
    3514:	a6 95       	lsr	r26
    3516:	97 95       	ror	r25
    3518:	87 95       	ror	r24
    351a:	77 95       	ror	r23
    351c:	67 95       	ror	r22
    351e:	ba 95       	dec	r27
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__ultoa_invert+0x86>
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	61 05       	cpc	r22, r1
    3526:	71 05       	cpc	r23, r1
    3528:	08 95       	ret
    352a:	9b 01       	movw	r18, r22
    352c:	ac 01       	movw	r20, r24
    352e:	0a 2e       	mov	r0, r26
    3530:	06 94       	lsr	r0
    3532:	57 95       	ror	r21
    3534:	47 95       	ror	r20
    3536:	37 95       	ror	r19
    3538:	27 95       	ror	r18
    353a:	ba 95       	dec	r27
    353c:	c9 f7       	brne	.-14     	; 0x3530 <__ultoa_invert+0xa2>
    353e:	62 0f       	add	r22, r18
    3540:	73 1f       	adc	r23, r19
    3542:	84 1f       	adc	r24, r20
    3544:	95 1f       	adc	r25, r21
    3546:	a0 1d       	adc	r26, r0
    3548:	08 95       	ret

0000354a <eeprom_read_block>:
    354a:	60 50       	subi	r22, 0x00	; 0
    354c:	7c 4e       	sbci	r23, 0xEC	; 236
    354e:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <memcpy>

00003552 <eeprom_update_block>:
    3552:	dc 01       	movw	r26, r24
    3554:	a4 0f       	add	r26, r20
    3556:	b5 1f       	adc	r27, r21
    3558:	41 50       	subi	r20, 0x01	; 1
    355a:	50 40       	sbci	r21, 0x00	; 0
    355c:	48 f0       	brcs	.+18     	; 0x3570 <eeprom_update_block+0x1e>
    355e:	cb 01       	movw	r24, r22
    3560:	84 0f       	add	r24, r20
    3562:	95 1f       	adc	r25, r21
    3564:	2e 91       	ld	r18, -X
    3566:	0e 94 ba 1a 	call	0x3574	; 0x3574 <eeprom_update_r18>
    356a:	41 50       	subi	r20, 0x01	; 1
    356c:	50 40       	sbci	r21, 0x00	; 0
    356e:	d0 f7       	brcc	.-12     	; 0x3564 <eeprom_update_block+0x12>
    3570:	08 95       	ret

00003572 <eeprom_update_byte>:
    3572:	26 2f       	mov	r18, r22

00003574 <eeprom_update_r18>:
    3574:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <eeprom_mapen>
    3578:	00 80       	ld	r0, Z
    357a:	02 16       	cp	r0, r18
    357c:	19 f0       	breq	.+6      	; 0x3584 <eeprom_update_r18+0x10>
    357e:	0e 94 c5 1a 	call	0x358a	; 0x358a <eeprom_write_r18>
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	08 95       	ret

00003588 <eeprom_write_byte>:
    3588:	26 2f       	mov	r18, r22

0000358a <eeprom_write_r18>:
    358a:	af 93       	push	r26
    358c:	bf 93       	push	r27
    358e:	e0 e0       	ldi	r30, 0x00	; 0
    3590:	f0 e1       	ldi	r31, 0x10	; 16
    3592:	32 81       	ldd	r19, Z+2	; 0x02
    3594:	31 fd       	sbrc	r19, 1
    3596:	fd cf       	rjmp	.-6      	; 0x3592 <eeprom_write_r18+0x8>
    3598:	dc 01       	movw	r26, r24
    359a:	a0 50       	subi	r26, 0x00	; 0
    359c:	bc 4e       	sbci	r27, 0xEC	; 236
    359e:	2c 93       	st	X, r18
    35a0:	2d e9       	ldi	r18, 0x9D	; 157
    35a2:	24 bf       	out	0x34, r18	; 52
    35a4:	23 e0       	ldi	r18, 0x03	; 3
    35a6:	20 83       	st	Z, r18
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	bf 91       	pop	r27
    35ac:	af 91       	pop	r26
    35ae:	08 95       	ret

000035b0 <eeprom_read_byte>:
    35b0:	03 d0       	rcall	.+6      	; 0x35b8 <eeprom_mapen>
    35b2:	80 81       	ld	r24, Z
    35b4:	99 27       	eor	r25, r25
    35b6:	08 95       	ret

000035b8 <eeprom_mapen>:
    35b8:	fc 01       	movw	r30, r24
    35ba:	e0 50       	subi	r30, 0x00	; 0
    35bc:	fc 4e       	sbci	r31, 0xEC	; 236
    35be:	08 95       	ret

000035c0 <memcpy>:
    35c0:	fb 01       	movw	r30, r22
    35c2:	dc 01       	movw	r26, r24
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <memcpy+0xa>
    35c6:	01 90       	ld	r0, Z+
    35c8:	0d 92       	st	X+, r0
    35ca:	41 50       	subi	r20, 0x01	; 1
    35cc:	50 40       	sbci	r21, 0x00	; 0
    35ce:	d8 f7       	brcc	.-10     	; 0x35c6 <memcpy+0x6>
    35d0:	08 95       	ret

000035d2 <_exit>:
    35d2:	f8 94       	cli

000035d4 <__stop_program>:
    35d4:	ff cf       	rjmp	.-2      	; 0x35d4 <__stop_program>
