
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003eb8  00003f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c7e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023a  00007c7e  00003c7e  00003d32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802802  00802802  00003f6e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003f6e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fcc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005f8  00000000  00000000  00004010  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009eef  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048c7  00000000  00000000  0000e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e95  00000000  00000000  00012dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d64  00000000  00000000  00016c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000216e  00000000  00000000  000179b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038a7  00000000  00000000  00019b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  0001d3cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__vector_3>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__vector_12>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_17>
      48:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__vector_18>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__vector_20>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__vector_26>
      6c:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_27>
      70:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      74:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_29>
      78:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      7c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      80:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      84:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      88:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      8c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      90:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      94:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <__vector_37>
      98:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_38>
      9c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      a0:	53 04       	cpc	r5, r3
      a2:	61 04       	cpc	r6, r1
      a4:	61 04       	cpc	r6, r1
      a6:	61 04       	cpc	r6, r1
      a8:	61 04       	cpc	r6, r1
      aa:	61 04       	cpc	r6, r1
      ac:	61 04       	cpc	r6, r1
      ae:	61 04       	cpc	r6, r1
      b0:	61 04       	cpc	r6, r1
      b2:	61 04       	cpc	r6, r1
      b4:	61 04       	cpc	r6, r1
      b6:	61 04       	cpc	r6, r1
      b8:	61 04       	cpc	r6, r1
      ba:	61 04       	cpc	r6, r1
      bc:	61 04       	cpc	r6, r1
      be:	61 04       	cpc	r6, r1
      c0:	61 04       	cpc	r6, r1
      c2:	38 04       	cpc	r3, r8
      c4:	61 04       	cpc	r6, r1
      c6:	61 04       	cpc	r6, r1
      c8:	61 04       	cpc	r6, r1
      ca:	61 04       	cpc	r6, r1
      cc:	61 04       	cpc	r6, r1
      ce:	61 04       	cpc	r6, r1
      d0:	61 04       	cpc	r6, r1
      d2:	61 04       	cpc	r6, r1
      d4:	61 04       	cpc	r6, r1
      d6:	42 04       	cpc	r4, r2
      d8:	61 04       	cpc	r6, r1
      da:	3d 04       	cpc	r3, r13
      dc:	61 04       	cpc	r6, r1
      de:	61 04       	cpc	r6, r1
      e0:	47 04       	cpc	r4, r7
      e2:	4b 04       	cpc	r4, r11
      e4:	4f 04       	cpc	r4, r15

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df e3       	ldi	r29, 0x3F	; 63
     1f2:	de bf       	out	0x3e, r29	; 62

000001f4 <__do_copy_data>:
     1f4:	18 e2       	ldi	r17, 0x28	; 40
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b8 e2       	ldi	r27, 0x28	; 40
     1fa:	e8 eb       	ldi	r30, 0xB8	; 184
     1fc:	fe e3       	ldi	r31, 0x3E	; 62
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	a2 30       	cpi	r26, 0x02	; 2
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	20 e3       	ldi	r18, 0x30	; 48
     20c:	a2 e0       	ldi	r26, 0x02	; 2
     20e:	b8 e2       	ldi	r27, 0x28	; 40
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a0 33       	cpi	r26, 0x30	; 48
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 99 07 	call	0xf32	; 0xf32 <main>
     21e:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	c9 f0       	breq	.+50     	; 0x266 <read_AD590+0x40>
     234:	18 f0       	brcs	.+6      	; 0x23c <read_AD590+0x16>
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	61 f0       	breq	.+24     	; 0x252 <read_AD590+0x2c>
     23a:	10 c0       	rjmp	.+32     	; 0x25c <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     23c:	0f 2e       	mov	r0, r31
     23e:	f3 e3       	ldi	r31, 0x33	; 51
     240:	cf 2e       	mov	r12, r31
     242:	dc 2c       	mov	r13, r12
     244:	f3 ef       	ldi	r31, 0xF3	; 243
     246:	ef 2e       	mov	r14, r31
     248:	f0 e4       	ldi	r31, 0x40	; 64
     24a:	ff 2e       	mov	r15, r31
     24c:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     24e:	c1 e0       	ldi	r28, 0x01	; 1
     250:	0e c0       	rjmp	.+28     	; 0x26e <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     252:	c1 2c       	mov	r12, r1
     254:	d1 2c       	mov	r13, r1
     256:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     258:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     25a:	09 c0       	rjmp	.+18     	; 0x26e <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     25c:	c1 2c       	mov	r12, r1
     25e:	d1 2c       	mov	r13, r1
     260:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     262:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     264:	04 c0       	rjmp	.+8      	; 0x26e <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     266:	c1 2c       	mov	r12, r1
     268:	d1 2c       	mov	r13, r1
     26a:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     26c:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	66 e0       	ldi	r22, 0x06	; 6
     272:	87 e2       	ldi	r24, 0x27	; 39
     274:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     278:	4c 2f       	mov	r20, r28
     27a:	40 95       	com	r20
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	87 e2       	ldi	r24, 0x27	; 39
     280:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     284:	4c 2f       	mov	r20, r28
     286:	6a e0       	ldi	r22, 0x0A	; 10
     288:	87 e2       	ldi	r24, 0x27	; 39
     28a:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28e:	86 e1       	ldi	r24, 0x16	; 22
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <read_AD590+0x6a>
     294:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     296:	20 e8       	ldi	r18, 0x80	; 128
     298:	40 e7       	ldi	r20, 0x70	; 112
     29a:	68 e0       	ldi	r22, 0x08	; 8
     29c:	88 e4       	ldi	r24, 0x48	; 72
     29e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	4a e7       	ldi	r20, 0x7A	; 122
     2a8:	54 e4       	ldi	r21, 0x44	; 68
     2aa:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
     2ae:	23 e3       	ldi	r18, 0x33	; 51
     2b0:	33 e9       	ldi	r19, 0x93	; 147
     2b2:	48 e8       	ldi	r20, 0x88	; 136
     2b4:	53 e4       	ldi	r21, 0x43	; 67
     2b6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     2ba:	9b 01       	movw	r18, r22
     2bc:	ac 01       	movw	r20, r24
     2be:	c7 01       	movw	r24, r14
     2c0:	b6 01       	movw	r22, r12
     2c2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
	return(temperature);

}
     2c6:	cf 91       	pop	r28
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	d8 2f       	mov	r29, r24
     2e4:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     2e6:	46 2b       	or	r20, r22
     2e8:	c4 2f       	mov	r28, r20
     2ea:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     2ec:	12 2f       	mov	r17, r18
     2ee:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     2f6:	08 2f       	mov	r16, r24
     2f8:	88 23       	and	r24, r24
     2fa:	69 f0       	breq	.+26     	; 0x316 <read_ADS1115+0x44>
		stop_TWI();
     2fc:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     300:	60 2f       	mov	r22, r16
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
     30c:	56 2f       	mov	r21, r22
     30e:	47 2f       	mov	r20, r23
     310:	38 2f       	mov	r19, r24
     312:	29 2f       	mov	r18, r25
     314:	d0 c0       	rjmp	.+416    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     31c:	08 2f       	mov	r16, r24
     31e:	88 23       	and	r24, r24
     320:	69 f0       	breq	.+26     	; 0x33c <read_ADS1115+0x6a>
		stop_TWI();
     322:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     326:	60 2f       	mov	r22, r16
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
     332:	56 2f       	mov	r21, r22
     334:	47 2f       	mov	r20, r23
     336:	38 2f       	mov	r19, r24
     338:	29 2f       	mov	r18, r25
     33a:	bd c0       	rjmp	.+378    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     33c:	8c 2f       	mov	r24, r28
     33e:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     342:	c8 2f       	mov	r28, r24
     344:	88 23       	and	r24, r24
     346:	69 f0       	breq	.+26     	; 0x362 <read_ADS1115+0x90>
		stop_TWI();
     348:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     34c:	6c 2f       	mov	r22, r28
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
     358:	56 2f       	mov	r21, r22
     35a:	47 2f       	mov	r20, r23
     35c:	38 2f       	mov	r19, r24
     35e:	29 2f       	mov	r18, r25
     360:	aa c0       	rjmp	.+340    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     362:	81 2f       	mov	r24, r17
     364:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     368:	c8 2f       	mov	r28, r24
     36a:	88 23       	and	r24, r24
     36c:	69 f0       	breq	.+26     	; 0x388 <read_ADS1115+0xb6>
		stop_TWI();
     36e:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     372:	6c 2f       	mov	r22, r28
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
     37e:	56 2f       	mov	r21, r22
     380:	47 2f       	mov	r20, r23
     382:	38 2f       	mov	r19, r24
     384:	29 2f       	mov	r18, r25
     386:	97 c0       	rjmp	.+302    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	}
	stop_TWI();
     388:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
     38c:	8c e1       	ldi	r24, 0x1C	; 28
     38e:	8a 95       	dec	r24
     390:	f1 f7       	brne	.-4      	; 0x38e <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     392:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     394:	09 c0       	rjmp	.+18     	; 0x3a8 <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	8d 2f       	mov	r24, r29
     39a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     39e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3a2:	88 23       	and	r24, r24
     3a4:	0c f4       	brge	.+2      	; 0x3a8 <read_ADS1115+0xd6>
			converting = NO;
     3a6:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3a8:	c1 11       	cpse	r28, r1
     3aa:	f5 cf       	rjmp	.-22     	; 0x396 <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3ac:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	8d 2f       	mov	r24, r29
     3b4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	8d 2f       	mov	r24, r29
     3c2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	highbyte = read_TWI();
     3c6:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_TWI>
     3ca:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     3cc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
     3d0:	d8 2f       	mov	r29, r24
	stop_TWI();
     3d2:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	value = highbyte;
     3d6:	6c 2f       	mov	r22, r28
     3d8:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     3da:	76 2f       	mov	r23, r22
     3dc:	66 27       	eor	r22, r22
	value |= lowbyte;
     3de:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	f8 16       	cp	r15, r24
     3e4:	49 f1       	breq	.+82     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     3e6:	8f 15       	cp	r24, r15
     3e8:	30 f0       	brcs	.+12     	; 0x3f6 <read_ADS1115+0x124>
     3ea:	ff 20       	and	r15, r15
     3ec:	d9 f1       	breq	.+118    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	f8 16       	cp	r15, r24
     3f2:	69 f1       	breq	.+90     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3f4:	42 c0       	rjmp	.+132    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	f8 16       	cp	r15, r24
     3fa:	09 f4       	brne	.+2      	; 0x3fe <read_ADS1115+0x12c>
     3fc:	42 c0       	rjmp	.+132    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	f8 16       	cp	r15, r24
     402:	21 f0       	breq	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     404:	86 e0       	ldi	r24, 0x06	; 6
     406:	f8 12       	cpse	r15, r24
     408:	38 c0       	rjmp	.+112    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     40a:	0b c0       	rjmp	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		case PGA0256:
			scale = SCA0256;
     40c:	0f 2e       	mov	r0, r31
     40e:	f4 e7       	ldi	r31, 0x74	; 116
     410:	cf 2e       	mov	r12, r31
     412:	f3 e1       	ldi	r31, 0x13	; 19
     414:	df 2e       	mov	r13, r31
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	ef 2e       	mov	r14, r31
     41a:	f7 e3       	ldi	r31, 0x37	; 55
     41c:	ff 2e       	mov	r15, r31
     41e:	f0 2d       	mov	r31, r0
     420:	3a c0       	rjmp	.+116    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     422:	0f 2e       	mov	r0, r31
     424:	f4 e7       	ldi	r31, 0x74	; 116
     426:	cf 2e       	mov	r12, r31
     428:	f3 e1       	ldi	r31, 0x13	; 19
     42a:	df 2e       	mov	r13, r31
     42c:	f3 e0       	ldi	r31, 0x03	; 3
     42e:	ef 2e       	mov	r14, r31
     430:	f8 e3       	ldi	r31, 0x38	; 56
     432:	ff 2e       	mov	r15, r31
     434:	f0 2d       	mov	r31, r0
			break;
     436:	2f c0       	rjmp	.+94     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		case PGA2048:
			scale = SCA2048;
     438:	0f 2e       	mov	r0, r31
     43a:	f2 e1       	ldi	r31, 0x12	; 18
     43c:	cf 2e       	mov	r12, r31
     43e:	f3 e1       	ldi	r31, 0x13	; 19
     440:	df 2e       	mov	r13, r31
     442:	f3 e8       	ldi	r31, 0x83	; 131
     444:	ef 2e       	mov	r14, r31
     446:	f8 e3       	ldi	r31, 0x38	; 56
     448:	ff 2e       	mov	r15, r31
     44a:	f0 2d       	mov	r31, r0
			break;
     44c:	24 c0       	rjmp	.+72     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		case PGA4096:
			scale = SCA4096;
     44e:	0f 2e       	mov	r0, r31
     450:	f4 e7       	ldi	r31, 0x74	; 116
     452:	cf 2e       	mov	r12, r31
     454:	f3 e1       	ldi	r31, 0x13	; 19
     456:	df 2e       	mov	r13, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	ef 2e       	mov	r14, r31
     45c:	f9 e3       	ldi	r31, 0x39	; 57
     45e:	ff 2e       	mov	r15, r31
     460:	f0 2d       	mov	r31, r0
			break;
     462:	19 c0       	rjmp	.+50     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		case PGA6144:
			scale = SCA6144;
     464:	0f 2e       	mov	r0, r31
     466:	fe e2       	ldi	r31, 0x2E	; 46
     468:	cf 2e       	mov	r12, r31
     46a:	fd e9       	ldi	r31, 0x9D	; 157
     46c:	df 2e       	mov	r13, r31
     46e:	f4 e4       	ldi	r31, 0x44	; 68
     470:	ef 2e       	mov	r14, r31
     472:	f9 e3       	ldi	r31, 0x39	; 57
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
			break;
     478:	0e c0       	rjmp	.+28     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		default:
			scale = 0.0;
     47a:	c1 2c       	mov	r12, r1
     47c:	d1 2c       	mov	r13, r1
     47e:	76 01       	movw	r14, r12
			break;
     480:	0a c0       	rjmp	.+20     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     482:	0f 2e       	mov	r0, r31
     484:	f1 e7       	ldi	r31, 0x71	; 113
     486:	cf 2e       	mov	r12, r31
     488:	f3 e1       	ldi	r31, 0x13	; 19
     48a:	df 2e       	mov	r13, r31
     48c:	f3 e8       	ldi	r31, 0x83	; 131
     48e:	ef 2e       	mov	r14, r31
     490:	f7 e3       	ldi	r31, 0x37	; 55
     492:	ff 2e       	mov	r15, r31
     494:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     496:	07 2e       	mov	r0, r23
     498:	00 0c       	add	r0, r0
     49a:	88 0b       	sbc	r24, r24
     49c:	99 0b       	sbc	r25, r25
     49e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatsisf>
     4a2:	9b 01       	movw	r18, r22
     4a4:	ac 01       	movw	r20, r24
     4a6:	c7 01       	movw	r24, r14
     4a8:	b6 01       	movw	r22, r12
     4aa:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
	return(voltage);
     4ae:	56 2f       	mov	r21, r22
     4b0:	47 2f       	mov	r20, r23
     4b2:	38 2f       	mov	r19, r24
     4b4:	29 2f       	mov	r18, r25

}
     4b6:	65 2f       	mov	r22, r21
     4b8:	74 2f       	mov	r23, r20
     4ba:	83 2f       	mov	r24, r19
     4bc:	92 2f       	mov	r25, r18
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	cf 90       	pop	r12
     4ce:	08 95       	ret

000004d0 <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     4d0:	e0 e2       	ldi	r30, 0x20	; 32
     4d2:	f4 e0       	ldi	r31, 0x04	; 4
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     4d8:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     4da:	86 83       	std	Z+6, r24	; 0x06
     4dc:	08 95       	ret

000004de <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	c4 51       	subi	r28, 0x14	; 20
     4ec:	d1 40       	sbci	r29, 0x01	; 1
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     4f2:	2b e0       	ldi	r18, 0x0B	; 11
     4f4:	ee e7       	ldi	r30, 0x7E	; 126
     4f6:	fc e7       	ldi	r31, 0x7C	; 124
     4f8:	de 01       	movw	r26, r28
     4fa:	11 96       	adiw	r26, 0x01	; 1
     4fc:	01 90       	ld	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	2a 95       	dec	r18
     502:	e1 f7       	brne	.-8      	; 0x4fc <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     504:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     508:	22 ff       	sbrs	r18, 2
     50a:	03 c0       	rjmp	.+6      	; 0x512 <echo_cmd+0x34>
     50c:	22 e0       	ldi	r18, 0x02	; 2
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <echo_cmd+0x38>
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	3f 93       	push	r19
     51c:	2f 93       	push	r18
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	8e 01       	movw	r16, r28
     528:	04 5f       	subi	r16, 0xF4	; 244
     52a:	1f 4f       	sbci	r17, 0xFF	; 255
     52c:	1f 93       	push	r17
     52e:	0f 93       	push	r16
     530:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
	checksum_NMEA(strbuf);
     534:	c8 01       	movw	r24, r16
     536:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     53a:	f8 01       	movw	r30, r16
     53c:	01 90       	ld	r0, Z+
     53e:	00 20       	and	r0, r0
     540:	e9 f7       	brne	.-6      	; 0x53c <echo_cmd+0x5e>
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	af 01       	movw	r20, r30
     546:	40 1b       	sub	r20, r16
     548:	51 0b       	sbc	r21, r17
     54a:	b8 01       	movw	r22, r16
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
//send_USART(1, (uint8_t*) strbuf, strlen(strbuf)); // testing the port
}
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	cc 5e       	subi	r28, 0xEC	; 236
     558:	de 4f       	sbci	r29, 0xFE	; 254
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     568:	9f e9       	ldi	r25, 0x9F	; 159
     56a:	98 0f       	add	r25, r24
     56c:	9a 31       	cpi	r25, 0x1A	; 26
     56e:	28 f0       	brcs	.+10     	; 0x57a <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     570:	81 54       	subi	r24, 0x41	; 65
     572:	8a 31       	cpi	r24, 0x1A	; 26
     574:	20 f4       	brcc	.+8      	; 0x57e <isaletter+0x16>
		return(1);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     57e:	80 e0       	ldi	r24, 0x00	; 0

}
     580:	08 95       	ret

00000582 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     58e:	e6 2e       	mov	r14, r22
     590:	f1 2c       	mov	r15, r1
     592:	84 e3       	ldi	r24, 0x34	; 52
     594:	8e 9d       	mul	r24, r14
     596:	f0 01       	movw	r30, r0
     598:	8f 9d       	mul	r24, r15
     59a:	f0 0d       	add	r31, r0
     59c:	11 24       	eor	r1, r1
     59e:	eb 5f       	subi	r30, 0xFB	; 251
     5a0:	f7 4d       	sbci	r31, 0xD7	; 215
     5a2:	8f e3       	ldi	r24, 0x3F	; 63
     5a4:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5a6:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5a8:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5aa:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <parse_cmd+0x34>
		if (*ptr == '\0') {
     5ae:	11 23       	and	r17, r17
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <parse_cmd+0x32>
     5b2:	75 c0       	rjmp	.+234    	; 0x69e <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5b4:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     5b6:	18 81       	ld	r17, Y
     5b8:	81 2f       	mov	r24, r17
     5ba:	0e 94 b4 02 	call	0x568	; 0x568 <isaletter>
     5be:	88 23       	and	r24, r24
     5c0:	b1 f3       	breq	.-20     	; 0x5ae <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	8e 9d       	mul	r24, r14
     5c8:	f0 01       	movw	r30, r0
     5ca:	8f 9d       	mul	r24, r15
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	eb 5f       	subi	r30, 0xFB	; 251
     5d2:	f7 4d       	sbci	r31, 0xD7	; 215
     5d4:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5d8:	11 23       	and	r17, r17
     5da:	09 f4       	brne	.+2      	; 0x5de <parse_cmd+0x5c>
     5dc:	60 c0       	rjmp	.+192    	; 0x69e <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5de:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     5e0:	18 81       	ld	r17, Y
     5e2:	81 2f       	mov	r24, r17
     5e4:	0e 94 b4 02 	call	0x568	; 0x568 <isaletter>
     5e8:	88 23       	and	r24, r24
     5ea:	b1 f3       	breq	.-20     	; 0x5d8 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	84 e3       	ldi	r24, 0x34	; 52
     5f0:	8e 9d       	mul	r24, r14
     5f2:	f0 01       	movw	r30, r0
     5f4:	8f 9d       	mul	r24, r15
     5f6:	f0 0d       	add	r31, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	eb 5f       	subi	r30, 0xFB	; 251
     5fc:	f7 4d       	sbci	r31, 0xD7	; 215
     5fe:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	2a c0       	rjmp	.+84     	; 0x658 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     604:	98 81       	ld	r25, Y
     606:	91 11       	cpse	r25, r1
     608:	0c c0       	rjmp	.+24     	; 0x622 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     60a:	94 e3       	ldi	r25, 0x34	; 52
     60c:	9e 9d       	mul	r25, r14
     60e:	f0 01       	movw	r30, r0
     610:	9f 9d       	mul	r25, r15
     612:	f0 0d       	add	r31, r0
     614:	11 24       	eor	r1, r1
     616:	eb 5f       	subi	r30, 0xFB	; 251
     618:	f7 4d       	sbci	r31, 0xD7	; 215
     61a:	e8 0f       	add	r30, r24
     61c:	f1 1d       	adc	r31, r1
     61e:	12 82       	std	Z+2, r1	; 0x02
			return;
     620:	3e c0       	rjmp	.+124    	; 0x69e <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     622:	9b 33       	cpi	r25, 0x3B	; 59
     624:	61 f4       	brne	.+24     	; 0x63e <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     626:	94 e3       	ldi	r25, 0x34	; 52
     628:	9e 9d       	mul	r25, r14
     62a:	f0 01       	movw	r30, r0
     62c:	9f 9d       	mul	r25, r15
     62e:	f0 0d       	add	r31, r0
     630:	11 24       	eor	r1, r1
     632:	eb 5f       	subi	r30, 0xFB	; 251
     634:	f7 4d       	sbci	r31, 0xD7	; 215
     636:	e8 0f       	add	r30, r24
     638:	f1 1d       	adc	r31, r1
     63a:	12 82       	std	Z+2, r1	; 0x02
			break;
     63c:	0f c0       	rjmp	.+30     	; 0x65c <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     63e:	21 96       	adiw	r28, 0x01	; 1
     640:	24 e3       	ldi	r18, 0x34	; 52
     642:	2e 9d       	mul	r18, r14
     644:	f0 01       	movw	r30, r0
     646:	2f 9d       	mul	r18, r15
     648:	f0 0d       	add	r31, r0
     64a:	11 24       	eor	r1, r1
     64c:	eb 5f       	subi	r30, 0xFB	; 251
     64e:	f7 4d       	sbci	r31, 0xD7	; 215
     650:	e8 0f       	add	r30, r24
     652:	f1 1d       	adc	r31, r1
     654:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	89 32       	cpi	r24, 0x29	; 41
     65a:	a0 f2       	brcs	.-88     	; 0x604 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     65c:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	1c c0       	rjmp	.+56     	; 0x69a <parse_cmd+0x118>
		if (*ptr == '\0') {
     662:	98 81       	ld	r25, Y
     664:	91 11       	cpse	r25, r1
     666:	0c c0       	rjmp	.+24     	; 0x680 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     668:	94 e3       	ldi	r25, 0x34	; 52
     66a:	9e 9d       	mul	r25, r14
     66c:	f0 01       	movw	r30, r0
     66e:	9f 9d       	mul	r25, r15
     670:	f0 0d       	add	r31, r0
     672:	11 24       	eor	r1, r1
     674:	eb 5f       	subi	r30, 0xFB	; 251
     676:	f7 4d       	sbci	r31, 0xD7	; 215
     678:	e8 0f       	add	r30, r24
     67a:	f1 1d       	adc	r31, r1
     67c:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     67e:	0f c0       	rjmp	.+30     	; 0x69e <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     680:	21 96       	adiw	r28, 0x01	; 1
     682:	24 e3       	ldi	r18, 0x34	; 52
     684:	2e 9d       	mul	r18, r14
     686:	f0 01       	movw	r30, r0
     688:	2f 9d       	mul	r18, r15
     68a:	f0 0d       	add	r31, r0
     68c:	11 24       	eor	r1, r1
     68e:	eb 5f       	subi	r30, 0xFB	; 251
     690:	f7 4d       	sbci	r31, 0xD7	; 215
     692:	e8 0f       	add	r30, r24
     694:	f1 1d       	adc	r31, r1
     696:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	89 30       	cpi	r24, 0x09	; 9
     69c:	10 f3       	brcs	.-60     	; 0x662 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	08 95       	ret

000006aa <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	6d 97       	sbiw	r28, 0x1d	; 29
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     6bc:	2e e3       	ldi	r18, 0x3E	; 62
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	29 83       	std	Y+1, r18	; 0x01
     6c2:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     6c4:	21 e2       	ldi	r18, 0x21	; 33
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	2b 83       	std	Y+3, r18	; 0x03
     6ca:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     6cc:	88 23       	and	r24, r24
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <send_prompt+0x2c>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	b9 f0       	breq	.+46     	; 0x702 <send_prompt+0x58>
     6d4:	2c c0       	rjmp	.+88     	; 0x72e <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6d6:	8e 01       	movw	r16, r28
     6d8:	0b 5f       	subi	r16, 0xFB	; 251
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	be 01       	movw	r22, r28
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     6e8:	f8 01       	movw	r30, r16
     6ea:	01 90       	ld	r0, Z+
     6ec:	00 20       	and	r0, r0
     6ee:	e9 f7       	brne	.-6      	; 0x6ea <send_prompt+0x40>
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	af 01       	movw	r20, r30
     6f4:	40 1b       	sub	r20, r16
     6f6:	51 0b       	sbc	r21, r17
     6f8:	b8 01       	movw	r22, r16
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			break;
     700:	2b c0       	rjmp	.+86     	; 0x758 <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     702:	8e 01       	movw	r16, r28
     704:	0b 5f       	subi	r16, 0xFB	; 251
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	be 01       	movw	r22, r28
     70a:	6d 5f       	subi	r22, 0xFD	; 253
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
     70e:	c8 01       	movw	r24, r16
     710:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     714:	f8 01       	movw	r30, r16
     716:	01 90       	ld	r0, Z+
     718:	00 20       	and	r0, r0
     71a:	e9 f7       	brne	.-6      	; 0x716 <send_prompt+0x6c>
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	af 01       	movw	r20, r30
     720:	40 1b       	sub	r20, r16
     722:	51 0b       	sbc	r21, r17
     724:	b8 01       	movw	r22, r16
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			break;
     72c:	15 c0       	rjmp	.+42     	; 0x758 <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     72e:	8e 01       	movw	r16, r28
     730:	0b 5f       	subi	r16, 0xFB	; 251
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	be 01       	movw	r22, r28
     736:	6d 5f       	subi	r22, 0xFD	; 253
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     740:	f8 01       	movw	r30, r16
     742:	01 90       	ld	r0, Z+
     744:	00 20       	and	r0, r0
     746:	e9 f7       	brne	.-6      	; 0x742 <send_prompt+0x98>
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	af 01       	movw	r20, r30
     74c:	40 1b       	sub	r20, r16
     74e:	51 0b       	sbc	r21, r17
     750:	b8 01       	movw	r22, r16
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			break;

	}

}
     758:	6d 96       	adiw	r28, 0x1d	; 29
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	cf 5f       	subi	r28, 0xFF	; 255
     776:	d1 09       	sbc	r29, r1
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	1d c0       	rjmp	.+58     	; 0x7ba <commands+0x52>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     780:	07 e1       	ldi	r16, 0x17	; 23
     782:	1c e2       	ldi	r17, 0x2C	; 44
     784:	f8 01       	movw	r30, r16
     786:	80 81       	ld	r24, Z
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	fc 01       	movw	r30, r24
     78c:	e9 5e       	subi	r30, 0xE9	; 233
     78e:	f4 4d       	sbci	r31, 0xD4	; 212
     790:	40 81       	ld	r20, Z
     792:	e1 e0       	ldi	r30, 0x01	; 1
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ec 0f       	add	r30, r28
     798:	fd 1f       	adc	r31, r29
     79a:	e3 0f       	add	r30, r19
     79c:	f1 1d       	adc	r31, r1
     79e:	40 83       	st	Z, r20
		recv0_buf.length--;
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	20 93 19 2c 	sts	0x2C19, r18	; 0x802c19 <recv0_buf+0x102>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	6f ef       	ldi	r22, 0xFF	; 255
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
     7b0:	f8 01       	movw	r30, r16
     7b2:	80 83       	st	Z, r24
		if (cmdline[i] == '\0') {
     7b4:	44 23       	and	r20, r20
     7b6:	29 f0       	breq	.+10     	; 0x7c2 <commands+0x5a>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     7b8:	3f 5f       	subi	r19, 0xFF	; 255
     7ba:	20 91 19 2c 	lds	r18, 0x2C19	; 0x802c19 <recv0_buf+0x102>
     7be:	21 11       	cpse	r18, r1
     7c0:	df cf       	rjmp	.-66     	; 0x780 <commands+0x18>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
		if (cmdline[i] == '\0') {
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
     7c2:	e1 e0       	ldi	r30, 0x01	; 1
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	ec 0f       	add	r30, r28
     7c8:	fd 1f       	adc	r31, r29
     7ca:	e3 0f       	add	r30, r19
     7cc:	f1 1d       	adc	r31, r1
     7ce:	10 82       	st	Z, r1
	if (rebootnack) {
     7d0:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     7d4:	88 23       	and	r24, r24
     7d6:	29 f1       	breq	.+74     	; 0x822 <commands+0xba>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	81 32       	cpi	r24, 0x21	; 33
     7dc:	99 f4       	brne	.+38     	; 0x804 <commands+0x9c>
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	91 11       	cpse	r25, r1
     7e2:	10 c0       	rjmp	.+32     	; 0x804 <commands+0x9c>
			init_RTC(511);		// 1-sec RTC clock ticks
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 b8 12 	call	0x2570	; 0x2570 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (min)
     7ec:	85 e0       	ldi	r24, 0x05	; 5
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     7f4:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>
			rebootnack = 0;
     7fe:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     802:	6d c0       	rjmp	.+218    	; 0x8de <commands+0x176>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     804:	81 32       	cpi	r24, 0x21	; 33
     806:	49 f4       	brne	.+18     	; 0x81a <commands+0xb2>
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	88 23       	and	r24, r24
     80c:	31 f0       	breq	.+12     	; 0x81a <commands+0xb2>
			send_prompt(EXCLAIMPROMPT);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>
			reboot();
     814:	0e 94 43 16 	call	0x2c86	; 0x2c86 <reboot>
			return;
     818:	62 c0       	rjmp	.+196    	; 0x8de <commands+0x176>
		} else {
			send_prompt(EXCLAIMPROMPT);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>
			return;
     820:	5e c0       	rjmp	.+188    	; 0x8de <commands+0x176>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	0e 94 6f 02 	call	0x4de	; 0x4de <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	81 11       	cpse	r24, r1
     82e:	03 c0       	rjmp	.+6      	; 0x836 <commands+0xce>
		send_prompt(GREATERPROMPT);
     830:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>
		return;
     834:	54 c0       	rjmp	.+168    	; 0x8de <commands+0x176>
	}

	parse_cmd(cmdline, cstack);
     836:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 c1 02 	call	0x582	; 0x582 <parse_cmd>
	verb = pcmd[cstack].cverb;
     842:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     846:	f4 e3       	ldi	r31, 0x34	; 52
     848:	8f 9f       	mul	r24, r31
     84a:	d0 01       	movw	r26, r0
     84c:	11 24       	eor	r1, r1
     84e:	ab 5f       	subi	r26, 0xFB	; 251
     850:	b7 4d       	sbci	r27, 0xD7	; 215
     852:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     854:	11 96       	adiw	r26, 0x01	; 1
     856:	9c 91       	ld	r25, X

	switch (verb) {
     858:	4e 2f       	mov	r20, r30
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	fa 01       	movw	r30, r20
     85e:	e2 55       	subi	r30, 0x52	; 82
     860:	f1 09       	sbc	r31, r1
     862:	e3 32       	cpi	r30, 0x23	; 35
     864:	f1 05       	cpc	r31, r1
     866:	68 f5       	brcc	.+90     	; 0x8c2 <commands+0x15a>
     868:	e0 5b       	subi	r30, 0xB0	; 176
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     870:	89 2f       	mov	r24, r25
     872:	0e 94 04 0c 	call	0x1808	; 0x1808 <close_PNEU>
     876:	28 2f       	mov	r18, r24
			break;
     878:	25 c0       	rjmp	.+74     	; 0x8c4 <commands+0x15c>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     87a:	89 2f       	mov	r24, r25
     87c:	0e 94 96 0c 	call	0x192c	; 0x192c <open_PNEU>
     880:	28 2f       	mov	r18, r24
			break;
     882:	20 c0       	rjmp	.+64     	; 0x8c4 <commands+0x15c>

		case 'm':
			get_ROBOVoltage(MOTORAADDR);
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	0e 94 60 12 	call	0x24c0	; 0x24c0 <get_ROBOVoltage>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
     88a:	20 e0       	ldi	r18, 0x00	; 0
			break;

		case 'm':
			get_ROBOVoltage(MOTORAADDR);
//			send_USART(1, buffer, 3);
			break;
     88c:	1b c0       	rjmp	.+54     	; 0x8c4 <commands+0x15c>

		case 'r':				// Report
			prompt_flag = report(cstack);
     88e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <report>
     892:	28 2f       	mov	r18, r24
			break;
     894:	17 c0       	rjmp	.+46     	; 0x8c4 <commands+0x15c>

		case 's':				// Set
			prompt_flag = set(cstack);
     896:	0e 94 2b 13 	call	0x2656	; 0x2656 <set>
     89a:	28 2f       	mov	r18, r24
			break;
     89c:	13 c0       	rjmp	.+38     	; 0x8c4 <commands+0x15c>

		case 't':
			testroutine();
     89e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
     8a2:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <commands+0x15c>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ac:	2a e6       	ldi	r18, 0x6A	; 106
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	90 40       	sbci	r25, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <commands+0x14a>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <commands+0x154>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     8bc:	0e 94 43 16 	call	0x2c86	; 0x2c86 <reboot>
			return;
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <commands+0x176>

		default:
			prompt_flag = ERRORPROMPT;
     8c2:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     8c4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	6a e0       	ldi	r22, 0x0A	; 10
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
     8d4:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     8d8:	82 2f       	mov	r24, r18
     8da:	0e 94 55 03 	call	0x6aa	; 0x6aa <send_prompt>

}
     8de:	c1 50       	subi	r28, 0x01	; 1
     8e0:	df 4f       	sbci	r29, 0xFF	; 255
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     8f0:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     8f2:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     8f4:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     8f6:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     8f8:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     8fa:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     8fc:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     8fe:	1f 92       	push	r1
     900:	7f 93       	push	r23
     902:	1f 92       	push	r1
     904:	6f 93       	push	r22
     906:	1f 92       	push	r1
     908:	5f 93       	push	r21
     90a:	1f 92       	push	r1
     90c:	4f 93       	push	r20
     90e:	1f 92       	push	r1
     910:	3f 93       	push	r19
     912:	1f 92       	push	r1
     914:	2f 93       	push	r18
     916:	29 e8       	ldi	r18, 0x89	; 137
     918:	3c e7       	ldi	r19, 0x7C	; 124
     91a:	3f 93       	push	r19
     91c:	2f 93       	push	r18
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     926:	8d b7       	in	r24, 0x3d	; 61
     928:	9e b7       	in	r25, 0x3e	; 62
     92a:	40 96       	adiw	r24, 0x10	; 16
     92c:	8d bf       	out	0x3d, r24	; 61
     92e:	9e bf       	out	0x3e, r25	; 62
     930:	08 95       	ret

00000932 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     932:	dc 01       	movw	r26, r24
     934:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     936:	81 89       	ldd	r24, Z+17	; 0x11
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	c0 97       	sbiw	r24, 0x30	; 48
     93c:	82 95       	swap	r24
     93e:	92 95       	swap	r25
     940:	90 7f       	andi	r25, 0xF0	; 240
     942:	98 27       	eor	r25, r24
     944:	80 7f       	andi	r24, 0xF0	; 240
     946:	98 27       	eor	r25, r24
     948:	92 89       	ldd	r25, Z+18	; 0x12
     94a:	90 53       	subi	r25, 0x30	; 48
     94c:	89 2b       	or	r24, r25
     94e:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     950:	86 85       	ldd	r24, Z+14	; 0x0e
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	c0 97       	sbiw	r24, 0x30	; 48
     956:	82 95       	swap	r24
     958:	92 95       	swap	r25
     95a:	90 7f       	andi	r25, 0xF0	; 240
     95c:	98 27       	eor	r25, r24
     95e:	80 7f       	andi	r24, 0xF0	; 240
     960:	98 27       	eor	r25, r24
     962:	97 85       	ldd	r25, Z+15	; 0x0f
     964:	90 53       	subi	r25, 0x30	; 48
     966:	89 2b       	or	r24, r25
     968:	11 96       	adiw	r26, 0x01	; 1
     96a:	8c 93       	st	X, r24
     96c:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     96e:	83 85       	ldd	r24, Z+11	; 0x0b
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	c0 97       	sbiw	r24, 0x30	; 48
     974:	82 95       	swap	r24
     976:	92 95       	swap	r25
     978:	90 7f       	andi	r25, 0xF0	; 240
     97a:	98 27       	eor	r25, r24
     97c:	80 7f       	andi	r24, 0xF0	; 240
     97e:	98 27       	eor	r25, r24
     980:	94 85       	ldd	r25, Z+12	; 0x0c
     982:	90 53       	subi	r25, 0x30	; 48
     984:	89 2b       	or	r24, r25
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	8c 93       	st	X, r24
     98a:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	13 96       	adiw	r26, 0x03	; 3
     990:	8c 93       	st	X, r24
     992:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     994:	80 85       	ldd	r24, Z+8	; 0x08
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	c0 97       	sbiw	r24, 0x30	; 48
     99a:	82 95       	swap	r24
     99c:	92 95       	swap	r25
     99e:	90 7f       	andi	r25, 0xF0	; 240
     9a0:	98 27       	eor	r25, r24
     9a2:	80 7f       	andi	r24, 0xF0	; 240
     9a4:	98 27       	eor	r25, r24
     9a6:	91 85       	ldd	r25, Z+9	; 0x09
     9a8:	90 53       	subi	r25, 0x30	; 48
     9aa:	89 2b       	or	r24, r25
     9ac:	14 96       	adiw	r26, 0x04	; 4
     9ae:	8c 93       	st	X, r24
     9b0:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9b2:	25 81       	ldd	r18, Z+5	; 0x05
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	20 53       	subi	r18, 0x30	; 48
     9b8:	31 09       	sbc	r19, r1
     9ba:	22 95       	swap	r18
     9bc:	32 95       	swap	r19
     9be:	30 7f       	andi	r19, 0xF0	; 240
     9c0:	32 27       	eor	r19, r18
     9c2:	20 7f       	andi	r18, 0xF0	; 240
     9c4:	32 27       	eor	r19, r18
     9c6:	86 81       	ldd	r24, Z+6	; 0x06
     9c8:	80 53       	subi	r24, 0x30	; 48
     9ca:	28 2b       	or	r18, r24
     9cc:	15 96       	adiw	r26, 0x05	; 5
     9ce:	2c 93       	st	X, r18
     9d0:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     9d2:	22 81       	ldd	r18, Z+2	; 0x02
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	20 53       	subi	r18, 0x30	; 48
     9d8:	31 09       	sbc	r19, r1
     9da:	22 95       	swap	r18
     9dc:	32 95       	swap	r19
     9de:	30 7f       	andi	r19, 0xF0	; 240
     9e0:	32 27       	eor	r19, r18
     9e2:	20 7f       	andi	r18, 0xF0	; 240
     9e4:	32 27       	eor	r19, r18
     9e6:	83 81       	ldd	r24, Z+3	; 0x03
     9e8:	80 53       	subi	r24, 0x30	; 48
     9ea:	28 2b       	or	r18, r24
     9ec:	16 96       	adiw	r26, 0x06	; 6
     9ee:	2c 93       	st	X, r18
     9f0:	08 95       	ret

000009f2 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     a04:	c8 2f       	mov	r28, r24
     a06:	88 23       	and	r24, r24
     a08:	21 f0       	breq	.+8      	; 0xa12 <read_DS3231+0x20>
		stop_TWI();
     a0a:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     a0e:	8c 2f       	mov	r24, r28
     a10:	28 c0       	rjmp	.+80     	; 0xa62 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     a18:	c8 2f       	mov	r28, r24
     a1a:	88 23       	and	r24, r24
     a1c:	21 f0       	breq	.+8      	; 0xa26 <read_DS3231+0x34>
		stop_TWI();
     a1e:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     a22:	8c 2f       	mov	r24, r28
     a24:	1e c0       	rjmp	.+60     	; 0xa62 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	88 e6       	ldi	r24, 0x68	; 104
     a2a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     a2e:	c8 2f       	mov	r28, r24
     a30:	88 23       	and	r24, r24
     a32:	69 f0       	breq	.+26     	; 0xa4e <read_DS3231+0x5c>
		stop_TWI();
     a34:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     a38:	8c 2f       	mov	r24, r28
     a3a:	13 c0       	rjmp	.+38     	; 0xa62 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a3c:	87 01       	movw	r16, r14
     a3e:	0c 0f       	add	r16, r28
     a40:	11 1d       	adc	r17, r1
     a42:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_TWI>
     a46:	f8 01       	movw	r30, r16
     a48:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a4a:	cf 5f       	subi	r28, 0xFF	; 255
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <read_DS3231+0x5e>
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	c6 30       	cpi	r28, 0x06	; 6
     a52:	a0 f3       	brcs	.-24     	; 0xa3c <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a54:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
     a58:	f7 01       	movw	r30, r14
     a5a:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a5c:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	return(0);
     a60:	80 e0       	ldi	r24, 0x00	; 0

}
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	27 97       	sbiw	r28, 0x07	; 7
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     a82:	be 01       	movw	r22, r28
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	88 e6       	ldi	r24, 0x68	; 104
     a8a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <read_DS3231>
     a8e:	88 23       	and	r24, r24
     a90:	49 f0       	breq	.+18     	; 0xaa4 <get_time+0x36>
		strcpy(isotime, "?DS3231");
     a92:	98 e0       	ldi	r25, 0x08	; 8
     a94:	e9 ea       	ldi	r30, 0xA9	; 169
     a96:	fc e7       	ldi	r31, 0x7C	; 124
     a98:	d8 01       	movw	r26, r16
     a9a:	01 90       	ld	r0, Z+
     a9c:	0d 92       	st	X+, r0
     a9e:	9a 95       	dec	r25
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <get_time+0x2c>
		return(retval);
     aa2:	07 c0       	rjmp	.+14     	; 0xab2 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 78 04 	call	0x8f0	; 0x8f0 <convert_ds2iso>
	return(0);
     ab0:	80 e0       	ldi	r24, 0x00	; 0

}
     ab2:	27 96       	adiw	r28, 0x07	; 7
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     ad6:	c8 2f       	mov	r28, r24
     ad8:	88 23       	and	r24, r24
     ada:	21 f0       	breq	.+8      	; 0xae4 <write_DS3231+0x22>
		stop_TWI();
     adc:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     ae0:	8c 2f       	mov	r24, r28
     ae2:	22 c0       	rjmp	.+68     	; 0xb28 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     aea:	c8 2f       	mov	r28, r24
     aec:	88 23       	and	r24, r24
     aee:	b1 f0       	breq	.+44     	; 0xb1c <write_DS3231+0x5a>
		stop_TWI();
     af0:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     af4:	8c 2f       	mov	r24, r28
     af6:	18 c0       	rjmp	.+48     	; 0xb28 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     af8:	78 01       	movw	r14, r16
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	e8 1a       	sub	r14, r24
     afe:	f8 0a       	sbc	r15, r24
     b00:	f8 01       	movw	r30, r16
     b02:	80 81       	ld	r24, Z
     b04:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     b08:	c8 2f       	mov	r28, r24
     b0a:	88 23       	and	r24, r24
     b0c:	21 f0       	breq	.+8      	; 0xb16 <write_DS3231+0x54>
			stop_TWI();
     b0e:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
			return(retval);
     b12:	8c 2f       	mov	r24, r28
     b14:	09 c0       	rjmp	.+18     	; 0xb28 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b16:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b18:	87 01       	movw	r16, r14
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <write_DS3231+0x5c>
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b1e:	d7 30       	cpi	r29, 0x07	; 7
     b20:	58 f3       	brcs	.-42     	; 0xaf8 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b22:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	return(0);
     b26:	80 e0       	ldi	r24, 0x00	; 0

}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b44:	bc 01       	movw	r22, r24
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 99 04 	call	0x932	; 0x932 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	88 e6       	ldi	r24, 0x68	; 104
     b56:	0e 94 61 05 	call	0xac2	; 0xac2 <write_DS3231>
		return(retval);
	}
	return(0);

}
     b5a:	27 96       	adiw	r28, 0x07	; 7
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     b66:	45 e1       	ldi	r20, 0x15	; 21
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	6b e0       	ldi	r22, 0x0B	; 11
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <eeprom_read_block>
     b72:	08 95       	ret

00000b74 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     b74:	4b e0       	ldi	r20, 0x0B	; 11
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <eeprom_read_block>
     b80:	08 95       	ret

00000b82 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	65 97       	sbiw	r28, 0x15	; 21
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     b98:	45 e1       	ldi	r20, 0x15	; 21
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	6b e0       	ldi	r22, 0x0B	; 11
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_update_block>

}
     ba8:	65 96       	adiw	r28, 0x15	; 21
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <update_VERSION>:

void update_VERSION(void)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	2b 97       	sbiw	r28, 0x0b	; 11
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     bc2:	8b e0       	ldi	r24, 0x0B	; 11
     bc4:	e1 eb       	ldi	r30, 0xB1	; 177
     bc6:	fc e7       	ldi	r31, 0x7C	; 124
     bc8:	de 01       	movw	r26, r28
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	8a 95       	dec	r24
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     bd4:	4b e0       	ldi	r20, 0x0B	; 11
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_update_block>

}
     be4:	2b 96       	adiw	r28, 0x0b	; 11
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     bf0:	0e 94 c1 05 	call	0xb82	; 0xb82 <update_BOOTTIME>
	update_VERSION();
     bf4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <update_VERSION>
     bf8:	08 95       	ret

00000bfa <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	c8 2f       	mov	r28, r24
     c08:	e6 2e       	mov	r14, r22
     c0a:	f7 2e       	mov	r15, r23
     c0c:	8a 01       	movw	r16, r20
     c0e:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     c16:	81 11       	cpse	r24, r1
     c18:	2b c0       	rjmp	.+86     	; 0xc70 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c1a:	8f 2d       	mov	r24, r15
     c1c:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     c20:	81 11       	cpse	r24, r1
     c22:	26 c0       	rjmp	.+76     	; 0xc70 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c24:	8e 2d       	mov	r24, r14
     c26:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     c2a:	81 11       	cpse	r24, r1
     c2c:	21 c0       	rjmp	.+66     	; 0xc70 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	8c 2f       	mov	r24, r28
     c32:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     c36:	81 11       	cpse	r24, r1
     c38:	1b c0       	rjmp	.+54     	; 0xc70 <read_FRAM+0x76>
     c3a:	c0 e0       	ldi	r28, 0x00	; 0
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c3e:	78 01       	movw	r14, r16
     c40:	ec 0e       	add	r14, r28
     c42:	f1 1c       	adc	r15, r1
     c44:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_TWI>
     c48:	f7 01       	movw	r30, r14
     c4a:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c4c:	cf 5f       	subi	r28, 0xFF	; 255
     c4e:	2c 2f       	mov	r18, r28
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	8d 2f       	mov	r24, r29
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	28 17       	cp	r18, r24
     c5a:	39 07       	cpc	r19, r25
     c5c:	84 f3       	brlt	.-32     	; 0xc3e <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c5e:	ec 01       	movw	r28, r24
     c60:	c0 0f       	add	r28, r16
     c62:	d1 1f       	adc	r29, r17
     c64:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
     c68:	88 83       	st	Y, r24

	stop_TWI();
     c6a:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	return(0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0

}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	08 95       	ret

00000c7e <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	f6 2e       	mov	r15, r22
     c8c:	17 2f       	mov	r17, r23
     c8e:	ea 01       	movw	r28, r20
     c90:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     c98:	81 11       	cpse	r24, r1
     c9a:	1c c0       	rjmp	.+56     	; 0xcd4 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     c9c:	81 2f       	mov	r24, r17
     c9e:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     ca2:	81 11       	cpse	r24, r1
     ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     ca6:	8f 2d       	mov	r24, r15
     ca8:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     cac:	81 11       	cpse	r24, r1
     cae:	12 c0       	rjmp	.+36     	; 0xcd4 <write_FRAM+0x56>
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cb4:	7e 01       	movw	r14, r28
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	e8 1a       	sub	r14, r24
     cba:	f8 0a       	sbc	r15, r24
     cbc:	88 81       	ld	r24, Y
     cbe:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     cc2:	81 11       	cpse	r24, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     cc6:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cc8:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     cca:	10 17       	cp	r17, r16
     ccc:	98 f3       	brcs	.-26     	; 0xcb4 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     cce:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	return(0);
     cd2:	80 e0       	ldi	r24, 0x00	; 0

}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	08 95       	ret

00000ce2 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     ce2:	8f 92       	push	r8
     ce4:	9f 92       	push	r9
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	59 f0       	breq	.+22     	; 0xd0c <get_humidity+0x2a>
     cf6:	18 f0       	brcs	.+6      	; 0xcfe <get_humidity+0x1c>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	79 f0       	breq	.+30     	; 0xd1a <get_humidity+0x38>
     cfc:	15 c0       	rjmp	.+42     	; 0xd28 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
     d04:	4b 01       	movw	r8, r22
     d06:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d08:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d0a:	17 c0       	rjmp	.+46     	; 0xd3a <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
     d12:	4b 01       	movw	r8, r22
     d14:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d16:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d18:	10 c0       	rjmp	.+32     	; 0xd3a <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
     d20:	4b 01       	movw	r8, r22
     d22:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d24:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d28:	0f 2e       	mov	r0, r31
     d2a:	81 2c       	mov	r8, r1
     d2c:	91 2c       	mov	r9, r1
     d2e:	f0 ea       	ldi	r31, 0xA0	; 160
     d30:	af 2e       	mov	r10, r31
     d32:	f1 e4       	ldi	r31, 0x41	; 65
     d34:	bf 2e       	mov	r11, r31
     d36:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d38:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d3a:	20 e8       	ldi	r18, 0x80	; 128
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	88 e4       	ldi	r24, 0x48	; 72
     d40:	0e 94 69 01 	call	0x2d2	; 0x2d2 <read_ADS1115>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 ea       	ldi	r20, 0xA0	; 160
     d4a:	50 e4       	ldi	r21, 0x40	; 64
     d4c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__divsf3>
     d50:	2a e0       	ldi	r18, 0x0A	; 10
     d52:	37 ed       	ldi	r19, 0xD7	; 215
     d54:	43 e2       	ldi	r20, 0x23	; 35
     d56:	5e e3       	ldi	r21, 0x3E	; 62
     d58:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     d5c:	2f e5       	ldi	r18, 0x5F	; 95
     d5e:	39 e2       	ldi	r19, 0x29	; 41
     d60:	4b ec       	ldi	r20, 0xCB	; 203
     d62:	5b e3       	ldi	r21, 0x3B	; 59
     d64:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__divsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     d6c:	29 ec       	ldi	r18, 0xC9	; 201
     d6e:	3e e8       	ldi	r19, 0x8E	; 142
     d70:	4d e0       	ldi	r20, 0x0D	; 13
     d72:	5b e3       	ldi	r21, 0x3B	; 59
     d74:	c5 01       	movw	r24, r10
     d76:	b4 01       	movw	r22, r8
     d78:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	62 e2       	ldi	r22, 0x22	; 34
     d82:	7d ef       	ldi	r23, 0xFD	; 253
     d84:	86 e8       	ldi	r24, 0x86	; 134
     d86:	9f e3       	ldi	r25, 0x3F	; 63
     d88:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
     d8c:	9b 01       	movw	r18, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__divsf3>
	return(humidity);

}
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	08 95       	ret

00000daa <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2b 97       	sbiw	r28, 0x0b	; 11
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     db8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     dbc:	8b e0       	ldi	r24, 0x0B	; 11
     dbe:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     dc2:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <init_XPORT>
	init_SPECID();
     dc6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <init_SPECID>
	init_LED();
     dca:	0e 94 93 07 	call	0xf26	; 0xf26 <init_LED>
	init_BEEPER();
     dce:	0e 94 68 02 	call	0x4d0	; 0x4d0 <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     dd2:	80 e2       	ldi	r24, 0x20	; 32
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 b8 12 	call	0x2570	; 0x2570 <init_RTC>
	init_USART();
     dda:	0e 94 28 14 	call	0x2850	; 0x2850 <init_USART>
	init_TWI();
     dde:	0e 94 c1 13 	call	0x2782	; 0x2782 <init_TWI>
	init_MMA8451();
     de2:	0e 94 2b 09 	call	0x1256	; 0x1256 <init_MMA8451>
	init_PNEU();
     de6:	0e 94 49 0b 	call	0x1692	; 0x1692 <init_PNEU>
	init_OLED(0);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 01 0a 	call	0x1402	; 0x1402 <init_OLED>
	init_OLED(1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 01 0a 	call	0x1402	; 0x1402 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     df6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     dfa:	80 ee       	ldi	r24, 0xE0	; 224
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     e02:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 ba 05 	call	0xb74	; 0xb74 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	6c eb       	ldi	r22, 0xBC	; 188
     e12:	7c e7       	ldi	r23, 0x7C	; 124
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e1a:	42 e0       	ldi	r20, 0x02	; 2
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>

}
     e28:	2b 96       	adiw	r28, 0x0b	; 11
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e56:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e5a:	86 ff       	sbrs	r24, 6
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e5e:	80 e4       	ldi	r24, 0x40	; 64
     e60:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e64:	0e 94 43 16 	call	0x2c86	; 0x2c86 <reboot>
	}

}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	21 f0       	breq	.+8      	; 0xe9e <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	79 f5       	brne	.+94     	; 0xef8 <read_ionpump+0x6e>
		pins = AIN23;
     e9a:	40 e3       	ldi	r20, 0x30	; 48
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     e9e:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     ea0:	20 e8       	ldi	r18, 0x80	; 128
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	89 e4       	ldi	r24, 0x49	; 73
     ea6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <read_ADS1115>
     eaa:	6b 01       	movw	r12, r22
     eac:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     eae:	2d ec       	ldi	r18, 0xCD	; 205
     eb0:	3c ec       	ldi	r19, 0xCC	; 204
     eb2:	4c ec       	ldi	r20, 0xCC	; 204
     eb4:	5e e3       	ldi	r21, 0x3E	; 62
     eb6:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	14 f1       	brlt	.+68     	; 0xf02 <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e4       	ldi	r21, 0x40	; 64
     ec6:	c7 01       	movw	r24, r14
     ec8:	b6 01       	movw	r22, r12
     eca:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__gesf2>
     ece:	18 16       	cp	r1, r24
     ed0:	ec f0       	brlt	.+58     	; 0xf0c <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     ed2:	29 e7       	ldi	r18, 0x79	; 121
     ed4:	39 ee       	ldi	r19, 0xE9	; 233
     ed6:	42 e0       	ldi	r20, 0x02	; 2
     ed8:	50 e4       	ldi	r21, 0x40	; 64
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
     ee2:	2e e6       	ldi	r18, 0x6E	; 110
     ee4:	33 ea       	ldi	r19, 0xA3	; 163
     ee6:	4b ed       	ldi	r20, 0xDB	; 219
     ee8:	50 e4       	ldi	r21, 0x40	; 64
     eea:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>

	return(vacuum);
     eee:	56 2f       	mov	r21, r22
     ef0:	47 2f       	mov	r20, r23
     ef2:	38 2f       	mov	r19, r24
     ef4:	29 2f       	mov	r18, r25
     ef6:	0e c0       	rjmp	.+28     	; 0xf14 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     ef8:	5a e9       	ldi	r21, 0x9A	; 154
     efa:	49 ef       	ldi	r20, 0xF9	; 249
     efc:	39 e7       	ldi	r19, 0x79	; 121
     efe:	24 ec       	ldi	r18, 0xC4	; 196
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     f02:	5a e9       	ldi	r21, 0x9A	; 154
     f04:	49 ef       	ldi	r20, 0xF9	; 249
     f06:	39 e7       	ldi	r19, 0x79	; 121
     f08:	24 ec       	ldi	r18, 0xC4	; 196
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f0c:	5a e9       	ldi	r21, 0x9A	; 154
     f0e:	49 ef       	ldi	r20, 0xF9	; 249
     f10:	39 e7       	ldi	r19, 0x79	; 121
     f12:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f14:	65 2f       	mov	r22, r21
     f16:	74 2f       	mov	r23, r20
     f18:	83 2f       	mov	r24, r19
     f1a:	92 2f       	mov	r25, r18
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f26:	e0 ea       	ldi	r30, 0xA0	; 160
     f28:	f4 e0       	ldi	r31, 0x04	; 4
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f2e:	81 83       	std	Z+1, r24	; 0x01
     f30:	08 95       	ret

00000f32 <main>:
extern void initialize(void);

int main(void)
{

	initialize();
     f32:	0e 94 d5 06 	call	0xdaa	; 0xdaa <initialize>
	sei();
     f36:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     f38:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x104>
     f3c:	88 23       	and	r24, r24
     f3e:	e1 f3       	breq	.-8      	; 0xf38 <main+0x6>
			recv0_buf.done = NO;
     f40:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>
//			on_BEEPER;
//			_delay_ms(50);
//			off_BEEPER;
			commands();
     f44:	0e 94 b4 03 	call	0x768	; 0x768 <commands>
     f48:	f7 cf       	rjmp	.-18     	; 0xf38 <main+0x6>

00000f4a <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	c8 2f       	mov	r28, r24
     f50:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	write_TWI(reg);
     f58:	8d 2f       	mov	r24, r29
     f5a:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
	start_TWI(addr, TWIREAD);
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	8c 2f       	mov	r24, r28
     f62:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	val = readlast_TWI();
     f66:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
     f6a:	c8 2f       	mov	r28, r24
	stop_TWI();
     f6c:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
	return(val);

}
     f70:	8c 2f       	mov	r24, r28
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	d6 2f       	mov	r29, r22
     f80:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
     f88:	c8 2f       	mov	r28, r24
     f8a:	88 23       	and	r24, r24
     f8c:	21 f0       	breq	.+8      	; 0xf96 <write_MCP23008+0x1e>
		stop_TWI();
     f8e:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     f92:	8c 2f       	mov	r24, r28
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     f96:	8d 2f       	mov	r24, r29
     f98:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     f9c:	c8 2f       	mov	r28, r24
     f9e:	88 23       	and	r24, r24
     fa0:	21 f0       	breq	.+8      	; 0xfaa <write_MCP23008+0x32>
		stop_TWI();
     fa2:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     fa6:	8c 2f       	mov	r24, r28
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     faa:	81 2f       	mov	r24, r17
     fac:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
     fb0:	c8 2f       	mov	r28, r24
     fb2:	88 23       	and	r24, r24
     fb4:	21 f0       	breq	.+8      	; 0xfbe <write_MCP23008+0x46>
		stop_TWI();
     fb6:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
     fba:	8c 2f       	mov	r24, r28
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <write_MCP23008+0x4c>
	}
	stop_TWI();
     fbe:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
	return(0);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
	
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	08 95       	ret

00000fcc <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	88 e1       	ldi	r24, 0x18	; 24
     fde:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	write_TWI(TEMPREGISTER);
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	88 e1       	ldi	r24, 0x18	; 24
     fec:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	highbyte = read_TWI();
     ff0:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_TWI>
     ff4:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     ff6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
     ffa:	d8 2f       	mov	r29, r24
	stop_TWI();
     ffc:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1000:	1c 2f       	mov	r17, r28
    1002:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1004:	6c 2f       	mov	r22, r28
    1006:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	51 e4       	ldi	r21, 0x41	; 65
    101a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    101e:	6b 01       	movw	r12, r22
    1020:	7c 01       	movw	r14, r24
    1022:	6d 2f       	mov	r22, r29
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5d e3       	ldi	r21, 0x3D	; 61
    1036:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
	if (sign) {
    1046:	11 23       	and	r17, r17
    1048:	41 f0       	breq	.+16     	; 0x105a <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 e8       	ldi	r24, 0x80	; 128
    1054:	93 e4       	ldi	r25, 0x43	; 67
    1056:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__subsf3>
	}
	return(temperature);
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	08 95       	ret

0000106a <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	18 2f       	mov	r17, r24
    1078:	f6 2e       	mov	r15, r22
    107a:	ea 01       	movw	r28, r20
    107c:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
    1084:	81 11       	cpse	r24, r1
    1086:	1e c0       	rjmp	.+60     	; 0x10c4 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    1088:	8f 2d       	mov	r24, r15
    108a:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
    108e:	81 11       	cpse	r24, r1
    1090:	19 c0       	rjmp	.+50     	; 0x10c4 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	81 2f       	mov	r24, r17
    1096:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
    109a:	81 11       	cpse	r24, r1
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <read_MMA8451+0x5a>
    109e:	11 e0       	ldi	r17, 0x01	; 1
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    10a2:	7e 01       	movw	r14, r28
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	e8 1a       	sub	r14, r24
    10a8:	f8 0a       	sbc	r15, r24
    10aa:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_TWI>
    10ae:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10b0:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10b2:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10b4:	10 17       	cp	r17, r16
    10b6:	a8 f3       	brcs	.-22     	; 0x10a2 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10b8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <readlast_TWI>
    10bc:	88 83       	st	Y, r24
	stop_TWI();
    10be:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
	return(0);
    10c2:	80 e0       	ldi	r24, 0x00	; 0

}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	08 95       	ret

000010d2 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	26 97       	sbiw	r28, 0x06	; 6
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	6c 01       	movw	r12, r24
    10ee:	7b 01       	movw	r14, r22
    10f0:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    10f2:	8a e9       	ldi	r24, 0x9A	; 154
    10f4:	9f e3       	ldi	r25, 0x3F	; 63
    10f6:	ac e1       	ldi	r26, 0x1C	; 28
    10f8:	b6 ec       	ldi	r27, 0xC6	; 198
    10fa:	fa 01       	movw	r30, r20
    10fc:	80 83       	st	Z, r24
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	a2 83       	std	Z+2, r26	; 0x02
    1102:	b3 83       	std	Z+3, r27	; 0x03
    1104:	fb 01       	movw	r30, r22
    1106:	80 83       	st	Z, r24
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	a2 83       	std	Z+2, r26	; 0x02
    110c:	b3 83       	std	Z+3, r27	; 0x03
    110e:	f6 01       	movw	r30, r12
    1110:	80 83       	st	Z, r24
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	a2 83       	std	Z+2, r26	; 0x02
    1116:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1118:	26 e0       	ldi	r18, 0x06	; 6
    111a:	ae 01       	movw	r20, r28
    111c:	4f 5f       	subi	r20, 0xFF	; 255
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	8d e1       	ldi	r24, 0x1D	; 29
    1124:	0e 94 35 08 	call	0x106a	; 0x106a <read_MMA8451>

	ix = datain[0];
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    112c:	98 2f       	mov	r25, r24
    112e:	88 27       	eor	r24, r24
	ix |= datain[1];
    1130:	2a 81       	ldd	r18, Y+2	; 0x02
    1132:	82 2b       	or	r24, r18
	ix /= 4;
    1134:	bc 01       	movw	r22, r24
    1136:	77 23       	and	r23, r23
    1138:	14 f4       	brge	.+4      	; 0x113e <get_orientation+0x6c>
    113a:	6d 5f       	subi	r22, 0xFD	; 253
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	75 95       	asr	r23
    1140:	67 95       	ror	r22
    1142:	75 95       	asr	r23
    1144:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1146:	07 2e       	mov	r0, r23
    1148:	00 0c       	add	r0, r0
    114a:	88 0b       	sbc	r24, r24
    114c:	99 0b       	sbc	r25, r25
    114e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatsisf>
    1152:	26 e6       	ldi	r18, 0x66	; 102
    1154:	36 e2       	ldi	r19, 0x26	; 38
    1156:	45 e7       	ldi	r20, 0x75	; 117
    1158:	5e e3       	ldi	r21, 0x3E	; 62
    115a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    115e:	f6 01       	movw	r30, r12
    1160:	60 83       	st	Z, r22
    1162:	71 83       	std	Z+1, r23	; 0x01
    1164:	82 83       	std	Z+2, r24	; 0x02
    1166:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    116c:	98 2f       	mov	r25, r24
    116e:	88 27       	eor	r24, r24
	iy |= datain[3];
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	82 2b       	or	r24, r18
	iy /= 4;
    1174:	bc 01       	movw	r22, r24
    1176:	77 23       	and	r23, r23
    1178:	14 f4       	brge	.+4      	; 0x117e <get_orientation+0xac>
    117a:	6d 5f       	subi	r22, 0xFD	; 253
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	75 95       	asr	r23
    1180:	67 95       	ror	r22
    1182:	75 95       	asr	r23
    1184:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1186:	07 2e       	mov	r0, r23
    1188:	00 0c       	add	r0, r0
    118a:	88 0b       	sbc	r24, r24
    118c:	99 0b       	sbc	r25, r25
    118e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatsisf>
    1192:	26 e6       	ldi	r18, 0x66	; 102
    1194:	36 e2       	ldi	r19, 0x26	; 38
    1196:	45 e7       	ldi	r20, 0x75	; 117
    1198:	5e e3       	ldi	r21, 0x3E	; 62
    119a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    119e:	f7 01       	movw	r30, r14
    11a0:	60 83       	st	Z, r22
    11a2:	71 83       	std	Z+1, r23	; 0x01
    11a4:	82 83       	std	Z+2, r24	; 0x02
    11a6:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11ac:	98 2f       	mov	r25, r24
    11ae:	88 27       	eor	r24, r24
	iz |= datain[5];
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	82 2b       	or	r24, r18
	iz /= 4;
    11b4:	bc 01       	movw	r22, r24
    11b6:	77 23       	and	r23, r23
    11b8:	14 f4       	brge	.+4      	; 0x11be <get_orientation+0xec>
    11ba:	6d 5f       	subi	r22, 0xFD	; 253
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	75 95       	asr	r23
    11c0:	67 95       	ror	r22
    11c2:	75 95       	asr	r23
    11c4:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11c6:	07 2e       	mov	r0, r23
    11c8:	00 0c       	add	r0, r0
    11ca:	88 0b       	sbc	r24, r24
    11cc:	99 0b       	sbc	r25, r25
    11ce:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatsisf>
    11d2:	26 e6       	ldi	r18, 0x66	; 102
    11d4:	36 e2       	ldi	r19, 0x26	; 38
    11d6:	45 e7       	ldi	r20, 0x75	; 117
    11d8:	5e e3       	ldi	r21, 0x3E	; 62
    11da:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    11de:	f8 01       	movw	r30, r16
    11e0:	60 83       	st	Z, r22
    11e2:	71 83       	std	Z+1, r23	; 0x01
    11e4:	82 83       	std	Z+2, r24	; 0x02
    11e6:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	26 96       	adiw	r28, 0x06	; 6
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	08 95       	ret

00001202 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	d6 2f       	mov	r29, r22
    120a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
    1212:	c8 2f       	mov	r28, r24
    1214:	88 23       	and	r24, r24
    1216:	21 f0       	breq	.+8      	; 0x1220 <write_MMA8451+0x1e>
		stop_TWI();
    1218:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
    121c:	8c 2f       	mov	r24, r28
    121e:	17 c0       	rjmp	.+46     	; 0x124e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1220:	8d 2f       	mov	r24, r29
    1222:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
    1226:	c8 2f       	mov	r28, r24
    1228:	88 23       	and	r24, r24
    122a:	21 f0       	breq	.+8      	; 0x1234 <write_MMA8451+0x32>
		stop_TWI();
    122c:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
    1230:	8c 2f       	mov	r24, r28
    1232:	0d c0       	rjmp	.+26     	; 0x124e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1234:	81 2f       	mov	r24, r17
    1236:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
    123a:	c8 2f       	mov	r28, r24
    123c:	88 23       	and	r24, r24
    123e:	21 f0       	breq	.+8      	; 0x1248 <write_MMA8451+0x46>
		stop_TWI();
    1240:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
		return(retval);
    1244:	8c 2f       	mov	r24, r28
    1246:	03 c0       	rjmp	.+6      	; 0x124e <write_MMA8451+0x4c>
	}
	stop_TWI();
    1248:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>
	return(0);
    124c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	08 95       	ret

00001256 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	1f 92       	push	r1
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1260:	40 e4       	ldi	r20, 0x40	; 64
    1262:	6b e2       	ldi	r22, 0x2B	; 43
    1264:	8d e1       	ldi	r24, 0x1D	; 29
    1266:	0e 94 01 09 	call	0x1202	; 0x1202 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	ae 01       	movw	r20, r28
    126e:	4f 5f       	subi	r20, 0xFF	; 255
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	6b e2       	ldi	r22, 0x2B	; 43
    1274:	8d e1       	ldi	r24, 0x1D	; 29
    1276:	0e 94 35 08 	call	0x106a	; 0x106a <read_MMA8451>
	while (retval & 0x40) {
    127a:	08 c0       	rjmp	.+16     	; 0x128c <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	ae 01       	movw	r20, r28
    1280:	4f 5f       	subi	r20, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	6b e2       	ldi	r22, 0x2B	; 43
    1286:	8d e1       	ldi	r24, 0x1D	; 29
    1288:	0e 94 35 08 	call	0x106a	; 0x106a <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	86 fd       	sbrc	r24, 6
    1290:	f5 cf       	rjmp	.-22     	; 0x127c <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1292:	40 ec       	ldi	r20, 0xC0	; 192
    1294:	6f e0       	ldi	r22, 0x0F	; 15
    1296:	8d e1       	ldi	r24, 0x1D	; 29
    1298:	0e 94 01 09 	call	0x1202	; 0x1202 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    129c:	42 e0       	ldi	r20, 0x02	; 2
    129e:	6b e2       	ldi	r22, 0x2B	; 43
    12a0:	8d e1       	ldi	r24, 0x1D	; 29
    12a2:	0e 94 01 09 	call	0x1202	; 0x1202 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    12a6:	4d e3       	ldi	r20, 0x3D	; 61
    12a8:	6a e2       	ldi	r22, 0x2A	; 42
    12aa:	8d e1       	ldi	r24, 0x1D	; 29
    12ac:	0e 94 01 09 	call	0x1202	; 0x1202 <write_MMA8451>

	return(retval);

}
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2e 97       	sbiw	r28, 0x0e	; 14
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    12d2:	88 e0       	ldi	r24, 0x08	; 8
    12d4:	ed ec       	ldi	r30, 0xCD	; 205
    12d6:	fc e7       	ldi	r31, 0x7C	; 124
    12d8:	de 01       	movw	r26, r28
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	01 90       	ld	r0, Z+
    12de:	0d 92       	st	X+, r0
    12e0:	8a 95       	dec	r24
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    12e4:	f8 01       	movw	r30, r16
    12e6:	01 90       	ld	r0, Z+
    12e8:	00 20       	and	r0, r0
    12ea:	e9 f7       	brne	.-6      	; 0x12e6 <checksum_NMEA+0x2c>
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	3e 2f       	mov	r19, r30
    12f0:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    12f2:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    12f8:	f8 01       	movw	r30, r16
    12fa:	e8 0f       	add	r30, r24
    12fc:	f1 1d       	adc	r31, r1
    12fe:	20 81       	ld	r18, Z
    1300:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	83 17       	cp	r24, r19
    1306:	c0 f3       	brcs	.-16     	; 0x12f8 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1308:	1f 92       	push	r1
    130a:	9f 93       	push	r25
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	9f 93       	push	r25
    1312:	8f 93       	push	r24
    1314:	7e 01       	movw	r14, r28
    1316:	89 e0       	ldi	r24, 0x09	; 9
    1318:	e8 0e       	add	r14, r24
    131a:	f1 1c       	adc	r15, r1
    131c:	ff 92       	push	r15
    131e:	ef 92       	push	r14
    1320:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
	strcat(str, chksum);
    1324:	b7 01       	movw	r22, r14
    1326:	c8 01       	movw	r24, r16
    1328:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <strcat>

}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	2e 96       	adiw	r28, 0x0e	; 14
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <printError>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void printError(uint8_t errorVal, char *string)
{
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	cf 55       	subi	r28, 0x5F	; 95
    135a:	d1 09       	sbc	r29, r1
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errformat[] = "$S%dERR,%d,%s";
    1360:	9e e0       	ldi	r25, 0x0E	; 14
    1362:	e5 ed       	ldi	r30, 0xD5	; 213
    1364:	fc e7       	ldi	r31, 0x7C	; 124
    1366:	de 01       	movw	r26, r28
    1368:	ae 5a       	subi	r26, 0xAE	; 174
    136a:	bf 4f       	sbci	r27, 0xFF	; 255
    136c:	01 90       	ld	r0, Z+
    136e:	0d 92       	st	X+, r0
    1370:	9a 95       	dec	r25
    1372:	e1 f7       	brne	.-8      	; 0x136c <printError+0x20>

	sprintf(strbuf, errformat, get_SPECID, errorVal, string);
    1374:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1378:	92 ff       	sbrs	r25, 2
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <printError+0x36>
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <printError+0x3a>
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	7f 93       	push	r23
    1388:	6f 93       	push	r22
    138a:	1f 92       	push	r1
    138c:	8f 93       	push	r24
    138e:	2f 93       	push	r18
    1390:	9f 93       	push	r25
    1392:	ce 01       	movw	r24, r28
    1394:	8e 5a       	subi	r24, 0xAE	; 174
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	8e 01       	movw	r16, r28
    139e:	0f 5f       	subi	r16, 0xFF	; 255
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	1f 93       	push	r17
    13a4:	0f 93       	push	r16
    13a6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
	checksum_NMEA(strbuf);
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
    13b0:	f8 01       	movw	r30, r16
    13b2:	01 90       	ld	r0, Z+
    13b4:	00 20       	and	r0, r0
    13b6:	e9 f7       	brne	.-6      	; 0x13b2 <printError+0x66>
    13b8:	31 97       	sbiw	r30, 0x01	; 1
    13ba:	af 01       	movw	r20, r30
    13bc:	40 1b       	sub	r20, r16
    13be:	51 0b       	sbc	r21, r17
    13c0:	b8 01       	movw	r22, r16
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>

}
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	c1 5a       	subi	r28, 0xA1	; 161
    13ce:	df 4f       	sbci	r29, 0xFF	; 255
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	08 95       	ret

000013de <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	d6 2f       	mov	r29, r22
    13e4:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <start_TWI>
	write_TWI(type);
    13ec:	8d 2f       	mov	r24, r29
    13ee:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
	write_TWI(byteToSend);
    13f2:	8c 2f       	mov	r24, r28
    13f4:	0e 94 13 14 	call	0x2826	; 0x2826 <write_TWI>
	stop_TWI();
    13f8:	0e 94 0f 14 	call	0x281e	; 0x281e <stop_TWI>

}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1402:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1404:	e0 e6       	ldi	r30, 0x60	; 96
    1406:	f4 e0       	ldi	r31, 0x04	; 4
    1408:	90 e4       	ldi	r25, 0x40	; 64
    140a:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	a1 e4       	ldi	r26, 0x41	; 65
    1410:	b3 e0       	ldi	r27, 0x03	; 3
    1412:	11 97       	sbiw	r26, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <init_OLED+0x10>
    1416:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1418:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    141a:	81 11       	cpse	r24, r1
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    141e:	cc e3       	ldi	r28, 0x3C	; 60
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1422:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1424:	4a e2       	ldi	r20, 0x2A	; 42
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	8c 2f       	mov	r24, r28
    142a:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    142e:	41 e7       	ldi	r20, 0x71	; 113
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	8c 2f       	mov	r24, r28
    1434:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1438:	4c e5       	ldi	r20, 0x5C	; 92
    143a:	60 e4       	ldi	r22, 0x40	; 64
    143c:	8c 2f       	mov	r24, r28
    143e:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1442:	48 e2       	ldi	r20, 0x28	; 40
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	8c 2f       	mov	r24, r28
    1448:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    144c:	48 e0       	ldi	r20, 0x08	; 8
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1456:	4a e2       	ldi	r20, 0x2A	; 42
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	8c 2f       	mov	r24, r28
    145c:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1460:	49 e7       	ldi	r20, 0x79	; 121
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	8c 2f       	mov	r24, r28
    1466:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    146a:	45 ed       	ldi	r20, 0xD5	; 213
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	8c 2f       	mov	r24, r28
    1470:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1474:	40 e7       	ldi	r20, 0x70	; 112
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	8c 2f       	mov	r24, r28
    147a:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    147e:	48 e7       	ldi	r20, 0x78	; 120
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	8c 2f       	mov	r24, r28
    1484:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1488:	48 e0       	ldi	r20, 0x08	; 8
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	8c 2f       	mov	r24, r28
    148e:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1492:	46 e0       	ldi	r20, 0x06	; 6
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	8c 2f       	mov	r24, r28
    1498:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    149c:	42 e7       	ldi	r20, 0x72	; 114
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	8c 2f       	mov	r24, r28
    14a2:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	60 e4       	ldi	r22, 0x40	; 64
    14aa:	8c 2f       	mov	r24, r28
    14ac:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14b0:	4a e2       	ldi	r20, 0x2A	; 42
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14ba:	49 e7       	ldi	r20, 0x79	; 121
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	8c 2f       	mov	r24, r28
    14c0:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    14c4:	4a ed       	ldi	r20, 0xDA	; 218
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	8c 2f       	mov	r24, r28
    14d4:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14d8:	4c ed       	ldi	r20, 0xDC	; 220
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	8c 2f       	mov	r24, r28
    14e8:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    14ec:	41 e8       	ldi	r20, 0x81	; 129
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	8c 2f       	mov	r24, r28
    14f2:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1500:	49 ed       	ldi	r20, 0xD9	; 217
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8c 2f       	mov	r24, r28
    1506:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    150a:	41 ef       	ldi	r20, 0xF1	; 241
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1514:	4b ed       	ldi	r20, 0xDB	; 219
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    151e:	40 e4       	ldi	r20, 0x40	; 64
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1528:	48 e7       	ldi	r20, 0x78	; 120
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8c 2f       	mov	r24, r28
    152e:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1532:	48 e2       	ldi	r20, 0x28	; 40
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	8c 2f       	mov	r24, r28
    1538:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1550:	4c e0       	ldi	r20, 0x0C	; 12
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
    155a:	ba e6       	ldi	r27, 0x6A	; 106
    155c:	24 e0       	ldi	r18, 0x04	; 4
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	b1 50       	subi	r27, 0x01	; 1
    1562:	20 40       	sbci	r18, 0x00	; 0
    1564:	80 40       	sbci	r24, 0x00	; 0
    1566:	e1 f7       	brne	.-8      	; 0x1560 <init_OLED+0x15e>
    1568:	00 c0       	rjmp	.+0      	; 0x156a <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    156a:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    156e:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
	timeoutOLED = 5;
    1572:	85 e0       	ldi	r24, 0x05	; 5
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
    157a:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>

}
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	e2 97       	sbiw	r28, 0x32	; 50
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    159a:	91 e1       	ldi	r25, 0x11	; 17
    159c:	e3 ee       	ldi	r30, 0xE3	; 227
    159e:	fc e7       	ldi	r31, 0x7C	; 124
    15a0:	de 01       	movw	r26, r28
    15a2:	92 96       	adiw	r26, 0x22	; 34
    15a4:	01 90       	ld	r0, Z+
    15a6:	0d 92       	st	X+, r0
    15a8:	9a 95       	dec	r25
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    15ac:	81 11       	cpse	r24, r1
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    15b0:	0c e3       	ldi	r16, 0x3C	; 60
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    15b4:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    15b6:	ce 01       	movw	r24, r28
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	7c 01       	movw	r14, r24
    15bc:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <strcpy>
	if (strlen(strbuf) > 16) {
    15c0:	f7 01       	movw	r30, r14
    15c2:	01 90       	ld	r0, Z+
    15c4:	00 20       	and	r0, r0
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <writestr_OLED+0x40>
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	ee 19       	sub	r30, r14
    15cc:	ff 09       	sbc	r31, r15
    15ce:	71 97       	sbiw	r30, 0x11	; 17
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    15d2:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    15d4:	be 01       	movw	r22, r28
    15d6:	6e 5d       	subi	r22, 0xDE	; 222
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <strcat>

	if (lineno == 1) {
    15e2:	11 30       	cpi	r17, 0x01	; 1
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	80 2f       	mov	r24, r16
    15ec:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	12 c0       	rjmp	.+36     	; 0x1618 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    15f4:	40 ec       	ldi	r20, 0xC0	; 192
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	80 2f       	mov	r24, r16
    15fa:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>
    15fe:	f8 cf       	rjmp	.-16     	; 0x15f0 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1600:	e1 e0       	ldi	r30, 0x01	; 1
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	ec 0f       	add	r30, r28
    1606:	fd 1f       	adc	r31, r29
    1608:	e1 0f       	add	r30, r17
    160a:	f1 1d       	adc	r31, r1
    160c:	40 81       	ld	r20, Z
    160e:	60 e4       	ldi	r22, 0x40	; 64
    1610:	80 2f       	mov	r24, r16
    1612:	0e 94 ef 09 	call	0x13de	; 0x13de <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1616:	1f 5f       	subi	r17, 0xFF	; 255
    1618:	10 31       	cpi	r17, 0x10	; 16
    161a:	90 f3       	brcs	.-28     	; 0x1600 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    1624:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>

}
    1628:	e2 96       	adiw	r28, 0x32	; 50
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	08 95       	ret

0000163c <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	61 97       	sbiw	r28, 0x11	; 17
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    164e:	81 e1       	ldi	r24, 0x11	; 17
    1650:	e3 ee       	ldi	r30, 0xE3	; 227
    1652:	fc e7       	ldi	r31, 0x7C	; 124
    1654:	de 01       	movw	r26, r28
    1656:	11 96       	adiw	r26, 0x01	; 1
    1658:	01 90       	ld	r0, Z+
    165a:	0d 92       	st	X+, r0
    165c:	8a 95       	dec	r24
    165e:	e1 f7       	brne	.-8      	; 0x1658 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	be 01       	movw	r22, r28
    1664:	6f 5f       	subi	r22, 0xFF	; 255
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	81 2f       	mov	r24, r17
    166a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    166e:	42 e0       	ldi	r20, 0x02	; 2
    1670:	be 01       	movw	r22, r28
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	81 2f       	mov	r24, r17
    1678:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
	timerOLED = 0;
    167c:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    1680:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>

}
    1684:	61 96       	adiw	r28, 0x11	; 17
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	08 95       	ret

00001692 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	84 e2       	ldi	r24, 0x24	; 36
    1698:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    169c:	81 11       	cpse	r24, r1
    169e:	35 c0       	rjmp	.+106    	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	6a e0       	ldi	r22, 0x0A	; 10
    16a4:	84 e2       	ldi	r24, 0x24	; 36
    16a6:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16aa:	81 11       	cpse	r24, r1
    16ac:	2e c0       	rjmp	.+92     	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    16ae:	4e ef       	ldi	r20, 0xFE	; 254
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	81 e2       	ldi	r24, 0x21	; 33
    16b4:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16b8:	81 11       	cpse	r24, r1
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	81 e2       	ldi	r24, 0x21	; 33
    16c2:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16c6:	81 11       	cpse	r24, r1
    16c8:	20 c0       	rjmp	.+64     	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    16ca:	4c ef       	ldi	r20, 0xFC	; 252
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	81 e2       	ldi	r24, 0x21	; 33
    16d0:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16d4:	81 11       	cpse	r24, r1
    16d6:	19 c0       	rjmp	.+50     	; 0x170a <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	81 e2       	ldi	r24, 0x21	; 33
    16de:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16e2:	81 11       	cpse	r24, r1
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	65 e0       	ldi	r22, 0x05	; 5
    16ea:	81 e2       	ldi	r24, 0x21	; 33
    16ec:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16f0:	81 11       	cpse	r24, r1
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	66 e0       	ldi	r22, 0x06	; 6
    16f8:	81 e2       	ldi	r24, 0x21	; 33
    16fa:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
    16fe:	81 11       	cpse	r24, r1
    1700:	04 c0       	rjmp	.+8      	; 0x170a <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1702:	89 e0       	ldi	r24, 0x09	; 9
    1704:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    1708:	80 e0       	ldi	r24, 0x00	; 0

}
    170a:	08 95       	ret

0000170c <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	6c 01       	movw	r12, r24
    171e:	8b 01       	movw	r16, r22
    1720:	7a 01       	movw	r14, r20
    1722:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    1724:	69 e0       	ldi	r22, 0x09	; 9
    1726:	81 e2       	ldi	r24, 0x21	; 33
    1728:	0e 94 a5 07 	call	0xf4a	; 0xf4a <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    172c:	98 2f       	mov	r25, r24
    172e:	92 95       	swap	r25
    1730:	96 95       	lsr	r25
    1732:	96 95       	lsr	r25
    1734:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1736:	91 30       	cpi	r25, 0x01	; 1
    1738:	21 f4       	brne	.+8      	; 0x1742 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    173a:	93 e6       	ldi	r25, 0x63	; 99
    173c:	f6 01       	movw	r30, r12
    173e:	90 83       	st	Z, r25
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    1742:	92 30       	cpi	r25, 0x02	; 2
    1744:	21 f4       	brne	.+8      	; 0x174e <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    1746:	9f e6       	ldi	r25, 0x6F	; 111
    1748:	f6 01       	movw	r30, r12
    174a:	90 83       	st	Z, r25
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    174e:	93 30       	cpi	r25, 0x03	; 3
    1750:	21 f4       	brne	.+8      	; 0x175a <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    1752:	94 e7       	ldi	r25, 0x74	; 116
    1754:	f6 01       	movw	r30, r12
    1756:	90 83       	st	Z, r25
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    175a:	98 e7       	ldi	r25, 0x78	; 120
    175c:	f6 01       	movw	r30, r12
    175e:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1760:	98 2f       	mov	r25, r24
    1762:	96 95       	lsr	r25
    1764:	96 95       	lsr	r25
	state &= 0b00000011;
    1766:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1768:	91 30       	cpi	r25, 0x01	; 1
    176a:	21 f4       	brne	.+8      	; 0x1774 <read_PNEUSENSORS+0x68>
		*right = 'c';
    176c:	93 e6       	ldi	r25, 0x63	; 99
    176e:	f7 01       	movw	r30, r14
    1770:	90 83       	st	Z, r25
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    1774:	92 30       	cpi	r25, 0x02	; 2
    1776:	21 f4       	brne	.+8      	; 0x1780 <read_PNEUSENSORS+0x74>
		*right = 'o';
    1778:	9f e6       	ldi	r25, 0x6F	; 111
    177a:	f7 01       	movw	r30, r14
    177c:	90 83       	st	Z, r25
    177e:	09 c0       	rjmp	.+18     	; 0x1792 <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    1780:	93 30       	cpi	r25, 0x03	; 3
    1782:	21 f4       	brne	.+8      	; 0x178c <read_PNEUSENSORS+0x80>
		*right = 't';
    1784:	94 e7       	ldi	r25, 0x74	; 116
    1786:	f7 01       	movw	r30, r14
    1788:	90 83       	st	Z, r25
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    178c:	98 e7       	ldi	r25, 0x78	; 120
    178e:	f7 01       	movw	r30, r14
    1790:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1792:	98 2f       	mov	r25, r24
    1794:	92 95       	swap	r25
    1796:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1798:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    179a:	91 30       	cpi	r25, 0x01	; 1
    179c:	21 f4       	brne	.+8      	; 0x17a6 <read_PNEUSENSORS+0x9a>
		*left = 'o';
    179e:	9f e6       	ldi	r25, 0x6F	; 111
    17a0:	f8 01       	movw	r30, r16
    17a2:	90 83       	st	Z, r25
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <read_PNEUSENSORS+0xb8>
	} else if (state == 2) {
    17a6:	92 30       	cpi	r25, 0x02	; 2
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <read_PNEUSENSORS+0xa6>
		*left = 'c';
    17aa:	93 e6       	ldi	r25, 0x63	; 99
    17ac:	f8 01       	movw	r30, r16
    17ae:	90 83       	st	Z, r25
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <read_PNEUSENSORS+0xb8>
	} else if (state == 3) {
    17b2:	93 30       	cpi	r25, 0x03	; 3
    17b4:	21 f4       	brne	.+8      	; 0x17be <read_PNEUSENSORS+0xb2>
		*left = 't';
    17b6:	94 e7       	ldi	r25, 0x74	; 116
    17b8:	f8 01       	movw	r30, r16
    17ba:	90 83       	st	Z, r25
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <read_PNEUSENSORS+0xb8>
	} else {
		*left = 'x';
    17be:	98 e7       	ldi	r25, 0x78	; 120
    17c0:	f8 01       	movw	r30, r16
    17c2:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    17c4:	81 ff       	sbrs	r24, 1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <read_PNEUSENSORS+0xc2>
		*air = '0';
    17c8:	80 e3       	ldi	r24, 0x30	; 48
    17ca:	88 83       	st	Y, r24
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <read_PNEUSENSORS+0xc6>
	} else {
		*air = '1';
    17ce:	81 e3       	ldi	r24, 0x31	; 49
    17d0:	88 83       	st	Y, r24
	}
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	08 95       	ret

000017e4 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	d8 2f       	mov	r29, r24
    17ea:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    17ec:	69 e0       	ldi	r22, 0x09	; 9
    17ee:	84 e2       	ldi	r24, 0x24	; 36
    17f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    17f4:	8d 2b       	or	r24, r29
    17f6:	48 2f       	mov	r20, r24
    17f8:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    17fa:	6a e0       	ldi	r22, 0x0A	; 10
    17fc:	84 e2       	ldi	r24, 0x24	; 36
    17fe:	0e 94 bc 07 	call	0xf78	; 0xf78 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	6a 97       	sbiw	r28, 0x1a	; 26
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1816:	99 e0       	ldi	r25, 0x09	; 9
    1818:	ec e0       	ldi	r30, 0x0C	; 12
    181a:	fd e7       	ldi	r31, 0x7D	; 125
    181c:	de 01       	movw	r26, r28
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	01 90       	ld	r0, Z+
    1822:	0d 92       	st	X+, r0
    1824:	9a 95       	dec	r25
    1826:	e1 f7       	brne	.-8      	; 0x1820 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    1828:	8c 36       	cpi	r24, 0x6C	; 108
    182a:	31 f1       	breq	.+76     	; 0x1878 <close_PNEU+0x70>
    182c:	18 f4       	brcc	.+6      	; 0x1834 <close_PNEU+0x2c>
    182e:	82 36       	cpi	r24, 0x62	; 98
    1830:	39 f0       	breq	.+14     	; 0x1840 <close_PNEU+0x38>
    1832:	75 c0       	rjmp	.+234    	; 0x191e <close_PNEU+0x116>
    1834:	82 37       	cpi	r24, 0x72	; 114
    1836:	c1 f1       	breq	.+112    	; 0x18a8 <close_PNEU+0xa0>
    1838:	83 37       	cpi	r24, 0x73	; 115
    183a:	09 f4       	brne	.+2      	; 0x183e <close_PNEU+0x36>
    183c:	4d c0       	rjmp	.+154    	; 0x18d8 <close_PNEU+0xd0>
    183e:	6f c0       	rjmp	.+222    	; 0x191e <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1840:	6a ee       	ldi	r22, 0xEA	; 234
    1842:	84 e4       	ldi	r24, 0x44	; 68
    1844:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1848:	66 ee       	ldi	r22, 0xE6	; 230
    184a:	88 e8       	ldi	r24, 0x88	; 136
    184c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1850:	84 ef       	ldi	r24, 0xF4	; 244
    1852:	9c e7       	ldi	r25, 0x7C	; 124
    1854:	9f 93       	push	r25
    1856:	8f 93       	push	r24
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	09 96       	adiw	r24, 0x09	; 9
    1862:	9f 93       	push	r25
    1864:	8f 93       	push	r24
    1866:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	47 c0       	rjmp	.+142    	; 0x1906 <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1878:	6a ee       	ldi	r22, 0xEA	; 234
    187a:	84 e4       	ldi	r24, 0x44	; 68
    187c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1880:	89 ef       	ldi	r24, 0xF9	; 249
    1882:	9c e7       	ldi	r25, 0x7C	; 124
    1884:	9f 93       	push	r25
    1886:	8f 93       	push	r24
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	9f 93       	push	r25
    188e:	8f 93       	push	r24
    1890:	09 96       	adiw	r24, 0x09	; 9
    1892:	9f 93       	push	r25
    1894:	8f 93       	push	r24
    1896:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	2f c0       	rjmp	.+94     	; 0x1906 <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18a8:	66 ee       	ldi	r22, 0xE6	; 230
    18aa:	88 e8       	ldi	r24, 0x88	; 136
    18ac:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    18b0:	8e ef       	ldi	r24, 0xFE	; 254
    18b2:	9c e7       	ldi	r25, 0x7C	; 124
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	ce 01       	movw	r24, r28
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	9f 93       	push	r25
    18be:	8f 93       	push	r24
    18c0:	09 96       	adiw	r24, 0x09	; 9
    18c2:	9f 93       	push	r25
    18c4:	8f 93       	push	r24
    18c6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	17 c0       	rjmp	.+46     	; 0x1906 <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    18d8:	6c ee       	ldi	r22, 0xEC	; 236
    18da:	82 e2       	ldi	r24, 0x22	; 34
    18dc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	9d e7       	ldi	r25, 0x7D	; 125
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	09 96       	adiw	r24, 0x09	; 9
    18f2:	9f 93       	push	r25
    18f4:	8f 93       	push	r24
    18f6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	0e 94 1e 0b 	call	0x163c	; 0x163c <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	be 01       	movw	r22, r28
    1910:	66 5f       	subi	r22, 0xF6	; 246
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
	return(GREATERPROMPT);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    191e:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1920:	6a 96       	adiw	r28, 0x1a	; 26
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	69 97       	sbiw	r28, 0x19	; 25
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    193a:	98 e0       	ldi	r25, 0x08	; 8
    193c:	e5 e1       	ldi	r30, 0x15	; 21
    193e:	fd e7       	ldi	r31, 0x7D	; 125
    1940:	de 01       	movw	r26, r28
    1942:	11 96       	adiw	r26, 0x01	; 1
    1944:	01 90       	ld	r0, Z+
    1946:	0d 92       	st	X+, r0
    1948:	9a 95       	dec	r25
    194a:	e1 f7       	brne	.-8      	; 0x1944 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    194c:	8c 36       	cpi	r24, 0x6C	; 108
    194e:	31 f1       	breq	.+76     	; 0x199c <open_PNEU+0x70>
    1950:	18 f4       	brcc	.+6      	; 0x1958 <open_PNEU+0x2c>
    1952:	82 36       	cpi	r24, 0x62	; 98
    1954:	39 f0       	breq	.+14     	; 0x1964 <open_PNEU+0x38>
    1956:	75 c0       	rjmp	.+234    	; 0x1a42 <open_PNEU+0x116>
    1958:	82 37       	cpi	r24, 0x72	; 114
    195a:	c1 f1       	breq	.+112    	; 0x19cc <open_PNEU+0xa0>
    195c:	83 37       	cpi	r24, 0x73	; 115
    195e:	09 f4       	brne	.+2      	; 0x1962 <open_PNEU+0x36>
    1960:	4d c0       	rjmp	.+154    	; 0x19fc <open_PNEU+0xd0>
    1962:	6f c0       	rjmp	.+222    	; 0x1a42 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1964:	6e ea       	ldi	r22, 0xAE	; 174
    1966:	84 e4       	ldi	r24, 0x44	; 68
    1968:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    196c:	6e e6       	ldi	r22, 0x6E	; 110
    196e:	88 e8       	ldi	r24, 0x88	; 136
    1970:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1974:	84 ef       	ldi	r24, 0xF4	; 244
    1976:	9c e7       	ldi	r25, 0x7C	; 124
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	08 96       	adiw	r24, 0x08	; 8
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
    198a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	47 c0       	rjmp	.+142    	; 0x1a2a <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    199c:	6e ea       	ldi	r22, 0xAE	; 174
    199e:	84 e4       	ldi	r24, 0x44	; 68
    19a0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    19a4:	89 ef       	ldi	r24, 0xF9	; 249
    19a6:	9c e7       	ldi	r25, 0x7C	; 124
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	ce 01       	movw	r24, r28
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	9f 93       	push	r25
    19b2:	8f 93       	push	r24
    19b4:	08 96       	adiw	r24, 0x08	; 8
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	2f c0       	rjmp	.+94     	; 0x1a2a <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19cc:	6e e6       	ldi	r22, 0x6E	; 110
    19ce:	88 e8       	ldi	r24, 0x88	; 136
    19d0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    19d4:	8e ef       	ldi	r24, 0xFE	; 254
    19d6:	9c e7       	ldi	r25, 0x7C	; 124
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	9f 93       	push	r25
    19e2:	8f 93       	push	r24
    19e4:	08 96       	adiw	r24, 0x08	; 8
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	17 c0       	rjmp	.+46     	; 0x1a2a <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    19fc:	6e ec       	ldi	r22, 0xCE	; 206
    19fe:	82 e2       	ldi	r24, 0x22	; 34
    1a00:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a04:	84 e0       	ldi	r24, 0x04	; 4
    1a06:	9d e7       	ldi	r25, 0x7D	; 125
    1a08:	9f 93       	push	r25
    1a0a:	8f 93       	push	r24
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	08 96       	adiw	r24, 0x08	; 8
    1a16:	9f 93       	push	r25
    1a18:	8f 93       	push	r24
    1a1a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			break;
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	0e 94 1e 0b 	call	0x163c	; 0x163c <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	be 01       	movw	r22, r28
    1a34:	67 5f       	subi	r22, 0xF7	; 247
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
	return(GREATERPROMPT);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a42:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a44:	69 96       	adiw	r28, 0x19	; 25
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1a50:	1f 92       	push	r1
    1a52:	0f 92       	push	r0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	2f 93       	push	r18
    1a5c:	3f 93       	push	r19
    1a5e:	4f 93       	push	r20
    1a60:	5f 93       	push	r21
    1a62:	6f 93       	push	r22
    1a64:	7f 93       	push	r23
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	af 93       	push	r26
    1a6c:	bf 93       	push	r27
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1a72:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1a76:	88 23       	and	r24, r24
    1a78:	64 f4       	brge	.+24     	; 0x1a92 <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1a80:	68 e0       	ldi	r22, 0x08	; 8
    1a82:	81 e2       	ldi	r24, 0x21	; 33
    1a84:	0e 94 a5 07 	call	0xf4a	; 0xf4a <read_MCP23008>
    1a88:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <pneuState>
		toggle_BEEPER;
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1ab4:	e0 e0       	ldi	r30, 0x00	; 0
    1ab6:	f4 e0       	ldi	r31, 0x04	; 4
    1ab8:	88 e0       	ldi	r24, 0x08	; 8
    1aba:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1abc:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1abe:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1ac0:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1ac2:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1ac4:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1ac6:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1ac8:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1aca:	e0 e2       	ldi	r30, 0x20	; 32
    1acc:	f4 e0       	ldi	r31, 0x04	; 4
    1ace:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1ad0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1ad2:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1ad4:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1ad6:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1ad8:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1ada:	e0 e4       	ldi	r30, 0x40	; 64
    1adc:	f4 e0       	ldi	r31, 0x04	; 4
    1ade:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1ae0:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1ae2:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1ae4:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1ae6:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1ae8:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1aea:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1aec:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1aee:	e0 e6       	ldi	r30, 0x60	; 96
    1af0:	f4 e0       	ldi	r31, 0x04	; 4
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1af6:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1af8:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1afa:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1afc:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1afe:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b00:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b02:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b04:	e0 e8       	ldi	r30, 0x80	; 128
    1b06:	f4 e0       	ldi	r31, 0x04	; 4
    1b08:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b0a:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b0c:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b0e:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b10:	e0 ea       	ldi	r30, 0xA0	; 160
    1b12:	f4 e0       	ldi	r31, 0x04	; 4
    1b14:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b16:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b18:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b1a:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b1c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b1e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b20:	86 8b       	std	Z+22, r24	; 0x16
    1b22:	08 95       	ret

00001b24 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b24:	2f 92       	push	r2
    1b26:	3f 92       	push	r3
    1b28:	4f 92       	push	r4
    1b2a:	5f 92       	push	r5
    1b2c:	6f 92       	push	r6
    1b2e:	7f 92       	push	r7
    1b30:	8f 92       	push	r8
    1b32:	9f 92       	push	r9
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	cd 59       	subi	r28, 0x9D	; 157
    1b4e:	d2 40       	sbci	r29, 0x02	; 2
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1b54:	92 e4       	ldi	r25, 0x42	; 66
    1b56:	eb e7       	ldi	r30, 0x7B	; 123
    1b58:	fd e7       	ldi	r31, 0x7D	; 125
    1b5a:	de 01       	movw	r26, r28
    1b5c:	af 5a       	subi	r26, 0xAF	; 175
    1b5e:	be 4f       	sbci	r27, 0xFE	; 254
    1b60:	01 90       	ld	r0, Z+
    1b62:	0d 92       	st	X+, r0
    1b64:	9a 95       	dec	r25
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <report+0x3c>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1b68:	90 e2       	ldi	r25, 0x20	; 32
    1b6a:	ed eb       	ldi	r30, 0xBD	; 189
    1b6c:	fd e7       	ldi	r31, 0x7D	; 125
    1b6e:	de 01       	movw	r26, r28
    1b70:	ad 56       	subi	r26, 0x6D	; 109
    1b72:	be 4f       	sbci	r27, 0xFE	; 254
    1b74:	01 90       	ld	r0, Z+
    1b76:	0d 92       	st	X+, r0
    1b78:	9a 95       	dec	r25
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <report+0x50>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1b7c:	92 e1       	ldi	r25, 0x12	; 18
    1b7e:	ed ed       	ldi	r30, 0xDD	; 221
    1b80:	fd e7       	ldi	r31, 0x7D	; 125
    1b82:	de 01       	movw	r26, r28
    1b84:	ad 54       	subi	r26, 0x4D	; 77
    1b86:	be 4f       	sbci	r27, 0xFE	; 254
    1b88:	01 90       	ld	r0, Z+
    1b8a:	0d 92       	st	X+, r0
    1b8c:	9a 95       	dec	r25
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <report+0x64>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1b90:	91 e3       	ldi	r25, 0x31	; 49
    1b92:	ef ee       	ldi	r30, 0xEF	; 239
    1b94:	fd e7       	ldi	r31, 0x7D	; 125
    1b96:	de 01       	movw	r26, r28
    1b98:	ab 53       	subi	r26, 0x3B	; 59
    1b9a:	be 4f       	sbci	r27, 0xFE	; 254
    1b9c:	01 90       	ld	r0, Z+
    1b9e:	0d 92       	st	X+, r0
    1ba0:	9a 95       	dec	r25
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <report+0x78>
//	const char dformat_PNU[] = "%c %c %c %c";
	const char dformat_PN1[] = "left:%c   right:%c";
    1ba4:	93 e1       	ldi	r25, 0x13	; 19
    1ba6:	e0 e2       	ldi	r30, 0x20	; 32
    1ba8:	fe e7       	ldi	r31, 0x7E	; 126
    1baa:	de 01       	movw	r26, r28
    1bac:	aa 50       	subi	r26, 0x0A	; 10
    1bae:	be 4f       	sbci	r27, 0xFE	; 254
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	0d 92       	st	X+, r0
    1bb4:	9a 95       	dec	r25
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <report+0x8c>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1bb8:	93 e1       	ldi	r25, 0x13	; 19
    1bba:	e3 e3       	ldi	r30, 0x33	; 51
    1bbc:	fe e7       	ldi	r31, 0x7E	; 126
    1bbe:	de 01       	movw	r26, r28
    1bc0:	a7 5f       	subi	r26, 0xF7	; 247
    1bc2:	bd 4f       	sbci	r27, 0xFD	; 253
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0d 92       	st	X+, r0
    1bc8:	9a 95       	dec	r25
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <report+0xa0>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1bcc:	9d e1       	ldi	r25, 0x1D	; 29
    1bce:	e6 e4       	ldi	r30, 0x46	; 70
    1bd0:	fe e7       	ldi	r31, 0x7E	; 126
    1bd2:	de 01       	movw	r26, r28
    1bd4:	a4 5e       	subi	r26, 0xE4	; 228
    1bd6:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd8:	01 90       	ld	r0, Z+
    1bda:	0d 92       	st	X+, r0
    1bdc:	9a 95       	dec	r25
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <report+0xb4>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1be0:	99 e2       	ldi	r25, 0x29	; 41
    1be2:	e3 e6       	ldi	r30, 0x63	; 99
    1be4:	fe e7       	ldi	r31, 0x7E	; 126
    1be6:	de 01       	movw	r26, r28
    1be8:	a7 5c       	subi	r26, 0xC7	; 199
    1bea:	bd 4f       	sbci	r27, 0xFD	; 253
    1bec:	01 90       	ld	r0, Z+
    1bee:	0d 92       	st	X+, r0
    1bf0:	9a 95       	dec	r25
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <report+0xc8>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1bf4:	9d e0       	ldi	r25, 0x0D	; 13
    1bf6:	ec e8       	ldi	r30, 0x8C	; 140
    1bf8:	fe e7       	ldi	r31, 0x7E	; 126
    1bfa:	de 01       	movw	r26, r28
    1bfc:	ae 59       	subi	r26, 0x9E	; 158
    1bfe:	bd 4f       	sbci	r27, 0xFD	; 253
    1c00:	01 90       	ld	r0, Z+
    1c02:	0d 92       	st	X+, r0
    1c04:	9a 95       	dec	r25
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <report+0xdc>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c08:	91 e1       	ldi	r25, 0x11	; 17
    1c0a:	e9 e9       	ldi	r30, 0x99	; 153
    1c0c:	fe e7       	ldi	r31, 0x7E	; 126
    1c0e:	de 01       	movw	r26, r28
    1c10:	a1 59       	subi	r26, 0x91	; 145
    1c12:	bd 4f       	sbci	r27, 0xFD	; 253
    1c14:	01 90       	ld	r0, Z+
    1c16:	0d 92       	st	X+, r0
    1c18:	9a 95       	dec	r25
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <report+0xf0>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1c1c:	08 2f       	mov	r16, r24
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	84 e3       	ldi	r24, 0x34	; 52
    1c22:	80 9f       	mul	r24, r16
    1c24:	f0 01       	movw	r30, r0
    1c26:	81 9f       	mul	r24, r17
    1c28:	f0 0d       	add	r31, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	eb 5f       	subi	r30, 0xFB	; 251
    1c2e:	f7 4d       	sbci	r31, 0xD7	; 215
    1c30:	81 81       	ldd	r24, Z+1	; 0x01
    1c32:	8f 36       	cpi	r24, 0x6F	; 111
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <report+0x114>
    1c36:	49 c1       	rjmp	.+658    	; 0x1eca <report+0x3a6>
    1c38:	30 f4       	brcc	.+12     	; 0x1c46 <report+0x122>
    1c3a:	86 35       	cpi	r24, 0x56	; 86
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <report+0x11c>
    1c3e:	b0 c3       	rjmp	.+1888   	; 0x23a0 <report+0x87c>
    1c40:	85 36       	cpi	r24, 0x65	; 101
    1c42:	59 f0       	breq	.+22     	; 0x1c5a <report+0x136>
    1c44:	00 c4       	rjmp	.+2048   	; 0x2446 <report+0x922>
    1c46:	84 37       	cpi	r24, 0x74	; 116
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <report+0x128>
    1c4a:	ca c2       	rjmp	.+1428   	; 0x21e0 <report+0x6bc>
    1c4c:	86 37       	cpi	r24, 0x76	; 118
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <report+0x12e>
    1c50:	27 c3       	rjmp	.+1614   	; 0x22a0 <report+0x77c>
    1c52:	80 37       	cpi	r24, 0x70	; 112
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <report+0x134>
    1c56:	f7 c3       	rjmp	.+2030   	; 0x2446 <report+0x922>
    1c58:	24 c2       	rjmp	.+1096   	; 0x20a2 <report+0x57e>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
    1c60:	f6 2e       	mov	r15, r22
    1c62:	e7 2e       	mov	r14, r23
    1c64:	d8 2e       	mov	r13, r24
    1c66:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 71 06 	call	0xce2	; 0xce2 <get_humidity>
    1c6e:	b6 2e       	mov	r11, r22
    1c70:	a7 2e       	mov	r10, r23
    1c72:	98 2e       	mov	r9, r24
    1c74:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
    1c7c:	c0 57       	subi	r28, 0x70	; 112
    1c7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1c80:	68 83       	st	Y, r22
    1c82:	c0 59       	subi	r28, 0x90	; 144
    1c84:	d2 40       	sbci	r29, 0x02	; 2
    1c86:	cf 56       	subi	r28, 0x6F	; 111
    1c88:	dd 4f       	sbci	r29, 0xFD	; 253
    1c8a:	78 83       	st	Y, r23
    1c8c:	c1 59       	subi	r28, 0x91	; 145
    1c8e:	d2 40       	sbci	r29, 0x02	; 2
    1c90:	ce 56       	subi	r28, 0x6E	; 110
    1c92:	dd 4f       	sbci	r29, 0xFD	; 253
    1c94:	88 83       	st	Y, r24
    1c96:	c2 59       	subi	r28, 0x92	; 146
    1c98:	d2 40       	sbci	r29, 0x02	; 2
    1c9a:	cd 56       	subi	r28, 0x6D	; 109
    1c9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1c9e:	98 83       	st	Y, r25
    1ca0:	c3 59       	subi	r28, 0x93	; 147
    1ca2:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	0e 94 71 06 	call	0xce2	; 0xce2 <get_humidity>
    1caa:	cc 56       	subi	r28, 0x6C	; 108
    1cac:	dd 4f       	sbci	r29, 0xFD	; 253
    1cae:	68 83       	st	Y, r22
    1cb0:	c4 59       	subi	r28, 0x94	; 148
    1cb2:	d2 40       	sbci	r29, 0x02	; 2
    1cb4:	cb 56       	subi	r28, 0x6B	; 107
    1cb6:	dd 4f       	sbci	r29, 0xFD	; 253
    1cb8:	78 83       	st	Y, r23
    1cba:	c5 59       	subi	r28, 0x95	; 149
    1cbc:	d2 40       	sbci	r29, 0x02	; 2
    1cbe:	ca 56       	subi	r28, 0x6A	; 106
    1cc0:	dd 4f       	sbci	r29, 0xFD	; 253
    1cc2:	88 83       	st	Y, r24
    1cc4:	c6 59       	subi	r28, 0x96	; 150
    1cc6:	d2 40       	sbci	r29, 0x02	; 2
    1cc8:	c9 56       	subi	r28, 0x69	; 105
    1cca:	dd 4f       	sbci	r29, 0xFD	; 253
    1ccc:	98 83       	st	Y, r25
    1cce:	c7 59       	subi	r28, 0x97	; 151
    1cd0:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
    1cd8:	c8 56       	subi	r28, 0x68	; 104
    1cda:	dd 4f       	sbci	r29, 0xFD	; 253
    1cdc:	68 83       	st	Y, r22
    1cde:	c8 59       	subi	r28, 0x98	; 152
    1ce0:	d2 40       	sbci	r29, 0x02	; 2
    1ce2:	c7 56       	subi	r28, 0x67	; 103
    1ce4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ce6:	78 83       	st	Y, r23
    1ce8:	c9 59       	subi	r28, 0x99	; 153
    1cea:	d2 40       	sbci	r29, 0x02	; 2
    1cec:	c6 56       	subi	r28, 0x66	; 102
    1cee:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf0:	88 83       	st	Y, r24
    1cf2:	ca 59       	subi	r28, 0x9A	; 154
    1cf4:	d2 40       	sbci	r29, 0x02	; 2
    1cf6:	c5 56       	subi	r28, 0x65	; 101
    1cf8:	dd 4f       	sbci	r29, 0xFD	; 253
    1cfa:	98 83       	st	Y, r25
    1cfc:	cb 59       	subi	r28, 0x9B	; 155
    1cfe:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	0e 94 71 06 	call	0xce2	; 0xce2 <get_humidity>
    1d06:	76 2e       	mov	r7, r22
    1d08:	67 2e       	mov	r6, r23
    1d0a:	58 2e       	mov	r5, r24
    1d0c:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	0e 94 64 13 	call	0x26c8	; 0x26c8 <get_temperature>
    1d14:	c4 56       	subi	r28, 0x64	; 100
    1d16:	dd 4f       	sbci	r29, 0xFD	; 253
    1d18:	68 83       	st	Y, r22
    1d1a:	cc 59       	subi	r28, 0x9C	; 156
    1d1c:	d2 40       	sbci	r29, 0x02	; 2
    1d1e:	c3 56       	subi	r28, 0x63	; 99
    1d20:	dd 4f       	sbci	r29, 0xFD	; 253
    1d22:	78 83       	st	Y, r23
    1d24:	cd 59       	subi	r28, 0x9D	; 157
    1d26:	d2 40       	sbci	r29, 0x02	; 2
    1d28:	38 2e       	mov	r3, r24
    1d2a:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	8b 5e       	subi	r24, 0xEB	; 235
    1d30:	9e 4f       	sbci	r25, 0xFE	; 254
    1d32:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1d36:	24 e3       	ldi	r18, 0x34	; 52
    1d38:	20 9f       	mul	r18, r16
    1d3a:	c0 01       	movw	r24, r0
    1d3c:	21 9f       	mul	r18, r17
    1d3e:	90 0d       	add	r25, r0
    1d40:	11 24       	eor	r1, r1
    1d42:	80 5d       	subi	r24, 0xD0	; 208
    1d44:	97 4d       	sbci	r25, 0xD7	; 215
    1d46:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d4a:	22 ff       	sbrs	r18, 2
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <report+0x230>
    1d4e:	22 e0       	ldi	r18, 0x02	; 2
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <report+0x234>
    1d54:	21 e0       	ldi	r18, 0x01	; 1
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	9f 93       	push	r25
    1d5a:	8f 93       	push	r24
    1d5c:	2f 92       	push	r2
    1d5e:	3f 92       	push	r3
    1d60:	c3 56       	subi	r28, 0x63	; 99
    1d62:	dd 4f       	sbci	r29, 0xFD	; 253
    1d64:	88 81       	ld	r24, Y
    1d66:	cd 59       	subi	r28, 0x9D	; 157
    1d68:	d2 40       	sbci	r29, 0x02	; 2
    1d6a:	8f 93       	push	r24
    1d6c:	c4 56       	subi	r28, 0x64	; 100
    1d6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d70:	98 81       	ld	r25, Y
    1d72:	cc 59       	subi	r28, 0x9C	; 156
    1d74:	d2 40       	sbci	r29, 0x02	; 2
    1d76:	9f 93       	push	r25
    1d78:	4f 92       	push	r4
    1d7a:	5f 92       	push	r5
    1d7c:	6f 92       	push	r6
    1d7e:	7f 92       	push	r7
    1d80:	c5 56       	subi	r28, 0x65	; 101
    1d82:	dd 4f       	sbci	r29, 0xFD	; 253
    1d84:	88 81       	ld	r24, Y
    1d86:	cb 59       	subi	r28, 0x9B	; 155
    1d88:	d2 40       	sbci	r29, 0x02	; 2
    1d8a:	8f 93       	push	r24
    1d8c:	c6 56       	subi	r28, 0x66	; 102
    1d8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d90:	98 81       	ld	r25, Y
    1d92:	ca 59       	subi	r28, 0x9A	; 154
    1d94:	d2 40       	sbci	r29, 0x02	; 2
    1d96:	9f 93       	push	r25
    1d98:	c7 56       	subi	r28, 0x67	; 103
    1d9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9c:	88 81       	ld	r24, Y
    1d9e:	c9 59       	subi	r28, 0x99	; 153
    1da0:	d2 40       	sbci	r29, 0x02	; 2
    1da2:	8f 93       	push	r24
    1da4:	c8 56       	subi	r28, 0x68	; 104
    1da6:	dd 4f       	sbci	r29, 0xFD	; 253
    1da8:	98 81       	ld	r25, Y
    1daa:	c8 59       	subi	r28, 0x98	; 152
    1dac:	d2 40       	sbci	r29, 0x02	; 2
    1dae:	9f 93       	push	r25
    1db0:	c9 56       	subi	r28, 0x69	; 105
    1db2:	dd 4f       	sbci	r29, 0xFD	; 253
    1db4:	88 81       	ld	r24, Y
    1db6:	c7 59       	subi	r28, 0x97	; 151
    1db8:	d2 40       	sbci	r29, 0x02	; 2
    1dba:	8f 93       	push	r24
    1dbc:	ca 56       	subi	r28, 0x6A	; 106
    1dbe:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc0:	98 81       	ld	r25, Y
    1dc2:	c6 59       	subi	r28, 0x96	; 150
    1dc4:	d2 40       	sbci	r29, 0x02	; 2
    1dc6:	9f 93       	push	r25
    1dc8:	cb 56       	subi	r28, 0x6B	; 107
    1dca:	dd 4f       	sbci	r29, 0xFD	; 253
    1dcc:	88 81       	ld	r24, Y
    1dce:	c5 59       	subi	r28, 0x95	; 149
    1dd0:	d2 40       	sbci	r29, 0x02	; 2
    1dd2:	8f 93       	push	r24
    1dd4:	cc 56       	subi	r28, 0x6C	; 108
    1dd6:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd8:	98 81       	ld	r25, Y
    1dda:	c4 59       	subi	r28, 0x94	; 148
    1ddc:	d2 40       	sbci	r29, 0x02	; 2
    1dde:	9f 93       	push	r25
    1de0:	cd 56       	subi	r28, 0x6D	; 109
    1de2:	dd 4f       	sbci	r29, 0xFD	; 253
    1de4:	88 81       	ld	r24, Y
    1de6:	c3 59       	subi	r28, 0x93	; 147
    1de8:	d2 40       	sbci	r29, 0x02	; 2
    1dea:	8f 93       	push	r24
    1dec:	ce 56       	subi	r28, 0x6E	; 110
    1dee:	dd 4f       	sbci	r29, 0xFD	; 253
    1df0:	98 81       	ld	r25, Y
    1df2:	c2 59       	subi	r28, 0x92	; 146
    1df4:	d2 40       	sbci	r29, 0x02	; 2
    1df6:	9f 93       	push	r25
    1df8:	cf 56       	subi	r28, 0x6F	; 111
    1dfa:	dd 4f       	sbci	r29, 0xFD	; 253
    1dfc:	88 81       	ld	r24, Y
    1dfe:	c1 59       	subi	r28, 0x91	; 145
    1e00:	d2 40       	sbci	r29, 0x02	; 2
    1e02:	8f 93       	push	r24
    1e04:	c0 57       	subi	r28, 0x70	; 112
    1e06:	dd 4f       	sbci	r29, 0xFD	; 253
    1e08:	98 81       	ld	r25, Y
    1e0a:	c0 59       	subi	r28, 0x90	; 144
    1e0c:	d2 40       	sbci	r29, 0x02	; 2
    1e0e:	9f 93       	push	r25
    1e10:	8f 92       	push	r8
    1e12:	9f 92       	push	r9
    1e14:	af 92       	push	r10
    1e16:	bf 92       	push	r11
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	ce 01       	movw	r24, r28
    1e22:	8b 5e       	subi	r24, 0xEB	; 235
    1e24:	9e 4f       	sbci	r25, 0xFE	; 254
    1e26:	9f 93       	push	r25
    1e28:	8f 93       	push	r24
    1e2a:	3f 93       	push	r19
    1e2c:	2f 93       	push	r18
    1e2e:	cc 96       	adiw	r24, 0x3c	; 60
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	8e 01       	movw	r16, r28
    1e36:	0f 5f       	subi	r16, 0xFF	; 255
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	1f 93       	push	r17
    1e3c:	0f 93       	push	r16
    1e3e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			checksum_NMEA(outbuf);
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	c8 01       	movw	r24, r16
    1e48:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	01 90       	ld	r0, Z+
    1e50:	00 20       	and	r0, r0
    1e52:	e9 f7       	brne	.-6      	; 0x1e4e <report+0x32a>
    1e54:	31 97       	sbiw	r30, 0x01	; 1
    1e56:	af 01       	movw	r20, r30
    1e58:	40 1b       	sub	r20, r16
    1e5a:	51 0b       	sbc	r21, r17
    1e5c:	b8 01       	movw	r22, r16
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	6d e1       	ldi	r22, 0x1D	; 29
    1e68:	7d e7       	ldi	r23, 0x7D	; 125
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    1e70:	26 e6       	ldi	r18, 0x66	; 102
    1e72:	36 e6       	ldi	r19, 0x66	; 102
    1e74:	46 ee       	ldi	r20, 0xE6	; 230
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	6f 2d       	mov	r22, r15
    1e7a:	7e 2d       	mov	r23, r14
    1e7c:	8d 2d       	mov	r24, r13
    1e7e:	9c 2d       	mov	r25, r12
    1e80:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__mulsf3>
    1e84:	8f 92       	push	r8
    1e86:	9f 92       	push	r9
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	52 e4       	ldi	r21, 0x42	; 66
    1e94:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__addsf3>
    1e98:	9f 93       	push	r25
    1e9a:	8f 93       	push	r24
    1e9c:	7f 93       	push	r23
    1e9e:	6f 93       	push	r22
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	8d e2       	ldi	r24, 0x2D	; 45
    1eaa:	9d e7       	ldi	r25, 0x7D	; 125
    1eac:	9f 93       	push	r25
    1eae:	8f 93       	push	r24
    1eb0:	1f 93       	push	r17
    1eb2:	0f 93       	push	r16
    1eb4:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    1eb8:	42 e0       	ldi	r20, 0x02	; 2
    1eba:	b8 01       	movw	r22, r16
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			break;
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    1ec8:	bf c2       	rjmp	.+1406   	; 0x2448 <report+0x924>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    1eca:	ae 01       	movw	r20, r28
    1ecc:	48 57       	subi	r20, 0x78	; 120
    1ece:	5d 4f       	sbci	r21, 0xFD	; 253
    1ed0:	be 01       	movw	r22, r28
    1ed2:	6c 57       	subi	r22, 0x7C	; 124
    1ed4:	7d 4f       	sbci	r23, 0xFD	; 253
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	80 58       	subi	r24, 0x80	; 128
    1eda:	9d 4f       	sbci	r25, 0xFD	; 253
    1edc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <get_orientation>
			get_time(currenttime);
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	8b 5e       	subi	r24, 0xEB	; 235
    1ee4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee6:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1eea:	24 e3       	ldi	r18, 0x34	; 52
    1eec:	20 9f       	mul	r18, r16
    1eee:	c0 01       	movw	r24, r0
    1ef0:	21 9f       	mul	r18, r17
    1ef2:	90 0d       	add	r25, r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	80 5d       	subi	r24, 0xD0	; 208
    1ef8:	97 4d       	sbci	r25, 0xD7	; 215
    1efa:	c8 57       	subi	r28, 0x78	; 120
    1efc:	dd 4f       	sbci	r29, 0xFD	; 253
    1efe:	18 81       	ld	r17, Y
    1f00:	c8 58       	subi	r28, 0x88	; 136
    1f02:	d2 40       	sbci	r29, 0x02	; 2
    1f04:	c7 57       	subi	r28, 0x77	; 119
    1f06:	dd 4f       	sbci	r29, 0xFD	; 253
    1f08:	08 81       	ld	r16, Y
    1f0a:	c9 58       	subi	r28, 0x89	; 137
    1f0c:	d2 40       	sbci	r29, 0x02	; 2
    1f0e:	c6 57       	subi	r28, 0x76	; 118
    1f10:	dd 4f       	sbci	r29, 0xFD	; 253
    1f12:	f8 80       	ld	r15, Y
    1f14:	ca 58       	subi	r28, 0x8A	; 138
    1f16:	d2 40       	sbci	r29, 0x02	; 2
    1f18:	c5 57       	subi	r28, 0x75	; 117
    1f1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1c:	e8 80       	ld	r14, Y
    1f1e:	cb 58       	subi	r28, 0x8B	; 139
    1f20:	d2 40       	sbci	r29, 0x02	; 2
    1f22:	cc 57       	subi	r28, 0x7C	; 124
    1f24:	dd 4f       	sbci	r29, 0xFD	; 253
    1f26:	e8 81       	ld	r30, Y
    1f28:	c4 58       	subi	r28, 0x84	; 132
    1f2a:	d2 40       	sbci	r29, 0x02	; 2
    1f2c:	cb 57       	subi	r28, 0x7B	; 123
    1f2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f30:	f8 81       	ld	r31, Y
    1f32:	c5 58       	subi	r28, 0x85	; 133
    1f34:	d2 40       	sbci	r29, 0x02	; 2
    1f36:	ca 57       	subi	r28, 0x7A	; 122
    1f38:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3a:	a8 81       	ld	r26, Y
    1f3c:	c6 58       	subi	r28, 0x86	; 134
    1f3e:	d2 40       	sbci	r29, 0x02	; 2
    1f40:	c9 57       	subi	r28, 0x79	; 121
    1f42:	dd 4f       	sbci	r29, 0xFD	; 253
    1f44:	b8 81       	ld	r27, Y
    1f46:	c7 58       	subi	r28, 0x87	; 135
    1f48:	d2 40       	sbci	r29, 0x02	; 2
    1f4a:	c0 58       	subi	r28, 0x80	; 128
    1f4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4e:	48 81       	ld	r20, Y
    1f50:	c0 58       	subi	r28, 0x80	; 128
    1f52:	d2 40       	sbci	r29, 0x02	; 2
    1f54:	cf 57       	subi	r28, 0x7F	; 127
    1f56:	dd 4f       	sbci	r29, 0xFD	; 253
    1f58:	58 81       	ld	r21, Y
    1f5a:	c1 58       	subi	r28, 0x81	; 129
    1f5c:	d2 40       	sbci	r29, 0x02	; 2
    1f5e:	ce 57       	subi	r28, 0x7E	; 126
    1f60:	dd 4f       	sbci	r29, 0xFD	; 253
    1f62:	68 81       	ld	r22, Y
    1f64:	c2 58       	subi	r28, 0x82	; 130
    1f66:	d2 40       	sbci	r29, 0x02	; 2
    1f68:	cd 57       	subi	r28, 0x7D	; 125
    1f6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6c:	78 81       	ld	r23, Y
    1f6e:	c3 58       	subi	r28, 0x83	; 131
    1f70:	d2 40       	sbci	r29, 0x02	; 2
    1f72:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f76:	22 ff       	sbrs	r18, 2
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <report+0x45c>
    1f7a:	22 e0       	ldi	r18, 0x02	; 2
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <report+0x460>
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	9f 93       	push	r25
    1f86:	8f 93       	push	r24
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	bf 93       	push	r27
    1f92:	af 93       	push	r26
    1f94:	ff 93       	push	r31
    1f96:	ef 93       	push	r30
    1f98:	7f 93       	push	r23
    1f9a:	6f 93       	push	r22
    1f9c:	5f 93       	push	r21
    1f9e:	4f 93       	push	r20
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	8b 5e       	subi	r24, 0xEB	; 235
    1fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    1fa6:	9f 93       	push	r25
    1fa8:	8f 93       	push	r24
    1faa:	3f 93       	push	r19
    1fac:	2f 93       	push	r18
    1fae:	82 58       	subi	r24, 0x82	; 130
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	9f 93       	push	r25
    1fb4:	8f 93       	push	r24
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	0f 5f       	subi	r16, 0xFF	; 255
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	1f 93       	push	r17
    1fbe:	0f 93       	push	r16
    1fc0:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			checksum_NMEA(outbuf);
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fca:	f8 01       	movw	r30, r16
    1fcc:	01 90       	ld	r0, Z+
    1fce:	00 20       	and	r0, r0
    1fd0:	e9 f7       	brne	.-6      	; 0x1fcc <report+0x4a8>
    1fd2:	31 97       	sbiw	r30, 0x01	; 1
    1fd4:	af 01       	movw	r20, r30
    1fd6:	40 1b       	sub	r20, r16
    1fd8:	51 0b       	sbc	r21, r17
    1fda:	b8 01       	movw	r22, r16
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			writestr_OLED(1, "Orientation", 1);
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	63 e4       	ldi	r22, 0x43	; 67
    1fe6:	7d e7       	ldi	r23, 0x7D	; 125
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    1fee:	c5 57       	subi	r28, 0x75	; 117
    1ff0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff2:	88 81       	ld	r24, Y
    1ff4:	cb 58       	subi	r28, 0x8B	; 139
    1ff6:	d2 40       	sbci	r29, 0x02	; 2
    1ff8:	8f 93       	push	r24
    1ffa:	c6 57       	subi	r28, 0x76	; 118
    1ffc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffe:	88 81       	ld	r24, Y
    2000:	ca 58       	subi	r28, 0x8A	; 138
    2002:	d2 40       	sbci	r29, 0x02	; 2
    2004:	8f 93       	push	r24
    2006:	c7 57       	subi	r28, 0x77	; 119
    2008:	dd 4f       	sbci	r29, 0xFD	; 253
    200a:	88 81       	ld	r24, Y
    200c:	c9 58       	subi	r28, 0x89	; 137
    200e:	d2 40       	sbci	r29, 0x02	; 2
    2010:	8f 93       	push	r24
    2012:	c8 57       	subi	r28, 0x78	; 120
    2014:	dd 4f       	sbci	r29, 0xFD	; 253
    2016:	88 81       	ld	r24, Y
    2018:	c8 58       	subi	r28, 0x88	; 136
    201a:	d2 40       	sbci	r29, 0x02	; 2
    201c:	8f 93       	push	r24
    201e:	c9 57       	subi	r28, 0x79	; 121
    2020:	dd 4f       	sbci	r29, 0xFD	; 253
    2022:	88 81       	ld	r24, Y
    2024:	c7 58       	subi	r28, 0x87	; 135
    2026:	d2 40       	sbci	r29, 0x02	; 2
    2028:	8f 93       	push	r24
    202a:	ca 57       	subi	r28, 0x7A	; 122
    202c:	dd 4f       	sbci	r29, 0xFD	; 253
    202e:	88 81       	ld	r24, Y
    2030:	c6 58       	subi	r28, 0x86	; 134
    2032:	d2 40       	sbci	r29, 0x02	; 2
    2034:	8f 93       	push	r24
    2036:	cb 57       	subi	r28, 0x7B	; 123
    2038:	dd 4f       	sbci	r29, 0xFD	; 253
    203a:	88 81       	ld	r24, Y
    203c:	c5 58       	subi	r28, 0x85	; 133
    203e:	d2 40       	sbci	r29, 0x02	; 2
    2040:	8f 93       	push	r24
    2042:	cc 57       	subi	r28, 0x7C	; 124
    2044:	dd 4f       	sbci	r29, 0xFD	; 253
    2046:	88 81       	ld	r24, Y
    2048:	c4 58       	subi	r28, 0x84	; 132
    204a:	d2 40       	sbci	r29, 0x02	; 2
    204c:	8f 93       	push	r24
    204e:	cd 57       	subi	r28, 0x7D	; 125
    2050:	dd 4f       	sbci	r29, 0xFD	; 253
    2052:	88 81       	ld	r24, Y
    2054:	c3 58       	subi	r28, 0x83	; 131
    2056:	d2 40       	sbci	r29, 0x02	; 2
    2058:	8f 93       	push	r24
    205a:	ce 57       	subi	r28, 0x7E	; 126
    205c:	dd 4f       	sbci	r29, 0xFD	; 253
    205e:	88 81       	ld	r24, Y
    2060:	c2 58       	subi	r28, 0x82	; 130
    2062:	d2 40       	sbci	r29, 0x02	; 2
    2064:	8f 93       	push	r24
    2066:	cf 57       	subi	r28, 0x7F	; 127
    2068:	dd 4f       	sbci	r29, 0xFD	; 253
    206a:	88 81       	ld	r24, Y
    206c:	c1 58       	subi	r28, 0x81	; 129
    206e:	d2 40       	sbci	r29, 0x02	; 2
    2070:	8f 93       	push	r24
    2072:	c0 58       	subi	r28, 0x80	; 128
    2074:	dd 4f       	sbci	r29, 0xFD	; 253
    2076:	88 81       	ld	r24, Y
    2078:	c0 58       	subi	r28, 0x80	; 128
    207a:	d2 40       	sbci	r29, 0x02	; 2
    207c:	8f 93       	push	r24
    207e:	ce 01       	movw	r24, r28
    2080:	8d 54       	subi	r24, 0x4D	; 77
    2082:	9e 4f       	sbci	r25, 0xFE	; 254
    2084:	9f 93       	push	r25
    2086:	8f 93       	push	r24
    2088:	1f 93       	push	r17
    208a:	0f 93       	push	r16
    208c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	42 e0       	ldi	r20, 0x02	; 2
    2096:	b8 01       	movw	r22, r16
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    209e:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    20a0:	d3 c1       	rjmp	.+934    	; 0x2448 <report+0x924>

		case 'p':
			get_time(currenttime);
    20a2:	ce 01       	movw	r24, r28
    20a4:	8b 5e       	subi	r24, 0xEB	; 235
    20a6:	9e 4f       	sbci	r25, 0xFE	; 254
    20a8:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    20ac:	9e 01       	movw	r18, r28
    20ae:	21 57       	subi	r18, 0x71	; 113
    20b0:	3d 4f       	sbci	r19, 0xFD	; 253
    20b2:	ae 01       	movw	r20, r28
    20b4:	42 57       	subi	r20, 0x72	; 114
    20b6:	5d 4f       	sbci	r21, 0xFD	; 253
    20b8:	be 01       	movw	r22, r28
    20ba:	63 57       	subi	r22, 0x73	; 115
    20bc:	7d 4f       	sbci	r23, 0xFD	; 253
    20be:	ce 01       	movw	r24, r28
    20c0:	84 57       	subi	r24, 0x74	; 116
    20c2:	9d 4f       	sbci	r25, 0xFD	; 253
    20c4:	0e 94 86 0b 	call	0x170c	; 0x170c <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    20c8:	24 e3       	ldi	r18, 0x34	; 52
    20ca:	20 9f       	mul	r18, r16
    20cc:	c0 01       	movw	r24, r0
    20ce:	21 9f       	mul	r18, r17
    20d0:	90 0d       	add	r25, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	80 5d       	subi	r24, 0xD0	; 208
    20d6:	97 4d       	sbci	r25, 0xD7	; 215
    20d8:	c1 57       	subi	r28, 0x71	; 113
    20da:	dd 4f       	sbci	r29, 0xFD	; 253
    20dc:	78 81       	ld	r23, Y
    20de:	cf 58       	subi	r28, 0x8F	; 143
    20e0:	d2 40       	sbci	r29, 0x02	; 2
    20e2:	c2 57       	subi	r28, 0x72	; 114
    20e4:	dd 4f       	sbci	r29, 0xFD	; 253
    20e6:	68 81       	ld	r22, Y
    20e8:	ce 58       	subi	r28, 0x8E	; 142
    20ea:	d2 40       	sbci	r29, 0x02	; 2
    20ec:	c3 57       	subi	r28, 0x73	; 115
    20ee:	dd 4f       	sbci	r29, 0xFD	; 253
    20f0:	58 81       	ld	r21, Y
    20f2:	cd 58       	subi	r28, 0x8D	; 141
    20f4:	d2 40       	sbci	r29, 0x02	; 2
    20f6:	c4 57       	subi	r28, 0x74	; 116
    20f8:	dd 4f       	sbci	r29, 0xFD	; 253
    20fa:	48 81       	ld	r20, Y
    20fc:	cc 58       	subi	r28, 0x8C	; 140
    20fe:	d2 40       	sbci	r29, 0x02	; 2
    2100:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2104:	22 ff       	sbrs	r18, 2
    2106:	03 c0       	rjmp	.+6      	; 0x210e <report+0x5ea>
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <report+0x5ee>
    210e:	21 e0       	ldi	r18, 0x01	; 1
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	9f 93       	push	r25
    2114:	8f 93       	push	r24
    2116:	1f 92       	push	r1
    2118:	7f 93       	push	r23
    211a:	1f 92       	push	r1
    211c:	6f 93       	push	r22
    211e:	1f 92       	push	r1
    2120:	5f 93       	push	r21
    2122:	1f 92       	push	r1
    2124:	4f 93       	push	r20
    2126:	ce 01       	movw	r24, r28
    2128:	8b 5e       	subi	r24, 0xEB	; 235
    212a:	9e 4f       	sbci	r25, 0xFE	; 254
    212c:	9f 93       	push	r25
    212e:	8f 93       	push	r24
    2130:	3f 93       	push	r19
    2132:	2f 93       	push	r18
    2134:	80 55       	subi	r24, 0x50	; 80
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	9f 93       	push	r25
    213a:	8f 93       	push	r24
    213c:	8e 01       	movw	r16, r28
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	1f 93       	push	r17
    2144:	0f 93       	push	r16
    2146:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			checksum_NMEA(outbuf);
    214a:	c8 01       	movw	r24, r16
    214c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2150:	f8 01       	movw	r30, r16
    2152:	01 90       	ld	r0, Z+
    2154:	00 20       	and	r0, r0
    2156:	e9 f7       	brne	.-6      	; 0x2152 <report+0x62e>
    2158:	31 97       	sbiw	r30, 0x01	; 1
    215a:	af 01       	movw	r20, r30
    215c:	40 1b       	sub	r20, r16
    215e:	51 0b       	sbc	r21, r17
    2160:	b8 01       	movw	r22, r16
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2168:	c2 57       	subi	r28, 0x72	; 114
    216a:	dd 4f       	sbci	r29, 0xFD	; 253
    216c:	88 81       	ld	r24, Y
    216e:	ce 58       	subi	r28, 0x8E	; 142
    2170:	d2 40       	sbci	r29, 0x02	; 2
    2172:	1f 92       	push	r1
    2174:	8f 93       	push	r24
    2176:	c3 57       	subi	r28, 0x73	; 115
    2178:	dd 4f       	sbci	r29, 0xFD	; 253
    217a:	88 81       	ld	r24, Y
    217c:	cd 58       	subi	r28, 0x8D	; 141
    217e:	d2 40       	sbci	r29, 0x02	; 2
    2180:	1f 92       	push	r1
    2182:	8f 93       	push	r24
    2184:	ce 01       	movw	r24, r28
    2186:	8a 50       	subi	r24, 0x0A	; 10
    2188:	9e 4f       	sbci	r25, 0xFE	; 254
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	1f 93       	push	r17
    2190:	0f 93       	push	r16
    2192:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	b8 01       	movw	r22, r16
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    21a0:	c1 57       	subi	r28, 0x71	; 113
    21a2:	dd 4f       	sbci	r29, 0xFD	; 253
    21a4:	88 81       	ld	r24, Y
    21a6:	cf 58       	subi	r28, 0x8F	; 143
    21a8:	d2 40       	sbci	r29, 0x02	; 2
    21aa:	1f 92       	push	r1
    21ac:	8f 93       	push	r24
    21ae:	c4 57       	subi	r28, 0x74	; 116
    21b0:	dd 4f       	sbci	r29, 0xFD	; 253
    21b2:	88 81       	ld	r24, Y
    21b4:	cc 58       	subi	r28, 0x8C	; 140
    21b6:	d2 40       	sbci	r29, 0x02	; 2
    21b8:	1f 92       	push	r1
    21ba:	8f 93       	push	r24
    21bc:	ce 01       	movw	r24, r28
    21be:	87 5f       	subi	r24, 0xF7	; 247
    21c0:	9d 4f       	sbci	r25, 0xFD	; 253
    21c2:	9f 93       	push	r25
    21c4:	8f 93       	push	r24
    21c6:	1f 93       	push	r17
    21c8:	0f 93       	push	r16
    21ca:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	42 e0       	ldi	r20, 0x02	; 2
    21d4:	b8 01       	movw	r22, r16
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    21dc:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    21de:	34 c1       	rjmp	.+616    	; 0x2448 <report+0x924>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    21e0:	ce 01       	movw	r24, r28
    21e2:	8b 5e       	subi	r24, 0xEB	; 235
    21e4:	9e 4f       	sbci	r25, 0xFE	; 254
    21e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    21ea:	24 e1       	ldi	r18, 0x14	; 20
    21ec:	ae 01       	movw	r20, r28
    21ee:	47 5d       	subi	r20, 0xD7	; 215
    21f0:	5e 4f       	sbci	r21, 0xFE	; 254
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	80 e5       	ldi	r24, 0x50	; 80
    21f8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <read_FRAM>
			get_BOOTTIME(boottime);
    21fc:	ce 01       	movw	r24, r28
    21fe:	83 5c       	subi	r24, 0xC3	; 195
    2200:	9e 4f       	sbci	r25, 0xFE	; 254
    2202:	0e 94 b3 05 	call	0xb66	; 0xb66 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2206:	24 e3       	ldi	r18, 0x34	; 52
    2208:	20 9f       	mul	r18, r16
    220a:	c0 01       	movw	r24, r0
    220c:	21 9f       	mul	r18, r17
    220e:	90 0d       	add	r25, r0
    2210:	11 24       	eor	r1, r1
    2212:	80 5d       	subi	r24, 0xD0	; 208
    2214:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    2216:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    221a:	22 ff       	sbrs	r18, 2
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <report+0x700>
    221e:	22 e0       	ldi	r18, 0x02	; 2
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <report+0x704>
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	9f 93       	push	r25
    222a:	8f 93       	push	r24
    222c:	ce 01       	movw	r24, r28
    222e:	83 5c       	subi	r24, 0xC3	; 195
    2230:	9e 4f       	sbci	r25, 0xFE	; 254
    2232:	9f 93       	push	r25
    2234:	8f 93       	push	r24
    2236:	44 97       	sbiw	r24, 0x14	; 20
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	8e 01       	movw	r16, r28
    223e:	0b 5e       	subi	r16, 0xEB	; 235
    2240:	1e 4f       	sbci	r17, 0xFE	; 254
    2242:	1f 93       	push	r17
    2244:	0f 93       	push	r16
    2246:	3f 93       	push	r19
    2248:	2f 93       	push	r18
    224a:	8d 50       	subi	r24, 0x0D	; 13
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	9f 93       	push	r25
    2250:	8f 93       	push	r24
    2252:	8b 51       	subi	r24, 0x1B	; 27
    2254:	92 40       	sbci	r25, 0x02	; 2
    2256:	7c 01       	movw	r14, r24
    2258:	9f 93       	push	r25
    225a:	8f 93       	push	r24
    225c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2260:	c7 01       	movw	r24, r14
    2262:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2266:	f7 01       	movw	r30, r14
    2268:	01 90       	ld	r0, Z+
    226a:	00 20       	and	r0, r0
    226c:	e9 f7       	brne	.-6      	; 0x2268 <report+0x744>
    226e:	31 97       	sbiw	r30, 0x01	; 1
    2270:	af 01       	movw	r20, r30
    2272:	4e 19       	sub	r20, r14
    2274:	5f 09       	sbc	r21, r15
    2276:	b7 01       	movw	r22, r14
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			writestr_OLED(1, "Time", 1);
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	6f e4       	ldi	r22, 0x4F	; 79
    2282:	7d e7       	ldi	r23, 0x7D	; 125
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    228a:	b8 01       	movw	r22, r16
    228c:	65 5f       	subi	r22, 0xF5	; 245
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	42 e0       	ldi	r20, 0x02	; 2
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			break;
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    229c:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    229e:	d4 c0       	rjmp	.+424    	; 0x2448 <report+0x924>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	0e 94 45 07 	call	0xe8a	; 0xe8a <read_ionpump>
    22a6:	f6 2e       	mov	r15, r22
    22a8:	e7 2e       	mov	r14, r23
    22aa:	d8 2e       	mov	r13, r24
    22ac:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	0e 94 45 07 	call	0xe8a	; 0xe8a <read_ionpump>
    22b4:	b6 2e       	mov	r11, r22
    22b6:	a7 2e       	mov	r10, r23
    22b8:	98 2e       	mov	r9, r24
    22ba:	89 2e       	mov	r8, r25
			if (get_time(currenttime)) {
    22bc:	ce 01       	movw	r24, r28
    22be:	8b 5e       	subi	r24, 0xEB	; 235
    22c0:	9e 4f       	sbci	r25, 0xFE	; 254
    22c2:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
    22c6:	88 23       	and	r24, r24
    22c8:	79 f0       	breq	.+30     	; 0x22e8 <report+0x7c4>
				printError(ERR_GETTIME, "Can't get current time");
    22ca:	64 e5       	ldi	r22, 0x54	; 84
    22cc:	7d e7       	ldi	r23, 0x7D	; 125
    22ce:	85 e6       	ldi	r24, 0x65	; 101
    22d0:	0e 94 a6 09 	call	0x134c	; 0x134c <printError>
				strcpy(currenttime, "Time");
    22d4:	85 e0       	ldi	r24, 0x05	; 5
    22d6:	ef e4       	ldi	r30, 0x4F	; 79
    22d8:	fd e7       	ldi	r31, 0x7D	; 125
    22da:	de 01       	movw	r26, r28
    22dc:	ab 5e       	subi	r26, 0xEB	; 235
    22de:	be 4f       	sbci	r27, 0xFE	; 254
    22e0:	01 90       	ld	r0, Z+
    22e2:	0d 92       	st	X+, r0
    22e4:	8a 95       	dec	r24
    22e6:	e1 f7       	brne	.-8      	; 0x22e0 <report+0x7bc>
			}
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    22e8:	24 e3       	ldi	r18, 0x34	; 52
    22ea:	20 9f       	mul	r18, r16
    22ec:	c0 01       	movw	r24, r0
    22ee:	21 9f       	mul	r18, r17
    22f0:	90 0d       	add	r25, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	80 5d       	subi	r24, 0xD0	; 208
    22f6:	97 4d       	sbci	r25, 0xD7	; 215
    22f8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22fc:	22 ff       	sbrs	r18, 2
    22fe:	03 c0       	rjmp	.+6      	; 0x2306 <report+0x7e2>
    2300:	22 e0       	ldi	r18, 0x02	; 2
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	02 c0       	rjmp	.+4      	; 0x230a <report+0x7e6>
    2306:	21 e0       	ldi	r18, 0x01	; 1
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	9f 93       	push	r25
    230c:	8f 93       	push	r24
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	ce 01       	movw	r24, r28
    2320:	8b 5e       	subi	r24, 0xEB	; 235
    2322:	9e 4f       	sbci	r25, 0xFE	; 254
    2324:	9f 93       	push	r25
    2326:	8f 93       	push	r24
    2328:	3f 93       	push	r19
    232a:	2f 93       	push	r18
    232c:	8c 5d       	subi	r24, 0xDC	; 220
    232e:	9e 4f       	sbci	r25, 0xFE	; 254
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	8e 01       	movw	r16, r28
    2336:	0f 5f       	subi	r16, 0xFF	; 255
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	1f 93       	push	r17
    233c:	0f 93       	push	r16
    233e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			checksum_NMEA(outbuf);
    2342:	c8 01       	movw	r24, r16
    2344:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2348:	f8 01       	movw	r30, r16
    234a:	01 90       	ld	r0, Z+
    234c:	00 20       	and	r0, r0
    234e:	e9 f7       	brne	.-6      	; 0x234a <report+0x826>
    2350:	31 97       	sbiw	r30, 0x01	; 1
    2352:	af 01       	movw	r20, r30
    2354:	40 1b       	sub	r20, r16
    2356:	51 0b       	sbc	r21, r17
    2358:	b8 01       	movw	r22, r16
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	6b e6       	ldi	r22, 0x6B	; 107
    2364:	7d e7       	ldi	r23, 0x7D	; 125
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    236c:	8f 92       	push	r8
    236e:	9f 92       	push	r9
    2370:	af 92       	push	r10
    2372:	bf 92       	push	r11
    2374:	cf 92       	push	r12
    2376:	df 92       	push	r13
    2378:	ef 92       	push	r14
    237a:	ff 92       	push	r15
    237c:	ce 01       	movw	r24, r28
    237e:	8e 59       	subi	r24, 0x9E	; 158
    2380:	9d 4f       	sbci	r25, 0xFD	; 253
    2382:	9f 93       	push	r25
    2384:	8f 93       	push	r24
    2386:	1f 93       	push	r17
    2388:	0f 93       	push	r16
    238a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    238e:	42 e0       	ldi	r20, 0x02	; 2
    2390:	b8 01       	movw	r22, r16
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			break;
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    239c:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    239e:	54 c0       	rjmp	.+168    	; 0x2448 <report+0x924>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    23a0:	ce 01       	movw	r24, r28
    23a2:	86 5f       	subi	r24, 0xF6	; 246
    23a4:	9e 4f       	sbci	r25, 0xFE	; 254
    23a6:	0e 94 ba 05 	call	0xb74	; 0xb74 <get_VERSION>
			get_time(currenttime);
    23aa:	ce 01       	movw	r24, r28
    23ac:	8b 5e       	subi	r24, 0xEB	; 235
    23ae:	9e 4f       	sbci	r25, 0xFE	; 254
    23b0:	0e 94 37 05 	call	0xa6e	; 0xa6e <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    23b4:	24 e3       	ldi	r18, 0x34	; 52
    23b6:	20 9f       	mul	r18, r16
    23b8:	c0 01       	movw	r24, r0
    23ba:	21 9f       	mul	r18, r17
    23bc:	90 0d       	add	r25, r0
    23be:	11 24       	eor	r1, r1
    23c0:	80 5d       	subi	r24, 0xD0	; 208
    23c2:	97 4d       	sbci	r25, 0xD7	; 215
    23c4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23c8:	22 ff       	sbrs	r18, 2
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <report+0x8ae>
    23cc:	22 e0       	ldi	r18, 0x02	; 2
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <report+0x8b2>
    23d2:	21 e0       	ldi	r18, 0x01	; 1
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	9f 93       	push	r25
    23d8:	8f 93       	push	r24
    23da:	ce 01       	movw	r24, r28
    23dc:	86 5f       	subi	r24, 0xF6	; 246
    23de:	9e 4f       	sbci	r25, 0xFE	; 254
    23e0:	9f 93       	push	r25
    23e2:	8f 93       	push	r24
    23e4:	0b 96       	adiw	r24, 0x0b	; 11
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	3f 93       	push	r19
    23ec:	2f 93       	push	r18
    23ee:	86 5a       	subi	r24, 0xA6	; 166
    23f0:	9e 4f       	sbci	r25, 0xFE	; 254
    23f2:	9f 93       	push	r25
    23f4:	8f 93       	push	r24
    23f6:	8e 01       	movw	r16, r28
    23f8:	0f 5f       	subi	r16, 0xFF	; 255
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	1f 93       	push	r17
    23fe:	0f 93       	push	r16
    2400:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
			checksum_NMEA(outbuf);
    2404:	c8 01       	movw	r24, r16
    2406:	0e 94 5d 09 	call	0x12ba	; 0x12ba <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    240a:	f8 01       	movw	r30, r16
    240c:	01 90       	ld	r0, Z+
    240e:	00 20       	and	r0, r0
    2410:	e9 f7       	brne	.-6      	; 0x240c <report+0x8e8>
    2412:	31 97       	sbiw	r30, 0x01	; 1
    2414:	af 01       	movw	r20, r30
    2416:	40 1b       	sub	r20, r16
    2418:	51 0b       	sbc	r21, r17
    241a:	b8 01       	movw	r22, r16
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	6c eb       	ldi	r22, 0xBC	; 188
    2426:	7c e7       	ldi	r23, 0x7C	; 124
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			get_VERSION(outbuf);
    242e:	c8 01       	movw	r24, r16
    2430:	0e 94 ba 05 	call	0xb74	; 0xb74 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2434:	42 e0       	ldi	r20, 0x02	; 2
    2436:	b8 01       	movw	r22, r16
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <writestr_OLED>
			break;
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2442:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <report+0x924>

		default:
			return(ERRORPROMPT);
    2446:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    2448:	c3 56       	subi	r28, 0x63	; 99
    244a:	dd 4f       	sbci	r29, 0xFD	; 253
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	df 90       	pop	r13
    245e:	cf 90       	pop	r12
    2460:	bf 90       	pop	r11
    2462:	af 90       	pop	r10
    2464:	9f 90       	pop	r9
    2466:	8f 90       	pop	r8
    2468:	7f 90       	pop	r7
    246a:	6f 90       	pop	r6
    246c:	5f 90       	pop	r5
    246e:	4f 90       	pop	r4
    2470:	3f 90       	pop	r3
    2472:	2f 90       	pop	r2
    2474:	08 95       	ret

00002476 <crc16>:
	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/

uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{
    2476:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	50 e0       	ldi	r21, 0x00	; 0

uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2480:	1b c0       	rjmp	.+54     	; 0x24b8 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2482:	fd 01       	movw	r30, r26
    2484:	e4 0f       	add	r30, r20
    2486:	f5 1f       	adc	r31, r21
    2488:	20 81       	ld	r18, Z
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	32 2f       	mov	r19, r18
    248e:	22 27       	eor	r18, r18
    2490:	82 27       	eor	r24, r18
    2492:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	0c c0       	rjmp	.+24     	; 0x24b0 <crc16+0x3a>
			if (crc & 0x8000) {
    2498:	99 23       	and	r25, r25
    249a:	3c f4       	brge	.+14     	; 0x24aa <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	31 e2       	ldi	r19, 0x21	; 33
    24a2:	83 27       	eor	r24, r19
    24a4:	30 e1       	ldi	r19, 0x10	; 16
    24a6:	93 27       	eor	r25, r19
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <crc16+0x38>
			} else {
				crc = crc << 1;
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    24ae:	2f 5f       	subi	r18, 0xFF	; 255
    24b0:	28 30       	cpi	r18, 0x08	; 8
    24b2:	90 f3       	brcs	.-28     	; 0x2498 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    24b4:	4f 5f       	subi	r20, 0xFF	; 255
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	46 17       	cp	r20, r22
    24ba:	57 07       	cpc	r21, r23
    24bc:	10 f3       	brcs	.-60     	; 0x2482 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
    24be:	08 95       	ret

000024c0 <get_ROBOVoltage>:
------------------------------------------------------------------------------*/

#include "roboclaw.h"

float get_ROBOVoltage(uint8_t controller)
{
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <get_ROBOVoltage+0x10>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <get_ROBOVoltage+0x12>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	d8 2e       	mov	r13, r24
	uint8_t cmd, tbuf[4];
	uint16_t value, crcReceived, crcExpected;

	cmd = ROBOREADMAINVOLTAGE;
	recv1_buf.nbytes = 4;
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    24de:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    24e2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    24e6:	d9 82       	std	Y+1, r13	; 0x01
	tbuf[1] = cmd;
    24e8:	88 e1       	ldi	r24, 0x18	; 24
    24ea:	8a 83       	std	Y+2, r24	; 0x02
	send_USART(1, tbuf, 2);
    24ec:	42 e0       	ldi	r20, 0x02	; 2
    24ee:	be 01       	movw	r22, r28
    24f0:	6f 5f       	subi	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
	//START WORK HERE
	for (;;) {
		if (recv1_buf.done == YES) {
    24fa:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	e1 f7       	brne	.-8      	; 0x24fa <get_ROBOVoltage+0x3a>
			break;
		}
	}
	value = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2502:	e2 e1       	ldi	r30, 0x12	; 18
    2504:	fa e2       	ldi	r31, 0x2A	; 42
    2506:	90 81       	ld	r25, Z
    2508:	e9 2e       	mov	r14, r25
    250a:	f1 2c       	mov	r15, r1
    250c:	fe 2c       	mov	r15, r14
    250e:	ee 24       	eor	r14, r14
    2510:	81 81       	ldd	r24, Z+1	; 0x01
    2512:	e8 2a       	or	r14, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2514:	02 81       	ldd	r16, Z+2	; 0x02
    2516:	10 e0       	ldi	r17, 0x00	; 0
    2518:	10 2f       	mov	r17, r16
    251a:	00 27       	eor	r16, r16
    251c:	23 81       	ldd	r18, Z+3	; 0x03
    251e:	02 2b       	or	r16, r18
	recv1_buf.data[2] = recv1_buf.data[0];
    2520:	92 83       	std	Z+2, r25	; 0x02
	recv1_buf.data[3] = recv1_buf.data[1];
    2522:	83 83       	std	Z+3, r24	; 0x03
	recv1_buf.data[0] = controller;
    2524:	d0 82       	st	Z, r13
	recv1_buf.data[1] = cmd;
    2526:	88 e1       	ldi	r24, 0x18	; 24
    2528:	81 83       	std	Z+1, r24	; 0x01
	crcExpected = crc16(recv1_buf.data, 4);
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	cf 01       	movw	r24, r30
    2530:	0e 94 3b 12 	call	0x2476	; 0x2476 <crc16>
	if (crcExpected != crcReceived) {
    2534:	08 17       	cp	r16, r24
    2536:	19 07       	cpc	r17, r25
    2538:	61 f4       	brne	.+24     	; 0x2552 <get_ROBOVoltage+0x92>
		return(-666.0);
	} else {
		return((float) value / 10.0);
    253a:	b7 01       	movw	r22, r14
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__floatunsisf>
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e2       	ldi	r20, 0x20	; 32
    254a:	51 e4       	ldi	r21, 0x41	; 65
    254c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__divsf3>
    2550:	04 c0       	rjmp	.+8      	; 0x255a <get_ROBOVoltage+0x9a>
	recv1_buf.data[3] = recv1_buf.data[1];
	recv1_buf.data[0] = controller;
	recv1_buf.data[1] = cmd;
	crcExpected = crc16(recv1_buf.data, 4);
	if (crcExpected != crcReceived) {
		return(-666.0);
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e8       	ldi	r23, 0x80	; 128
    2556:	86 e2       	ldi	r24, 0x26	; 38
    2558:	94 ec       	ldi	r25, 0xC4	; 196
	} else {
		return((float) value / 10.0);
	}
}
    255a:	24 96       	adiw	r28, 0x04	; 4
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	08 95       	ret

00002570 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    2570:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2572:	e0 e6       	ldi	r30, 0x60	; 96
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2578:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    257a:	88 ed       	ldi	r24, 0xD8	; 216
    257c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    257e:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <init_RTC+0x14>
		asm("nop");
    2582:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2584:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2588:	96 fd       	sbrc	r25, 6
    258a:	fb cf       	rjmp	.-10     	; 0x2582 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    258c:	e0 e6       	ldi	r30, 0x60	; 96
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2592:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2594:	28 ed       	ldi	r18, 0xD8	; 216
    2596:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2598:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    259a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    259c:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    259e:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    25a0:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <init_RTC+0x36>
		asm("nop");
    25a4:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    25a6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    25aa:	91 11       	cpse	r25, r1
    25ac:	fb cf       	rjmp	.-10     	; 0x25a4 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    25ae:	e0 e4       	ldi	r30, 0x40	; 64
    25b0:	f1 e0       	ldi	r31, 0x01	; 1
    25b2:	42 87       	std	Z+10, r20	; 0x0a
    25b4:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    25ba:	85 81       	ldd	r24, Z+5	; 0x05
    25bc:	81 60       	ori	r24, 0x01	; 1
    25be:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    25c0:	81 eb       	ldi	r24, 0xB1	; 177
    25c2:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	81 60       	ori	r24, 0x01	; 1
    25c8:	82 83       	std	Z+2, r24	; 0x02
    25ca:	08 95       	ret

000025cc <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    25cc:	1f 92       	push	r1
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	0f 92       	push	r0
    25d4:	11 24       	eor	r1, r1
    25d6:	2f 93       	push	r18
    25d8:	3f 93       	push	r19
    25da:	4f 93       	push	r20
    25dc:	5f 93       	push	r21
    25de:	6f 93       	push	r22
    25e0:	7f 93       	push	r23
    25e2:	8f 93       	push	r24
    25e4:	9f 93       	push	r25
    25e6:	af 93       	push	r26
    25e8:	bf 93       	push	r27
    25ea:	ef 93       	push	r30
    25ec:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    25f4:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <timerOLED>
    25f8:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <timerOLED+0x1>
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	b9 f0       	breq	.+46     	; 0x262e <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2600:	20 91 0f 2a 	lds	r18, 0x2A0F	; 0x802a0f <timeoutOLED>
    2604:	30 91 10 2a 	lds	r19, 0x2A10	; 0x802a10 <timeoutOLED+0x1>
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	58 f4       	brcc	.+22     	; 0x2624 <__vector_3+0x58>
			clear_OLED(0);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	0e 94 1e 0b 	call	0x163c	; 0x163c <clear_OLED>
			clear_OLED(1);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 1e 0b 	call	0x163c	; 0x163c <clear_OLED>
			timerOLED = 0;
    261a:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    261e:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
    2622:	05 c0       	rjmp	.+10     	; 0x262e <__vector_3+0x62>
		} else {
			timerOLED++;
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    262a:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    262e:	80 e2       	ldi	r24, 0x20	; 32
    2630:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2634:	ff 91       	pop	r31
    2636:	ef 91       	pop	r30
    2638:	bf 91       	pop	r27
    263a:	af 91       	pop	r26
    263c:	9f 91       	pop	r25
    263e:	8f 91       	pop	r24
    2640:	7f 91       	pop	r23
    2642:	6f 91       	pop	r22
    2644:	5f 91       	pop	r21
    2646:	4f 91       	pop	r20
    2648:	3f 91       	pop	r19
    264a:	2f 91       	pop	r18
    264c:	0f 90       	pop	r0
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	24 e3       	ldi	r18, 0x34	; 52
    265e:	28 9f       	mul	r18, r24
    2660:	f0 01       	movw	r30, r0
    2662:	29 9f       	mul	r18, r25
    2664:	f0 0d       	add	r31, r0
    2666:	11 24       	eor	r1, r1
    2668:	eb 5f       	subi	r30, 0xFB	; 251
    266a:	f7 4d       	sbci	r31, 0xD7	; 215
    266c:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    266e:	24 37       	cpi	r18, 0x74	; 116
    2670:	e9 f4       	brne	.+58     	; 0x26ac <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2672:	24 e3       	ldi	r18, 0x34	; 52
    2674:	28 9f       	mul	r18, r24
    2676:	e0 01       	movw	r28, r0
    2678:	29 9f       	mul	r18, r25
    267a:	d0 0d       	add	r29, r0
    267c:	11 24       	eor	r1, r1
    267e:	c9 5f       	subi	r28, 0xF9	; 249
    2680:	d7 4d       	sbci	r29, 0xD7	; 215
    2682:	fe 01       	movw	r30, r28
    2684:	01 90       	ld	r0, Z+
    2686:	00 20       	and	r0, r0
    2688:	e9 f7       	brne	.-6      	; 0x2684 <set+0x2e>
    268a:	31 97       	sbiw	r30, 0x01	; 1
    268c:	ec 1b       	sub	r30, r28
    268e:	fd 0b       	sbc	r31, r29
    2690:	73 97       	sbiw	r30, 0x13	; 19
    2692:	71 f4       	brne	.+28     	; 0x26b0 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2694:	ce 01       	movw	r24, r28
    2696:	0e 94 9b 05 	call	0xb36	; 0xb36 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    269a:	24 e1       	ldi	r18, 0x14	; 20
    269c:	ae 01       	movw	r20, r28
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	80 e5       	ldi	r24, 0x50	; 80
    26a4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    26b0:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    26b8:	e0 ea       	ldi	r30, 0xA0	; 160
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	82 89       	ldd	r24, Z+18	; 0x12
    26be:	87 7f       	andi	r24, 0xF7	; 247
    26c0:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	82 83       	std	Z+2, r24	; 0x02
    26c6:	08 95       	ret

000026c8 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	18 f0       	brcs	.+6      	; 0x26d2 <get_temperature+0xa>
    26cc:	83 30       	cpi	r24, 0x03	; 3
    26ce:	21 f0       	breq	.+8      	; 0x26d8 <get_temperature+0x10>
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    26d2:	0e 94 13 01 	call	0x226	; 0x226 <read_AD590>
			break;
    26d6:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    26d8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <read_MCP9808>
			break;
    26dc:	08 95       	ret
		default:
			temperature = -999.9;
    26de:	6a e9       	ldi	r22, 0x9A	; 154
    26e0:	79 ef       	ldi	r23, 0xF9	; 249
    26e2:	89 e7       	ldi	r24, 0x79	; 121
    26e4:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    26e6:	08 95       	ret

000026e8 <testroutine>:
#include "globals.h"
#include "roboclaw.h"

void testroutine(void)
{
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	c0 55       	subi	r28, 0x50	; 80
    26f6:	d1 09       	sbc	r29, r1
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	de bf       	out	0x3e, r29	; 62

	uint8_t addr;	// TWI address for MCP23008
	char scratchbuf[80];
	float volts;

	volts = get_ROBOVoltage(128);
    26fc:	80 e8       	ldi	r24, 0x80	; 128
    26fe:	0e 94 60 12 	call	0x24c0	; 0x24c0 <get_ROBOVoltage>
	sprintf(scratchbuf, "%4.1f volts\r\n", volts);
    2702:	9f 93       	push	r25
    2704:	8f 93       	push	r24
    2706:	7f 93       	push	r23
    2708:	6f 93       	push	r22
    270a:	8a ea       	ldi	r24, 0xAA	; 170
    270c:	9e e7       	ldi	r25, 0x7E	; 126
    270e:	9f 93       	push	r25
    2710:	8f 93       	push	r24
    2712:	8e 01       	movw	r16, r28
    2714:	0f 5f       	subi	r16, 0xFF	; 255
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	1f 93       	push	r17
    271a:	0f 93       	push	r16
    271c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <sprintf>
	send_USART(0, (uint8_t*) scratchbuf, strlen(scratchbuf));
    2720:	f8 01       	movw	r30, r16
    2722:	01 90       	ld	r0, Z+
    2724:	00 20       	and	r0, r0
    2726:	e9 f7       	brne	.-6      	; 0x2722 <testroutine+0x3a>
    2728:	31 97       	sbiw	r30, 0x01	; 1
    272a:	af 01       	movw	r20, r30
    272c:	40 1b       	sub	r20, r16
    272e:	51 0b       	sbc	r21, r17
    2730:	b8 01       	movw	r22, r16
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	0e 94 7e 14 	call	0x28fc	; 0x28fc <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	c0 5b       	subi	r28, 0xB0	; 176
    273e:	df 4f       	sbci	r29, 0xFF	; 255
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	08 95       	ret

0000274e <__vector_12>:
	TCB0.CTRLA = 0;

}

ISR(TCB0_INT_vect)
{
    274e:	1f 92       	push	r1
    2750:	0f 92       	push	r0
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	0f 92       	push	r0
    2756:	11 24       	eor	r1, r1
    2758:	8f 93       	push	r24
    275a:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    2762:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <ticks>
    2766:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <ticks+0x1>
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <ticks>
    2770:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <ticks+0x1>
//	toggle_BEEPER;

    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	0f 90       	pop	r0
    277e:	1f 90       	pop	r1
    2780:	18 95       	reti

00002782 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2782:	e0 ea       	ldi	r30, 0xA0	; 160
    2784:	f8 e0       	ldi	r31, 0x08	; 8
    2786:	8b e0       	ldi	r24, 0x0B	; 11
    2788:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    278a:	83 81       	ldd	r24, Z+3	; 0x03
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2790:	85 81       	ldd	r24, Z+5	; 0x05
    2792:	81 60       	ori	r24, 0x01	; 1
    2794:	85 83       	std	Z+5, r24	; 0x05
    2796:	08 95       	ret

00002798 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2798:	01 c0       	rjmp	.+2      	; 0x279c <read_TWI+0x4>
		asm("nop");								// Should set timer here
    279a:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    279c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    27a0:	88 23       	and	r24, r24
    27a2:	dc f7       	brge	.-10     	; 0x279a <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    27a4:	e0 ea       	ldi	r30, 0xA0	; 160
    27a6:	f8 e0       	ldi	r31, 0x08	; 8
    27a8:	84 81       	ldd	r24, Z+4	; 0x04
    27aa:	8b 7f       	andi	r24, 0xFB	; 251
    27ac:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    27ae:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    27b0:	94 81       	ldd	r25, Z+4	; 0x04
    27b2:	92 60       	ori	r25, 0x02	; 2
    27b4:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    27b6:	08 95       	ret

000027b8 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <readlast_TWI+0x4>
		asm("nop");
    27ba:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    27bc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    27c0:	88 23       	and	r24, r24
    27c2:	dc f7       	brge	.-10     	; 0x27ba <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    27c4:	e0 ea       	ldi	r30, 0xA0	; 160
    27c6:	f8 e0       	ldi	r31, 0x08	; 8
    27c8:	84 81       	ldd	r24, Z+4	; 0x04
    27ca:	84 60       	ori	r24, 0x04	; 4
    27cc:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    27ce:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    27d0:	08 95       	ret

000027d2 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    27d2:	61 30       	cpi	r22, 0x01	; 1
    27d4:	39 f4       	brne	.+14     	; 0x27e4 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	81 60       	ori	r24, 0x01	; 1
    27de:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    27e4:	88 0f       	add	r24, r24
    27e6:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    27ec:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    27ee:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    27f2:	80 7c       	andi	r24, 0xC0	; 192
    27f4:	d9 f3       	breq	.-10     	; 0x27ec <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    27f6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    27fa:	82 fd       	sbrc	r24, 2
    27fc:	0c c0       	rjmp	.+24     	; 0x2816 <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    27fe:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2802:	83 fd       	sbrc	r24, 3
    2804:	0a c0       	rjmp	.+20     	; 0x281a <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2806:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    280a:	89 2f       	mov	r24, r25
    280c:	80 71       	andi	r24, 0x10	; 16
    280e:	94 ff       	sbrs	r25, 4
    2810:	05 c0       	rjmp	.+10     	; 0x281c <start_TWI+0x4a>
		return(TWINODEVICE);
    2812:	84 e0       	ldi	r24, 0x04	; 4
    2814:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    281a:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    281c:	08 95       	ret

0000281e <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    281e:	87 e0       	ldi	r24, 0x07	; 7
    2820:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2824:	08 95       	ret

00002826 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2826:	01 c0       	rjmp	.+2      	; 0x282a <write_TWI+0x4>
		asm("nop");
    2828:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    282a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    282e:	96 ff       	sbrs	r25, 6
    2830:	fb cf       	rjmp	.-10     	; 0x2828 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2832:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2836:	01 c0       	rjmp	.+2      	; 0x283a <write_TWI+0x14>
		asm("nop");
    2838:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    283a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    283e:	86 ff       	sbrs	r24, 6
    2840:	fb cf       	rjmp	.-10     	; 0x2838 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2842:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2846:	89 2f       	mov	r24, r25
    2848:	80 71       	andi	r24, 0x10	; 16
    284a:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    284c:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    284e:	08 95       	ret

00002850 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2850:	e0 e0       	ldi	r30, 0x00	; 0
    2852:	f4 e0       	ldi	r31, 0x04	; 4
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2858:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    285a:	e0 e0       	ldi	r30, 0x00	; 0
    285c:	f8 e0       	ldi	r31, 0x08	; 8
    285e:	2d e6       	ldi	r18, 0x6D	; 109
    2860:	35 e0       	ldi	r19, 0x05	; 5
    2862:	20 87       	std	Z+8, r18	; 0x08
    2864:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2866:	95 81       	ldd	r25, Z+5	; 0x05
    2868:	90 68       	ori	r25, 0x80	; 128
    286a:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    286c:	96 81       	ldd	r25, Z+6	; 0x06
    286e:	90 64       	ori	r25, 0x40	; 64
    2870:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2872:	96 81       	ldd	r25, Z+6	; 0x06
    2874:	90 68       	ori	r25, 0x80	; 128
    2876:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2878:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xff>
	send0_buf.tail = 0;
    287c:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0x100>
	send0_buf.done = YES;
    2880:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	recv0_buf.head = 0;
    2884:	10 92 16 2c 	sts	0x2C16, r1	; 0x802c16 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    2888:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    288c:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf>
	recv0_buf.length = 0;
    2890:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x102>
	recv0_buf.done = NO;
    2894:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2898:	e0 e4       	ldi	r30, 0x40	; 64
    289a:	f4 e0       	ldi	r31, 0x04	; 4
    289c:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    289e:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    28a0:	e0 e2       	ldi	r30, 0x20	; 32
    28a2:	f8 e0       	ldi	r31, 0x08	; 8
    28a4:	20 87       	std	Z+8, r18	; 0x08
    28a6:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    28a8:	95 81       	ldd	r25, Z+5	; 0x05
    28aa:	90 68       	ori	r25, 0x80	; 128
    28ac:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    28ae:	96 81       	ldd	r25, Z+6	; 0x06
    28b0:	90 64       	ori	r25, 0x40	; 64
    28b2:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    28b4:	96 81       	ldd	r25, Z+6	; 0x06
    28b6:	90 68       	ori	r25, 0x80	; 128
    28b8:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    28ba:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.tail = 0;
    28be:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0x100>
	send1_buf.done = YES;
    28c2:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	recv1_buf.head = 0;
    28c6:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    28ca:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    28ce:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.done = NO;
    28d2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    28d6:	e0 e2       	ldi	r30, 0x20	; 32
    28d8:	f4 e0       	ldi	r31, 0x04	; 4
    28da:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    28dc:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    28de:	e0 e6       	ldi	r30, 0x60	; 96
    28e0:	f8 e0       	ldi	r31, 0x08	; 8
    28e2:	20 87       	std	Z+8, r18	; 0x08
    28e4:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    28e6:	96 81       	ldd	r25, Z+6	; 0x06
    28e8:	90 64       	ori	r25, 0x40	; 64
    28ea:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    28ec:	96 81       	ldd	r25, Z+6	; 0x06
    28ee:	90 68       	ori	r25, 0x80	; 128
    28f0:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    28f2:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	recv3_buf.done = NO;
    28f6:	10 92 25 2e 	sts	0x2E25, r1	; 0x802e25 <recv3_buf+0x104>
    28fa:	08 95       	ret

000028fc <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	eb 01       	movw	r28, r22
    2906:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	01 f1       	breq	.+64     	; 0x294c <send_USART+0x50>
    290c:	b0 f0       	brcs	.+44     	; 0x293a <send_USART+0x3e>
    290e:	83 30       	cpi	r24, 0x03	; 3
    2910:	09 f4       	brne	.+2      	; 0x2914 <send_USART+0x18>
    2912:	6d c0       	rjmp	.+218    	; 0x29ee <send_USART+0xf2>
    2914:	74 c0       	rjmp	.+232    	; 0x29fe <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2916:	eb e1       	ldi	r30, 0x1B	; 27
    2918:	fd e2       	ldi	r31, 0x2D	; 45
    291a:	80 81       	ld	r24, Z
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	38 81       	ld	r19, Y
    2920:	dc 01       	movw	r26, r24
    2922:	a4 5e       	subi	r26, 0xE4	; 228
    2924:	b3 4d       	sbci	r27, 0xD3	; 211
    2926:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	6f ef       	ldi	r22, 0xFF	; 255
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
    2932:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    2934:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2936:	21 96       	adiw	r28, 0x01	; 1
    2938:	01 c0       	rjmp	.+2      	; 0x293c <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    293a:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    293c:	21 17       	cp	r18, r17
    293e:	58 f3       	brcs	.-42     	; 0x2916 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2940:	e0 e0       	ldi	r30, 0x00	; 0
    2942:	f8 e0       	ldi	r31, 0x08	; 8
    2944:	85 81       	ldd	r24, Z+5	; 0x05
    2946:	80 62       	ori	r24, 0x20	; 32
    2948:	85 83       	std	Z+5, r24	; 0x05
			break;
    294a:	59 c0       	rjmp	.+178    	; 0x29fe <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    294c:	64 2f       	mov	r22, r20
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	ce 01       	movw	r24, r28
    2952:	0e 94 3b 12 	call	0x2476	; 0x2476 <crc16>
    2956:	48 2f       	mov	r20, r24
    2958:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	11 c0       	rjmp	.+34     	; 0x2980 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    295e:	ea e2       	ldi	r30, 0x2A	; 42
    2960:	f0 e3       	ldi	r31, 0x30	; 48
    2962:	80 81       	ld	r24, Z
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	38 81       	ld	r19, Y
    2968:	dc 01       	movw	r26, r24
    296a:	a5 5d       	subi	r26, 0xD5	; 213
    296c:	b0 4d       	sbci	r27, 0xD0	; 208
    296e:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	6f ef       	ldi	r22, 0xFF	; 255
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
    297a:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    297c:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    297e:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2980:	21 17       	cp	r18, r17
    2982:	68 f3       	brcs	.-38     	; 0x295e <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    2984:	ea e2       	ldi	r30, 0x2A	; 42
    2986:	f0 e3       	ldi	r31, 0x30	; 48
    2988:	80 81       	ld	r24, Z
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	dc 01       	movw	r26, r24
    298e:	a5 5d       	subi	r26, 0xD5	; 213
    2990:	b0 4d       	sbci	r27, 0xD0	; 208
    2992:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	2f ef       	ldi	r18, 0xFF	; 255
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	b9 01       	movw	r22, r18
    299c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	dc 01       	movw	r26, r24
    29a4:	a5 5d       	subi	r26, 0xD5	; 213
    29a6:	b0 4d       	sbci	r27, 0xD0	; 208
    29a8:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	b9 01       	movw	r22, r18
    29ae:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
    29b2:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    29b4:	1e 5f       	subi	r17, 0xFE	; 254
    29b6:	10 93 2c 30 	sts	0x302C, r17	; 0x80302c <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    29ba:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    29be:	e0 e2       	ldi	r30, 0x20	; 32
    29c0:	f8 e0       	ldi	r31, 0x08	; 8
    29c2:	85 81       	ldd	r24, Z+5	; 0x05
    29c4:	80 62       	ori	r24, 0x20	; 32
    29c6:	85 83       	std	Z+5, r24	; 0x05
			break;
    29c8:	1a c0       	rjmp	.+52     	; 0x29fe <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    29ca:	e5 e2       	ldi	r30, 0x25	; 37
    29cc:	ff e2       	ldi	r31, 0x2F	; 47
    29ce:	80 81       	ld	r24, Z
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	38 81       	ld	r19, Y
    29d4:	dc 01       	movw	r26, r24
    29d6:	aa 5d       	subi	r26, 0xDA	; 218
    29d8:	b1 4d       	sbci	r27, 0xD1	; 209
    29da:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	6f ef       	ldi	r22, 0xFF	; 255
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
    29e6:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    29e8:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    29ea:	21 96       	adiw	r28, 0x01	; 1
    29ec:	01 c0       	rjmp	.+2      	; 0x29f0 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    29ee:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    29f0:	21 17       	cp	r18, r17
    29f2:	58 f3       	brcs	.-42     	; 0x29ca <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    29f4:	e0 e6       	ldi	r30, 0x60	; 96
    29f6:	f8 e0       	ldi	r31, 0x08	; 8
    29f8:	85 81       	ldd	r24, Z+5	; 0x05
    29fa:	80 62       	ori	r24, 0x20	; 32
    29fc:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

00002a08 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	5f 93       	push	r21
    2a14:	6f 93       	push	r22
    2a16:	7f 93       	push	r23
    2a18:	8f 93       	push	r24
    2a1a:	9f 93       	push	r25
    2a1c:	af 93       	push	r26
    2a1e:	bf 93       	push	r27
    2a20:	ef 93       	push	r30
    2a22:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    2a24:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
    2a28:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2a:	19 f1       	breq	.+70     	; 0x2a72 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    2a2c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    2a30:	8d 30       	cpi	r24, 0x0D	; 13
    2a32:	51 f4       	brne	.+20     	; 0x2a48 <__vector_17+0x40>
			recv0_buf.done = YES;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    2a3a:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	e9 5e       	subi	r30, 0xE9	; 233
    2a42:	f4 4d       	sbci	r31, 0xD4	; 212
    2a44:	10 82       	st	Z, r1
    2a46:	06 c0       	rjmp	.+12     	; 0x2a54 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    2a48:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	e9 5e       	subi	r30, 0xE9	; 233
    2a50:	f4 4d       	sbci	r31, 0xD4	; 212
    2a52:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    2a54:	e9 e1       	ldi	r30, 0x19	; 25
    2a56:	fc e2       	ldi	r31, 0x2C	; 44
    2a58:	80 81       	ld	r24, Z
    2a5a:	8f 5f       	subi	r24, 0xFF	; 255
    2a5c:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2a5e:	e6 e1       	ldi	r30, 0x16	; 22
    2a60:	fc e2       	ldi	r31, 0x2C	; 44
    2a62:	80 81       	ld	r24, Z
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	6f ef       	ldi	r22, 0xFF	; 255
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__divmodhi4>
    2a70:	80 83       	st	Z, r24
	}
}
    2a72:	ff 91       	pop	r31
    2a74:	ef 91       	pop	r30
    2a76:	bf 91       	pop	r27
    2a78:	af 91       	pop	r26
    2a7a:	9f 91       	pop	r25
    2a7c:	8f 91       	pop	r24
    2a7e:	7f 91       	pop	r23
    2a80:	6f 91       	pop	r22
    2a82:	5f 91       	pop	r21
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0
    2a8a:	1f 90       	pop	r1
    2a8c:	18 95       	reti

00002a8e <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2a8e:	1f 92       	push	r1
    2a90:	0f 92       	push	r0
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	0f 92       	push	r0
    2a96:	11 24       	eor	r1, r1
    2a98:	8f 93       	push	r24
    2a9a:	9f 93       	push	r25
    2a9c:	ef 93       	push	r30
    2a9e:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2aa0:	e0 e0       	ldi	r30, 0x00	; 0
    2aa2:	f8 e0       	ldi	r31, 0x08	; 8
    2aa4:	85 81       	ldd	r24, Z+5	; 0x05
    2aa6:	8f 7d       	andi	r24, 0xDF	; 223
    2aa8:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2aaa:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xff>
    2aae:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0x100>
    2ab2:	8e 17       	cp	r24, r30
    2ab4:	b9 f0       	breq	.+46     	; 0x2ae4 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	9e 0f       	add	r25, r30
    2aba:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <send0_buf+0x100>
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	e4 5e       	subi	r30, 0xE4	; 228
    2ac2:	f3 4d       	sbci	r31, 0xD3	; 211
    2ac4:	80 81       	ld	r24, Z
    2ac6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ace:	08 f4       	brcc	.+2      	; 0x2ad2 <__vector_18+0x44>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	89 0f       	add	r24, r25
    2ad4:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2ad8:	e0 e0       	ldi	r30, 0x00	; 0
    2ada:	f8 e0       	ldi	r31, 0x08	; 8
    2adc:	85 81       	ldd	r24, Z+5	; 0x05
    2ade:	80 62       	ori	r24, 0x20	; 32
    2ae0:	85 83       	std	Z+5, r24	; 0x05
    2ae2:	03 c0       	rjmp	.+6      	; 0x2aea <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	}

}
    2aea:	ff 91       	pop	r31
    2aec:	ef 91       	pop	r30
    2aee:	9f 91       	pop	r25
    2af0:	8f 91       	pop	r24
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	0f 90       	pop	r0
    2af8:	1f 90       	pop	r1
    2afa:	18 95       	reti

00002afc <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2afc:	1f 92       	push	r1
    2afe:	0f 92       	push	r0
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	0f 92       	push	r0
    2b04:	11 24       	eor	r1, r1
    2b06:	2f 93       	push	r18
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	ef 93       	push	r30
    2b0e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2b10:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    2b14:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    2b18:	80 91 13 2b 	lds	r24, 0x2B13	; 0x802b13 <recv1_buf+0x101>
    2b1c:	e8 17       	cp	r30, r24
    2b1e:	40 f4       	brcc	.+16     	; 0x2b30 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2b20:	21 e0       	ldi	r18, 0x01	; 1
    2b22:	2e 0f       	add	r18, r30
    2b24:	20 93 15 2b 	sts	0x2B15, r18	; 0x802b15 <recv1_buf+0x103>
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	ee 5e       	subi	r30, 0xEE	; 238
    2b2c:	f5 4d       	sbci	r31, 0xD5	; 213
    2b2e:	90 83       	st	Z, r25
	}
	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    2b30:	90 91 15 2b 	lds	r25, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    2b34:	98 17       	cp	r25, r24
    2b36:	18 f0       	brcs	.+6      	; 0x2b3e <__vector_26+0x42>
		recv1_buf.done = YES;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x104>
	}

}
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	9f 91       	pop	r25
    2b44:	8f 91       	pop	r24
    2b46:	2f 91       	pop	r18
    2b48:	0f 90       	pop	r0
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	0f 90       	pop	r0
    2b4e:	1f 90       	pop	r1
    2b50:	18 95       	reti

00002b52 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	ef 93       	push	r30
    2b62:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2b64:	e0 e2       	ldi	r30, 0x20	; 32
    2b66:	f8 e0       	ldi	r31, 0x08	; 8
    2b68:	85 81       	ldd	r24, Z+5	; 0x05
    2b6a:	8f 7d       	andi	r24, 0xDF	; 223
    2b6c:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    2b6e:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <send1_buf+0xff>
    2b72:	e0 91 2b 30 	lds	r30, 0x302B	; 0x80302b <send1_buf+0x100>
    2b76:	8e 17       	cp	r24, r30
    2b78:	b9 f0       	breq	.+46     	; 0x2ba8 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	9e 0f       	add	r25, r30
    2b7e:	90 93 2b 30 	sts	0x302B, r25	; 0x80302b <send1_buf+0x100>
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	e5 5d       	subi	r30, 0xD5	; 213
    2b86:	f0 4d       	sbci	r31, 0xD0	; 208
    2b88:	80 81       	ld	r24, Z
    2b8a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	9f 3f       	cpi	r25, 0xFF	; 255
    2b92:	08 f4       	brcc	.+2      	; 0x2b96 <__vector_27+0x44>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	89 0f       	add	r24, r25
    2b98:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2b9c:	e0 e2       	ldi	r30, 0x20	; 32
    2b9e:	f8 e0       	ldi	r31, 0x08	; 8
    2ba0:	85 81       	ldd	r24, Z+5	; 0x05
    2ba2:	80 62       	ori	r24, 0x20	; 32
    2ba4:	85 83       	std	Z+5, r24	; 0x05
    2ba6:	03 c0       	rjmp	.+6      	; 0x2bae <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    2bae:	ff 91       	pop	r31
    2bb0:	ef 91       	pop	r30
    2bb2:	9f 91       	pop	r25
    2bb4:	8f 91       	pop	r24
    2bb6:	0f 90       	pop	r0
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	0f 90       	pop	r0
    2bbc:	1f 90       	pop	r1
    2bbe:	18 95       	reti

00002bc0 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2bc0:	1f 92       	push	r1
    2bc2:	0f 92       	push	r0
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	0f 92       	push	r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	af 93       	push	r26
    2bd0:	bf 93       	push	r27
    2bd2:	ef 93       	push	r30
    2bd4:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    2bd6:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2bda:	8d 30       	cpi	r24, 0x0D	; 13
    2bdc:	21 f0       	breq	.+8      	; 0x2be6 <__vector_37+0x26>
    2bde:	e0 91 24 2e 	lds	r30, 0x2E24	; 0x802e24 <recv3_buf+0x103>
    2be2:	ee 3f       	cpi	r30, 0xFE	; 254
    2be4:	78 f0       	brcs	.+30     	; 0x2c04 <__vector_37+0x44>
		recv3_buf.done = YES;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2bec:	a4 e2       	ldi	r26, 0x24	; 36
    2bee:	be e2       	ldi	r27, 0x2E	; 46
    2bf0:	8c 91       	ld	r24, X
    2bf2:	e8 2f       	mov	r30, r24
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	ef 5d       	subi	r30, 0xDF	; 223
    2bf8:	f2 4d       	sbci	r31, 0xD2	; 210
    2bfa:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2bfc:	80 93 22 2e 	sts	0x2E22, r24	; 0x802e22 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    2c00:	1c 92       	st	X, r1
		return;
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	9e 0f       	add	r25, r30
    2c08:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <recv3_buf+0x103>
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	ef 5d       	subi	r30, 0xDF	; 223
    2c10:	f2 4d       	sbci	r31, 0xD2	; 210
    2c12:	80 83       	st	Z, r24
	}

}
    2c14:	ff 91       	pop	r31
    2c16:	ef 91       	pop	r30
    2c18:	bf 91       	pop	r27
    2c1a:	af 91       	pop	r26
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	0f 90       	pop	r0
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	0f 90       	pop	r0
    2c26:	1f 90       	pop	r1
    2c28:	18 95       	reti

00002c2a <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	11 24       	eor	r1, r1
    2c34:	8f 93       	push	r24
    2c36:	9f 93       	push	r25
    2c38:	af 93       	push	r26
    2c3a:	bf 93       	push	r27
    2c3c:	ef 93       	push	r30
    2c3e:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2c40:	a9 e2       	ldi	r26, 0x29	; 41
    2c42:	bf e2       	ldi	r27, 0x2F	; 47
    2c44:	ec 91       	ld	r30, X
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	8e 0f       	add	r24, r30
    2c4a:	8c 93       	st	X, r24
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	ea 5d       	subi	r30, 0xDA	; 218
    2c50:	f1 4d       	sbci	r31, 0xD1	; 209
    2c52:	90 81       	ld	r25, Z
    2c54:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2c58:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x101>
    2c5c:	89 17       	cp	r24, r25
    2c5e:	40 f0       	brcs	.+16     	; 0x2c70 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2c60:	e0 e6       	ldi	r30, 0x60	; 96
    2c62:	f8 e0       	ldi	r31, 0x08	; 8
    2c64:	85 81       	ldd	r24, Z+5	; 0x05
    2c66:	8f 7d       	andi	r24, 0xDF	; 223
    2c68:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	}

}
    2c70:	ff 91       	pop	r31
    2c72:	ef 91       	pop	r30
    2c74:	bf 91       	pop	r27
    2c76:	af 91       	pop	r26
    2c78:	9f 91       	pop	r25
    2c7a:	8f 91       	pop	r24
    2c7c:	0f 90       	pop	r0
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	0f 90       	pop	r0
    2c82:	1f 90       	pop	r1
    2c84:	18 95       	reti

00002c86 <reboot>:
#include "initialize.h"

void reboot(void)
{

	init_USART();
    2c86:	0e 94 28 14 	call	0x2850	; 0x2850 <init_USART>
	init_XPORT();
    2c8a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    2c8e:	88 ed       	ldi	r24, 0xD8	; 216
    2c90:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2c98:	08 95       	ret

00002c9a <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    2c9a:	e0 e4       	ldi	r30, 0x40	; 64
    2c9c:	f4 e0       	ldi	r31, 0x04	; 4
    2c9e:	88 e0       	ldi	r24, 0x08	; 8
    2ca0:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    2ca2:	81 83       	std	Z+1, r24	; 0x01
    2ca4:	ad e8       	ldi	r26, 0x8D	; 141
    2ca6:	b0 e2       	ldi	r27, 0x20	; 32
    2ca8:	11 97       	sbiw	r26, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <init_XPORT+0xe>
    2cac:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    2cae:	85 83       	std	Z+5, r24	; 0x05
    2cb0:	08 95       	ret

00002cb2 <__subsf3>:
    2cb2:	50 58       	subi	r21, 0x80	; 128

00002cb4 <__addsf3>:
    2cb4:	bb 27       	eor	r27, r27
    2cb6:	aa 27       	eor	r26, r26
    2cb8:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__addsf3x>
    2cbc:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__fp_round>
    2cc0:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__fp_pscA>
    2cc4:	38 f0       	brcs	.+14     	; 0x2cd4 <__addsf3+0x20>
    2cc6:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__fp_pscB>
    2cca:	20 f0       	brcs	.+8      	; 0x2cd4 <__addsf3+0x20>
    2ccc:	39 f4       	brne	.+14     	; 0x2cdc <__addsf3+0x28>
    2cce:	9f 3f       	cpi	r25, 0xFF	; 255
    2cd0:	19 f4       	brne	.+6      	; 0x2cd8 <__addsf3+0x24>
    2cd2:	26 f4       	brtc	.+8      	; 0x2cdc <__addsf3+0x28>
    2cd4:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__fp_nan>
    2cd8:	0e f4       	brtc	.+2      	; 0x2cdc <__addsf3+0x28>
    2cda:	e0 95       	com	r30
    2cdc:	e7 fb       	bst	r30, 7
    2cde:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__fp_inf>

00002ce2 <__addsf3x>:
    2ce2:	e9 2f       	mov	r30, r25
    2ce4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__fp_split3>
    2ce8:	58 f3       	brcs	.-42     	; 0x2cc0 <__addsf3+0xc>
    2cea:	ba 17       	cp	r27, r26
    2cec:	62 07       	cpc	r22, r18
    2cee:	73 07       	cpc	r23, r19
    2cf0:	84 07       	cpc	r24, r20
    2cf2:	95 07       	cpc	r25, r21
    2cf4:	20 f0       	brcs	.+8      	; 0x2cfe <__addsf3x+0x1c>
    2cf6:	79 f4       	brne	.+30     	; 0x2d16 <__addsf3x+0x34>
    2cf8:	a6 f5       	brtc	.+104    	; 0x2d62 <__addsf3x+0x80>
    2cfa:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__fp_zero>
    2cfe:	0e f4       	brtc	.+2      	; 0x2d02 <__addsf3x+0x20>
    2d00:	e0 95       	com	r30
    2d02:	0b 2e       	mov	r0, r27
    2d04:	ba 2f       	mov	r27, r26
    2d06:	a0 2d       	mov	r26, r0
    2d08:	0b 01       	movw	r0, r22
    2d0a:	b9 01       	movw	r22, r18
    2d0c:	90 01       	movw	r18, r0
    2d0e:	0c 01       	movw	r0, r24
    2d10:	ca 01       	movw	r24, r20
    2d12:	a0 01       	movw	r20, r0
    2d14:	11 24       	eor	r1, r1
    2d16:	ff 27       	eor	r31, r31
    2d18:	59 1b       	sub	r21, r25
    2d1a:	99 f0       	breq	.+38     	; 0x2d42 <__addsf3x+0x60>
    2d1c:	59 3f       	cpi	r21, 0xF9	; 249
    2d1e:	50 f4       	brcc	.+20     	; 0x2d34 <__addsf3x+0x52>
    2d20:	50 3e       	cpi	r21, 0xE0	; 224
    2d22:	68 f1       	brcs	.+90     	; 0x2d7e <__addsf3x+0x9c>
    2d24:	1a 16       	cp	r1, r26
    2d26:	f0 40       	sbci	r31, 0x00	; 0
    2d28:	a2 2f       	mov	r26, r18
    2d2a:	23 2f       	mov	r18, r19
    2d2c:	34 2f       	mov	r19, r20
    2d2e:	44 27       	eor	r20, r20
    2d30:	58 5f       	subi	r21, 0xF8	; 248
    2d32:	f3 cf       	rjmp	.-26     	; 0x2d1a <__addsf3x+0x38>
    2d34:	46 95       	lsr	r20
    2d36:	37 95       	ror	r19
    2d38:	27 95       	ror	r18
    2d3a:	a7 95       	ror	r26
    2d3c:	f0 40       	sbci	r31, 0x00	; 0
    2d3e:	53 95       	inc	r21
    2d40:	c9 f7       	brne	.-14     	; 0x2d34 <__addsf3x+0x52>
    2d42:	7e f4       	brtc	.+30     	; 0x2d62 <__addsf3x+0x80>
    2d44:	1f 16       	cp	r1, r31
    2d46:	ba 0b       	sbc	r27, r26
    2d48:	62 0b       	sbc	r22, r18
    2d4a:	73 0b       	sbc	r23, r19
    2d4c:	84 0b       	sbc	r24, r20
    2d4e:	ba f0       	brmi	.+46     	; 0x2d7e <__addsf3x+0x9c>
    2d50:	91 50       	subi	r25, 0x01	; 1
    2d52:	a1 f0       	breq	.+40     	; 0x2d7c <__addsf3x+0x9a>
    2d54:	ff 0f       	add	r31, r31
    2d56:	bb 1f       	adc	r27, r27
    2d58:	66 1f       	adc	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	c2 f7       	brpl	.-16     	; 0x2d50 <__addsf3x+0x6e>
    2d60:	0e c0       	rjmp	.+28     	; 0x2d7e <__addsf3x+0x9c>
    2d62:	ba 0f       	add	r27, r26
    2d64:	62 1f       	adc	r22, r18
    2d66:	73 1f       	adc	r23, r19
    2d68:	84 1f       	adc	r24, r20
    2d6a:	48 f4       	brcc	.+18     	; 0x2d7e <__addsf3x+0x9c>
    2d6c:	87 95       	ror	r24
    2d6e:	77 95       	ror	r23
    2d70:	67 95       	ror	r22
    2d72:	b7 95       	ror	r27
    2d74:	f7 95       	ror	r31
    2d76:	9e 3f       	cpi	r25, 0xFE	; 254
    2d78:	08 f0       	brcs	.+2      	; 0x2d7c <__addsf3x+0x9a>
    2d7a:	b0 cf       	rjmp	.-160    	; 0x2cdc <__addsf3+0x28>
    2d7c:	93 95       	inc	r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	08 f0       	brcs	.+2      	; 0x2d84 <__addsf3x+0xa2>
    2d82:	99 27       	eor	r25, r25
    2d84:	ee 0f       	add	r30, r30
    2d86:	97 95       	ror	r25
    2d88:	87 95       	ror	r24
    2d8a:	08 95       	ret

00002d8c <__cmpsf2>:
    2d8c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__fp_cmp>
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <__cmpsf2+0x8>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	08 95       	ret

00002d96 <__divsf3>:
    2d96:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__divsf3x>
    2d9a:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__fp_round>
    2d9e:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__fp_pscB>
    2da2:	58 f0       	brcs	.+22     	; 0x2dba <__divsf3+0x24>
    2da4:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__fp_pscA>
    2da8:	40 f0       	brcs	.+16     	; 0x2dba <__divsf3+0x24>
    2daa:	29 f4       	brne	.+10     	; 0x2db6 <__divsf3+0x20>
    2dac:	5f 3f       	cpi	r21, 0xFF	; 255
    2dae:	29 f0       	breq	.+10     	; 0x2dba <__divsf3+0x24>
    2db0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__fp_inf>
    2db4:	51 11       	cpse	r21, r1
    2db6:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_szero>
    2dba:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__fp_nan>

00002dbe <__divsf3x>:
    2dbe:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__fp_split3>
    2dc2:	68 f3       	brcs	.-38     	; 0x2d9e <__divsf3+0x8>

00002dc4 <__divsf3_pse>:
    2dc4:	99 23       	and	r25, r25
    2dc6:	b1 f3       	breq	.-20     	; 0x2db4 <__divsf3+0x1e>
    2dc8:	55 23       	and	r21, r21
    2dca:	91 f3       	breq	.-28     	; 0x2db0 <__divsf3+0x1a>
    2dcc:	95 1b       	sub	r25, r21
    2dce:	55 0b       	sbc	r21, r21
    2dd0:	bb 27       	eor	r27, r27
    2dd2:	aa 27       	eor	r26, r26
    2dd4:	62 17       	cp	r22, r18
    2dd6:	73 07       	cpc	r23, r19
    2dd8:	84 07       	cpc	r24, r20
    2dda:	38 f0       	brcs	.+14     	; 0x2dea <__divsf3_pse+0x26>
    2ddc:	9f 5f       	subi	r25, 0xFF	; 255
    2dde:	5f 4f       	sbci	r21, 0xFF	; 255
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	44 1f       	adc	r20, r20
    2de6:	aa 1f       	adc	r26, r26
    2de8:	a9 f3       	breq	.-22     	; 0x2dd4 <__divsf3_pse+0x10>
    2dea:	35 d0       	rcall	.+106    	; 0x2e56 <__divsf3_pse+0x92>
    2dec:	0e 2e       	mov	r0, r30
    2dee:	3a f0       	brmi	.+14     	; 0x2dfe <__divsf3_pse+0x3a>
    2df0:	e0 e8       	ldi	r30, 0x80	; 128
    2df2:	32 d0       	rcall	.+100    	; 0x2e58 <__divsf3_pse+0x94>
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	50 40       	sbci	r21, 0x00	; 0
    2df8:	e6 95       	lsr	r30
    2dfa:	00 1c       	adc	r0, r0
    2dfc:	ca f7       	brpl	.-14     	; 0x2df0 <__divsf3_pse+0x2c>
    2dfe:	2b d0       	rcall	.+86     	; 0x2e56 <__divsf3_pse+0x92>
    2e00:	fe 2f       	mov	r31, r30
    2e02:	29 d0       	rcall	.+82     	; 0x2e56 <__divsf3_pse+0x92>
    2e04:	66 0f       	add	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	26 17       	cp	r18, r22
    2e0e:	37 07       	cpc	r19, r23
    2e10:	48 07       	cpc	r20, r24
    2e12:	ab 07       	cpc	r26, r27
    2e14:	b0 e8       	ldi	r27, 0x80	; 128
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__divsf3_pse+0x56>
    2e18:	bb 0b       	sbc	r27, r27
    2e1a:	80 2d       	mov	r24, r0
    2e1c:	bf 01       	movw	r22, r30
    2e1e:	ff 27       	eor	r31, r31
    2e20:	93 58       	subi	r25, 0x83	; 131
    2e22:	5f 4f       	sbci	r21, 0xFF	; 255
    2e24:	3a f0       	brmi	.+14     	; 0x2e34 <__divsf3_pse+0x70>
    2e26:	9e 3f       	cpi	r25, 0xFE	; 254
    2e28:	51 05       	cpc	r21, r1
    2e2a:	78 f0       	brcs	.+30     	; 0x2e4a <__divsf3_pse+0x86>
    2e2c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__fp_inf>
    2e30:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_szero>
    2e34:	5f 3f       	cpi	r21, 0xFF	; 255
    2e36:	e4 f3       	brlt	.-8      	; 0x2e30 <__divsf3_pse+0x6c>
    2e38:	98 3e       	cpi	r25, 0xE8	; 232
    2e3a:	d4 f3       	brlt	.-12     	; 0x2e30 <__divsf3_pse+0x6c>
    2e3c:	86 95       	lsr	r24
    2e3e:	77 95       	ror	r23
    2e40:	67 95       	ror	r22
    2e42:	b7 95       	ror	r27
    2e44:	f7 95       	ror	r31
    2e46:	9f 5f       	subi	r25, 0xFF	; 255
    2e48:	c9 f7       	brne	.-14     	; 0x2e3c <__divsf3_pse+0x78>
    2e4a:	88 0f       	add	r24, r24
    2e4c:	91 1d       	adc	r25, r1
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	97 f9       	bld	r25, 7
    2e54:	08 95       	ret
    2e56:	e1 e0       	ldi	r30, 0x01	; 1
    2e58:	66 0f       	add	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	bb 1f       	adc	r27, r27
    2e60:	62 17       	cp	r22, r18
    2e62:	73 07       	cpc	r23, r19
    2e64:	84 07       	cpc	r24, r20
    2e66:	ba 07       	cpc	r27, r26
    2e68:	20 f0       	brcs	.+8      	; 0x2e72 <__divsf3_pse+0xae>
    2e6a:	62 1b       	sub	r22, r18
    2e6c:	73 0b       	sbc	r23, r19
    2e6e:	84 0b       	sbc	r24, r20
    2e70:	ba 0b       	sbc	r27, r26
    2e72:	ee 1f       	adc	r30, r30
    2e74:	88 f7       	brcc	.-30     	; 0x2e58 <__divsf3_pse+0x94>
    2e76:	e0 95       	com	r30
    2e78:	08 95       	ret

00002e7a <__floatunsisf>:
    2e7a:	e8 94       	clt
    2e7c:	09 c0       	rjmp	.+18     	; 0x2e90 <__floatsisf+0x12>

00002e7e <__floatsisf>:
    2e7e:	97 fb       	bst	r25, 7
    2e80:	3e f4       	brtc	.+14     	; 0x2e90 <__floatsisf+0x12>
    2e82:	90 95       	com	r25
    2e84:	80 95       	com	r24
    2e86:	70 95       	com	r23
    2e88:	61 95       	neg	r22
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	99 23       	and	r25, r25
    2e92:	a9 f0       	breq	.+42     	; 0x2ebe <__floatsisf+0x40>
    2e94:	f9 2f       	mov	r31, r25
    2e96:	96 e9       	ldi	r25, 0x96	; 150
    2e98:	bb 27       	eor	r27, r27
    2e9a:	93 95       	inc	r25
    2e9c:	f6 95       	lsr	r31
    2e9e:	87 95       	ror	r24
    2ea0:	77 95       	ror	r23
    2ea2:	67 95       	ror	r22
    2ea4:	b7 95       	ror	r27
    2ea6:	f1 11       	cpse	r31, r1
    2ea8:	f8 cf       	rjmp	.-16     	; 0x2e9a <__floatsisf+0x1c>
    2eaa:	fa f4       	brpl	.+62     	; 0x2eea <__floatsisf+0x6c>
    2eac:	bb 0f       	add	r27, r27
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <__floatsisf+0x36>
    2eb0:	60 ff       	sbrs	r22, 0
    2eb2:	1b c0       	rjmp	.+54     	; 0x2eea <__floatsisf+0x6c>
    2eb4:	6f 5f       	subi	r22, 0xFF	; 255
    2eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eba:	9f 4f       	sbci	r25, 0xFF	; 255
    2ebc:	16 c0       	rjmp	.+44     	; 0x2eea <__floatsisf+0x6c>
    2ebe:	88 23       	and	r24, r24
    2ec0:	11 f0       	breq	.+4      	; 0x2ec6 <__floatsisf+0x48>
    2ec2:	96 e9       	ldi	r25, 0x96	; 150
    2ec4:	11 c0       	rjmp	.+34     	; 0x2ee8 <__floatsisf+0x6a>
    2ec6:	77 23       	and	r23, r23
    2ec8:	21 f0       	breq	.+8      	; 0x2ed2 <__floatsisf+0x54>
    2eca:	9e e8       	ldi	r25, 0x8E	; 142
    2ecc:	87 2f       	mov	r24, r23
    2ece:	76 2f       	mov	r23, r22
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <__floatsisf+0x5e>
    2ed2:	66 23       	and	r22, r22
    2ed4:	71 f0       	breq	.+28     	; 0x2ef2 <__floatsisf+0x74>
    2ed6:	96 e8       	ldi	r25, 0x86	; 134
    2ed8:	86 2f       	mov	r24, r22
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	2a f0       	brmi	.+10     	; 0x2eea <__floatsisf+0x6c>
    2ee0:	9a 95       	dec	r25
    2ee2:	66 0f       	add	r22, r22
    2ee4:	77 1f       	adc	r23, r23
    2ee6:	88 1f       	adc	r24, r24
    2ee8:	da f7       	brpl	.-10     	; 0x2ee0 <__floatsisf+0x62>
    2eea:	88 0f       	add	r24, r24
    2eec:	96 95       	lsr	r25
    2eee:	87 95       	ror	r24
    2ef0:	97 f9       	bld	r25, 7
    2ef2:	08 95       	ret

00002ef4 <__fp_cmp>:
    2ef4:	99 0f       	add	r25, r25
    2ef6:	00 08       	sbc	r0, r0
    2ef8:	55 0f       	add	r21, r21
    2efa:	aa 0b       	sbc	r26, r26
    2efc:	e0 e8       	ldi	r30, 0x80	; 128
    2efe:	fe ef       	ldi	r31, 0xFE	; 254
    2f00:	16 16       	cp	r1, r22
    2f02:	17 06       	cpc	r1, r23
    2f04:	e8 07       	cpc	r30, r24
    2f06:	f9 07       	cpc	r31, r25
    2f08:	c0 f0       	brcs	.+48     	; 0x2f3a <__fp_cmp+0x46>
    2f0a:	12 16       	cp	r1, r18
    2f0c:	13 06       	cpc	r1, r19
    2f0e:	e4 07       	cpc	r30, r20
    2f10:	f5 07       	cpc	r31, r21
    2f12:	98 f0       	brcs	.+38     	; 0x2f3a <__fp_cmp+0x46>
    2f14:	62 1b       	sub	r22, r18
    2f16:	73 0b       	sbc	r23, r19
    2f18:	84 0b       	sbc	r24, r20
    2f1a:	95 0b       	sbc	r25, r21
    2f1c:	39 f4       	brne	.+14     	; 0x2f2c <__fp_cmp+0x38>
    2f1e:	0a 26       	eor	r0, r26
    2f20:	61 f0       	breq	.+24     	; 0x2f3a <__fp_cmp+0x46>
    2f22:	23 2b       	or	r18, r19
    2f24:	24 2b       	or	r18, r20
    2f26:	25 2b       	or	r18, r21
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <__fp_cmp+0x3e>
    2f2a:	08 95       	ret
    2f2c:	0a 26       	eor	r0, r26
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <__fp_cmp+0x3e>
    2f30:	a1 40       	sbci	r26, 0x01	; 1
    2f32:	a6 95       	lsr	r26
    2f34:	8f ef       	ldi	r24, 0xFF	; 255
    2f36:	81 1d       	adc	r24, r1
    2f38:	81 1d       	adc	r24, r1
    2f3a:	08 95       	ret

00002f3c <__fp_inf>:
    2f3c:	97 f9       	bld	r25, 7
    2f3e:	9f 67       	ori	r25, 0x7F	; 127
    2f40:	80 e8       	ldi	r24, 0x80	; 128
    2f42:	70 e0       	ldi	r23, 0x00	; 0
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	08 95       	ret

00002f48 <__fp_nan>:
    2f48:	9f ef       	ldi	r25, 0xFF	; 255
    2f4a:	80 ec       	ldi	r24, 0xC0	; 192
    2f4c:	08 95       	ret

00002f4e <__fp_pscA>:
    2f4e:	00 24       	eor	r0, r0
    2f50:	0a 94       	dec	r0
    2f52:	16 16       	cp	r1, r22
    2f54:	17 06       	cpc	r1, r23
    2f56:	18 06       	cpc	r1, r24
    2f58:	09 06       	cpc	r0, r25
    2f5a:	08 95       	ret

00002f5c <__fp_pscB>:
    2f5c:	00 24       	eor	r0, r0
    2f5e:	0a 94       	dec	r0
    2f60:	12 16       	cp	r1, r18
    2f62:	13 06       	cpc	r1, r19
    2f64:	14 06       	cpc	r1, r20
    2f66:	05 06       	cpc	r0, r21
    2f68:	08 95       	ret

00002f6a <__fp_round>:
    2f6a:	09 2e       	mov	r0, r25
    2f6c:	03 94       	inc	r0
    2f6e:	00 0c       	add	r0, r0
    2f70:	11 f4       	brne	.+4      	; 0x2f76 <__fp_round+0xc>
    2f72:	88 23       	and	r24, r24
    2f74:	52 f0       	brmi	.+20     	; 0x2f8a <__fp_round+0x20>
    2f76:	bb 0f       	add	r27, r27
    2f78:	40 f4       	brcc	.+16     	; 0x2f8a <__fp_round+0x20>
    2f7a:	bf 2b       	or	r27, r31
    2f7c:	11 f4       	brne	.+4      	; 0x2f82 <__fp_round+0x18>
    2f7e:	60 ff       	sbrs	r22, 0
    2f80:	04 c0       	rjmp	.+8      	; 0x2f8a <__fp_round+0x20>
    2f82:	6f 5f       	subi	r22, 0xFF	; 255
    2f84:	7f 4f       	sbci	r23, 0xFF	; 255
    2f86:	8f 4f       	sbci	r24, 0xFF	; 255
    2f88:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8a:	08 95       	ret

00002f8c <__fp_split3>:
    2f8c:	57 fd       	sbrc	r21, 7
    2f8e:	90 58       	subi	r25, 0x80	; 128
    2f90:	44 0f       	add	r20, r20
    2f92:	55 1f       	adc	r21, r21
    2f94:	59 f0       	breq	.+22     	; 0x2fac <__fp_splitA+0x10>
    2f96:	5f 3f       	cpi	r21, 0xFF	; 255
    2f98:	71 f0       	breq	.+28     	; 0x2fb6 <__fp_splitA+0x1a>
    2f9a:	47 95       	ror	r20

00002f9c <__fp_splitA>:
    2f9c:	88 0f       	add	r24, r24
    2f9e:	97 fb       	bst	r25, 7
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	61 f0       	breq	.+24     	; 0x2fbc <__fp_splitA+0x20>
    2fa4:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa6:	79 f0       	breq	.+30     	; 0x2fc6 <__fp_splitA+0x2a>
    2fa8:	87 95       	ror	r24
    2faa:	08 95       	ret
    2fac:	12 16       	cp	r1, r18
    2fae:	13 06       	cpc	r1, r19
    2fb0:	14 06       	cpc	r1, r20
    2fb2:	55 1f       	adc	r21, r21
    2fb4:	f2 cf       	rjmp	.-28     	; 0x2f9a <__fp_split3+0xe>
    2fb6:	46 95       	lsr	r20
    2fb8:	f1 df       	rcall	.-30     	; 0x2f9c <__fp_splitA>
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <__fp_splitA+0x30>
    2fbc:	16 16       	cp	r1, r22
    2fbe:	17 06       	cpc	r1, r23
    2fc0:	18 06       	cpc	r1, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	f1 cf       	rjmp	.-30     	; 0x2fa8 <__fp_splitA+0xc>
    2fc6:	86 95       	lsr	r24
    2fc8:	71 05       	cpc	r23, r1
    2fca:	61 05       	cpc	r22, r1
    2fcc:	08 94       	sec
    2fce:	08 95       	ret

00002fd0 <__fp_zero>:
    2fd0:	e8 94       	clt

00002fd2 <__fp_szero>:
    2fd2:	bb 27       	eor	r27, r27
    2fd4:	66 27       	eor	r22, r22
    2fd6:	77 27       	eor	r23, r23
    2fd8:	cb 01       	movw	r24, r22
    2fda:	97 f9       	bld	r25, 7
    2fdc:	08 95       	ret

00002fde <__gesf2>:
    2fde:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__fp_cmp>
    2fe2:	08 f4       	brcc	.+2      	; 0x2fe6 <__gesf2+0x8>
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	08 95       	ret

00002fe8 <__mulsf3>:
    2fe8:	0e 94 07 18 	call	0x300e	; 0x300e <__mulsf3x>
    2fec:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__fp_round>
    2ff0:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__fp_pscA>
    2ff4:	38 f0       	brcs	.+14     	; 0x3004 <__mulsf3+0x1c>
    2ff6:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__fp_pscB>
    2ffa:	20 f0       	brcs	.+8      	; 0x3004 <__mulsf3+0x1c>
    2ffc:	95 23       	and	r25, r21
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <__mulsf3+0x1c>
    3000:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__fp_inf>
    3004:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__fp_nan>
    3008:	11 24       	eor	r1, r1
    300a:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_szero>

0000300e <__mulsf3x>:
    300e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__fp_split3>
    3012:	70 f3       	brcs	.-36     	; 0x2ff0 <__mulsf3+0x8>

00003014 <__mulsf3_pse>:
    3014:	95 9f       	mul	r25, r21
    3016:	c1 f3       	breq	.-16     	; 0x3008 <__mulsf3+0x20>
    3018:	95 0f       	add	r25, r21
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	55 1f       	adc	r21, r21
    301e:	62 9f       	mul	r22, r18
    3020:	f0 01       	movw	r30, r0
    3022:	72 9f       	mul	r23, r18
    3024:	bb 27       	eor	r27, r27
    3026:	f0 0d       	add	r31, r0
    3028:	b1 1d       	adc	r27, r1
    302a:	63 9f       	mul	r22, r19
    302c:	aa 27       	eor	r26, r26
    302e:	f0 0d       	add	r31, r0
    3030:	b1 1d       	adc	r27, r1
    3032:	aa 1f       	adc	r26, r26
    3034:	64 9f       	mul	r22, r20
    3036:	66 27       	eor	r22, r22
    3038:	b0 0d       	add	r27, r0
    303a:	a1 1d       	adc	r26, r1
    303c:	66 1f       	adc	r22, r22
    303e:	82 9f       	mul	r24, r18
    3040:	22 27       	eor	r18, r18
    3042:	b0 0d       	add	r27, r0
    3044:	a1 1d       	adc	r26, r1
    3046:	62 1f       	adc	r22, r18
    3048:	73 9f       	mul	r23, r19
    304a:	b0 0d       	add	r27, r0
    304c:	a1 1d       	adc	r26, r1
    304e:	62 1f       	adc	r22, r18
    3050:	83 9f       	mul	r24, r19
    3052:	a0 0d       	add	r26, r0
    3054:	61 1d       	adc	r22, r1
    3056:	22 1f       	adc	r18, r18
    3058:	74 9f       	mul	r23, r20
    305a:	33 27       	eor	r19, r19
    305c:	a0 0d       	add	r26, r0
    305e:	61 1d       	adc	r22, r1
    3060:	23 1f       	adc	r18, r19
    3062:	84 9f       	mul	r24, r20
    3064:	60 0d       	add	r22, r0
    3066:	21 1d       	adc	r18, r1
    3068:	82 2f       	mov	r24, r18
    306a:	76 2f       	mov	r23, r22
    306c:	6a 2f       	mov	r22, r26
    306e:	11 24       	eor	r1, r1
    3070:	9f 57       	subi	r25, 0x7F	; 127
    3072:	50 40       	sbci	r21, 0x00	; 0
    3074:	9a f0       	brmi	.+38     	; 0x309c <__mulsf3_pse+0x88>
    3076:	f1 f0       	breq	.+60     	; 0x30b4 <__mulsf3_pse+0xa0>
    3078:	88 23       	and	r24, r24
    307a:	4a f0       	brmi	.+18     	; 0x308e <__mulsf3_pse+0x7a>
    307c:	ee 0f       	add	r30, r30
    307e:	ff 1f       	adc	r31, r31
    3080:	bb 1f       	adc	r27, r27
    3082:	66 1f       	adc	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	91 50       	subi	r25, 0x01	; 1
    308a:	50 40       	sbci	r21, 0x00	; 0
    308c:	a9 f7       	brne	.-22     	; 0x3078 <__mulsf3_pse+0x64>
    308e:	9e 3f       	cpi	r25, 0xFE	; 254
    3090:	51 05       	cpc	r21, r1
    3092:	80 f0       	brcs	.+32     	; 0x30b4 <__mulsf3_pse+0xa0>
    3094:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__fp_inf>
    3098:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__fp_szero>
    309c:	5f 3f       	cpi	r21, 0xFF	; 255
    309e:	e4 f3       	brlt	.-8      	; 0x3098 <__mulsf3_pse+0x84>
    30a0:	98 3e       	cpi	r25, 0xE8	; 232
    30a2:	d4 f3       	brlt	.-12     	; 0x3098 <__mulsf3_pse+0x84>
    30a4:	86 95       	lsr	r24
    30a6:	77 95       	ror	r23
    30a8:	67 95       	ror	r22
    30aa:	b7 95       	ror	r27
    30ac:	f7 95       	ror	r31
    30ae:	e7 95       	ror	r30
    30b0:	9f 5f       	subi	r25, 0xFF	; 255
    30b2:	c1 f7       	brne	.-16     	; 0x30a4 <__mulsf3_pse+0x90>
    30b4:	fe 2b       	or	r31, r30
    30b6:	88 0f       	add	r24, r24
    30b8:	91 1d       	adc	r25, r1
    30ba:	96 95       	lsr	r25
    30bc:	87 95       	ror	r24
    30be:	97 f9       	bld	r25, 7
    30c0:	08 95       	ret

000030c2 <vfprintf>:
    30c2:	a0 e1       	ldi	r26, 0x10	; 16
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e7 e6       	ldi	r30, 0x67	; 103
    30c8:	f8 e1       	ldi	r31, 0x18	; 24
    30ca:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__prologue_saves__>
    30ce:	7c 01       	movw	r14, r24
    30d0:	1b 01       	movw	r2, r22
    30d2:	6a 01       	movw	r12, r20
    30d4:	fc 01       	movw	r30, r24
    30d6:	16 82       	std	Z+6, r1	; 0x06
    30d8:	17 82       	std	Z+7, r1	; 0x07
    30da:	83 81       	ldd	r24, Z+3	; 0x03
    30dc:	81 ff       	sbrs	r24, 1
    30de:	44 c3       	rjmp	.+1672   	; 0x3768 <vfprintf+0x6a6>
    30e0:	9e 01       	movw	r18, r28
    30e2:	2f 5f       	subi	r18, 0xFF	; 255
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	39 01       	movw	r6, r18
    30e8:	f7 01       	movw	r30, r14
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	f1 01       	movw	r30, r2
    30ee:	93 fd       	sbrc	r25, 3
    30f0:	85 91       	lpm	r24, Z+
    30f2:	93 ff       	sbrs	r25, 3
    30f4:	81 91       	ld	r24, Z+
    30f6:	1f 01       	movw	r2, r30
    30f8:	88 23       	and	r24, r24
    30fa:	09 f4       	brne	.+2      	; 0x30fe <vfprintf+0x3c>
    30fc:	31 c3       	rjmp	.+1634   	; 0x3760 <vfprintf+0x69e>
    30fe:	85 32       	cpi	r24, 0x25	; 37
    3100:	39 f4       	brne	.+14     	; 0x3110 <vfprintf+0x4e>
    3102:	93 fd       	sbrc	r25, 3
    3104:	85 91       	lpm	r24, Z+
    3106:	93 ff       	sbrs	r25, 3
    3108:	81 91       	ld	r24, Z+
    310a:	1f 01       	movw	r2, r30
    310c:	85 32       	cpi	r24, 0x25	; 37
    310e:	39 f4       	brne	.+14     	; 0x311e <vfprintf+0x5c>
    3110:	b7 01       	movw	r22, r14
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3118:	56 01       	movw	r10, r12
    311a:	65 01       	movw	r12, r10
    311c:	e5 cf       	rjmp	.-54     	; 0x30e8 <vfprintf+0x26>
    311e:	10 e0       	ldi	r17, 0x00	; 0
    3120:	51 2c       	mov	r5, r1
    3122:	91 2c       	mov	r9, r1
    3124:	ff e1       	ldi	r31, 0x1F	; 31
    3126:	f9 15       	cp	r31, r9
    3128:	d8 f0       	brcs	.+54     	; 0x3160 <vfprintf+0x9e>
    312a:	8b 32       	cpi	r24, 0x2B	; 43
    312c:	79 f0       	breq	.+30     	; 0x314c <vfprintf+0x8a>
    312e:	38 f4       	brcc	.+14     	; 0x313e <vfprintf+0x7c>
    3130:	80 32       	cpi	r24, 0x20	; 32
    3132:	79 f0       	breq	.+30     	; 0x3152 <vfprintf+0x90>
    3134:	83 32       	cpi	r24, 0x23	; 35
    3136:	a1 f4       	brne	.+40     	; 0x3160 <vfprintf+0x9e>
    3138:	f9 2d       	mov	r31, r9
    313a:	f0 61       	ori	r31, 0x10	; 16
    313c:	2e c0       	rjmp	.+92     	; 0x319a <vfprintf+0xd8>
    313e:	8d 32       	cpi	r24, 0x2D	; 45
    3140:	61 f0       	breq	.+24     	; 0x315a <vfprintf+0x98>
    3142:	80 33       	cpi	r24, 0x30	; 48
    3144:	69 f4       	brne	.+26     	; 0x3160 <vfprintf+0x9e>
    3146:	29 2d       	mov	r18, r9
    3148:	21 60       	ori	r18, 0x01	; 1
    314a:	2d c0       	rjmp	.+90     	; 0x31a6 <vfprintf+0xe4>
    314c:	39 2d       	mov	r19, r9
    314e:	32 60       	ori	r19, 0x02	; 2
    3150:	93 2e       	mov	r9, r19
    3152:	89 2d       	mov	r24, r9
    3154:	84 60       	ori	r24, 0x04	; 4
    3156:	98 2e       	mov	r9, r24
    3158:	2a c0       	rjmp	.+84     	; 0x31ae <vfprintf+0xec>
    315a:	e9 2d       	mov	r30, r9
    315c:	e8 60       	ori	r30, 0x08	; 8
    315e:	15 c0       	rjmp	.+42     	; 0x318a <vfprintf+0xc8>
    3160:	97 fc       	sbrc	r9, 7
    3162:	2d c0       	rjmp	.+90     	; 0x31be <vfprintf+0xfc>
    3164:	20 ed       	ldi	r18, 0xD0	; 208
    3166:	28 0f       	add	r18, r24
    3168:	2a 30       	cpi	r18, 0x0A	; 10
    316a:	88 f4       	brcc	.+34     	; 0x318e <vfprintf+0xcc>
    316c:	96 fe       	sbrs	r9, 6
    316e:	06 c0       	rjmp	.+12     	; 0x317c <vfprintf+0xba>
    3170:	3a e0       	ldi	r19, 0x0A	; 10
    3172:	13 9f       	mul	r17, r19
    3174:	20 0d       	add	r18, r0
    3176:	11 24       	eor	r1, r1
    3178:	12 2f       	mov	r17, r18
    317a:	19 c0       	rjmp	.+50     	; 0x31ae <vfprintf+0xec>
    317c:	8a e0       	ldi	r24, 0x0A	; 10
    317e:	58 9e       	mul	r5, r24
    3180:	20 0d       	add	r18, r0
    3182:	11 24       	eor	r1, r1
    3184:	52 2e       	mov	r5, r18
    3186:	e9 2d       	mov	r30, r9
    3188:	e0 62       	ori	r30, 0x20	; 32
    318a:	9e 2e       	mov	r9, r30
    318c:	10 c0       	rjmp	.+32     	; 0x31ae <vfprintf+0xec>
    318e:	8e 32       	cpi	r24, 0x2E	; 46
    3190:	31 f4       	brne	.+12     	; 0x319e <vfprintf+0xdc>
    3192:	96 fc       	sbrc	r9, 6
    3194:	e5 c2       	rjmp	.+1482   	; 0x3760 <vfprintf+0x69e>
    3196:	f9 2d       	mov	r31, r9
    3198:	f0 64       	ori	r31, 0x40	; 64
    319a:	9f 2e       	mov	r9, r31
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <vfprintf+0xec>
    319e:	8c 36       	cpi	r24, 0x6C	; 108
    31a0:	21 f4       	brne	.+8      	; 0x31aa <vfprintf+0xe8>
    31a2:	29 2d       	mov	r18, r9
    31a4:	20 68       	ori	r18, 0x80	; 128
    31a6:	92 2e       	mov	r9, r18
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <vfprintf+0xec>
    31aa:	88 36       	cpi	r24, 0x68	; 104
    31ac:	41 f4       	brne	.+16     	; 0x31be <vfprintf+0xfc>
    31ae:	f1 01       	movw	r30, r2
    31b0:	93 fd       	sbrc	r25, 3
    31b2:	85 91       	lpm	r24, Z+
    31b4:	93 ff       	sbrs	r25, 3
    31b6:	81 91       	ld	r24, Z+
    31b8:	1f 01       	movw	r2, r30
    31ba:	81 11       	cpse	r24, r1
    31bc:	b3 cf       	rjmp	.-154    	; 0x3124 <vfprintf+0x62>
    31be:	9b eb       	ldi	r25, 0xBB	; 187
    31c0:	98 0f       	add	r25, r24
    31c2:	93 30       	cpi	r25, 0x03	; 3
    31c4:	20 f4       	brcc	.+8      	; 0x31ce <vfprintf+0x10c>
    31c6:	99 2d       	mov	r25, r9
    31c8:	90 61       	ori	r25, 0x10	; 16
    31ca:	80 5e       	subi	r24, 0xE0	; 224
    31cc:	07 c0       	rjmp	.+14     	; 0x31dc <vfprintf+0x11a>
    31ce:	9b e9       	ldi	r25, 0x9B	; 155
    31d0:	98 0f       	add	r25, r24
    31d2:	93 30       	cpi	r25, 0x03	; 3
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <vfprintf+0x116>
    31d6:	66 c1       	rjmp	.+716    	; 0x34a4 <vfprintf+0x3e2>
    31d8:	99 2d       	mov	r25, r9
    31da:	9f 7e       	andi	r25, 0xEF	; 239
    31dc:	96 ff       	sbrs	r25, 6
    31de:	16 e0       	ldi	r17, 0x06	; 6
    31e0:	9f 73       	andi	r25, 0x3F	; 63
    31e2:	99 2e       	mov	r9, r25
    31e4:	85 36       	cpi	r24, 0x65	; 101
    31e6:	19 f4       	brne	.+6      	; 0x31ee <vfprintf+0x12c>
    31e8:	90 64       	ori	r25, 0x40	; 64
    31ea:	99 2e       	mov	r9, r25
    31ec:	08 c0       	rjmp	.+16     	; 0x31fe <vfprintf+0x13c>
    31ee:	86 36       	cpi	r24, 0x66	; 102
    31f0:	21 f4       	brne	.+8      	; 0x31fa <vfprintf+0x138>
    31f2:	39 2f       	mov	r19, r25
    31f4:	30 68       	ori	r19, 0x80	; 128
    31f6:	93 2e       	mov	r9, r19
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <vfprintf+0x13c>
    31fa:	11 11       	cpse	r17, r1
    31fc:	11 50       	subi	r17, 0x01	; 1
    31fe:	97 fe       	sbrs	r9, 7
    3200:	07 c0       	rjmp	.+14     	; 0x3210 <vfprintf+0x14e>
    3202:	1c 33       	cpi	r17, 0x3C	; 60
    3204:	50 f4       	brcc	.+20     	; 0x321a <vfprintf+0x158>
    3206:	44 24       	eor	r4, r4
    3208:	43 94       	inc	r4
    320a:	41 0e       	add	r4, r17
    320c:	27 e0       	ldi	r18, 0x07	; 7
    320e:	0b c0       	rjmp	.+22     	; 0x3226 <vfprintf+0x164>
    3210:	18 30       	cpi	r17, 0x08	; 8
    3212:	38 f0       	brcs	.+14     	; 0x3222 <vfprintf+0x160>
    3214:	27 e0       	ldi	r18, 0x07	; 7
    3216:	17 e0       	ldi	r17, 0x07	; 7
    3218:	05 c0       	rjmp	.+10     	; 0x3224 <vfprintf+0x162>
    321a:	27 e0       	ldi	r18, 0x07	; 7
    321c:	9c e3       	ldi	r25, 0x3C	; 60
    321e:	49 2e       	mov	r4, r25
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <vfprintf+0x164>
    3222:	21 2f       	mov	r18, r17
    3224:	41 2c       	mov	r4, r1
    3226:	56 01       	movw	r10, r12
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	a8 0e       	add	r10, r24
    322c:	b1 1c       	adc	r11, r1
    322e:	f6 01       	movw	r30, r12
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	04 2d       	mov	r16, r4
    323a:	a3 01       	movw	r20, r6
    323c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__ftoa_engine>
    3240:	6c 01       	movw	r12, r24
    3242:	f9 81       	ldd	r31, Y+1	; 0x01
    3244:	fc 87       	std	Y+12, r31	; 0x0c
    3246:	f0 ff       	sbrs	r31, 0
    3248:	02 c0       	rjmp	.+4      	; 0x324e <vfprintf+0x18c>
    324a:	f3 ff       	sbrs	r31, 3
    324c:	06 c0       	rjmp	.+12     	; 0x325a <vfprintf+0x198>
    324e:	91 fc       	sbrc	r9, 1
    3250:	06 c0       	rjmp	.+12     	; 0x325e <vfprintf+0x19c>
    3252:	92 fe       	sbrs	r9, 2
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <vfprintf+0x1a0>
    3256:	00 e2       	ldi	r16, 0x20	; 32
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <vfprintf+0x1a2>
    325a:	0d e2       	ldi	r16, 0x2D	; 45
    325c:	03 c0       	rjmp	.+6      	; 0x3264 <vfprintf+0x1a2>
    325e:	0b e2       	ldi	r16, 0x2B	; 43
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <vfprintf+0x1a2>
    3262:	00 e0       	ldi	r16, 0x00	; 0
    3264:	8c 85       	ldd	r24, Y+12	; 0x0c
    3266:	8c 70       	andi	r24, 0x0C	; 12
    3268:	19 f0       	breq	.+6      	; 0x3270 <vfprintf+0x1ae>
    326a:	01 11       	cpse	r16, r1
    326c:	5a c2       	rjmp	.+1204   	; 0x3722 <vfprintf+0x660>
    326e:	9b c2       	rjmp	.+1334   	; 0x37a6 <vfprintf+0x6e4>
    3270:	97 fe       	sbrs	r9, 7
    3272:	10 c0       	rjmp	.+32     	; 0x3294 <vfprintf+0x1d2>
    3274:	4c 0c       	add	r4, r12
    3276:	fc 85       	ldd	r31, Y+12	; 0x0c
    3278:	f4 ff       	sbrs	r31, 4
    327a:	04 c0       	rjmp	.+8      	; 0x3284 <vfprintf+0x1c2>
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	81 33       	cpi	r24, 0x31	; 49
    3280:	09 f4       	brne	.+2      	; 0x3284 <vfprintf+0x1c2>
    3282:	4a 94       	dec	r4
    3284:	14 14       	cp	r1, r4
    3286:	74 f5       	brge	.+92     	; 0x32e4 <vfprintf+0x222>
    3288:	28 e0       	ldi	r18, 0x08	; 8
    328a:	24 15       	cp	r18, r4
    328c:	78 f5       	brcc	.+94     	; 0x32ec <vfprintf+0x22a>
    328e:	88 e0       	ldi	r24, 0x08	; 8
    3290:	48 2e       	mov	r4, r24
    3292:	2c c0       	rjmp	.+88     	; 0x32ec <vfprintf+0x22a>
    3294:	96 fc       	sbrc	r9, 6
    3296:	2a c0       	rjmp	.+84     	; 0x32ec <vfprintf+0x22a>
    3298:	81 2f       	mov	r24, r17
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	8c 15       	cp	r24, r12
    329e:	9d 05       	cpc	r25, r13
    32a0:	9c f0       	brlt	.+38     	; 0x32c8 <vfprintf+0x206>
    32a2:	3c ef       	ldi	r19, 0xFC	; 252
    32a4:	c3 16       	cp	r12, r19
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	d3 06       	cpc	r13, r19
    32aa:	74 f0       	brlt	.+28     	; 0x32c8 <vfprintf+0x206>
    32ac:	89 2d       	mov	r24, r9
    32ae:	80 68       	ori	r24, 0x80	; 128
    32b0:	98 2e       	mov	r9, r24
    32b2:	0a c0       	rjmp	.+20     	; 0x32c8 <vfprintf+0x206>
    32b4:	e2 e0       	ldi	r30, 0x02	; 2
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	ec 0f       	add	r30, r28
    32ba:	fd 1f       	adc	r31, r29
    32bc:	e1 0f       	add	r30, r17
    32be:	f1 1d       	adc	r31, r1
    32c0:	80 81       	ld	r24, Z
    32c2:	80 33       	cpi	r24, 0x30	; 48
    32c4:	19 f4       	brne	.+6      	; 0x32cc <vfprintf+0x20a>
    32c6:	11 50       	subi	r17, 0x01	; 1
    32c8:	11 11       	cpse	r17, r1
    32ca:	f4 cf       	rjmp	.-24     	; 0x32b4 <vfprintf+0x1f2>
    32cc:	97 fe       	sbrs	r9, 7
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <vfprintf+0x22a>
    32d0:	44 24       	eor	r4, r4
    32d2:	43 94       	inc	r4
    32d4:	41 0e       	add	r4, r17
    32d6:	81 2f       	mov	r24, r17
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	c8 16       	cp	r12, r24
    32dc:	d9 06       	cpc	r13, r25
    32de:	2c f4       	brge	.+10     	; 0x32ea <vfprintf+0x228>
    32e0:	1c 19       	sub	r17, r12
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <vfprintf+0x22a>
    32e4:	44 24       	eor	r4, r4
    32e6:	43 94       	inc	r4
    32e8:	01 c0       	rjmp	.+2      	; 0x32ec <vfprintf+0x22a>
    32ea:	10 e0       	ldi	r17, 0x00	; 0
    32ec:	97 fe       	sbrs	r9, 7
    32ee:	06 c0       	rjmp	.+12     	; 0x32fc <vfprintf+0x23a>
    32f0:	1c 14       	cp	r1, r12
    32f2:	1d 04       	cpc	r1, r13
    32f4:	34 f4       	brge	.+12     	; 0x3302 <vfprintf+0x240>
    32f6:	c6 01       	movw	r24, r12
    32f8:	01 96       	adiw	r24, 0x01	; 1
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <vfprintf+0x244>
    32fc:	85 e0       	ldi	r24, 0x05	; 5
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <vfprintf+0x244>
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	01 11       	cpse	r16, r1
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	11 23       	and	r17, r17
    330c:	31 f0       	breq	.+12     	; 0x331a <vfprintf+0x258>
    330e:	21 2f       	mov	r18, r17
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	2f 5f       	subi	r18, 0xFF	; 255
    3314:	3f 4f       	sbci	r19, 0xFF	; 255
    3316:	82 0f       	add	r24, r18
    3318:	93 1f       	adc	r25, r19
    331a:	25 2d       	mov	r18, r5
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	82 17       	cp	r24, r18
    3320:	93 07       	cpc	r25, r19
    3322:	14 f4       	brge	.+4      	; 0x3328 <vfprintf+0x266>
    3324:	58 1a       	sub	r5, r24
    3326:	01 c0       	rjmp	.+2      	; 0x332a <vfprintf+0x268>
    3328:	51 2c       	mov	r5, r1
    332a:	89 2d       	mov	r24, r9
    332c:	89 70       	andi	r24, 0x09	; 9
    332e:	49 f4       	brne	.+18     	; 0x3342 <vfprintf+0x280>
    3330:	55 20       	and	r5, r5
    3332:	39 f0       	breq	.+14     	; 0x3342 <vfprintf+0x280>
    3334:	b7 01       	movw	r22, r14
    3336:	80 e2       	ldi	r24, 0x20	; 32
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    333e:	5a 94       	dec	r5
    3340:	f7 cf       	rjmp	.-18     	; 0x3330 <vfprintf+0x26e>
    3342:	00 23       	and	r16, r16
    3344:	29 f0       	breq	.+10     	; 0x3350 <vfprintf+0x28e>
    3346:	b7 01       	movw	r22, r14
    3348:	80 2f       	mov	r24, r16
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3350:	93 fc       	sbrc	r9, 3
    3352:	09 c0       	rjmp	.+18     	; 0x3366 <vfprintf+0x2a4>
    3354:	55 20       	and	r5, r5
    3356:	39 f0       	breq	.+14     	; 0x3366 <vfprintf+0x2a4>
    3358:	b7 01       	movw	r22, r14
    335a:	80 e3       	ldi	r24, 0x30	; 48
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3362:	5a 94       	dec	r5
    3364:	f7 cf       	rjmp	.-18     	; 0x3354 <vfprintf+0x292>
    3366:	97 fe       	sbrs	r9, 7
    3368:	4c c0       	rjmp	.+152    	; 0x3402 <vfprintf+0x340>
    336a:	46 01       	movw	r8, r12
    336c:	d7 fe       	sbrs	r13, 7
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <vfprintf+0x2b2>
    3370:	81 2c       	mov	r8, r1
    3372:	91 2c       	mov	r9, r1
    3374:	c6 01       	movw	r24, r12
    3376:	88 19       	sub	r24, r8
    3378:	99 09       	sbc	r25, r9
    337a:	f3 01       	movw	r30, r6
    337c:	e8 0f       	add	r30, r24
    337e:	f9 1f       	adc	r31, r25
    3380:	ed 87       	std	Y+13, r30	; 0x0d
    3382:	fe 87       	std	Y+14, r31	; 0x0e
    3384:	96 01       	movw	r18, r12
    3386:	24 19       	sub	r18, r4
    3388:	31 09       	sbc	r19, r1
    338a:	2f 87       	std	Y+15, r18	; 0x0f
    338c:	38 8b       	std	Y+16, r19	; 0x10
    338e:	01 2f       	mov	r16, r17
    3390:	10 e0       	ldi	r17, 0x00	; 0
    3392:	11 95       	neg	r17
    3394:	01 95       	neg	r16
    3396:	11 09       	sbc	r17, r1
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	83 16       	cp	r8, r19
    339c:	93 06       	cpc	r9, r19
    339e:	29 f4       	brne	.+10     	; 0x33aa <vfprintf+0x2e8>
    33a0:	b7 01       	movw	r22, r14
    33a2:	8e e2       	ldi	r24, 0x2E	; 46
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    33aa:	c8 14       	cp	r12, r8
    33ac:	d9 04       	cpc	r13, r9
    33ae:	4c f0       	brlt	.+18     	; 0x33c2 <vfprintf+0x300>
    33b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b2:	98 89       	ldd	r25, Y+16	; 0x10
    33b4:	88 15       	cp	r24, r8
    33b6:	99 05       	cpc	r25, r9
    33b8:	24 f4       	brge	.+8      	; 0x33c2 <vfprintf+0x300>
    33ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    33bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    33be:	81 81       	ldd	r24, Z+1	; 0x01
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <vfprintf+0x302>
    33c2:	80 e3       	ldi	r24, 0x30	; 48
    33c4:	f1 e0       	ldi	r31, 0x01	; 1
    33c6:	8f 1a       	sub	r8, r31
    33c8:	91 08       	sbc	r9, r1
    33ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    33cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    33ce:	2f 5f       	subi	r18, 0xFF	; 255
    33d0:	3f 4f       	sbci	r19, 0xFF	; 255
    33d2:	2d 87       	std	Y+13, r18	; 0x0d
    33d4:	3e 87       	std	Y+14, r19	; 0x0e
    33d6:	80 16       	cp	r8, r16
    33d8:	91 06       	cpc	r9, r17
    33da:	2c f0       	brlt	.+10     	; 0x33e6 <vfprintf+0x324>
    33dc:	b7 01       	movw	r22, r14
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    33e4:	d9 cf       	rjmp	.-78     	; 0x3398 <vfprintf+0x2d6>
    33e6:	c8 14       	cp	r12, r8
    33e8:	d9 04       	cpc	r13, r9
    33ea:	41 f4       	brne	.+16     	; 0x33fc <vfprintf+0x33a>
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	96 33       	cpi	r25, 0x36	; 54
    33f0:	20 f4       	brcc	.+8      	; 0x33fa <vfprintf+0x338>
    33f2:	95 33       	cpi	r25, 0x35	; 53
    33f4:	19 f4       	brne	.+6      	; 0x33fc <vfprintf+0x33a>
    33f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    33f8:	34 ff       	sbrs	r19, 4
    33fa:	81 e3       	ldi	r24, 0x31	; 49
    33fc:	b7 01       	movw	r22, r14
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	4e c0       	rjmp	.+156    	; 0x349e <vfprintf+0x3dc>
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	81 33       	cpi	r24, 0x31	; 49
    3406:	19 f0       	breq	.+6      	; 0x340e <vfprintf+0x34c>
    3408:	9c 85       	ldd	r25, Y+12	; 0x0c
    340a:	9f 7e       	andi	r25, 0xEF	; 239
    340c:	9c 87       	std	Y+12, r25	; 0x0c
    340e:	b7 01       	movw	r22, r14
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3416:	11 11       	cpse	r17, r1
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <vfprintf+0x362>
    341a:	94 fc       	sbrc	r9, 4
    341c:	18 c0       	rjmp	.+48     	; 0x344e <vfprintf+0x38c>
    341e:	85 e6       	ldi	r24, 0x65	; 101
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	17 c0       	rjmp	.+46     	; 0x3452 <vfprintf+0x390>
    3424:	b7 01       	movw	r22, r14
    3426:	8e e2       	ldi	r24, 0x2E	; 46
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    342e:	1e 5f       	subi	r17, 0xFE	; 254
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	01 e0       	ldi	r16, 0x01	; 1
    3434:	08 0f       	add	r16, r24
    3436:	f3 01       	movw	r30, r6
    3438:	e8 0f       	add	r30, r24
    343a:	f1 1d       	adc	r31, r1
    343c:	80 81       	ld	r24, Z
    343e:	b7 01       	movw	r22, r14
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3446:	80 2f       	mov	r24, r16
    3448:	01 13       	cpse	r16, r17
    344a:	f3 cf       	rjmp	.-26     	; 0x3432 <vfprintf+0x370>
    344c:	e6 cf       	rjmp	.-52     	; 0x341a <vfprintf+0x358>
    344e:	85 e4       	ldi	r24, 0x45	; 69
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	b7 01       	movw	r22, r14
    3454:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3458:	d7 fc       	sbrc	r13, 7
    345a:	06 c0       	rjmp	.+12     	; 0x3468 <vfprintf+0x3a6>
    345c:	c1 14       	cp	r12, r1
    345e:	d1 04       	cpc	r13, r1
    3460:	41 f4       	brne	.+16     	; 0x3472 <vfprintf+0x3b0>
    3462:	ec 85       	ldd	r30, Y+12	; 0x0c
    3464:	e4 ff       	sbrs	r30, 4
    3466:	05 c0       	rjmp	.+10     	; 0x3472 <vfprintf+0x3b0>
    3468:	d1 94       	neg	r13
    346a:	c1 94       	neg	r12
    346c:	d1 08       	sbc	r13, r1
    346e:	8d e2       	ldi	r24, 0x2D	; 45
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <vfprintf+0x3b2>
    3472:	8b e2       	ldi	r24, 0x2B	; 43
    3474:	b7 01       	movw	r22, r14
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    347c:	80 e3       	ldi	r24, 0x30	; 48
    347e:	2a e0       	ldi	r18, 0x0A	; 10
    3480:	c2 16       	cp	r12, r18
    3482:	d1 04       	cpc	r13, r1
    3484:	2c f0       	brlt	.+10     	; 0x3490 <vfprintf+0x3ce>
    3486:	8f 5f       	subi	r24, 0xFF	; 255
    3488:	fa e0       	ldi	r31, 0x0A	; 10
    348a:	cf 1a       	sub	r12, r31
    348c:	d1 08       	sbc	r13, r1
    348e:	f7 cf       	rjmp	.-18     	; 0x347e <vfprintf+0x3bc>
    3490:	b7 01       	movw	r22, r14
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3498:	b7 01       	movw	r22, r14
    349a:	c6 01       	movw	r24, r12
    349c:	c0 96       	adiw	r24, 0x30	; 48
    349e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    34a2:	54 c1       	rjmp	.+680    	; 0x374c <vfprintf+0x68a>
    34a4:	83 36       	cpi	r24, 0x63	; 99
    34a6:	31 f0       	breq	.+12     	; 0x34b4 <vfprintf+0x3f2>
    34a8:	83 37       	cpi	r24, 0x73	; 115
    34aa:	79 f0       	breq	.+30     	; 0x34ca <vfprintf+0x408>
    34ac:	83 35       	cpi	r24, 0x53	; 83
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <vfprintf+0x3f0>
    34b0:	56 c0       	rjmp	.+172    	; 0x355e <vfprintf+0x49c>
    34b2:	20 c0       	rjmp	.+64     	; 0x34f4 <vfprintf+0x432>
    34b4:	56 01       	movw	r10, r12
    34b6:	32 e0       	ldi	r19, 0x02	; 2
    34b8:	a3 0e       	add	r10, r19
    34ba:	b1 1c       	adc	r11, r1
    34bc:	f6 01       	movw	r30, r12
    34be:	80 81       	ld	r24, Z
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	01 e0       	ldi	r16, 0x01	; 1
    34c4:	10 e0       	ldi	r17, 0x00	; 0
    34c6:	63 01       	movw	r12, r6
    34c8:	12 c0       	rjmp	.+36     	; 0x34ee <vfprintf+0x42c>
    34ca:	56 01       	movw	r10, r12
    34cc:	f2 e0       	ldi	r31, 0x02	; 2
    34ce:	af 0e       	add	r10, r31
    34d0:	b1 1c       	adc	r11, r1
    34d2:	f6 01       	movw	r30, r12
    34d4:	c0 80       	ld	r12, Z
    34d6:	d1 80       	ldd	r13, Z+1	; 0x01
    34d8:	96 fe       	sbrs	r9, 6
    34da:	03 c0       	rjmp	.+6      	; 0x34e2 <vfprintf+0x420>
    34dc:	61 2f       	mov	r22, r17
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <vfprintf+0x424>
    34e2:	6f ef       	ldi	r22, 0xFF	; 255
    34e4:	7f ef       	ldi	r23, 0xFF	; 255
    34e6:	c6 01       	movw	r24, r12
    34e8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <strnlen>
    34ec:	8c 01       	movw	r16, r24
    34ee:	f9 2d       	mov	r31, r9
    34f0:	ff 77       	andi	r31, 0x7F	; 127
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <vfprintf+0x45a>
    34f4:	56 01       	movw	r10, r12
    34f6:	22 e0       	ldi	r18, 0x02	; 2
    34f8:	a2 0e       	add	r10, r18
    34fa:	b1 1c       	adc	r11, r1
    34fc:	f6 01       	movw	r30, r12
    34fe:	c0 80       	ld	r12, Z
    3500:	d1 80       	ldd	r13, Z+1	; 0x01
    3502:	96 fe       	sbrs	r9, 6
    3504:	03 c0       	rjmp	.+6      	; 0x350c <vfprintf+0x44a>
    3506:	61 2f       	mov	r22, r17
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <vfprintf+0x44e>
    350c:	6f ef       	ldi	r22, 0xFF	; 255
    350e:	7f ef       	ldi	r23, 0xFF	; 255
    3510:	c6 01       	movw	r24, r12
    3512:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <strnlen_P>
    3516:	8c 01       	movw	r16, r24
    3518:	f9 2d       	mov	r31, r9
    351a:	f0 68       	ori	r31, 0x80	; 128
    351c:	9f 2e       	mov	r9, r31
    351e:	f3 fd       	sbrc	r31, 3
    3520:	1a c0       	rjmp	.+52     	; 0x3556 <vfprintf+0x494>
    3522:	85 2d       	mov	r24, r5
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	08 17       	cp	r16, r24
    3528:	19 07       	cpc	r17, r25
    352a:	a8 f4       	brcc	.+42     	; 0x3556 <vfprintf+0x494>
    352c:	b7 01       	movw	r22, r14
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3536:	5a 94       	dec	r5
    3538:	f4 cf       	rjmp	.-24     	; 0x3522 <vfprintf+0x460>
    353a:	f6 01       	movw	r30, r12
    353c:	97 fc       	sbrc	r9, 7
    353e:	85 91       	lpm	r24, Z+
    3540:	97 fe       	sbrs	r9, 7
    3542:	81 91       	ld	r24, Z+
    3544:	6f 01       	movw	r12, r30
    3546:	b7 01       	movw	r22, r14
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    354e:	51 10       	cpse	r5, r1
    3550:	5a 94       	dec	r5
    3552:	01 50       	subi	r16, 0x01	; 1
    3554:	11 09       	sbc	r17, r1
    3556:	01 15       	cp	r16, r1
    3558:	11 05       	cpc	r17, r1
    355a:	79 f7       	brne	.-34     	; 0x353a <vfprintf+0x478>
    355c:	f7 c0       	rjmp	.+494    	; 0x374c <vfprintf+0x68a>
    355e:	84 36       	cpi	r24, 0x64	; 100
    3560:	11 f0       	breq	.+4      	; 0x3566 <vfprintf+0x4a4>
    3562:	89 36       	cpi	r24, 0x69	; 105
    3564:	61 f5       	brne	.+88     	; 0x35be <vfprintf+0x4fc>
    3566:	56 01       	movw	r10, r12
    3568:	97 fe       	sbrs	r9, 7
    356a:	09 c0       	rjmp	.+18     	; 0x357e <vfprintf+0x4bc>
    356c:	24 e0       	ldi	r18, 0x04	; 4
    356e:	a2 0e       	add	r10, r18
    3570:	b1 1c       	adc	r11, r1
    3572:	f6 01       	movw	r30, r12
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	0a c0       	rjmp	.+20     	; 0x3592 <vfprintf+0x4d0>
    357e:	f2 e0       	ldi	r31, 0x02	; 2
    3580:	af 0e       	add	r10, r31
    3582:	b1 1c       	adc	r11, r1
    3584:	f6 01       	movw	r30, r12
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	07 2e       	mov	r0, r23
    358c:	00 0c       	add	r0, r0
    358e:	88 0b       	sbc	r24, r24
    3590:	99 0b       	sbc	r25, r25
    3592:	f9 2d       	mov	r31, r9
    3594:	ff 76       	andi	r31, 0x6F	; 111
    3596:	9f 2e       	mov	r9, r31
    3598:	97 ff       	sbrs	r25, 7
    359a:	09 c0       	rjmp	.+18     	; 0x35ae <vfprintf+0x4ec>
    359c:	90 95       	com	r25
    359e:	80 95       	com	r24
    35a0:	70 95       	com	r23
    35a2:	61 95       	neg	r22
    35a4:	7f 4f       	sbci	r23, 0xFF	; 255
    35a6:	8f 4f       	sbci	r24, 0xFF	; 255
    35a8:	9f 4f       	sbci	r25, 0xFF	; 255
    35aa:	f0 68       	ori	r31, 0x80	; 128
    35ac:	9f 2e       	mov	r9, r31
    35ae:	2a e0       	ldi	r18, 0x0A	; 10
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	a3 01       	movw	r20, r6
    35b4:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__ultoa_invert>
    35b8:	c8 2e       	mov	r12, r24
    35ba:	c6 18       	sub	r12, r6
    35bc:	3f c0       	rjmp	.+126    	; 0x363c <vfprintf+0x57a>
    35be:	09 2d       	mov	r16, r9
    35c0:	85 37       	cpi	r24, 0x75	; 117
    35c2:	21 f4       	brne	.+8      	; 0x35cc <vfprintf+0x50a>
    35c4:	0f 7e       	andi	r16, 0xEF	; 239
    35c6:	2a e0       	ldi	r18, 0x0A	; 10
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	1d c0       	rjmp	.+58     	; 0x3606 <vfprintf+0x544>
    35cc:	09 7f       	andi	r16, 0xF9	; 249
    35ce:	8f 36       	cpi	r24, 0x6F	; 111
    35d0:	91 f0       	breq	.+36     	; 0x35f6 <vfprintf+0x534>
    35d2:	18 f4       	brcc	.+6      	; 0x35da <vfprintf+0x518>
    35d4:	88 35       	cpi	r24, 0x58	; 88
    35d6:	59 f0       	breq	.+22     	; 0x35ee <vfprintf+0x52c>
    35d8:	c3 c0       	rjmp	.+390    	; 0x3760 <vfprintf+0x69e>
    35da:	80 37       	cpi	r24, 0x70	; 112
    35dc:	19 f0       	breq	.+6      	; 0x35e4 <vfprintf+0x522>
    35de:	88 37       	cpi	r24, 0x78	; 120
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <vfprintf+0x524>
    35e2:	be c0       	rjmp	.+380    	; 0x3760 <vfprintf+0x69e>
    35e4:	00 61       	ori	r16, 0x10	; 16
    35e6:	04 ff       	sbrs	r16, 4
    35e8:	09 c0       	rjmp	.+18     	; 0x35fc <vfprintf+0x53a>
    35ea:	04 60       	ori	r16, 0x04	; 4
    35ec:	07 c0       	rjmp	.+14     	; 0x35fc <vfprintf+0x53a>
    35ee:	94 fe       	sbrs	r9, 4
    35f0:	08 c0       	rjmp	.+16     	; 0x3602 <vfprintf+0x540>
    35f2:	06 60       	ori	r16, 0x06	; 6
    35f4:	06 c0       	rjmp	.+12     	; 0x3602 <vfprintf+0x540>
    35f6:	28 e0       	ldi	r18, 0x08	; 8
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <vfprintf+0x544>
    35fc:	20 e1       	ldi	r18, 0x10	; 16
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	02 c0       	rjmp	.+4      	; 0x3606 <vfprintf+0x544>
    3602:	20 e1       	ldi	r18, 0x10	; 16
    3604:	32 e0       	ldi	r19, 0x02	; 2
    3606:	56 01       	movw	r10, r12
    3608:	07 ff       	sbrs	r16, 7
    360a:	09 c0       	rjmp	.+18     	; 0x361e <vfprintf+0x55c>
    360c:	84 e0       	ldi	r24, 0x04	; 4
    360e:	a8 0e       	add	r10, r24
    3610:	b1 1c       	adc	r11, r1
    3612:	f6 01       	movw	r30, r12
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	08 c0       	rjmp	.+16     	; 0x362e <vfprintf+0x56c>
    361e:	f2 e0       	ldi	r31, 0x02	; 2
    3620:	af 0e       	add	r10, r31
    3622:	b1 1c       	adc	r11, r1
    3624:	f6 01       	movw	r30, r12
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a3 01       	movw	r20, r6
    3630:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__ultoa_invert>
    3634:	c8 2e       	mov	r12, r24
    3636:	c6 18       	sub	r12, r6
    3638:	0f 77       	andi	r16, 0x7F	; 127
    363a:	90 2e       	mov	r9, r16
    363c:	96 fe       	sbrs	r9, 6
    363e:	0b c0       	rjmp	.+22     	; 0x3656 <vfprintf+0x594>
    3640:	09 2d       	mov	r16, r9
    3642:	0e 7f       	andi	r16, 0xFE	; 254
    3644:	c1 16       	cp	r12, r17
    3646:	50 f4       	brcc	.+20     	; 0x365c <vfprintf+0x59a>
    3648:	94 fe       	sbrs	r9, 4
    364a:	0a c0       	rjmp	.+20     	; 0x3660 <vfprintf+0x59e>
    364c:	92 fc       	sbrc	r9, 2
    364e:	08 c0       	rjmp	.+16     	; 0x3660 <vfprintf+0x59e>
    3650:	09 2d       	mov	r16, r9
    3652:	0e 7e       	andi	r16, 0xEE	; 238
    3654:	05 c0       	rjmp	.+10     	; 0x3660 <vfprintf+0x59e>
    3656:	dc 2c       	mov	r13, r12
    3658:	09 2d       	mov	r16, r9
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <vfprintf+0x5a0>
    365c:	dc 2c       	mov	r13, r12
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <vfprintf+0x5a0>
    3660:	d1 2e       	mov	r13, r17
    3662:	04 ff       	sbrs	r16, 4
    3664:	0d c0       	rjmp	.+26     	; 0x3680 <vfprintf+0x5be>
    3666:	fe 01       	movw	r30, r28
    3668:	ec 0d       	add	r30, r12
    366a:	f1 1d       	adc	r31, r1
    366c:	80 81       	ld	r24, Z
    366e:	80 33       	cpi	r24, 0x30	; 48
    3670:	11 f4       	brne	.+4      	; 0x3676 <vfprintf+0x5b4>
    3672:	09 7e       	andi	r16, 0xE9	; 233
    3674:	09 c0       	rjmp	.+18     	; 0x3688 <vfprintf+0x5c6>
    3676:	02 ff       	sbrs	r16, 2
    3678:	06 c0       	rjmp	.+12     	; 0x3686 <vfprintf+0x5c4>
    367a:	d3 94       	inc	r13
    367c:	d3 94       	inc	r13
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <vfprintf+0x5c6>
    3680:	80 2f       	mov	r24, r16
    3682:	86 78       	andi	r24, 0x86	; 134
    3684:	09 f0       	breq	.+2      	; 0x3688 <vfprintf+0x5c6>
    3686:	d3 94       	inc	r13
    3688:	03 fd       	sbrc	r16, 3
    368a:	11 c0       	rjmp	.+34     	; 0x36ae <vfprintf+0x5ec>
    368c:	00 ff       	sbrs	r16, 0
    368e:	06 c0       	rjmp	.+12     	; 0x369c <vfprintf+0x5da>
    3690:	1c 2d       	mov	r17, r12
    3692:	d5 14       	cp	r13, r5
    3694:	80 f4       	brcc	.+32     	; 0x36b6 <vfprintf+0x5f4>
    3696:	15 0d       	add	r17, r5
    3698:	1d 19       	sub	r17, r13
    369a:	0d c0       	rjmp	.+26     	; 0x36b6 <vfprintf+0x5f4>
    369c:	d5 14       	cp	r13, r5
    369e:	58 f4       	brcc	.+22     	; 0x36b6 <vfprintf+0x5f4>
    36a0:	b7 01       	movw	r22, r14
    36a2:	80 e2       	ldi	r24, 0x20	; 32
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    36aa:	d3 94       	inc	r13
    36ac:	f7 cf       	rjmp	.-18     	; 0x369c <vfprintf+0x5da>
    36ae:	d5 14       	cp	r13, r5
    36b0:	10 f4       	brcc	.+4      	; 0x36b6 <vfprintf+0x5f4>
    36b2:	5d 18       	sub	r5, r13
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <vfprintf+0x5f6>
    36b6:	51 2c       	mov	r5, r1
    36b8:	04 ff       	sbrs	r16, 4
    36ba:	10 c0       	rjmp	.+32     	; 0x36dc <vfprintf+0x61a>
    36bc:	b7 01       	movw	r22, r14
    36be:	80 e3       	ldi	r24, 0x30	; 48
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    36c6:	02 ff       	sbrs	r16, 2
    36c8:	17 c0       	rjmp	.+46     	; 0x36f8 <vfprintf+0x636>
    36ca:	01 fd       	sbrc	r16, 1
    36cc:	03 c0       	rjmp	.+6      	; 0x36d4 <vfprintf+0x612>
    36ce:	88 e7       	ldi	r24, 0x78	; 120
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <vfprintf+0x616>
    36d4:	88 e5       	ldi	r24, 0x58	; 88
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	b7 01       	movw	r22, r14
    36da:	0c c0       	rjmp	.+24     	; 0x36f4 <vfprintf+0x632>
    36dc:	80 2f       	mov	r24, r16
    36de:	86 78       	andi	r24, 0x86	; 134
    36e0:	59 f0       	breq	.+22     	; 0x36f8 <vfprintf+0x636>
    36e2:	01 ff       	sbrs	r16, 1
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <vfprintf+0x628>
    36e6:	8b e2       	ldi	r24, 0x2B	; 43
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <vfprintf+0x62a>
    36ea:	80 e2       	ldi	r24, 0x20	; 32
    36ec:	07 fd       	sbrc	r16, 7
    36ee:	8d e2       	ldi	r24, 0x2D	; 45
    36f0:	b7 01       	movw	r22, r14
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    36f8:	c1 16       	cp	r12, r17
    36fa:	38 f4       	brcc	.+14     	; 0x370a <vfprintf+0x648>
    36fc:	b7 01       	movw	r22, r14
    36fe:	80 e3       	ldi	r24, 0x30	; 48
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3706:	11 50       	subi	r17, 0x01	; 1
    3708:	f7 cf       	rjmp	.-18     	; 0x36f8 <vfprintf+0x636>
    370a:	ca 94       	dec	r12
    370c:	f3 01       	movw	r30, r6
    370e:	ec 0d       	add	r30, r12
    3710:	f1 1d       	adc	r31, r1
    3712:	80 81       	ld	r24, Z
    3714:	b7 01       	movw	r22, r14
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    371c:	c1 10       	cpse	r12, r1
    371e:	f5 cf       	rjmp	.-22     	; 0x370a <vfprintf+0x648>
    3720:	15 c0       	rjmp	.+42     	; 0x374c <vfprintf+0x68a>
    3722:	f4 e0       	ldi	r31, 0x04	; 4
    3724:	f5 15       	cp	r31, r5
    3726:	60 f5       	brcc	.+88     	; 0x3780 <vfprintf+0x6be>
    3728:	84 e0       	ldi	r24, 0x04	; 4
    372a:	58 1a       	sub	r5, r24
    372c:	93 fe       	sbrs	r9, 3
    372e:	1f c0       	rjmp	.+62     	; 0x376e <vfprintf+0x6ac>
    3730:	01 11       	cpse	r16, r1
    3732:	27 c0       	rjmp	.+78     	; 0x3782 <vfprintf+0x6c0>
    3734:	2c 85       	ldd	r18, Y+12	; 0x0c
    3736:	23 ff       	sbrs	r18, 3
    3738:	2a c0       	rjmp	.+84     	; 0x378e <vfprintf+0x6cc>
    373a:	06 ee       	ldi	r16, 0xE6	; 230
    373c:	10 e0       	ldi	r17, 0x00	; 0
    373e:	39 2d       	mov	r19, r9
    3740:	30 71       	andi	r19, 0x10	; 16
    3742:	93 2e       	mov	r9, r19
    3744:	f8 01       	movw	r30, r16
    3746:	84 91       	lpm	r24, Z
    3748:	81 11       	cpse	r24, r1
    374a:	24 c0       	rjmp	.+72     	; 0x3794 <vfprintf+0x6d2>
    374c:	55 20       	and	r5, r5
    374e:	09 f4       	brne	.+2      	; 0x3752 <vfprintf+0x690>
    3750:	e4 cc       	rjmp	.-1592   	; 0x311a <vfprintf+0x58>
    3752:	b7 01       	movw	r22, r14
    3754:	80 e2       	ldi	r24, 0x20	; 32
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    375c:	5a 94       	dec	r5
    375e:	f6 cf       	rjmp	.-20     	; 0x374c <vfprintf+0x68a>
    3760:	f7 01       	movw	r30, r14
    3762:	86 81       	ldd	r24, Z+6	; 0x06
    3764:	97 81       	ldd	r25, Z+7	; 0x07
    3766:	26 c0       	rjmp	.+76     	; 0x37b4 <vfprintf+0x6f2>
    3768:	8f ef       	ldi	r24, 0xFF	; 255
    376a:	9f ef       	ldi	r25, 0xFF	; 255
    376c:	23 c0       	rjmp	.+70     	; 0x37b4 <vfprintf+0x6f2>
    376e:	b7 01       	movw	r22, r14
    3770:	80 e2       	ldi	r24, 0x20	; 32
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    3778:	5a 94       	dec	r5
    377a:	51 10       	cpse	r5, r1
    377c:	f8 cf       	rjmp	.-16     	; 0x376e <vfprintf+0x6ac>
    377e:	d8 cf       	rjmp	.-80     	; 0x3730 <vfprintf+0x66e>
    3780:	51 2c       	mov	r5, r1
    3782:	b7 01       	movw	r22, r14
    3784:	80 2f       	mov	r24, r16
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    378c:	d3 cf       	rjmp	.-90     	; 0x3734 <vfprintf+0x672>
    378e:	0a ee       	ldi	r16, 0xEA	; 234
    3790:	10 e0       	ldi	r17, 0x00	; 0
    3792:	d5 cf       	rjmp	.-86     	; 0x373e <vfprintf+0x67c>
    3794:	91 10       	cpse	r9, r1
    3796:	80 52       	subi	r24, 0x20	; 32
    3798:	b7 01       	movw	r22, r14
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <fputc>
    37a0:	0f 5f       	subi	r16, 0xFF	; 255
    37a2:	1f 4f       	sbci	r17, 0xFF	; 255
    37a4:	cf cf       	rjmp	.-98     	; 0x3744 <vfprintf+0x682>
    37a6:	23 e0       	ldi	r18, 0x03	; 3
    37a8:	25 15       	cp	r18, r5
    37aa:	10 f4       	brcc	.+4      	; 0x37b0 <vfprintf+0x6ee>
    37ac:	83 e0       	ldi	r24, 0x03	; 3
    37ae:	bd cf       	rjmp	.-134    	; 0x372a <vfprintf+0x668>
    37b0:	51 2c       	mov	r5, r1
    37b2:	c0 cf       	rjmp	.-128    	; 0x3734 <vfprintf+0x672>
    37b4:	60 96       	adiw	r28, 0x10	; 16
    37b6:	e2 e1       	ldi	r30, 0x12	; 18
    37b8:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__>

000037bc <__divmodhi4>:
    37bc:	97 fb       	bst	r25, 7
    37be:	07 2e       	mov	r0, r23
    37c0:	16 f4       	brtc	.+4      	; 0x37c6 <__divmodhi4+0xa>
    37c2:	00 94       	com	r0
    37c4:	07 d0       	rcall	.+14     	; 0x37d4 <__divmodhi4_neg1>
    37c6:	77 fd       	sbrc	r23, 7
    37c8:	09 d0       	rcall	.+18     	; 0x37dc <__divmodhi4_neg2>
    37ca:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    37ce:	07 fc       	sbrc	r0, 7
    37d0:	05 d0       	rcall	.+10     	; 0x37dc <__divmodhi4_neg2>
    37d2:	3e f4       	brtc	.+14     	; 0x37e2 <__divmodhi4_exit>

000037d4 <__divmodhi4_neg1>:
    37d4:	90 95       	com	r25
    37d6:	81 95       	neg	r24
    37d8:	9f 4f       	sbci	r25, 0xFF	; 255
    37da:	08 95       	ret

000037dc <__divmodhi4_neg2>:
    37dc:	70 95       	com	r23
    37de:	61 95       	neg	r22
    37e0:	7f 4f       	sbci	r23, 0xFF	; 255

000037e2 <__divmodhi4_exit>:
    37e2:	08 95       	ret

000037e4 <__tablejump2__>:
    37e4:	ee 0f       	add	r30, r30
    37e6:	ff 1f       	adc	r31, r31
    37e8:	05 90       	lpm	r0, Z+
    37ea:	f4 91       	lpm	r31, Z
    37ec:	e0 2d       	mov	r30, r0
    37ee:	09 94       	ijmp

000037f0 <__prologue_saves__>:
    37f0:	2f 92       	push	r2
    37f2:	3f 92       	push	r3
    37f4:	4f 92       	push	r4
    37f6:	5f 92       	push	r5
    37f8:	6f 92       	push	r6
    37fa:	7f 92       	push	r7
    37fc:	8f 92       	push	r8
    37fe:	9f 92       	push	r9
    3800:	af 92       	push	r10
    3802:	bf 92       	push	r11
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	ca 1b       	sub	r28, r26
    381a:	db 0b       	sbc	r29, r27
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	09 94       	ijmp

00003822 <__epilogue_restores__>:
    3822:	2a 88       	ldd	r2, Y+18	; 0x12
    3824:	39 88       	ldd	r3, Y+17	; 0x11
    3826:	48 88       	ldd	r4, Y+16	; 0x10
    3828:	5f 84       	ldd	r5, Y+15	; 0x0f
    382a:	6e 84       	ldd	r6, Y+14	; 0x0e
    382c:	7d 84       	ldd	r7, Y+13	; 0x0d
    382e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3830:	9b 84       	ldd	r9, Y+11	; 0x0b
    3832:	aa 84       	ldd	r10, Y+10	; 0x0a
    3834:	b9 84       	ldd	r11, Y+9	; 0x09
    3836:	c8 84       	ldd	r12, Y+8	; 0x08
    3838:	df 80       	ldd	r13, Y+7	; 0x07
    383a:	ee 80       	ldd	r14, Y+6	; 0x06
    383c:	fd 80       	ldd	r15, Y+5	; 0x05
    383e:	0c 81       	ldd	r16, Y+4	; 0x04
    3840:	1b 81       	ldd	r17, Y+3	; 0x03
    3842:	aa 81       	ldd	r26, Y+2	; 0x02
    3844:	b9 81       	ldd	r27, Y+1	; 0x01
    3846:	ce 0f       	add	r28, r30
    3848:	d1 1d       	adc	r29, r1
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	ed 01       	movw	r28, r26
    3850:	08 95       	ret

00003852 <__udivmodhi4>:
    3852:	aa 1b       	sub	r26, r26
    3854:	bb 1b       	sub	r27, r27
    3856:	51 e1       	ldi	r21, 0x11	; 17
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <__udivmodhi4_ep>

0000385a <__udivmodhi4_loop>:
    385a:	aa 1f       	adc	r26, r26
    385c:	bb 1f       	adc	r27, r27
    385e:	a6 17       	cp	r26, r22
    3860:	b7 07       	cpc	r27, r23
    3862:	10 f0       	brcs	.+4      	; 0x3868 <__udivmodhi4_ep>
    3864:	a6 1b       	sub	r26, r22
    3866:	b7 0b       	sbc	r27, r23

00003868 <__udivmodhi4_ep>:
    3868:	88 1f       	adc	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	5a 95       	dec	r21
    386e:	a9 f7       	brne	.-22     	; 0x385a <__udivmodhi4_loop>
    3870:	80 95       	com	r24
    3872:	90 95       	com	r25
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	08 95       	ret

0000387a <__ftoa_engine>:
    387a:	28 30       	cpi	r18, 0x08	; 8
    387c:	08 f0       	brcs	.+2      	; 0x3880 <__ftoa_engine+0x6>
    387e:	27 e0       	ldi	r18, 0x07	; 7
    3880:	33 27       	eor	r19, r19
    3882:	da 01       	movw	r26, r20
    3884:	99 0f       	add	r25, r25
    3886:	31 1d       	adc	r19, r1
    3888:	87 fd       	sbrc	r24, 7
    388a:	91 60       	ori	r25, 0x01	; 1
    388c:	00 96       	adiw	r24, 0x00	; 0
    388e:	61 05       	cpc	r22, r1
    3890:	71 05       	cpc	r23, r1
    3892:	39 f4       	brne	.+14     	; 0x38a2 <__ftoa_engine+0x28>
    3894:	32 60       	ori	r19, 0x02	; 2
    3896:	2e 5f       	subi	r18, 0xFE	; 254
    3898:	3d 93       	st	X+, r19
    389a:	30 e3       	ldi	r19, 0x30	; 48
    389c:	2a 95       	dec	r18
    389e:	e1 f7       	brne	.-8      	; 0x3898 <__ftoa_engine+0x1e>
    38a0:	08 95       	ret
    38a2:	9f 3f       	cpi	r25, 0xFF	; 255
    38a4:	30 f0       	brcs	.+12     	; 0x38b2 <__ftoa_engine+0x38>
    38a6:	80 38       	cpi	r24, 0x80	; 128
    38a8:	71 05       	cpc	r23, r1
    38aa:	61 05       	cpc	r22, r1
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <__ftoa_engine+0x36>
    38ae:	3c 5f       	subi	r19, 0xFC	; 252
    38b0:	3c 5f       	subi	r19, 0xFC	; 252
    38b2:	3d 93       	st	X+, r19
    38b4:	91 30       	cpi	r25, 0x01	; 1
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <__ftoa_engine+0x40>
    38b8:	80 68       	ori	r24, 0x80	; 128
    38ba:	91 1d       	adc	r25, r1
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	1f 93       	push	r17
    38c2:	0f 93       	push	r16
    38c4:	ff 92       	push	r15
    38c6:	ef 92       	push	r14
    38c8:	19 2f       	mov	r17, r25
    38ca:	98 7f       	andi	r25, 0xF8	; 248
    38cc:	96 95       	lsr	r25
    38ce:	e9 2f       	mov	r30, r25
    38d0:	96 95       	lsr	r25
    38d2:	96 95       	lsr	r25
    38d4:	e9 0f       	add	r30, r25
    38d6:	ff 27       	eor	r31, r31
    38d8:	e8 5b       	subi	r30, 0xB8	; 184
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	99 27       	eor	r25, r25
    38de:	33 27       	eor	r19, r19
    38e0:	ee 24       	eor	r14, r14
    38e2:	ff 24       	eor	r15, r15
    38e4:	a7 01       	movw	r20, r14
    38e6:	e7 01       	movw	r28, r14
    38e8:	05 90       	lpm	r0, Z+
    38ea:	08 94       	sec
    38ec:	07 94       	ror	r0
    38ee:	28 f4       	brcc	.+10     	; 0x38fa <__ftoa_engine+0x80>
    38f0:	36 0f       	add	r19, r22
    38f2:	e7 1e       	adc	r14, r23
    38f4:	f8 1e       	adc	r15, r24
    38f6:	49 1f       	adc	r20, r25
    38f8:	51 1d       	adc	r21, r1
    38fa:	66 0f       	add	r22, r22
    38fc:	77 1f       	adc	r23, r23
    38fe:	88 1f       	adc	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	06 94       	lsr	r0
    3904:	a1 f7       	brne	.-24     	; 0x38ee <__ftoa_engine+0x74>
    3906:	05 90       	lpm	r0, Z+
    3908:	07 94       	ror	r0
    390a:	28 f4       	brcc	.+10     	; 0x3916 <__ftoa_engine+0x9c>
    390c:	e7 0e       	add	r14, r23
    390e:	f8 1e       	adc	r15, r24
    3910:	49 1f       	adc	r20, r25
    3912:	56 1f       	adc	r21, r22
    3914:	c1 1d       	adc	r28, r1
    3916:	77 0f       	add	r23, r23
    3918:	88 1f       	adc	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	66 1f       	adc	r22, r22
    391e:	06 94       	lsr	r0
    3920:	a1 f7       	brne	.-24     	; 0x390a <__ftoa_engine+0x90>
    3922:	05 90       	lpm	r0, Z+
    3924:	07 94       	ror	r0
    3926:	28 f4       	brcc	.+10     	; 0x3932 <__ftoa_engine+0xb8>
    3928:	f8 0e       	add	r15, r24
    392a:	49 1f       	adc	r20, r25
    392c:	56 1f       	adc	r21, r22
    392e:	c7 1f       	adc	r28, r23
    3930:	d1 1d       	adc	r29, r1
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	66 1f       	adc	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	06 94       	lsr	r0
    393c:	a1 f7       	brne	.-24     	; 0x3926 <__ftoa_engine+0xac>
    393e:	05 90       	lpm	r0, Z+
    3940:	07 94       	ror	r0
    3942:	20 f4       	brcc	.+8      	; 0x394c <__ftoa_engine+0xd2>
    3944:	49 0f       	add	r20, r25
    3946:	56 1f       	adc	r21, r22
    3948:	c7 1f       	adc	r28, r23
    394a:	d8 1f       	adc	r29, r24
    394c:	99 0f       	add	r25, r25
    394e:	66 1f       	adc	r22, r22
    3950:	77 1f       	adc	r23, r23
    3952:	88 1f       	adc	r24, r24
    3954:	06 94       	lsr	r0
    3956:	a9 f7       	brne	.-22     	; 0x3942 <__ftoa_engine+0xc8>
    3958:	84 91       	lpm	r24, Z
    395a:	10 95       	com	r17
    395c:	17 70       	andi	r17, 0x07	; 7
    395e:	41 f0       	breq	.+16     	; 0x3970 <__ftoa_engine+0xf6>
    3960:	d6 95       	lsr	r29
    3962:	c7 95       	ror	r28
    3964:	57 95       	ror	r21
    3966:	47 95       	ror	r20
    3968:	f7 94       	ror	r15
    396a:	e7 94       	ror	r14
    396c:	1a 95       	dec	r17
    396e:	c1 f7       	brne	.-16     	; 0x3960 <__ftoa_engine+0xe6>
    3970:	ee ee       	ldi	r30, 0xEE	; 238
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	68 94       	set
    3976:	15 90       	lpm	r1, Z+
    3978:	15 91       	lpm	r17, Z+
    397a:	35 91       	lpm	r19, Z+
    397c:	65 91       	lpm	r22, Z+
    397e:	95 91       	lpm	r25, Z+
    3980:	05 90       	lpm	r0, Z+
    3982:	7f e2       	ldi	r23, 0x2F	; 47
    3984:	73 95       	inc	r23
    3986:	e1 18       	sub	r14, r1
    3988:	f1 0a       	sbc	r15, r17
    398a:	43 0b       	sbc	r20, r19
    398c:	56 0b       	sbc	r21, r22
    398e:	c9 0b       	sbc	r28, r25
    3990:	d0 09       	sbc	r29, r0
    3992:	c0 f7       	brcc	.-16     	; 0x3984 <__ftoa_engine+0x10a>
    3994:	e1 0c       	add	r14, r1
    3996:	f1 1e       	adc	r15, r17
    3998:	43 1f       	adc	r20, r19
    399a:	56 1f       	adc	r21, r22
    399c:	c9 1f       	adc	r28, r25
    399e:	d0 1d       	adc	r29, r0
    39a0:	7e f4       	brtc	.+30     	; 0x39c0 <__ftoa_engine+0x146>
    39a2:	70 33       	cpi	r23, 0x30	; 48
    39a4:	11 f4       	brne	.+4      	; 0x39aa <__ftoa_engine+0x130>
    39a6:	8a 95       	dec	r24
    39a8:	e6 cf       	rjmp	.-52     	; 0x3976 <__ftoa_engine+0xfc>
    39aa:	e8 94       	clt
    39ac:	01 50       	subi	r16, 0x01	; 1
    39ae:	30 f0       	brcs	.+12     	; 0x39bc <__ftoa_engine+0x142>
    39b0:	08 0f       	add	r16, r24
    39b2:	0a f4       	brpl	.+2      	; 0x39b6 <__ftoa_engine+0x13c>
    39b4:	00 27       	eor	r16, r16
    39b6:	02 17       	cp	r16, r18
    39b8:	08 f4       	brcc	.+2      	; 0x39bc <__ftoa_engine+0x142>
    39ba:	20 2f       	mov	r18, r16
    39bc:	23 95       	inc	r18
    39be:	02 2f       	mov	r16, r18
    39c0:	7a 33       	cpi	r23, 0x3A	; 58
    39c2:	28 f0       	brcs	.+10     	; 0x39ce <__ftoa_engine+0x154>
    39c4:	79 e3       	ldi	r23, 0x39	; 57
    39c6:	7d 93       	st	X+, r23
    39c8:	2a 95       	dec	r18
    39ca:	e9 f7       	brne	.-6      	; 0x39c6 <__ftoa_engine+0x14c>
    39cc:	10 c0       	rjmp	.+32     	; 0x39ee <__ftoa_engine+0x174>
    39ce:	7d 93       	st	X+, r23
    39d0:	2a 95       	dec	r18
    39d2:	89 f6       	brne	.-94     	; 0x3976 <__ftoa_engine+0xfc>
    39d4:	06 94       	lsr	r0
    39d6:	97 95       	ror	r25
    39d8:	67 95       	ror	r22
    39da:	37 95       	ror	r19
    39dc:	17 95       	ror	r17
    39de:	17 94       	ror	r1
    39e0:	e1 18       	sub	r14, r1
    39e2:	f1 0a       	sbc	r15, r17
    39e4:	43 0b       	sbc	r20, r19
    39e6:	56 0b       	sbc	r21, r22
    39e8:	c9 0b       	sbc	r28, r25
    39ea:	d0 09       	sbc	r29, r0
    39ec:	98 f0       	brcs	.+38     	; 0x3a14 <__ftoa_engine+0x19a>
    39ee:	23 95       	inc	r18
    39f0:	7e 91       	ld	r23, -X
    39f2:	73 95       	inc	r23
    39f4:	7a 33       	cpi	r23, 0x3A	; 58
    39f6:	08 f0       	brcs	.+2      	; 0x39fa <__ftoa_engine+0x180>
    39f8:	70 e3       	ldi	r23, 0x30	; 48
    39fa:	7c 93       	st	X, r23
    39fc:	20 13       	cpse	r18, r16
    39fe:	b8 f7       	brcc	.-18     	; 0x39ee <__ftoa_engine+0x174>
    3a00:	7e 91       	ld	r23, -X
    3a02:	70 61       	ori	r23, 0x10	; 16
    3a04:	7d 93       	st	X+, r23
    3a06:	30 f0       	brcs	.+12     	; 0x3a14 <__ftoa_engine+0x19a>
    3a08:	83 95       	inc	r24
    3a0a:	71 e3       	ldi	r23, 0x31	; 49
    3a0c:	7d 93       	st	X+, r23
    3a0e:	70 e3       	ldi	r23, 0x30	; 48
    3a10:	2a 95       	dec	r18
    3a12:	e1 f7       	brne	.-8      	; 0x3a0c <__ftoa_engine+0x192>
    3a14:	11 24       	eor	r1, r1
    3a16:	ef 90       	pop	r14
    3a18:	ff 90       	pop	r15
    3a1a:	0f 91       	pop	r16
    3a1c:	1f 91       	pop	r17
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	99 27       	eor	r25, r25
    3a24:	87 fd       	sbrc	r24, 7
    3a26:	90 95       	com	r25
    3a28:	08 95       	ret

00003a2a <strnlen_P>:
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	05 90       	lpm	r0, Z+
    3a2e:	61 50       	subi	r22, 0x01	; 1
    3a30:	70 40       	sbci	r23, 0x00	; 0
    3a32:	01 10       	cpse	r0, r1
    3a34:	d8 f7       	brcc	.-10     	; 0x3a2c <strnlen_P+0x2>
    3a36:	80 95       	com	r24
    3a38:	90 95       	com	r25
    3a3a:	8e 0f       	add	r24, r30
    3a3c:	9f 1f       	adc	r25, r31
    3a3e:	08 95       	ret

00003a40 <strcat>:
    3a40:	fb 01       	movw	r30, r22
    3a42:	dc 01       	movw	r26, r24
    3a44:	0d 90       	ld	r0, X+
    3a46:	00 20       	and	r0, r0
    3a48:	e9 f7       	brne	.-6      	; 0x3a44 <strcat+0x4>
    3a4a:	11 97       	sbiw	r26, 0x01	; 1
    3a4c:	01 90       	ld	r0, Z+
    3a4e:	0d 92       	st	X+, r0
    3a50:	00 20       	and	r0, r0
    3a52:	e1 f7       	brne	.-8      	; 0x3a4c <strcat+0xc>
    3a54:	08 95       	ret

00003a56 <strcpy>:
    3a56:	fb 01       	movw	r30, r22
    3a58:	dc 01       	movw	r26, r24
    3a5a:	01 90       	ld	r0, Z+
    3a5c:	0d 92       	st	X+, r0
    3a5e:	00 20       	and	r0, r0
    3a60:	e1 f7       	brne	.-8      	; 0x3a5a <strcpy+0x4>
    3a62:	08 95       	ret

00003a64 <strnlen>:
    3a64:	fc 01       	movw	r30, r24
    3a66:	61 50       	subi	r22, 0x01	; 1
    3a68:	70 40       	sbci	r23, 0x00	; 0
    3a6a:	01 90       	ld	r0, Z+
    3a6c:	01 10       	cpse	r0, r1
    3a6e:	d8 f7       	brcc	.-10     	; 0x3a66 <strnlen+0x2>
    3a70:	80 95       	com	r24
    3a72:	90 95       	com	r25
    3a74:	8e 0f       	add	r24, r30
    3a76:	9f 1f       	adc	r25, r31
    3a78:	08 95       	ret

00003a7a <fputc>:
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	fb 01       	movw	r30, r22
    3a84:	23 81       	ldd	r18, Z+3	; 0x03
    3a86:	21 fd       	sbrc	r18, 1
    3a88:	03 c0       	rjmp	.+6      	; 0x3a90 <fputc+0x16>
    3a8a:	8f ef       	ldi	r24, 0xFF	; 255
    3a8c:	9f ef       	ldi	r25, 0xFF	; 255
    3a8e:	2c c0       	rjmp	.+88     	; 0x3ae8 <fputc+0x6e>
    3a90:	22 ff       	sbrs	r18, 2
    3a92:	16 c0       	rjmp	.+44     	; 0x3ac0 <fputc+0x46>
    3a94:	46 81       	ldd	r20, Z+6	; 0x06
    3a96:	57 81       	ldd	r21, Z+7	; 0x07
    3a98:	24 81       	ldd	r18, Z+4	; 0x04
    3a9a:	35 81       	ldd	r19, Z+5	; 0x05
    3a9c:	42 17       	cp	r20, r18
    3a9e:	53 07       	cpc	r21, r19
    3aa0:	44 f4       	brge	.+16     	; 0x3ab2 <fputc+0x38>
    3aa2:	a0 81       	ld	r26, Z
    3aa4:	b1 81       	ldd	r27, Z+1	; 0x01
    3aa6:	9d 01       	movw	r18, r26
    3aa8:	2f 5f       	subi	r18, 0xFF	; 255
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	20 83       	st	Z, r18
    3aae:	31 83       	std	Z+1, r19	; 0x01
    3ab0:	8c 93       	st	X, r24
    3ab2:	26 81       	ldd	r18, Z+6	; 0x06
    3ab4:	37 81       	ldd	r19, Z+7	; 0x07
    3ab6:	2f 5f       	subi	r18, 0xFF	; 255
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	26 83       	std	Z+6, r18	; 0x06
    3abc:	37 83       	std	Z+7, r19	; 0x07
    3abe:	14 c0       	rjmp	.+40     	; 0x3ae8 <fputc+0x6e>
    3ac0:	8b 01       	movw	r16, r22
    3ac2:	ec 01       	movw	r28, r24
    3ac4:	fb 01       	movw	r30, r22
    3ac6:	00 84       	ldd	r0, Z+8	; 0x08
    3ac8:	f1 85       	ldd	r31, Z+9	; 0x09
    3aca:	e0 2d       	mov	r30, r0
    3acc:	09 95       	icall
    3ace:	89 2b       	or	r24, r25
    3ad0:	e1 f6       	brne	.-72     	; 0x3a8a <fputc+0x10>
    3ad2:	d8 01       	movw	r26, r16
    3ad4:	16 96       	adiw	r26, 0x06	; 6
    3ad6:	8d 91       	ld	r24, X+
    3ad8:	9c 91       	ld	r25, X
    3ada:	17 97       	sbiw	r26, 0x07	; 7
    3adc:	01 96       	adiw	r24, 0x01	; 1
    3ade:	16 96       	adiw	r26, 0x06	; 6
    3ae0:	8d 93       	st	X+, r24
    3ae2:	9c 93       	st	X, r25
    3ae4:	17 97       	sbiw	r26, 0x07	; 7
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	0f 91       	pop	r16
    3af0:	08 95       	ret

00003af2 <sprintf>:
    3af2:	ae e0       	ldi	r26, 0x0E	; 14
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	ef e7       	ldi	r30, 0x7F	; 127
    3af8:	fd e1       	ldi	r31, 0x1D	; 29
    3afa:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x1c>
    3afe:	0d 89       	ldd	r16, Y+21	; 0x15
    3b00:	1e 89       	ldd	r17, Y+22	; 0x16
    3b02:	86 e0       	ldi	r24, 0x06	; 6
    3b04:	8c 83       	std	Y+4, r24	; 0x04
    3b06:	09 83       	std	Y+1, r16	; 0x01
    3b08:	1a 83       	std	Y+2, r17	; 0x02
    3b0a:	8f ef       	ldi	r24, 0xFF	; 255
    3b0c:	9f e7       	ldi	r25, 0x7F	; 127
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	9e 83       	std	Y+6, r25	; 0x06
    3b12:	ae 01       	movw	r20, r28
    3b14:	47 5e       	subi	r20, 0xE7	; 231
    3b16:	5f 4f       	sbci	r21, 0xFF	; 255
    3b18:	6f 89       	ldd	r22, Y+23	; 0x17
    3b1a:	78 8d       	ldd	r23, Y+24	; 0x18
    3b1c:	ce 01       	movw	r24, r28
    3b1e:	01 96       	adiw	r24, 0x01	; 1
    3b20:	0e 94 61 18 	call	0x30c2	; 0x30c2 <vfprintf>
    3b24:	ef 81       	ldd	r30, Y+7	; 0x07
    3b26:	f8 85       	ldd	r31, Y+8	; 0x08
    3b28:	e0 0f       	add	r30, r16
    3b2a:	f1 1f       	adc	r31, r17
    3b2c:	10 82       	st	Z, r1
    3b2e:	2e 96       	adiw	r28, 0x0e	; 14
    3b30:	e4 e0       	ldi	r30, 0x04	; 4
    3b32:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <__epilogue_restores__+0x1c>

00003b36 <__ultoa_invert>:
    3b36:	fa 01       	movw	r30, r20
    3b38:	aa 27       	eor	r26, r26
    3b3a:	28 30       	cpi	r18, 0x08	; 8
    3b3c:	51 f1       	breq	.+84     	; 0x3b92 <__ultoa_invert+0x5c>
    3b3e:	20 31       	cpi	r18, 0x10	; 16
    3b40:	81 f1       	breq	.+96     	; 0x3ba2 <__ultoa_invert+0x6c>
    3b42:	e8 94       	clt
    3b44:	6f 93       	push	r22
    3b46:	6e 7f       	andi	r22, 0xFE	; 254
    3b48:	6e 5f       	subi	r22, 0xFE	; 254
    3b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b50:	af 4f       	sbci	r26, 0xFF	; 255
    3b52:	b1 e0       	ldi	r27, 0x01	; 1
    3b54:	3e d0       	rcall	.+124    	; 0x3bd2 <__ultoa_invert+0x9c>
    3b56:	b4 e0       	ldi	r27, 0x04	; 4
    3b58:	3c d0       	rcall	.+120    	; 0x3bd2 <__ultoa_invert+0x9c>
    3b5a:	67 0f       	add	r22, r23
    3b5c:	78 1f       	adc	r23, r24
    3b5e:	89 1f       	adc	r24, r25
    3b60:	9a 1f       	adc	r25, r26
    3b62:	a1 1d       	adc	r26, r1
    3b64:	68 0f       	add	r22, r24
    3b66:	79 1f       	adc	r23, r25
    3b68:	8a 1f       	adc	r24, r26
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	a1 1d       	adc	r26, r1
    3b6e:	6a 0f       	add	r22, r26
    3b70:	71 1d       	adc	r23, r1
    3b72:	81 1d       	adc	r24, r1
    3b74:	91 1d       	adc	r25, r1
    3b76:	a1 1d       	adc	r26, r1
    3b78:	20 d0       	rcall	.+64     	; 0x3bba <__ultoa_invert+0x84>
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <__ultoa_invert+0x48>
    3b7c:	68 94       	set
    3b7e:	3f 91       	pop	r19
    3b80:	2a e0       	ldi	r18, 0x0A	; 10
    3b82:	26 9f       	mul	r18, r22
    3b84:	11 24       	eor	r1, r1
    3b86:	30 19       	sub	r19, r0
    3b88:	30 5d       	subi	r19, 0xD0	; 208
    3b8a:	31 93       	st	Z+, r19
    3b8c:	de f6       	brtc	.-74     	; 0x3b44 <__ultoa_invert+0xe>
    3b8e:	cf 01       	movw	r24, r30
    3b90:	08 95       	ret
    3b92:	46 2f       	mov	r20, r22
    3b94:	47 70       	andi	r20, 0x07	; 7
    3b96:	40 5d       	subi	r20, 0xD0	; 208
    3b98:	41 93       	st	Z+, r20
    3b9a:	b3 e0       	ldi	r27, 0x03	; 3
    3b9c:	0f d0       	rcall	.+30     	; 0x3bbc <__ultoa_invert+0x86>
    3b9e:	c9 f7       	brne	.-14     	; 0x3b92 <__ultoa_invert+0x5c>
    3ba0:	f6 cf       	rjmp	.-20     	; 0x3b8e <__ultoa_invert+0x58>
    3ba2:	46 2f       	mov	r20, r22
    3ba4:	4f 70       	andi	r20, 0x0F	; 15
    3ba6:	40 5d       	subi	r20, 0xD0	; 208
    3ba8:	4a 33       	cpi	r20, 0x3A	; 58
    3baa:	18 f0       	brcs	.+6      	; 0x3bb2 <__ultoa_invert+0x7c>
    3bac:	49 5d       	subi	r20, 0xD9	; 217
    3bae:	31 fd       	sbrc	r19, 1
    3bb0:	40 52       	subi	r20, 0x20	; 32
    3bb2:	41 93       	st	Z+, r20
    3bb4:	02 d0       	rcall	.+4      	; 0x3bba <__ultoa_invert+0x84>
    3bb6:	a9 f7       	brne	.-22     	; 0x3ba2 <__ultoa_invert+0x6c>
    3bb8:	ea cf       	rjmp	.-44     	; 0x3b8e <__ultoa_invert+0x58>
    3bba:	b4 e0       	ldi	r27, 0x04	; 4
    3bbc:	a6 95       	lsr	r26
    3bbe:	97 95       	ror	r25
    3bc0:	87 95       	ror	r24
    3bc2:	77 95       	ror	r23
    3bc4:	67 95       	ror	r22
    3bc6:	ba 95       	dec	r27
    3bc8:	c9 f7       	brne	.-14     	; 0x3bbc <__ultoa_invert+0x86>
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	61 05       	cpc	r22, r1
    3bce:	71 05       	cpc	r23, r1
    3bd0:	08 95       	ret
    3bd2:	9b 01       	movw	r18, r22
    3bd4:	ac 01       	movw	r20, r24
    3bd6:	0a 2e       	mov	r0, r26
    3bd8:	06 94       	lsr	r0
    3bda:	57 95       	ror	r21
    3bdc:	47 95       	ror	r20
    3bde:	37 95       	ror	r19
    3be0:	27 95       	ror	r18
    3be2:	ba 95       	dec	r27
    3be4:	c9 f7       	brne	.-14     	; 0x3bd8 <__ultoa_invert+0xa2>
    3be6:	62 0f       	add	r22, r18
    3be8:	73 1f       	adc	r23, r19
    3bea:	84 1f       	adc	r24, r20
    3bec:	95 1f       	adc	r25, r21
    3bee:	a0 1d       	adc	r26, r0
    3bf0:	08 95       	ret

00003bf2 <eeprom_read_block>:
    3bf2:	60 50       	subi	r22, 0x00	; 0
    3bf4:	7c 4e       	sbci	r23, 0xEC	; 236
    3bf6:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <memcpy>

00003bfa <eeprom_update_block>:
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	a4 0f       	add	r26, r20
    3bfe:	b5 1f       	adc	r27, r21
    3c00:	41 50       	subi	r20, 0x01	; 1
    3c02:	50 40       	sbci	r21, 0x00	; 0
    3c04:	48 f0       	brcs	.+18     	; 0x3c18 <eeprom_update_block+0x1e>
    3c06:	cb 01       	movw	r24, r22
    3c08:	84 0f       	add	r24, r20
    3c0a:	95 1f       	adc	r25, r21
    3c0c:	2e 91       	ld	r18, -X
    3c0e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_r18>
    3c12:	41 50       	subi	r20, 0x01	; 1
    3c14:	50 40       	sbci	r21, 0x00	; 0
    3c16:	d0 f7       	brcc	.-12     	; 0x3c0c <eeprom_update_block+0x12>
    3c18:	08 95       	ret

00003c1a <eeprom_update_byte>:
    3c1a:	26 2f       	mov	r18, r22

00003c1c <eeprom_update_r18>:
    3c1c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <eeprom_mapen>
    3c20:	00 80       	ld	r0, Z
    3c22:	02 16       	cp	r0, r18
    3c24:	19 f0       	breq	.+6      	; 0x3c2c <eeprom_update_r18+0x10>
    3c26:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <eeprom_write_r18>
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	08 95       	ret

00003c30 <eeprom_write_byte>:
    3c30:	26 2f       	mov	r18, r22

00003c32 <eeprom_write_r18>:
    3c32:	af 93       	push	r26
    3c34:	bf 93       	push	r27
    3c36:	e0 e0       	ldi	r30, 0x00	; 0
    3c38:	f0 e1       	ldi	r31, 0x10	; 16
    3c3a:	32 81       	ldd	r19, Z+2	; 0x02
    3c3c:	31 fd       	sbrc	r19, 1
    3c3e:	fd cf       	rjmp	.-6      	; 0x3c3a <eeprom_write_r18+0x8>
    3c40:	dc 01       	movw	r26, r24
    3c42:	a0 50       	subi	r26, 0x00	; 0
    3c44:	bc 4e       	sbci	r27, 0xEC	; 236
    3c46:	2c 93       	st	X, r18
    3c48:	2d e9       	ldi	r18, 0x9D	; 157
    3c4a:	24 bf       	out	0x34, r18	; 52
    3c4c:	23 e0       	ldi	r18, 0x03	; 3
    3c4e:	20 83       	st	Z, r18
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	bf 91       	pop	r27
    3c54:	af 91       	pop	r26
    3c56:	08 95       	ret

00003c58 <eeprom_read_byte>:
    3c58:	03 d0       	rcall	.+6      	; 0x3c60 <eeprom_mapen>
    3c5a:	80 81       	ld	r24, Z
    3c5c:	99 27       	eor	r25, r25
    3c5e:	08 95       	ret

00003c60 <eeprom_mapen>:
    3c60:	fc 01       	movw	r30, r24
    3c62:	e0 50       	subi	r30, 0x00	; 0
    3c64:	fc 4e       	sbci	r31, 0xEC	; 236
    3c66:	08 95       	ret

00003c68 <memcpy>:
    3c68:	fb 01       	movw	r30, r22
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	02 c0       	rjmp	.+4      	; 0x3c72 <memcpy+0xa>
    3c6e:	01 90       	ld	r0, Z+
    3c70:	0d 92       	st	X+, r0
    3c72:	41 50       	subi	r20, 0x01	; 1
    3c74:	50 40       	sbci	r21, 0x00	; 0
    3c76:	d8 f7       	brcc	.-10     	; 0x3c6e <memcpy+0x6>
    3c78:	08 95       	ret

00003c7a <_exit>:
    3c7a:	f8 94       	cli

00003c7c <__stop_program>:
    3c7c:	ff cf       	rjmp	.-2      	; 0x3c7c <__stop_program>
