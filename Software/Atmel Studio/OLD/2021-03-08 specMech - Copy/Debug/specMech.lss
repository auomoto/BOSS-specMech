
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  0000453a  000045ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004286  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  00008286  00004286  0000433a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802802  00802802  000045f0  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000464c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000648  00000000  00000000  00004690  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009f9d  00000000  00000000  00004cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004763  00000000  00000000  0000ec75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004356  00000000  00000000  000133d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e60  00000000  00000000  00017730  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002267  00000000  00000000  00018590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e8c  00000000  00000000  0001a7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0001e683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__ctors_end>
       4:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
       8:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
       c:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__vector_3>
      10:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      14:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      18:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      1c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      20:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      24:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      28:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      2c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      30:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_12>
      34:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      38:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      3c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      40:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      44:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_17>
      48:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__vector_18>
      4c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      50:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__vector_20>
      54:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      58:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      5c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      60:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      64:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      68:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__vector_26>
      6c:	0c 94 16 18 	jmp	0x302c	; 0x302c <__vector_27>
      70:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      74:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_29>
      78:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      7c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      80:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      84:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      88:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      8c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      90:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      94:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__vector_37>
      98:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__vector_38>
      9c:	0c 94 32 01 	jmp	0x264	; 0x264 <__bad_interrupt>
      a0:	81 04       	cpc	r8, r1
      a2:	8f 04       	cpc	r8, r15
      a4:	8f 04       	cpc	r8, r15
      a6:	8f 04       	cpc	r8, r15
      a8:	8f 04       	cpc	r8, r15
      aa:	8f 04       	cpc	r8, r15
      ac:	8f 04       	cpc	r8, r15
      ae:	8f 04       	cpc	r8, r15
      b0:	8f 04       	cpc	r8, r15
      b2:	8f 04       	cpc	r8, r15
      b4:	8f 04       	cpc	r8, r15
      b6:	8f 04       	cpc	r8, r15
      b8:	8f 04       	cpc	r8, r15
      ba:	8f 04       	cpc	r8, r15
      bc:	8f 04       	cpc	r8, r15
      be:	8f 04       	cpc	r8, r15
      c0:	8f 04       	cpc	r8, r15
      c2:	67 04       	cpc	r6, r7
      c4:	8f 04       	cpc	r8, r15
      c6:	8f 04       	cpc	r8, r15
      c8:	8f 04       	cpc	r8, r15
      ca:	8f 04       	cpc	r8, r15
      cc:	8f 04       	cpc	r8, r15
      ce:	8f 04       	cpc	r8, r15
      d0:	8f 04       	cpc	r8, r15
      d2:	8f 04       	cpc	r8, r15
      d4:	8f 04       	cpc	r8, r15
      d6:	71 04       	cpc	r7, r1
      d8:	8f 04       	cpc	r8, r15
      da:	6c 04       	cpc	r6, r12
      dc:	8f 04       	cpc	r8, r15
      de:	8f 04       	cpc	r8, r15
      e0:	75 04       	cpc	r7, r5
      e2:	79 04       	cpc	r7, r9
      e4:	7d 04       	cpc	r7, r13
      e6:	8f 12       	cpse	r8, r31
      e8:	e0 12       	cpse	r14, r16
      ea:	e0 12       	cpse	r14, r16
      ec:	e0 12       	cpse	r14, r16
      ee:	e0 12       	cpse	r14, r16
      f0:	e0 12       	cpse	r14, r16
      f2:	e0 12       	cpse	r14, r16
      f4:	e0 12       	cpse	r14, r16
      f6:	e0 12       	cpse	r14, r16
      f8:	e0 12       	cpse	r14, r16
      fa:	e0 12       	cpse	r14, r16
      fc:	59 0e       	add	r5, r25
      fe:	59 0e       	add	r5, r25
     100:	59 0e       	add	r5, r25
     102:	e0 12       	cpse	r14, r16
     104:	f6 0e       	add	r15, r22
     106:	e0 12       	cpse	r14, r16
     108:	e0 12       	cpse	r14, r16
     10a:	e0 12       	cpse	r14, r16
     10c:	e0 12       	cpse	r14, r16
     10e:	e0 12       	cpse	r14, r16
     110:	e0 12       	cpse	r14, r16
     112:	e0 12       	cpse	r14, r16
     114:	e0 12       	cpse	r14, r16
     116:	e0 12       	cpse	r14, r16
     118:	2e 10       	cpse	r2, r14
     11a:	1c 11       	cpse	r17, r12
     11c:	e0 12       	cpse	r14, r16
     11e:	e0 12       	cpse	r14, r16
     120:	e0 12       	cpse	r14, r16
     122:	ba 11       	cpse	r27, r10
     124:	e0 12       	cpse	r14, r16
     126:	19 12       	cpse	r1, r25

00000128 <__trampolines_end>:
     128:	6e 61       	ori	r22, 0x1E	; 30
     12a:	6e 00       	.word	0x006e	; ????

0000012c <__c.2332>:
     12c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     13c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     14c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     15c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     16c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     17c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     18c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     19c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ac:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1bc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1cc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1dc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ec:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1fc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     20c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     21c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000022a <__ctors_end>:
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	cd bf       	out	0x3d, r28	; 61
     232:	df e3       	ldi	r29, 0x3F	; 63
     234:	de bf       	out	0x3e, r29	; 62

00000236 <__do_copy_data>:
     236:	18 e2       	ldi	r17, 0x28	; 40
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b8 e2       	ldi	r27, 0x28	; 40
     23c:	ea e3       	ldi	r30, 0x3A	; 58
     23e:	f5 e4       	ldi	r31, 0x45	; 69
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x10>
     242:	05 90       	lpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a2 30       	cpi	r26, 0x02	; 2
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0xc>

0000024c <__do_clear_bss>:
     24c:	20 e3       	ldi	r18, 0x30	; 48
     24e:	a2 e0       	ldi	r26, 0x02	; 2
     250:	b8 e2       	ldi	r27, 0x28	; 40
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	a0 33       	cpi	r26, 0x30	; 48
     258:	b2 07       	cpc	r27, r18
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	0e 94 0e 08 	call	0x101c	; 0x101c <main>
     260:	0c 94 41 21 	jmp	0x4282	; 0x4282 <_exit>

00000264 <__bad_interrupt>:
     264:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000268 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	c9 f0       	breq	.+50     	; 0x2a8 <read_AD590+0x40>
     276:	18 f0       	brcs	.+6      	; 0x27e <read_AD590+0x16>
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	61 f0       	breq	.+24     	; 0x294 <read_AD590+0x2c>
     27c:	10 c0       	rjmp	.+32     	; 0x29e <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     27e:	0f 2e       	mov	r0, r31
     280:	f3 e3       	ldi	r31, 0x33	; 51
     282:	cf 2e       	mov	r12, r31
     284:	dc 2c       	mov	r13, r12
     286:	f3 ef       	ldi	r31, 0xF3	; 243
     288:	ef 2e       	mov	r14, r31
     28a:	f0 e4       	ldi	r31, 0x40	; 64
     28c:	ff 2e       	mov	r15, r31
     28e:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     290:	c1 e0       	ldi	r28, 0x01	; 1
     292:	0e c0       	rjmp	.+28     	; 0x2b0 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     294:	c1 2c       	mov	r12, r1
     296:	d1 2c       	mov	r13, r1
     298:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     29a:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     29c:	09 c0       	rjmp	.+18     	; 0x2b0 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     29e:	c1 2c       	mov	r12, r1
     2a0:	d1 2c       	mov	r13, r1
     2a2:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2a4:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2a8:	c1 2c       	mov	r12, r1
     2aa:	d1 2c       	mov	r13, r1
     2ac:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ae:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	66 e0       	ldi	r22, 0x06	; 6
     2b4:	87 e2       	ldi	r24, 0x27	; 39
     2b6:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2ba:	4c 2f       	mov	r20, r28
     2bc:	40 95       	com	r20
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	87 e2       	ldi	r24, 0x27	; 39
     2c2:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2c6:	4c 2f       	mov	r20, r28
     2c8:	6a e0       	ldi	r22, 0x0A	; 10
     2ca:	87 e2       	ldi	r24, 0x27	; 39
     2cc:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	86 e1       	ldi	r24, 0x16	; 22
     2d2:	8a 95       	dec	r24
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <read_AD590+0x6a>
     2d6:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     2d8:	20 e8       	ldi	r18, 0x80	; 128
     2da:	40 e7       	ldi	r20, 0x70	; 112
     2dc:	68 e0       	ldi	r22, 0x08	; 8
     2de:	88 e4       	ldi	r24, 0x48	; 72
     2e0:	0e 94 8a 01 	call	0x314	; 0x314 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	4a e7       	ldi	r20, 0x7A	; 122
     2ea:	54 e4       	ldi	r21, 0x44	; 68
     2ec:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
     2f0:	23 e3       	ldi	r18, 0x33	; 51
     2f2:	33 e9       	ldi	r19, 0x93	; 147
     2f4:	48 e8       	ldi	r20, 0x88	; 136
     2f6:	53 e4       	ldi	r21, 0x43	; 67
     2f8:	0e 94 c6 18 	call	0x318c	; 0x318c <__subsf3>
     2fc:	9b 01       	movw	r18, r22
     2fe:	ac 01       	movw	r20, r24
     300:	c7 01       	movw	r24, r14
     302:	b6 01       	movw	r22, r12
     304:	0e 94 c7 18 	call	0x318e	; 0x318e <__addsf3>
	return(temperature);

}
     308:	cf 91       	pop	r28
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	d8 2f       	mov	r29, r24
     326:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     328:	46 2b       	or	r20, r22
     32a:	c4 2f       	mov	r28, r20
     32c:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     32e:	12 2f       	mov	r17, r18
     330:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     338:	08 2f       	mov	r16, r24
     33a:	88 23       	and	r24, r24
     33c:	69 f0       	breq	.+26     	; 0x358 <read_ADS1115+0x44>
		stop_TWI();
     33e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     342:	60 2f       	mov	r22, r16
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
     34e:	56 2f       	mov	r21, r22
     350:	47 2f       	mov	r20, r23
     352:	38 2f       	mov	r19, r24
     354:	29 2f       	mov	r18, r25
     356:	d0 c0       	rjmp	.+416    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     35e:	08 2f       	mov	r16, r24
     360:	88 23       	and	r24, r24
     362:	69 f0       	breq	.+26     	; 0x37e <read_ADS1115+0x6a>
		stop_TWI();
     364:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     368:	60 2f       	mov	r22, r16
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
     374:	56 2f       	mov	r21, r22
     376:	47 2f       	mov	r20, r23
     378:	38 2f       	mov	r19, r24
     37a:	29 2f       	mov	r18, r25
     37c:	bd c0       	rjmp	.+378    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     37e:	8c 2f       	mov	r24, r28
     380:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     384:	c8 2f       	mov	r28, r24
     386:	88 23       	and	r24, r24
     388:	69 f0       	breq	.+26     	; 0x3a4 <read_ADS1115+0x90>
		stop_TWI();
     38a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     38e:	6c 2f       	mov	r22, r28
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
     39a:	56 2f       	mov	r21, r22
     39c:	47 2f       	mov	r20, r23
     39e:	38 2f       	mov	r19, r24
     3a0:	29 2f       	mov	r18, r25
     3a2:	aa c0       	rjmp	.+340    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3a4:	81 2f       	mov	r24, r17
     3a6:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     3aa:	c8 2f       	mov	r28, r24
     3ac:	88 23       	and	r24, r24
     3ae:	69 f0       	breq	.+26     	; 0x3ca <read_ADS1115+0xb6>
		stop_TWI();
     3b0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     3b4:	6c 2f       	mov	r22, r28
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
     3c0:	56 2f       	mov	r21, r22
     3c2:	47 2f       	mov	r20, r23
     3c4:	38 2f       	mov	r19, r24
     3c6:	29 2f       	mov	r18, r25
     3c8:	97 c0       	rjmp	.+302    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	}
	stop_TWI();
     3ca:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
     3ce:	8c e1       	ldi	r24, 0x1C	; 28
     3d0:	8a 95       	dec	r24
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3d4:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3d6:	09 c0       	rjmp	.+18     	; 0x3ea <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	8d 2f       	mov	r24, r29
     3dc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     3e0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3e4:	88 23       	and	r24, r24
     3e6:	0c f4       	brge	.+2      	; 0x3ea <read_ADS1115+0xd6>
			converting = NO;
     3e8:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3ea:	c1 11       	cpse	r28, r1
     3ec:	f5 cf       	rjmp	.-22     	; 0x3d8 <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3ee:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	8d 2f       	mov	r24, r29
     3f6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8d 2f       	mov	r24, r29
     404:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	highbyte = read_TWI();
     408:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <read_TWI>
     40c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     40e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
     412:	d8 2f       	mov	r29, r24
	stop_TWI();
     414:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	value = highbyte;
     418:	6c 2f       	mov	r22, r28
     41a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     41c:	76 2f       	mov	r23, r22
     41e:	66 27       	eor	r22, r22
	value |= lowbyte;
     420:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	f8 16       	cp	r15, r24
     426:	49 f1       	breq	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     428:	8f 15       	cp	r24, r15
     42a:	30 f0       	brcs	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42c:	ff 20       	and	r15, r15
     42e:	d9 f1       	breq	.+118    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	f8 16       	cp	r15, r24
     434:	69 f1       	breq	.+90     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     436:	42 c0       	rjmp	.+132    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	f8 16       	cp	r15, r24
     43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	42 c0       	rjmp	.+132    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	f8 16       	cp	r15, r24
     444:	21 f0       	breq	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     446:	86 e0       	ldi	r24, 0x06	; 6
     448:	f8 12       	cpse	r15, r24
     44a:	38 c0       	rjmp	.+112    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     44c:	0b c0       	rjmp	.+22     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		case PGA0256:
			scale = SCA0256;
     44e:	0f 2e       	mov	r0, r31
     450:	f4 e7       	ldi	r31, 0x74	; 116
     452:	cf 2e       	mov	r12, r31
     454:	f3 e1       	ldi	r31, 0x13	; 19
     456:	df 2e       	mov	r13, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	ef 2e       	mov	r14, r31
     45c:	f7 e3       	ldi	r31, 0x37	; 55
     45e:	ff 2e       	mov	r15, r31
     460:	f0 2d       	mov	r31, r0
     462:	3a c0       	rjmp	.+116    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     464:	0f 2e       	mov	r0, r31
     466:	f4 e7       	ldi	r31, 0x74	; 116
     468:	cf 2e       	mov	r12, r31
     46a:	f3 e1       	ldi	r31, 0x13	; 19
     46c:	df 2e       	mov	r13, r31
     46e:	f3 e0       	ldi	r31, 0x03	; 3
     470:	ef 2e       	mov	r14, r31
     472:	f8 e3       	ldi	r31, 0x38	; 56
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
			break;
     478:	2f c0       	rjmp	.+94     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		case PGA2048:
			scale = SCA2048;
     47a:	0f 2e       	mov	r0, r31
     47c:	f2 e1       	ldi	r31, 0x12	; 18
     47e:	cf 2e       	mov	r12, r31
     480:	f3 e1       	ldi	r31, 0x13	; 19
     482:	df 2e       	mov	r13, r31
     484:	f3 e8       	ldi	r31, 0x83	; 131
     486:	ef 2e       	mov	r14, r31
     488:	f8 e3       	ldi	r31, 0x38	; 56
     48a:	ff 2e       	mov	r15, r31
     48c:	f0 2d       	mov	r31, r0
			break;
     48e:	24 c0       	rjmp	.+72     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		case PGA4096:
			scale = SCA4096;
     490:	0f 2e       	mov	r0, r31
     492:	f4 e7       	ldi	r31, 0x74	; 116
     494:	cf 2e       	mov	r12, r31
     496:	f3 e1       	ldi	r31, 0x13	; 19
     498:	df 2e       	mov	r13, r31
     49a:	f3 e0       	ldi	r31, 0x03	; 3
     49c:	ef 2e       	mov	r14, r31
     49e:	f9 e3       	ldi	r31, 0x39	; 57
     4a0:	ff 2e       	mov	r15, r31
     4a2:	f0 2d       	mov	r31, r0
			break;
     4a4:	19 c0       	rjmp	.+50     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		case PGA6144:
			scale = SCA6144;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	fe e2       	ldi	r31, 0x2E	; 46
     4aa:	cf 2e       	mov	r12, r31
     4ac:	fd e9       	ldi	r31, 0x9D	; 157
     4ae:	df 2e       	mov	r13, r31
     4b0:	f4 e4       	ldi	r31, 0x44	; 68
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f9 e3       	ldi	r31, 0x39	; 57
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
			break;
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		default:
			scale = 0.0;
     4bc:	c1 2c       	mov	r12, r1
     4be:	d1 2c       	mov	r13, r1
     4c0:	76 01       	movw	r14, r12
			break;
     4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f1 e7       	ldi	r31, 0x71	; 113
     4c8:	cf 2e       	mov	r12, r31
     4ca:	f3 e1       	ldi	r31, 0x13	; 19
     4cc:	df 2e       	mov	r13, r31
     4ce:	f3 e8       	ldi	r31, 0x83	; 131
     4d0:	ef 2e       	mov	r14, r31
     4d2:	f7 e3       	ldi	r31, 0x37	; 55
     4d4:	ff 2e       	mov	r15, r31
     4d6:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     4d8:	07 2e       	mov	r0, r23
     4da:	00 0c       	add	r0, r0
     4dc:	88 0b       	sbc	r24, r24
     4de:	99 0b       	sbc	r25, r25
     4e0:	0e 94 ac 19 	call	0x3358	; 0x3358 <__floatsisf>
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	c7 01       	movw	r24, r14
     4ea:	b6 01       	movw	r22, r12
     4ec:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
	return(voltage);
     4f0:	56 2f       	mov	r21, r22
     4f2:	47 2f       	mov	r20, r23
     4f4:	38 2f       	mov	r19, r24
     4f6:	29 2f       	mov	r18, r25

}
     4f8:	65 2f       	mov	r22, r21
     4fa:	74 2f       	mov	r23, r20
     4fc:	83 2f       	mov	r24, r19
     4fe:	92 2f       	mov	r25, r18
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	08 95       	ret

00000512 <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     512:	e0 e2       	ldi	r30, 0x20	; 32
     514:	f4 e0       	ldi	r31, 0x04	; 4
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     51a:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     51c:	86 83       	std	Z+6, r24	; 0x06
     51e:	08 95       	ret

00000520 <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	c4 51       	subi	r28, 0x14	; 20
     52e:	d1 40       	sbci	r29, 0x01	; 1
     530:	cd bf       	out	0x3d, r28	; 61
     532:	de bf       	out	0x3e, r29	; 62
     534:	2b e0       	ldi	r18, 0x0B	; 11
     536:	e6 e8       	ldi	r30, 0x86	; 134
     538:	f2 e8       	ldi	r31, 0x82	; 130
     53a:	de 01       	movw	r26, r28
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	01 90       	ld	r0, Z+
     540:	0d 92       	st	X+, r0
     542:	2a 95       	dec	r18
     544:	e1 f7       	brne	.-8      	; 0x53e <echo_cmd+0x1e>
     546:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     54a:	22 ff       	sbrs	r18, 2
     54c:	03 c0       	rjmp	.+6      	; 0x554 <echo_cmd+0x34>
     54e:	22 e0       	ldi	r18, 0x02	; 2
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <echo_cmd+0x38>
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	3f 93       	push	r19
     55e:	2f 93       	push	r18
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	8e 01       	movw	r16, r28
     56a:	04 5f       	subi	r16, 0xF4	; 244
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	1f 93       	push	r17
     570:	0f 93       	push	r16
     572:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
     576:	c8 01       	movw	r24, r16
     578:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
     57c:	f8 01       	movw	r30, r16
     57e:	01 90       	ld	r0, Z+
     580:	00 20       	and	r0, r0
     582:	e9 f7       	brne	.-6      	; 0x57e <echo_cmd+0x5e>
     584:	31 97       	sbiw	r30, 0x01	; 1
     586:	af 01       	movw	r20, r30
     588:	40 1b       	sub	r20, r16
     58a:	51 0b       	sbc	r21, r17
     58c:	b8 01       	movw	r22, r16
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
     594:	cd bf       	out	0x3d, r28	; 61
     596:	de bf       	out	0x3e, r29	; 62
     598:	cc 5e       	subi	r28, 0xEC	; 236
     59a:	de 4f       	sbci	r29, 0xFE	; 254
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <get_cmdline>:
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	9c 01       	movw	r18, r24
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	1c c0       	rjmp	.+56     	; 0x5ec <get_cmdline+0x42>
     5b4:	c7 e1       	ldi	r28, 0x17	; 23
     5b6:	dc e2       	ldi	r29, 0x2C	; 44
     5b8:	e8 81       	ld	r30, Y
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	e9 5e       	subi	r30, 0xE9	; 233
     5be:	f4 4d       	sbci	r31, 0xD4	; 212
     5c0:	80 81       	ld	r24, Z
     5c2:	f9 01       	movw	r30, r18
     5c4:	e4 0f       	add	r30, r20
     5c6:	f1 1d       	adc	r31, r1
     5c8:	80 83       	st	Z, r24
     5ca:	a9 e1       	ldi	r26, 0x19	; 25
     5cc:	bc e2       	ldi	r27, 0x2C	; 44
     5ce:	8c 91       	ld	r24, X
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	8c 93       	st	X, r24
     5d4:	88 81       	ld	r24, Y
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	6f ef       	ldi	r22, 0xFF	; 255
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
     5e2:	88 83       	st	Y, r24
     5e4:	80 81       	ld	r24, Z
     5e6:	88 23       	and	r24, r24
     5e8:	29 f0       	breq	.+10     	; 0x5f4 <get_cmdline+0x4a>
     5ea:	4f 5f       	subi	r20, 0xFF	; 255
     5ec:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
     5f0:	81 11       	cpse	r24, r1
     5f2:	e0 cf       	rjmp	.-64     	; 0x5b4 <get_cmdline+0xa>
     5f4:	f9 01       	movw	r30, r18
     5f6:	e4 0f       	add	r30, r20
     5f8:	f1 1d       	adc	r31, r1
     5fa:	10 82       	st	Z, r1
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     602:	9f e9       	ldi	r25, 0x9F	; 159
     604:	98 0f       	add	r25, r24
     606:	9a 31       	cpi	r25, 0x1A	; 26
     608:	28 f0       	brcs	.+10     	; 0x614 <isaletter+0x12>
     60a:	81 54       	subi	r24, 0x41	; 65
     60c:	8a 31       	cpi	r24, 0x1A	; 26
     60e:	20 f4       	brcc	.+8      	; 0x618 <isaletter+0x16>
		return(1);
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
	}
	return(0);
     618:	80 e0       	ldi	r24, 0x00	; 0

}
     61a:	08 95       	ret

0000061c <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     628:	e6 2e       	mov	r14, r22
     62a:	f1 2c       	mov	r15, r1
     62c:	84 e3       	ldi	r24, 0x34	; 52
     62e:	8e 9d       	mul	r24, r14
     630:	f0 01       	movw	r30, r0
     632:	8f 9d       	mul	r24, r15
     634:	f0 0d       	add	r31, r0
     636:	11 24       	eor	r1, r1
     638:	ed 5f       	subi	r30, 0xFD	; 253
     63a:	f7 4d       	sbci	r31, 0xD7	; 215
     63c:	8f e3       	ldi	r24, 0x3F	; 63
     63e:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     640:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     642:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     644:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     646:	04 c0       	rjmp	.+8      	; 0x650 <parse_cmd+0x34>
		if (*ptr == '\0') {
     648:	11 23       	and	r17, r17
     64a:	09 f4       	brne	.+2      	; 0x64e <parse_cmd+0x32>
     64c:	75 c0       	rjmp	.+234    	; 0x738 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     64e:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     650:	18 81       	ld	r17, Y
     652:	81 2f       	mov	r24, r17
     654:	0e 94 01 03 	call	0x602	; 0x602 <isaletter>
     658:	88 23       	and	r24, r24
     65a:	b1 f3       	breq	.-20     	; 0x648 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     65c:	21 96       	adiw	r28, 0x01	; 1
     65e:	84 e3       	ldi	r24, 0x34	; 52
     660:	8e 9d       	mul	r24, r14
     662:	f0 01       	movw	r30, r0
     664:	8f 9d       	mul	r24, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	ed 5f       	subi	r30, 0xFD	; 253
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x5e>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x5c>
     676:	60 c0       	rjmp	.+192    	; 0x738 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 01 03 	call	0x602	; 0x602 <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	ed 5f       	subi	r30, 0xFD	; 253
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	2a c0       	rjmp	.+84     	; 0x6f2 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     69e:	98 81       	ld	r25, Y
     6a0:	91 11       	cpse	r25, r1
     6a2:	0c c0       	rjmp	.+24     	; 0x6bc <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6a4:	94 e3       	ldi	r25, 0x34	; 52
     6a6:	9e 9d       	mul	r25, r14
     6a8:	f0 01       	movw	r30, r0
     6aa:	9f 9d       	mul	r25, r15
     6ac:	f0 0d       	add	r31, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	ed 5f       	subi	r30, 0xFD	; 253
     6b2:	f7 4d       	sbci	r31, 0xD7	; 215
     6b4:	e8 0f       	add	r30, r24
     6b6:	f1 1d       	adc	r31, r1
     6b8:	12 82       	std	Z+2, r1	; 0x02
			return;
     6ba:	3e c0       	rjmp	.+124    	; 0x738 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     6bc:	9b 33       	cpi	r25, 0x3B	; 59
     6be:	61 f4       	brne	.+24     	; 0x6d8 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6c0:	94 e3       	ldi	r25, 0x34	; 52
     6c2:	9e 9d       	mul	r25, r14
     6c4:	f0 01       	movw	r30, r0
     6c6:	9f 9d       	mul	r25, r15
     6c8:	f0 0d       	add	r31, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	ed 5f       	subi	r30, 0xFD	; 253
     6ce:	f7 4d       	sbci	r31, 0xD7	; 215
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	12 82       	std	Z+2, r1	; 0x02
			break;
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6d8:	21 96       	adiw	r28, 0x01	; 1
     6da:	24 e3       	ldi	r18, 0x34	; 52
     6dc:	2e 9d       	mul	r18, r14
     6de:	f0 01       	movw	r30, r0
     6e0:	2f 9d       	mul	r18, r15
     6e2:	f0 0d       	add	r31, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	ed 5f       	subi	r30, 0xFD	; 253
     6e8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ea:	e8 0f       	add	r30, r24
     6ec:	f1 1d       	adc	r31, r1
     6ee:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	89 32       	cpi	r24, 0x29	; 41
     6f4:	a0 f2       	brcs	.-88     	; 0x69e <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     6f6:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	1c c0       	rjmp	.+56     	; 0x734 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6fc:	98 81       	ld	r25, Y
     6fe:	91 11       	cpse	r25, r1
     700:	0c c0       	rjmp	.+24     	; 0x71a <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     702:	94 e3       	ldi	r25, 0x34	; 52
     704:	9e 9d       	mul	r25, r14
     706:	f0 01       	movw	r30, r0
     708:	9f 9d       	mul	r25, r15
     70a:	f0 0d       	add	r31, r0
     70c:	11 24       	eor	r1, r1
     70e:	ed 5f       	subi	r30, 0xFD	; 253
     710:	f7 4d       	sbci	r31, 0xD7	; 215
     712:	e8 0f       	add	r30, r24
     714:	f1 1d       	adc	r31, r1
     716:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     718:	0f c0       	rjmp	.+30     	; 0x738 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     71a:	21 96       	adiw	r28, 0x01	; 1
     71c:	24 e3       	ldi	r18, 0x34	; 52
     71e:	2e 9d       	mul	r18, r14
     720:	f0 01       	movw	r30, r0
     722:	2f 9d       	mul	r18, r15
     724:	f0 0d       	add	r31, r0
     726:	11 24       	eor	r1, r1
     728:	ed 5f       	subi	r30, 0xFD	; 253
     72a:	f7 4d       	sbci	r31, 0xD7	; 215
     72c:	e8 0f       	add	r30, r24
     72e:	f1 1d       	adc	r31, r1
     730:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	89 30       	cpi	r24, 0x09	; 9
     736:	10 f3       	brcs	.-60     	; 0x6fc <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	6d 97       	sbiw	r28, 0x1d	; 29
     752:	cd bf       	out	0x3d, r28	; 61
     754:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     756:	2e e3       	ldi	r18, 0x3E	; 62
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	29 83       	std	Y+1, r18	; 0x01
     75c:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     75e:	21 e2       	ldi	r18, 0x21	; 33
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	2b 83       	std	Y+3, r18	; 0x03
     764:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     766:	88 23       	and	r24, r24
     768:	19 f0       	breq	.+6      	; 0x770 <send_prompt+0x2c>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	b9 f0       	breq	.+46     	; 0x79c <send_prompt+0x58>
     76e:	2c c0       	rjmp	.+88     	; 0x7c8 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     770:	8e 01       	movw	r16, r28
     772:	0b 5f       	subi	r16, 0xFB	; 251
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 1a 20 	call	0x4034	; 0x4034 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     782:	f8 01       	movw	r30, r16
     784:	01 90       	ld	r0, Z+
     786:	00 20       	and	r0, r0
     788:	e9 f7       	brne	.-6      	; 0x784 <send_prompt+0x40>
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	af 01       	movw	r20, r30
     78e:	40 1b       	sub	r20, r16
     790:	51 0b       	sbc	r21, r17
     792:	b8 01       	movw	r22, r16
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			break;
     79a:	2b c0       	rjmp	.+86     	; 0x7f2 <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     79c:	8e 01       	movw	r16, r28
     79e:	0b 5f       	subi	r16, 0xFB	; 251
     7a0:	1f 4f       	sbci	r17, 0xFF	; 255
     7a2:	be 01       	movw	r22, r28
     7a4:	6d 5f       	subi	r22, 0xFD	; 253
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 1a 20 	call	0x4034	; 0x4034 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ae:	f8 01       	movw	r30, r16
     7b0:	01 90       	ld	r0, Z+
     7b2:	00 20       	and	r0, r0
     7b4:	e9 f7       	brne	.-6      	; 0x7b0 <send_prompt+0x6c>
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	af 01       	movw	r20, r30
     7ba:	40 1b       	sub	r20, r16
     7bc:	51 0b       	sbc	r21, r17
     7be:	b8 01       	movw	r22, r16
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			break;
     7c6:	15 c0       	rjmp	.+42     	; 0x7f2 <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     7c8:	8e 01       	movw	r16, r28
     7ca:	0b 5f       	subi	r16, 0xFB	; 251
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	be 01       	movw	r22, r28
     7d0:	6d 5f       	subi	r22, 0xFD	; 253
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 1a 20 	call	0x4034	; 0x4034 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7da:	f8 01       	movw	r30, r16
     7dc:	01 90       	ld	r0, Z+
     7de:	00 20       	and	r0, r0
     7e0:	e9 f7       	brne	.-6      	; 0x7dc <send_prompt+0x98>
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	af 01       	movw	r20, r30
     7e6:	40 1b       	sub	r20, r16
     7e8:	51 0b       	sbc	r21, r17
     7ea:	b8 01       	movw	r22, r16
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			break;

	}

}
     7f2:	6d 96       	adiw	r28, 0x1d	; 29
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <rebootACKd>:
uint8_t rebootACKd(char *cmdline)
{

	static uint8_t rebootnack = 1;
	
	if (rebootnack) {
     802:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     806:	22 23       	and	r18, r18
     808:	31 f1       	breq	.+76     	; 0x856 <rebootACKd+0x54>
     80a:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     80c:	80 81       	ld	r24, Z
     80e:	81 32       	cpi	r24, 0x21	; 33
     810:	a1 f4       	brne	.+40     	; 0x83a <rebootACKd+0x38>
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	91 11       	cpse	r25, r1
     816:	11 c0       	rjmp	.+34     	; 0x83a <rebootACKd+0x38>
			init_RTC(511);		// 1-sec RTC clock ticks
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     828:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 a2 03 	call	0x744	; 0x744 <send_prompt>
			rebootnack = 0;
     832:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return(YES);
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	08 95       	ret
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     83a:	81 32       	cpi	r24, 0x21	; 33
     83c:	39 f4       	brne	.+14     	; 0x84c <rebootACKd+0x4a>
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	88 23       	and	r24, r24
     842:	21 f0       	breq	.+8      	; 0x84c <rebootACKd+0x4a>
//			send_prompt(EXCLAIMPROMPT);
			reboot();
     844:	0e 94 b0 18 	call	0x3160	; 0x3160 <reboot>
			return(NO);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	08 95       	ret
		} else {
			send_prompt(EXCLAIMPROMPT);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 a2 03 	call	0x744	; 0x744 <send_prompt>
			return(NO);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	08 95       	ret
		}
	}

	return(YES);
     856:	81 e0       	ldi	r24, 0x01	; 1

}
     858:	08 95       	ret

0000085a <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	cf 5f       	subi	r28, 0xFF	; 255
     864:	d1 09       	sbc	r29, r1
     866:	cd bf       	out	0x3d, r28	; 61
     868:	de bf       	out	0x3e, r29	; 62
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
*/
	get_cmdline(cmdline);
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <get_cmdline>

	if (!rebootACKd(cmdline)) {
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	0e 94 01 04 	call	0x802	; 0x802 <rebootACKd>
     87a:	88 23       	and	r24, r24
     87c:	09 f4       	brne	.+2      	; 0x880 <commands+0x26>
     87e:	5d c0       	rjmp	.+186    	; 0x93a <commands+0xe0>
			return;
		}
	}
*/
	// Echo the command back to the user
		echo_cmd(cmdline);
     880:	ce 01       	movw	r24, r28
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	0e 94 90 02 	call	0x520	; 0x520 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	81 11       	cpse	r24, r1
     88c:	03 c0       	rjmp	.+6      	; 0x894 <commands+0x3a>
		send_prompt(GREATERPROMPT);
     88e:	0e 94 a2 03 	call	0x744	; 0x744 <send_prompt>
		return;
     892:	53 c0       	rjmp	.+166    	; 0x93a <commands+0xe0>
	}

	parse_cmd(cmdline, cstack);
     894:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 0e 03 	call	0x61c	; 0x61c <parse_cmd>
	verb = pcmd[cstack].cverb;
     8a0:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8a4:	24 e3       	ldi	r18, 0x34	; 52
     8a6:	82 9f       	mul	r24, r18
     8a8:	d0 01       	movw	r26, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	ad 5f       	subi	r26, 0xFD	; 253
     8ae:	b7 4d       	sbci	r27, 0xD7	; 215
     8b0:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8b2:	11 96       	adiw	r26, 0x01	; 1
     8b4:	9c 91       	ld	r25, X

	switch (verb) {
     8b6:	4e 2f       	mov	r20, r30
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	fa 01       	movw	r30, r20
     8bc:	e2 55       	subi	r30, 0x52	; 82
     8be:	f1 09       	sbc	r31, r1
     8c0:	e3 32       	cpi	r30, 0x23	; 35
     8c2:	f1 05       	cpc	r31, r1
     8c4:	60 f5       	brcc	.+88     	; 0x91e <commands+0xc4>
     8c6:	e0 5b       	subi	r30, 0xB0	; 176
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8ce:	89 2f       	mov	r24, r25
     8d0:	0e 94 30 0c 	call	0x1860	; 0x1860 <close_PNEU>
     8d4:	28 2f       	mov	r18, r24
			break;
     8d6:	24 c0       	rjmp	.+72     	; 0x920 <commands+0xc6>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8d8:	89 2f       	mov	r24, r25
     8da:	0e 94 c2 0c 	call	0x1984	; 0x1984 <open_PNEU>
     8de:	28 2f       	mov	r18, r24
			break;
     8e0:	1f c0       	rjmp	.+62     	; 0x920 <commands+0xc6>

		case 'm':				// move
			ROBOMove(cstack);
     8e2:	0e 94 23 14 	call	0x2846	; 0x2846 <ROBOMove>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     8e6:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(object);
			break;

		case 'm':				// move
			ROBOMove(cstack);
			break;
     8e8:	1b c0       	rjmp	.+54     	; 0x920 <commands+0xc6>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8ea:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <report>
     8ee:	28 2f       	mov	r18, r24
			break;
     8f0:	17 c0       	rjmp	.+46     	; 0x920 <commands+0xc6>

		case 's':				// Set
			prompt_flag = set(cstack);
     8f2:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <set>
     8f6:	28 2f       	mov	r18, r24
			break;
     8f8:	13 c0       	rjmp	.+38     	; 0x920 <commands+0xc6>

		case 't':
			testroutine();
     8fa:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     900:	0f c0       	rjmp	.+30     	; 0x920 <commands+0xc6>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 a2 03 	call	0x744	; 0x744 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     908:	8a e6       	ldi	r24, 0x6A	; 106
     90a:	94 e0       	ldi	r25, 0x04	; 4
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	90 40       	sbci	r25, 0x00	; 0
     912:	20 40       	sbci	r18, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <commands+0xb4>
     916:	00 c0       	rjmp	.+0      	; 0x918 <commands+0xbe>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     918:	0e 94 b0 18 	call	0x3160	; 0x3160 <reboot>
			return;
     91c:	0e c0       	rjmp	.+28     	; 0x93a <commands+0xe0>

		default:
			prompt_flag = GREATERPROMPT;
     91e:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     920:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	6a e0       	ldi	r22, 0x0A	; 10
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
     930:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     934:	82 2f       	mov	r24, r18
     936:	0e 94 a2 03 	call	0x744	; 0x744 <send_prompt>

}
     93a:	c1 50       	subi	r28, 0x01	; 1
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	de bf       	out	0x3e, r29	; 62
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     948:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     94a:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     94c:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     94e:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     950:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     952:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     954:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     956:	1f 92       	push	r1
     958:	7f 93       	push	r23
     95a:	1f 92       	push	r1
     95c:	6f 93       	push	r22
     95e:	1f 92       	push	r1
     960:	5f 93       	push	r21
     962:	1f 92       	push	r1
     964:	4f 93       	push	r20
     966:	1f 92       	push	r1
     968:	3f 93       	push	r19
     96a:	1f 92       	push	r1
     96c:	2f 93       	push	r18
     96e:	21 e9       	ldi	r18, 0x91	; 145
     970:	32 e8       	ldi	r19, 0x82	; 130
     972:	3f 93       	push	r19
     974:	2f 93       	push	r18
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
		year, month, date, hours, minutes, seconds);

}
     97e:	8d b7       	in	r24, 0x3d	; 61
     980:	9e b7       	in	r25, 0x3e	; 62
     982:	40 96       	adiw	r24, 0x10	; 16
     984:	8d bf       	out	0x3d, r24	; 61
     986:	9e bf       	out	0x3e, r25	; 62
     988:	08 95       	ret

0000098a <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     98a:	dc 01       	movw	r26, r24
     98c:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     98e:	81 89       	ldd	r24, Z+17	; 0x11
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	c0 97       	sbiw	r24, 0x30	; 48
     994:	82 95       	swap	r24
     996:	92 95       	swap	r25
     998:	90 7f       	andi	r25, 0xF0	; 240
     99a:	98 27       	eor	r25, r24
     99c:	80 7f       	andi	r24, 0xF0	; 240
     99e:	98 27       	eor	r25, r24
     9a0:	92 89       	ldd	r25, Z+18	; 0x12
     9a2:	90 53       	subi	r25, 0x30	; 48
     9a4:	89 2b       	or	r24, r25
     9a6:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9a8:	86 85       	ldd	r24, Z+14	; 0x0e
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	c0 97       	sbiw	r24, 0x30	; 48
     9ae:	82 95       	swap	r24
     9b0:	92 95       	swap	r25
     9b2:	90 7f       	andi	r25, 0xF0	; 240
     9b4:	98 27       	eor	r25, r24
     9b6:	80 7f       	andi	r24, 0xF0	; 240
     9b8:	98 27       	eor	r25, r24
     9ba:	97 85       	ldd	r25, Z+15	; 0x0f
     9bc:	90 53       	subi	r25, 0x30	; 48
     9be:	89 2b       	or	r24, r25
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	8c 93       	st	X, r24
     9c4:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9c6:	83 85       	ldd	r24, Z+11	; 0x0b
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	c0 97       	sbiw	r24, 0x30	; 48
     9cc:	82 95       	swap	r24
     9ce:	92 95       	swap	r25
     9d0:	90 7f       	andi	r25, 0xF0	; 240
     9d2:	98 27       	eor	r25, r24
     9d4:	80 7f       	andi	r24, 0xF0	; 240
     9d6:	98 27       	eor	r25, r24
     9d8:	94 85       	ldd	r25, Z+12	; 0x0c
     9da:	90 53       	subi	r25, 0x30	; 48
     9dc:	89 2b       	or	r24, r25
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	8c 93       	st	X, r24
     9e2:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	8c 93       	st	X, r24
     9ea:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9ec:	80 85       	ldd	r24, Z+8	; 0x08
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	c0 97       	sbiw	r24, 0x30	; 48
     9f2:	82 95       	swap	r24
     9f4:	92 95       	swap	r25
     9f6:	90 7f       	andi	r25, 0xF0	; 240
     9f8:	98 27       	eor	r25, r24
     9fa:	80 7f       	andi	r24, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	91 85       	ldd	r25, Z+9	; 0x09
     a00:	90 53       	subi	r25, 0x30	; 48
     a02:	89 2b       	or	r24, r25
     a04:	14 96       	adiw	r26, 0x04	; 4
     a06:	8c 93       	st	X, r24
     a08:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a0a:	25 81       	ldd	r18, Z+5	; 0x05
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	20 53       	subi	r18, 0x30	; 48
     a10:	31 09       	sbc	r19, r1
     a12:	22 95       	swap	r18
     a14:	32 95       	swap	r19
     a16:	30 7f       	andi	r19, 0xF0	; 240
     a18:	32 27       	eor	r19, r18
     a1a:	20 7f       	andi	r18, 0xF0	; 240
     a1c:	32 27       	eor	r19, r18
     a1e:	86 81       	ldd	r24, Z+6	; 0x06
     a20:	80 53       	subi	r24, 0x30	; 48
     a22:	28 2b       	or	r18, r24
     a24:	15 96       	adiw	r26, 0x05	; 5
     a26:	2c 93       	st	X, r18
     a28:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a2a:	22 81       	ldd	r18, Z+2	; 0x02
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	20 53       	subi	r18, 0x30	; 48
     a30:	31 09       	sbc	r19, r1
     a32:	22 95       	swap	r18
     a34:	32 95       	swap	r19
     a36:	30 7f       	andi	r19, 0xF0	; 240
     a38:	32 27       	eor	r19, r18
     a3a:	20 7f       	andi	r18, 0xF0	; 240
     a3c:	32 27       	eor	r19, r18
     a3e:	83 81       	ldd	r24, Z+3	; 0x03
     a40:	80 53       	subi	r24, 0x30	; 48
     a42:	28 2b       	or	r18, r24
     a44:	16 96       	adiw	r26, 0x06	; 6
     a46:	2c 93       	st	X, r18
     a48:	08 95       	ret

00000a4a <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     a5c:	c8 2f       	mov	r28, r24
     a5e:	88 23       	and	r24, r24
     a60:	21 f0       	breq	.+8      	; 0xa6a <read_DS3231+0x20>
		stop_TWI();
     a62:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     a66:	8c 2f       	mov	r24, r28
     a68:	28 c0       	rjmp	.+80     	; 0xaba <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     a70:	c8 2f       	mov	r28, r24
     a72:	88 23       	and	r24, r24
     a74:	21 f0       	breq	.+8      	; 0xa7e <read_DS3231+0x34>
		stop_TWI();
     a76:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     a7a:	8c 2f       	mov	r24, r28
     a7c:	1e c0       	rjmp	.+60     	; 0xaba <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	88 e6       	ldi	r24, 0x68	; 104
     a82:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     a86:	c8 2f       	mov	r28, r24
     a88:	88 23       	and	r24, r24
     a8a:	69 f0       	breq	.+26     	; 0xaa6 <read_DS3231+0x5c>
		stop_TWI();
     a8c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     a90:	8c 2f       	mov	r24, r28
     a92:	13 c0       	rjmp	.+38     	; 0xaba <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a94:	87 01       	movw	r16, r14
     a96:	0c 0f       	add	r16, r28
     a98:	11 1d       	adc	r17, r1
     a9a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <read_TWI>
     a9e:	f8 01       	movw	r30, r16
     aa0:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     aa2:	cf 5f       	subi	r28, 0xFF	; 255
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <read_DS3231+0x5e>
     aa6:	c0 e0       	ldi	r28, 0x00	; 0
     aa8:	c6 30       	cpi	r28, 0x06	; 6
     aaa:	a0 f3       	brcs	.-24     	; 0xa94 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     aac:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
     ab0:	f7 01       	movw	r30, r14
     ab2:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ab4:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	return(0);
     ab8:	80 e0       	ldi	r24, 0x00	; 0

}
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	08 95       	ret

00000ac6 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	27 97       	sbiw	r28, 0x07	; 7
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     ada:	be 01       	movw	r22, r28
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	88 e6       	ldi	r24, 0x68	; 104
     ae2:	0e 94 25 05 	call	0xa4a	; 0xa4a <read_DS3231>
     ae6:	88 23       	and	r24, r24
     ae8:	49 f0       	breq	.+18     	; 0xafc <get_time+0x36>
		strcpy(isotime, "CurrentTime?");
     aea:	9d e0       	ldi	r25, 0x0D	; 13
     aec:	e1 eb       	ldi	r30, 0xB1	; 177
     aee:	f2 e8       	ldi	r31, 0x82	; 130
     af0:	d8 01       	movw	r26, r16
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	9a 95       	dec	r25
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <get_time+0x2c>
		return(retval);
     afa:	07 c0       	rjmp	.+14     	; 0xb0a <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     afc:	be 01       	movw	r22, r28
     afe:	6f 5f       	subi	r22, 0xFF	; 255
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	c8 01       	movw	r24, r16
     b04:	0e 94 a4 04 	call	0x948	; 0x948 <convert_ds2iso>
	return(0);
     b08:	80 e0       	ldi	r24, 0x00	; 0

}
     b0a:	27 96       	adiw	r28, 0x07	; 7
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     b2e:	c8 2f       	mov	r28, r24
     b30:	88 23       	and	r24, r24
     b32:	21 f0       	breq	.+8      	; 0xb3c <write_DS3231+0x22>
		stop_TWI();
     b34:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     b38:	8c 2f       	mov	r24, r28
     b3a:	22 c0       	rjmp	.+68     	; 0xb80 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     b42:	c8 2f       	mov	r28, r24
     b44:	88 23       	and	r24, r24
     b46:	b1 f0       	breq	.+44     	; 0xb74 <write_DS3231+0x5a>
		stop_TWI();
     b48:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
     b4c:	8c 2f       	mov	r24, r28
     b4e:	18 c0       	rjmp	.+48     	; 0xb80 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b50:	78 01       	movw	r14, r16
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	e8 1a       	sub	r14, r24
     b56:	f8 0a       	sbc	r15, r24
     b58:	f8 01       	movw	r30, r16
     b5a:	80 81       	ld	r24, Z
     b5c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     b60:	c8 2f       	mov	r28, r24
     b62:	88 23       	and	r24, r24
     b64:	21 f0       	breq	.+8      	; 0xb6e <write_DS3231+0x54>
			stop_TWI();
     b66:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
			return(retval);
     b6a:	8c 2f       	mov	r24, r28
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b6e:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b70:	87 01       	movw	r16, r14
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <write_DS3231+0x5c>
     b74:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b76:	d7 30       	cpi	r29, 0x07	; 7
     b78:	58 f3       	brcs	.-42     	; 0xb50 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b7a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	return(0);
     b7e:	80 e0       	ldi	r24, 0x00	; 0

}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	27 97       	sbiw	r28, 0x07	; 7
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b9c:	bc 01       	movw	r22, r24
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 c5 04 	call	0x98a	; 0x98a <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     ba6:	be 01       	movw	r22, r28
     ba8:	6f 5f       	subi	r22, 0xFF	; 255
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	88 e6       	ldi	r24, 0x68	; 104
     bae:	0e 94 8d 05 	call	0xb1a	; 0xb1a <write_DS3231>
		return(retval);
	}
	return(0);

}
     bb2:	27 96       	adiw	r28, 0x07	; 7
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bbe:	45 e1       	ldi	r20, 0x15	; 21
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	6b e0       	ldi	r22, 0x0B	; 11
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <eeprom_read_block>
     bca:	08 95       	ret

00000bcc <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bcc:	4b e0       	ldi	r20, 0x0B	; 11
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <eeprom_read_block>
     bd8:	08 95       	ret

00000bda <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	65 97       	sbiw	r28, 0x15	; 21
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bf0:	45 e1       	ldi	r20, 0x15	; 21
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	6b e0       	ldi	r22, 0x0B	; 11
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 01 21 	call	0x4202	; 0x4202 <eeprom_update_block>

}
     c00:	65 96       	adiw	r28, 0x15	; 21
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <update_VERSION>:

void update_VERSION(void)
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	2b 97       	sbiw	r28, 0x0b	; 11
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c1a:	8b e0       	ldi	r24, 0x0B	; 11
     c1c:	ee eb       	ldi	r30, 0xBE	; 190
     c1e:	f2 e8       	ldi	r31, 0x82	; 130
     c20:	de 01       	movw	r26, r28
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	01 90       	ld	r0, Z+
     c26:	0d 92       	st	X+, r0
     c28:	8a 95       	dec	r24
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c2c:	4b e0       	ldi	r20, 0x0B	; 11
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 01 21 	call	0x4202	; 0x4202 <eeprom_update_block>

}
     c3c:	2b 96       	adiw	r28, 0x0b	; 11
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c48:	0e 94 ed 05 	call	0xbda	; 0xbda <update_BOOTTIME>
	update_VERSION();
     c4c:	0e 94 06 06 	call	0xc0c	; 0xc0c <update_VERSION>
     c50:	08 95       	ret

00000c52 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	cf 55       	subi	r28, 0x5F	; 95
     c60:	d1 09       	sbc	r29, r1
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errorFormat[] = "$S%dERR,%d,%s";
     c66:	2e e0       	ldi	r18, 0x0E	; 14
     c68:	e9 ec       	ldi	r30, 0xC9	; 201
     c6a:	f2 e8       	ldi	r31, 0x82	; 130
     c6c:	de 01       	movw	r26, r28
     c6e:	ae 5a       	subi	r26, 0xAE	; 174
     c70:	bf 4f       	sbci	r27, 0xFF	; 255
     c72:	01 90       	ld	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	2a 95       	dec	r18
     c78:	e1 f7       	brne	.-8      	; 0xc72 <printError+0x20>

	sprintf(strbuf, errorFormat, get_SPECID, errorNumber, errorString);
     c7a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     c7e:	22 ff       	sbrs	r18, 2
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <printError+0x36>
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <printError+0x3a>
     c88:	21 e0       	ldi	r18, 0x01	; 1
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	7f 93       	push	r23
     c8e:	6f 93       	push	r22
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	3f 93       	push	r19
     c96:	2f 93       	push	r18
     c98:	ce 01       	movw	r24, r28
     c9a:	8e 5a       	subi	r24, 0xAE	; 174
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	8e 01       	movw	r16, r28
     ca4:	0f 5f       	subi	r16, 0xFF	; 255
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	1f 93       	push	r17
     caa:	0f 93       	push	r16
     cac:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
	checksum_NMEA(strbuf);
     cb0:	c8 01       	movw	r24, r16
     cb2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     cb6:	f8 01       	movw	r30, r16
     cb8:	01 90       	ld	r0, Z+
     cba:	00 20       	and	r0, r0
     cbc:	e9 f7       	brne	.-6      	; 0xcb8 <printError+0x66>
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	af 01       	movw	r20, r30
     cc2:	40 1b       	sub	r20, r16
     cc4:	51 0b       	sbc	r21, r17
     cc6:	b8 01       	movw	r22, r16
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>

}
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	c1 5a       	subi	r28, 0xA1	; 161
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	c8 2f       	mov	r28, r24
     cf2:	e6 2e       	mov	r14, r22
     cf4:	f7 2e       	mov	r15, r23
     cf6:	8a 01       	movw	r16, r20
     cf8:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     d00:	81 11       	cpse	r24, r1
     d02:	2b c0       	rjmp	.+86     	; 0xd5a <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     d04:	8f 2d       	mov	r24, r15
     d06:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     d0a:	81 11       	cpse	r24, r1
     d0c:	26 c0       	rjmp	.+76     	; 0xd5a <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     d0e:	8e 2d       	mov	r24, r14
     d10:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     d14:	81 11       	cpse	r24, r1
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	8c 2f       	mov	r24, r28
     d1c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     d20:	81 11       	cpse	r24, r1
     d22:	1b c0       	rjmp	.+54     	; 0xd5a <read_FRAM+0x76>
     d24:	c0 e0       	ldi	r28, 0x00	; 0
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d28:	78 01       	movw	r14, r16
     d2a:	ec 0e       	add	r14, r28
     d2c:	f1 1c       	adc	r15, r1
     d2e:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <read_TWI>
     d32:	f7 01       	movw	r30, r14
     d34:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d36:	cf 5f       	subi	r28, 0xFF	; 255
     d38:	2c 2f       	mov	r18, r28
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	8d 2f       	mov	r24, r29
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	84 f3       	brlt	.-32     	; 0xd28 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     d48:	ec 01       	movw	r28, r24
     d4a:	c0 0f       	add	r28, r16
     d4c:	d1 1f       	adc	r29, r17
     d4e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
     d52:	88 83       	st	Y, r24

	stop_TWI();
     d54:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	return(0);
     d58:	80 e0       	ldi	r24, 0x00	; 0

}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	08 95       	ret

00000d68 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	f6 2e       	mov	r15, r22
     d76:	17 2f       	mov	r17, r23
     d78:	ea 01       	movw	r28, r20
     d7a:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
     d82:	81 11       	cpse	r24, r1
     d84:	1c c0       	rjmp	.+56     	; 0xdbe <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     d86:	81 2f       	mov	r24, r17
     d88:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     d8c:	81 11       	cpse	r24, r1
     d8e:	17 c0       	rjmp	.+46     	; 0xdbe <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     d90:	8f 2d       	mov	r24, r15
     d92:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     d96:	81 11       	cpse	r24, r1
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <write_FRAM+0x56>
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d9e:	7e 01       	movw	r14, r28
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	e8 1a       	sub	r14, r24
     da4:	f8 0a       	sbc	r15, r24
     da6:	88 81       	ld	r24, Y
     da8:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
     dac:	81 11       	cpse	r24, r1
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     db0:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     db2:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     db4:	10 17       	cp	r17, r16
     db6:	98 f3       	brcs	.-26     	; 0xd9e <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     db8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	return(0);
     dbc:	80 e0       	ldi	r24, 0x00	; 0

}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     dcc:	8f 92       	push	r8
     dce:	9f 92       	push	r9
     dd0:	af 92       	push	r10
     dd2:	bf 92       	push	r11
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	59 f0       	breq	.+22     	; 0xdf6 <get_humidity+0x2a>
     de0:	18 f0       	brcs	.+6      	; 0xde8 <get_humidity+0x1c>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	79 f0       	breq	.+30     	; 0xe04 <get_humidity+0x38>
     de6:	15 c0       	rjmp	.+42     	; 0xe12 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
     dee:	4b 01       	movw	r8, r22
     df0:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     df2:	40 e4       	ldi	r20, 0x40	; 64
			break;
     df4:	17 c0       	rjmp	.+46     	; 0xe24 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     e00:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e02:	10 c0       	rjmp	.+32     	; 0xe24 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
     e0a:	4b 01       	movw	r8, r22
     e0c:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     e0e:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e12:	0f 2e       	mov	r0, r31
     e14:	81 2c       	mov	r8, r1
     e16:	91 2c       	mov	r9, r1
     e18:	f0 ea       	ldi	r31, 0xA0	; 160
     e1a:	af 2e       	mov	r10, r31
     e1c:	f1 e4       	ldi	r31, 0x41	; 65
     e1e:	bf 2e       	mov	r11, r31
     e20:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e22:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     e24:	20 e8       	ldi	r18, 0x80	; 128
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	88 e4       	ldi	r24, 0x48	; 72
     e2a:	0e 94 8a 01 	call	0x314	; 0x314 <read_ADS1115>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 ea       	ldi	r20, 0xA0	; 160
     e34:	50 e4       	ldi	r21, 0x40	; 64
     e36:	0e 94 38 19 	call	0x3270	; 0x3270 <__divsf3>
     e3a:	2a e0       	ldi	r18, 0x0A	; 10
     e3c:	37 ed       	ldi	r19, 0xD7	; 215
     e3e:	43 e2       	ldi	r20, 0x23	; 35
     e40:	5e e3       	ldi	r21, 0x3E	; 62
     e42:	0e 94 c6 18 	call	0x318c	; 0x318c <__subsf3>
     e46:	2f e5       	ldi	r18, 0x5F	; 95
     e48:	39 e2       	ldi	r19, 0x29	; 41
     e4a:	4b ec       	ldi	r20, 0xCB	; 203
     e4c:	5b e3       	ldi	r21, 0x3B	; 59
     e4e:	0e 94 38 19 	call	0x3270	; 0x3270 <__divsf3>
     e52:	6b 01       	movw	r12, r22
     e54:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     e56:	29 ec       	ldi	r18, 0xC9	; 201
     e58:	3e e8       	ldi	r19, 0x8E	; 142
     e5a:	4d e0       	ldi	r20, 0x0D	; 13
     e5c:	5b e3       	ldi	r21, 0x3B	; 59
     e5e:	c5 01       	movw	r24, r10
     e60:	b4 01       	movw	r22, r8
     e62:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	62 e2       	ldi	r22, 0x22	; 34
     e6c:	7d ef       	ldi	r23, 0xFD	; 253
     e6e:	86 e8       	ldi	r24, 0x86	; 134
     e70:	9f e3       	ldi	r25, 0x3F	; 63
     e72:	0e 94 c6 18 	call	0x318c	; 0x318c <__subsf3>
     e76:	9b 01       	movw	r18, r22
     e78:	ac 01       	movw	r20, r24
     e7a:	c7 01       	movw	r24, r14
     e7c:	b6 01       	movw	r22, r12
     e7e:	0e 94 38 19 	call	0x3270	; 0x3270 <__divsf3>
	return(humidity);

}
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	08 95       	ret

00000e94 <initialize>:
#include "initialize.h"
#include "oled.h"
#include "eeprom.h"

void initialize(void)
{
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	2b 97       	sbiw	r28, 0x0b	; 11
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     ea2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     ea6:	8b e0       	ldi	r24, 0x0B	; 11
     ea8:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     eac:	0e 94 ba 18 	call	0x3174	; 0x3174 <init_XPORT>
	init_SPECID();
     eb0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <init_SPECID>
	init_LED();
     eb4:	0e 94 08 08 	call	0x1010	; 0x1010 <init_LED>
	init_BEEPER();
     eb8:	0e 94 89 02 	call	0x512	; 0x512 <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <init_RTC>
	init_USART();
     ec4:	0e 94 93 16 	call	0x2d26	; 0x2d26 <init_USART>
	init_TWI();
     ec8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <init_TWI>
	init_MMA8451();
     ecc:	0e 94 a0 09 	call	0x1340	; 0x1340 <init_MMA8451>
	init_PNEU();
     ed0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <init_PNEU>
	init_OLED(0);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 2d 0a 	call	0x145a	; 0x145a <init_OLED>
	init_OLED(1);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 2d 0a 	call	0x145a	; 0x145a <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     ee0:	0e 94 24 06 	call	0xc48	; 0xc48 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     ee4:	80 ee       	ldi	r24, 0xE0	; 224
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     eec:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
	get_VERSION(versionstr);
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	67 ed       	ldi	r22, 0xD7	; 215
     efc:	72 e8       	ldi	r23, 0x82	; 130
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     f04:	42 e0       	ldi	r20, 0x02	; 2
     f06:	be 01       	movw	r22, r28
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>

}
     f12:	2b 96       	adiw	r28, 0x0b	; 11
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     f40:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     f44:	86 ff       	sbrs	r24, 6
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     f48:	80 e4       	ldi	r24, 0x40	; 64
     f4a:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     f4e:	0e 94 b0 18 	call	0x3160	; 0x3160 <reboot>
	}

}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	21 f0       	breq	.+8      	; 0xf88 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	79 f5       	brne	.+94     	; 0xfe2 <read_ionpump+0x6e>
		pins = AIN23;
     f84:	40 e3       	ldi	r20, 0x30	; 48
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     f88:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     f8a:	20 e8       	ldi	r18, 0x80	; 128
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	89 e4       	ldi	r24, 0x49	; 73
     f90:	0e 94 8a 01 	call	0x314	; 0x314 <read_ADS1115>
     f94:	6b 01       	movw	r12, r22
     f96:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     f98:	2d ec       	ldi	r18, 0xCD	; 205
     f9a:	3c ec       	ldi	r19, 0xCC	; 204
     f9c:	4c ec       	ldi	r20, 0xCC	; 204
     f9e:	5e e3       	ldi	r21, 0x3E	; 62
     fa0:	0e 94 33 19 	call	0x3266	; 0x3266 <__cmpsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	14 f1       	brlt	.+68     	; 0xfec <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e4       	ldi	r21, 0x40	; 64
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__gesf2>
     fb8:	18 16       	cp	r1, r24
     fba:	ec f0       	brlt	.+58     	; 0xff6 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     fbc:	29 e7       	ldi	r18, 0x79	; 121
     fbe:	39 ee       	ldi	r19, 0xE9	; 233
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	50 e4       	ldi	r21, 0x40	; 64
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
     fcc:	2e e6       	ldi	r18, 0x6E	; 110
     fce:	33 ea       	ldi	r19, 0xA3	; 163
     fd0:	4b ed       	ldi	r20, 0xDB	; 219
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	0e 94 c6 18 	call	0x318c	; 0x318c <__subsf3>

	return(vacuum);
     fd8:	56 2f       	mov	r21, r22
     fda:	47 2f       	mov	r20, r23
     fdc:	38 2f       	mov	r19, r24
     fde:	29 2f       	mov	r18, r25
     fe0:	0e c0       	rjmp	.+28     	; 0xffe <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	36 e2       	ldi	r19, 0x26	; 38
     fe8:	24 ec       	ldi	r18, 0xC4	; 196
     fea:	09 c0       	rjmp	.+18     	; 0xffe <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	36 e2       	ldi	r19, 0x26	; 38
     ff2:	24 ec       	ldi	r18, 0xC4	; 196
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	36 e2       	ldi	r19, 0x26	; 38
     ffc:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     ffe:	65 2f       	mov	r22, r21
    1000:	74 2f       	mov	r23, r20
    1002:	83 2f       	mov	r24, r19
    1004:	92 2f       	mov	r25, r18
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	08 95       	ret

00001010 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    1010:	e0 ea       	ldi	r30, 0xA0	; 160
    1012:	f4 e0       	ldi	r31, 0x04	; 4
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1018:	81 83       	std	Z+1, r24	; 0x01
    101a:	08 95       	ret

0000101c <main>:
extern void initialize(void);

int main(void)
{

	initialize();
    101c:	0e 94 4a 07 	call	0xe94	; 0xe94 <initialize>
	sei();
    1020:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
    1022:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x104>
    1026:	88 23       	and	r24, r24
    1028:	e1 f3       	breq	.-8      	; 0x1022 <main+0x6>
			recv0_buf.done = NO;
    102a:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>
//			on_BEEPER;
//			_delay_ms(50);
//			off_BEEPER;
			commands();
    102e:	0e 94 2d 04 	call	0x85a	; 0x85a <commands>
    1032:	f7 cf       	rjmp	.-18     	; 0x1022 <main+0x6>

00001034 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	c8 2f       	mov	r28, r24
    103a:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	write_TWI(reg);
    1042:	8d 2f       	mov	r24, r29
    1044:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
	start_TWI(addr, TWIREAD);
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	8c 2f       	mov	r24, r28
    104c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	val = readlast_TWI();
    1050:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
    1054:	c8 2f       	mov	r28, r24
	stop_TWI();
    1056:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
	return(val);

}
    105a:	8c 2f       	mov	r24, r28
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	d6 2f       	mov	r29, r22
    106a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
    1072:	c8 2f       	mov	r28, r24
    1074:	88 23       	and	r24, r24
    1076:	21 f0       	breq	.+8      	; 0x1080 <write_MCP23008+0x1e>
		stop_TWI();
    1078:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    107c:	8c 2f       	mov	r24, r28
    107e:	17 c0       	rjmp	.+46     	; 0x10ae <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1080:	8d 2f       	mov	r24, r29
    1082:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
    1086:	c8 2f       	mov	r28, r24
    1088:	88 23       	and	r24, r24
    108a:	21 f0       	breq	.+8      	; 0x1094 <write_MCP23008+0x32>
		stop_TWI();
    108c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    1090:	8c 2f       	mov	r24, r28
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1094:	81 2f       	mov	r24, r17
    1096:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
    109a:	c8 2f       	mov	r28, r24
    109c:	88 23       	and	r24, r24
    109e:	21 f0       	breq	.+8      	; 0x10a8 <write_MCP23008+0x46>
		stop_TWI();
    10a0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    10a4:	8c 2f       	mov	r24, r28
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <write_MCP23008+0x4c>
	}
	stop_TWI();
    10a8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
	return(0);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
	
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	08 95       	ret

000010b6 <read_MCP9808>:
#include "globals.h"
#include "mcp9808.h"
#include "twi.h"

float read_MCP9808(void)
{
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	88 e1       	ldi	r24, 0x18	; 24
    10c8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	write_TWI(TEMPREGISTER);
    10cc:	85 e0       	ldi	r24, 0x05	; 5
    10ce:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	88 e1       	ldi	r24, 0x18	; 24
    10d6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	highbyte = read_TWI();
    10da:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <read_TWI>
    10de:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    10e0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
    10e4:	d8 2f       	mov	r29, r24
	stop_TWI();
    10e6:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    10ea:	1c 2f       	mov	r17, r28
    10ec:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    10ee:	6c 2f       	mov	r22, r28
    10f0:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	51 e4       	ldi	r21, 0x41	; 65
    1104:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    1108:	6b 01       	movw	r12, r22
    110a:	7c 01       	movw	r14, r24
    110c:	6d 2f       	mov	r22, r29
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 aa 19 	call	0x3354	; 0x3354 <__floatunsisf>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5d e3       	ldi	r21, 0x3D	; 61
    1120:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 c7 18 	call	0x318e	; 0x318e <__addsf3>
	if (sign) {
    1130:	11 23       	and	r17, r17
    1132:	41 f0       	breq	.+16     	; 0x1144 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e8       	ldi	r24, 0x80	; 128
    113e:	93 e4       	ldi	r25, 0x43	; 67
    1140:	0e 94 c6 18 	call	0x318c	; 0x318c <__subsf3>
	}
	return(temperature);
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	08 95       	ret

00001154 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	18 2f       	mov	r17, r24
    1162:	f6 2e       	mov	r15, r22
    1164:	ea 01       	movw	r28, r20
    1166:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
    116e:	81 11       	cpse	r24, r1
    1170:	1e c0       	rjmp	.+60     	; 0x11ae <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    1172:	8f 2d       	mov	r24, r15
    1174:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
    1178:	81 11       	cpse	r24, r1
    117a:	19 c0       	rjmp	.+50     	; 0x11ae <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	81 2f       	mov	r24, r17
    1180:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
    1184:	81 11       	cpse	r24, r1
    1186:	13 c0       	rjmp	.+38     	; 0x11ae <read_MMA8451+0x5a>
    1188:	11 e0       	ldi	r17, 0x01	; 1
    118a:	09 c0       	rjmp	.+18     	; 0x119e <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    118c:	7e 01       	movw	r14, r28
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	e8 1a       	sub	r14, r24
    1192:	f8 0a       	sbc	r15, r24
    1194:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <read_TWI>
    1198:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    119a:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    119c:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    119e:	10 17       	cp	r17, r16
    11a0:	a8 f3       	brcs	.-22     	; 0x118c <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    11a2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <readlast_TWI>
    11a6:	88 83       	st	Y, r24
	stop_TWI();
    11a8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
	return(0);
    11ac:	80 e0       	ldi	r24, 0x00	; 0

}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	08 95       	ret

000011bc <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	26 97       	sbiw	r28, 0x06	; 6
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	6c 01       	movw	r12, r24
    11d8:	7b 01       	movw	r14, r22
    11da:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e8       	ldi	r25, 0x80	; 128
    11e0:	a6 e2       	ldi	r26, 0x26	; 38
    11e2:	b4 ec       	ldi	r27, 0xC4	; 196
    11e4:	fa 01       	movw	r30, r20
    11e6:	80 83       	st	Z, r24
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	a2 83       	std	Z+2, r26	; 0x02
    11ec:	b3 83       	std	Z+3, r27	; 0x03
    11ee:	fb 01       	movw	r30, r22
    11f0:	80 83       	st	Z, r24
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	a2 83       	std	Z+2, r26	; 0x02
    11f6:	b3 83       	std	Z+3, r27	; 0x03
    11f8:	f6 01       	movw	r30, r12
    11fa:	80 83       	st	Z, r24
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	a2 83       	std	Z+2, r26	; 0x02
    1200:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1202:	26 e0       	ldi	r18, 0x06	; 6
    1204:	ae 01       	movw	r20, r28
    1206:	4f 5f       	subi	r20, 0xFF	; 255
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	8d e1       	ldi	r24, 0x1D	; 29
    120e:	0e 94 aa 08 	call	0x1154	; 0x1154 <read_MMA8451>

	ix = datain[0];
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1216:	98 2f       	mov	r25, r24
    1218:	88 27       	eor	r24, r24
	ix |= datain[1];
    121a:	2a 81       	ldd	r18, Y+2	; 0x02
    121c:	82 2b       	or	r24, r18
	ix /= 4;
    121e:	bc 01       	movw	r22, r24
    1220:	77 23       	and	r23, r23
    1222:	14 f4       	brge	.+4      	; 0x1228 <get_orientation+0x6c>
    1224:	6d 5f       	subi	r22, 0xFD	; 253
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	75 95       	asr	r23
    122a:	67 95       	ror	r22
    122c:	75 95       	asr	r23
    122e:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1230:	07 2e       	mov	r0, r23
    1232:	00 0c       	add	r0, r0
    1234:	88 0b       	sbc	r24, r24
    1236:	99 0b       	sbc	r25, r25
    1238:	0e 94 ac 19 	call	0x3358	; 0x3358 <__floatsisf>
    123c:	26 e6       	ldi	r18, 0x66	; 102
    123e:	36 e2       	ldi	r19, 0x26	; 38
    1240:	45 e7       	ldi	r20, 0x75	; 117
    1242:	5e e3       	ldi	r21, 0x3E	; 62
    1244:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    1248:	f6 01       	movw	r30, r12
    124a:	60 83       	st	Z, r22
    124c:	71 83       	std	Z+1, r23	; 0x01
    124e:	82 83       	std	Z+2, r24	; 0x02
    1250:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    1256:	98 2f       	mov	r25, r24
    1258:	88 27       	eor	r24, r24
	iy |= datain[3];
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	82 2b       	or	r24, r18
	iy /= 4;
    125e:	bc 01       	movw	r22, r24
    1260:	77 23       	and	r23, r23
    1262:	14 f4       	brge	.+4      	; 0x1268 <get_orientation+0xac>
    1264:	6d 5f       	subi	r22, 0xFD	; 253
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	75 95       	asr	r23
    126a:	67 95       	ror	r22
    126c:	75 95       	asr	r23
    126e:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1270:	07 2e       	mov	r0, r23
    1272:	00 0c       	add	r0, r0
    1274:	88 0b       	sbc	r24, r24
    1276:	99 0b       	sbc	r25, r25
    1278:	0e 94 ac 19 	call	0x3358	; 0x3358 <__floatsisf>
    127c:	26 e6       	ldi	r18, 0x66	; 102
    127e:	36 e2       	ldi	r19, 0x26	; 38
    1280:	45 e7       	ldi	r20, 0x75	; 117
    1282:	5e e3       	ldi	r21, 0x3E	; 62
    1284:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    1288:	f7 01       	movw	r30, r14
    128a:	60 83       	st	Z, r22
    128c:	71 83       	std	Z+1, r23	; 0x01
    128e:	82 83       	std	Z+2, r24	; 0x02
    1290:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1296:	98 2f       	mov	r25, r24
    1298:	88 27       	eor	r24, r24
	iz |= datain[5];
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	82 2b       	or	r24, r18
	iz /= 4;
    129e:	bc 01       	movw	r22, r24
    12a0:	77 23       	and	r23, r23
    12a2:	14 f4       	brge	.+4      	; 0x12a8 <get_orientation+0xec>
    12a4:	6d 5f       	subi	r22, 0xFD	; 253
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	75 95       	asr	r23
    12aa:	67 95       	ror	r22
    12ac:	75 95       	asr	r23
    12ae:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    12b0:	07 2e       	mov	r0, r23
    12b2:	00 0c       	add	r0, r0
    12b4:	88 0b       	sbc	r24, r24
    12b6:	99 0b       	sbc	r25, r25
    12b8:	0e 94 ac 19 	call	0x3358	; 0x3358 <__floatsisf>
    12bc:	26 e6       	ldi	r18, 0x66	; 102
    12be:	36 e2       	ldi	r19, 0x26	; 38
    12c0:	45 e7       	ldi	r20, 0x75	; 117
    12c2:	5e e3       	ldi	r21, 0x3E	; 62
    12c4:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    12c8:	f8 01       	movw	r30, r16
    12ca:	60 83       	st	Z, r22
    12cc:	71 83       	std	Z+1, r23	; 0x01
    12ce:	82 83       	std	Z+2, r24	; 0x02
    12d0:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	26 96       	adiw	r28, 0x06	; 6
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	08 95       	ret

000012ec <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	d6 2f       	mov	r29, r22
    12f4:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
    12fc:	c8 2f       	mov	r28, r24
    12fe:	88 23       	and	r24, r24
    1300:	21 f0       	breq	.+8      	; 0x130a <write_MMA8451+0x1e>
		stop_TWI();
    1302:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    1306:	8c 2f       	mov	r24, r28
    1308:	17 c0       	rjmp	.+46     	; 0x1338 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    130a:	8d 2f       	mov	r24, r29
    130c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
    1310:	c8 2f       	mov	r28, r24
    1312:	88 23       	and	r24, r24
    1314:	21 f0       	breq	.+8      	; 0x131e <write_MMA8451+0x32>
		stop_TWI();
    1316:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    131a:	8c 2f       	mov	r24, r28
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    131e:	81 2f       	mov	r24, r17
    1320:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
    1324:	c8 2f       	mov	r28, r24
    1326:	88 23       	and	r24, r24
    1328:	21 f0       	breq	.+8      	; 0x1332 <write_MMA8451+0x46>
		stop_TWI();
    132a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
		return(retval);
    132e:	8c 2f       	mov	r24, r28
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1332:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>
	return(0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	08 95       	ret

00001340 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	1f 92       	push	r1
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    134a:	40 e4       	ldi	r20, 0x40	; 64
    134c:	6b e2       	ldi	r22, 0x2B	; 43
    134e:	8d e1       	ldi	r24, 0x1D	; 29
    1350:	0e 94 76 09 	call	0x12ec	; 0x12ec <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	ae 01       	movw	r20, r28
    1358:	4f 5f       	subi	r20, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	6b e2       	ldi	r22, 0x2B	; 43
    135e:	8d e1       	ldi	r24, 0x1D	; 29
    1360:	0e 94 aa 08 	call	0x1154	; 0x1154 <read_MMA8451>
	while (retval & 0x40) {
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	ae 01       	movw	r20, r28
    136a:	4f 5f       	subi	r20, 0xFF	; 255
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	6b e2       	ldi	r22, 0x2B	; 43
    1370:	8d e1       	ldi	r24, 0x1D	; 29
    1372:	0e 94 aa 08 	call	0x1154	; 0x1154 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	86 fd       	sbrc	r24, 6
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    137c:	40 ec       	ldi	r20, 0xC0	; 192
    137e:	6f e0       	ldi	r22, 0x0F	; 15
    1380:	8d e1       	ldi	r24, 0x1D	; 29
    1382:	0e 94 76 09 	call	0x12ec	; 0x12ec <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1386:	42 e0       	ldi	r20, 0x02	; 2
    1388:	6b e2       	ldi	r22, 0x2B	; 43
    138a:	8d e1       	ldi	r24, 0x1D	; 29
    138c:	0e 94 76 09 	call	0x12ec	; 0x12ec <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1390:	4d e3       	ldi	r20, 0x3D	; 61
    1392:	6a e2       	ldi	r22, 0x2A	; 42
    1394:	8d e1       	ldi	r24, 0x1D	; 29
    1396:	0e 94 76 09 	call	0x12ec	; 0x12ec <write_MMA8451>

	return(retval);

}
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	0f 90       	pop	r0
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	2e 97       	sbiw	r28, 0x0e	; 14
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	e8 ee       	ldi	r30, 0xE8	; 232
    13c0:	f2 e8       	ldi	r31, 0x82	; 130
    13c2:	de 01       	movw	r26, r28
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	01 90       	ld	r0, Z+
    13c8:	0d 92       	st	X+, r0
    13ca:	8a 95       	dec	r24
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    13ce:	f8 01       	movw	r30, r16
    13d0:	01 90       	ld	r0, Z+
    13d2:	00 20       	and	r0, r0
    13d4:	e9 f7       	brne	.-6      	; 0x13d0 <checksum_NMEA+0x2c>
    13d6:	31 97       	sbiw	r30, 0x01	; 1
    13d8:	3e 2f       	mov	r19, r30
    13da:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    13dc:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <checksum_NMEA+0x4a>
		checksum ^= str[i];
    13e2:	f8 01       	movw	r30, r16
    13e4:	e8 0f       	add	r30, r24
    13e6:	f1 1d       	adc	r31, r1
    13e8:	20 81       	ld	r18, Z
    13ea:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	83 17       	cp	r24, r19
    13f0:	c0 f3       	brcs	.-16     	; 0x13e2 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    13f2:	1f 92       	push	r1
    13f4:	9f 93       	push	r25
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	9f 93       	push	r25
    13fc:	8f 93       	push	r24
    13fe:	7e 01       	movw	r14, r28
    1400:	89 e0       	ldi	r24, 0x09	; 9
    1402:	e8 0e       	add	r14, r24
    1404:	f1 1c       	adc	r15, r1
    1406:	ff 92       	push	r15
    1408:	ef 92       	push	r14
    140a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
	strcat(str, chksum);
    140e:	b7 01       	movw	r22, r14
    1410:	c8 01       	movw	r24, r16
    1412:	0e 94 0f 20 	call	0x401e	; 0x401e <strcat>

}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	2e 96       	adiw	r28, 0x0e	; 14
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	d6 2f       	mov	r29, r22
    143c:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <start_TWI>
	write_TWI(type);
    1444:	8d 2f       	mov	r24, r29
    1446:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
	write_TWI(byteToSend);
    144a:	8c 2f       	mov	r24, r28
    144c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <write_TWI>
	stop_TWI();
    1450:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <stop_TWI>

}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    145a:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    145c:	e0 e6       	ldi	r30, 0x60	; 96
    145e:	f4 e0       	ldi	r31, 0x04	; 4
    1460:	90 e4       	ldi	r25, 0x40	; 64
    1462:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	a1 e4       	ldi	r26, 0x41	; 65
    1468:	b3 e0       	ldi	r27, 0x03	; 3
    146a:	11 97       	sbiw	r26, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <init_OLED+0x10>
    146e:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1470:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1472:	81 11       	cpse	r24, r1
    1474:	02 c0       	rjmp	.+4      	; 0x147a <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1476:	cc e3       	ldi	r28, 0x3C	; 60
    1478:	01 c0       	rjmp	.+2      	; 0x147c <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    147a:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    147c:	4a e2       	ldi	r20, 0x2A	; 42
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	8c 2f       	mov	r24, r28
    1482:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1486:	41 e7       	ldi	r20, 0x71	; 113
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	8c 2f       	mov	r24, r28
    148c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1490:	4c e5       	ldi	r20, 0x5C	; 92
    1492:	60 e4       	ldi	r22, 0x40	; 64
    1494:	8c 2f       	mov	r24, r28
    1496:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    149a:	48 e2       	ldi	r20, 0x28	; 40
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	8c 2f       	mov	r24, r28
    14a0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    14a4:	48 e0       	ldi	r20, 0x08	; 8
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	8c 2f       	mov	r24, r28
    14aa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14ae:	4a e2       	ldi	r20, 0x2A	; 42
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	8c 2f       	mov	r24, r28
    14b4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14b8:	49 e7       	ldi	r20, 0x79	; 121
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14c2:	45 ed       	ldi	r20, 0xD5	; 213
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	8c 2f       	mov	r24, r28
    14c8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    14cc:	40 e7       	ldi	r20, 0x70	; 112
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	8c 2f       	mov	r24, r28
    14d2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    14d6:	48 e7       	ldi	r20, 0x78	; 120
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	8c 2f       	mov	r24, r28
    14dc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	8c 2f       	mov	r24, r28
    14e6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    14ea:	46 e0       	ldi	r20, 0x06	; 6
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	8c 2f       	mov	r24, r28
    14f0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    14f4:	42 e7       	ldi	r20, 0x72	; 114
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	8c 2f       	mov	r24, r28
    14fa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	60 e4       	ldi	r22, 0x40	; 64
    1502:	8c 2f       	mov	r24, r28
    1504:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1508:	4a e2       	ldi	r20, 0x2A	; 42
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	8c 2f       	mov	r24, r28
    150e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1512:	49 e7       	ldi	r20, 0x79	; 121
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	8c 2f       	mov	r24, r28
    1518:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    151c:	4a ed       	ldi	r20, 0xDA	; 218
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	8c 2f       	mov	r24, r28
    1522:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	8c 2f       	mov	r24, r28
    152c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1530:	4c ed       	ldi	r20, 0xDC	; 220
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	8c 2f       	mov	r24, r28
    1536:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	8c 2f       	mov	r24, r28
    1540:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1544:	41 e8       	ldi	r20, 0x81	; 129
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	8c 2f       	mov	r24, r28
    154a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	8c 2f       	mov	r24, r28
    1554:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1558:	49 ed       	ldi	r20, 0xD9	; 217
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	8c 2f       	mov	r24, r28
    155e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1562:	41 ef       	ldi	r20, 0xF1	; 241
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	8c 2f       	mov	r24, r28
    1568:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    156c:	4b ed       	ldi	r20, 0xDB	; 219
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	8c 2f       	mov	r24, r28
    1572:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1576:	40 e4       	ldi	r20, 0x40	; 64
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	8c 2f       	mov	r24, r28
    157c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1580:	48 e7       	ldi	r20, 0x78	; 120
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	8c 2f       	mov	r24, r28
    1586:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    158a:	48 e2       	ldi	r20, 0x28	; 40
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	8c 2f       	mov	r24, r28
    1590:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	8c 2f       	mov	r24, r28
    159a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	8c 2f       	mov	r24, r28
    15a4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    15a8:	4c e0       	ldi	r20, 0x0C	; 12
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	8c 2f       	mov	r24, r28
    15ae:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
    15b2:	ba e6       	ldi	r27, 0x6A	; 106
    15b4:	24 e0       	ldi	r18, 0x04	; 4
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	b1 50       	subi	r27, 0x01	; 1
    15ba:	20 40       	sbci	r18, 0x00	; 0
    15bc:	80 40       	sbci	r24, 0x00	; 0
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <init_OLED+0x15e>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15c2:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    15c6:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    15d2:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	e2 97       	sbiw	r28, 0x32	; 50
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    15f2:	91 e1       	ldi	r25, 0x11	; 17
    15f4:	e0 ef       	ldi	r30, 0xF0	; 240
    15f6:	f2 e8       	ldi	r31, 0x82	; 130
    15f8:	de 01       	movw	r26, r28
    15fa:	92 96       	adiw	r26, 0x22	; 34
    15fc:	01 90       	ld	r0, Z+
    15fe:	0d 92       	st	X+, r0
    1600:	9a 95       	dec	r25
    1602:	e1 f7       	brne	.-8      	; 0x15fc <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1604:	81 11       	cpse	r24, r1
    1606:	02 c0       	rjmp	.+4      	; 0x160c <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1608:	0c e3       	ldi	r16, 0x3C	; 60
    160a:	01 c0       	rjmp	.+2      	; 0x160e <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    160c:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	7c 01       	movw	r14, r24
    1614:	0e 94 1a 20 	call	0x4034	; 0x4034 <strcpy>
	if (strlen(strbuf) > 16) {
    1618:	f7 01       	movw	r30, r14
    161a:	01 90       	ld	r0, Z+
    161c:	00 20       	and	r0, r0
    161e:	e9 f7       	brne	.-6      	; 0x161a <writestr_OLED+0x40>
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	ee 19       	sub	r30, r14
    1624:	ff 09       	sbc	r31, r15
    1626:	71 97       	sbiw	r30, 0x11	; 17
    1628:	08 f0       	brcs	.+2      	; 0x162c <writestr_OLED+0x52>
		strbuf[16] = '\0';
    162a:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    162c:	be 01       	movw	r22, r28
    162e:	6e 5d       	subi	r22, 0xDE	; 222
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	0e 94 0f 20 	call	0x401e	; 0x401e <strcat>

	if (lineno == 1) {
    163a:	11 30       	cpi	r17, 0x01	; 1
    163c:	39 f4       	brne	.+14     	; 0x164c <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	80 2f       	mov	r24, r16
    1644:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	12 c0       	rjmp	.+36     	; 0x1670 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    164c:	40 ec       	ldi	r20, 0xC0	; 192
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	80 2f       	mov	r24, r16
    1652:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>
    1656:	f8 cf       	rjmp	.-16     	; 0x1648 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1658:	e1 e0       	ldi	r30, 0x01	; 1
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	ec 0f       	add	r30, r28
    165e:	fd 1f       	adc	r31, r29
    1660:	e1 0f       	add	r30, r17
    1662:	f1 1d       	adc	r31, r1
    1664:	40 81       	ld	r20, Z
    1666:	60 e4       	ldi	r22, 0x40	; 64
    1668:	80 2f       	mov	r24, r16
    166a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    166e:	1f 5f       	subi	r17, 0xFF	; 255
    1670:	10 31       	cpi	r17, 0x10	; 16
    1672:	90 f3       	brcs	.-28     	; 0x1658 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    167c:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    1680:	e2 96       	adiw	r28, 0x32	; 50
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	08 95       	ret

00001694 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	61 97       	sbiw	r28, 0x11	; 17
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    16a6:	81 e1       	ldi	r24, 0x11	; 17
    16a8:	e0 ef       	ldi	r30, 0xF0	; 240
    16aa:	f2 e8       	ldi	r31, 0x82	; 130
    16ac:	de 01       	movw	r26, r28
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	01 90       	ld	r0, Z+
    16b2:	0d 92       	st	X+, r0
    16b4:	8a 95       	dec	r24
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	be 01       	movw	r22, r28
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	81 2f       	mov	r24, r17
    16c2:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16c6:	42 e0       	ldi	r20, 0x02	; 2
    16c8:	be 01       	movw	r22, r28
    16ca:	6f 5f       	subi	r22, 0xFF	; 255
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	81 2f       	mov	r24, r17
    16d0:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
	timerOLED = 0;
    16d4:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    16d8:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    16dc:	61 96       	adiw	r28, 0x11	; 17
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	08 95       	ret

000016ea <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	84 e2       	ldi	r24, 0x24	; 36
    16f0:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    16f4:	81 11       	cpse	r24, r1
    16f6:	35 c0       	rjmp	.+106    	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	6a e0       	ldi	r22, 0x0A	; 10
    16fc:	84 e2       	ldi	r24, 0x24	; 36
    16fe:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    1702:	81 11       	cpse	r24, r1
    1704:	2e c0       	rjmp	.+92     	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1706:	4e ef       	ldi	r20, 0xFE	; 254
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	81 e2       	ldi	r24, 0x21	; 33
    170c:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    1710:	81 11       	cpse	r24, r1
    1712:	27 c0       	rjmp	.+78     	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	81 e2       	ldi	r24, 0x21	; 33
    171a:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    171e:	81 11       	cpse	r24, r1
    1720:	20 c0       	rjmp	.+64     	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    1722:	4c ef       	ldi	r20, 0xFC	; 252
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	81 e2       	ldi	r24, 0x21	; 33
    1728:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    172c:	81 11       	cpse	r24, r1
    172e:	19 c0       	rjmp	.+50     	; 0x1762 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	64 e0       	ldi	r22, 0x04	; 4
    1734:	81 e2       	ldi	r24, 0x21	; 33
    1736:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    173a:	81 11       	cpse	r24, r1
    173c:	12 c0       	rjmp	.+36     	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	65 e0       	ldi	r22, 0x05	; 5
    1742:	81 e2       	ldi	r24, 0x21	; 33
    1744:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    1748:	81 11       	cpse	r24, r1
    174a:	0b c0       	rjmp	.+22     	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	66 e0       	ldi	r22, 0x06	; 6
    1750:	81 e2       	ldi	r24, 0x21	; 33
    1752:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
    1756:	81 11       	cpse	r24, r1
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    175a:	89 e0       	ldi	r24, 0x09	; 9
    175c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    1760:	80 e0       	ldi	r24, 0x00	; 0

}
    1762:	08 95       	ret

00001764 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	6c 01       	movw	r12, r24
    1776:	8b 01       	movw	r16, r22
    1778:	7a 01       	movw	r14, r20
    177a:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    177c:	69 e0       	ldi	r22, 0x09	; 9
    177e:	81 e2       	ldi	r24, 0x21	; 33
    1780:	0e 94 1a 08 	call	0x1034	; 0x1034 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1784:	98 2f       	mov	r25, r24
    1786:	92 95       	swap	r25
    1788:	96 95       	lsr	r25
    178a:	96 95       	lsr	r25
    178c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    178e:	91 30       	cpi	r25, 0x01	; 1
    1790:	21 f4       	brne	.+8      	; 0x179a <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    1792:	93 e6       	ldi	r25, 0x63	; 99
    1794:	f6 01       	movw	r30, r12
    1796:	90 83       	st	Z, r25
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    179a:	92 30       	cpi	r25, 0x02	; 2
    179c:	21 f4       	brne	.+8      	; 0x17a6 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    179e:	9f e6       	ldi	r25, 0x6F	; 111
    17a0:	f6 01       	movw	r30, r12
    17a2:	90 83       	st	Z, r25
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    17a6:	93 30       	cpi	r25, 0x03	; 3
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    17aa:	94 e7       	ldi	r25, 0x74	; 116
    17ac:	f6 01       	movw	r30, r12
    17ae:	90 83       	st	Z, r25
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    17b2:	98 e7       	ldi	r25, 0x78	; 120
    17b4:	f6 01       	movw	r30, r12
    17b6:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17b8:	98 2f       	mov	r25, r24
    17ba:	96 95       	lsr	r25
    17bc:	96 95       	lsr	r25
	state &= 0b00000011;
    17be:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17c0:	91 30       	cpi	r25, 0x01	; 1
    17c2:	21 f4       	brne	.+8      	; 0x17cc <read_PNEUSENSORS+0x68>
		*right = 'c';
    17c4:	93 e6       	ldi	r25, 0x63	; 99
    17c6:	f7 01       	movw	r30, r14
    17c8:	90 83       	st	Z, r25
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    17cc:	92 30       	cpi	r25, 0x02	; 2
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <read_PNEUSENSORS+0x74>
		*right = 'o';
    17d0:	9f e6       	ldi	r25, 0x6F	; 111
    17d2:	f7 01       	movw	r30, r14
    17d4:	90 83       	st	Z, r25
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    17d8:	93 30       	cpi	r25, 0x03	; 3
    17da:	21 f4       	brne	.+8      	; 0x17e4 <read_PNEUSENSORS+0x80>
		*right = 't';
    17dc:	94 e7       	ldi	r25, 0x74	; 116
    17de:	f7 01       	movw	r30, r14
    17e0:	90 83       	st	Z, r25
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    17e4:	98 e7       	ldi	r25, 0x78	; 120
    17e6:	f7 01       	movw	r30, r14
    17e8:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    17ea:	98 2f       	mov	r25, r24
    17ec:	92 95       	swap	r25
    17ee:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    17f0:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17f2:	91 30       	cpi	r25, 0x01	; 1
    17f4:	21 f4       	brne	.+8      	; 0x17fe <read_PNEUSENSORS+0x9a>
		*left = 'o';
    17f6:	9f e6       	ldi	r25, 0x6F	; 111
    17f8:	f8 01       	movw	r30, r16
    17fa:	90 83       	st	Z, r25
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
	} else if (state == 2) {
    17fe:	92 30       	cpi	r25, 0x02	; 2
    1800:	21 f4       	brne	.+8      	; 0x180a <__DATA_REGION_LENGTH__+0xa>
		*left = 'c';
    1802:	93 e6       	ldi	r25, 0x63	; 99
    1804:	f8 01       	movw	r30, r16
    1806:	90 83       	st	Z, r25
    1808:	09 c0       	rjmp	.+18     	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
	} else if (state == 3) {
    180a:	93 30       	cpi	r25, 0x03	; 3
    180c:	21 f4       	brne	.+8      	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
		*left = 't';
    180e:	94 e7       	ldi	r25, 0x74	; 116
    1810:	f8 01       	movw	r30, r16
    1812:	90 83       	st	Z, r25
    1814:	03 c0       	rjmp	.+6      	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
	} else {
		*left = 'x';
    1816:	98 e7       	ldi	r25, 0x78	; 120
    1818:	f8 01       	movw	r30, r16
    181a:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    181c:	81 ff       	sbrs	r24, 1
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <__DATA_REGION_LENGTH__+0x26>
		*air = '0';
    1820:	80 e3       	ldi	r24, 0x30	; 48
    1822:	88 83       	st	Y, r24
    1824:	02 c0       	rjmp	.+4      	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
	} else {
		*air = '1';
    1826:	81 e3       	ldi	r24, 0x31	; 49
    1828:	88 83       	st	Y, r24
	}
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	08 95       	ret

0000183c <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	d8 2f       	mov	r29, r24
    1842:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1844:	69 e0       	ldi	r22, 0x09	; 9
    1846:	84 e2       	ldi	r24, 0x24	; 36
    1848:	0e 94 1a 08 	call	0x1034	; 0x1034 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    184c:	8d 2b       	or	r24, r29
    184e:	48 2f       	mov	r20, r24
    1850:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1852:	6a e0       	ldi	r22, 0x0A	; 10
    1854:	84 e2       	ldi	r24, 0x24	; 36
    1856:	0e 94 31 08 	call	0x1062	; 0x1062 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	6a 97       	sbiw	r28, 0x1a	; 26
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    186e:	99 e0       	ldi	r25, 0x09	; 9
    1870:	e9 e1       	ldi	r30, 0x19	; 25
    1872:	f3 e8       	ldi	r31, 0x83	; 131
    1874:	de 01       	movw	r26, r28
    1876:	11 96       	adiw	r26, 0x01	; 1
    1878:	01 90       	ld	r0, Z+
    187a:	0d 92       	st	X+, r0
    187c:	9a 95       	dec	r25
    187e:	e1 f7       	brne	.-8      	; 0x1878 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    1880:	8c 36       	cpi	r24, 0x6C	; 108
    1882:	31 f1       	breq	.+76     	; 0x18d0 <close_PNEU+0x70>
    1884:	18 f4       	brcc	.+6      	; 0x188c <close_PNEU+0x2c>
    1886:	82 36       	cpi	r24, 0x62	; 98
    1888:	39 f0       	breq	.+14     	; 0x1898 <close_PNEU+0x38>
    188a:	75 c0       	rjmp	.+234    	; 0x1976 <close_PNEU+0x116>
    188c:	82 37       	cpi	r24, 0x72	; 114
    188e:	c1 f1       	breq	.+112    	; 0x1900 <close_PNEU+0xa0>
    1890:	83 37       	cpi	r24, 0x73	; 115
    1892:	09 f4       	brne	.+2      	; 0x1896 <close_PNEU+0x36>
    1894:	4d c0       	rjmp	.+154    	; 0x1930 <close_PNEU+0xd0>
    1896:	6f c0       	rjmp	.+222    	; 0x1976 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1898:	6a ee       	ldi	r22, 0xEA	; 234
    189a:	84 e4       	ldi	r24, 0x44	; 68
    189c:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18a0:	66 ee       	ldi	r22, 0xE6	; 230
    18a2:	88 e8       	ldi	r24, 0x88	; 136
    18a4:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	93 e8       	ldi	r25, 0x83	; 131
    18ac:	9f 93       	push	r25
    18ae:	8f 93       	push	r24
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	09 96       	adiw	r24, 0x09	; 9
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	47 c0       	rjmp	.+142    	; 0x195e <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18d0:	6a ee       	ldi	r22, 0xEA	; 234
    18d2:	84 e4       	ldi	r24, 0x44	; 68
    18d4:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	93 e8       	ldi	r25, 0x83	; 131
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	09 96       	adiw	r24, 0x09	; 9
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	2f c0       	rjmp	.+94     	; 0x195e <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1900:	66 ee       	ldi	r22, 0xE6	; 230
    1902:	88 e8       	ldi	r24, 0x88	; 136
    1904:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1908:	8b e0       	ldi	r24, 0x0B	; 11
    190a:	93 e8       	ldi	r25, 0x83	; 131
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	09 96       	adiw	r24, 0x09	; 9
    191a:	9f 93       	push	r25
    191c:	8f 93       	push	r24
    191e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	17 c0       	rjmp	.+46     	; 0x195e <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1930:	6c ee       	ldi	r22, 0xEC	; 236
    1932:	82 e2       	ldi	r24, 0x22	; 34
    1934:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1938:	81 e1       	ldi	r24, 0x11	; 17
    193a:	93 e8       	ldi	r25, 0x83	; 131
    193c:	9f 93       	push	r25
    193e:	8f 93       	push	r24
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	9f 93       	push	r25
    1946:	8f 93       	push	r24
    1948:	09 96       	adiw	r24, 0x09	; 9
    194a:	9f 93       	push	r25
    194c:	8f 93       	push	r24
    194e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	be 01       	movw	r22, r28
    1968:	66 5f       	subi	r22, 0xF6	; 246
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
	return(GREATERPROMPT);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1976:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1978:	6a 96       	adiw	r28, 0x1a	; 26
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	69 97       	sbiw	r28, 0x19	; 25
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    1992:	98 e0       	ldi	r25, 0x08	; 8
    1994:	e2 e2       	ldi	r30, 0x22	; 34
    1996:	f3 e8       	ldi	r31, 0x83	; 131
    1998:	de 01       	movw	r26, r28
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	9a 95       	dec	r25
    19a2:	e1 f7       	brne	.-8      	; 0x199c <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    19a4:	8c 36       	cpi	r24, 0x6C	; 108
    19a6:	31 f1       	breq	.+76     	; 0x19f4 <open_PNEU+0x70>
    19a8:	18 f4       	brcc	.+6      	; 0x19b0 <open_PNEU+0x2c>
    19aa:	82 36       	cpi	r24, 0x62	; 98
    19ac:	39 f0       	breq	.+14     	; 0x19bc <open_PNEU+0x38>
    19ae:	75 c0       	rjmp	.+234    	; 0x1a9a <open_PNEU+0x116>
    19b0:	82 37       	cpi	r24, 0x72	; 114
    19b2:	c1 f1       	breq	.+112    	; 0x1a24 <open_PNEU+0xa0>
    19b4:	83 37       	cpi	r24, 0x73	; 115
    19b6:	09 f4       	brne	.+2      	; 0x19ba <open_PNEU+0x36>
    19b8:	4d c0       	rjmp	.+154    	; 0x1a54 <open_PNEU+0xd0>
    19ba:	6f c0       	rjmp	.+222    	; 0x1a9a <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19bc:	6e ea       	ldi	r22, 0xAE	; 174
    19be:	84 e4       	ldi	r24, 0x44	; 68
    19c0:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19c4:	6e e6       	ldi	r22, 0x6E	; 110
    19c6:	88 e8       	ldi	r24, 0x88	; 136
    19c8:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	93 e8       	ldi	r25, 0x83	; 131
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	08 96       	adiw	r24, 0x08	; 8
    19de:	9f 93       	push	r25
    19e0:	8f 93       	push	r24
    19e2:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	47 c0       	rjmp	.+142    	; 0x1a82 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19f4:	6e ea       	ldi	r22, 0xAE	; 174
    19f6:	84 e4       	ldi	r24, 0x44	; 68
    19f8:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    19fc:	86 e0       	ldi	r24, 0x06	; 6
    19fe:	93 e8       	ldi	r25, 0x83	; 131
    1a00:	9f 93       	push	r25
    1a02:	8f 93       	push	r24
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	9f 93       	push	r25
    1a0a:	8f 93       	push	r24
    1a0c:	08 96       	adiw	r24, 0x08	; 8
    1a0e:	9f 93       	push	r25
    1a10:	8f 93       	push	r24
    1a12:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	2f c0       	rjmp	.+94     	; 0x1a82 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a24:	6e e6       	ldi	r22, 0x6E	; 110
    1a26:	88 e8       	ldi	r24, 0x88	; 136
    1a28:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a2c:	8b e0       	ldi	r24, 0x0B	; 11
    1a2e:	93 e8       	ldi	r25, 0x83	; 131
    1a30:	9f 93       	push	r25
    1a32:	8f 93       	push	r24
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	08 96       	adiw	r24, 0x08	; 8
    1a3e:	9f 93       	push	r25
    1a40:	8f 93       	push	r24
    1a42:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	17 c0       	rjmp	.+46     	; 0x1a82 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a54:	6e ec       	ldi	r22, 0xCE	; 206
    1a56:	82 e2       	ldi	r24, 0x22	; 34
    1a58:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a5c:	81 e1       	ldi	r24, 0x11	; 17
    1a5e:	93 e8       	ldi	r25, 0x83	; 131
    1a60:	9f 93       	push	r25
    1a62:	8f 93       	push	r24
    1a64:	ce 01       	movw	r24, r28
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	08 96       	adiw	r24, 0x08	; 8
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			break;
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	be 01       	movw	r22, r28
    1a8c:	67 5f       	subi	r22, 0xF7	; 247
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
	return(GREATERPROMPT);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a9c:	69 96       	adiw	r28, 0x19	; 25
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1aa8:	1f 92       	push	r1
    1aaa:	0f 92       	push	r0
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	2f 93       	push	r18
    1ab4:	3f 93       	push	r19
    1ab6:	4f 93       	push	r20
    1ab8:	5f 93       	push	r21
    1aba:	6f 93       	push	r22
    1abc:	7f 93       	push	r23
    1abe:	8f 93       	push	r24
    1ac0:	9f 93       	push	r25
    1ac2:	af 93       	push	r26
    1ac4:	bf 93       	push	r27
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1aca:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1ace:	88 23       	and	r24, r24
    1ad0:	4c f4       	brge	.+18     	; 0x1ae4 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1ad2:	80 e8       	ldi	r24, 0x80	; 128
    1ad4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ad8:	68 e0       	ldi	r22, 0x08	; 8
    1ada:	81 e2       	ldi	r24, 0x21	; 33
    1adc:	0e 94 1a 08 	call	0x1034	; 0x1034 <read_MCP23008>
    1ae0:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <pneuState>
	}

}
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	7f 91       	pop	r23
    1af2:	6f 91       	pop	r22
    1af4:	5f 91       	pop	r21
    1af6:	4f 91       	pop	r20
    1af8:	3f 91       	pop	r19
    1afa:	2f 91       	pop	r18
    1afc:	0f 90       	pop	r0
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	0f 90       	pop	r0
    1b02:	1f 90       	pop	r1
    1b04:	18 95       	reti

00001b06 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b06:	e0 e0       	ldi	r30, 0x00	; 0
    1b08:	f4 e0       	ldi	r31, 0x04	; 4
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b0e:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b10:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b12:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b14:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b16:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b18:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b1a:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b1c:	e0 e2       	ldi	r30, 0x20	; 32
    1b1e:	f4 e0       	ldi	r31, 0x04	; 4
    1b20:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b22:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b24:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b26:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b28:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b2a:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b2c:	e0 e4       	ldi	r30, 0x40	; 64
    1b2e:	f4 e0       	ldi	r31, 0x04	; 4
    1b30:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b32:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b34:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b36:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b38:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b3a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b3c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b3e:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b40:	e0 e6       	ldi	r30, 0x60	; 96
    1b42:	f4 e0       	ldi	r31, 0x04	; 4
    1b44:	94 e0       	ldi	r25, 0x04	; 4
    1b46:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b48:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b4a:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b4c:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b4e:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b50:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b52:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b54:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b56:	e0 e8       	ldi	r30, 0x80	; 128
    1b58:	f4 e0       	ldi	r31, 0x04	; 4
    1b5a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b5c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b5e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b60:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b62:	e0 ea       	ldi	r30, 0xA0	; 160
    1b64:	f4 e0       	ldi	r31, 0x04	; 4
    1b66:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b68:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b6a:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b6c:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b6e:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b70:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b72:	86 8b       	std	Z+22, r24	; 0x16
    1b74:	08 95       	ret

00001b76 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b76:	2f 92       	push	r2
    1b78:	3f 92       	push	r3
    1b7a:	4f 92       	push	r4
    1b7c:	5f 92       	push	r5
    1b7e:	6f 92       	push	r6
    1b80:	7f 92       	push	r7
    1b82:	8f 92       	push	r8
    1b84:	9f 92       	push	r9
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	c8 5d       	subi	r28, 0xD8	; 216
    1ba0:	d2 40       	sbci	r29, 0x02	; 2
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1ba6:	92 e4       	ldi	r25, 0x42	; 66
    1ba8:	e8 e7       	ldi	r30, 0x78	; 120
    1baa:	f3 e8       	ldi	r31, 0x83	; 131
    1bac:	de 01       	movw	r26, r28
    1bae:	ab 5a       	subi	r26, 0xAB	; 171
    1bb0:	be 4f       	sbci	r27, 0xFE	; 254
    1bb2:	01 90       	ld	r0, Z+
    1bb4:	0d 92       	st	X+, r0
    1bb6:	9a 95       	dec	r25
    1bb8:	e1 f7       	brne	.-8      	; 0x1bb2 <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1bba:	93 e3       	ldi	r25, 0x33	; 51
    1bbc:	ea eb       	ldi	r30, 0xBA	; 186
    1bbe:	f3 e8       	ldi	r31, 0x83	; 131
    1bc0:	de 01       	movw	r26, r28
    1bc2:	a9 56       	subi	r26, 0x69	; 105
    1bc4:	be 4f       	sbci	r27, 0xFE	; 254
    1bc6:	01 90       	ld	r0, Z+
    1bc8:	0d 92       	st	X+, r0
    1bca:	9a 95       	dec	r25
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1bce:	90 e2       	ldi	r25, 0x20	; 32
    1bd0:	ed ee       	ldi	r30, 0xED	; 237
    1bd2:	f3 e8       	ldi	r31, 0x83	; 131
    1bd4:	de 01       	movw	r26, r28
    1bd6:	a6 53       	subi	r26, 0x36	; 54
    1bd8:	be 4f       	sbci	r27, 0xFE	; 254
    1bda:	01 90       	ld	r0, Z+
    1bdc:	0d 92       	st	X+, r0
    1bde:	9a 95       	dec	r25
    1be0:	e1 f7       	brne	.-8      	; 0x1bda <report+0x64>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1be2:	92 e1       	ldi	r25, 0x12	; 18
    1be4:	ed e0       	ldi	r30, 0x0D	; 13
    1be6:	f4 e8       	ldi	r31, 0x84	; 132
    1be8:	de 01       	movw	r26, r28
    1bea:	a6 51       	subi	r26, 0x16	; 22
    1bec:	be 4f       	sbci	r27, 0xFE	; 254
    1bee:	01 90       	ld	r0, Z+
    1bf0:	0d 92       	st	X+, r0
    1bf2:	9a 95       	dec	r25
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <report+0x78>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1bf6:	91 e3       	ldi	r25, 0x31	; 49
    1bf8:	ef e1       	ldi	r30, 0x1F	; 31
    1bfa:	f4 e8       	ldi	r31, 0x84	; 132
    1bfc:	de 01       	movw	r26, r28
    1bfe:	a4 50       	subi	r26, 0x04	; 4
    1c00:	be 4f       	sbci	r27, 0xFE	; 254
    1c02:	01 90       	ld	r0, Z+
    1c04:	0d 92       	st	X+, r0
    1c06:	9a 95       	dec	r25
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <report+0x8c>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c0a:	93 e1       	ldi	r25, 0x13	; 19
    1c0c:	e0 e5       	ldi	r30, 0x50	; 80
    1c0e:	f4 e8       	ldi	r31, 0x84	; 132
    1c10:	de 01       	movw	r26, r28
    1c12:	a3 5d       	subi	r26, 0xD3	; 211
    1c14:	bd 4f       	sbci	r27, 0xFD	; 253
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	9a 95       	dec	r25
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <report+0xa0>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c1e:	93 e1       	ldi	r25, 0x13	; 19
    1c20:	e3 e6       	ldi	r30, 0x63	; 99
    1c22:	f4 e8       	ldi	r31, 0x84	; 132
    1c24:	de 01       	movw	r26, r28
    1c26:	a0 5c       	subi	r26, 0xC0	; 192
    1c28:	bd 4f       	sbci	r27, 0xFD	; 253
    1c2a:	01 90       	ld	r0, Z+
    1c2c:	0d 92       	st	X+, r0
    1c2e:	9a 95       	dec	r25
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <report+0xb4>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c32:	9d e1       	ldi	r25, 0x1D	; 29
    1c34:	e6 e7       	ldi	r30, 0x76	; 118
    1c36:	f4 e8       	ldi	r31, 0x84	; 132
    1c38:	de 01       	movw	r26, r28
    1c3a:	ad 5a       	subi	r26, 0xAD	; 173
    1c3c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c3e:	01 90       	ld	r0, Z+
    1c40:	0d 92       	st	X+, r0
    1c42:	9a 95       	dec	r25
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <report+0xc8>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c46:	99 e2       	ldi	r25, 0x29	; 41
    1c48:	e3 e9       	ldi	r30, 0x93	; 147
    1c4a:	f4 e8       	ldi	r31, 0x84	; 132
    1c4c:	de 01       	movw	r26, r28
    1c4e:	a0 59       	subi	r26, 0x90	; 144
    1c50:	bd 4f       	sbci	r27, 0xFD	; 253
    1c52:	01 90       	ld	r0, Z+
    1c54:	0d 92       	st	X+, r0
    1c56:	9a 95       	dec	r25
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <report+0xdc>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c5a:	9d e0       	ldi	r25, 0x0D	; 13
    1c5c:	ec eb       	ldi	r30, 0xBC	; 188
    1c5e:	f4 e8       	ldi	r31, 0x84	; 132
    1c60:	de 01       	movw	r26, r28
    1c62:	a7 56       	subi	r26, 0x67	; 103
    1c64:	bd 4f       	sbci	r27, 0xFD	; 253
    1c66:	01 90       	ld	r0, Z+
    1c68:	0d 92       	st	X+, r0
    1c6a:	9a 95       	dec	r25
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <report+0xf0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c6e:	91 e1       	ldi	r25, 0x11	; 17
    1c70:	e9 ec       	ldi	r30, 0xC9	; 201
    1c72:	f4 e8       	ldi	r31, 0x84	; 132
    1c74:	de 01       	movw	r26, r28
    1c76:	aa 55       	subi	r26, 0x5A	; 90
    1c78:	bd 4f       	sbci	r27, 0xFD	; 253
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	0d 92       	st	X+, r0
    1c7e:	9a 95       	dec	r25
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <report+0x104>
//	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1c82:	08 2f       	mov	r16, r24
    1c84:	10 e0       	ldi	r17, 0x00	; 0
    1c86:	84 e3       	ldi	r24, 0x34	; 52
    1c88:	80 9f       	mul	r24, r16
    1c8a:	f0 01       	movw	r30, r0
    1c8c:	81 9f       	mul	r24, r17
    1c8e:	f0 0d       	add	r31, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	ed 5f       	subi	r30, 0xFD	; 253
    1c94:	f7 4d       	sbci	r31, 0xD7	; 215
    1c96:	e1 81       	ldd	r30, Z+1	; 0x01
    1c98:	8e 2f       	mov	r24, r30
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e6 55       	subi	r30, 0x56	; 86
    1ca0:	f1 09       	sbc	r31, r1
    1ca2:	e1 32       	cpi	r30, 0x21	; 33
    1ca4:	f1 05       	cpc	r31, r1
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <report+0x134>
    1ca8:	8b c4       	rjmp	.+2326   	; 0x25c0 <report+0xa4a>
    1caa:	ed 58       	subi	r30, 0x8D	; 141
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__tablejump2__>
			break;
*/
		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	8b 5e       	subi	r24, 0xEB	; 235
    1cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb8:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1cbc:	84 e3       	ldi	r24, 0x34	; 52
    1cbe:	80 9f       	mul	r24, r16
    1cc0:	70 01       	movw	r14, r0
    1cc2:	81 9f       	mul	r24, r17
    1cc4:	f0 0c       	add	r15, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	87 01       	movw	r16, r14
    1cca:	0d 5f       	subi	r16, 0xFD	; 253
    1ccc:	17 4d       	sbci	r17, 0xD7	; 215
    1cce:	f8 01       	movw	r30, r16
    1cd0:	81 81       	ldd	r24, Z+1	; 0x01
    1cd2:	0f 2e       	mov	r0, r31
    1cd4:	ff e1       	ldi	r31, 0x1F	; 31
    1cd6:	5f 2e       	mov	r5, r31
    1cd8:	f0 2d       	mov	r31, r0
    1cda:	58 0e       	add	r5, r24
			status = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1cdc:	ae 01       	movw	r20, r28
    1cde:	49 54       	subi	r20, 0x49	; 73
    1ce0:	5d 4f       	sbci	r21, 0xFD	; 253
    1ce2:	60 e1       	ldi	r22, 0x10	; 16
    1ce4:	85 2d       	mov	r24, r5
    1ce6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <get_ROBOEncoder>
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1cea:	c9 54       	subi	r28, 0x49	; 73
    1cec:	dd 4f       	sbci	r29, 0xFD	; 253
    1cee:	68 81       	ld	r22, Y
    1cf0:	79 81       	ldd	r23, Y+1	; 0x01
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	c7 5b       	subi	r28, 0xB7	; 183
    1cf8:	d2 40       	sbci	r29, 0x02	; 2
    1cfa:	0f 2e       	mov	r0, r31
    1cfc:	fc e0       	ldi	r31, 0x0C	; 12
    1cfe:	6f 2e       	mov	r6, r31
    1d00:	77 24       	eor	r7, r7
    1d02:	73 94       	inc	r7
    1d04:	81 2c       	mov	r8, r1
    1d06:	91 2c       	mov	r9, r1
    1d08:	f0 2d       	mov	r31, r0
    1d0a:	a4 01       	movw	r20, r8
    1d0c:	93 01       	movw	r18, r6
    1d0e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__divmodsi4>
    1d12:	d2 2e       	mov	r13, r18
    1d14:	c3 2e       	mov	r12, r19
    1d16:	b4 2e       	mov	r11, r20
    1d18:	a5 2e       	mov	r10, r21
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1d1a:	ae 01       	movw	r20, r28
    1d1c:	45 54       	subi	r20, 0x45	; 69
    1d1e:	5d 4f       	sbci	r21, 0xFD	; 253
    1d20:	62 e1       	ldi	r22, 0x12	; 18
    1d22:	85 2d       	mov	r24, r5
    1d24:	0e 94 73 13 	call	0x26e6	; 0x26e6 <get_ROBOEncoder>
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    1d28:	c5 54       	subi	r28, 0x45	; 69
    1d2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d2c:	68 81       	ld	r22, Y
    1d2e:	79 81       	ldd	r23, Y+1	; 0x01
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	cb 5b       	subi	r28, 0xBB	; 187
    1d36:	d2 40       	sbci	r29, 0x02	; 2
    1d38:	a4 01       	movw	r20, r8
    1d3a:	93 01       	movw	r18, r6
    1d3c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__divmodsi4>
    1d40:	92 2e       	mov	r9, r18
    1d42:	83 2e       	mov	r8, r19
    1d44:	74 2e       	mov	r7, r20
    1d46:	65 2e       	mov	r6, r21
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
    1d48:	61 e3       	ldi	r22, 0x31	; 49
    1d4a:	85 2d       	mov	r24, r5
    1d4c:	0e 94 89 14 	call	0x2912	; 0x2912 <get_ROBOInt32>
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1d50:	aa 27       	eor	r26, r26
    1d52:	bb 27       	eor	r27, r27
    1d54:	9c 01       	movw	r18, r24
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	66 0f       	add	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	66 0f       	add	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	62 0f       	add	r22, r18
    1d6a:	73 1f       	adc	r23, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1d6c:	c7 01       	movw	r24, r14
    1d6e:	82 5d       	subi	r24, 0xD2	; 210
    1d70:	97 4d       	sbci	r25, 0xD7	; 215
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1d72:	f8 01       	movw	r30, r16
    1d74:	21 81       	ldd	r18, Z+1	; 0x01
    1d76:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d7a:	32 ff       	sbrs	r19, 2
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <report+0x20e>
    1d7e:	32 e0       	ldi	r19, 0x02	; 2
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <report+0x212>
    1d84:	31 e0       	ldi	r19, 0x01	; 1
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	9f 93       	push	r25
    1d8a:	8f 93       	push	r24
    1d8c:	7f 93       	push	r23
    1d8e:	6f 93       	push	r22
    1d90:	6f 92       	push	r6
    1d92:	7f 92       	push	r7
    1d94:	8f 92       	push	r8
    1d96:	9f 92       	push	r9
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	1f 92       	push	r1
    1da2:	2f 93       	push	r18
    1da4:	ce 01       	movw	r24, r28
    1da6:	8b 5e       	subi	r24, 0xEB	; 235
    1da8:	9e 4f       	sbci	r25, 0xFE	; 254
    1daa:	9f 93       	push	r25
    1dac:	8f 93       	push	r24
    1dae:	4f 93       	push	r20
    1db0:	3f 93       	push	r19
    1db2:	8e 57       	subi	r24, 0x7E	; 126
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	9f 93       	push	r25
    1db8:	8f 93       	push	r24
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0f 5f       	subi	r16, 0xFF	; 255
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	1f 93       	push	r17
    1dc2:	0f 93       	push	r16
    1dc4:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1dc8:	c8 01       	movw	r24, r16
    1dca:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1dce:	f8 01       	movw	r30, r16
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	00 20       	and	r0, r0
    1dd4:	e9 f7       	brne	.-6      	; 0x1dd0 <report+0x25a>
    1dd6:	31 97       	sbiw	r30, 0x01	; 1
    1dd8:	af 01       	movw	r20, r30
    1dda:	40 1b       	sub	r20, r16
    1ddc:	51 0b       	sbc	r21, r17
    1dde:	b8 01       	movw	r22, r16
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			break;
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	ea c3       	rjmp	.+2004   	; 0x25c0 <report+0xa4a>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
    1df2:	f6 2e       	mov	r15, r22
    1df4:	e7 2e       	mov	r14, r23
    1df6:	d8 2e       	mov	r13, r24
    1df8:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <get_humidity>
    1e00:	b6 2e       	mov	r11, r22
    1e02:	a7 2e       	mov	r10, r23
    1e04:	98 2e       	mov	r9, r24
    1e06:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
    1e0e:	c5 53       	subi	r28, 0x35	; 53
    1e10:	dd 4f       	sbci	r29, 0xFD	; 253
    1e12:	68 83       	st	Y, r22
    1e14:	cb 5c       	subi	r28, 0xCB	; 203
    1e16:	d2 40       	sbci	r29, 0x02	; 2
    1e18:	c4 53       	subi	r28, 0x34	; 52
    1e1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e1c:	78 83       	st	Y, r23
    1e1e:	cc 5c       	subi	r28, 0xCC	; 204
    1e20:	d2 40       	sbci	r29, 0x02	; 2
    1e22:	c3 53       	subi	r28, 0x33	; 51
    1e24:	dd 4f       	sbci	r29, 0xFD	; 253
    1e26:	88 83       	st	Y, r24
    1e28:	cd 5c       	subi	r28, 0xCD	; 205
    1e2a:	d2 40       	sbci	r29, 0x02	; 2
    1e2c:	c2 53       	subi	r28, 0x32	; 50
    1e2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e30:	98 83       	st	Y, r25
    1e32:	ce 5c       	subi	r28, 0xCE	; 206
    1e34:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	0e 94 e6 06 	call	0xdcc	; 0xdcc <get_humidity>
    1e3c:	c1 53       	subi	r28, 0x31	; 49
    1e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e40:	68 83       	st	Y, r22
    1e42:	cf 5c       	subi	r28, 0xCF	; 207
    1e44:	d2 40       	sbci	r29, 0x02	; 2
    1e46:	c0 53       	subi	r28, 0x30	; 48
    1e48:	dd 4f       	sbci	r29, 0xFD	; 253
    1e4a:	78 83       	st	Y, r23
    1e4c:	c0 5d       	subi	r28, 0xD0	; 208
    1e4e:	d2 40       	sbci	r29, 0x02	; 2
    1e50:	cf 52       	subi	r28, 0x2F	; 47
    1e52:	dd 4f       	sbci	r29, 0xFD	; 253
    1e54:	88 83       	st	Y, r24
    1e56:	c1 5d       	subi	r28, 0xD1	; 209
    1e58:	d2 40       	sbci	r29, 0x02	; 2
    1e5a:	ce 52       	subi	r28, 0x2E	; 46
    1e5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e5e:	98 83       	st	Y, r25
    1e60:	c2 5d       	subi	r28, 0xD2	; 210
    1e62:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
    1e6a:	cd 52       	subi	r28, 0x2D	; 45
    1e6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e6e:	68 83       	st	Y, r22
    1e70:	c3 5d       	subi	r28, 0xD3	; 211
    1e72:	d2 40       	sbci	r29, 0x02	; 2
    1e74:	cc 52       	subi	r28, 0x2C	; 44
    1e76:	dd 4f       	sbci	r29, 0xFD	; 253
    1e78:	78 83       	st	Y, r23
    1e7a:	c4 5d       	subi	r28, 0xD4	; 212
    1e7c:	d2 40       	sbci	r29, 0x02	; 2
    1e7e:	cb 52       	subi	r28, 0x2B	; 43
    1e80:	dd 4f       	sbci	r29, 0xFD	; 253
    1e82:	88 83       	st	Y, r24
    1e84:	c5 5d       	subi	r28, 0xD5	; 213
    1e86:	d2 40       	sbci	r29, 0x02	; 2
    1e88:	ca 52       	subi	r28, 0x2A	; 42
    1e8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8c:	98 83       	st	Y, r25
    1e8e:	c6 5d       	subi	r28, 0xD6	; 214
    1e90:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	0e 94 e6 06 	call	0xdcc	; 0xdcc <get_humidity>
    1e98:	76 2e       	mov	r7, r22
    1e9a:	67 2e       	mov	r6, r23
    1e9c:	58 2e       	mov	r5, r24
    1e9e:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <get_temperature>
    1ea6:	c9 52       	subi	r28, 0x29	; 41
    1ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eaa:	68 83       	st	Y, r22
    1eac:	c7 5d       	subi	r28, 0xD7	; 215
    1eae:	d2 40       	sbci	r29, 0x02	; 2
    1eb0:	c8 52       	subi	r28, 0x28	; 40
    1eb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb4:	78 83       	st	Y, r23
    1eb6:	c8 5d       	subi	r28, 0xD8	; 216
    1eb8:	d2 40       	sbci	r29, 0x02	; 2
    1eba:	38 2e       	mov	r3, r24
    1ebc:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	8b 5e       	subi	r24, 0xEB	; 235
    1ec2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec4:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1ec8:	24 e3       	ldi	r18, 0x34	; 52
    1eca:	20 9f       	mul	r18, r16
    1ecc:	c0 01       	movw	r24, r0
    1ece:	21 9f       	mul	r18, r17
    1ed0:	90 0d       	add	r25, r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	82 5d       	subi	r24, 0xD2	; 210
    1ed6:	97 4d       	sbci	r25, 0xD7	; 215
    1ed8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1edc:	22 ff       	sbrs	r18, 2
    1ede:	03 c0       	rjmp	.+6      	; 0x1ee6 <report+0x370>
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <report+0x374>
    1ee6:	21 e0       	ldi	r18, 0x01	; 1
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	9f 93       	push	r25
    1eec:	8f 93       	push	r24
    1eee:	2f 92       	push	r2
    1ef0:	3f 92       	push	r3
    1ef2:	c8 52       	subi	r28, 0x28	; 40
    1ef4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ef6:	98 81       	ld	r25, Y
    1ef8:	c8 5d       	subi	r28, 0xD8	; 216
    1efa:	d2 40       	sbci	r29, 0x02	; 2
    1efc:	9f 93       	push	r25
    1efe:	c9 52       	subi	r28, 0x29	; 41
    1f00:	dd 4f       	sbci	r29, 0xFD	; 253
    1f02:	e8 81       	ld	r30, Y
    1f04:	c7 5d       	subi	r28, 0xD7	; 215
    1f06:	d2 40       	sbci	r29, 0x02	; 2
    1f08:	ef 93       	push	r30
    1f0a:	4f 92       	push	r4
    1f0c:	5f 92       	push	r5
    1f0e:	6f 92       	push	r6
    1f10:	7f 92       	push	r7
    1f12:	ca 52       	subi	r28, 0x2A	; 42
    1f14:	dd 4f       	sbci	r29, 0xFD	; 253
    1f16:	f8 81       	ld	r31, Y
    1f18:	c6 5d       	subi	r28, 0xD6	; 214
    1f1a:	d2 40       	sbci	r29, 0x02	; 2
    1f1c:	ff 93       	push	r31
    1f1e:	cb 52       	subi	r28, 0x2B	; 43
    1f20:	dd 4f       	sbci	r29, 0xFD	; 253
    1f22:	88 81       	ld	r24, Y
    1f24:	c5 5d       	subi	r28, 0xD5	; 213
    1f26:	d2 40       	sbci	r29, 0x02	; 2
    1f28:	8f 93       	push	r24
    1f2a:	cc 52       	subi	r28, 0x2C	; 44
    1f2c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2e:	98 81       	ld	r25, Y
    1f30:	c4 5d       	subi	r28, 0xD4	; 212
    1f32:	d2 40       	sbci	r29, 0x02	; 2
    1f34:	9f 93       	push	r25
    1f36:	cd 52       	subi	r28, 0x2D	; 45
    1f38:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3a:	e8 81       	ld	r30, Y
    1f3c:	c3 5d       	subi	r28, 0xD3	; 211
    1f3e:	d2 40       	sbci	r29, 0x02	; 2
    1f40:	ef 93       	push	r30
    1f42:	ce 52       	subi	r28, 0x2E	; 46
    1f44:	dd 4f       	sbci	r29, 0xFD	; 253
    1f46:	f8 81       	ld	r31, Y
    1f48:	c2 5d       	subi	r28, 0xD2	; 210
    1f4a:	d2 40       	sbci	r29, 0x02	; 2
    1f4c:	ff 93       	push	r31
    1f4e:	cf 52       	subi	r28, 0x2F	; 47
    1f50:	dd 4f       	sbci	r29, 0xFD	; 253
    1f52:	88 81       	ld	r24, Y
    1f54:	c1 5d       	subi	r28, 0xD1	; 209
    1f56:	d2 40       	sbci	r29, 0x02	; 2
    1f58:	8f 93       	push	r24
    1f5a:	c0 53       	subi	r28, 0x30	; 48
    1f5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5e:	98 81       	ld	r25, Y
    1f60:	c0 5d       	subi	r28, 0xD0	; 208
    1f62:	d2 40       	sbci	r29, 0x02	; 2
    1f64:	9f 93       	push	r25
    1f66:	c1 53       	subi	r28, 0x31	; 49
    1f68:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6a:	e8 81       	ld	r30, Y
    1f6c:	cf 5c       	subi	r28, 0xCF	; 207
    1f6e:	d2 40       	sbci	r29, 0x02	; 2
    1f70:	ef 93       	push	r30
    1f72:	c2 53       	subi	r28, 0x32	; 50
    1f74:	dd 4f       	sbci	r29, 0xFD	; 253
    1f76:	f8 81       	ld	r31, Y
    1f78:	ce 5c       	subi	r28, 0xCE	; 206
    1f7a:	d2 40       	sbci	r29, 0x02	; 2
    1f7c:	ff 93       	push	r31
    1f7e:	c3 53       	subi	r28, 0x33	; 51
    1f80:	dd 4f       	sbci	r29, 0xFD	; 253
    1f82:	88 81       	ld	r24, Y
    1f84:	cd 5c       	subi	r28, 0xCD	; 205
    1f86:	d2 40       	sbci	r29, 0x02	; 2
    1f88:	8f 93       	push	r24
    1f8a:	c4 53       	subi	r28, 0x34	; 52
    1f8c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f8e:	98 81       	ld	r25, Y
    1f90:	cc 5c       	subi	r28, 0xCC	; 204
    1f92:	d2 40       	sbci	r29, 0x02	; 2
    1f94:	9f 93       	push	r25
    1f96:	c5 53       	subi	r28, 0x35	; 53
    1f98:	dd 4f       	sbci	r29, 0xFD	; 253
    1f9a:	e8 81       	ld	r30, Y
    1f9c:	cb 5c       	subi	r28, 0xCB	; 203
    1f9e:	d2 40       	sbci	r29, 0x02	; 2
    1fa0:	ef 93       	push	r30
    1fa2:	8f 92       	push	r8
    1fa4:	9f 92       	push	r9
    1fa6:	af 92       	push	r10
    1fa8:	bf 92       	push	r11
    1faa:	cf 92       	push	r12
    1fac:	df 92       	push	r13
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	8b 5e       	subi	r24, 0xEB	; 235
    1fb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1fb8:	9f 93       	push	r25
    1fba:	8f 93       	push	r24
    1fbc:	3f 93       	push	r19
    1fbe:	2f 93       	push	r18
    1fc0:	80 5c       	subi	r24, 0xC0	; 192
    1fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc4:	9f 93       	push	r25
    1fc6:	8f 93       	push	r24
    1fc8:	8e 01       	movw	r16, r28
    1fca:	0f 5f       	subi	r16, 0xFF	; 255
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	1f 93       	push	r17
    1fd0:	0f 93       	push	r16
    1fd2:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			checksum_NMEA(outbuf);
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	c8 01       	movw	r24, r16
    1fdc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	00 20       	and	r0, r0
    1fe6:	e9 f7       	brne	.-6      	; 0x1fe2 <report+0x46c>
    1fe8:	31 97       	sbiw	r30, 0x01	; 1
    1fea:	af 01       	movw	r20, r30
    1fec:	40 1b       	sub	r20, r16
    1fee:	51 0b       	sbc	r21, r17
    1ff0:	b8 01       	movw	r22, r16
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	6a e2       	ldi	r22, 0x2A	; 42
    1ffc:	73 e8       	ldi	r23, 0x83	; 131
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2004:	26 e6       	ldi	r18, 0x66	; 102
    2006:	36 e6       	ldi	r19, 0x66	; 102
    2008:	46 ee       	ldi	r20, 0xE6	; 230
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	6f 2d       	mov	r22, r15
    200e:	7e 2d       	mov	r23, r14
    2010:	8d 2d       	mov	r24, r13
    2012:	9c 2d       	mov	r25, r12
    2014:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsf3>
    2018:	8f 92       	push	r8
    201a:	9f 92       	push	r9
    201c:	af 92       	push	r10
    201e:	bf 92       	push	r11
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	52 e4       	ldi	r21, 0x42	; 66
    2028:	0e 94 c7 18 	call	0x318e	; 0x318e <__addsf3>
    202c:	9f 93       	push	r25
    202e:	8f 93       	push	r24
    2030:	7f 93       	push	r23
    2032:	6f 93       	push	r22
    2034:	cf 92       	push	r12
    2036:	df 92       	push	r13
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	8a e3       	ldi	r24, 0x3A	; 58
    203e:	93 e8       	ldi	r25, 0x83	; 131
    2040:	9f 93       	push	r25
    2042:	8f 93       	push	r24
    2044:	1f 93       	push	r17
    2046:	0f 93       	push	r16
    2048:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			writestr_OLED(1, outbuf, 2);
    204c:	42 e0       	ldi	r20, 0x02	; 2
    204e:	b8 01       	movw	r22, r16
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	b2 c2       	rjmp	.+1380   	; 0x25c0 <report+0xa4a>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    205c:	ae 01       	movw	r20, r28
    205e:	49 53       	subi	r20, 0x39	; 57
    2060:	5d 4f       	sbci	r21, 0xFD	; 253
    2062:	be 01       	movw	r22, r28
    2064:	6d 53       	subi	r22, 0x3D	; 61
    2066:	7d 4f       	sbci	r23, 0xFD	; 253
    2068:	ce 01       	movw	r24, r28
    206a:	81 54       	subi	r24, 0x41	; 65
    206c:	9d 4f       	sbci	r25, 0xFD	; 253
    206e:	0e 94 de 08 	call	0x11bc	; 0x11bc <get_orientation>
			get_time(currenttime);
    2072:	ce 01       	movw	r24, r28
    2074:	8b 5e       	subi	r24, 0xEB	; 235
    2076:	9e 4f       	sbci	r25, 0xFE	; 254
    2078:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    207c:	24 e3       	ldi	r18, 0x34	; 52
    207e:	20 9f       	mul	r18, r16
    2080:	c0 01       	movw	r24, r0
    2082:	21 9f       	mul	r18, r17
    2084:	90 0d       	add	r25, r0
    2086:	11 24       	eor	r1, r1
    2088:	82 5d       	subi	r24, 0xD2	; 210
    208a:	97 4d       	sbci	r25, 0xD7	; 215
    208c:	c9 53       	subi	r28, 0x39	; 57
    208e:	dd 4f       	sbci	r29, 0xFD	; 253
    2090:	a8 81       	ld	r26, Y
    2092:	c7 5c       	subi	r28, 0xC7	; 199
    2094:	d2 40       	sbci	r29, 0x02	; 2
    2096:	c8 53       	subi	r28, 0x38	; 56
    2098:	dd 4f       	sbci	r29, 0xFD	; 253
    209a:	b8 81       	ld	r27, Y
    209c:	c8 5c       	subi	r28, 0xC8	; 200
    209e:	d2 40       	sbci	r29, 0x02	; 2
    20a0:	c7 53       	subi	r28, 0x37	; 55
    20a2:	dd 4f       	sbci	r29, 0xFD	; 253
    20a4:	18 81       	ld	r17, Y
    20a6:	c9 5c       	subi	r28, 0xC9	; 201
    20a8:	d2 40       	sbci	r29, 0x02	; 2
    20aa:	c6 53       	subi	r28, 0x36	; 54
    20ac:	dd 4f       	sbci	r29, 0xFD	; 253
    20ae:	08 81       	ld	r16, Y
    20b0:	ca 5c       	subi	r28, 0xCA	; 202
    20b2:	d2 40       	sbci	r29, 0x02	; 2
    20b4:	cd 53       	subi	r28, 0x3D	; 61
    20b6:	dd 4f       	sbci	r29, 0xFD	; 253
    20b8:	68 81       	ld	r22, Y
    20ba:	c3 5c       	subi	r28, 0xC3	; 195
    20bc:	d2 40       	sbci	r29, 0x02	; 2
    20be:	cc 53       	subi	r28, 0x3C	; 60
    20c0:	dd 4f       	sbci	r29, 0xFD	; 253
    20c2:	78 81       	ld	r23, Y
    20c4:	c4 5c       	subi	r28, 0xC4	; 196
    20c6:	d2 40       	sbci	r29, 0x02	; 2
    20c8:	cb 53       	subi	r28, 0x3B	; 59
    20ca:	dd 4f       	sbci	r29, 0xFD	; 253
    20cc:	e8 81       	ld	r30, Y
    20ce:	c5 5c       	subi	r28, 0xC5	; 197
    20d0:	d2 40       	sbci	r29, 0x02	; 2
    20d2:	ca 53       	subi	r28, 0x3A	; 58
    20d4:	dd 4f       	sbci	r29, 0xFD	; 253
    20d6:	f8 81       	ld	r31, Y
    20d8:	c6 5c       	subi	r28, 0xC6	; 198
    20da:	d2 40       	sbci	r29, 0x02	; 2
    20dc:	c1 54       	subi	r28, 0x41	; 65
    20de:	dd 4f       	sbci	r29, 0xFD	; 253
    20e0:	28 81       	ld	r18, Y
    20e2:	cf 5b       	subi	r28, 0xBF	; 191
    20e4:	d2 40       	sbci	r29, 0x02	; 2
    20e6:	c0 54       	subi	r28, 0x40	; 64
    20e8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ea:	38 81       	ld	r19, Y
    20ec:	c0 5c       	subi	r28, 0xC0	; 192
    20ee:	d2 40       	sbci	r29, 0x02	; 2
    20f0:	cf 53       	subi	r28, 0x3F	; 63
    20f2:	dd 4f       	sbci	r29, 0xFD	; 253
    20f4:	48 81       	ld	r20, Y
    20f6:	c1 5c       	subi	r28, 0xC1	; 193
    20f8:	d2 40       	sbci	r29, 0x02	; 2
    20fa:	ce 53       	subi	r28, 0x3E	; 62
    20fc:	dd 4f       	sbci	r29, 0xFD	; 253
    20fe:	58 81       	ld	r21, Y
    2100:	c2 5c       	subi	r28, 0xC2	; 194
    2102:	d2 40       	sbci	r29, 0x02	; 2
    2104:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2108:	f2 fe       	sbrs	r15, 2
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <report+0x5a0>
    210c:	68 94       	set
    210e:	ff 24       	eor	r15, r15
    2110:	f1 f8       	bld	r15, 1
    2112:	e1 2c       	mov	r14, r1
    2114:	03 c0       	rjmp	.+6      	; 0x211c <report+0x5a6>
    2116:	ff 24       	eor	r15, r15
    2118:	f3 94       	inc	r15
    211a:	e1 2c       	mov	r14, r1
    211c:	9f 93       	push	r25
    211e:	8f 93       	push	r24
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	bf 93       	push	r27
    2126:	af 93       	push	r26
    2128:	ff 93       	push	r31
    212a:	ef 93       	push	r30
    212c:	7f 93       	push	r23
    212e:	6f 93       	push	r22
    2130:	5f 93       	push	r21
    2132:	4f 93       	push	r20
    2134:	3f 93       	push	r19
    2136:	2f 93       	push	r18
    2138:	ce 01       	movw	r24, r28
    213a:	8b 5e       	subi	r24, 0xEB	; 235
    213c:	9e 4f       	sbci	r25, 0xFE	; 254
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	8b 54       	subi	r24, 0x4B	; 75
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	9f 93       	push	r25
    214c:	8f 93       	push	r24
    214e:	8e 01       	movw	r16, r28
    2150:	0f 5f       	subi	r16, 0xFF	; 255
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	1f 93       	push	r17
    2156:	0f 93       	push	r16
    2158:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			checksum_NMEA(outbuf);
    215c:	c8 01       	movw	r24, r16
    215e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2162:	f8 01       	movw	r30, r16
    2164:	01 90       	ld	r0, Z+
    2166:	00 20       	and	r0, r0
    2168:	e9 f7       	brne	.-6      	; 0x2164 <report+0x5ee>
    216a:	31 97       	sbiw	r30, 0x01	; 1
    216c:	af 01       	movw	r20, r30
    216e:	40 1b       	sub	r20, r16
    2170:	51 0b       	sbc	r21, r17
    2172:	b8 01       	movw	r22, r16
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	60 e5       	ldi	r22, 0x50	; 80
    217e:	73 e8       	ldi	r23, 0x83	; 131
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2186:	c6 53       	subi	r28, 0x36	; 54
    2188:	dd 4f       	sbci	r29, 0xFD	; 253
    218a:	88 81       	ld	r24, Y
    218c:	ca 5c       	subi	r28, 0xCA	; 202
    218e:	d2 40       	sbci	r29, 0x02	; 2
    2190:	8f 93       	push	r24
    2192:	c7 53       	subi	r28, 0x37	; 55
    2194:	dd 4f       	sbci	r29, 0xFD	; 253
    2196:	88 81       	ld	r24, Y
    2198:	c9 5c       	subi	r28, 0xC9	; 201
    219a:	d2 40       	sbci	r29, 0x02	; 2
    219c:	8f 93       	push	r24
    219e:	c8 53       	subi	r28, 0x38	; 56
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	88 81       	ld	r24, Y
    21a4:	c8 5c       	subi	r28, 0xC8	; 200
    21a6:	d2 40       	sbci	r29, 0x02	; 2
    21a8:	8f 93       	push	r24
    21aa:	c9 53       	subi	r28, 0x39	; 57
    21ac:	dd 4f       	sbci	r29, 0xFD	; 253
    21ae:	88 81       	ld	r24, Y
    21b0:	c7 5c       	subi	r28, 0xC7	; 199
    21b2:	d2 40       	sbci	r29, 0x02	; 2
    21b4:	8f 93       	push	r24
    21b6:	ca 53       	subi	r28, 0x3A	; 58
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	88 81       	ld	r24, Y
    21bc:	c6 5c       	subi	r28, 0xC6	; 198
    21be:	d2 40       	sbci	r29, 0x02	; 2
    21c0:	8f 93       	push	r24
    21c2:	cb 53       	subi	r28, 0x3B	; 59
    21c4:	dd 4f       	sbci	r29, 0xFD	; 253
    21c6:	88 81       	ld	r24, Y
    21c8:	c5 5c       	subi	r28, 0xC5	; 197
    21ca:	d2 40       	sbci	r29, 0x02	; 2
    21cc:	8f 93       	push	r24
    21ce:	cc 53       	subi	r28, 0x3C	; 60
    21d0:	dd 4f       	sbci	r29, 0xFD	; 253
    21d2:	88 81       	ld	r24, Y
    21d4:	c4 5c       	subi	r28, 0xC4	; 196
    21d6:	d2 40       	sbci	r29, 0x02	; 2
    21d8:	8f 93       	push	r24
    21da:	cd 53       	subi	r28, 0x3D	; 61
    21dc:	dd 4f       	sbci	r29, 0xFD	; 253
    21de:	88 81       	ld	r24, Y
    21e0:	c3 5c       	subi	r28, 0xC3	; 195
    21e2:	d2 40       	sbci	r29, 0x02	; 2
    21e4:	8f 93       	push	r24
    21e6:	ce 53       	subi	r28, 0x3E	; 62
    21e8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ea:	88 81       	ld	r24, Y
    21ec:	c2 5c       	subi	r28, 0xC2	; 194
    21ee:	d2 40       	sbci	r29, 0x02	; 2
    21f0:	8f 93       	push	r24
    21f2:	cf 53       	subi	r28, 0x3F	; 63
    21f4:	dd 4f       	sbci	r29, 0xFD	; 253
    21f6:	88 81       	ld	r24, Y
    21f8:	c1 5c       	subi	r28, 0xC1	; 193
    21fa:	d2 40       	sbci	r29, 0x02	; 2
    21fc:	8f 93       	push	r24
    21fe:	c0 54       	subi	r28, 0x40	; 64
    2200:	dd 4f       	sbci	r29, 0xFD	; 253
    2202:	88 81       	ld	r24, Y
    2204:	c0 5c       	subi	r28, 0xC0	; 192
    2206:	d2 40       	sbci	r29, 0x02	; 2
    2208:	8f 93       	push	r24
    220a:	c1 54       	subi	r28, 0x41	; 65
    220c:	dd 4f       	sbci	r29, 0xFD	; 253
    220e:	88 81       	ld	r24, Y
    2210:	cf 5b       	subi	r28, 0xBF	; 191
    2212:	d2 40       	sbci	r29, 0x02	; 2
    2214:	8f 93       	push	r24
    2216:	ce 01       	movw	r24, r28
    2218:	86 51       	subi	r24, 0x16	; 22
    221a:	9e 4f       	sbci	r25, 0xFE	; 254
    221c:	9f 93       	push	r25
    221e:	8f 93       	push	r24
    2220:	1f 93       	push	r17
    2222:	0f 93       	push	r16
    2224:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			writestr_OLED(1, outbuf, 2);
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	42 e0       	ldi	r20, 0x02	; 2
    222e:	b8 01       	movw	r22, r16
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    2236:	c4 c1       	rjmp	.+904    	; 0x25c0 <report+0xa4a>

		case 'p':
			get_time(currenttime);
    2238:	ce 01       	movw	r24, r28
    223a:	8b 5e       	subi	r24, 0xEB	; 235
    223c:	9e 4f       	sbci	r25, 0xFE	; 254
    223e:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2242:	9e 01       	movw	r18, r28
    2244:	2c 5a       	subi	r18, 0xAC	; 172
    2246:	3e 4f       	sbci	r19, 0xFE	; 254
    2248:	ae 01       	movw	r20, r28
    224a:	4d 5a       	subi	r20, 0xAD	; 173
    224c:	5e 4f       	sbci	r21, 0xFE	; 254
    224e:	be 01       	movw	r22, r28
    2250:	6e 5a       	subi	r22, 0xAE	; 174
    2252:	7e 4f       	sbci	r23, 0xFE	; 254
    2254:	ce 01       	movw	r24, r28
    2256:	8f 5a       	subi	r24, 0xAF	; 175
    2258:	9e 4f       	sbci	r25, 0xFE	; 254
    225a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    225e:	24 e3       	ldi	r18, 0x34	; 52
    2260:	20 9f       	mul	r18, r16
    2262:	c0 01       	movw	r24, r0
    2264:	21 9f       	mul	r18, r17
    2266:	90 0d       	add	r25, r0
    2268:	11 24       	eor	r1, r1
    226a:	82 5d       	subi	r24, 0xD2	; 210
    226c:	97 4d       	sbci	r25, 0xD7	; 215
    226e:	cc 5a       	subi	r28, 0xAC	; 172
    2270:	de 4f       	sbci	r29, 0xFE	; 254
    2272:	58 81       	ld	r21, Y
    2274:	c4 55       	subi	r28, 0x54	; 84
    2276:	d1 40       	sbci	r29, 0x01	; 1
    2278:	cd 5a       	subi	r28, 0xAD	; 173
    227a:	de 4f       	sbci	r29, 0xFE	; 254
    227c:	48 81       	ld	r20, Y
    227e:	c3 55       	subi	r28, 0x53	; 83
    2280:	d1 40       	sbci	r29, 0x01	; 1
    2282:	ce 5a       	subi	r28, 0xAE	; 174
    2284:	de 4f       	sbci	r29, 0xFE	; 254
    2286:	38 81       	ld	r19, Y
    2288:	c2 55       	subi	r28, 0x52	; 82
    228a:	d1 40       	sbci	r29, 0x01	; 1
    228c:	cf 5a       	subi	r28, 0xAF	; 175
    228e:	de 4f       	sbci	r29, 0xFE	; 254
    2290:	28 81       	ld	r18, Y
    2292:	c1 55       	subi	r28, 0x51	; 81
    2294:	d1 40       	sbci	r29, 0x01	; 1
    2296:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    229a:	62 ff       	sbrs	r22, 2
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <report+0x72e>
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <report+0x732>
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	9f 93       	push	r25
    22aa:	8f 93       	push	r24
    22ac:	1f 92       	push	r1
    22ae:	5f 93       	push	r21
    22b0:	1f 92       	push	r1
    22b2:	4f 93       	push	r20
    22b4:	1f 92       	push	r1
    22b6:	3f 93       	push	r19
    22b8:	1f 92       	push	r1
    22ba:	2f 93       	push	r18
    22bc:	ce 01       	movw	r24, r28
    22be:	8b 5e       	subi	r24, 0xEB	; 235
    22c0:	9e 4f       	sbci	r25, 0xFE	; 254
    22c2:	9f 93       	push	r25
    22c4:	8f 93       	push	r24
    22c6:	7f 93       	push	r23
    22c8:	6f 93       	push	r22
    22ca:	89 51       	subi	r24, 0x19	; 25
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	9f 93       	push	r25
    22d0:	8f 93       	push	r24
    22d2:	8e 01       	movw	r16, r28
    22d4:	0f 5f       	subi	r16, 0xFF	; 255
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	1f 93       	push	r17
    22da:	0f 93       	push	r16
    22dc:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			checksum_NMEA(outbuf);
    22e0:	c8 01       	movw	r24, r16
    22e2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    22e6:	f8 01       	movw	r30, r16
    22e8:	01 90       	ld	r0, Z+
    22ea:	00 20       	and	r0, r0
    22ec:	e9 f7       	brne	.-6      	; 0x22e8 <report+0x772>
    22ee:	31 97       	sbiw	r30, 0x01	; 1
    22f0:	af 01       	movw	r20, r30
    22f2:	40 1b       	sub	r20, r16
    22f4:	51 0b       	sbc	r21, r17
    22f6:	b8 01       	movw	r22, r16
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    22fe:	cd 5a       	subi	r28, 0xAD	; 173
    2300:	de 4f       	sbci	r29, 0xFE	; 254
    2302:	88 81       	ld	r24, Y
    2304:	c3 55       	subi	r28, 0x53	; 83
    2306:	d1 40       	sbci	r29, 0x01	; 1
    2308:	1f 92       	push	r1
    230a:	8f 93       	push	r24
    230c:	ce 5a       	subi	r28, 0xAE	; 174
    230e:	de 4f       	sbci	r29, 0xFE	; 254
    2310:	88 81       	ld	r24, Y
    2312:	c2 55       	subi	r28, 0x52	; 82
    2314:	d1 40       	sbci	r29, 0x01	; 1
    2316:	1f 92       	push	r1
    2318:	8f 93       	push	r24
    231a:	ce 01       	movw	r24, r28
    231c:	83 5d       	subi	r24, 0xD3	; 211
    231e:	9d 4f       	sbci	r25, 0xFD	; 253
    2320:	9f 93       	push	r25
    2322:	8f 93       	push	r24
    2324:	1f 93       	push	r17
    2326:	0f 93       	push	r16
    2328:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			writestr_OLED(1, outbuf, 1);
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	b8 01       	movw	r22, r16
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2336:	cc 5a       	subi	r28, 0xAC	; 172
    2338:	de 4f       	sbci	r29, 0xFE	; 254
    233a:	88 81       	ld	r24, Y
    233c:	c4 55       	subi	r28, 0x54	; 84
    233e:	d1 40       	sbci	r29, 0x01	; 1
    2340:	1f 92       	push	r1
    2342:	8f 93       	push	r24
    2344:	cf 5a       	subi	r28, 0xAF	; 175
    2346:	de 4f       	sbci	r29, 0xFE	; 254
    2348:	88 81       	ld	r24, Y
    234a:	c1 55       	subi	r28, 0x51	; 81
    234c:	d1 40       	sbci	r29, 0x01	; 1
    234e:	1f 92       	push	r1
    2350:	8f 93       	push	r24
    2352:	ce 01       	movw	r24, r28
    2354:	80 5c       	subi	r24, 0xC0	; 192
    2356:	9d 4f       	sbci	r25, 0xFD	; 253
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	1f 93       	push	r17
    235e:	0f 93       	push	r16
    2360:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			writestr_OLED(1, outbuf, 2);
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	42 e0       	ldi	r20, 0x02	; 2
    236a:	b8 01       	movw	r22, r16
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    2372:	26 c1       	rjmp	.+588    	; 0x25c0 <report+0xa4a>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2374:	ce 01       	movw	r24, r28
    2376:	8b 5e       	subi	r24, 0xEB	; 235
    2378:	9e 4f       	sbci	r25, 0xFE	; 254
    237a:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    237e:	24 e1       	ldi	r18, 0x14	; 20
    2380:	ae 01       	movw	r20, r28
    2382:	47 5d       	subi	r20, 0xD7	; 215
    2384:	5e 4f       	sbci	r21, 0xFE	; 254
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	80 e5       	ldi	r24, 0x50	; 80
    238c:	0e 94 72 06 	call	0xce4	; 0xce4 <read_FRAM>
			get_BOOTTIME(boottime);
    2390:	ce 01       	movw	r24, r28
    2392:	83 5c       	subi	r24, 0xC3	; 195
    2394:	9e 4f       	sbci	r25, 0xFE	; 254
    2396:	0e 94 df 05 	call	0xbbe	; 0xbbe <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    239a:	24 e3       	ldi	r18, 0x34	; 52
    239c:	20 9f       	mul	r18, r16
    239e:	c0 01       	movw	r24, r0
    23a0:	21 9f       	mul	r18, r17
    23a2:	90 0d       	add	r25, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	82 5d       	subi	r24, 0xD2	; 210
    23a8:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    23aa:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23ae:	22 ff       	sbrs	r18, 2
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <report+0x842>
    23b2:	22 e0       	ldi	r18, 0x02	; 2
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <report+0x846>
    23b8:	21 e0       	ldi	r18, 0x01	; 1
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	9f 93       	push	r25
    23be:	8f 93       	push	r24
    23c0:	ce 01       	movw	r24, r28
    23c2:	83 5c       	subi	r24, 0xC3	; 195
    23c4:	9e 4f       	sbci	r25, 0xFE	; 254
    23c6:	9f 93       	push	r25
    23c8:	8f 93       	push	r24
    23ca:	44 97       	sbiw	r24, 0x14	; 20
    23cc:	9f 93       	push	r25
    23ce:	8f 93       	push	r24
    23d0:	8e 01       	movw	r16, r28
    23d2:	0b 5e       	subi	r16, 0xEB	; 235
    23d4:	1e 4f       	sbci	r17, 0xFE	; 254
    23d6:	1f 93       	push	r17
    23d8:	0f 93       	push	r16
    23da:	3f 93       	push	r19
    23dc:	2f 93       	push	r18
    23de:	86 5d       	subi	r24, 0xD6	; 214
    23e0:	9e 4f       	sbci	r25, 0xFE	; 254
    23e2:	9f 93       	push	r25
    23e4:	8f 93       	push	r24
    23e6:	82 55       	subi	r24, 0x52	; 82
    23e8:	92 40       	sbci	r25, 0x02	; 2
    23ea:	7c 01       	movw	r14, r24
    23ec:	9f 93       	push	r25
    23ee:	8f 93       	push	r24
    23f0:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    23f4:	c7 01       	movw	r24, r14
    23f6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23fa:	f7 01       	movw	r30, r14
    23fc:	01 90       	ld	r0, Z+
    23fe:	00 20       	and	r0, r0
    2400:	e9 f7       	brne	.-6      	; 0x23fc <report+0x886>
    2402:	31 97       	sbiw	r30, 0x01	; 1
    2404:	af 01       	movw	r20, r30
    2406:	4e 19       	sub	r20, r14
    2408:	5f 09       	sbc	r21, r15
    240a:	b7 01       	movw	r22, r14
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			writestr_OLED(1, "Time", 1);
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	6c e5       	ldi	r22, 0x5C	; 92
    2416:	73 e8       	ldi	r23, 0x83	; 131
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    241e:	b8 01       	movw	r22, r16
    2420:	65 5f       	subi	r22, 0xF5	; 245
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	42 e0       	ldi	r20, 0x02	; 2
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	c7 c0       	rjmp	.+398    	; 0x25c0 <report+0xa4a>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	0e 94 ba 07 	call	0xf74	; 0xf74 <read_ionpump>
    2438:	f6 2e       	mov	r15, r22
    243a:	e7 2e       	mov	r14, r23
    243c:	d8 2e       	mov	r13, r24
    243e:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	0e 94 ba 07 	call	0xf74	; 0xf74 <read_ionpump>
    2446:	b6 2e       	mov	r11, r22
    2448:	a7 2e       	mov	r10, r23
    244a:	98 2e       	mov	r9, r24
    244c:	89 2e       	mov	r8, r25
			if (get_time(currenttime)) {
    244e:	ce 01       	movw	r24, r28
    2450:	8b 5e       	subi	r24, 0xEB	; 235
    2452:	9e 4f       	sbci	r25, 0xFE	; 254
    2454:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
    2458:	88 23       	and	r24, r24
    245a:	31 f0       	breq	.+12     	; 0x2468 <report+0x8f2>
				printError(ERR_GETTIME, "DS3231");
    245c:	61 e6       	ldi	r22, 0x61	; 97
    245e:	73 e8       	ldi	r23, 0x83	; 131
    2460:	85 e6       	ldi	r24, 0x65	; 101
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 29 06 	call	0xc52	; 0xc52 <printError>
			}
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2468:	24 e3       	ldi	r18, 0x34	; 52
    246a:	20 9f       	mul	r18, r16
    246c:	c0 01       	movw	r24, r0
    246e:	21 9f       	mul	r18, r17
    2470:	90 0d       	add	r25, r0
    2472:	11 24       	eor	r1, r1
    2474:	82 5d       	subi	r24, 0xD2	; 210
    2476:	97 4d       	sbci	r25, 0xD7	; 215
    2478:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    247c:	22 ff       	sbrs	r18, 2
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <report+0x910>
    2480:	22 e0       	ldi	r18, 0x02	; 2
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	02 c0       	rjmp	.+4      	; 0x248a <report+0x914>
    2486:	21 e0       	ldi	r18, 0x01	; 1
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	9f 93       	push	r25
    248c:	8f 93       	push	r24
    248e:	8f 92       	push	r8
    2490:	9f 92       	push	r9
    2492:	af 92       	push	r10
    2494:	bf 92       	push	r11
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	ce 01       	movw	r24, r28
    24a0:	8b 5e       	subi	r24, 0xEB	; 235
    24a2:	9e 4f       	sbci	r25, 0xFE	; 254
    24a4:	9f 93       	push	r25
    24a6:	8f 93       	push	r24
    24a8:	3f 93       	push	r19
    24aa:	2f 93       	push	r18
    24ac:	85 5a       	subi	r24, 0xA5	; 165
    24ae:	9e 4f       	sbci	r25, 0xFE	; 254
    24b0:	9f 93       	push	r25
    24b2:	8f 93       	push	r24
    24b4:	8e 01       	movw	r16, r28
    24b6:	0f 5f       	subi	r16, 0xFF	; 255
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	1f 93       	push	r17
    24bc:	0f 93       	push	r16
    24be:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			checksum_NMEA(outbuf);
    24c2:	c8 01       	movw	r24, r16
    24c4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24c8:	f8 01       	movw	r30, r16
    24ca:	01 90       	ld	r0, Z+
    24cc:	00 20       	and	r0, r0
    24ce:	e9 f7       	brne	.-6      	; 0x24ca <report+0x954>
    24d0:	31 97       	sbiw	r30, 0x01	; 1
    24d2:	af 01       	movw	r20, r30
    24d4:	40 1b       	sub	r20, r16
    24d6:	51 0b       	sbc	r21, r17
    24d8:	b8 01       	movw	r22, r16
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	68 e6       	ldi	r22, 0x68	; 104
    24e4:	73 e8       	ldi	r23, 0x83	; 131
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	ce 01       	movw	r24, r28
    24fe:	87 56       	subi	r24, 0x67	; 103
    2500:	9d 4f       	sbci	r25, 0xFD	; 253
    2502:	9f 93       	push	r25
    2504:	8f 93       	push	r24
    2506:	1f 93       	push	r17
    2508:	0f 93       	push	r16
    250a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			writestr_OLED(1, outbuf, 2);
    250e:	42 e0       	ldi	r20, 0x02	; 2
    2510:	b8 01       	movw	r22, r16
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	51 c0       	rjmp	.+162    	; 0x25c0 <report+0xa4a>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    251e:	ce 01       	movw	r24, r28
    2520:	86 5f       	subi	r24, 0xF6	; 246
    2522:	9e 4f       	sbci	r25, 0xFE	; 254
    2524:	0e 94 e6 05 	call	0xbcc	; 0xbcc <get_VERSION>
			get_time(currenttime);
    2528:	ce 01       	movw	r24, r28
    252a:	8b 5e       	subi	r24, 0xEB	; 235
    252c:	9e 4f       	sbci	r25, 0xFE	; 254
    252e:	0e 94 63 05 	call	0xac6	; 0xac6 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2532:	24 e3       	ldi	r18, 0x34	; 52
    2534:	20 9f       	mul	r18, r16
    2536:	c0 01       	movw	r24, r0
    2538:	21 9f       	mul	r18, r17
    253a:	90 0d       	add	r25, r0
    253c:	11 24       	eor	r1, r1
    253e:	82 5d       	subi	r24, 0xD2	; 210
    2540:	97 4d       	sbci	r25, 0xD7	; 215
    2542:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2546:	22 ff       	sbrs	r18, 2
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <report+0x9da>
    254a:	22 e0       	ldi	r18, 0x02	; 2
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <report+0x9de>
    2550:	21 e0       	ldi	r18, 0x01	; 1
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	9f 93       	push	r25
    2556:	8f 93       	push	r24
    2558:	ce 01       	movw	r24, r28
    255a:	86 5f       	subi	r24, 0xF6	; 246
    255c:	9e 4f       	sbci	r25, 0xFE	; 254
    255e:	9f 93       	push	r25
    2560:	8f 93       	push	r24
    2562:	0b 96       	adiw	r24, 0x0b	; 11
    2564:	9f 93       	push	r25
    2566:	8f 93       	push	r24
    2568:	3f 93       	push	r19
    256a:	2f 93       	push	r18
    256c:	8f 56       	subi	r24, 0x6F	; 111
    256e:	9e 4f       	sbci	r25, 0xFE	; 254
    2570:	9f 93       	push	r25
    2572:	8f 93       	push	r24
    2574:	8e 01       	movw	r16, r28
    2576:	0f 5f       	subi	r16, 0xFF	; 255
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	1f 93       	push	r17
    257c:	0f 93       	push	r16
    257e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
			checksum_NMEA(outbuf);
    2582:	c8 01       	movw	r24, r16
    2584:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2588:	f8 01       	movw	r30, r16
    258a:	01 90       	ld	r0, Z+
    258c:	00 20       	and	r0, r0
    258e:	e9 f7       	brne	.-6      	; 0x258a <report+0xa14>
    2590:	31 97       	sbiw	r30, 0x01	; 1
    2592:	af 01       	movw	r20, r30
    2594:	40 1b       	sub	r20, r16
    2596:	51 0b       	sbc	r21, r17
    2598:	b8 01       	movw	r22, r16
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	67 ed       	ldi	r22, 0xD7	; 215
    25a4:	72 e8       	ldi	r23, 0x82	; 130
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			get_VERSION(outbuf);
    25ac:	c8 01       	movw	r24, r16
    25ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    25b2:	42 e0       	ldi	r20, 0x02	; 2
    25b4:	b8 01       	movw	r22, r16
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	0e 94 ed 0a 	call	0x15da	; 0x15da <writestr_OLED>
			break;
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	de bf       	out	0x3e, r29	; 62
			break;
	}

	return(GREATERPROMPT);

}
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	c8 52       	subi	r28, 0x28	; 40
    25c4:	dd 4f       	sbci	r29, 0xFD	; 253
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	5f 90       	pop	r5
    25e8:	4f 90       	pop	r4
    25ea:	3f 90       	pop	r3
    25ec:	2f 90       	pop	r2
    25ee:	08 95       	ret

000025f0 <crc16>:
	if (crcExpected != crcReceived) {
		return(-666.0);
	} else {
		return((float) value / 10.0);
	}
}
    25f0:	dc 01       	movw	r26, r24
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	1b c0       	rjmp	.+54     	; 0x2632 <crc16+0x42>
    25fc:	fd 01       	movw	r30, r26
    25fe:	e4 0f       	add	r30, r20
    2600:	f5 1f       	adc	r31, r21
    2602:	20 81       	ld	r18, Z
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	32 2f       	mov	r19, r18
    2608:	22 27       	eor	r18, r18
    260a:	82 27       	eor	r24, r18
    260c:	93 27       	eor	r25, r19
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	0c c0       	rjmp	.+24     	; 0x262a <crc16+0x3a>
    2612:	99 23       	and	r25, r25
    2614:	3c f4       	brge	.+14     	; 0x2624 <crc16+0x34>
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	31 e2       	ldi	r19, 0x21	; 33
    261c:	83 27       	eor	r24, r19
    261e:	30 e1       	ldi	r19, 0x10	; 16
    2620:	93 27       	eor	r25, r19
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <crc16+0x38>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	28 30       	cpi	r18, 0x08	; 8
    262c:	90 f3       	brcs	.-28     	; 0x2612 <crc16+0x22>
    262e:	4f 5f       	subi	r20, 0xFF	; 255
    2630:	5f 4f       	sbci	r21, 0xFF	; 255
    2632:	46 17       	cp	r20, r22
    2634:	57 07       	cpc	r21, r23
    2636:	10 f3       	brcs	.-60     	; 0x25fc <crc16+0xc>
    2638:	08 95       	ret

0000263a <ROBOGoTo>:
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	65 97       	sbiw	r28, 0x15	; 21
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	81 e4       	ldi	r24, 0x41	; 65
    264c:	8a 83       	std	Y+2, r24	; 0x02
    264e:	1b 82       	std	Y+3, r1	; 0x03
    2650:	1c 82       	std	Y+4, r1	; 0x04
    2652:	80 e2       	ldi	r24, 0x20	; 32
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	1e 82       	std	Y+6, r1	; 0x06
    2658:	1f 82       	std	Y+7, r1	; 0x07
    265a:	18 86       	std	Y+8, r1	; 0x08
    265c:	90 e4       	ldi	r25, 0x40	; 64
    265e:	99 87       	std	Y+9, r25	; 0x09
    2660:	1a 86       	std	Y+10, r1	; 0x0a
    2662:	1b 86       	std	Y+11, r1	; 0x0b
    2664:	1c 86       	std	Y+12, r1	; 0x0c
    2666:	8d 87       	std	Y+13, r24	; 0x0d
    2668:	1e 86       	std	Y+14, r1	; 0x0e
    266a:	7f 87       	std	Y+15, r23	; 0x0f
    266c:	68 8b       	std	Y+16, r22	; 0x10
    266e:	59 8b       	std	Y+17, r21	; 0x11
    2670:	4a 8b       	std	Y+18, r20	; 0x12
    2672:	1b 8a       	std	Y+19, r1	; 0x13
    2674:	63 e1       	ldi	r22, 0x13	; 19
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	ce 01       	movw	r24, r28
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <crc16>
    2680:	9c 8b       	std	Y+20, r25	; 0x14
    2682:	8d 8b       	std	Y+21, r24	; 0x15
    2684:	45 e1       	ldi	r20, 0x15	; 21
    2686:	be 01       	movw	r22, r28
    2688:	6f 5f       	subi	r22, 0xFF	; 255
    268a:	7f 4f       	sbci	r23, 0xFF	; 255
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
    2692:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
    269c:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
    26a0:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <start_TCB0>
    26ac:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <ROBOGoTo+0x9a>
    26b4:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    26b8:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    26bc:	c3 97       	sbiw	r24, 0x33	; 51
    26be:	b0 f3       	brcs	.-20     	; 0x26ac <ROBOGoTo+0x72>
    26c0:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <stop_TCB0>
    26c4:	6a ed       	ldi	r22, 0xDA	; 218
    26c6:	74 e8       	ldi	r23, 0x84	; 132
    26c8:	8f e2       	ldi	r24, 0x2F	; 47
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	0e 94 29 06 	call	0xc52	; 0xc52 <printError>
    26d0:	83 e6       	ldi	r24, 0x63	; 99
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <ROBOGoTo+0xa0>
    26d4:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <stop_TCB0>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	65 96       	adiw	r28, 0x15	; 21
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <get_ROBOEncoder>:
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	27 97       	sbiw	r28, 0x07	; 7
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	8a 01       	movw	r16, r20
    26fe:	97 e0       	ldi	r25, 0x07	; 7
    2700:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
    2704:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
    2708:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6a 83       	std	Y+2, r22	; 0x02
    2710:	42 e0       	ldi	r20, 0x02	; 2
    2712:	be 01       	movw	r22, r28
    2714:	6f 5f       	subi	r22, 0xFF	; 255
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <start_TCB0>
    2726:	11 c0       	rjmp	.+34     	; 0x274a <get_ROBOEncoder+0x64>
    2728:	00 00       	nop
    272a:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    272e:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2732:	05 97       	sbiw	r24, 0x05	; 5
    2734:	50 f0       	brcs	.+20     	; 0x274a <get_ROBOEncoder+0x64>
    2736:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <stop_TCB0>
    273a:	6d ee       	ldi	r22, 0xED	; 237
    273c:	74 e8       	ldi	r23, 0x84	; 132
    273e:	80 e3       	ldi	r24, 0x30	; 48
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	0e 94 29 06 	call	0xc52	; 0xc52 <printError>
    2746:	83 e6       	ldi	r24, 0x63	; 99
    2748:	74 c0       	rjmp	.+232    	; 0x2832 <get_ROBOEncoder+0x14c>
    274a:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    274e:	88 23       	and	r24, r24
    2750:	59 f3       	breq	.-42     	; 0x2728 <get_ROBOEncoder+0x42>
    2752:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <stop_TCB0>
    2756:	e2 e1       	ldi	r30, 0x12	; 18
    2758:	fa e2       	ldi	r31, 0x2A	; 42
    275a:	e5 80       	ldd	r14, Z+5	; 0x05
    275c:	f1 2c       	mov	r15, r1
    275e:	fe 2c       	mov	r15, r14
    2760:	ee 24       	eor	r14, r14
    2762:	86 81       	ldd	r24, Z+6	; 0x06
    2764:	e8 2a       	or	r14, r24
    2766:	22 e0       	ldi	r18, 0x02	; 2
    2768:	0e c0       	rjmp	.+28     	; 0x2786 <get_ROBOEncoder+0xa0>
    276a:	82 2f       	mov	r24, r18
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	fc 01       	movw	r30, r24
    2770:	e0 5f       	subi	r30, 0xF0	; 240
    2772:	f5 4d       	sbci	r31, 0xD5	; 213
    2774:	30 81       	ld	r19, Z
    2776:	e1 e0       	ldi	r30, 0x01	; 1
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ec 0f       	add	r30, r28
    277c:	fd 1f       	adc	r31, r29
    277e:	e8 0f       	add	r30, r24
    2780:	f9 1f       	adc	r31, r25
    2782:	30 83       	st	Z, r19
    2784:	2f 5f       	subi	r18, 0xFF	; 255
    2786:	27 30       	cpi	r18, 0x07	; 7
    2788:	80 f3       	brcs	.-32     	; 0x276a <get_ROBOEncoder+0x84>
    278a:	67 e0       	ldi	r22, 0x07	; 7
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <crc16>
    2796:	e8 16       	cp	r14, r24
    2798:	f9 06       	cpc	r15, r25
    279a:	71 f0       	breq	.+28     	; 0x27b8 <get_ROBOEncoder+0xd2>
    279c:	d8 01       	movw	r26, r16
    279e:	1d 92       	st	X+, r1
    27a0:	1d 92       	st	X+, r1
    27a2:	1d 92       	st	X+, r1
    27a4:	1c 92       	st	X, r1
    27a6:	13 97       	sbiw	r26, 0x03	; 3
    27a8:	62 e0       	ldi	r22, 0x02	; 2
    27aa:	75 e8       	ldi	r23, 0x85	; 133
    27ac:	81 e3       	ldi	r24, 0x31	; 49
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	0e 94 29 06 	call	0xc52	; 0xc52 <printError>
    27b4:	83 e6       	ldi	r24, 0x63	; 99
    27b6:	3d c0       	rjmp	.+122    	; 0x2832 <get_ROBOEncoder+0x14c>
    27b8:	22 e1       	ldi	r18, 0x12	; 18
    27ba:	3a e2       	ldi	r19, 0x2A	; 42
    27bc:	f9 01       	movw	r30, r18
    27be:	80 81       	ld	r24, Z
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	78 2f       	mov	r23, r24
    27c8:	66 27       	eor	r22, r22
    27ca:	55 27       	eor	r21, r21
    27cc:	44 27       	eor	r20, r20
    27ce:	d8 01       	movw	r26, r16
    27d0:	4d 93       	st	X+, r20
    27d2:	5d 93       	st	X+, r21
    27d4:	6d 93       	st	X+, r22
    27d6:	7c 93       	st	X, r23
    27d8:	13 97       	sbiw	r26, 0x03	; 3
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	89 2f       	mov	r24, r25
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e0       	ldi	r26, 0x00	; 0
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	dc 01       	movw	r26, r24
    27e6:	99 27       	eor	r25, r25
    27e8:	88 27       	eor	r24, r24
    27ea:	84 2b       	or	r24, r20
    27ec:	95 2b       	or	r25, r21
    27ee:	a6 2b       	or	r26, r22
    27f0:	b7 2b       	or	r27, r23
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 83       	st	Z, r24
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	a2 83       	std	Z+2, r26	; 0x02
    27fa:	b3 83       	std	Z+3, r27	; 0x03
    27fc:	f9 01       	movw	r30, r18
    27fe:	42 81       	ldd	r20, Z+2	; 0x02
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	76 2f       	mov	r23, r22
    2808:	65 2f       	mov	r22, r21
    280a:	54 2f       	mov	r21, r20
    280c:	44 27       	eor	r20, r20
    280e:	84 2b       	or	r24, r20
    2810:	95 2b       	or	r25, r21
    2812:	a6 2b       	or	r26, r22
    2814:	b7 2b       	or	r27, r23
    2816:	f8 01       	movw	r30, r16
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
    2820:	f9 01       	movw	r30, r18
    2822:	23 81       	ldd	r18, Z+3	; 0x03
    2824:	82 2b       	or	r24, r18
    2826:	f8 01       	movw	r30, r16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	27 96       	adiw	r28, 0x07	; 7
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	08 95       	ret

00002846 <ROBOMove>:
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <ROBOMove+0xc>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <ROBOMove+0xe>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	08 2f       	mov	r16, r24
    285a:	10 e0       	ldi	r17, 0x00	; 0
    285c:	84 e3       	ldi	r24, 0x34	; 52
    285e:	80 9f       	mul	r24, r16
    2860:	f0 01       	movw	r30, r0
    2862:	81 9f       	mul	r24, r17
    2864:	f0 0d       	add	r31, r0
    2866:	11 24       	eor	r1, r1
    2868:	ed 5f       	subi	r30, 0xFD	; 253
    286a:	f7 4d       	sbci	r31, 0xD7	; 215
    286c:	81 81       	ldd	r24, Z+1	; 0x01
    286e:	81 34       	cpi	r24, 0x41	; 65
    2870:	00 f1       	brcs	.+64     	; 0x28b2 <ROBOMove+0x6c>
    2872:	84 34       	cpi	r24, 0x44	; 68
    2874:	28 f0       	brcs	.+10     	; 0x2880 <ROBOMove+0x3a>
    2876:	9f e9       	ldi	r25, 0x9F	; 159
    2878:	98 0f       	add	r25, r24
    287a:	93 30       	cpi	r25, 0x03	; 3
    287c:	58 f0       	brcs	.+22     	; 0x2894 <ROBOMove+0x4e>
    287e:	19 c0       	rjmp	.+50     	; 0x28b2 <ROBOMove+0x6c>
    2880:	0f 2e       	mov	r0, r31
    2882:	ff e3       	ldi	r31, 0x3F	; 63
    2884:	ff 2e       	mov	r15, r31
    2886:	f0 2d       	mov	r31, r0
    2888:	f8 0e       	add	r15, r24
    288a:	19 82       	std	Y+1, r1	; 0x01
    288c:	1a 82       	std	Y+2, r1	; 0x02
    288e:	1b 82       	std	Y+3, r1	; 0x03
    2890:	1c 82       	std	Y+4, r1	; 0x04
    2892:	17 c0       	rjmp	.+46     	; 0x28c2 <ROBOMove+0x7c>
    2894:	0f 2e       	mov	r0, r31
    2896:	ff e1       	ldi	r31, 0x1F	; 31
    2898:	ff 2e       	mov	r15, r31
    289a:	f0 2d       	mov	r31, r0
    289c:	f8 0e       	add	r15, r24
    289e:	ae 01       	movw	r20, r28
    28a0:	4f 5f       	subi	r20, 0xFF	; 255
    28a2:	5f 4f       	sbci	r21, 0xFF	; 255
    28a4:	60 e1       	ldi	r22, 0x10	; 16
    28a6:	8f 2d       	mov	r24, r15
    28a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <get_ROBOEncoder>
    28ac:	83 36       	cpi	r24, 0x63	; 99
    28ae:	49 f4       	brne	.+18     	; 0x28c2 <ROBOMove+0x7c>
    28b0:	26 c0       	rjmp	.+76     	; 0x28fe <ROBOMove+0xb8>
    28b2:	64 e1       	ldi	r22, 0x14	; 20
    28b4:	75 e8       	ldi	r23, 0x85	; 133
    28b6:	8d e2       	ldi	r24, 0x2D	; 45
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	0e 94 29 06 	call	0xc52	; 0xc52 <printError>
    28be:	83 e6       	ldi	r24, 0x63	; 99
    28c0:	1f c0       	rjmp	.+62     	; 0x2900 <ROBOMove+0xba>
    28c2:	24 e3       	ldi	r18, 0x34	; 52
    28c4:	20 9f       	mul	r18, r16
    28c6:	c0 01       	movw	r24, r0
    28c8:	21 9f       	mul	r18, r17
    28ca:	90 0d       	add	r25, r0
    28cc:	11 24       	eor	r1, r1
    28ce:	8b 5f       	subi	r24, 0xFB	; 251
    28d0:	97 4d       	sbci	r25, 0xD7	; 215
    28d2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <atol>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	ac e0       	ldi	r26, 0x0C	; 12
    28dc:	b1 e0       	ldi	r27, 0x01	; 1
    28de:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__muluhisi3>
    28e2:	09 81       	ldd	r16, Y+1	; 0x01
    28e4:	1a 81       	ldd	r17, Y+2	; 0x02
    28e6:	2b 81       	ldd	r18, Y+3	; 0x03
    28e8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ea:	ab 01       	movw	r20, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	40 0f       	add	r20, r16
    28f0:	51 1f       	adc	r21, r17
    28f2:	62 1f       	adc	r22, r18
    28f4:	73 1f       	adc	r23, r19
    28f6:	8f 2d       	mov	r24, r15
    28f8:	0e 94 1d 13 	call	0x263a	; 0x263a <ROBOGoTo>
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <ROBOMove+0xba>
    28fe:	83 e6       	ldi	r24, 0x63	; 99
    2900:	24 96       	adiw	r28, 0x04	; 4
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	08 95       	ret

00002912 <get_ROBOInt32>:

uint32_t get_ROBOInt32(uint8_t controller, uint8_t command)
{
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	26 97       	sbiw	r28, 0x06	; 6
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	de bf       	out	0x3e, r29	; 62
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t value;

	recv1_buf.nbytes = 6;
    2924:	96 e0       	ldi	r25, 0x06	; 6
    2926:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    292a:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    292e:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2932:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2934:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    2936:	42 e0       	ldi	r20, 0x02	; 2
    2938:	be 01       	movw	r22, r28
    293a:	6f 5f       	subi	r22, 0xFF	; 255
    293c:	7f 4f       	sbci	r23, 0xFF	; 255
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
	while (recv1_buf.done == NO) {
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <get_ROBOInt32+0x36>
		asm("nop");
    2946:	00 00       	nop
	recv1_buf.done = NO;

	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);
	while (recv1_buf.done == NO) {
    2948:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    294c:	88 23       	and	r24, r24
    294e:	d9 f3       	breq	.-10     	; 0x2946 <get_ROBOInt32+0x34>
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2950:	e2 e1       	ldi	r30, 0x12	; 18
    2952:	fa e2       	ldi	r31, 0x2A	; 42
    2954:	04 81       	ldd	r16, Z+4	; 0x04
    2956:	10 e0       	ldi	r17, 0x00	; 0
    2958:	10 2f       	mov	r17, r16
    295a:	00 27       	eor	r16, r16
    295c:	85 81       	ldd	r24, Z+5	; 0x05
    295e:	08 2b       	or	r16, r24

	for (i = 2; i < 6; i++) {
    2960:	22 e0       	ldi	r18, 0x02	; 2
    2962:	0e c0       	rjmp	.+28     	; 0x2980 <get_ROBOInt32+0x6e>
		tbuf[i] = recv1_buf.data[i-2];
    2964:	82 2f       	mov	r24, r18
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	fc 01       	movw	r30, r24
    296a:	e0 5f       	subi	r30, 0xF0	; 240
    296c:	f5 4d       	sbci	r31, 0xD5	; 213
    296e:	30 81       	ld	r19, Z
    2970:	e1 e0       	ldi	r30, 0x01	; 1
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	ec 0f       	add	r30, r28
    2976:	fd 1f       	adc	r31, r29
    2978:	e8 0f       	add	r30, r24
    297a:	f9 1f       	adc	r31, r25
    297c:	30 83       	st	Z, r19
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {
    297e:	2f 5f       	subi	r18, 0xFF	; 255
    2980:	26 30       	cpi	r18, 0x06	; 6
    2982:	80 f3       	brcs	.-32     	; 0x2964 <get_ROBOInt32+0x52>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2984:	66 e0       	ldi	r22, 0x06	; 6
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <crc16>

	if (crcReceived != crcExpected) {
    2990:	08 17       	cp	r16, r24
    2992:	19 07       	cpc	r17, r25
    2994:	31 f5       	brne	.+76     	; 0x29e2 <get_ROBOInt32+0xd0>
		value = 0;
		return(0xF0);
	}

	value =  (uint32_t) recv1_buf.data[0] << 24;
    2996:	e2 e1       	ldi	r30, 0x12	; 18
    2998:	fa e2       	ldi	r31, 0x2A	; 42
    299a:	40 81       	ld	r20, Z
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	74 2f       	mov	r23, r20
    29a4:	66 27       	eor	r22, r22
    29a6:	55 27       	eor	r21, r21
    29a8:	44 27       	eor	r20, r20
	value |= (uint32_t) recv1_buf.data[1] << 16;
    29aa:	81 81       	ldd	r24, Z+1	; 0x01
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	dc 01       	movw	r26, r24
    29b4:	99 27       	eor	r25, r25
    29b6:	88 27       	eor	r24, r24
    29b8:	48 2b       	or	r20, r24
    29ba:	59 2b       	or	r21, r25
    29bc:	6a 2b       	or	r22, r26
    29be:	7b 2b       	or	r23, r27
	value |= (uint32_t) recv1_buf.data[2] << 8;
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	ba 2f       	mov	r27, r26
    29ca:	a9 2f       	mov	r26, r25
    29cc:	98 2f       	mov	r25, r24
    29ce:	88 27       	eor	r24, r24
    29d0:	84 2b       	or	r24, r20
    29d2:	95 2b       	or	r25, r21
    29d4:	a6 2b       	or	r26, r22
    29d6:	b7 2b       	or	r27, r23
	value |= (uint32_t) recv1_buf.data[3];
    29d8:	23 81       	ldd	r18, Z+3	; 0x03
	return(value);
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	62 2b       	or	r22, r18
    29e0:	04 c0       	rjmp	.+8      	; 0x29ea <get_ROBOInt32+0xd8>
	}
	crcExpected = crc16(tbuf, 6);

	if (crcReceived != crcExpected) {
		value = 0;
		return(0xF0);
    29e2:	60 ef       	ldi	r22, 0xF0	; 240
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
	value |= (uint32_t) recv1_buf.data[1] << 16;
	value |= (uint32_t) recv1_buf.data[2] << 8;
	value |= (uint32_t) recv1_buf.data[3];
	return(value);

}
    29ea:	26 96       	adiw	r28, 0x06	; 6
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	08 95       	ret

000029fa <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    29fa:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    29fc:	e0 e6       	ldi	r30, 0x60	; 96
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2a02:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2a04:	88 ed       	ldi	r24, 0xD8	; 216
    2a06:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a08:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <init_RTC+0x14>
		asm("nop");
    2a0c:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2a0e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2a12:	96 fd       	sbrc	r25, 6
    2a14:	fb cf       	rjmp	.-10     	; 0x2a0c <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2a16:	e0 e6       	ldi	r30, 0x60	; 96
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2a1c:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2a1e:	28 ed       	ldi	r18, 0xD8	; 216
    2a20:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a22:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2a24:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2a26:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2a28:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a2a:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <init_RTC+0x36>
		asm("nop");
    2a2e:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2a30:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2a34:	91 11       	cpse	r25, r1
    2a36:	fb cf       	rjmp	.-10     	; 0x2a2e <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2a38:	e0 e4       	ldi	r30, 0x40	; 64
    2a3a:	f1 e0       	ldi	r31, 0x01	; 1
    2a3c:	42 87       	std	Z+10, r20	; 0x0a
    2a3e:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2a44:	85 81       	ldd	r24, Z+5	; 0x05
    2a46:	81 60       	ori	r24, 0x01	; 1
    2a48:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2a4a:	81 eb       	ldi	r24, 0xB1	; 177
    2a4c:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	81 60       	ori	r24, 0x01	; 1
    2a52:	82 83       	std	Z+2, r24	; 0x02
    2a54:	08 95       	ret

00002a56 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2a56:	1f 92       	push	r1
    2a58:	0f 92       	push	r0
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	0f 92       	push	r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	2f 93       	push	r18
    2a62:	3f 93       	push	r19
    2a64:	4f 93       	push	r20
    2a66:	5f 93       	push	r21
    2a68:	6f 93       	push	r22
    2a6a:	7f 93       	push	r23
    2a6c:	8f 93       	push	r24
    2a6e:	9f 93       	push	r25
    2a70:	af 93       	push	r26
    2a72:	bf 93       	push	r27
    2a74:	ef 93       	push	r30
    2a76:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2a7e:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    2a82:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	b9 f0       	breq	.+46     	; 0x2ab8 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2a8a:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    2a8e:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    2a92:	28 17       	cp	r18, r24
    2a94:	39 07       	cpc	r19, r25
    2a96:	58 f4       	brcc	.+22     	; 0x2aae <__vector_3+0x58>
			clear_OLED(0);
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clear_OLED>
			clear_OLED(1);
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clear_OLED>
			timerOLED = 0;
    2aa4:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    2aa8:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    2aac:	05 c0       	rjmp	.+10     	; 0x2ab8 <__vector_3+0x62>
		} else {
			timerOLED++;
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    2ab4:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2ab8:	80 e2       	ldi	r24, 0x20	; 32
    2aba:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2abe:	ff 91       	pop	r31
    2ac0:	ef 91       	pop	r30
    2ac2:	bf 91       	pop	r27
    2ac4:	af 91       	pop	r26
    2ac6:	9f 91       	pop	r25
    2ac8:	8f 91       	pop	r24
    2aca:	7f 91       	pop	r23
    2acc:	6f 91       	pop	r22
    2ace:	5f 91       	pop	r21
    2ad0:	4f 91       	pop	r20
    2ad2:	3f 91       	pop	r19
    2ad4:	2f 91       	pop	r18
    2ad6:	0f 90       	pop	r0
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	0f 90       	pop	r0
    2adc:	1f 90       	pop	r1
    2ade:	18 95       	reti

00002ae0 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	24 e3       	ldi	r18, 0x34	; 52
    2ae8:	28 9f       	mul	r18, r24
    2aea:	f0 01       	movw	r30, r0
    2aec:	29 9f       	mul	r18, r25
    2aee:	f0 0d       	add	r31, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	ed 5f       	subi	r30, 0xFD	; 253
    2af4:	f7 4d       	sbci	r31, 0xD7	; 215
    2af6:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2af8:	24 37       	cpi	r18, 0x74	; 116
    2afa:	e9 f4       	brne	.+58     	; 0x2b36 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2afc:	24 e3       	ldi	r18, 0x34	; 52
    2afe:	28 9f       	mul	r18, r24
    2b00:	e0 01       	movw	r28, r0
    2b02:	29 9f       	mul	r18, r25
    2b04:	d0 0d       	add	r29, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	cb 5f       	subi	r28, 0xFB	; 251
    2b0a:	d7 4d       	sbci	r29, 0xD7	; 215
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	01 90       	ld	r0, Z+
    2b10:	00 20       	and	r0, r0
    2b12:	e9 f7       	brne	.-6      	; 0x2b0e <set+0x2e>
    2b14:	31 97       	sbiw	r30, 0x01	; 1
    2b16:	ec 1b       	sub	r30, r28
    2b18:	fd 0b       	sbc	r31, r29
    2b1a:	73 97       	sbiw	r30, 0x13	; 19
    2b1c:	71 f4       	brne	.+28     	; 0x2b3a <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2b1e:	ce 01       	movw	r24, r28
    2b20:	0e 94 c7 05 	call	0xb8e	; 0xb8e <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2b24:	24 e1       	ldi	r18, 0x14	; 20
    2b26:	ae 01       	movw	r20, r28
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	80 e5       	ldi	r24, 0x50	; 80
    2b2e:	0e 94 b4 06 	call	0xd68	; 0xd68 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2b3a:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2b42:	e0 ea       	ldi	r30, 0xA0	; 160
    2b44:	f4 e0       	ldi	r31, 0x04	; 4
    2b46:	82 89       	ldd	r24, Z+18	; 0x12
    2b48:	87 7f       	andi	r24, 0xF7	; 247
    2b4a:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2b4c:	84 e0       	ldi	r24, 0x04	; 4
    2b4e:	82 83       	std	Z+2, r24	; 0x02
    2b50:	08 95       	ret

00002b52 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2b52:	83 30       	cpi	r24, 0x03	; 3
    2b54:	18 f0       	brcs	.+6      	; 0x2b5c <get_temperature+0xa>
    2b56:	83 30       	cpi	r24, 0x03	; 3
    2b58:	21 f0       	breq	.+8      	; 0x2b62 <get_temperature+0x10>
    2b5a:	06 c0       	rjmp	.+12     	; 0x2b68 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2b5c:	0e 94 34 01 	call	0x268	; 0x268 <read_AD590>
			break;
    2b60:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2b62:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <read_MCP9808>
			break;
    2b66:	08 95       	ret
		default:
			temperature = -999.9;
    2b68:	6a e9       	ldi	r22, 0x9A	; 154
    2b6a:	79 ef       	ldi	r23, 0xF9	; 249
    2b6c:	89 e7       	ldi	r24, 0x79	; 121
    2b6e:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2b70:	08 95       	ret

00002b72 <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    2b72:	0f 93       	push	r16
    2b74:	1f 93       	push	r17
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	e2 97       	sbiw	r28, 0x32	; 50
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <start_TCB0>
    2b8c:	2a e6       	ldi	r18, 0x6A	; 106
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	21 50       	subi	r18, 0x01	; 1
    2b94:	80 40       	sbci	r24, 0x00	; 0
    2b96:	90 40       	sbci	r25, 0x00	; 0
    2b98:	e1 f7       	brne	.-8      	; 0x2b92 <testroutine+0x20>
    2b9a:	00 c0       	rjmp	.+0      	; 0x2b9c <testroutine+0x2a>
	_delay_ms(100);
	sprintf(buf, "ticks = %d\r\n", ticks);
    2b9c:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2ba0:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2ba4:	9f 93       	push	r25
    2ba6:	8f 93       	push	r24
    2ba8:	8d e2       	ldi	r24, 0x2D	; 45
    2baa:	95 e8       	ldi	r25, 0x85	; 133
    2bac:	9f 93       	push	r25
    2bae:	8f 93       	push	r24
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	0f 5f       	subi	r16, 0xFF	; 255
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	1f 93       	push	r17
    2bb8:	0f 93       	push	r16
    2bba:	0e 94 7d 20 	call	0x40fa	; 0x40fa <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	01 90       	ld	r0, Z+
    2bc2:	00 20       	and	r0, r0
    2bc4:	e9 f7       	brne	.-6      	; 0x2bc0 <testroutine+0x4e>
    2bc6:	31 97       	sbiw	r30, 0x01	; 1
    2bc8:	af 01       	movw	r20, r30
    2bca:	40 1b       	sub	r20, r16
    2bcc:	51 0b       	sbc	r21, r17
    2bce:	b8 01       	movw	r22, r16
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	e2 96       	adiw	r28, 0x32	; 50
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    2bf2:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <ticks>
    2bf6:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    2bfa:	25 e0       	ldi	r18, 0x05	; 5
    2bfc:	3d e0       	ldi	r19, 0x0D	; 13
    2bfe:	ac 01       	movw	r20, r24
    2c00:	42 9f       	mul	r20, r18
    2c02:	c0 01       	movw	r24, r0
    2c04:	43 9f       	mul	r20, r19
    2c06:	90 0d       	add	r25, r0
    2c08:	52 9f       	mul	r21, r18
    2c0a:	90 0d       	add	r25, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	e0 e8       	ldi	r30, 0x80	; 128
    2c10:	fa e0       	ldi	r31, 0x0A	; 10
    2c12:	84 87       	std	Z+12, r24	; 0x0c
    2c14:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    2c1a:	80 83       	st	Z, r24
    2c1c:	08 95       	ret

00002c1e <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    2c1e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    2c22:	08 95       	ret

00002c24 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	8f 93       	push	r24
    2c30:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    2c38:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2c3c:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <ticks>
    2c46:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <ticks+0x1>

    2c4a:	9f 91       	pop	r25
    2c4c:	8f 91       	pop	r24
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	0f 90       	pop	r0
    2c54:	1f 90       	pop	r1
    2c56:	18 95       	reti

00002c58 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2c58:	e0 ea       	ldi	r30, 0xA0	; 160
    2c5a:	f8 e0       	ldi	r31, 0x08	; 8
    2c5c:	8b e0       	ldi	r24, 0x0B	; 11
    2c5e:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2c60:	83 81       	ldd	r24, Z+3	; 0x03
    2c62:	81 60       	ori	r24, 0x01	; 1
    2c64:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2c66:	85 81       	ldd	r24, Z+5	; 0x05
    2c68:	81 60       	ori	r24, 0x01	; 1
    2c6a:	85 83       	std	Z+5, r24	; 0x05
    2c6c:	08 95       	ret

00002c6e <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2c70:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2c72:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2c76:	88 23       	and	r24, r24
    2c78:	dc f7       	brge	.-10     	; 0x2c70 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    2c7a:	e0 ea       	ldi	r30, 0xA0	; 160
    2c7c:	f8 e0       	ldi	r31, 0x08	; 8
    2c7e:	84 81       	ldd	r24, Z+4	; 0x04
    2c80:	8b 7f       	andi	r24, 0xFB	; 251
    2c82:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2c84:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    2c86:	94 81       	ldd	r25, Z+4	; 0x04
    2c88:	92 60       	ori	r25, 0x02	; 2
    2c8a:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    2c8c:	08 95       	ret

00002c8e <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <readlast_TWI+0x4>
		asm("nop");
    2c90:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2c92:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2c96:	88 23       	and	r24, r24
    2c98:	dc f7       	brge	.-10     	; 0x2c90 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2c9a:	e0 ea       	ldi	r30, 0xA0	; 160
    2c9c:	f8 e0       	ldi	r31, 0x08	; 8
    2c9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ca0:	84 60       	ori	r24, 0x04	; 4
    2ca2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2ca4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    2ca6:	08 95       	ret

00002ca8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    2ca8:	61 30       	cpi	r22, 0x01	; 1
    2caa:	39 f4       	brne	.+14     	; 0x2cba <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	81 60       	ori	r24, 0x01	; 1
    2cb4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    2cba:	88 0f       	add	r24, r24
    2cbc:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    2cc2:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    2cc4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cc8:	80 7c       	andi	r24, 0xC0	; 192
    2cca:	d9 f3       	breq	.-10     	; 0x2cc2 <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    2ccc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cd0:	82 fd       	sbrc	r24, 2
    2cd2:	0c c0       	rjmp	.+24     	; 0x2cec <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    2cd4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cd8:	83 fd       	sbrc	r24, 3
    2cda:	0a c0       	rjmp	.+20     	; 0x2cf0 <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2cdc:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2ce0:	89 2f       	mov	r24, r25
    2ce2:	80 71       	andi	r24, 0x10	; 16
    2ce4:	94 ff       	sbrs	r25, 4
    2ce6:	05 c0       	rjmp	.+10     	; 0x2cf2 <start_TWI+0x4a>
		return(TWINODEVICE);
    2ce8:	84 e0       	ldi	r24, 0x04	; 4
    2cea:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    2cf2:	08 95       	ret

00002cf4 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    2cf4:	87 e0       	ldi	r24, 0x07	; 7
    2cf6:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2cfa:	08 95       	ret

00002cfc <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <write_TWI+0x4>
		asm("nop");
    2cfe:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2d00:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2d04:	96 ff       	sbrs	r25, 6
    2d06:	fb cf       	rjmp	.-10     	; 0x2cfe <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2d08:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2d0c:	01 c0       	rjmp	.+2      	; 0x2d10 <write_TWI+0x14>
		asm("nop");
    2d0e:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2d10:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2d14:	86 ff       	sbrs	r24, 6
    2d16:	fb cf       	rjmp	.-10     	; 0x2d0e <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2d18:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2d1c:	89 2f       	mov	r24, r25
    2d1e:	80 71       	andi	r24, 0x10	; 16
    2d20:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    2d22:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    2d24:	08 95       	ret

00002d26 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2d26:	e0 e0       	ldi	r30, 0x00	; 0
    2d28:	f4 e0       	ldi	r31, 0x04	; 4
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2d2e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2d30:	e0 e0       	ldi	r30, 0x00	; 0
    2d32:	f8 e0       	ldi	r31, 0x08	; 8
    2d34:	2d e6       	ldi	r18, 0x6D	; 109
    2d36:	35 e0       	ldi	r19, 0x05	; 5
    2d38:	20 87       	std	Z+8, r18	; 0x08
    2d3a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2d3c:	95 81       	ldd	r25, Z+5	; 0x05
    2d3e:	90 68       	ori	r25, 0x80	; 128
    2d40:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2d42:	96 81       	ldd	r25, Z+6	; 0x06
    2d44:	90 64       	ori	r25, 0x40	; 64
    2d46:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2d48:	96 81       	ldd	r25, Z+6	; 0x06
    2d4a:	90 68       	ori	r25, 0x80	; 128
    2d4c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2d4e:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xff>
	send0_buf.tail = 0;
    2d52:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0x100>
	send0_buf.done = YES;
    2d56:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	recv0_buf.head = 0;
    2d5a:	10 92 16 2c 	sts	0x2C16, r1	; 0x802c16 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    2d5e:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    2d62:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf>
	recv0_buf.length = 0;
    2d66:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x102>
	recv0_buf.done = NO;
    2d6a:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2d6e:	e0 e4       	ldi	r30, 0x40	; 64
    2d70:	f4 e0       	ldi	r31, 0x04	; 4
    2d72:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2d74:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    2d76:	e0 e2       	ldi	r30, 0x20	; 32
    2d78:	f8 e0       	ldi	r31, 0x08	; 8
    2d7a:	4b e5       	ldi	r20, 0x5B	; 91
    2d7c:	51 e0       	ldi	r21, 0x01	; 1
    2d7e:	40 87       	std	Z+8, r20	; 0x08
    2d80:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2d82:	95 81       	ldd	r25, Z+5	; 0x05
    2d84:	90 68       	ori	r25, 0x80	; 128
    2d86:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    2d88:	96 81       	ldd	r25, Z+6	; 0x06
    2d8a:	90 64       	ori	r25, 0x40	; 64
    2d8c:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    2d8e:	96 81       	ldd	r25, Z+6	; 0x06
    2d90:	90 68       	ori	r25, 0x80	; 128
    2d92:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    2d94:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.tail = 0;
    2d98:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0x100>
	send1_buf.done = YES;
    2d9c:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	recv1_buf.head = 0;
    2da0:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    2da4:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    2da8:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.done = NO;
    2dac:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    2db0:	e0 e2       	ldi	r30, 0x20	; 32
    2db2:	f4 e0       	ldi	r31, 0x04	; 4
    2db4:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    2db6:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2db8:	e0 e6       	ldi	r30, 0x60	; 96
    2dba:	f8 e0       	ldi	r31, 0x08	; 8
    2dbc:	20 87       	std	Z+8, r18	; 0x08
    2dbe:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    2dc0:	96 81       	ldd	r25, Z+6	; 0x06
    2dc2:	90 64       	ori	r25, 0x40	; 64
    2dc4:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    2dc6:	96 81       	ldd	r25, Z+6	; 0x06
    2dc8:	90 68       	ori	r25, 0x80	; 128
    2dca:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    2dcc:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	recv3_buf.done = NO;
    2dd0:	10 92 25 2e 	sts	0x2E25, r1	; 0x802e25 <recv3_buf+0x104>
    2dd4:	08 95       	ret

00002dd6 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	eb 01       	movw	r28, r22
    2de0:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	01 f1       	breq	.+64     	; 0x2e26 <send_USART+0x50>
    2de6:	b0 f0       	brcs	.+44     	; 0x2e14 <send_USART+0x3e>
    2de8:	83 30       	cpi	r24, 0x03	; 3
    2dea:	09 f4       	brne	.+2      	; 0x2dee <send_USART+0x18>
    2dec:	6d c0       	rjmp	.+218    	; 0x2ec8 <send_USART+0xf2>
    2dee:	74 c0       	rjmp	.+232    	; 0x2ed8 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2df0:	eb e1       	ldi	r30, 0x1B	; 27
    2df2:	fd e2       	ldi	r31, 0x2D	; 45
    2df4:	80 81       	ld	r24, Z
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	38 81       	ld	r19, Y
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	a4 5e       	subi	r26, 0xE4	; 228
    2dfe:	b3 4d       	sbci	r27, 0xD3	; 211
    2e00:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	6f ef       	ldi	r22, 0xFF	; 255
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2e0c:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    2e0e:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2e10:	21 96       	adiw	r28, 0x01	; 1
    2e12:	01 c0       	rjmp	.+2      	; 0x2e16 <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2e14:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2e16:	21 17       	cp	r18, r17
    2e18:	58 f3       	brcs	.-42     	; 0x2df0 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2e1a:	e0 e0       	ldi	r30, 0x00	; 0
    2e1c:	f8 e0       	ldi	r31, 0x08	; 8
    2e1e:	85 81       	ldd	r24, Z+5	; 0x05
    2e20:	80 62       	ori	r24, 0x20	; 32
    2e22:	85 83       	std	Z+5, r24	; 0x05
			break;
    2e24:	59 c0       	rjmp	.+178    	; 0x2ed8 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    2e26:	64 2f       	mov	r22, r20
    2e28:	70 e0       	ldi	r23, 0x00	; 0
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <crc16>
    2e30:	48 2f       	mov	r20, r24
    2e32:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	11 c0       	rjmp	.+34     	; 0x2e5a <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    2e38:	ea e2       	ldi	r30, 0x2A	; 42
    2e3a:	f0 e3       	ldi	r31, 0x30	; 48
    2e3c:	80 81       	ld	r24, Z
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	38 81       	ld	r19, Y
    2e42:	dc 01       	movw	r26, r24
    2e44:	a5 5d       	subi	r26, 0xD5	; 213
    2e46:	b0 4d       	sbci	r27, 0xD0	; 208
    2e48:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	6f ef       	ldi	r22, 0xFF	; 255
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2e54:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2e56:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2e58:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2e5a:	21 17       	cp	r18, r17
    2e5c:	68 f3       	brcs	.-38     	; 0x2e38 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    2e5e:	ea e2       	ldi	r30, 0x2A	; 42
    2e60:	f0 e3       	ldi	r31, 0x30	; 48
    2e62:	80 81       	ld	r24, Z
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	dc 01       	movw	r26, r24
    2e68:	a5 5d       	subi	r26, 0xD5	; 213
    2e6a:	b0 4d       	sbci	r27, 0xD0	; 208
    2e6c:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	2f ef       	ldi	r18, 0xFF	; 255
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	b9 01       	movw	r22, r18
    2e76:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	a5 5d       	subi	r26, 0xD5	; 213
    2e80:	b0 4d       	sbci	r27, 0xD0	; 208
    2e82:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	b9 01       	movw	r22, r18
    2e88:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2e8c:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    2e8e:	1e 5f       	subi	r17, 0xFE	; 254
    2e90:	10 93 2c 30 	sts	0x302C, r17	; 0x80302c <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    2e94:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2e98:	e0 e2       	ldi	r30, 0x20	; 32
    2e9a:	f8 e0       	ldi	r31, 0x08	; 8
    2e9c:	85 81       	ldd	r24, Z+5	; 0x05
    2e9e:	80 62       	ori	r24, 0x20	; 32
    2ea0:	85 83       	std	Z+5, r24	; 0x05
			break;
    2ea2:	1a c0       	rjmp	.+52     	; 0x2ed8 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2ea4:	e5 e2       	ldi	r30, 0x25	; 37
    2ea6:	ff e2       	ldi	r31, 0x2F	; 47
    2ea8:	80 81       	ld	r24, Z
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	38 81       	ld	r19, Y
    2eae:	dc 01       	movw	r26, r24
    2eb0:	aa 5d       	subi	r26, 0xDA	; 218
    2eb2:	b1 4d       	sbci	r27, 0xD1	; 209
    2eb4:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    2eb6:	01 96       	adiw	r24, 0x01	; 1
    2eb8:	6f ef       	ldi	r22, 0xFF	; 255
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2ec0:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    2ec4:	21 96       	adiw	r28, 0x01	; 1
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2eca:	21 17       	cp	r18, r17
    2ecc:	58 f3       	brcs	.-42     	; 0x2ea4 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2ece:	e0 e6       	ldi	r30, 0x60	; 96
    2ed0:	f8 e0       	ldi	r31, 0x08	; 8
    2ed2:	85 81       	ldd	r24, Z+5	; 0x05
    2ed4:	80 62       	ori	r24, 0x20	; 32
    2ed6:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	5f 93       	push	r21
    2eee:	6f 93       	push	r22
    2ef0:	7f 93       	push	r23
    2ef2:	8f 93       	push	r24
    2ef4:	9f 93       	push	r25
    2ef6:	af 93       	push	r26
    2ef8:	bf 93       	push	r27
    2efa:	ef 93       	push	r30
    2efc:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    2efe:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
    2f02:	8f 3f       	cpi	r24, 0xFF	; 255
    2f04:	19 f1       	breq	.+70     	; 0x2f4c <__vector_17+0x6a>
		c = USART0.RXDATAL;
    2f06:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    2f0a:	8d 30       	cpi	r24, 0x0D	; 13
    2f0c:	51 f4       	brne	.+20     	; 0x2f22 <__vector_17+0x40>
			recv0_buf.done = YES;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    2f14:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	e9 5e       	subi	r30, 0xE9	; 233
    2f1c:	f4 4d       	sbci	r31, 0xD4	; 212
    2f1e:	10 82       	st	Z, r1
    2f20:	06 c0       	rjmp	.+12     	; 0x2f2e <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    2f22:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	e9 5e       	subi	r30, 0xE9	; 233
    2f2a:	f4 4d       	sbci	r31, 0xD4	; 212
    2f2c:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    2f2e:	e9 e1       	ldi	r30, 0x19	; 25
    2f30:	fc e2       	ldi	r31, 0x2C	; 44
    2f32:	80 81       	ld	r24, Z
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2f38:	e6 e1       	ldi	r30, 0x16	; 22
    2f3a:	fc e2       	ldi	r31, 0x2C	; 44
    2f3c:	80 81       	ld	r24, Z
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	01 96       	adiw	r24, 0x01	; 1
    2f42:	6f ef       	ldi	r22, 0xFF	; 255
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divmodhi4>
    2f4a:	80 83       	st	Z, r24
	}
}
    2f4c:	ff 91       	pop	r31
    2f4e:	ef 91       	pop	r30
    2f50:	bf 91       	pop	r27
    2f52:	af 91       	pop	r26
    2f54:	9f 91       	pop	r25
    2f56:	8f 91       	pop	r24
    2f58:	7f 91       	pop	r23
    2f5a:	6f 91       	pop	r22
    2f5c:	5f 91       	pop	r21
    2f5e:	0f 90       	pop	r0
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	0f 90       	pop	r0
    2f64:	1f 90       	pop	r1
    2f66:	18 95       	reti

00002f68 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2f68:	1f 92       	push	r1
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	8f 93       	push	r24
    2f74:	9f 93       	push	r25
    2f76:	ef 93       	push	r30
    2f78:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2f7a:	e0 e0       	ldi	r30, 0x00	; 0
    2f7c:	f8 e0       	ldi	r31, 0x08	; 8
    2f7e:	85 81       	ldd	r24, Z+5	; 0x05
    2f80:	8f 7d       	andi	r24, 0xDF	; 223
    2f82:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2f84:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xff>
    2f88:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0x100>
    2f8c:	8e 17       	cp	r24, r30
    2f8e:	b9 f0       	breq	.+46     	; 0x2fbe <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	9e 0f       	add	r25, r30
    2f94:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <send0_buf+0x100>
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	e4 5e       	subi	r30, 0xE4	; 228
    2f9c:	f3 4d       	sbci	r31, 0xD3	; 211
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa8:	08 f4       	brcc	.+2      	; 0x2fac <__vector_18+0x44>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	89 0f       	add	r24, r25
    2fae:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2fb2:	e0 e0       	ldi	r30, 0x00	; 0
    2fb4:	f8 e0       	ldi	r31, 0x08	; 8
    2fb6:	85 81       	ldd	r24, Z+5	; 0x05
    2fb8:	80 62       	ori	r24, 0x20	; 32
    2fba:	85 83       	std	Z+5, r24	; 0x05
    2fbc:	03 c0       	rjmp	.+6      	; 0x2fc4 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	}

}
    2fc4:	ff 91       	pop	r31
    2fc6:	ef 91       	pop	r30
    2fc8:	9f 91       	pop	r25
    2fca:	8f 91       	pop	r24
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	0f 90       	pop	r0
    2fd2:	1f 90       	pop	r1
    2fd4:	18 95       	reti

00002fd6 <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2fd6:	1f 92       	push	r1
    2fd8:	0f 92       	push	r0
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	0f 92       	push	r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	2f 93       	push	r18
    2fe2:	8f 93       	push	r24
    2fe4:	9f 93       	push	r25
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2fea:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    2fee:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    2ff2:	80 91 13 2b 	lds	r24, 0x2B13	; 0x802b13 <recv1_buf+0x101>
    2ff6:	e8 17       	cp	r30, r24
    2ff8:	40 f4       	brcc	.+16     	; 0x300a <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2ffa:	21 e0       	ldi	r18, 0x01	; 1
    2ffc:	2e 0f       	add	r18, r30
    2ffe:	20 93 15 2b 	sts	0x2B15, r18	; 0x802b15 <recv1_buf+0x103>
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	ee 5e       	subi	r30, 0xEE	; 238
    3006:	f5 4d       	sbci	r31, 0xD5	; 213
    3008:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    300a:	90 91 15 2b 	lds	r25, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    300e:	98 17       	cp	r25, r24
    3010:	18 f0       	brcs	.+6      	; 0x3018 <__vector_26+0x42>
		recv1_buf.done = YES;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x104>
	}

}
    3018:	ff 91       	pop	r31
    301a:	ef 91       	pop	r30
    301c:	9f 91       	pop	r25
    301e:	8f 91       	pop	r24
    3020:	2f 91       	pop	r18
    3022:	0f 90       	pop	r0
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	0f 90       	pop	r0
    3028:	1f 90       	pop	r1
    302a:	18 95       	reti

0000302c <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    302c:	1f 92       	push	r1
    302e:	0f 92       	push	r0
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	0f 92       	push	r0
    3034:	11 24       	eor	r1, r1
    3036:	8f 93       	push	r24
    3038:	9f 93       	push	r25
    303a:	ef 93       	push	r30
    303c:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    303e:	e0 e2       	ldi	r30, 0x20	; 32
    3040:	f8 e0       	ldi	r31, 0x08	; 8
    3042:	85 81       	ldd	r24, Z+5	; 0x05
    3044:	8f 7d       	andi	r24, 0xDF	; 223
    3046:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3048:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <send1_buf+0xff>
    304c:	e0 91 2b 30 	lds	r30, 0x302B	; 0x80302b <send1_buf+0x100>
    3050:	8e 17       	cp	r24, r30
    3052:	b9 f0       	breq	.+46     	; 0x3082 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3054:	91 e0       	ldi	r25, 0x01	; 1
    3056:	9e 0f       	add	r25, r30
    3058:	90 93 2b 30 	sts	0x302B, r25	; 0x80302b <send1_buf+0x100>
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	e5 5d       	subi	r30, 0xD5	; 213
    3060:	f0 4d       	sbci	r31, 0xD0	; 208
    3062:	80 81       	ld	r24, Z
    3064:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	9f 3f       	cpi	r25, 0xFF	; 255
    306c:	08 f4       	brcc	.+2      	; 0x3070 <__vector_27+0x44>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	89 0f       	add	r24, r25
    3072:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3076:	e0 e2       	ldi	r30, 0x20	; 32
    3078:	f8 e0       	ldi	r31, 0x08	; 8
    307a:	85 81       	ldd	r24, Z+5	; 0x05
    307c:	80 62       	ori	r24, 0x20	; 32
    307e:	85 83       	std	Z+5, r24	; 0x05
    3080:	03 c0       	rjmp	.+6      	; 0x3088 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	1f 90       	pop	r1
    3098:	18 95       	reti

0000309a <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    309a:	1f 92       	push	r1
    309c:	0f 92       	push	r0
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	0f 92       	push	r0
    30a2:	11 24       	eor	r1, r1
    30a4:	8f 93       	push	r24
    30a6:	9f 93       	push	r25
    30a8:	af 93       	push	r26
    30aa:	bf 93       	push	r27
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    30b0:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    30b4:	8d 30       	cpi	r24, 0x0D	; 13
    30b6:	21 f0       	breq	.+8      	; 0x30c0 <__vector_37+0x26>
    30b8:	e0 91 24 2e 	lds	r30, 0x2E24	; 0x802e24 <recv3_buf+0x103>
    30bc:	ee 3f       	cpi	r30, 0xFE	; 254
    30be:	78 f0       	brcs	.+30     	; 0x30de <__vector_37+0x44>
		recv3_buf.done = YES;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    30c6:	a4 e2       	ldi	r26, 0x24	; 36
    30c8:	be e2       	ldi	r27, 0x2E	; 46
    30ca:	8c 91       	ld	r24, X
    30cc:	e8 2f       	mov	r30, r24
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	ef 5d       	subi	r30, 0xDF	; 223
    30d2:	f2 4d       	sbci	r31, 0xD2	; 210
    30d4:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    30d6:	80 93 22 2e 	sts	0x2E22, r24	; 0x802e22 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    30da:	1c 92       	st	X, r1
		return;
    30dc:	08 c0       	rjmp	.+16     	; 0x30ee <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	9e 0f       	add	r25, r30
    30e2:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <recv3_buf+0x103>
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	ef 5d       	subi	r30, 0xDF	; 223
    30ea:	f2 4d       	sbci	r31, 0xD2	; 210
    30ec:	80 83       	st	Z, r24
	}

}
    30ee:	ff 91       	pop	r31
    30f0:	ef 91       	pop	r30
    30f2:	bf 91       	pop	r27
    30f4:	af 91       	pop	r26
    30f6:	9f 91       	pop	r25
    30f8:	8f 91       	pop	r24
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	0f 90       	pop	r0
    3100:	1f 90       	pop	r1
    3102:	18 95       	reti

00003104 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    3104:	1f 92       	push	r1
    3106:	0f 92       	push	r0
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	0f 92       	push	r0
    310c:	11 24       	eor	r1, r1
    310e:	8f 93       	push	r24
    3110:	9f 93       	push	r25
    3112:	af 93       	push	r26
    3114:	bf 93       	push	r27
    3116:	ef 93       	push	r30
    3118:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    311a:	a9 e2       	ldi	r26, 0x29	; 41
    311c:	bf e2       	ldi	r27, 0x2F	; 47
    311e:	ec 91       	ld	r30, X
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	8e 0f       	add	r24, r30
    3124:	8c 93       	st	X, r24
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	ea 5d       	subi	r30, 0xDA	; 218
    312a:	f1 4d       	sbci	r31, 0xD1	; 209
    312c:	90 81       	ld	r25, Z
    312e:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3132:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x101>
    3136:	89 17       	cp	r24, r25
    3138:	40 f0       	brcs	.+16     	; 0x314a <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    313a:	e0 e6       	ldi	r30, 0x60	; 96
    313c:	f8 e0       	ldi	r31, 0x08	; 8
    313e:	85 81       	ldd	r24, Z+5	; 0x05
    3140:	8f 7d       	andi	r24, 0xDF	; 223
    3142:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	}

}
    314a:	ff 91       	pop	r31
    314c:	ef 91       	pop	r30
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	0f 90       	pop	r0
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	0f 90       	pop	r0
    315c:	1f 90       	pop	r1
    315e:	18 95       	reti

00003160 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3160:	0e 94 93 16 	call	0x2d26	; 0x2d26 <init_USART>
	init_XPORT();
    3164:	0e 94 ba 18 	call	0x3174	; 0x3174 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    3168:	88 ed       	ldi	r24, 0xD8	; 216
    316a:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3172:	08 95       	ret

00003174 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    3174:	e0 e4       	ldi	r30, 0x40	; 64
    3176:	f4 e0       	ldi	r31, 0x04	; 4
    3178:	88 e0       	ldi	r24, 0x08	; 8
    317a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    317c:	81 83       	std	Z+1, r24	; 0x01
    317e:	ad e8       	ldi	r26, 0x8D	; 141
    3180:	b0 e2       	ldi	r27, 0x20	; 32
    3182:	11 97       	sbiw	r26, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <init_XPORT+0xe>
    3186:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    3188:	85 83       	std	Z+5, r24	; 0x05
    318a:	08 95       	ret

0000318c <__subsf3>:
    318c:	50 58       	subi	r21, 0x80	; 128

0000318e <__addsf3>:
    318e:	bb 27       	eor	r27, r27
    3190:	aa 27       	eor	r26, r26
    3192:	0e 94 de 18 	call	0x31bc	; 0x31bc <__addsf3x>
    3196:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__fp_round>
    319a:	0e 94 14 1a 	call	0x3428	; 0x3428 <__fp_pscA>
    319e:	38 f0       	brcs	.+14     	; 0x31ae <__addsf3+0x20>
    31a0:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__fp_pscB>
    31a4:	20 f0       	brcs	.+8      	; 0x31ae <__addsf3+0x20>
    31a6:	39 f4       	brne	.+14     	; 0x31b6 <__addsf3+0x28>
    31a8:	9f 3f       	cpi	r25, 0xFF	; 255
    31aa:	19 f4       	brne	.+6      	; 0x31b2 <__addsf3+0x24>
    31ac:	26 f4       	brtc	.+8      	; 0x31b6 <__addsf3+0x28>
    31ae:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_nan>
    31b2:	0e f4       	brtc	.+2      	; 0x31b6 <__addsf3+0x28>
    31b4:	e0 95       	com	r30
    31b6:	e7 fb       	bst	r30, 7
    31b8:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_inf>

000031bc <__addsf3x>:
    31bc:	e9 2f       	mov	r30, r25
    31be:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_split3>
    31c2:	58 f3       	brcs	.-42     	; 0x319a <__addsf3+0xc>
    31c4:	ba 17       	cp	r27, r26
    31c6:	62 07       	cpc	r22, r18
    31c8:	73 07       	cpc	r23, r19
    31ca:	84 07       	cpc	r24, r20
    31cc:	95 07       	cpc	r25, r21
    31ce:	20 f0       	brcs	.+8      	; 0x31d8 <__addsf3x+0x1c>
    31d0:	79 f4       	brne	.+30     	; 0x31f0 <__addsf3x+0x34>
    31d2:	a6 f5       	brtc	.+104    	; 0x323c <__addsf3x+0x80>
    31d4:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__fp_zero>
    31d8:	0e f4       	brtc	.+2      	; 0x31dc <__addsf3x+0x20>
    31da:	e0 95       	com	r30
    31dc:	0b 2e       	mov	r0, r27
    31de:	ba 2f       	mov	r27, r26
    31e0:	a0 2d       	mov	r26, r0
    31e2:	0b 01       	movw	r0, r22
    31e4:	b9 01       	movw	r22, r18
    31e6:	90 01       	movw	r18, r0
    31e8:	0c 01       	movw	r0, r24
    31ea:	ca 01       	movw	r24, r20
    31ec:	a0 01       	movw	r20, r0
    31ee:	11 24       	eor	r1, r1
    31f0:	ff 27       	eor	r31, r31
    31f2:	59 1b       	sub	r21, r25
    31f4:	99 f0       	breq	.+38     	; 0x321c <__addsf3x+0x60>
    31f6:	59 3f       	cpi	r21, 0xF9	; 249
    31f8:	50 f4       	brcc	.+20     	; 0x320e <__addsf3x+0x52>
    31fa:	50 3e       	cpi	r21, 0xE0	; 224
    31fc:	68 f1       	brcs	.+90     	; 0x3258 <__addsf3x+0x9c>
    31fe:	1a 16       	cp	r1, r26
    3200:	f0 40       	sbci	r31, 0x00	; 0
    3202:	a2 2f       	mov	r26, r18
    3204:	23 2f       	mov	r18, r19
    3206:	34 2f       	mov	r19, r20
    3208:	44 27       	eor	r20, r20
    320a:	58 5f       	subi	r21, 0xF8	; 248
    320c:	f3 cf       	rjmp	.-26     	; 0x31f4 <__addsf3x+0x38>
    320e:	46 95       	lsr	r20
    3210:	37 95       	ror	r19
    3212:	27 95       	ror	r18
    3214:	a7 95       	ror	r26
    3216:	f0 40       	sbci	r31, 0x00	; 0
    3218:	53 95       	inc	r21
    321a:	c9 f7       	brne	.-14     	; 0x320e <__addsf3x+0x52>
    321c:	7e f4       	brtc	.+30     	; 0x323c <__addsf3x+0x80>
    321e:	1f 16       	cp	r1, r31
    3220:	ba 0b       	sbc	r27, r26
    3222:	62 0b       	sbc	r22, r18
    3224:	73 0b       	sbc	r23, r19
    3226:	84 0b       	sbc	r24, r20
    3228:	ba f0       	brmi	.+46     	; 0x3258 <__addsf3x+0x9c>
    322a:	91 50       	subi	r25, 0x01	; 1
    322c:	a1 f0       	breq	.+40     	; 0x3256 <__addsf3x+0x9a>
    322e:	ff 0f       	add	r31, r31
    3230:	bb 1f       	adc	r27, r27
    3232:	66 1f       	adc	r22, r22
    3234:	77 1f       	adc	r23, r23
    3236:	88 1f       	adc	r24, r24
    3238:	c2 f7       	brpl	.-16     	; 0x322a <__addsf3x+0x6e>
    323a:	0e c0       	rjmp	.+28     	; 0x3258 <__addsf3x+0x9c>
    323c:	ba 0f       	add	r27, r26
    323e:	62 1f       	adc	r22, r18
    3240:	73 1f       	adc	r23, r19
    3242:	84 1f       	adc	r24, r20
    3244:	48 f4       	brcc	.+18     	; 0x3258 <__addsf3x+0x9c>
    3246:	87 95       	ror	r24
    3248:	77 95       	ror	r23
    324a:	67 95       	ror	r22
    324c:	b7 95       	ror	r27
    324e:	f7 95       	ror	r31
    3250:	9e 3f       	cpi	r25, 0xFE	; 254
    3252:	08 f0       	brcs	.+2      	; 0x3256 <__addsf3x+0x9a>
    3254:	b0 cf       	rjmp	.-160    	; 0x31b6 <__addsf3+0x28>
    3256:	93 95       	inc	r25
    3258:	88 0f       	add	r24, r24
    325a:	08 f0       	brcs	.+2      	; 0x325e <__addsf3x+0xa2>
    325c:	99 27       	eor	r25, r25
    325e:	ee 0f       	add	r30, r30
    3260:	97 95       	ror	r25
    3262:	87 95       	ror	r24
    3264:	08 95       	ret

00003266 <__cmpsf2>:
    3266:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fp_cmp>
    326a:	08 f4       	brcc	.+2      	; 0x326e <__cmpsf2+0x8>
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	08 95       	ret

00003270 <__divsf3>:
    3270:	0e 94 4c 19 	call	0x3298	; 0x3298 <__divsf3x>
    3274:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__fp_round>
    3278:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__fp_pscB>
    327c:	58 f0       	brcs	.+22     	; 0x3294 <__divsf3+0x24>
    327e:	0e 94 14 1a 	call	0x3428	; 0x3428 <__fp_pscA>
    3282:	40 f0       	brcs	.+16     	; 0x3294 <__divsf3+0x24>
    3284:	29 f4       	brne	.+10     	; 0x3290 <__divsf3+0x20>
    3286:	5f 3f       	cpi	r21, 0xFF	; 255
    3288:	29 f0       	breq	.+10     	; 0x3294 <__divsf3+0x24>
    328a:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_inf>
    328e:	51 11       	cpse	r21, r1
    3290:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_szero>
    3294:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_nan>

00003298 <__divsf3x>:
    3298:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_split3>
    329c:	68 f3       	brcs	.-38     	; 0x3278 <__divsf3+0x8>

0000329e <__divsf3_pse>:
    329e:	99 23       	and	r25, r25
    32a0:	b1 f3       	breq	.-20     	; 0x328e <__divsf3+0x1e>
    32a2:	55 23       	and	r21, r21
    32a4:	91 f3       	breq	.-28     	; 0x328a <__divsf3+0x1a>
    32a6:	95 1b       	sub	r25, r21
    32a8:	55 0b       	sbc	r21, r21
    32aa:	bb 27       	eor	r27, r27
    32ac:	aa 27       	eor	r26, r26
    32ae:	62 17       	cp	r22, r18
    32b0:	73 07       	cpc	r23, r19
    32b2:	84 07       	cpc	r24, r20
    32b4:	38 f0       	brcs	.+14     	; 0x32c4 <__divsf3_pse+0x26>
    32b6:	9f 5f       	subi	r25, 0xFF	; 255
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	22 0f       	add	r18, r18
    32bc:	33 1f       	adc	r19, r19
    32be:	44 1f       	adc	r20, r20
    32c0:	aa 1f       	adc	r26, r26
    32c2:	a9 f3       	breq	.-22     	; 0x32ae <__divsf3_pse+0x10>
    32c4:	35 d0       	rcall	.+106    	; 0x3330 <__divsf3_pse+0x92>
    32c6:	0e 2e       	mov	r0, r30
    32c8:	3a f0       	brmi	.+14     	; 0x32d8 <__divsf3_pse+0x3a>
    32ca:	e0 e8       	ldi	r30, 0x80	; 128
    32cc:	32 d0       	rcall	.+100    	; 0x3332 <__divsf3_pse+0x94>
    32ce:	91 50       	subi	r25, 0x01	; 1
    32d0:	50 40       	sbci	r21, 0x00	; 0
    32d2:	e6 95       	lsr	r30
    32d4:	00 1c       	adc	r0, r0
    32d6:	ca f7       	brpl	.-14     	; 0x32ca <__divsf3_pse+0x2c>
    32d8:	2b d0       	rcall	.+86     	; 0x3330 <__divsf3_pse+0x92>
    32da:	fe 2f       	mov	r31, r30
    32dc:	29 d0       	rcall	.+82     	; 0x3330 <__divsf3_pse+0x92>
    32de:	66 0f       	add	r22, r22
    32e0:	77 1f       	adc	r23, r23
    32e2:	88 1f       	adc	r24, r24
    32e4:	bb 1f       	adc	r27, r27
    32e6:	26 17       	cp	r18, r22
    32e8:	37 07       	cpc	r19, r23
    32ea:	48 07       	cpc	r20, r24
    32ec:	ab 07       	cpc	r26, r27
    32ee:	b0 e8       	ldi	r27, 0x80	; 128
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <__divsf3_pse+0x56>
    32f2:	bb 0b       	sbc	r27, r27
    32f4:	80 2d       	mov	r24, r0
    32f6:	bf 01       	movw	r22, r30
    32f8:	ff 27       	eor	r31, r31
    32fa:	93 58       	subi	r25, 0x83	; 131
    32fc:	5f 4f       	sbci	r21, 0xFF	; 255
    32fe:	3a f0       	brmi	.+14     	; 0x330e <__divsf3_pse+0x70>
    3300:	9e 3f       	cpi	r25, 0xFE	; 254
    3302:	51 05       	cpc	r21, r1
    3304:	78 f0       	brcs	.+30     	; 0x3324 <__divsf3_pse+0x86>
    3306:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_inf>
    330a:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_szero>
    330e:	5f 3f       	cpi	r21, 0xFF	; 255
    3310:	e4 f3       	brlt	.-8      	; 0x330a <__divsf3_pse+0x6c>
    3312:	98 3e       	cpi	r25, 0xE8	; 232
    3314:	d4 f3       	brlt	.-12     	; 0x330a <__divsf3_pse+0x6c>
    3316:	86 95       	lsr	r24
    3318:	77 95       	ror	r23
    331a:	67 95       	ror	r22
    331c:	b7 95       	ror	r27
    331e:	f7 95       	ror	r31
    3320:	9f 5f       	subi	r25, 0xFF	; 255
    3322:	c9 f7       	brne	.-14     	; 0x3316 <__divsf3_pse+0x78>
    3324:	88 0f       	add	r24, r24
    3326:	91 1d       	adc	r25, r1
    3328:	96 95       	lsr	r25
    332a:	87 95       	ror	r24
    332c:	97 f9       	bld	r25, 7
    332e:	08 95       	ret
    3330:	e1 e0       	ldi	r30, 0x01	; 1
    3332:	66 0f       	add	r22, r22
    3334:	77 1f       	adc	r23, r23
    3336:	88 1f       	adc	r24, r24
    3338:	bb 1f       	adc	r27, r27
    333a:	62 17       	cp	r22, r18
    333c:	73 07       	cpc	r23, r19
    333e:	84 07       	cpc	r24, r20
    3340:	ba 07       	cpc	r27, r26
    3342:	20 f0       	brcs	.+8      	; 0x334c <__divsf3_pse+0xae>
    3344:	62 1b       	sub	r22, r18
    3346:	73 0b       	sbc	r23, r19
    3348:	84 0b       	sbc	r24, r20
    334a:	ba 0b       	sbc	r27, r26
    334c:	ee 1f       	adc	r30, r30
    334e:	88 f7       	brcc	.-30     	; 0x3332 <__divsf3_pse+0x94>
    3350:	e0 95       	com	r30
    3352:	08 95       	ret

00003354 <__floatunsisf>:
    3354:	e8 94       	clt
    3356:	09 c0       	rjmp	.+18     	; 0x336a <__floatsisf+0x12>

00003358 <__floatsisf>:
    3358:	97 fb       	bst	r25, 7
    335a:	3e f4       	brtc	.+14     	; 0x336a <__floatsisf+0x12>
    335c:	90 95       	com	r25
    335e:	80 95       	com	r24
    3360:	70 95       	com	r23
    3362:	61 95       	neg	r22
    3364:	7f 4f       	sbci	r23, 0xFF	; 255
    3366:	8f 4f       	sbci	r24, 0xFF	; 255
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	99 23       	and	r25, r25
    336c:	a9 f0       	breq	.+42     	; 0x3398 <__floatsisf+0x40>
    336e:	f9 2f       	mov	r31, r25
    3370:	96 e9       	ldi	r25, 0x96	; 150
    3372:	bb 27       	eor	r27, r27
    3374:	93 95       	inc	r25
    3376:	f6 95       	lsr	r31
    3378:	87 95       	ror	r24
    337a:	77 95       	ror	r23
    337c:	67 95       	ror	r22
    337e:	b7 95       	ror	r27
    3380:	f1 11       	cpse	r31, r1
    3382:	f8 cf       	rjmp	.-16     	; 0x3374 <__floatsisf+0x1c>
    3384:	fa f4       	brpl	.+62     	; 0x33c4 <__floatsisf+0x6c>
    3386:	bb 0f       	add	r27, r27
    3388:	11 f4       	brne	.+4      	; 0x338e <__floatsisf+0x36>
    338a:	60 ff       	sbrs	r22, 0
    338c:	1b c0       	rjmp	.+54     	; 0x33c4 <__floatsisf+0x6c>
    338e:	6f 5f       	subi	r22, 0xFF	; 255
    3390:	7f 4f       	sbci	r23, 0xFF	; 255
    3392:	8f 4f       	sbci	r24, 0xFF	; 255
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	16 c0       	rjmp	.+44     	; 0x33c4 <__floatsisf+0x6c>
    3398:	88 23       	and	r24, r24
    339a:	11 f0       	breq	.+4      	; 0x33a0 <__floatsisf+0x48>
    339c:	96 e9       	ldi	r25, 0x96	; 150
    339e:	11 c0       	rjmp	.+34     	; 0x33c2 <__floatsisf+0x6a>
    33a0:	77 23       	and	r23, r23
    33a2:	21 f0       	breq	.+8      	; 0x33ac <__floatsisf+0x54>
    33a4:	9e e8       	ldi	r25, 0x8E	; 142
    33a6:	87 2f       	mov	r24, r23
    33a8:	76 2f       	mov	r23, r22
    33aa:	05 c0       	rjmp	.+10     	; 0x33b6 <__floatsisf+0x5e>
    33ac:	66 23       	and	r22, r22
    33ae:	71 f0       	breq	.+28     	; 0x33cc <__floatsisf+0x74>
    33b0:	96 e8       	ldi	r25, 0x86	; 134
    33b2:	86 2f       	mov	r24, r22
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	2a f0       	brmi	.+10     	; 0x33c4 <__floatsisf+0x6c>
    33ba:	9a 95       	dec	r25
    33bc:	66 0f       	add	r22, r22
    33be:	77 1f       	adc	r23, r23
    33c0:	88 1f       	adc	r24, r24
    33c2:	da f7       	brpl	.-10     	; 0x33ba <__floatsisf+0x62>
    33c4:	88 0f       	add	r24, r24
    33c6:	96 95       	lsr	r25
    33c8:	87 95       	ror	r24
    33ca:	97 f9       	bld	r25, 7
    33cc:	08 95       	ret

000033ce <__fp_cmp>:
    33ce:	99 0f       	add	r25, r25
    33d0:	00 08       	sbc	r0, r0
    33d2:	55 0f       	add	r21, r21
    33d4:	aa 0b       	sbc	r26, r26
    33d6:	e0 e8       	ldi	r30, 0x80	; 128
    33d8:	fe ef       	ldi	r31, 0xFE	; 254
    33da:	16 16       	cp	r1, r22
    33dc:	17 06       	cpc	r1, r23
    33de:	e8 07       	cpc	r30, r24
    33e0:	f9 07       	cpc	r31, r25
    33e2:	c0 f0       	brcs	.+48     	; 0x3414 <__fp_cmp+0x46>
    33e4:	12 16       	cp	r1, r18
    33e6:	13 06       	cpc	r1, r19
    33e8:	e4 07       	cpc	r30, r20
    33ea:	f5 07       	cpc	r31, r21
    33ec:	98 f0       	brcs	.+38     	; 0x3414 <__fp_cmp+0x46>
    33ee:	62 1b       	sub	r22, r18
    33f0:	73 0b       	sbc	r23, r19
    33f2:	84 0b       	sbc	r24, r20
    33f4:	95 0b       	sbc	r25, r21
    33f6:	39 f4       	brne	.+14     	; 0x3406 <__fp_cmp+0x38>
    33f8:	0a 26       	eor	r0, r26
    33fa:	61 f0       	breq	.+24     	; 0x3414 <__fp_cmp+0x46>
    33fc:	23 2b       	or	r18, r19
    33fe:	24 2b       	or	r18, r20
    3400:	25 2b       	or	r18, r21
    3402:	21 f4       	brne	.+8      	; 0x340c <__fp_cmp+0x3e>
    3404:	08 95       	ret
    3406:	0a 26       	eor	r0, r26
    3408:	09 f4       	brne	.+2      	; 0x340c <__fp_cmp+0x3e>
    340a:	a1 40       	sbci	r26, 0x01	; 1
    340c:	a6 95       	lsr	r26
    340e:	8f ef       	ldi	r24, 0xFF	; 255
    3410:	81 1d       	adc	r24, r1
    3412:	81 1d       	adc	r24, r1
    3414:	08 95       	ret

00003416 <__fp_inf>:
    3416:	97 f9       	bld	r25, 7
    3418:	9f 67       	ori	r25, 0x7F	; 127
    341a:	80 e8       	ldi	r24, 0x80	; 128
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	08 95       	ret

00003422 <__fp_nan>:
    3422:	9f ef       	ldi	r25, 0xFF	; 255
    3424:	80 ec       	ldi	r24, 0xC0	; 192
    3426:	08 95       	ret

00003428 <__fp_pscA>:
    3428:	00 24       	eor	r0, r0
    342a:	0a 94       	dec	r0
    342c:	16 16       	cp	r1, r22
    342e:	17 06       	cpc	r1, r23
    3430:	18 06       	cpc	r1, r24
    3432:	09 06       	cpc	r0, r25
    3434:	08 95       	ret

00003436 <__fp_pscB>:
    3436:	00 24       	eor	r0, r0
    3438:	0a 94       	dec	r0
    343a:	12 16       	cp	r1, r18
    343c:	13 06       	cpc	r1, r19
    343e:	14 06       	cpc	r1, r20
    3440:	05 06       	cpc	r0, r21
    3442:	08 95       	ret

00003444 <__fp_round>:
    3444:	09 2e       	mov	r0, r25
    3446:	03 94       	inc	r0
    3448:	00 0c       	add	r0, r0
    344a:	11 f4       	brne	.+4      	; 0x3450 <__fp_round+0xc>
    344c:	88 23       	and	r24, r24
    344e:	52 f0       	brmi	.+20     	; 0x3464 <__fp_round+0x20>
    3450:	bb 0f       	add	r27, r27
    3452:	40 f4       	brcc	.+16     	; 0x3464 <__fp_round+0x20>
    3454:	bf 2b       	or	r27, r31
    3456:	11 f4       	brne	.+4      	; 0x345c <__fp_round+0x18>
    3458:	60 ff       	sbrs	r22, 0
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <__fp_round+0x20>
    345c:	6f 5f       	subi	r22, 0xFF	; 255
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	8f 4f       	sbci	r24, 0xFF	; 255
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	08 95       	ret

00003466 <__fp_split3>:
    3466:	57 fd       	sbrc	r21, 7
    3468:	90 58       	subi	r25, 0x80	; 128
    346a:	44 0f       	add	r20, r20
    346c:	55 1f       	adc	r21, r21
    346e:	59 f0       	breq	.+22     	; 0x3486 <__fp_splitA+0x10>
    3470:	5f 3f       	cpi	r21, 0xFF	; 255
    3472:	71 f0       	breq	.+28     	; 0x3490 <__fp_splitA+0x1a>
    3474:	47 95       	ror	r20

00003476 <__fp_splitA>:
    3476:	88 0f       	add	r24, r24
    3478:	97 fb       	bst	r25, 7
    347a:	99 1f       	adc	r25, r25
    347c:	61 f0       	breq	.+24     	; 0x3496 <__fp_splitA+0x20>
    347e:	9f 3f       	cpi	r25, 0xFF	; 255
    3480:	79 f0       	breq	.+30     	; 0x34a0 <__fp_splitA+0x2a>
    3482:	87 95       	ror	r24
    3484:	08 95       	ret
    3486:	12 16       	cp	r1, r18
    3488:	13 06       	cpc	r1, r19
    348a:	14 06       	cpc	r1, r20
    348c:	55 1f       	adc	r21, r21
    348e:	f2 cf       	rjmp	.-28     	; 0x3474 <__fp_split3+0xe>
    3490:	46 95       	lsr	r20
    3492:	f1 df       	rcall	.-30     	; 0x3476 <__fp_splitA>
    3494:	08 c0       	rjmp	.+16     	; 0x34a6 <__fp_splitA+0x30>
    3496:	16 16       	cp	r1, r22
    3498:	17 06       	cpc	r1, r23
    349a:	18 06       	cpc	r1, r24
    349c:	99 1f       	adc	r25, r25
    349e:	f1 cf       	rjmp	.-30     	; 0x3482 <__fp_splitA+0xc>
    34a0:	86 95       	lsr	r24
    34a2:	71 05       	cpc	r23, r1
    34a4:	61 05       	cpc	r22, r1
    34a6:	08 94       	sec
    34a8:	08 95       	ret

000034aa <__fp_zero>:
    34aa:	e8 94       	clt

000034ac <__fp_szero>:
    34ac:	bb 27       	eor	r27, r27
    34ae:	66 27       	eor	r22, r22
    34b0:	77 27       	eor	r23, r23
    34b2:	cb 01       	movw	r24, r22
    34b4:	97 f9       	bld	r25, 7
    34b6:	08 95       	ret

000034b8 <__gesf2>:
    34b8:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fp_cmp>
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <__gesf2+0x8>
    34be:	8f ef       	ldi	r24, 0xFF	; 255
    34c0:	08 95       	ret

000034c2 <__mulsf3>:
    34c2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3x>
    34c6:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__fp_round>
    34ca:	0e 94 14 1a 	call	0x3428	; 0x3428 <__fp_pscA>
    34ce:	38 f0       	brcs	.+14     	; 0x34de <__mulsf3+0x1c>
    34d0:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__fp_pscB>
    34d4:	20 f0       	brcs	.+8      	; 0x34de <__mulsf3+0x1c>
    34d6:	95 23       	and	r25, r21
    34d8:	11 f0       	breq	.+4      	; 0x34de <__mulsf3+0x1c>
    34da:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_inf>
    34de:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_nan>
    34e2:	11 24       	eor	r1, r1
    34e4:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_szero>

000034e8 <__mulsf3x>:
    34e8:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_split3>
    34ec:	70 f3       	brcs	.-36     	; 0x34ca <__mulsf3+0x8>

000034ee <__mulsf3_pse>:
    34ee:	95 9f       	mul	r25, r21
    34f0:	c1 f3       	breq	.-16     	; 0x34e2 <__mulsf3+0x20>
    34f2:	95 0f       	add	r25, r21
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	55 1f       	adc	r21, r21
    34f8:	62 9f       	mul	r22, r18
    34fa:	f0 01       	movw	r30, r0
    34fc:	72 9f       	mul	r23, r18
    34fe:	bb 27       	eor	r27, r27
    3500:	f0 0d       	add	r31, r0
    3502:	b1 1d       	adc	r27, r1
    3504:	63 9f       	mul	r22, r19
    3506:	aa 27       	eor	r26, r26
    3508:	f0 0d       	add	r31, r0
    350a:	b1 1d       	adc	r27, r1
    350c:	aa 1f       	adc	r26, r26
    350e:	64 9f       	mul	r22, r20
    3510:	66 27       	eor	r22, r22
    3512:	b0 0d       	add	r27, r0
    3514:	a1 1d       	adc	r26, r1
    3516:	66 1f       	adc	r22, r22
    3518:	82 9f       	mul	r24, r18
    351a:	22 27       	eor	r18, r18
    351c:	b0 0d       	add	r27, r0
    351e:	a1 1d       	adc	r26, r1
    3520:	62 1f       	adc	r22, r18
    3522:	73 9f       	mul	r23, r19
    3524:	b0 0d       	add	r27, r0
    3526:	a1 1d       	adc	r26, r1
    3528:	62 1f       	adc	r22, r18
    352a:	83 9f       	mul	r24, r19
    352c:	a0 0d       	add	r26, r0
    352e:	61 1d       	adc	r22, r1
    3530:	22 1f       	adc	r18, r18
    3532:	74 9f       	mul	r23, r20
    3534:	33 27       	eor	r19, r19
    3536:	a0 0d       	add	r26, r0
    3538:	61 1d       	adc	r22, r1
    353a:	23 1f       	adc	r18, r19
    353c:	84 9f       	mul	r24, r20
    353e:	60 0d       	add	r22, r0
    3540:	21 1d       	adc	r18, r1
    3542:	82 2f       	mov	r24, r18
    3544:	76 2f       	mov	r23, r22
    3546:	6a 2f       	mov	r22, r26
    3548:	11 24       	eor	r1, r1
    354a:	9f 57       	subi	r25, 0x7F	; 127
    354c:	50 40       	sbci	r21, 0x00	; 0
    354e:	9a f0       	brmi	.+38     	; 0x3576 <__mulsf3_pse+0x88>
    3550:	f1 f0       	breq	.+60     	; 0x358e <__mulsf3_pse+0xa0>
    3552:	88 23       	and	r24, r24
    3554:	4a f0       	brmi	.+18     	; 0x3568 <__mulsf3_pse+0x7a>
    3556:	ee 0f       	add	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	bb 1f       	adc	r27, r27
    355c:	66 1f       	adc	r22, r22
    355e:	77 1f       	adc	r23, r23
    3560:	88 1f       	adc	r24, r24
    3562:	91 50       	subi	r25, 0x01	; 1
    3564:	50 40       	sbci	r21, 0x00	; 0
    3566:	a9 f7       	brne	.-22     	; 0x3552 <__mulsf3_pse+0x64>
    3568:	9e 3f       	cpi	r25, 0xFE	; 254
    356a:	51 05       	cpc	r21, r1
    356c:	80 f0       	brcs	.+32     	; 0x358e <__mulsf3_pse+0xa0>
    356e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_inf>
    3572:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_szero>
    3576:	5f 3f       	cpi	r21, 0xFF	; 255
    3578:	e4 f3       	brlt	.-8      	; 0x3572 <__mulsf3_pse+0x84>
    357a:	98 3e       	cpi	r25, 0xE8	; 232
    357c:	d4 f3       	brlt	.-12     	; 0x3572 <__mulsf3_pse+0x84>
    357e:	86 95       	lsr	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	b7 95       	ror	r27
    3586:	f7 95       	ror	r31
    3588:	e7 95       	ror	r30
    358a:	9f 5f       	subi	r25, 0xFF	; 255
    358c:	c1 f7       	brne	.-16     	; 0x357e <__mulsf3_pse+0x90>
    358e:	fe 2b       	or	r31, r30
    3590:	88 0f       	add	r24, r24
    3592:	91 1d       	adc	r25, r1
    3594:	96 95       	lsr	r25
    3596:	87 95       	ror	r24
    3598:	97 f9       	bld	r25, 7
    359a:	08 95       	ret

0000359c <vfprintf>:
    359c:	a0 e1       	ldi	r26, 0x10	; 16
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e4 ed       	ldi	r30, 0xD4	; 212
    35a2:	fa e1       	ldi	r31, 0x1A	; 26
    35a4:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__>
    35a8:	7c 01       	movw	r14, r24
    35aa:	1b 01       	movw	r2, r22
    35ac:	6a 01       	movw	r12, r20
    35ae:	fc 01       	movw	r30, r24
    35b0:	16 82       	std	Z+6, r1	; 0x06
    35b2:	17 82       	std	Z+7, r1	; 0x07
    35b4:	83 81       	ldd	r24, Z+3	; 0x03
    35b6:	81 ff       	sbrs	r24, 1
    35b8:	44 c3       	rjmp	.+1672   	; 0x3c42 <vfprintf+0x6a6>
    35ba:	9e 01       	movw	r18, r28
    35bc:	2f 5f       	subi	r18, 0xFF	; 255
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	39 01       	movw	r6, r18
    35c2:	f7 01       	movw	r30, r14
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	f1 01       	movw	r30, r2
    35c8:	93 fd       	sbrc	r25, 3
    35ca:	85 91       	lpm	r24, Z+
    35cc:	93 ff       	sbrs	r25, 3
    35ce:	81 91       	ld	r24, Z+
    35d0:	1f 01       	movw	r2, r30
    35d2:	88 23       	and	r24, r24
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <vfprintf+0x3c>
    35d6:	31 c3       	rjmp	.+1634   	; 0x3c3a <vfprintf+0x69e>
    35d8:	85 32       	cpi	r24, 0x25	; 37
    35da:	39 f4       	brne	.+14     	; 0x35ea <vfprintf+0x4e>
    35dc:	93 fd       	sbrc	r25, 3
    35de:	85 91       	lpm	r24, Z+
    35e0:	93 ff       	sbrs	r25, 3
    35e2:	81 91       	ld	r24, Z+
    35e4:	1f 01       	movw	r2, r30
    35e6:	85 32       	cpi	r24, 0x25	; 37
    35e8:	39 f4       	brne	.+14     	; 0x35f8 <vfprintf+0x5c>
    35ea:	b7 01       	movw	r22, r14
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    35f2:	56 01       	movw	r10, r12
    35f4:	65 01       	movw	r12, r10
    35f6:	e5 cf       	rjmp	.-54     	; 0x35c2 <vfprintf+0x26>
    35f8:	10 e0       	ldi	r17, 0x00	; 0
    35fa:	51 2c       	mov	r5, r1
    35fc:	91 2c       	mov	r9, r1
    35fe:	ff e1       	ldi	r31, 0x1F	; 31
    3600:	f9 15       	cp	r31, r9
    3602:	d8 f0       	brcs	.+54     	; 0x363a <vfprintf+0x9e>
    3604:	8b 32       	cpi	r24, 0x2B	; 43
    3606:	79 f0       	breq	.+30     	; 0x3626 <vfprintf+0x8a>
    3608:	38 f4       	brcc	.+14     	; 0x3618 <vfprintf+0x7c>
    360a:	80 32       	cpi	r24, 0x20	; 32
    360c:	79 f0       	breq	.+30     	; 0x362c <vfprintf+0x90>
    360e:	83 32       	cpi	r24, 0x23	; 35
    3610:	a1 f4       	brne	.+40     	; 0x363a <vfprintf+0x9e>
    3612:	f9 2d       	mov	r31, r9
    3614:	f0 61       	ori	r31, 0x10	; 16
    3616:	2e c0       	rjmp	.+92     	; 0x3674 <vfprintf+0xd8>
    3618:	8d 32       	cpi	r24, 0x2D	; 45
    361a:	61 f0       	breq	.+24     	; 0x3634 <vfprintf+0x98>
    361c:	80 33       	cpi	r24, 0x30	; 48
    361e:	69 f4       	brne	.+26     	; 0x363a <vfprintf+0x9e>
    3620:	29 2d       	mov	r18, r9
    3622:	21 60       	ori	r18, 0x01	; 1
    3624:	2d c0       	rjmp	.+90     	; 0x3680 <vfprintf+0xe4>
    3626:	39 2d       	mov	r19, r9
    3628:	32 60       	ori	r19, 0x02	; 2
    362a:	93 2e       	mov	r9, r19
    362c:	89 2d       	mov	r24, r9
    362e:	84 60       	ori	r24, 0x04	; 4
    3630:	98 2e       	mov	r9, r24
    3632:	2a c0       	rjmp	.+84     	; 0x3688 <vfprintf+0xec>
    3634:	e9 2d       	mov	r30, r9
    3636:	e8 60       	ori	r30, 0x08	; 8
    3638:	15 c0       	rjmp	.+42     	; 0x3664 <vfprintf+0xc8>
    363a:	97 fc       	sbrc	r9, 7
    363c:	2d c0       	rjmp	.+90     	; 0x3698 <vfprintf+0xfc>
    363e:	20 ed       	ldi	r18, 0xD0	; 208
    3640:	28 0f       	add	r18, r24
    3642:	2a 30       	cpi	r18, 0x0A	; 10
    3644:	88 f4       	brcc	.+34     	; 0x3668 <vfprintf+0xcc>
    3646:	96 fe       	sbrs	r9, 6
    3648:	06 c0       	rjmp	.+12     	; 0x3656 <vfprintf+0xba>
    364a:	3a e0       	ldi	r19, 0x0A	; 10
    364c:	13 9f       	mul	r17, r19
    364e:	20 0d       	add	r18, r0
    3650:	11 24       	eor	r1, r1
    3652:	12 2f       	mov	r17, r18
    3654:	19 c0       	rjmp	.+50     	; 0x3688 <vfprintf+0xec>
    3656:	8a e0       	ldi	r24, 0x0A	; 10
    3658:	58 9e       	mul	r5, r24
    365a:	20 0d       	add	r18, r0
    365c:	11 24       	eor	r1, r1
    365e:	52 2e       	mov	r5, r18
    3660:	e9 2d       	mov	r30, r9
    3662:	e0 62       	ori	r30, 0x20	; 32
    3664:	9e 2e       	mov	r9, r30
    3666:	10 c0       	rjmp	.+32     	; 0x3688 <vfprintf+0xec>
    3668:	8e 32       	cpi	r24, 0x2E	; 46
    366a:	31 f4       	brne	.+12     	; 0x3678 <vfprintf+0xdc>
    366c:	96 fc       	sbrc	r9, 6
    366e:	e5 c2       	rjmp	.+1482   	; 0x3c3a <vfprintf+0x69e>
    3670:	f9 2d       	mov	r31, r9
    3672:	f0 64       	ori	r31, 0x40	; 64
    3674:	9f 2e       	mov	r9, r31
    3676:	08 c0       	rjmp	.+16     	; 0x3688 <vfprintf+0xec>
    3678:	8c 36       	cpi	r24, 0x6C	; 108
    367a:	21 f4       	brne	.+8      	; 0x3684 <vfprintf+0xe8>
    367c:	29 2d       	mov	r18, r9
    367e:	20 68       	ori	r18, 0x80	; 128
    3680:	92 2e       	mov	r9, r18
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <vfprintf+0xec>
    3684:	88 36       	cpi	r24, 0x68	; 104
    3686:	41 f4       	brne	.+16     	; 0x3698 <vfprintf+0xfc>
    3688:	f1 01       	movw	r30, r2
    368a:	93 fd       	sbrc	r25, 3
    368c:	85 91       	lpm	r24, Z+
    368e:	93 ff       	sbrs	r25, 3
    3690:	81 91       	ld	r24, Z+
    3692:	1f 01       	movw	r2, r30
    3694:	81 11       	cpse	r24, r1
    3696:	b3 cf       	rjmp	.-154    	; 0x35fe <vfprintf+0x62>
    3698:	9b eb       	ldi	r25, 0xBB	; 187
    369a:	98 0f       	add	r25, r24
    369c:	93 30       	cpi	r25, 0x03	; 3
    369e:	20 f4       	brcc	.+8      	; 0x36a8 <vfprintf+0x10c>
    36a0:	99 2d       	mov	r25, r9
    36a2:	90 61       	ori	r25, 0x10	; 16
    36a4:	80 5e       	subi	r24, 0xE0	; 224
    36a6:	07 c0       	rjmp	.+14     	; 0x36b6 <vfprintf+0x11a>
    36a8:	9b e9       	ldi	r25, 0x9B	; 155
    36aa:	98 0f       	add	r25, r24
    36ac:	93 30       	cpi	r25, 0x03	; 3
    36ae:	08 f0       	brcs	.+2      	; 0x36b2 <vfprintf+0x116>
    36b0:	66 c1       	rjmp	.+716    	; 0x397e <vfprintf+0x3e2>
    36b2:	99 2d       	mov	r25, r9
    36b4:	9f 7e       	andi	r25, 0xEF	; 239
    36b6:	96 ff       	sbrs	r25, 6
    36b8:	16 e0       	ldi	r17, 0x06	; 6
    36ba:	9f 73       	andi	r25, 0x3F	; 63
    36bc:	99 2e       	mov	r9, r25
    36be:	85 36       	cpi	r24, 0x65	; 101
    36c0:	19 f4       	brne	.+6      	; 0x36c8 <vfprintf+0x12c>
    36c2:	90 64       	ori	r25, 0x40	; 64
    36c4:	99 2e       	mov	r9, r25
    36c6:	08 c0       	rjmp	.+16     	; 0x36d8 <vfprintf+0x13c>
    36c8:	86 36       	cpi	r24, 0x66	; 102
    36ca:	21 f4       	brne	.+8      	; 0x36d4 <vfprintf+0x138>
    36cc:	39 2f       	mov	r19, r25
    36ce:	30 68       	ori	r19, 0x80	; 128
    36d0:	93 2e       	mov	r9, r19
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <vfprintf+0x13c>
    36d4:	11 11       	cpse	r17, r1
    36d6:	11 50       	subi	r17, 0x01	; 1
    36d8:	97 fe       	sbrs	r9, 7
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <vfprintf+0x14e>
    36dc:	1c 33       	cpi	r17, 0x3C	; 60
    36de:	50 f4       	brcc	.+20     	; 0x36f4 <vfprintf+0x158>
    36e0:	44 24       	eor	r4, r4
    36e2:	43 94       	inc	r4
    36e4:	41 0e       	add	r4, r17
    36e6:	27 e0       	ldi	r18, 0x07	; 7
    36e8:	0b c0       	rjmp	.+22     	; 0x3700 <vfprintf+0x164>
    36ea:	18 30       	cpi	r17, 0x08	; 8
    36ec:	38 f0       	brcs	.+14     	; 0x36fc <vfprintf+0x160>
    36ee:	27 e0       	ldi	r18, 0x07	; 7
    36f0:	17 e0       	ldi	r17, 0x07	; 7
    36f2:	05 c0       	rjmp	.+10     	; 0x36fe <vfprintf+0x162>
    36f4:	27 e0       	ldi	r18, 0x07	; 7
    36f6:	9c e3       	ldi	r25, 0x3C	; 60
    36f8:	49 2e       	mov	r4, r25
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <vfprintf+0x164>
    36fc:	21 2f       	mov	r18, r17
    36fe:	41 2c       	mov	r4, r1
    3700:	56 01       	movw	r10, r12
    3702:	84 e0       	ldi	r24, 0x04	; 4
    3704:	a8 0e       	add	r10, r24
    3706:	b1 1c       	adc	r11, r1
    3708:	f6 01       	movw	r30, r12
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	04 2d       	mov	r16, r4
    3714:	a3 01       	movw	r20, r6
    3716:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__ftoa_engine>
    371a:	6c 01       	movw	r12, r24
    371c:	f9 81       	ldd	r31, Y+1	; 0x01
    371e:	fc 87       	std	Y+12, r31	; 0x0c
    3720:	f0 ff       	sbrs	r31, 0
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <vfprintf+0x18c>
    3724:	f3 ff       	sbrs	r31, 3
    3726:	06 c0       	rjmp	.+12     	; 0x3734 <vfprintf+0x198>
    3728:	91 fc       	sbrc	r9, 1
    372a:	06 c0       	rjmp	.+12     	; 0x3738 <vfprintf+0x19c>
    372c:	92 fe       	sbrs	r9, 2
    372e:	06 c0       	rjmp	.+12     	; 0x373c <vfprintf+0x1a0>
    3730:	00 e2       	ldi	r16, 0x20	; 32
    3732:	05 c0       	rjmp	.+10     	; 0x373e <vfprintf+0x1a2>
    3734:	0d e2       	ldi	r16, 0x2D	; 45
    3736:	03 c0       	rjmp	.+6      	; 0x373e <vfprintf+0x1a2>
    3738:	0b e2       	ldi	r16, 0x2B	; 43
    373a:	01 c0       	rjmp	.+2      	; 0x373e <vfprintf+0x1a2>
    373c:	00 e0       	ldi	r16, 0x00	; 0
    373e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3740:	8c 70       	andi	r24, 0x0C	; 12
    3742:	19 f0       	breq	.+6      	; 0x374a <vfprintf+0x1ae>
    3744:	01 11       	cpse	r16, r1
    3746:	5a c2       	rjmp	.+1204   	; 0x3bfc <vfprintf+0x660>
    3748:	9b c2       	rjmp	.+1334   	; 0x3c80 <vfprintf+0x6e4>
    374a:	97 fe       	sbrs	r9, 7
    374c:	10 c0       	rjmp	.+32     	; 0x376e <vfprintf+0x1d2>
    374e:	4c 0c       	add	r4, r12
    3750:	fc 85       	ldd	r31, Y+12	; 0x0c
    3752:	f4 ff       	sbrs	r31, 4
    3754:	04 c0       	rjmp	.+8      	; 0x375e <vfprintf+0x1c2>
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	81 33       	cpi	r24, 0x31	; 49
    375a:	09 f4       	brne	.+2      	; 0x375e <vfprintf+0x1c2>
    375c:	4a 94       	dec	r4
    375e:	14 14       	cp	r1, r4
    3760:	74 f5       	brge	.+92     	; 0x37be <vfprintf+0x222>
    3762:	28 e0       	ldi	r18, 0x08	; 8
    3764:	24 15       	cp	r18, r4
    3766:	78 f5       	brcc	.+94     	; 0x37c6 <vfprintf+0x22a>
    3768:	88 e0       	ldi	r24, 0x08	; 8
    376a:	48 2e       	mov	r4, r24
    376c:	2c c0       	rjmp	.+88     	; 0x37c6 <vfprintf+0x22a>
    376e:	96 fc       	sbrc	r9, 6
    3770:	2a c0       	rjmp	.+84     	; 0x37c6 <vfprintf+0x22a>
    3772:	81 2f       	mov	r24, r17
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	8c 15       	cp	r24, r12
    3778:	9d 05       	cpc	r25, r13
    377a:	9c f0       	brlt	.+38     	; 0x37a2 <vfprintf+0x206>
    377c:	3c ef       	ldi	r19, 0xFC	; 252
    377e:	c3 16       	cp	r12, r19
    3780:	3f ef       	ldi	r19, 0xFF	; 255
    3782:	d3 06       	cpc	r13, r19
    3784:	74 f0       	brlt	.+28     	; 0x37a2 <vfprintf+0x206>
    3786:	89 2d       	mov	r24, r9
    3788:	80 68       	ori	r24, 0x80	; 128
    378a:	98 2e       	mov	r9, r24
    378c:	0a c0       	rjmp	.+20     	; 0x37a2 <vfprintf+0x206>
    378e:	e2 e0       	ldi	r30, 0x02	; 2
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	ec 0f       	add	r30, r28
    3794:	fd 1f       	adc	r31, r29
    3796:	e1 0f       	add	r30, r17
    3798:	f1 1d       	adc	r31, r1
    379a:	80 81       	ld	r24, Z
    379c:	80 33       	cpi	r24, 0x30	; 48
    379e:	19 f4       	brne	.+6      	; 0x37a6 <vfprintf+0x20a>
    37a0:	11 50       	subi	r17, 0x01	; 1
    37a2:	11 11       	cpse	r17, r1
    37a4:	f4 cf       	rjmp	.-24     	; 0x378e <vfprintf+0x1f2>
    37a6:	97 fe       	sbrs	r9, 7
    37a8:	0e c0       	rjmp	.+28     	; 0x37c6 <vfprintf+0x22a>
    37aa:	44 24       	eor	r4, r4
    37ac:	43 94       	inc	r4
    37ae:	41 0e       	add	r4, r17
    37b0:	81 2f       	mov	r24, r17
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	c8 16       	cp	r12, r24
    37b6:	d9 06       	cpc	r13, r25
    37b8:	2c f4       	brge	.+10     	; 0x37c4 <vfprintf+0x228>
    37ba:	1c 19       	sub	r17, r12
    37bc:	04 c0       	rjmp	.+8      	; 0x37c6 <vfprintf+0x22a>
    37be:	44 24       	eor	r4, r4
    37c0:	43 94       	inc	r4
    37c2:	01 c0       	rjmp	.+2      	; 0x37c6 <vfprintf+0x22a>
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	97 fe       	sbrs	r9, 7
    37c8:	06 c0       	rjmp	.+12     	; 0x37d6 <vfprintf+0x23a>
    37ca:	1c 14       	cp	r1, r12
    37cc:	1d 04       	cpc	r1, r13
    37ce:	34 f4       	brge	.+12     	; 0x37dc <vfprintf+0x240>
    37d0:	c6 01       	movw	r24, r12
    37d2:	01 96       	adiw	r24, 0x01	; 1
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <vfprintf+0x244>
    37d6:	85 e0       	ldi	r24, 0x05	; 5
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <vfprintf+0x244>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	01 11       	cpse	r16, r1
    37e2:	01 96       	adiw	r24, 0x01	; 1
    37e4:	11 23       	and	r17, r17
    37e6:	31 f0       	breq	.+12     	; 0x37f4 <vfprintf+0x258>
    37e8:	21 2f       	mov	r18, r17
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	2f 5f       	subi	r18, 0xFF	; 255
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
    37f0:	82 0f       	add	r24, r18
    37f2:	93 1f       	adc	r25, r19
    37f4:	25 2d       	mov	r18, r5
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	82 17       	cp	r24, r18
    37fa:	93 07       	cpc	r25, r19
    37fc:	14 f4       	brge	.+4      	; 0x3802 <vfprintf+0x266>
    37fe:	58 1a       	sub	r5, r24
    3800:	01 c0       	rjmp	.+2      	; 0x3804 <vfprintf+0x268>
    3802:	51 2c       	mov	r5, r1
    3804:	89 2d       	mov	r24, r9
    3806:	89 70       	andi	r24, 0x09	; 9
    3808:	49 f4       	brne	.+18     	; 0x381c <vfprintf+0x280>
    380a:	55 20       	and	r5, r5
    380c:	39 f0       	breq	.+14     	; 0x381c <vfprintf+0x280>
    380e:	b7 01       	movw	r22, r14
    3810:	80 e2       	ldi	r24, 0x20	; 32
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3818:	5a 94       	dec	r5
    381a:	f7 cf       	rjmp	.-18     	; 0x380a <vfprintf+0x26e>
    381c:	00 23       	and	r16, r16
    381e:	29 f0       	breq	.+10     	; 0x382a <vfprintf+0x28e>
    3820:	b7 01       	movw	r22, r14
    3822:	80 2f       	mov	r24, r16
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    382a:	93 fc       	sbrc	r9, 3
    382c:	09 c0       	rjmp	.+18     	; 0x3840 <vfprintf+0x2a4>
    382e:	55 20       	and	r5, r5
    3830:	39 f0       	breq	.+14     	; 0x3840 <vfprintf+0x2a4>
    3832:	b7 01       	movw	r22, r14
    3834:	80 e3       	ldi	r24, 0x30	; 48
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    383c:	5a 94       	dec	r5
    383e:	f7 cf       	rjmp	.-18     	; 0x382e <vfprintf+0x292>
    3840:	97 fe       	sbrs	r9, 7
    3842:	4c c0       	rjmp	.+152    	; 0x38dc <vfprintf+0x340>
    3844:	46 01       	movw	r8, r12
    3846:	d7 fe       	sbrs	r13, 7
    3848:	02 c0       	rjmp	.+4      	; 0x384e <vfprintf+0x2b2>
    384a:	81 2c       	mov	r8, r1
    384c:	91 2c       	mov	r9, r1
    384e:	c6 01       	movw	r24, r12
    3850:	88 19       	sub	r24, r8
    3852:	99 09       	sbc	r25, r9
    3854:	f3 01       	movw	r30, r6
    3856:	e8 0f       	add	r30, r24
    3858:	f9 1f       	adc	r31, r25
    385a:	ed 87       	std	Y+13, r30	; 0x0d
    385c:	fe 87       	std	Y+14, r31	; 0x0e
    385e:	96 01       	movw	r18, r12
    3860:	24 19       	sub	r18, r4
    3862:	31 09       	sbc	r19, r1
    3864:	2f 87       	std	Y+15, r18	; 0x0f
    3866:	38 8b       	std	Y+16, r19	; 0x10
    3868:	01 2f       	mov	r16, r17
    386a:	10 e0       	ldi	r17, 0x00	; 0
    386c:	11 95       	neg	r17
    386e:	01 95       	neg	r16
    3870:	11 09       	sbc	r17, r1
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	83 16       	cp	r8, r19
    3876:	93 06       	cpc	r9, r19
    3878:	29 f4       	brne	.+10     	; 0x3884 <vfprintf+0x2e8>
    387a:	b7 01       	movw	r22, r14
    387c:	8e e2       	ldi	r24, 0x2E	; 46
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3884:	c8 14       	cp	r12, r8
    3886:	d9 04       	cpc	r13, r9
    3888:	4c f0       	brlt	.+18     	; 0x389c <vfprintf+0x300>
    388a:	8f 85       	ldd	r24, Y+15	; 0x0f
    388c:	98 89       	ldd	r25, Y+16	; 0x10
    388e:	88 15       	cp	r24, r8
    3890:	99 05       	cpc	r25, r9
    3892:	24 f4       	brge	.+8      	; 0x389c <vfprintf+0x300>
    3894:	ed 85       	ldd	r30, Y+13	; 0x0d
    3896:	fe 85       	ldd	r31, Y+14	; 0x0e
    3898:	81 81       	ldd	r24, Z+1	; 0x01
    389a:	01 c0       	rjmp	.+2      	; 0x389e <vfprintf+0x302>
    389c:	80 e3       	ldi	r24, 0x30	; 48
    389e:	f1 e0       	ldi	r31, 0x01	; 1
    38a0:	8f 1a       	sub	r8, r31
    38a2:	91 08       	sbc	r9, r1
    38a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    38a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    38a8:	2f 5f       	subi	r18, 0xFF	; 255
    38aa:	3f 4f       	sbci	r19, 0xFF	; 255
    38ac:	2d 87       	std	Y+13, r18	; 0x0d
    38ae:	3e 87       	std	Y+14, r19	; 0x0e
    38b0:	80 16       	cp	r8, r16
    38b2:	91 06       	cpc	r9, r17
    38b4:	2c f0       	brlt	.+10     	; 0x38c0 <vfprintf+0x324>
    38b6:	b7 01       	movw	r22, r14
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    38be:	d9 cf       	rjmp	.-78     	; 0x3872 <vfprintf+0x2d6>
    38c0:	c8 14       	cp	r12, r8
    38c2:	d9 04       	cpc	r13, r9
    38c4:	41 f4       	brne	.+16     	; 0x38d6 <vfprintf+0x33a>
    38c6:	9a 81       	ldd	r25, Y+2	; 0x02
    38c8:	96 33       	cpi	r25, 0x36	; 54
    38ca:	20 f4       	brcc	.+8      	; 0x38d4 <vfprintf+0x338>
    38cc:	95 33       	cpi	r25, 0x35	; 53
    38ce:	19 f4       	brne	.+6      	; 0x38d6 <vfprintf+0x33a>
    38d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    38d2:	34 ff       	sbrs	r19, 4
    38d4:	81 e3       	ldi	r24, 0x31	; 49
    38d6:	b7 01       	movw	r22, r14
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	4e c0       	rjmp	.+156    	; 0x3978 <vfprintf+0x3dc>
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	81 33       	cpi	r24, 0x31	; 49
    38e0:	19 f0       	breq	.+6      	; 0x38e8 <vfprintf+0x34c>
    38e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    38e4:	9f 7e       	andi	r25, 0xEF	; 239
    38e6:	9c 87       	std	Y+12, r25	; 0x0c
    38e8:	b7 01       	movw	r22, r14
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    38f0:	11 11       	cpse	r17, r1
    38f2:	05 c0       	rjmp	.+10     	; 0x38fe <vfprintf+0x362>
    38f4:	94 fc       	sbrc	r9, 4
    38f6:	18 c0       	rjmp	.+48     	; 0x3928 <vfprintf+0x38c>
    38f8:	85 e6       	ldi	r24, 0x65	; 101
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	17 c0       	rjmp	.+46     	; 0x392c <vfprintf+0x390>
    38fe:	b7 01       	movw	r22, r14
    3900:	8e e2       	ldi	r24, 0x2E	; 46
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3908:	1e 5f       	subi	r17, 0xFE	; 254
    390a:	82 e0       	ldi	r24, 0x02	; 2
    390c:	01 e0       	ldi	r16, 0x01	; 1
    390e:	08 0f       	add	r16, r24
    3910:	f3 01       	movw	r30, r6
    3912:	e8 0f       	add	r30, r24
    3914:	f1 1d       	adc	r31, r1
    3916:	80 81       	ld	r24, Z
    3918:	b7 01       	movw	r22, r14
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3920:	80 2f       	mov	r24, r16
    3922:	01 13       	cpse	r16, r17
    3924:	f3 cf       	rjmp	.-26     	; 0x390c <vfprintf+0x370>
    3926:	e6 cf       	rjmp	.-52     	; 0x38f4 <vfprintf+0x358>
    3928:	85 e4       	ldi	r24, 0x45	; 69
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	b7 01       	movw	r22, r14
    392e:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3932:	d7 fc       	sbrc	r13, 7
    3934:	06 c0       	rjmp	.+12     	; 0x3942 <vfprintf+0x3a6>
    3936:	c1 14       	cp	r12, r1
    3938:	d1 04       	cpc	r13, r1
    393a:	41 f4       	brne	.+16     	; 0x394c <vfprintf+0x3b0>
    393c:	ec 85       	ldd	r30, Y+12	; 0x0c
    393e:	e4 ff       	sbrs	r30, 4
    3940:	05 c0       	rjmp	.+10     	; 0x394c <vfprintf+0x3b0>
    3942:	d1 94       	neg	r13
    3944:	c1 94       	neg	r12
    3946:	d1 08       	sbc	r13, r1
    3948:	8d e2       	ldi	r24, 0x2D	; 45
    394a:	01 c0       	rjmp	.+2      	; 0x394e <vfprintf+0x3b2>
    394c:	8b e2       	ldi	r24, 0x2B	; 43
    394e:	b7 01       	movw	r22, r14
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3956:	80 e3       	ldi	r24, 0x30	; 48
    3958:	2a e0       	ldi	r18, 0x0A	; 10
    395a:	c2 16       	cp	r12, r18
    395c:	d1 04       	cpc	r13, r1
    395e:	2c f0       	brlt	.+10     	; 0x396a <vfprintf+0x3ce>
    3960:	8f 5f       	subi	r24, 0xFF	; 255
    3962:	fa e0       	ldi	r31, 0x0A	; 10
    3964:	cf 1a       	sub	r12, r31
    3966:	d1 08       	sbc	r13, r1
    3968:	f7 cf       	rjmp	.-18     	; 0x3958 <vfprintf+0x3bc>
    396a:	b7 01       	movw	r22, r14
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3972:	b7 01       	movw	r22, r14
    3974:	c6 01       	movw	r24, r12
    3976:	c0 96       	adiw	r24, 0x30	; 48
    3978:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    397c:	54 c1       	rjmp	.+680    	; 0x3c26 <vfprintf+0x68a>
    397e:	83 36       	cpi	r24, 0x63	; 99
    3980:	31 f0       	breq	.+12     	; 0x398e <vfprintf+0x3f2>
    3982:	83 37       	cpi	r24, 0x73	; 115
    3984:	79 f0       	breq	.+30     	; 0x39a4 <vfprintf+0x408>
    3986:	83 35       	cpi	r24, 0x53	; 83
    3988:	09 f0       	breq	.+2      	; 0x398c <vfprintf+0x3f0>
    398a:	56 c0       	rjmp	.+172    	; 0x3a38 <vfprintf+0x49c>
    398c:	20 c0       	rjmp	.+64     	; 0x39ce <vfprintf+0x432>
    398e:	56 01       	movw	r10, r12
    3990:	32 e0       	ldi	r19, 0x02	; 2
    3992:	a3 0e       	add	r10, r19
    3994:	b1 1c       	adc	r11, r1
    3996:	f6 01       	movw	r30, r12
    3998:	80 81       	ld	r24, Z
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	01 e0       	ldi	r16, 0x01	; 1
    399e:	10 e0       	ldi	r17, 0x00	; 0
    39a0:	63 01       	movw	r12, r6
    39a2:	12 c0       	rjmp	.+36     	; 0x39c8 <vfprintf+0x42c>
    39a4:	56 01       	movw	r10, r12
    39a6:	f2 e0       	ldi	r31, 0x02	; 2
    39a8:	af 0e       	add	r10, r31
    39aa:	b1 1c       	adc	r11, r1
    39ac:	f6 01       	movw	r30, r12
    39ae:	c0 80       	ld	r12, Z
    39b0:	d1 80       	ldd	r13, Z+1	; 0x01
    39b2:	96 fe       	sbrs	r9, 6
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <vfprintf+0x420>
    39b6:	61 2f       	mov	r22, r17
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <vfprintf+0x424>
    39bc:	6f ef       	ldi	r22, 0xFF	; 255
    39be:	7f ef       	ldi	r23, 0xFF	; 255
    39c0:	c6 01       	movw	r24, r12
    39c2:	0e 94 21 20 	call	0x4042	; 0x4042 <strnlen>
    39c6:	8c 01       	movw	r16, r24
    39c8:	f9 2d       	mov	r31, r9
    39ca:	ff 77       	andi	r31, 0x7F	; 127
    39cc:	14 c0       	rjmp	.+40     	; 0x39f6 <vfprintf+0x45a>
    39ce:	56 01       	movw	r10, r12
    39d0:	22 e0       	ldi	r18, 0x02	; 2
    39d2:	a2 0e       	add	r10, r18
    39d4:	b1 1c       	adc	r11, r1
    39d6:	f6 01       	movw	r30, r12
    39d8:	c0 80       	ld	r12, Z
    39da:	d1 80       	ldd	r13, Z+1	; 0x01
    39dc:	96 fe       	sbrs	r9, 6
    39de:	03 c0       	rjmp	.+6      	; 0x39e6 <vfprintf+0x44a>
    39e0:	61 2f       	mov	r22, r17
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <vfprintf+0x44e>
    39e6:	6f ef       	ldi	r22, 0xFF	; 255
    39e8:	7f ef       	ldi	r23, 0xFF	; 255
    39ea:	c6 01       	movw	r24, r12
    39ec:	0e 94 04 20 	call	0x4008	; 0x4008 <strnlen_P>
    39f0:	8c 01       	movw	r16, r24
    39f2:	f9 2d       	mov	r31, r9
    39f4:	f0 68       	ori	r31, 0x80	; 128
    39f6:	9f 2e       	mov	r9, r31
    39f8:	f3 fd       	sbrc	r31, 3
    39fa:	1a c0       	rjmp	.+52     	; 0x3a30 <vfprintf+0x494>
    39fc:	85 2d       	mov	r24, r5
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	08 17       	cp	r16, r24
    3a02:	19 07       	cpc	r17, r25
    3a04:	a8 f4       	brcc	.+42     	; 0x3a30 <vfprintf+0x494>
    3a06:	b7 01       	movw	r22, r14
    3a08:	80 e2       	ldi	r24, 0x20	; 32
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3a10:	5a 94       	dec	r5
    3a12:	f4 cf       	rjmp	.-24     	; 0x39fc <vfprintf+0x460>
    3a14:	f6 01       	movw	r30, r12
    3a16:	97 fc       	sbrc	r9, 7
    3a18:	85 91       	lpm	r24, Z+
    3a1a:	97 fe       	sbrs	r9, 7
    3a1c:	81 91       	ld	r24, Z+
    3a1e:	6f 01       	movw	r12, r30
    3a20:	b7 01       	movw	r22, r14
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3a28:	51 10       	cpse	r5, r1
    3a2a:	5a 94       	dec	r5
    3a2c:	01 50       	subi	r16, 0x01	; 1
    3a2e:	11 09       	sbc	r17, r1
    3a30:	01 15       	cp	r16, r1
    3a32:	11 05       	cpc	r17, r1
    3a34:	79 f7       	brne	.-34     	; 0x3a14 <vfprintf+0x478>
    3a36:	f7 c0       	rjmp	.+494    	; 0x3c26 <vfprintf+0x68a>
    3a38:	84 36       	cpi	r24, 0x64	; 100
    3a3a:	11 f0       	breq	.+4      	; 0x3a40 <vfprintf+0x4a4>
    3a3c:	89 36       	cpi	r24, 0x69	; 105
    3a3e:	61 f5       	brne	.+88     	; 0x3a98 <vfprintf+0x4fc>
    3a40:	56 01       	movw	r10, r12
    3a42:	97 fe       	sbrs	r9, 7
    3a44:	09 c0       	rjmp	.+18     	; 0x3a58 <vfprintf+0x4bc>
    3a46:	24 e0       	ldi	r18, 0x04	; 4
    3a48:	a2 0e       	add	r10, r18
    3a4a:	b1 1c       	adc	r11, r1
    3a4c:	f6 01       	movw	r30, r12
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	0a c0       	rjmp	.+20     	; 0x3a6c <vfprintf+0x4d0>
    3a58:	f2 e0       	ldi	r31, 0x02	; 2
    3a5a:	af 0e       	add	r10, r31
    3a5c:	b1 1c       	adc	r11, r1
    3a5e:	f6 01       	movw	r30, r12
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	07 2e       	mov	r0, r23
    3a66:	00 0c       	add	r0, r0
    3a68:	88 0b       	sbc	r24, r24
    3a6a:	99 0b       	sbc	r25, r25
    3a6c:	f9 2d       	mov	r31, r9
    3a6e:	ff 76       	andi	r31, 0x6F	; 111
    3a70:	9f 2e       	mov	r9, r31
    3a72:	97 ff       	sbrs	r25, 7
    3a74:	09 c0       	rjmp	.+18     	; 0x3a88 <vfprintf+0x4ec>
    3a76:	90 95       	com	r25
    3a78:	80 95       	com	r24
    3a7a:	70 95       	com	r23
    3a7c:	61 95       	neg	r22
    3a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a80:	8f 4f       	sbci	r24, 0xFF	; 255
    3a82:	9f 4f       	sbci	r25, 0xFF	; 255
    3a84:	f0 68       	ori	r31, 0x80	; 128
    3a86:	9f 2e       	mov	r9, r31
    3a88:	2a e0       	ldi	r18, 0x0A	; 10
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	a3 01       	movw	r20, r6
    3a8e:	0e 94 9f 20 	call	0x413e	; 0x413e <__ultoa_invert>
    3a92:	c8 2e       	mov	r12, r24
    3a94:	c6 18       	sub	r12, r6
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <vfprintf+0x57a>
    3a98:	09 2d       	mov	r16, r9
    3a9a:	85 37       	cpi	r24, 0x75	; 117
    3a9c:	21 f4       	brne	.+8      	; 0x3aa6 <vfprintf+0x50a>
    3a9e:	0f 7e       	andi	r16, 0xEF	; 239
    3aa0:	2a e0       	ldi	r18, 0x0A	; 10
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	1d c0       	rjmp	.+58     	; 0x3ae0 <vfprintf+0x544>
    3aa6:	09 7f       	andi	r16, 0xF9	; 249
    3aa8:	8f 36       	cpi	r24, 0x6F	; 111
    3aaa:	91 f0       	breq	.+36     	; 0x3ad0 <vfprintf+0x534>
    3aac:	18 f4       	brcc	.+6      	; 0x3ab4 <vfprintf+0x518>
    3aae:	88 35       	cpi	r24, 0x58	; 88
    3ab0:	59 f0       	breq	.+22     	; 0x3ac8 <vfprintf+0x52c>
    3ab2:	c3 c0       	rjmp	.+390    	; 0x3c3a <vfprintf+0x69e>
    3ab4:	80 37       	cpi	r24, 0x70	; 112
    3ab6:	19 f0       	breq	.+6      	; 0x3abe <vfprintf+0x522>
    3ab8:	88 37       	cpi	r24, 0x78	; 120
    3aba:	11 f0       	breq	.+4      	; 0x3ac0 <vfprintf+0x524>
    3abc:	be c0       	rjmp	.+380    	; 0x3c3a <vfprintf+0x69e>
    3abe:	00 61       	ori	r16, 0x10	; 16
    3ac0:	04 ff       	sbrs	r16, 4
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <vfprintf+0x53a>
    3ac4:	04 60       	ori	r16, 0x04	; 4
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <vfprintf+0x53a>
    3ac8:	94 fe       	sbrs	r9, 4
    3aca:	08 c0       	rjmp	.+16     	; 0x3adc <vfprintf+0x540>
    3acc:	06 60       	ori	r16, 0x06	; 6
    3ace:	06 c0       	rjmp	.+12     	; 0x3adc <vfprintf+0x540>
    3ad0:	28 e0       	ldi	r18, 0x08	; 8
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	05 c0       	rjmp	.+10     	; 0x3ae0 <vfprintf+0x544>
    3ad6:	20 e1       	ldi	r18, 0x10	; 16
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <vfprintf+0x544>
    3adc:	20 e1       	ldi	r18, 0x10	; 16
    3ade:	32 e0       	ldi	r19, 0x02	; 2
    3ae0:	56 01       	movw	r10, r12
    3ae2:	07 ff       	sbrs	r16, 7
    3ae4:	09 c0       	rjmp	.+18     	; 0x3af8 <vfprintf+0x55c>
    3ae6:	84 e0       	ldi	r24, 0x04	; 4
    3ae8:	a8 0e       	add	r10, r24
    3aea:	b1 1c       	adc	r11, r1
    3aec:	f6 01       	movw	r30, r12
    3aee:	60 81       	ld	r22, Z
    3af0:	71 81       	ldd	r23, Z+1	; 0x01
    3af2:	82 81       	ldd	r24, Z+2	; 0x02
    3af4:	93 81       	ldd	r25, Z+3	; 0x03
    3af6:	08 c0       	rjmp	.+16     	; 0x3b08 <vfprintf+0x56c>
    3af8:	f2 e0       	ldi	r31, 0x02	; 2
    3afa:	af 0e       	add	r10, r31
    3afc:	b1 1c       	adc	r11, r1
    3afe:	f6 01       	movw	r30, r12
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a3 01       	movw	r20, r6
    3b0a:	0e 94 9f 20 	call	0x413e	; 0x413e <__ultoa_invert>
    3b0e:	c8 2e       	mov	r12, r24
    3b10:	c6 18       	sub	r12, r6
    3b12:	0f 77       	andi	r16, 0x7F	; 127
    3b14:	90 2e       	mov	r9, r16
    3b16:	96 fe       	sbrs	r9, 6
    3b18:	0b c0       	rjmp	.+22     	; 0x3b30 <vfprintf+0x594>
    3b1a:	09 2d       	mov	r16, r9
    3b1c:	0e 7f       	andi	r16, 0xFE	; 254
    3b1e:	c1 16       	cp	r12, r17
    3b20:	50 f4       	brcc	.+20     	; 0x3b36 <vfprintf+0x59a>
    3b22:	94 fe       	sbrs	r9, 4
    3b24:	0a c0       	rjmp	.+20     	; 0x3b3a <vfprintf+0x59e>
    3b26:	92 fc       	sbrc	r9, 2
    3b28:	08 c0       	rjmp	.+16     	; 0x3b3a <vfprintf+0x59e>
    3b2a:	09 2d       	mov	r16, r9
    3b2c:	0e 7e       	andi	r16, 0xEE	; 238
    3b2e:	05 c0       	rjmp	.+10     	; 0x3b3a <vfprintf+0x59e>
    3b30:	dc 2c       	mov	r13, r12
    3b32:	09 2d       	mov	r16, r9
    3b34:	03 c0       	rjmp	.+6      	; 0x3b3c <vfprintf+0x5a0>
    3b36:	dc 2c       	mov	r13, r12
    3b38:	01 c0       	rjmp	.+2      	; 0x3b3c <vfprintf+0x5a0>
    3b3a:	d1 2e       	mov	r13, r17
    3b3c:	04 ff       	sbrs	r16, 4
    3b3e:	0d c0       	rjmp	.+26     	; 0x3b5a <vfprintf+0x5be>
    3b40:	fe 01       	movw	r30, r28
    3b42:	ec 0d       	add	r30, r12
    3b44:	f1 1d       	adc	r31, r1
    3b46:	80 81       	ld	r24, Z
    3b48:	80 33       	cpi	r24, 0x30	; 48
    3b4a:	11 f4       	brne	.+4      	; 0x3b50 <vfprintf+0x5b4>
    3b4c:	09 7e       	andi	r16, 0xE9	; 233
    3b4e:	09 c0       	rjmp	.+18     	; 0x3b62 <vfprintf+0x5c6>
    3b50:	02 ff       	sbrs	r16, 2
    3b52:	06 c0       	rjmp	.+12     	; 0x3b60 <vfprintf+0x5c4>
    3b54:	d3 94       	inc	r13
    3b56:	d3 94       	inc	r13
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <vfprintf+0x5c6>
    3b5a:	80 2f       	mov	r24, r16
    3b5c:	86 78       	andi	r24, 0x86	; 134
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <vfprintf+0x5c6>
    3b60:	d3 94       	inc	r13
    3b62:	03 fd       	sbrc	r16, 3
    3b64:	11 c0       	rjmp	.+34     	; 0x3b88 <vfprintf+0x5ec>
    3b66:	00 ff       	sbrs	r16, 0
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <vfprintf+0x5da>
    3b6a:	1c 2d       	mov	r17, r12
    3b6c:	d5 14       	cp	r13, r5
    3b6e:	80 f4       	brcc	.+32     	; 0x3b90 <vfprintf+0x5f4>
    3b70:	15 0d       	add	r17, r5
    3b72:	1d 19       	sub	r17, r13
    3b74:	0d c0       	rjmp	.+26     	; 0x3b90 <vfprintf+0x5f4>
    3b76:	d5 14       	cp	r13, r5
    3b78:	58 f4       	brcc	.+22     	; 0x3b90 <vfprintf+0x5f4>
    3b7a:	b7 01       	movw	r22, r14
    3b7c:	80 e2       	ldi	r24, 0x20	; 32
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3b84:	d3 94       	inc	r13
    3b86:	f7 cf       	rjmp	.-18     	; 0x3b76 <vfprintf+0x5da>
    3b88:	d5 14       	cp	r13, r5
    3b8a:	10 f4       	brcc	.+4      	; 0x3b90 <vfprintf+0x5f4>
    3b8c:	5d 18       	sub	r5, r13
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <vfprintf+0x5f6>
    3b90:	51 2c       	mov	r5, r1
    3b92:	04 ff       	sbrs	r16, 4
    3b94:	10 c0       	rjmp	.+32     	; 0x3bb6 <vfprintf+0x61a>
    3b96:	b7 01       	movw	r22, r14
    3b98:	80 e3       	ldi	r24, 0x30	; 48
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3ba0:	02 ff       	sbrs	r16, 2
    3ba2:	17 c0       	rjmp	.+46     	; 0x3bd2 <vfprintf+0x636>
    3ba4:	01 fd       	sbrc	r16, 1
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <vfprintf+0x612>
    3ba8:	88 e7       	ldi	r24, 0x78	; 120
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <vfprintf+0x616>
    3bae:	88 e5       	ldi	r24, 0x58	; 88
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	b7 01       	movw	r22, r14
    3bb4:	0c c0       	rjmp	.+24     	; 0x3bce <vfprintf+0x632>
    3bb6:	80 2f       	mov	r24, r16
    3bb8:	86 78       	andi	r24, 0x86	; 134
    3bba:	59 f0       	breq	.+22     	; 0x3bd2 <vfprintf+0x636>
    3bbc:	01 ff       	sbrs	r16, 1
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <vfprintf+0x628>
    3bc0:	8b e2       	ldi	r24, 0x2B	; 43
    3bc2:	01 c0       	rjmp	.+2      	; 0x3bc6 <vfprintf+0x62a>
    3bc4:	80 e2       	ldi	r24, 0x20	; 32
    3bc6:	07 fd       	sbrc	r16, 7
    3bc8:	8d e2       	ldi	r24, 0x2D	; 45
    3bca:	b7 01       	movw	r22, r14
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3bd2:	c1 16       	cp	r12, r17
    3bd4:	38 f4       	brcc	.+14     	; 0x3be4 <vfprintf+0x648>
    3bd6:	b7 01       	movw	r22, r14
    3bd8:	80 e3       	ldi	r24, 0x30	; 48
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3be0:	11 50       	subi	r17, 0x01	; 1
    3be2:	f7 cf       	rjmp	.-18     	; 0x3bd2 <vfprintf+0x636>
    3be4:	ca 94       	dec	r12
    3be6:	f3 01       	movw	r30, r6
    3be8:	ec 0d       	add	r30, r12
    3bea:	f1 1d       	adc	r31, r1
    3bec:	80 81       	ld	r24, Z
    3bee:	b7 01       	movw	r22, r14
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3bf6:	c1 10       	cpse	r12, r1
    3bf8:	f5 cf       	rjmp	.-22     	; 0x3be4 <vfprintf+0x648>
    3bfa:	15 c0       	rjmp	.+42     	; 0x3c26 <vfprintf+0x68a>
    3bfc:	f4 e0       	ldi	r31, 0x04	; 4
    3bfe:	f5 15       	cp	r31, r5
    3c00:	60 f5       	brcc	.+88     	; 0x3c5a <vfprintf+0x6be>
    3c02:	84 e0       	ldi	r24, 0x04	; 4
    3c04:	58 1a       	sub	r5, r24
    3c06:	93 fe       	sbrs	r9, 3
    3c08:	1f c0       	rjmp	.+62     	; 0x3c48 <vfprintf+0x6ac>
    3c0a:	01 11       	cpse	r16, r1
    3c0c:	27 c0       	rjmp	.+78     	; 0x3c5c <vfprintf+0x6c0>
    3c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c10:	23 ff       	sbrs	r18, 3
    3c12:	2a c0       	rjmp	.+84     	; 0x3c68 <vfprintf+0x6cc>
    3c14:	08 e2       	ldi	r16, 0x28	; 40
    3c16:	11 e0       	ldi	r17, 0x01	; 1
    3c18:	39 2d       	mov	r19, r9
    3c1a:	30 71       	andi	r19, 0x10	; 16
    3c1c:	93 2e       	mov	r9, r19
    3c1e:	f8 01       	movw	r30, r16
    3c20:	84 91       	lpm	r24, Z
    3c22:	81 11       	cpse	r24, r1
    3c24:	24 c0       	rjmp	.+72     	; 0x3c6e <vfprintf+0x6d2>
    3c26:	55 20       	and	r5, r5
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <vfprintf+0x690>
    3c2a:	e4 cc       	rjmp	.-1592   	; 0x35f4 <vfprintf+0x58>
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	80 e2       	ldi	r24, 0x20	; 32
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3c36:	5a 94       	dec	r5
    3c38:	f6 cf       	rjmp	.-20     	; 0x3c26 <vfprintf+0x68a>
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	86 81       	ldd	r24, Z+6	; 0x06
    3c3e:	97 81       	ldd	r25, Z+7	; 0x07
    3c40:	26 c0       	rjmp	.+76     	; 0x3c8e <vfprintf+0x6f2>
    3c42:	8f ef       	ldi	r24, 0xFF	; 255
    3c44:	9f ef       	ldi	r25, 0xFF	; 255
    3c46:	23 c0       	rjmp	.+70     	; 0x3c8e <vfprintf+0x6f2>
    3c48:	b7 01       	movw	r22, r14
    3c4a:	80 e2       	ldi	r24, 0x20	; 32
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3c52:	5a 94       	dec	r5
    3c54:	51 10       	cpse	r5, r1
    3c56:	f8 cf       	rjmp	.-16     	; 0x3c48 <vfprintf+0x6ac>
    3c58:	d8 cf       	rjmp	.-80     	; 0x3c0a <vfprintf+0x66e>
    3c5a:	51 2c       	mov	r5, r1
    3c5c:	b7 01       	movw	r22, r14
    3c5e:	80 2f       	mov	r24, r16
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3c66:	d3 cf       	rjmp	.-90     	; 0x3c0e <vfprintf+0x672>
    3c68:	0c e2       	ldi	r16, 0x2C	; 44
    3c6a:	11 e0       	ldi	r17, 0x01	; 1
    3c6c:	d5 cf       	rjmp	.-86     	; 0x3c18 <vfprintf+0x67c>
    3c6e:	91 10       	cpse	r9, r1
    3c70:	80 52       	subi	r24, 0x20	; 32
    3c72:	b7 01       	movw	r22, r14
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 41 20 	call	0x4082	; 0x4082 <fputc>
    3c7a:	0f 5f       	subi	r16, 0xFF	; 255
    3c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7e:	cf cf       	rjmp	.-98     	; 0x3c1e <vfprintf+0x682>
    3c80:	23 e0       	ldi	r18, 0x03	; 3
    3c82:	25 15       	cp	r18, r5
    3c84:	10 f4       	brcc	.+4      	; 0x3c8a <vfprintf+0x6ee>
    3c86:	83 e0       	ldi	r24, 0x03	; 3
    3c88:	bd cf       	rjmp	.-134    	; 0x3c04 <vfprintf+0x668>
    3c8a:	51 2c       	mov	r5, r1
    3c8c:	c0 cf       	rjmp	.-128    	; 0x3c0e <vfprintf+0x672>
    3c8e:	60 96       	adiw	r28, 0x10	; 16
    3c90:	e2 e1       	ldi	r30, 0x12	; 18
    3c92:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__>

00003c96 <__divmodhi4>:
    3c96:	97 fb       	bst	r25, 7
    3c98:	07 2e       	mov	r0, r23
    3c9a:	16 f4       	brtc	.+4      	; 0x3ca0 <__divmodhi4+0xa>
    3c9c:	00 94       	com	r0
    3c9e:	07 d0       	rcall	.+14     	; 0x3cae <__divmodhi4_neg1>
    3ca0:	77 fd       	sbrc	r23, 7
    3ca2:	09 d0       	rcall	.+18     	; 0x3cb6 <__divmodhi4_neg2>
    3ca4:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <__udivmodhi4>
    3ca8:	07 fc       	sbrc	r0, 7
    3caa:	05 d0       	rcall	.+10     	; 0x3cb6 <__divmodhi4_neg2>
    3cac:	3e f4       	brtc	.+14     	; 0x3cbc <__divmodhi4_exit>

00003cae <__divmodhi4_neg1>:
    3cae:	90 95       	com	r25
    3cb0:	81 95       	neg	r24
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	08 95       	ret

00003cb6 <__divmodhi4_neg2>:
    3cb6:	70 95       	com	r23
    3cb8:	61 95       	neg	r22
    3cba:	7f 4f       	sbci	r23, 0xFF	; 255

00003cbc <__divmodhi4_exit>:
    3cbc:	08 95       	ret

00003cbe <__divmodsi4>:
    3cbe:	05 2e       	mov	r0, r21
    3cc0:	97 fb       	bst	r25, 7
    3cc2:	1e f4       	brtc	.+6      	; 0x3cca <__divmodsi4+0xc>
    3cc4:	00 94       	com	r0
    3cc6:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__negsi2>
    3cca:	57 fd       	sbrc	r21, 7
    3ccc:	07 d0       	rcall	.+14     	; 0x3cdc <__divmodsi4_neg2>
    3cce:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <__udivmodsi4>
    3cd2:	07 fc       	sbrc	r0, 7
    3cd4:	03 d0       	rcall	.+6      	; 0x3cdc <__divmodsi4_neg2>
    3cd6:	4e f4       	brtc	.+18     	; 0x3cea <__divmodsi4_exit>
    3cd8:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__negsi2>

00003cdc <__divmodsi4_neg2>:
    3cdc:	50 95       	com	r21
    3cde:	40 95       	com	r20
    3ce0:	30 95       	com	r19
    3ce2:	21 95       	neg	r18
    3ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce8:	5f 4f       	sbci	r21, 0xFF	; 255

00003cea <__divmodsi4_exit>:
    3cea:	08 95       	ret

00003cec <__negsi2>:
    3cec:	90 95       	com	r25
    3cee:	80 95       	com	r24
    3cf0:	70 95       	com	r23
    3cf2:	61 95       	neg	r22
    3cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfa:	08 95       	ret

00003cfc <__tablejump2__>:
    3cfc:	ee 0f       	add	r30, r30
    3cfe:	ff 1f       	adc	r31, r31
    3d00:	05 90       	lpm	r0, Z+
    3d02:	f4 91       	lpm	r31, Z
    3d04:	e0 2d       	mov	r30, r0
    3d06:	09 94       	ijmp

00003d08 <__muluhisi3>:
    3d08:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__umulhisi3>
    3d0c:	a5 9f       	mul	r26, r21
    3d0e:	90 0d       	add	r25, r0
    3d10:	b4 9f       	mul	r27, r20
    3d12:	90 0d       	add	r25, r0
    3d14:	a4 9f       	mul	r26, r20
    3d16:	80 0d       	add	r24, r0
    3d18:	91 1d       	adc	r25, r1
    3d1a:	11 24       	eor	r1, r1
    3d1c:	08 95       	ret

00003d1e <__prologue_saves__>:
    3d1e:	2f 92       	push	r2
    3d20:	3f 92       	push	r3
    3d22:	4f 92       	push	r4
    3d24:	5f 92       	push	r5
    3d26:	6f 92       	push	r6
    3d28:	7f 92       	push	r7
    3d2a:	8f 92       	push	r8
    3d2c:	9f 92       	push	r9
    3d2e:	af 92       	push	r10
    3d30:	bf 92       	push	r11
    3d32:	cf 92       	push	r12
    3d34:	df 92       	push	r13
    3d36:	ef 92       	push	r14
    3d38:	ff 92       	push	r15
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	ca 1b       	sub	r28, r26
    3d48:	db 0b       	sbc	r29, r27
    3d4a:	cd bf       	out	0x3d, r28	; 61
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	09 94       	ijmp

00003d50 <__epilogue_restores__>:
    3d50:	2a 88       	ldd	r2, Y+18	; 0x12
    3d52:	39 88       	ldd	r3, Y+17	; 0x11
    3d54:	48 88       	ldd	r4, Y+16	; 0x10
    3d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d62:	b9 84       	ldd	r11, Y+9	; 0x09
    3d64:	c8 84       	ldd	r12, Y+8	; 0x08
    3d66:	df 80       	ldd	r13, Y+7	; 0x07
    3d68:	ee 80       	ldd	r14, Y+6	; 0x06
    3d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3d70:	aa 81       	ldd	r26, Y+2	; 0x02
    3d72:	b9 81       	ldd	r27, Y+1	; 0x01
    3d74:	ce 0f       	add	r28, r30
    3d76:	d1 1d       	adc	r29, r1
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	ed 01       	movw	r28, r26
    3d7e:	08 95       	ret

00003d80 <__udivmodhi4>:
    3d80:	aa 1b       	sub	r26, r26
    3d82:	bb 1b       	sub	r27, r27
    3d84:	51 e1       	ldi	r21, 0x11	; 17
    3d86:	07 c0       	rjmp	.+14     	; 0x3d96 <__udivmodhi4_ep>

00003d88 <__udivmodhi4_loop>:
    3d88:	aa 1f       	adc	r26, r26
    3d8a:	bb 1f       	adc	r27, r27
    3d8c:	a6 17       	cp	r26, r22
    3d8e:	b7 07       	cpc	r27, r23
    3d90:	10 f0       	brcs	.+4      	; 0x3d96 <__udivmodhi4_ep>
    3d92:	a6 1b       	sub	r26, r22
    3d94:	b7 0b       	sbc	r27, r23

00003d96 <__udivmodhi4_ep>:
    3d96:	88 1f       	adc	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	5a 95       	dec	r21
    3d9c:	a9 f7       	brne	.-22     	; 0x3d88 <__udivmodhi4_loop>
    3d9e:	80 95       	com	r24
    3da0:	90 95       	com	r25
    3da2:	bc 01       	movw	r22, r24
    3da4:	cd 01       	movw	r24, r26
    3da6:	08 95       	ret

00003da8 <__udivmodsi4>:
    3da8:	a1 e2       	ldi	r26, 0x21	; 33
    3daa:	1a 2e       	mov	r1, r26
    3dac:	aa 1b       	sub	r26, r26
    3dae:	bb 1b       	sub	r27, r27
    3db0:	fd 01       	movw	r30, r26
    3db2:	0d c0       	rjmp	.+26     	; 0x3dce <__udivmodsi4_ep>

00003db4 <__udivmodsi4_loop>:
    3db4:	aa 1f       	adc	r26, r26
    3db6:	bb 1f       	adc	r27, r27
    3db8:	ee 1f       	adc	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	a2 17       	cp	r26, r18
    3dbe:	b3 07       	cpc	r27, r19
    3dc0:	e4 07       	cpc	r30, r20
    3dc2:	f5 07       	cpc	r31, r21
    3dc4:	20 f0       	brcs	.+8      	; 0x3dce <__udivmodsi4_ep>
    3dc6:	a2 1b       	sub	r26, r18
    3dc8:	b3 0b       	sbc	r27, r19
    3dca:	e4 0b       	sbc	r30, r20
    3dcc:	f5 0b       	sbc	r31, r21

00003dce <__udivmodsi4_ep>:
    3dce:	66 1f       	adc	r22, r22
    3dd0:	77 1f       	adc	r23, r23
    3dd2:	88 1f       	adc	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	1a 94       	dec	r1
    3dd8:	69 f7       	brne	.-38     	; 0x3db4 <__udivmodsi4_loop>
    3dda:	60 95       	com	r22
    3ddc:	70 95       	com	r23
    3dde:	80 95       	com	r24
    3de0:	90 95       	com	r25
    3de2:	9b 01       	movw	r18, r22
    3de4:	ac 01       	movw	r20, r24
    3de6:	bd 01       	movw	r22, r26
    3de8:	cf 01       	movw	r24, r30
    3dea:	08 95       	ret

00003dec <__umulhisi3>:
    3dec:	a2 9f       	mul	r26, r18
    3dee:	b0 01       	movw	r22, r0
    3df0:	b3 9f       	mul	r27, r19
    3df2:	c0 01       	movw	r24, r0
    3df4:	a3 9f       	mul	r26, r19
    3df6:	70 0d       	add	r23, r0
    3df8:	81 1d       	adc	r24, r1
    3dfa:	11 24       	eor	r1, r1
    3dfc:	91 1d       	adc	r25, r1
    3dfe:	b2 9f       	mul	r27, r18
    3e00:	70 0d       	add	r23, r0
    3e02:	81 1d       	adc	r24, r1
    3e04:	11 24       	eor	r1, r1
    3e06:	91 1d       	adc	r25, r1
    3e08:	08 95       	ret

00003e0a <atol>:
    3e0a:	1f 93       	push	r17
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	99 27       	eor	r25, r25
    3e10:	88 27       	eor	r24, r24
    3e12:	bc 01       	movw	r22, r24
    3e14:	e8 94       	clt
    3e16:	11 91       	ld	r17, Z+
    3e18:	10 32       	cpi	r17, 0x20	; 32
    3e1a:	e9 f3       	breq	.-6      	; 0x3e16 <atol+0xc>
    3e1c:	19 30       	cpi	r17, 0x09	; 9
    3e1e:	10 f0       	brcs	.+4      	; 0x3e24 <atol+0x1a>
    3e20:	1e 30       	cpi	r17, 0x0E	; 14
    3e22:	c8 f3       	brcs	.-14     	; 0x3e16 <atol+0xc>
    3e24:	1b 32       	cpi	r17, 0x2B	; 43
    3e26:	51 f0       	breq	.+20     	; 0x3e3c <atol+0x32>
    3e28:	1d 32       	cpi	r17, 0x2D	; 45
    3e2a:	49 f4       	brne	.+18     	; 0x3e3e <atol+0x34>
    3e2c:	68 94       	set
    3e2e:	06 c0       	rjmp	.+12     	; 0x3e3c <atol+0x32>
    3e30:	0e 94 2c 20 	call	0x4058	; 0x4058 <__mulsi_const_10>
    3e34:	61 0f       	add	r22, r17
    3e36:	71 1d       	adc	r23, r1
    3e38:	81 1d       	adc	r24, r1
    3e3a:	91 1d       	adc	r25, r1
    3e3c:	11 91       	ld	r17, Z+
    3e3e:	10 53       	subi	r17, 0x30	; 48
    3e40:	1a 30       	cpi	r17, 0x0A	; 10
    3e42:	b0 f3       	brcs	.-20     	; 0x3e30 <atol+0x26>
    3e44:	3e f4       	brtc	.+14     	; 0x3e54 <atol+0x4a>
    3e46:	90 95       	com	r25
    3e48:	80 95       	com	r24
    3e4a:	70 95       	com	r23
    3e4c:	61 95       	neg	r22
    3e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e50:	8f 4f       	sbci	r24, 0xFF	; 255
    3e52:	9f 4f       	sbci	r25, 0xFF	; 255
    3e54:	1f 91       	pop	r17
    3e56:	08 95       	ret

00003e58 <__ftoa_engine>:
    3e58:	28 30       	cpi	r18, 0x08	; 8
    3e5a:	08 f0       	brcs	.+2      	; 0x3e5e <__ftoa_engine+0x6>
    3e5c:	27 e0       	ldi	r18, 0x07	; 7
    3e5e:	33 27       	eor	r19, r19
    3e60:	da 01       	movw	r26, r20
    3e62:	99 0f       	add	r25, r25
    3e64:	31 1d       	adc	r19, r1
    3e66:	87 fd       	sbrc	r24, 7
    3e68:	91 60       	ori	r25, 0x01	; 1
    3e6a:	00 96       	adiw	r24, 0x00	; 0
    3e6c:	61 05       	cpc	r22, r1
    3e6e:	71 05       	cpc	r23, r1
    3e70:	39 f4       	brne	.+14     	; 0x3e80 <__ftoa_engine+0x28>
    3e72:	32 60       	ori	r19, 0x02	; 2
    3e74:	2e 5f       	subi	r18, 0xFE	; 254
    3e76:	3d 93       	st	X+, r19
    3e78:	30 e3       	ldi	r19, 0x30	; 48
    3e7a:	2a 95       	dec	r18
    3e7c:	e1 f7       	brne	.-8      	; 0x3e76 <__ftoa_engine+0x1e>
    3e7e:	08 95       	ret
    3e80:	9f 3f       	cpi	r25, 0xFF	; 255
    3e82:	30 f0       	brcs	.+12     	; 0x3e90 <__ftoa_engine+0x38>
    3e84:	80 38       	cpi	r24, 0x80	; 128
    3e86:	71 05       	cpc	r23, r1
    3e88:	61 05       	cpc	r22, r1
    3e8a:	09 f0       	breq	.+2      	; 0x3e8e <__ftoa_engine+0x36>
    3e8c:	3c 5f       	subi	r19, 0xFC	; 252
    3e8e:	3c 5f       	subi	r19, 0xFC	; 252
    3e90:	3d 93       	st	X+, r19
    3e92:	91 30       	cpi	r25, 0x01	; 1
    3e94:	08 f0       	brcs	.+2      	; 0x3e98 <__ftoa_engine+0x40>
    3e96:	80 68       	ori	r24, 0x80	; 128
    3e98:	91 1d       	adc	r25, r1
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	1f 93       	push	r17
    3ea0:	0f 93       	push	r16
    3ea2:	ff 92       	push	r15
    3ea4:	ef 92       	push	r14
    3ea6:	19 2f       	mov	r17, r25
    3ea8:	98 7f       	andi	r25, 0xF8	; 248
    3eaa:	96 95       	lsr	r25
    3eac:	e9 2f       	mov	r30, r25
    3eae:	96 95       	lsr	r25
    3eb0:	96 95       	lsr	r25
    3eb2:	e9 0f       	add	r30, r25
    3eb4:	ff 27       	eor	r31, r31
    3eb6:	e6 57       	subi	r30, 0x76	; 118
    3eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eba:	99 27       	eor	r25, r25
    3ebc:	33 27       	eor	r19, r19
    3ebe:	ee 24       	eor	r14, r14
    3ec0:	ff 24       	eor	r15, r15
    3ec2:	a7 01       	movw	r20, r14
    3ec4:	e7 01       	movw	r28, r14
    3ec6:	05 90       	lpm	r0, Z+
    3ec8:	08 94       	sec
    3eca:	07 94       	ror	r0
    3ecc:	28 f4       	brcc	.+10     	; 0x3ed8 <__ftoa_engine+0x80>
    3ece:	36 0f       	add	r19, r22
    3ed0:	e7 1e       	adc	r14, r23
    3ed2:	f8 1e       	adc	r15, r24
    3ed4:	49 1f       	adc	r20, r25
    3ed6:	51 1d       	adc	r21, r1
    3ed8:	66 0f       	add	r22, r22
    3eda:	77 1f       	adc	r23, r23
    3edc:	88 1f       	adc	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	06 94       	lsr	r0
    3ee2:	a1 f7       	brne	.-24     	; 0x3ecc <__ftoa_engine+0x74>
    3ee4:	05 90       	lpm	r0, Z+
    3ee6:	07 94       	ror	r0
    3ee8:	28 f4       	brcc	.+10     	; 0x3ef4 <__ftoa_engine+0x9c>
    3eea:	e7 0e       	add	r14, r23
    3eec:	f8 1e       	adc	r15, r24
    3eee:	49 1f       	adc	r20, r25
    3ef0:	56 1f       	adc	r21, r22
    3ef2:	c1 1d       	adc	r28, r1
    3ef4:	77 0f       	add	r23, r23
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	99 1f       	adc	r25, r25
    3efa:	66 1f       	adc	r22, r22
    3efc:	06 94       	lsr	r0
    3efe:	a1 f7       	brne	.-24     	; 0x3ee8 <__ftoa_engine+0x90>
    3f00:	05 90       	lpm	r0, Z+
    3f02:	07 94       	ror	r0
    3f04:	28 f4       	brcc	.+10     	; 0x3f10 <__ftoa_engine+0xb8>
    3f06:	f8 0e       	add	r15, r24
    3f08:	49 1f       	adc	r20, r25
    3f0a:	56 1f       	adc	r21, r22
    3f0c:	c7 1f       	adc	r28, r23
    3f0e:	d1 1d       	adc	r29, r1
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	66 1f       	adc	r22, r22
    3f16:	77 1f       	adc	r23, r23
    3f18:	06 94       	lsr	r0
    3f1a:	a1 f7       	brne	.-24     	; 0x3f04 <__ftoa_engine+0xac>
    3f1c:	05 90       	lpm	r0, Z+
    3f1e:	07 94       	ror	r0
    3f20:	20 f4       	brcc	.+8      	; 0x3f2a <__ftoa_engine+0xd2>
    3f22:	49 0f       	add	r20, r25
    3f24:	56 1f       	adc	r21, r22
    3f26:	c7 1f       	adc	r28, r23
    3f28:	d8 1f       	adc	r29, r24
    3f2a:	99 0f       	add	r25, r25
    3f2c:	66 1f       	adc	r22, r22
    3f2e:	77 1f       	adc	r23, r23
    3f30:	88 1f       	adc	r24, r24
    3f32:	06 94       	lsr	r0
    3f34:	a9 f7       	brne	.-22     	; 0x3f20 <__ftoa_engine+0xc8>
    3f36:	84 91       	lpm	r24, Z
    3f38:	10 95       	com	r17
    3f3a:	17 70       	andi	r17, 0x07	; 7
    3f3c:	41 f0       	breq	.+16     	; 0x3f4e <__ftoa_engine+0xf6>
    3f3e:	d6 95       	lsr	r29
    3f40:	c7 95       	ror	r28
    3f42:	57 95       	ror	r21
    3f44:	47 95       	ror	r20
    3f46:	f7 94       	ror	r15
    3f48:	e7 94       	ror	r14
    3f4a:	1a 95       	dec	r17
    3f4c:	c1 f7       	brne	.-16     	; 0x3f3e <__ftoa_engine+0xe6>
    3f4e:	e0 e3       	ldi	r30, 0x30	; 48
    3f50:	f1 e0       	ldi	r31, 0x01	; 1
    3f52:	68 94       	set
    3f54:	15 90       	lpm	r1, Z+
    3f56:	15 91       	lpm	r17, Z+
    3f58:	35 91       	lpm	r19, Z+
    3f5a:	65 91       	lpm	r22, Z+
    3f5c:	95 91       	lpm	r25, Z+
    3f5e:	05 90       	lpm	r0, Z+
    3f60:	7f e2       	ldi	r23, 0x2F	; 47
    3f62:	73 95       	inc	r23
    3f64:	e1 18       	sub	r14, r1
    3f66:	f1 0a       	sbc	r15, r17
    3f68:	43 0b       	sbc	r20, r19
    3f6a:	56 0b       	sbc	r21, r22
    3f6c:	c9 0b       	sbc	r28, r25
    3f6e:	d0 09       	sbc	r29, r0
    3f70:	c0 f7       	brcc	.-16     	; 0x3f62 <__ftoa_engine+0x10a>
    3f72:	e1 0c       	add	r14, r1
    3f74:	f1 1e       	adc	r15, r17
    3f76:	43 1f       	adc	r20, r19
    3f78:	56 1f       	adc	r21, r22
    3f7a:	c9 1f       	adc	r28, r25
    3f7c:	d0 1d       	adc	r29, r0
    3f7e:	7e f4       	brtc	.+30     	; 0x3f9e <__ftoa_engine+0x146>
    3f80:	70 33       	cpi	r23, 0x30	; 48
    3f82:	11 f4       	brne	.+4      	; 0x3f88 <__ftoa_engine+0x130>
    3f84:	8a 95       	dec	r24
    3f86:	e6 cf       	rjmp	.-52     	; 0x3f54 <__ftoa_engine+0xfc>
    3f88:	e8 94       	clt
    3f8a:	01 50       	subi	r16, 0x01	; 1
    3f8c:	30 f0       	brcs	.+12     	; 0x3f9a <__ftoa_engine+0x142>
    3f8e:	08 0f       	add	r16, r24
    3f90:	0a f4       	brpl	.+2      	; 0x3f94 <__ftoa_engine+0x13c>
    3f92:	00 27       	eor	r16, r16
    3f94:	02 17       	cp	r16, r18
    3f96:	08 f4       	brcc	.+2      	; 0x3f9a <__ftoa_engine+0x142>
    3f98:	20 2f       	mov	r18, r16
    3f9a:	23 95       	inc	r18
    3f9c:	02 2f       	mov	r16, r18
    3f9e:	7a 33       	cpi	r23, 0x3A	; 58
    3fa0:	28 f0       	brcs	.+10     	; 0x3fac <__ftoa_engine+0x154>
    3fa2:	79 e3       	ldi	r23, 0x39	; 57
    3fa4:	7d 93       	st	X+, r23
    3fa6:	2a 95       	dec	r18
    3fa8:	e9 f7       	brne	.-6      	; 0x3fa4 <__ftoa_engine+0x14c>
    3faa:	10 c0       	rjmp	.+32     	; 0x3fcc <__ftoa_engine+0x174>
    3fac:	7d 93       	st	X+, r23
    3fae:	2a 95       	dec	r18
    3fb0:	89 f6       	brne	.-94     	; 0x3f54 <__ftoa_engine+0xfc>
    3fb2:	06 94       	lsr	r0
    3fb4:	97 95       	ror	r25
    3fb6:	67 95       	ror	r22
    3fb8:	37 95       	ror	r19
    3fba:	17 95       	ror	r17
    3fbc:	17 94       	ror	r1
    3fbe:	e1 18       	sub	r14, r1
    3fc0:	f1 0a       	sbc	r15, r17
    3fc2:	43 0b       	sbc	r20, r19
    3fc4:	56 0b       	sbc	r21, r22
    3fc6:	c9 0b       	sbc	r28, r25
    3fc8:	d0 09       	sbc	r29, r0
    3fca:	98 f0       	brcs	.+38     	; 0x3ff2 <__ftoa_engine+0x19a>
    3fcc:	23 95       	inc	r18
    3fce:	7e 91       	ld	r23, -X
    3fd0:	73 95       	inc	r23
    3fd2:	7a 33       	cpi	r23, 0x3A	; 58
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <__ftoa_engine+0x180>
    3fd6:	70 e3       	ldi	r23, 0x30	; 48
    3fd8:	7c 93       	st	X, r23
    3fda:	20 13       	cpse	r18, r16
    3fdc:	b8 f7       	brcc	.-18     	; 0x3fcc <__ftoa_engine+0x174>
    3fde:	7e 91       	ld	r23, -X
    3fe0:	70 61       	ori	r23, 0x10	; 16
    3fe2:	7d 93       	st	X+, r23
    3fe4:	30 f0       	brcs	.+12     	; 0x3ff2 <__ftoa_engine+0x19a>
    3fe6:	83 95       	inc	r24
    3fe8:	71 e3       	ldi	r23, 0x31	; 49
    3fea:	7d 93       	st	X+, r23
    3fec:	70 e3       	ldi	r23, 0x30	; 48
    3fee:	2a 95       	dec	r18
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <__ftoa_engine+0x192>
    3ff2:	11 24       	eor	r1, r1
    3ff4:	ef 90       	pop	r14
    3ff6:	ff 90       	pop	r15
    3ff8:	0f 91       	pop	r16
    3ffa:	1f 91       	pop	r17
    3ffc:	cf 91       	pop	r28
    3ffe:	df 91       	pop	r29
    4000:	99 27       	eor	r25, r25
    4002:	87 fd       	sbrc	r24, 7
    4004:	90 95       	com	r25
    4006:	08 95       	ret

00004008 <strnlen_P>:
    4008:	fc 01       	movw	r30, r24
    400a:	05 90       	lpm	r0, Z+
    400c:	61 50       	subi	r22, 0x01	; 1
    400e:	70 40       	sbci	r23, 0x00	; 0
    4010:	01 10       	cpse	r0, r1
    4012:	d8 f7       	brcc	.-10     	; 0x400a <strnlen_P+0x2>
    4014:	80 95       	com	r24
    4016:	90 95       	com	r25
    4018:	8e 0f       	add	r24, r30
    401a:	9f 1f       	adc	r25, r31
    401c:	08 95       	ret

0000401e <strcat>:
    401e:	fb 01       	movw	r30, r22
    4020:	dc 01       	movw	r26, r24
    4022:	0d 90       	ld	r0, X+
    4024:	00 20       	and	r0, r0
    4026:	e9 f7       	brne	.-6      	; 0x4022 <strcat+0x4>
    4028:	11 97       	sbiw	r26, 0x01	; 1
    402a:	01 90       	ld	r0, Z+
    402c:	0d 92       	st	X+, r0
    402e:	00 20       	and	r0, r0
    4030:	e1 f7       	brne	.-8      	; 0x402a <strcat+0xc>
    4032:	08 95       	ret

00004034 <strcpy>:
    4034:	fb 01       	movw	r30, r22
    4036:	dc 01       	movw	r26, r24
    4038:	01 90       	ld	r0, Z+
    403a:	0d 92       	st	X+, r0
    403c:	00 20       	and	r0, r0
    403e:	e1 f7       	brne	.-8      	; 0x4038 <strcpy+0x4>
    4040:	08 95       	ret

00004042 <strnlen>:
    4042:	fc 01       	movw	r30, r24
    4044:	61 50       	subi	r22, 0x01	; 1
    4046:	70 40       	sbci	r23, 0x00	; 0
    4048:	01 90       	ld	r0, Z+
    404a:	01 10       	cpse	r0, r1
    404c:	d8 f7       	brcc	.-10     	; 0x4044 <strnlen+0x2>
    404e:	80 95       	com	r24
    4050:	90 95       	com	r25
    4052:	8e 0f       	add	r24, r30
    4054:	9f 1f       	adc	r25, r31
    4056:	08 95       	ret

00004058 <__mulsi_const_10>:
    4058:	59 2f       	mov	r21, r25
    405a:	48 2f       	mov	r20, r24
    405c:	37 2f       	mov	r19, r23
    405e:	26 2f       	mov	r18, r22
    4060:	66 0f       	add	r22, r22
    4062:	77 1f       	adc	r23, r23
    4064:	88 1f       	adc	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	66 0f       	add	r22, r22
    406a:	77 1f       	adc	r23, r23
    406c:	88 1f       	adc	r24, r24
    406e:	99 1f       	adc	r25, r25
    4070:	62 0f       	add	r22, r18
    4072:	73 1f       	adc	r23, r19
    4074:	84 1f       	adc	r24, r20
    4076:	95 1f       	adc	r25, r21
    4078:	66 0f       	add	r22, r22
    407a:	77 1f       	adc	r23, r23
    407c:	88 1f       	adc	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	08 95       	ret

00004082 <fputc>:
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	fb 01       	movw	r30, r22
    408c:	23 81       	ldd	r18, Z+3	; 0x03
    408e:	21 fd       	sbrc	r18, 1
    4090:	03 c0       	rjmp	.+6      	; 0x4098 <fputc+0x16>
    4092:	8f ef       	ldi	r24, 0xFF	; 255
    4094:	9f ef       	ldi	r25, 0xFF	; 255
    4096:	2c c0       	rjmp	.+88     	; 0x40f0 <fputc+0x6e>
    4098:	22 ff       	sbrs	r18, 2
    409a:	16 c0       	rjmp	.+44     	; 0x40c8 <fputc+0x46>
    409c:	46 81       	ldd	r20, Z+6	; 0x06
    409e:	57 81       	ldd	r21, Z+7	; 0x07
    40a0:	24 81       	ldd	r18, Z+4	; 0x04
    40a2:	35 81       	ldd	r19, Z+5	; 0x05
    40a4:	42 17       	cp	r20, r18
    40a6:	53 07       	cpc	r21, r19
    40a8:	44 f4       	brge	.+16     	; 0x40ba <fputc+0x38>
    40aa:	a0 81       	ld	r26, Z
    40ac:	b1 81       	ldd	r27, Z+1	; 0x01
    40ae:	9d 01       	movw	r18, r26
    40b0:	2f 5f       	subi	r18, 0xFF	; 255
    40b2:	3f 4f       	sbci	r19, 0xFF	; 255
    40b4:	20 83       	st	Z, r18
    40b6:	31 83       	std	Z+1, r19	; 0x01
    40b8:	8c 93       	st	X, r24
    40ba:	26 81       	ldd	r18, Z+6	; 0x06
    40bc:	37 81       	ldd	r19, Z+7	; 0x07
    40be:	2f 5f       	subi	r18, 0xFF	; 255
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	26 83       	std	Z+6, r18	; 0x06
    40c4:	37 83       	std	Z+7, r19	; 0x07
    40c6:	14 c0       	rjmp	.+40     	; 0x40f0 <fputc+0x6e>
    40c8:	8b 01       	movw	r16, r22
    40ca:	ec 01       	movw	r28, r24
    40cc:	fb 01       	movw	r30, r22
    40ce:	00 84       	ldd	r0, Z+8	; 0x08
    40d0:	f1 85       	ldd	r31, Z+9	; 0x09
    40d2:	e0 2d       	mov	r30, r0
    40d4:	09 95       	icall
    40d6:	89 2b       	or	r24, r25
    40d8:	e1 f6       	brne	.-72     	; 0x4092 <fputc+0x10>
    40da:	d8 01       	movw	r26, r16
    40dc:	16 96       	adiw	r26, 0x06	; 6
    40de:	8d 91       	ld	r24, X+
    40e0:	9c 91       	ld	r25, X
    40e2:	17 97       	sbiw	r26, 0x07	; 7
    40e4:	01 96       	adiw	r24, 0x01	; 1
    40e6:	16 96       	adiw	r26, 0x06	; 6
    40e8:	8d 93       	st	X+, r24
    40ea:	9c 93       	st	X, r25
    40ec:	17 97       	sbiw	r26, 0x07	; 7
    40ee:	ce 01       	movw	r24, r28
    40f0:	df 91       	pop	r29
    40f2:	cf 91       	pop	r28
    40f4:	1f 91       	pop	r17
    40f6:	0f 91       	pop	r16
    40f8:	08 95       	ret

000040fa <sprintf>:
    40fa:	ae e0       	ldi	r26, 0x0E	; 14
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e3 e8       	ldi	r30, 0x83	; 131
    4100:	f0 e2       	ldi	r31, 0x20	; 32
    4102:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__prologue_saves__+0x1c>
    4106:	0d 89       	ldd	r16, Y+21	; 0x15
    4108:	1e 89       	ldd	r17, Y+22	; 0x16
    410a:	86 e0       	ldi	r24, 0x06	; 6
    410c:	8c 83       	std	Y+4, r24	; 0x04
    410e:	09 83       	std	Y+1, r16	; 0x01
    4110:	1a 83       	std	Y+2, r17	; 0x02
    4112:	8f ef       	ldi	r24, 0xFF	; 255
    4114:	9f e7       	ldi	r25, 0x7F	; 127
    4116:	8d 83       	std	Y+5, r24	; 0x05
    4118:	9e 83       	std	Y+6, r25	; 0x06
    411a:	ae 01       	movw	r20, r28
    411c:	47 5e       	subi	r20, 0xE7	; 231
    411e:	5f 4f       	sbci	r21, 0xFF	; 255
    4120:	6f 89       	ldd	r22, Y+23	; 0x17
    4122:	78 8d       	ldd	r23, Y+24	; 0x18
    4124:	ce 01       	movw	r24, r28
    4126:	01 96       	adiw	r24, 0x01	; 1
    4128:	0e 94 ce 1a 	call	0x359c	; 0x359c <vfprintf>
    412c:	ef 81       	ldd	r30, Y+7	; 0x07
    412e:	f8 85       	ldd	r31, Y+8	; 0x08
    4130:	e0 0f       	add	r30, r16
    4132:	f1 1f       	adc	r31, r17
    4134:	10 82       	st	Z, r1
    4136:	2e 96       	adiw	r28, 0x0e	; 14
    4138:	e4 e0       	ldi	r30, 0x04	; 4
    413a:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__epilogue_restores__+0x1c>

0000413e <__ultoa_invert>:
    413e:	fa 01       	movw	r30, r20
    4140:	aa 27       	eor	r26, r26
    4142:	28 30       	cpi	r18, 0x08	; 8
    4144:	51 f1       	breq	.+84     	; 0x419a <__ultoa_invert+0x5c>
    4146:	20 31       	cpi	r18, 0x10	; 16
    4148:	81 f1       	breq	.+96     	; 0x41aa <__ultoa_invert+0x6c>
    414a:	e8 94       	clt
    414c:	6f 93       	push	r22
    414e:	6e 7f       	andi	r22, 0xFE	; 254
    4150:	6e 5f       	subi	r22, 0xFE	; 254
    4152:	7f 4f       	sbci	r23, 0xFF	; 255
    4154:	8f 4f       	sbci	r24, 0xFF	; 255
    4156:	9f 4f       	sbci	r25, 0xFF	; 255
    4158:	af 4f       	sbci	r26, 0xFF	; 255
    415a:	b1 e0       	ldi	r27, 0x01	; 1
    415c:	3e d0       	rcall	.+124    	; 0x41da <__ultoa_invert+0x9c>
    415e:	b4 e0       	ldi	r27, 0x04	; 4
    4160:	3c d0       	rcall	.+120    	; 0x41da <__ultoa_invert+0x9c>
    4162:	67 0f       	add	r22, r23
    4164:	78 1f       	adc	r23, r24
    4166:	89 1f       	adc	r24, r25
    4168:	9a 1f       	adc	r25, r26
    416a:	a1 1d       	adc	r26, r1
    416c:	68 0f       	add	r22, r24
    416e:	79 1f       	adc	r23, r25
    4170:	8a 1f       	adc	r24, r26
    4172:	91 1d       	adc	r25, r1
    4174:	a1 1d       	adc	r26, r1
    4176:	6a 0f       	add	r22, r26
    4178:	71 1d       	adc	r23, r1
    417a:	81 1d       	adc	r24, r1
    417c:	91 1d       	adc	r25, r1
    417e:	a1 1d       	adc	r26, r1
    4180:	20 d0       	rcall	.+64     	; 0x41c2 <__ultoa_invert+0x84>
    4182:	09 f4       	brne	.+2      	; 0x4186 <__ultoa_invert+0x48>
    4184:	68 94       	set
    4186:	3f 91       	pop	r19
    4188:	2a e0       	ldi	r18, 0x0A	; 10
    418a:	26 9f       	mul	r18, r22
    418c:	11 24       	eor	r1, r1
    418e:	30 19       	sub	r19, r0
    4190:	30 5d       	subi	r19, 0xD0	; 208
    4192:	31 93       	st	Z+, r19
    4194:	de f6       	brtc	.-74     	; 0x414c <__ultoa_invert+0xe>
    4196:	cf 01       	movw	r24, r30
    4198:	08 95       	ret
    419a:	46 2f       	mov	r20, r22
    419c:	47 70       	andi	r20, 0x07	; 7
    419e:	40 5d       	subi	r20, 0xD0	; 208
    41a0:	41 93       	st	Z+, r20
    41a2:	b3 e0       	ldi	r27, 0x03	; 3
    41a4:	0f d0       	rcall	.+30     	; 0x41c4 <__ultoa_invert+0x86>
    41a6:	c9 f7       	brne	.-14     	; 0x419a <__ultoa_invert+0x5c>
    41a8:	f6 cf       	rjmp	.-20     	; 0x4196 <__ultoa_invert+0x58>
    41aa:	46 2f       	mov	r20, r22
    41ac:	4f 70       	andi	r20, 0x0F	; 15
    41ae:	40 5d       	subi	r20, 0xD0	; 208
    41b0:	4a 33       	cpi	r20, 0x3A	; 58
    41b2:	18 f0       	brcs	.+6      	; 0x41ba <__ultoa_invert+0x7c>
    41b4:	49 5d       	subi	r20, 0xD9	; 217
    41b6:	31 fd       	sbrc	r19, 1
    41b8:	40 52       	subi	r20, 0x20	; 32
    41ba:	41 93       	st	Z+, r20
    41bc:	02 d0       	rcall	.+4      	; 0x41c2 <__ultoa_invert+0x84>
    41be:	a9 f7       	brne	.-22     	; 0x41aa <__ultoa_invert+0x6c>
    41c0:	ea cf       	rjmp	.-44     	; 0x4196 <__ultoa_invert+0x58>
    41c2:	b4 e0       	ldi	r27, 0x04	; 4
    41c4:	a6 95       	lsr	r26
    41c6:	97 95       	ror	r25
    41c8:	87 95       	ror	r24
    41ca:	77 95       	ror	r23
    41cc:	67 95       	ror	r22
    41ce:	ba 95       	dec	r27
    41d0:	c9 f7       	brne	.-14     	; 0x41c4 <__ultoa_invert+0x86>
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	61 05       	cpc	r22, r1
    41d6:	71 05       	cpc	r23, r1
    41d8:	08 95       	ret
    41da:	9b 01       	movw	r18, r22
    41dc:	ac 01       	movw	r20, r24
    41de:	0a 2e       	mov	r0, r26
    41e0:	06 94       	lsr	r0
    41e2:	57 95       	ror	r21
    41e4:	47 95       	ror	r20
    41e6:	37 95       	ror	r19
    41e8:	27 95       	ror	r18
    41ea:	ba 95       	dec	r27
    41ec:	c9 f7       	brne	.-14     	; 0x41e0 <__ultoa_invert+0xa2>
    41ee:	62 0f       	add	r22, r18
    41f0:	73 1f       	adc	r23, r19
    41f2:	84 1f       	adc	r24, r20
    41f4:	95 1f       	adc	r25, r21
    41f6:	a0 1d       	adc	r26, r0
    41f8:	08 95       	ret

000041fa <eeprom_read_block>:
    41fa:	60 50       	subi	r22, 0x00	; 0
    41fc:	7c 4e       	sbci	r23, 0xEC	; 236
    41fe:	0c 94 38 21 	jmp	0x4270	; 0x4270 <memcpy>

00004202 <eeprom_update_block>:
    4202:	dc 01       	movw	r26, r24
    4204:	a4 0f       	add	r26, r20
    4206:	b5 1f       	adc	r27, r21
    4208:	41 50       	subi	r20, 0x01	; 1
    420a:	50 40       	sbci	r21, 0x00	; 0
    420c:	48 f0       	brcs	.+18     	; 0x4220 <eeprom_update_block+0x1e>
    420e:	cb 01       	movw	r24, r22
    4210:	84 0f       	add	r24, r20
    4212:	95 1f       	adc	r25, r21
    4214:	2e 91       	ld	r18, -X
    4216:	0e 94 12 21 	call	0x4224	; 0x4224 <eeprom_update_r18>
    421a:	41 50       	subi	r20, 0x01	; 1
    421c:	50 40       	sbci	r21, 0x00	; 0
    421e:	d0 f7       	brcc	.-12     	; 0x4214 <eeprom_update_block+0x12>
    4220:	08 95       	ret

00004222 <eeprom_update_byte>:
    4222:	26 2f       	mov	r18, r22

00004224 <eeprom_update_r18>:
    4224:	0e 94 34 21 	call	0x4268	; 0x4268 <eeprom_mapen>
    4228:	00 80       	ld	r0, Z
    422a:	02 16       	cp	r0, r18
    422c:	19 f0       	breq	.+6      	; 0x4234 <eeprom_update_r18+0x10>
    422e:	0e 94 1d 21 	call	0x423a	; 0x423a <eeprom_write_r18>
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	08 95       	ret

00004238 <eeprom_write_byte>:
    4238:	26 2f       	mov	r18, r22

0000423a <eeprom_write_r18>:
    423a:	af 93       	push	r26
    423c:	bf 93       	push	r27
    423e:	e0 e0       	ldi	r30, 0x00	; 0
    4240:	f0 e1       	ldi	r31, 0x10	; 16
    4242:	32 81       	ldd	r19, Z+2	; 0x02
    4244:	31 fd       	sbrc	r19, 1
    4246:	fd cf       	rjmp	.-6      	; 0x4242 <eeprom_write_r18+0x8>
    4248:	dc 01       	movw	r26, r24
    424a:	a0 50       	subi	r26, 0x00	; 0
    424c:	bc 4e       	sbci	r27, 0xEC	; 236
    424e:	2c 93       	st	X, r18
    4250:	2d e9       	ldi	r18, 0x9D	; 157
    4252:	24 bf       	out	0x34, r18	; 52
    4254:	23 e0       	ldi	r18, 0x03	; 3
    4256:	20 83       	st	Z, r18
    4258:	01 96       	adiw	r24, 0x01	; 1
    425a:	bf 91       	pop	r27
    425c:	af 91       	pop	r26
    425e:	08 95       	ret

00004260 <eeprom_read_byte>:
    4260:	03 d0       	rcall	.+6      	; 0x4268 <eeprom_mapen>
    4262:	80 81       	ld	r24, Z
    4264:	99 27       	eor	r25, r25
    4266:	08 95       	ret

00004268 <eeprom_mapen>:
    4268:	fc 01       	movw	r30, r24
    426a:	e0 50       	subi	r30, 0x00	; 0
    426c:	fc 4e       	sbci	r31, 0xEC	; 236
    426e:	08 95       	ret

00004270 <memcpy>:
    4270:	fb 01       	movw	r30, r22
    4272:	dc 01       	movw	r26, r24
    4274:	02 c0       	rjmp	.+4      	; 0x427a <memcpy+0xa>
    4276:	01 90       	ld	r0, Z+
    4278:	0d 92       	st	X+, r0
    427a:	41 50       	subi	r20, 0x01	; 1
    427c:	50 40       	sbci	r21, 0x00	; 0
    427e:	d8 f7       	brcc	.-10     	; 0x4276 <memcpy+0x6>
    4280:	08 95       	ret

00004282 <_exit>:
    4282:	f8 94       	cli

00004284 <__stop_program>:
    4284:	ff cf       	rjmp	.-2      	; 0x4284 <__stop_program>
