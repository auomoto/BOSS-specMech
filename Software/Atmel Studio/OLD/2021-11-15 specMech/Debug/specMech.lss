
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004e9d  00004f51  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a32  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046b  00008a32  00004a32  00004ae6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082d  00802804  00802804  00004f55  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004f55  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004fb4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000638  00000000  00000000  00004ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009e51  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000451a  00000000  00000000  0000f481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042da  00000000  00000000  0001399b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000100c  00000000  00000000  00017c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000234c  00000000  00000000  00018c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004206  00000000  00000000  0001afd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  0001f1d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__vector_3>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__vector_12>
      34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__vector_17>
      48:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__vector_18>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_20>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__vector_26>
      6c:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__vector_27>
      70:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      74:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__vector_29>
      78:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      7c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      80:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      84:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      88:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      8c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      90:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      94:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__vector_37>
      98:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__vector_38>
      9c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      a0:	b7 04       	cpc	r11, r7
      a2:	db 04       	cpc	r13, r11
      a4:	db 04       	cpc	r13, r11
      a6:	db 04       	cpc	r13, r11
      a8:	db 04       	cpc	r13, r11
      aa:	db 04       	cpc	r13, r11
      ac:	db 04       	cpc	r13, r11
      ae:	db 04       	cpc	r13, r11
      b0:	db 04       	cpc	r13, r11
      b2:	ba 04       	cpc	r11, r10
      b4:	db 04       	cpc	r13, r11
      b6:	db 04       	cpc	r13, r11
      b8:	db 04       	cpc	r13, r11
      ba:	db 04       	cpc	r13, r11
      bc:	db 04       	cpc	r13, r11
      be:	db 04       	cpc	r13, r11
      c0:	db 04       	cpc	r13, r11
      c2:	db 04       	cpc	r13, r11
      c4:	db 04       	cpc	r13, r11
      c6:	db 04       	cpc	r13, r11
      c8:	db 04       	cpc	r13, r11
      ca:	db 04       	cpc	r13, r11
      cc:	db 04       	cpc	r13, r11
      ce:	db 04       	cpc	r13, r11
      d0:	db 04       	cpc	r13, r11
      d2:	db 04       	cpc	r13, r11
      d4:	a5 04       	cpc	r10, r5
      d6:	db 04       	cpc	r13, r11
      d8:	db 04       	cpc	r13, r11
      da:	db 04       	cpc	r13, r11
      dc:	db 04       	cpc	r13, r11
      de:	db 04       	cpc	r13, r11
      e0:	db 04       	cpc	r13, r11
      e2:	db 04       	cpc	r13, r11
      e4:	db 04       	cpc	r13, r11
      e6:	db 04       	cpc	r13, r11
      e8:	ab 04       	cpc	r10, r11
      ea:	db 04       	cpc	r13, r11
      ec:	a8 04       	cpc	r10, r8
      ee:	db 04       	cpc	r13, r11
      f0:	db 04       	cpc	r13, r11
      f2:	ae 04       	cpc	r10, r14
      f4:	b1 04       	cpc	r11, r1
      f6:	b4 04       	cpc	r11, r4
      f8:	6f 0f       	add	r22, r31
      fa:	6f 0f       	add	r22, r31
      fc:	6f 0f       	add	r22, r31
      fe:	38 14       	cp	r3, r8
     100:	38 14       	cp	r3, r8
     102:	38 14       	cp	r3, r8
     104:	38 14       	cp	r3, r8
     106:	38 14       	cp	r3, r8
     108:	38 14       	cp	r3, r8
     10a:	38 14       	cp	r3, r8
     10c:	38 14       	cp	r3, r8
     10e:	38 14       	cp	r3, r8
     110:	38 14       	cp	r3, r8
     112:	38 14       	cp	r3, r8
     114:	38 14       	cp	r3, r8
     116:	38 14       	cp	r3, r8
     118:	38 14       	cp	r3, r8
     11a:	38 14       	cp	r3, r8
     11c:	38 14       	cp	r3, r8
     11e:	38 14       	cp	r3, r8
     120:	38 14       	cp	r3, r8
     122:	fa 13       	cpse	r31, r26
     124:	38 14       	cp	r3, r8
     126:	38 14       	cp	r3, r8
     128:	38 14       	cp	r3, r8
     12a:	38 14       	cp	r3, r8
     12c:	38 14       	cp	r3, r8
     12e:	38 14       	cp	r3, r8
     130:	38 14       	cp	r3, r8
     132:	38 14       	cp	r3, r8
     134:	38 14       	cp	r3, r8
     136:	38 14       	cp	r3, r8
     138:	ff 0f       	add	r31, r31
     13a:	ff 0f       	add	r31, r31
     13c:	ff 0f       	add	r31, r31
     13e:	38 14       	cp	r3, r8
     140:	bd 10       	cpse	r11, r13
     142:	38 14       	cp	r3, r8
     144:	38 14       	cp	r3, r8
     146:	38 14       	cp	r3, r8
     148:	38 14       	cp	r3, r8
     14a:	38 14       	cp	r3, r8
     14c:	38 14       	cp	r3, r8
     14e:	38 14       	cp	r3, r8
     150:	38 14       	cp	r3, r8
     152:	38 14       	cp	r3, r8
     154:	fa 11       	cpse	r31, r10
     156:	d0 12       	cpse	r13, r16
     158:	38 14       	cp	r3, r8
     15a:	38 14       	cp	r3, r8
     15c:	38 14       	cp	r3, r8
     15e:	59 13       	cpse	r21, r25
     160:	38 14       	cp	r3, r8
     162:	a1 13       	cpse	r26, r17

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_copy_data>:
     272:	18 e2       	ldi	r17, 0x28	; 40
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	ed e9       	ldi	r30, 0x9D	; 157
     27a:	fe e4       	ldi	r31, 0x4E	; 78
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a4 30       	cpi	r26, 0x04	; 4
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	20 e3       	ldi	r18, 0x30	; 48
     28a:	a4 e0       	ldi	r26, 0x04	; 4
     28c:	b8 e2       	ldi	r27, 0x28	; 40
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a1 33       	cpi	r26, 0x31	; 49
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 b6 08 	call	0x116c	; 0x116c <main>
     29c:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     2a4:	8f 92       	push	r8
     2a6:	9f 92       	push	r9
     2a8:	af 92       	push	r10
     2aa:	bf 92       	push	r11
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <read_AD590+0x16>
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <read_AD590+0x18>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	c9 f0       	breq	.+50     	; 0x2f8 <read_AD590+0x54>
     2c6:	18 f0       	brcs	.+6      	; 0x2ce <read_AD590+0x2a>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	61 f0       	breq	.+24     	; 0x2e4 <read_AD590+0x40>
     2cc:	10 c0       	rjmp	.+32     	; 0x2ee <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f3 e3       	ldi	r31, 0x33	; 51
     2d2:	8f 2e       	mov	r8, r31
     2d4:	98 2c       	mov	r9, r8
     2d6:	f3 ef       	ldi	r31, 0xF3	; 243
     2d8:	af 2e       	mov	r10, r31
     2da:	f0 e4       	ldi	r31, 0x40	; 64
     2dc:	bf 2e       	mov	r11, r31
     2de:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2e4:	81 2c       	mov	r8, r1
     2e6:	91 2c       	mov	r9, r1
     2e8:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2ea:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2ec:	09 c0       	rjmp	.+18     	; 0x300 <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2ee:	81 2c       	mov	r8, r1
     2f0:	91 2c       	mov	r9, r1
     2f2:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2f4:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2f8:	81 2c       	mov	r8, r1
     2fa:	91 2c       	mov	r9, r1
     2fc:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2fe:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	66 e0       	ldi	r22, 0x06	; 6
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     30a:	41 2f       	mov	r20, r17
     30c:	40 95       	com	r20
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	87 e2       	ldi	r24, 0x27	; 39
     312:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     316:	41 2f       	mov	r20, r17
     318:	6a e0       	ldi	r22, 0x0A	; 10
     31a:	87 e2       	ldi	r24, 0x27	; 39
     31c:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     320:	86 e1       	ldi	r24, 0x16	; 22
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <read_AD590+0x7e>
     326:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     328:	8e 01       	movw	r16, r28
     32a:	0f 5f       	subi	r16, 0xFF	; 255
     32c:	1f 4f       	sbci	r17, 0xFF	; 255
     32e:	20 e8       	ldi	r18, 0x80	; 128
     330:	40 e7       	ldi	r20, 0x70	; 112
     332:	68 e0       	ldi	r22, 0x08	; 8
     334:	88 e4       	ldi	r24, 0x48	; 72
     336:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_ADS1115>
     33a:	83 36       	cpi	r24, 0x63	; 99
     33c:	51 f4       	brne	.+20     	; 0x352 <read_AD590+0xae>
		*temperature = BADFLOAT;
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e8       	ldi	r21, 0x80	; 128
     342:	66 e2       	ldi	r22, 0x26	; 38
     344:	74 ec       	ldi	r23, 0xC4	; 196
     346:	f7 01       	movw	r30, r14
     348:	40 83       	st	Z, r20
     34a:	51 83       	std	Z+1, r21	; 0x01
     34c:	62 83       	std	Z+2, r22	; 0x02
     34e:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     350:	1c c0       	rjmp	.+56     	; 0x38a <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4a e7       	ldi	r20, 0x7A	; 122
     358:	54 e4       	ldi	r21, 0x44	; 68
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	7a 81       	ldd	r23, Y+2	; 0x02
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
     366:	23 e3       	ldi	r18, 0x33	; 51
     368:	33 e9       	ldi	r19, 0x93	; 147
     36a:	48 e8       	ldi	r20, 0x88	; 136
     36c:	53 e4       	ldi	r21, 0x43	; 67
     36e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__subsf3>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	c5 01       	movw	r24, r10
     378:	b4 01       	movw	r22, r8
     37a:	0e 94 9d 1c 	call	0x393a	; 0x393a <__addsf3>
     37e:	f7 01       	movw	r30, r14
     380:	60 83       	st	Z, r22
     382:	71 83       	std	Z+1, r23	; 0x01
     384:	82 83       	std	Z+2, r24	; 0x02
     386:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     388:	80 e0       	ldi	r24, 0x00	; 0

}
     38a:	24 96       	adiw	r28, 0x04	; 4
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	de bf       	out	0x3e, r29	; 62
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	9f 90       	pop	r9
     3a2:	8f 90       	pop	r8
     3a4:	08 95       	ret

000003a6 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	f8 2e       	mov	r15, r24
     3c0:	e6 2e       	mov	r14, r22
     3c2:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3c4:	46 2b       	or	r20, r22
     3c6:	c4 2f       	mov	r28, r20
     3c8:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3ca:	d2 2f       	mov	r29, r18
     3cc:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e8       	ldi	r25, 0x80	; 128
     3d2:	a6 e2       	ldi	r26, 0x26	; 38
     3d4:	b4 ec       	ldi	r27, 0xC4	; 196
     3d6:	f8 01       	movw	r30, r16
     3d8:	80 83       	st	Z, r24
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	a2 83       	std	Z+2, r26	; 0x02
     3de:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	8f 2d       	mov	r24, r15
     3e4:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     3e8:	08 2f       	mov	r16, r24
     3ea:	88 23       	and	r24, r24
     3ec:	21 f0       	breq	.+8      	; 0x3f6 <read_ADS1115+0x50>
		stop_TWI();
     3ee:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     3f2:	13 e6       	ldi	r17, 0x63	; 99
     3f4:	b4 c0       	rjmp	.+360    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     3fc:	18 2f       	mov	r17, r24
     3fe:	83 36       	cpi	r24, 0x63	; 99
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		stop_TWI();
     402:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     406:	ab c0       	rjmp	.+342    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     408:	8c 2f       	mov	r24, r28
     40a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     40e:	18 2f       	mov	r17, r24
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		stop_TWI();
     414:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     418:	a2 c0       	rjmp	.+324    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     41a:	8d 2f       	mov	r24, r29
     41c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     420:	18 2f       	mov	r17, r24
     422:	83 36       	cpi	r24, 0x63	; 99
     424:	19 f4       	brne	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		stop_TWI();
     426:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     42a:	99 c0       	rjmp	.+306    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}
	stop_TWI();
     42c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
     430:	fc e1       	ldi	r31, 0x1C	; 28
     432:	fa 95       	dec	r31
     434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

	_delay_us(25);									// Power-up time

	converting = YES;
     436:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     438:	09 c0       	rjmp	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		start_TWI(addr, TWIREAD);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	8f 2d       	mov	r24, r15
     43e:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
		flag = readlast_TWI();
     442:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
		if (flag & 0b10000000) {
     446:	88 23       	and	r24, r24
     448:	0c f4       	brge	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			converting = NO;
     44a:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     44c:	c1 11       	cpse	r28, r1
     44e:	f5 cf       	rjmp	.-22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     450:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	8f 2d       	mov	r24, r15
     458:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	8f 2d       	mov	r24, r15
     466:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
	highbyte = read_TWI();
     46a:	0e 94 8c 19 	call	0x3318	; 0x3318 <read_TWI>
     46e:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     470:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
     474:	d8 2f       	mov	r29, r24
	stop_TWI();
     476:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	value = highbyte;
     47a:	6c 2f       	mov	r22, r28
     47c:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     47e:	76 2f       	mov	r23, r22
     480:	66 27       	eor	r22, r22
	value |= lowbyte;
     482:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	e8 16       	cp	r14, r24
     488:	49 f1       	breq	.+82     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     48a:	8e 15       	cp	r24, r14
     48c:	30 f0       	brcs	.+12     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     48e:	ee 20       	and	r14, r14
     490:	d9 f1       	breq	.+118    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     492:	e2 e0       	ldi	r30, 0x02	; 2
     494:	ee 16       	cp	r14, r30
     496:	69 f1       	breq	.+90     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     498:	42 c0       	rjmp	.+132    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     49a:	f8 e0       	ldi	r31, 0x08	; 8
     49c:	ef 16       	cp	r14, r31
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	42 c0       	rjmp	.+132    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     4a2:	8a e0       	ldi	r24, 0x0A	; 10
     4a4:	e8 16       	cp	r14, r24
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a8:	e6 e0       	ldi	r30, 0x06	; 6
     4aa:	ee 12       	cpse	r14, r30
     4ac:	38 c0       	rjmp	.+112    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		case PGA0256:
			scale = SCA0256;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f7 e3       	ldi	r31, 0x37	; 55
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
     4c4:	3a c0       	rjmp	.+116    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f4 e7       	ldi	r31, 0x74	; 116
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	2f c0       	rjmp	.+94     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		case PGA2048:
			scale = SCA2048;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f2 e1       	ldi	r31, 0x12	; 18
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e8       	ldi	r31, 0x83	; 131
     4e8:	af 2e       	mov	r10, r31
     4ea:	f8 e3       	ldi	r31, 0x38	; 56
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	24 c0       	rjmp	.+72     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		case PGA4096:
			scale = SCA4096;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f4 e7       	ldi	r31, 0x74	; 116
     4f6:	8f 2e       	mov	r8, r31
     4f8:	f3 e1       	ldi	r31, 0x13	; 19
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f3 e0       	ldi	r31, 0x03	; 3
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	19 c0       	rjmp	.+50     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		case PGA6144:
			scale = SCA6144;
     508:	0f 2e       	mov	r0, r31
     50a:	fe e2       	ldi	r31, 0x2E	; 46
     50c:	8f 2e       	mov	r8, r31
     50e:	fd e9       	ldi	r31, 0x9D	; 157
     510:	9f 2e       	mov	r9, r31
     512:	f4 e4       	ldi	r31, 0x44	; 68
     514:	af 2e       	mov	r10, r31
     516:	f9 e3       	ldi	r31, 0x39	; 57
     518:	bf 2e       	mov	r11, r31
     51a:	f0 2d       	mov	r31, r0
			break;
     51c:	0e c0       	rjmp	.+28     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		default:
			scale = 0.0;
     51e:	81 2c       	mov	r8, r1
     520:	91 2c       	mov	r9, r1
     522:	54 01       	movw	r10, r8
			break;
     524:	0a c0       	rjmp	.+20     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     526:	0f 2e       	mov	r0, r31
     528:	f1 e7       	ldi	r31, 0x71	; 113
     52a:	8f 2e       	mov	r8, r31
     52c:	f3 e1       	ldi	r31, 0x13	; 19
     52e:	9f 2e       	mov	r9, r31
     530:	f3 e8       	ldi	r31, 0x83	; 131
     532:	af 2e       	mov	r10, r31
     534:	f7 e3       	ldi	r31, 0x37	; 55
     536:	bf 2e       	mov	r11, r31
     538:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     53a:	07 2e       	mov	r0, r23
     53c:	00 0c       	add	r0, r0
     53e:	88 0b       	sbc	r24, r24
     540:	99 0b       	sbc	r25, r25
     542:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
     54a:	c5 01       	movw	r24, r10
     54c:	b4 01       	movw	r22, r8
     54e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
     552:	f6 01       	movw	r30, r12
     554:	60 83       	st	Z, r22
     556:	71 83       	std	Z+1, r23	; 0x01
     558:	82 83       	std	Z+2, r24	; 0x02
     55a:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     55c:	10 2f       	mov	r17, r16

}
     55e:	81 2f       	mov	r24, r17
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	08 95       	ret

0000057a <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	9c 01       	movw	r18, r24
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	1c c0       	rjmp	.+56     	; 0x5bc <get_cmdline+0x42>
     584:	cc e1       	ldi	r28, 0x1C	; 28
     586:	dc e2       	ldi	r29, 0x2C	; 44
     588:	e8 81       	ld	r30, Y
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	e3 5e       	subi	r30, 0xE3	; 227
     58e:	f4 4d       	sbci	r31, 0xD4	; 212
     590:	80 81       	ld	r24, Z
     592:	f9 01       	movw	r30, r18
     594:	e4 0f       	add	r30, r20
     596:	f1 1d       	adc	r31, r1
     598:	80 83       	st	Z, r24
     59a:	ae e1       	ldi	r26, 0x1E	; 30
     59c:	bc e2       	ldi	r27, 0x2C	; 44
     59e:	8c 91       	ld	r24, X
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	8c 93       	st	X, r24
     5a4:	88 81       	ld	r24, Y
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	6e ef       	ldi	r22, 0xFE	; 254
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
     5b2:	88 83       	st	Y, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	88 23       	and	r24, r24
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <get_cmdline+0x4a>
     5ba:	4f 5f       	subi	r20, 0xFF	; 255
     5bc:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
     5c0:	81 11       	cpse	r24, r1
     5c2:	e0 cf       	rjmp	.-64     	; 0x584 <get_cmdline+0xa>
     5c4:	f9 01       	movw	r30, r18
     5c6:	e4 0f       	add	r30, r20
     5c8:	f1 1d       	adc	r31, r1
     5ca:	10 82       	st	Z, r1
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5d2:	9f e9       	ldi	r25, 0x9F	; 159
     5d4:	98 0f       	add	r25, r24
     5d6:	9a 31       	cpi	r25, 0x1A	; 26
     5d8:	28 f0       	brcs	.+10     	; 0x5e4 <isaletter+0x12>
     5da:	81 54       	subi	r24, 0x41	; 65
     5dc:	8a 31       	cpi	r24, 0x1A	; 26
     5de:	20 f4       	brcc	.+8      	; 0x5e8 <isaletter+0x16>
		return(ERROR);
     5e0:	83 e6       	ldi	r24, 0x63	; 99
     5e2:	08 95       	ret
     5e4:	83 e6       	ldi	r24, 0x63	; 99
     5e6:	08 95       	ret
	}
	return(NOERROR);
     5e8:	80 e0       	ldi	r24, 0x00	; 0

}
     5ea:	08 95       	ret

000005ec <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f8:	e6 2e       	mov	r14, r22
     5fa:	f1 2c       	mov	r15, r1
     5fc:	84 e3       	ldi	r24, 0x34	; 52
     5fe:	8e 9d       	mul	r24, r14
     600:	f0 01       	movw	r30, r0
     602:	8f 9d       	mul	r24, r15
     604:	f0 0d       	add	r31, r0
     606:	11 24       	eor	r1, r1
     608:	e8 5f       	subi	r30, 0xF8	; 248
     60a:	f7 4d       	sbci	r31, 0xD7	; 215
     60c:	8f e3       	ldi	r24, 0x3F	; 63
     60e:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     610:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     612:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     614:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     616:	04 c0       	rjmp	.+8      	; 0x620 <parse_cmd+0x34>
		if (*ptr == '\0') {
     618:	11 23       	and	r17, r17
     61a:	09 f4       	brne	.+2      	; 0x61e <parse_cmd+0x32>
     61c:	75 c0       	rjmp	.+234    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61e:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     620:	18 81       	ld	r17, Y
     622:	81 2f       	mov	r24, r17
     624:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     628:	88 23       	and	r24, r24
     62a:	b1 f3       	breq	.-20     	; 0x618 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     62c:	21 96       	adiw	r28, 0x01	; 1
     62e:	84 e3       	ldi	r24, 0x34	; 52
     630:	8e 9d       	mul	r24, r14
     632:	f0 01       	movw	r30, r0
     634:	8f 9d       	mul	r24, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	e8 5f       	subi	r30, 0xF8	; 248
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     640:	04 c0       	rjmp	.+8      	; 0x64a <parse_cmd+0x5e>
		if (*ptr == '\0') {
     642:	11 23       	and	r17, r17
     644:	09 f4       	brne	.+2      	; 0x648 <parse_cmd+0x5c>
     646:	60 c0       	rjmp	.+192    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     648:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     64a:	18 81       	ld	r17, Y
     64c:	81 2f       	mov	r24, r17
     64e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     652:	88 23       	and	r24, r24
     654:	b1 f3       	breq	.-20     	; 0x642 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     656:	21 96       	adiw	r28, 0x01	; 1
     658:	84 e3       	ldi	r24, 0x34	; 52
     65a:	8e 9d       	mul	r24, r14
     65c:	f0 01       	movw	r30, r0
     65e:	8f 9d       	mul	r24, r15
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e8 5f       	subi	r30, 0xF8	; 248
     666:	f7 4d       	sbci	r31, 0xD7	; 215
     668:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	2a c0       	rjmp	.+84     	; 0x6c2 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66e:	98 81       	ld	r25, Y
     670:	91 11       	cpse	r25, r1
     672:	0c c0       	rjmp	.+24     	; 0x68c <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     674:	94 e3       	ldi	r25, 0x34	; 52
     676:	9e 9d       	mul	r25, r14
     678:	f0 01       	movw	r30, r0
     67a:	9f 9d       	mul	r25, r15
     67c:	f0 0d       	add	r31, r0
     67e:	11 24       	eor	r1, r1
     680:	e8 5f       	subi	r30, 0xF8	; 248
     682:	f7 4d       	sbci	r31, 0xD7	; 215
     684:	e8 0f       	add	r30, r24
     686:	f1 1d       	adc	r31, r1
     688:	12 82       	std	Z+2, r1	; 0x02
			return;
     68a:	3e c0       	rjmp	.+124    	; 0x708 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     68c:	9b 33       	cpi	r25, 0x3B	; 59
     68e:	61 f4       	brne	.+24     	; 0x6a8 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     690:	94 e3       	ldi	r25, 0x34	; 52
     692:	9e 9d       	mul	r25, r14
     694:	f0 01       	movw	r30, r0
     696:	9f 9d       	mul	r25, r15
     698:	f0 0d       	add	r31, r0
     69a:	11 24       	eor	r1, r1
     69c:	e8 5f       	subi	r30, 0xF8	; 248
     69e:	f7 4d       	sbci	r31, 0xD7	; 215
     6a0:	e8 0f       	add	r30, r24
     6a2:	f1 1d       	adc	r31, r1
     6a4:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	24 e3       	ldi	r18, 0x34	; 52
     6ac:	2e 9d       	mul	r18, r14
     6ae:	f0 01       	movw	r30, r0
     6b0:	2f 9d       	mul	r18, r15
     6b2:	f0 0d       	add	r31, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	e8 5f       	subi	r30, 0xF8	; 248
     6b8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ba:	e8 0f       	add	r30, r24
     6bc:	f1 1d       	adc	r31, r1
     6be:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	89 32       	cpi	r24, 0x29	; 41
     6c4:	a0 f2       	brcs	.-88     	; 0x66e <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6c6:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	1c c0       	rjmp	.+56     	; 0x704 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6cc:	98 81       	ld	r25, Y
     6ce:	91 11       	cpse	r25, r1
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6d2:	94 e3       	ldi	r25, 0x34	; 52
     6d4:	9e 9d       	mul	r25, r14
     6d6:	f0 01       	movw	r30, r0
     6d8:	9f 9d       	mul	r25, r15
     6da:	f0 0d       	add	r31, r0
     6dc:	11 24       	eor	r1, r1
     6de:	e8 5f       	subi	r30, 0xF8	; 248
     6e0:	f7 4d       	sbci	r31, 0xD7	; 215
     6e2:	e8 0f       	add	r30, r24
     6e4:	f1 1d       	adc	r31, r1
     6e6:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6ea:	21 96       	adiw	r28, 0x01	; 1
     6ec:	24 e3       	ldi	r18, 0x34	; 52
     6ee:	2e 9d       	mul	r18, r14
     6f0:	f0 01       	movw	r30, r0
     6f2:	2f 9d       	mul	r18, r15
     6f4:	f0 0d       	add	r31, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	e8 5f       	subi	r30, 0xF8	; 248
     6fa:	f7 4d       	sbci	r31, 0xD7	; 215
     6fc:	e8 0f       	add	r30, r24
     6fe:	f1 1d       	adc	r31, r1
     700:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	89 30       	cpi	r24, 0x09	; 9
     706:	10 f3       	brcs	.-60     	; 0x6cc <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	c5 50       	subi	r28, 0x05	; 5
     722:	d1 40       	sbci	r29, 0x01	; 1
     724:	cd bf       	out	0x3d, r28	; 61
     726:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     728:	27 e0       	ldi	r18, 0x07	; 7
     72a:	e2 e3       	ldi	r30, 0x32	; 50
     72c:	fa e8       	ldi	r31, 0x8A	; 138
     72e:	de 01       	movw	r26, r28
     730:	a1 50       	subi	r26, 0x01	; 1
     732:	bf 4f       	sbci	r27, 0xFF	; 255
     734:	01 90       	ld	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	2a 95       	dec	r18
     73a:	e1 f7       	brne	.-8      	; 0x734 <printLine+0x20>

	if (firstpass) {
     73c:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <firstpass>
     740:	21 11       	cpse	r18, r1
     742:	2a c0       	rjmp	.+84     	; 0x798 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     744:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     748:	22 ff       	sbrs	r18, 2
     74a:	03 c0       	rjmp	.+6      	; 0x752 <printLine+0x3e>
     74c:	22 e0       	ldi	r18, 0x02	; 2
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <printLine+0x42>
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	3f 93       	push	r19
     75c:	2f 93       	push	r18
     75e:	ce 01       	movw	r24, r28
     760:	81 50       	subi	r24, 0x01	; 1
     762:	9f 4f       	sbci	r25, 0xFF	; 255
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	8e 01       	movw	r16, r28
     76a:	0f 5f       	subi	r16, 0xFF	; 255
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	1f 93       	push	r17
     770:	0f 93       	push	r16
     772:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
	checksum_NMEA(strbuf);
     776:	c8 01       	movw	r24, r16
     778:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     77c:	f8 01       	movw	r30, r16
     77e:	01 90       	ld	r0, Z+
     780:	00 20       	and	r0, r0
     782:	e9 f7       	brne	.-6      	; 0x77e <printLine+0x6a>
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	af 01       	movw	r20, r30
     788:	40 1b       	sub	r20, r16
     78a:	51 0b       	sbc	r21, r17
     78c:	b8 01       	movw	r22, r16
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62

}
     798:	cb 5f       	subi	r28, 0xFB	; 251
     79a:	de 4f       	sbci	r29, 0xFE	; 254
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	cc 51       	subi	r28, 0x1C	; 28
     7c0:	d1 40       	sbci	r29, 0x01	; 1
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	d8 2e       	mov	r13, r24
     7c8:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7ca:	8a e0       	ldi	r24, 0x0A	; 10
     7cc:	e9 e3       	ldi	r30, 0x39	; 57
     7ce:	fa e8       	ldi	r31, 0x8A	; 138
     7d0:	9e 01       	movw	r18, r28
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	79 01       	movw	r14, r18
     7d8:	d9 01       	movw	r26, r18
     7da:	01 90       	ld	r0, Z+
     7dc:	0d 92       	st	X+, r0
     7de:	8a 95       	dec	r24
     7e0:	e1 f7       	brne	.-8      	; 0x7da <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7e2:	8e 01       	movw	r16, r28
     7e4:	05 5f       	subi	r16, 0xF5	; 245
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	c8 01       	movw	r24, r16
     7ea:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	1f 93       	push	r17
     7f4:	0f 93       	push	r16
     7f6:	ff 92       	push	r15
     7f8:	ef 92       	push	r14
     7fa:	0c 5e       	subi	r16, 0xEC	; 236
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	1f 93       	push	r17
     800:	0f 93       	push	r16
     802:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
	printLine(strbuf);
     806:	c8 01       	movw	r24, r16
     808:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>

}
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	de bf       	out	0x3e, r29	; 62
     810:	c4 5e       	subi	r28, 0xE4	; 228
     812:	de 4f       	sbci	r29, 0xFE	; 254
     814:	cd bf       	out	0x3d, r28	; 61
     816:	de bf       	out	0x3e, r29	; 62
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	08 95       	ret

0000082a <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <send_EXprompt+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     834:	81 e2       	ldi	r24, 0x21	; 33
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	be 01       	movw	r22, r28
     840:	6f 5f       	subi	r22, 0xFF	; 255
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

}
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     854:	cf 93       	push	r28

	if (!rebootackd) {
     856:	c0 91 07 28 	lds	r28, 0x2807	; 0x802807 <rebootackd>
     85a:	c1 11       	cpse	r28, r1
     85c:	21 c0       	rjmp	.+66     	; 0x8a0 <rebootACKd+0x4c>
     85e:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     860:	80 81       	ld	r24, Z
     862:	81 32       	cpi	r24, 0x21	; 33
     864:	91 f4       	brne	.+36     	; 0x88a <rebootACKd+0x36>
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	91 11       	cpse	r25, r1
     86a:	0f c0       	rjmp	.+30     	; 0x88a <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 96 18 	call	0x312c	; 0x312c <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timeoutOLED>
     87c:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <timeoutOLED+0x1>
			rebootackd = YES;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <rebootackd>
			return(YES);
     886:	c1 e0       	ldi	r28, 0x01	; 1
     888:	0c c0       	rjmp	.+24     	; 0x8a2 <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     88a:	81 32       	cpi	r24, 0x21	; 33
     88c:	31 f4       	brne	.+12     	; 0x89a <rebootACKd+0x46>
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	88 23       	and	r24, r24
     892:	19 f0       	breq	.+6      	; 0x89a <rebootACKd+0x46>
			reboot();
     894:	0e 94 5f 1c 	call	0x38be	; 0x38be <reboot>
			return(NO);
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     89a:	0e 94 15 04 	call	0x82a	; 0x82a <send_EXprompt>
//			send_prompt('!');
			return(NO);
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <rebootACKd+0x4e>
		}
	}

	return(YES);
     8a0:	c1 e0       	ldi	r28, 0x01	; 1

}
     8a2:	8c 2f       	mov	r24, r28
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <send_GTprompt+0x6>
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     8b2:	8e e3       	ldi	r24, 0x3E	; 62
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5f       	subi	r22, 0xFF	; 255
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	cf 5f       	subi	r28, 0xFF	; 255
     8dc:	d1 09       	sbc	r29, r1
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];			// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	0e 94 bd 02 	call	0x57a	; 0x57a <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 2a 04 	call	0x854	; 0x854 <rebootACKd>
     8f2:	88 23       	and	r24, r24
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <commands+0x26>
     8f6:	71 c0       	rjmp	.+226    	; 0x9da <commands+0x108>
		return;
	}

	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {		// <CR> or ! alone are not errors
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	88 23       	and	r24, r24
     8fc:	11 f0       	breq	.+4      	; 0x902 <commands+0x30>
     8fe:	81 32       	cpi	r24, 0x21	; 33
     900:	29 f4       	brne	.+10     	; 0x90c <commands+0x3a>
		firstpass = NO;
     902:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <firstpass>
		send_GTprompt();
     906:	0e 94 54 04 	call	0x8a8	; 0x8a8 <send_GTprompt>
		return;
     90a:	67 c0       	rjmp	.+206    	; 0x9da <commands+0x108>
	}

	echo_cmd(cmdline);
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	0e 94 d5 03 	call	0x7aa	; 0x7aa <echo_cmd>

	parse_cmd(cmdline, cstack);
     914:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <parse_cmd>

	switch (pcmd[cstack].cverb) {
     920:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     924:	24 e3       	ldi	r18, 0x34	; 52
     926:	82 9f       	mul	r24, r18
     928:	f0 01       	movw	r30, r0
     92a:	11 24       	eor	r1, r1
     92c:	e8 5f       	subi	r30, 0xF8	; 248
     92e:	f7 4d       	sbci	r31, 0xD7	; 215
     930:	e0 81       	ld	r30, Z
     932:	4e 2f       	mov	r20, r30
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	fa 01       	movw	r30, r20
     938:	e9 54       	subi	r30, 0x49	; 73
     93a:	f1 09       	sbc	r31, r1
     93c:	ec 32       	cpi	r30, 0x2C	; 44
     93e:	f1 05       	cpc	r31, r1
     940:	d0 f5       	brcc	.+116    	; 0x9b6 <commands+0xe4>
     942:	e0 5b       	subi	r30, 0xB0	; 176
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     94a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <close_PNEU>
			break;
     94e:	39 c0       	rjmp	.+114    	; 0x9c2 <commands+0xf0>

		case 'o':				// open
			open_PNEU(cstack);
     950:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <open_PNEU>
			break;
     954:	36 c0       	rjmp	.+108    	; 0x9c2 <commands+0xf0>

		case 'm':				// move
			move_MOTOR(cstack);
     956:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <move_MOTOR>
			break;
     95a:	33 c0       	rjmp	.+102    	; 0x9c2 <commands+0xf0>

		case 'r':				// report
			report(cstack);
     95c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <report>
			break;
     960:	30 c0       	rjmp	.+96     	; 0x9c2 <commands+0xf0>

		case 's':				// set
			set(cstack);
     962:	0e 94 e6 18 	call	0x31cc	; 0x31cc <set>
			break;
     966:	2d c0       	rjmp	.+90     	; 0x9c2 <commands+0xf0>

		case 't':
			testroutine();
     968:	0e 94 4b 19 	call	0x3296	; 0x3296 <testroutine>
			break;
     96c:	2a c0       	rjmp	.+84     	; 0x9c2 <commands+0xf0>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     96e:	0e 94 28 18 	call	0x3050	; 0x3050 <init_MOTORS>
			break;
     972:	27 c0       	rjmp	.+78     	; 0x9c2 <commands+0xf0>

		case 'R':				// Reboot
			squelchErrors = YES;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			if (motorsMoving()) {
     97a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <motorsMoving>
     97e:	88 23       	and	r24, r24
     980:	49 f0       	breq	.+18     	; 0x994 <commands+0xc2>
				squelchErrors = NO;
     982:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
				printError(ERR_MOTORMOVING, "Can't reboot, motor moving");
     986:	63 e4       	ldi	r22, 0x43	; 67
     988:	7a e8       	ldi	r23, 0x8A	; 138
     98a:	84 e3       	ldi	r24, 0x34	; 52
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
				break;
     992:	17 c0       	rjmp	.+46     	; 0x9c2 <commands+0xf0>
			} else {
				saveFRAM_MOTOREncoders();
     994:	0e 94 d5 17 	call	0x2faa	; 0x2faa <saveFRAM_MOTOREncoders>
				timerSAVEENCODER = 0;
     998:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     99c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a0:	8a e6       	ldi	r24, 0x6A	; 106
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	81 50       	subi	r24, 0x01	; 1
     9a8:	90 40       	sbci	r25, 0x00	; 0
     9aa:	20 40       	sbci	r18, 0x00	; 0
     9ac:	e1 f7       	brne	.-8      	; 0x9a6 <commands+0xd4>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <commands+0xde>
				_delay_ms(100);		// Avoids finishing the command loop before reboot
				reboot();
     9b0:	0e 94 5f 1c 	call	0x38be	; 0x38be <reboot>
				return;
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <commands+0x108>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9b6:	6e e5       	ldi	r22, 0x5E	; 94
     9b8:	7a e8       	ldi	r23, 0x8A	; 138
     9ba:	89 ec       	ldi	r24, 0xC9	; 201
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9c2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	6a e0       	ldi	r22, 0x0A	; 10
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
     9d2:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	send_GTprompt();
     9d6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <send_GTprompt>

}
     9da:	c1 50       	subi	r28, 0x01	; 1
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	a0 97       	sbiw	r28, 0x20	; 32
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9fa:	40 e2       	ldi	r20, 0x20	; 32
     9fc:	ec e6       	ldi	r30, 0x6C	; 108
     9fe:	fa e8       	ldi	r31, 0x8A	; 138
     a00:	9e 01       	movw	r18, r28
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	d9 01       	movw	r26, r18
     a08:	01 90       	ld	r0, Z+
     a0a:	0d 92       	st	X+, r0
     a0c:	4a 95       	dec	r20
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     a10:	fb 01       	movw	r30, r22
     a12:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     a14:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     a16:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     a18:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     a1a:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     a1c:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     a1e:	1f 92       	push	r1
     a20:	bf 93       	push	r27
     a22:	1f 92       	push	r1
     a24:	af 93       	push	r26
     a26:	1f 92       	push	r1
     a28:	1f 93       	push	r17
     a2a:	1f 92       	push	r1
     a2c:	0f 93       	push	r16
     a2e:	1f 92       	push	r1
     a30:	5f 93       	push	r21
     a32:	1f 92       	push	r1
     a34:	4f 93       	push	r20
     a36:	3f 93       	push	r19
     a38:	2f 93       	push	r18
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>

}
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	a0 96       	adiw	r28, 0x20	; 32
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a56:	dc 01       	movw	r26, r24
     a58:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a5a:	81 89       	ldd	r24, Z+17	; 0x11
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	c0 97       	sbiw	r24, 0x30	; 48
     a60:	82 95       	swap	r24
     a62:	92 95       	swap	r25
     a64:	90 7f       	andi	r25, 0xF0	; 240
     a66:	98 27       	eor	r25, r24
     a68:	80 7f       	andi	r24, 0xF0	; 240
     a6a:	98 27       	eor	r25, r24
     a6c:	92 89       	ldd	r25, Z+18	; 0x12
     a6e:	90 53       	subi	r25, 0x30	; 48
     a70:	89 2b       	or	r24, r25
     a72:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a74:	86 85       	ldd	r24, Z+14	; 0x0e
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	c0 97       	sbiw	r24, 0x30	; 48
     a7a:	82 95       	swap	r24
     a7c:	92 95       	swap	r25
     a7e:	90 7f       	andi	r25, 0xF0	; 240
     a80:	98 27       	eor	r25, r24
     a82:	80 7f       	andi	r24, 0xF0	; 240
     a84:	98 27       	eor	r25, r24
     a86:	97 85       	ldd	r25, Z+15	; 0x0f
     a88:	90 53       	subi	r25, 0x30	; 48
     a8a:	89 2b       	or	r24, r25
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	8c 93       	st	X, r24
     a90:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a92:	83 85       	ldd	r24, Z+11	; 0x0b
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	c0 97       	sbiw	r24, 0x30	; 48
     a98:	82 95       	swap	r24
     a9a:	92 95       	swap	r25
     a9c:	90 7f       	andi	r25, 0xF0	; 240
     a9e:	98 27       	eor	r25, r24
     aa0:	80 7f       	andi	r24, 0xF0	; 240
     aa2:	98 27       	eor	r25, r24
     aa4:	94 85       	ldd	r25, Z+12	; 0x0c
     aa6:	90 53       	subi	r25, 0x30	; 48
     aa8:	89 2b       	or	r24, r25
     aaa:	12 96       	adiw	r26, 0x02	; 2
     aac:	8c 93       	st	X, r24
     aae:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	13 96       	adiw	r26, 0x03	; 3
     ab4:	8c 93       	st	X, r24
     ab6:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     ab8:	80 85       	ldd	r24, Z+8	; 0x08
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	c0 97       	sbiw	r24, 0x30	; 48
     abe:	82 95       	swap	r24
     ac0:	92 95       	swap	r25
     ac2:	90 7f       	andi	r25, 0xF0	; 240
     ac4:	98 27       	eor	r25, r24
     ac6:	80 7f       	andi	r24, 0xF0	; 240
     ac8:	98 27       	eor	r25, r24
     aca:	91 85       	ldd	r25, Z+9	; 0x09
     acc:	90 53       	subi	r25, 0x30	; 48
     ace:	89 2b       	or	r24, r25
     ad0:	14 96       	adiw	r26, 0x04	; 4
     ad2:	8c 93       	st	X, r24
     ad4:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     ad6:	25 81       	ldd	r18, Z+5	; 0x05
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	20 53       	subi	r18, 0x30	; 48
     adc:	31 09       	sbc	r19, r1
     ade:	22 95       	swap	r18
     ae0:	32 95       	swap	r19
     ae2:	30 7f       	andi	r19, 0xF0	; 240
     ae4:	32 27       	eor	r19, r18
     ae6:	20 7f       	andi	r18, 0xF0	; 240
     ae8:	32 27       	eor	r19, r18
     aea:	86 81       	ldd	r24, Z+6	; 0x06
     aec:	80 53       	subi	r24, 0x30	; 48
     aee:	28 2b       	or	r18, r24
     af0:	15 96       	adiw	r26, 0x05	; 5
     af2:	2c 93       	st	X, r18
     af4:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	20 53       	subi	r18, 0x30	; 48
     afc:	31 09       	sbc	r19, r1
     afe:	22 95       	swap	r18
     b00:	32 95       	swap	r19
     b02:	30 7f       	andi	r19, 0xF0	; 240
     b04:	32 27       	eor	r19, r18
     b06:	20 7f       	andi	r18, 0xF0	; 240
     b08:	32 27       	eor	r19, r18
     b0a:	83 81       	ldd	r24, Z+3	; 0x03
     b0c:	80 53       	subi	r24, 0x30	; 48
     b0e:	28 2b       	or	r18, r24
     b10:	16 96       	adiw	r26, 0x06	; 6
     b12:	2c 93       	st	X, r18
     b14:	08 95       	ret

00000b16 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     b28:	c8 2f       	mov	r28, r24
     b2a:	83 36       	cpi	r24, 0x63	; 99
     b2c:	19 f4       	brne	.+6      	; 0xb34 <read_DS3231+0x1e>
		stop_TWI();
     b2e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     b32:	26 c0       	rjmp	.+76     	; 0xb80 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     b3a:	c8 2f       	mov	r28, r24
     b3c:	83 36       	cpi	r24, 0x63	; 99
     b3e:	19 f4       	brne	.+6      	; 0xb46 <read_DS3231+0x30>
		stop_TWI();
     b40:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     b44:	1d c0       	rjmp	.+58     	; 0xb80 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	88 e6       	ldi	r24, 0x68	; 104
     b4a:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     b4e:	c8 2f       	mov	r28, r24
     b50:	83 36       	cpi	r24, 0x63	; 99
     b52:	61 f4       	brne	.+24     	; 0xb6c <read_DS3231+0x56>
		stop_TWI();
     b54:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     b58:	13 c0       	rjmp	.+38     	; 0xb80 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b5a:	87 01       	movw	r16, r14
     b5c:	0c 0f       	add	r16, r28
     b5e:	11 1d       	adc	r17, r1
     b60:	0e 94 8c 19 	call	0x3318	; 0x3318 <read_TWI>
     b64:	f8 01       	movw	r30, r16
     b66:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b68:	cf 5f       	subi	r28, 0xFF	; 255
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <read_DS3231+0x58>
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
     b6e:	c6 30       	cpi	r28, 0x06	; 6
     b70:	a0 f3       	brcs	.-24     	; 0xb5a <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b72:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
     b76:	f7 01       	movw	r30, r14
     b78:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b7a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	return(NOERROR);
     b7e:	c0 e0       	ldi	r28, 0x00	; 0

}
     b80:	8c 2f       	mov	r24, r28
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	27 97       	sbiw	r28, 0x07	; 7
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ba4:	be 01       	movw	r22, r28
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	88 e6       	ldi	r24, 0x68	; 104
     bac:	0e 94 8b 05 	call	0xb16	; 0xb16 <read_DS3231>
     bb0:	18 2f       	mov	r17, r24
     bb2:	83 36       	cpi	r24, 0x63	; 99
     bb4:	79 f4       	brne	.+30     	; 0xbd4 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     bb6:	6c e8       	ldi	r22, 0x8C	; 140
     bb8:	7a e8       	ldi	r23, 0x8A	; 138
     bba:	85 e6       	ldi	r24, 0x65	; 101
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		strcpy(isotime, "DateTime?");
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	ec e9       	ldi	r30, 0x9C	; 156
     bc6:	fa e8       	ldi	r31, 0x8A	; 138
     bc8:	d7 01       	movw	r26, r14
     bca:	01 90       	ld	r0, Z+
     bcc:	0d 92       	st	X+, r0
     bce:	8a 95       	dec	r24
     bd0:	e1 f7       	brne	.-8      	; 0xbca <get_time+0x3c>
		return(ERROR);
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     bd4:	be 01       	movw	r22, r28
     bd6:	6f 5f       	subi	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	c7 01       	movw	r24, r14
     bdc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <convert_ds2iso>
	return(NOERROR);
     be0:	10 e0       	ldi	r17, 0x00	; 0

}
     be2:	81 2f       	mov	r24, r17
     be4:	27 96       	adiw	r28, 0x07	; 7
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     c0a:	c8 2f       	mov	r28, r24
     c0c:	83 36       	cpi	r24, 0x63	; 99
     c0e:	19 f4       	brne	.+6      	; 0xc16 <write_DS3231+0x20>
		stop_TWI();
     c10:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     c14:	20 c0       	rjmp	.+64     	; 0xc56 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     c1c:	c8 2f       	mov	r28, r24
     c1e:	83 36       	cpi	r24, 0x63	; 99
     c20:	a1 f4       	brne	.+40     	; 0xc4a <write_DS3231+0x54>
		stop_TWI();
     c22:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     c26:	17 c0       	rjmp	.+46     	; 0xc56 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c28:	78 01       	movw	r14, r16
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	e8 1a       	sub	r14, r24
     c2e:	f8 0a       	sbc	r15, r24
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     c38:	c8 2f       	mov	r28, r24
     c3a:	83 36       	cpi	r24, 0x63	; 99
     c3c:	19 f4       	brne	.+6      	; 0xc44 <write_DS3231+0x4e>
			stop_TWI();
     c3e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
			return(ERROR);
     c42:	09 c0       	rjmp	.+18     	; 0xc56 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c44:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c46:	87 01       	movw	r16, r14
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <write_DS3231+0x56>
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c4c:	d7 30       	cpi	r29, 0x07	; 7
     c4e:	60 f3       	brcs	.-40     	; 0xc28 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c50:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	return(NOERROR);
     c54:	c0 e0       	ldi	r28, 0x00	; 0

}
     c56:	8c 2f       	mov	r24, r28
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	27 97       	sbiw	r28, 0x07	; 7
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c76:	bc 01       	movw	r22, r24
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 2b 05 	call	0xa56	; 0xa56 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c80:	be 01       	movw	r22, r28
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	88 e6       	ldi	r24, 0x68	; 104
     c88:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <write_DS3231>
     c8c:	18 2f       	mov	r17, r24
     c8e:	83 36       	cpi	r24, 0x63	; 99
     c90:	39 f4       	brne	.+14     	; 0xca0 <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c92:	66 ea       	ldi	r22, 0xA6	; 166
     c94:	7a e8       	ldi	r23, 0x8A	; 138
     c96:	86 e6       	ldi	r24, 0x66	; 102
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <put_time+0x3c>
	}
	return(NOERROR);
     ca0:	10 e0       	ldi	r17, 0x00	; 0

}
     ca2:	81 2f       	mov	r24, r17
     ca4:	27 96       	adiw	r28, 0x07	; 7
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cb2:	45 e1       	ldi	r20, 0x15	; 21
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	6b e0       	ldi	r22, 0x0B	; 11
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <eeprom_read_block>
     cbe:	08 95       	ret

00000cc0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     cc0:	4b e0       	ldi	r20, 0x0B	; 11
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <eeprom_read_block>
     ccc:	08 95       	ret

00000cce <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	65 97       	sbiw	r28, 0x15	; 21
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ce4:	45 e1       	ldi	r20, 0x15	; 21
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	6b e0       	ldi	r22, 0x0B	; 11
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 d7 24 	call	0x49ae	; 0x49ae <eeprom_update_block>

}
     cf4:	65 96       	adiw	r28, 0x15	; 21
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <update_VERSION>:

void update_VERSION(void)
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	2b 97       	sbiw	r28, 0x0b	; 11
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     d0e:	8b e0       	ldi	r24, 0x0B	; 11
     d10:	e6 eb       	ldi	r30, 0xB6	; 182
     d12:	fa e8       	ldi	r31, 0x8A	; 138
     d14:	de 01       	movw	r26, r28
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	01 90       	ld	r0, Z+
     d1a:	0d 92       	st	X+, r0
     d1c:	8a 95       	dec	r24
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     d20:	4b e0       	ldi	r20, 0x0B	; 11
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <eeprom_update_block>

}
     d30:	2b 96       	adiw	r28, 0x0b	; 11
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d3c:	0e 94 67 06 	call	0xcce	; 0xcce <update_BOOTTIME>
	update_VERSION();
     d40:	0e 94 80 06 	call	0xd00	; 0xd00 <update_VERSION>
     d44:	08 95       	ret

00000d46 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	c8 50       	subi	r28, 0x08	; 8
     d54:	d1 40       	sbci	r29, 0x01	; 1
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	e1 ec       	ldi	r30, 0xC1	; 193
     d5e:	fa e8       	ldi	r31, 0x8A	; 138
     d60:	de 01       	movw	r26, r28
     d62:	a1 50       	subi	r26, 0x01	; 1
     d64:	bf 4f       	sbci	r27, 0xFF	; 255
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	2a 95       	dec	r18
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <printError+0x20>

	if (!squelchErrors) {
     d6e:	20 91 06 28 	lds	r18, 0x2806	; 0x802806 <squelchErrors>
     d72:	21 11       	cpse	r18, r1
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     d76:	7f 93       	push	r23
     d78:	6f 93       	push	r22
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	ce 01       	movw	r24, r28
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	9f 93       	push	r25
     d86:	8f 93       	push	r24
     d88:	8e 01       	movw	r16, r28
     d8a:	0f 5f       	subi	r16, 0xFF	; 255
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	1f 93       	push	r17
     d90:	0f 93       	push	r16
     d92:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
		printLine(strbuf);
     d96:	c8 01       	movw	r24, r16
     d98:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	de bf       	out	0x3e, r29	; 62
	}

}
     da0:	c8 5f       	subi	r28, 0xF8	; 248
     da2:	de 4f       	sbci	r29, 0xFE	; 254
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     db2:	cf 92       	push	r12
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	d8 2f       	mov	r29, r24
     dc4:	d6 2e       	mov	r13, r22
     dc6:	07 2f       	mov	r16, r23
     dc8:	7a 01       	movw	r14, r20
     dca:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     dd2:	c8 2f       	mov	r28, r24
     dd4:	83 36       	cpi	r24, 0x63	; 99
     dd6:	19 f4       	brne	.+6      	; 0xdde <read_FRAM+0x2c>
		stop_TWI();
     dd8:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
     ddc:	2e c0       	rjmp	.+92     	; 0xe3a <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     dde:	80 2f       	mov	r24, r16
     de0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     de4:	c8 2f       	mov	r28, r24
     de6:	83 36       	cpi	r24, 0x63	; 99
     de8:	41 f1       	breq	.+80     	; 0xe3a <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     dea:	8d 2d       	mov	r24, r13
     dec:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     df0:	c8 2f       	mov	r28, r24
     df2:	83 36       	cpi	r24, 0x63	; 99
     df4:	11 f1       	breq	.+68     	; 0xe3a <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	8d 2f       	mov	r24, r29
     dfa:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     dfe:	c8 2f       	mov	r28, r24
     e00:	83 36       	cpi	r24, 0x63	; 99
     e02:	d9 f0       	breq	.+54     	; 0xe3a <read_FRAM+0x88>
     e04:	c0 e0       	ldi	r28, 0x00	; 0
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     e08:	67 01       	movw	r12, r14
     e0a:	cc 0e       	add	r12, r28
     e0c:	d1 1c       	adc	r13, r1
     e0e:	0e 94 8c 19 	call	0x3318	; 0x3318 <read_TWI>
     e12:	f6 01       	movw	r30, r12
     e14:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     e16:	cf 5f       	subi	r28, 0xFF	; 255
     e18:	2c 2f       	mov	r18, r28
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 2f       	mov	r24, r17
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	84 f3       	brlt	.-32     	; 0xe08 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     e28:	ec 01       	movw	r28, r24
     e2a:	ce 0d       	add	r28, r14
     e2c:	df 1d       	adc	r29, r15
     e2e:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
     e32:	88 83       	st	Y, r24

	stop_TWI();
     e34:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	return(NOERROR);
     e38:	c0 e0       	ldi	r28, 0x00	; 0

}
     e3a:	8c 2f       	mov	r24, r28
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	08 95       	ret

00000e4e <get_SETTIME>:
#include "errors.h"
#include "twi.h"
#include "fram.h"

uint8_t get_SETTIME(char *lastsettime)
{
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2a 97       	sbiw	r28, 0x0a	; 10
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e64:	8a e0       	ldi	r24, 0x0A	; 10
     e66:	eb ec       	ldi	r30, 0xCB	; 203
     e68:	fa e8       	ldi	r31, 0x8A	; 138
     e6a:	de 01       	movw	r26, r28
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	01 90       	ld	r0, Z+
     e70:	0d 92       	st	X+, r0
     e72:	8a 95       	dec	r24
     e74:	e1 f7       	brne	.-8      	; 0xe6e <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e76:	24 e1       	ldi	r18, 0x14	; 20
     e78:	a7 01       	movw	r20, r14
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e5       	ldi	r24, 0x50	; 80
     e80:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <read_FRAM>
     e84:	18 2f       	mov	r17, r24
     e86:	83 36       	cpi	r24, 0x63	; 99
     e88:	39 f4       	brne	.+14     	; 0xe98 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e8a:	be 01       	movw	r22, r28
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	c7 01       	movw	r24, r14
     e92:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <strcpy>
		return(ERROR);
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e98:	10 e0       	ldi	r17, 0x00	; 0
}
     e9a:	81 2f       	mov	r24, r17
     e9c:	2a 96       	adiw	r28, 0x0a	; 10
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	08 95       	ret

00000eae <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	f6 2e       	mov	r15, r22
     ebc:	17 2f       	mov	r17, r23
     ebe:	ea 01       	movw	r28, r20
     ec0:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
     ec8:	83 36       	cpi	r24, 0x63	; 99
     eca:	e1 f0       	breq	.+56     	; 0xf04 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     ecc:	81 2f       	mov	r24, r17
     ece:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     ed2:	83 36       	cpi	r24, 0x63	; 99
     ed4:	b9 f0       	breq	.+46     	; 0xf04 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     ed6:	8f 2d       	mov	r24, r15
     ed8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     edc:	83 36       	cpi	r24, 0x63	; 99
     ede:	91 f0       	breq	.+36     	; 0xf04 <write_FRAM+0x56>
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ee4:	7e 01       	movw	r14, r28
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	e8 1a       	sub	r14, r24
     eea:	f8 0a       	sbc	r15, r24
     eec:	88 81       	ld	r24, Y
     eee:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
     ef2:	83 36       	cpi	r24, 0x63	; 99
     ef4:	39 f0       	breq	.+14     	; 0xf04 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ef6:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ef8:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     efa:	10 17       	cp	r17, r16
     efc:	98 f3       	brcs	.-26     	; 0xee4 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     efe:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	return(NOERROR);
     f02:	80 e0       	ldi	r24, 0x00	; 0

}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	08 95       	ret

00000f12 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     f12:	8f 92       	push	r8
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <get_humidity+0x1a>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <get_humidity+0x1c>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	59 f0       	breq	.+22     	; 0xf4c <get_humidity+0x3a>
     f36:	18 f0       	brcs	.+6      	; 0xf3e <get_humidity+0x2c>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	79 f0       	breq	.+30     	; 0xf5a <get_humidity+0x48>
     f3c:	15 c0       	rjmp	.+42     	; 0xf68 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
     f44:	6b 01       	movw	r12, r22
     f46:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     f48:	40 e4       	ldi	r20, 0x40	; 64
			break;
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
     f52:	6b 01       	movw	r12, r22
     f54:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f56:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f58:	10 c0       	rjmp	.+32     	; 0xf7a <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
     f60:	6b 01       	movw	r12, r22
     f62:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f64:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f68:	0f 2e       	mov	r0, r31
     f6a:	c1 2c       	mov	r12, r1
     f6c:	d1 2c       	mov	r13, r1
     f6e:	f0 ea       	ldi	r31, 0xA0	; 160
     f70:	ef 2e       	mov	r14, r31
     f72:	f1 e4       	ldi	r31, 0x41	; 65
     f74:	ff 2e       	mov	r15, r31
     f76:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f78:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f7a:	8e 01       	movw	r16, r28
     f7c:	0f 5f       	subi	r16, 0xFF	; 255
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	20 e8       	ldi	r18, 0x80	; 128
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	88 e4       	ldi	r24, 0x48	; 72
     f86:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_ADS1115>
     f8a:	83 36       	cpi	r24, 0x63	; 99
     f8c:	79 f1       	breq	.+94     	; 0xfec <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 ea       	ldi	r20, 0xA0	; 160
     f94:	50 e4       	ldi	r21, 0x40	; 64
     f96:	69 81       	ldd	r22, Y+1	; 0x01
     f98:	7a 81       	ldd	r23, Y+2	; 0x02
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__divsf3>
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	37 ed       	ldi	r19, 0xD7	; 215
     fa6:	43 e2       	ldi	r20, 0x23	; 35
     fa8:	5e e3       	ldi	r21, 0x3E	; 62
     faa:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__subsf3>
     fae:	2f e5       	ldi	r18, 0x5F	; 95
     fb0:	39 e2       	ldi	r19, 0x29	; 41
     fb2:	4b ec       	ldi	r20, 0xCB	; 203
     fb4:	5b e3       	ldi	r21, 0x3B	; 59
     fb6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__divsf3>
     fba:	4b 01       	movw	r8, r22
     fbc:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     fbe:	29 ec       	ldi	r18, 0xC9	; 201
     fc0:	3e e8       	ldi	r19, 0x8E	; 142
     fc2:	4d e0       	ldi	r20, 0x0D	; 13
     fc4:	5b e3       	ldi	r21, 0x3B	; 59
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	62 e2       	ldi	r22, 0x22	; 34
     fd4:	7d ef       	ldi	r23, 0xFD	; 253
     fd6:	86 e8       	ldi	r24, 0x86	; 134
     fd8:	9f e3       	ldi	r25, 0x3F	; 63
     fda:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__subsf3>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	c5 01       	movw	r24, r10
     fe4:	b4 01       	movw	r22, r8
     fe6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__divsf3>
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e8       	ldi	r23, 0x80	; 128
     ff0:	86 e2       	ldi	r24, 0x26	; 38
     ff2:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     ff4:	24 96       	adiw	r28, 0x04	; 4
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	08 95       	ret

00001014 <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
    1014:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <init_PORTS>
	init_XPORT();
    1018:	0e 94 90 1c 	call	0x3920	; 0x3920 <init_XPORT>
//	init_BEEPER();
	init_TWI();
    101c:	0e 94 81 19 	call	0x3302	; 0x3302 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 96 18 	call	0x312c	; 0x312c <init_RTC>
	init_USART();
    1028:	0e 94 13 1a 	call	0x3426	; 0x3426 <init_USART>
    102c:	08 95       	ret

0000102e <initialize1>:

}

void initialize1(void)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	2b 97       	sbiw	r28, 0x0b	; 11
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    103c:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <rebootackd>
//	rebootackd = YES;
	init_MOTORS();
    1040:	0e 94 28 18 	call	0x3050	; 0x3050 <init_MOTORS>
	init_MMA8451();
    1044:	0e 94 b3 0a 	call	0x1566	; 0x1566 <init_MMA8451>
	init_PNEU();
    1048:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <init_PNEU>
	init_OLED();
    104c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <init_OLED>
	init_EEPROM();	// Needs TWI
    1050:	0e 94 9e 06 	call	0xd3c	; 0xd3c <init_EEPROM>
	timerOLED = 0;
    1054:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    1058:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    105c:	80 ee       	ldi	r24, 0xE0	; 224
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timeoutOLED>
    1064:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <timeoutOLED+0x1>
	get_VERSION(versionstr);
    1068:	ce 01       	movw	r24, r28
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	65 ed       	ldi	r22, 0xD5	; 213
    1074:	7a e8       	ldi	r23, 0x8A	; 138
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    107c:	42 e0       	ldi	r20, 0x02	; 2
    107e:	be 01       	movw	r22, r28
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>

}
    108a:	2b 96       	adiw	r28, 0x0b	; 11
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <read_ionpump+0x12>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <read_ionpump+0x14>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	21 f0       	breq	.+8      	; 0x10ba <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	c1 f5       	brne	.+112    	; 0x1126 <read_ionpump+0x90>
		pins = AIN23;
    10b6:	40 e3       	ldi	r20, 0x30	; 48
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    10ba:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    10bc:	8e 01       	movw	r16, r28
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	20 e8       	ldi	r18, 0x80	; 128
    10c4:	62 e0       	ldi	r22, 0x02	; 2
    10c6:	89 e4       	ldi	r24, 0x49	; 73
    10c8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_ADS1115>
    10cc:	83 36       	cpi	r24, 0x63	; 99
    10ce:	81 f1       	breq	.+96     	; 0x1130 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10d0:	c9 80       	ldd	r12, Y+1	; 0x01
    10d2:	da 80       	ldd	r13, Y+2	; 0x02
    10d4:	eb 80       	ldd	r14, Y+3	; 0x03
    10d6:	fc 80       	ldd	r15, Y+4	; 0x04
    10d8:	2d ec       	ldi	r18, 0xCD	; 205
    10da:	3c ec       	ldi	r19, 0xCC	; 204
    10dc:	4c ec       	ldi	r20, 0xCC	; 204
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	c7 01       	movw	r24, r14
    10e2:	b6 01       	movw	r22, r12
    10e4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__cmpsf2>
    10e8:	88 23       	and	r24, r24
    10ea:	3c f1       	brlt	.+78     	; 0x113a <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e4       	ldi	r21, 0x40	; 64
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__gesf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	14 f1       	brlt	.+68     	; 0x1144 <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    1100:	29 e7       	ldi	r18, 0x79	; 121
    1102:	39 ee       	ldi	r19, 0xE9	; 233
    1104:	42 e0       	ldi	r20, 0x02	; 2
    1106:	50 e4       	ldi	r21, 0x40	; 64
    1108:	c7 01       	movw	r24, r14
    110a:	b6 01       	movw	r22, r12
    110c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    1110:	2e e6       	ldi	r18, 0x6E	; 110
    1112:	33 ea       	ldi	r19, 0xA3	; 163
    1114:	4b ed       	ldi	r20, 0xDB	; 219
    1116:	50 e4       	ldi	r21, 0x40	; 64
    1118:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__subsf3>
	return(vacuum);
    111c:	56 2f       	mov	r21, r22
    111e:	47 2f       	mov	r20, r23
    1120:	38 2f       	mov	r19, r24
    1122:	29 2f       	mov	r18, r25
    1124:	13 c0       	rjmp	.+38     	; 0x114c <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	36 e2       	ldi	r19, 0x26	; 38
    112c:	24 ec       	ldi	r18, 0xC4	; 196
    112e:	0e c0       	rjmp	.+28     	; 0x114c <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	36 e2       	ldi	r19, 0x26	; 38
    1136:	24 ec       	ldi	r18, 0xC4	; 196
    1138:	09 c0       	rjmp	.+18     	; 0x114c <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	36 e2       	ldi	r19, 0x26	; 38
    1140:	24 ec       	ldi	r18, 0xC4	; 196
    1142:	04 c0       	rjmp	.+8      	; 0x114c <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	36 e2       	ldi	r19, 0x26	; 38
    114a:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    114c:	65 2f       	mov	r22, r21
    114e:	74 2f       	mov	r23, r20
    1150:	83 2f       	mov	r24, r19
    1152:	92 2f       	mov	r25, r18
    1154:	24 96       	adiw	r28, 0x04	; 4
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	08 95       	ret

0000116c <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <firstpass>
	squelchErrors = YES;
    1172:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
	initialize0();
    1176:	0e 94 0a 08 	call	0x1014	; 0x1014 <initialize0>
	sei();
    117a:	78 94       	sei
	initialize1();
    117c:	0e 94 17 08 	call	0x102e	; 0x102e <initialize1>
	squelchErrors = NO;
    1180:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1184:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <recv0_buf+0x103>
    1188:	88 23       	and	r24, r24
    118a:	21 f0       	breq	.+8      	; 0x1194 <main+0x28>
			recv0_buf.done = NO;
    118c:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
			commands();
    1190:	0e 94 69 04 	call	0x8d2	; 0x8d2 <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1194:	20 91 10 2a 	lds	r18, 0x2A10	; 0x802a10 <timerOLED>
    1198:	30 91 11 2a 	lds	r19, 0x2A11	; 0x802a11 <timerOLED+0x1>
    119c:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <timeoutOLED>
    11a0:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <timeoutOLED+0x1>
    11a4:	82 17       	cp	r24, r18
    11a6:	93 07       	cpc	r25, r19
    11a8:	78 f4       	brcc	.+30     	; 0x11c8 <main+0x5c>
			squelchErrors = YES;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			clear_OLED(0);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
			clear_OLED(1);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
			timerOLED = 0;
    11bc:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    11c0:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>
			squelchErrors = NO;
    11c4:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    11c8:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    11cc:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <timeoutSAVEENCODER>
    11d0:	89 17       	cp	r24, r25
    11d2:	c0 f6       	brcc	.-80     	; 0x1184 <main+0x18>
    11d4:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <rebootackd>
    11d8:	88 23       	and	r24, r24
    11da:	a1 f2       	breq	.-88     	; 0x1184 <main+0x18>
			squelchErrors = YES;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			saveFRAM_MOTOREncoders();
    11e2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <saveFRAM_MOTOREncoders>
			timerSAVEENCODER = 0;
    11e6:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
			squelchErrors = NO;
    11ea:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
    11ee:	ca cf       	rjmp	.-108    	; 0x1184 <main+0x18>

000011f0 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	c8 2f       	mov	r28, r24
    11f6:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    11fe:	83 36       	cpi	r24, 0x63	; 99
    1200:	51 f4       	brne	.+20     	; 0x1216 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1202:	66 ee       	ldi	r22, 0xE6	; 230
    1204:	7a e8       	ldi	r23, 0x8A	; 138
    1206:	82 e9       	ldi	r24, 0x92	; 146
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		stop_TWI();
    120e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(0xFF);
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    1216:	8d 2f       	mov	r24, r29
    1218:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
	start_TWI(addr, TWIREAD);
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	8c 2f       	mov	r24, r28
    1220:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
	value = readlast_TWI();
    1224:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
    1228:	c8 2f       	mov	r28, r24
	stop_TWI();
    122a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
	return(value);
    122e:	8c 2f       	mov	r24, r28

}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	d6 2f       	mov	r29, r22
    123e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    1246:	c8 2f       	mov	r28, r24
    1248:	83 36       	cpi	r24, 0x63	; 99
    124a:	49 f4       	brne	.+18     	; 0x125e <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    124c:	6a ef       	ldi	r22, 0xFA	; 250
    124e:	7a e8       	ldi	r23, 0x8A	; 138
    1250:	82 e9       	ldi	r24, 0x92	; 146
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		stop_TWI();
    1258:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    125e:	8d 2f       	mov	r24, r29
    1260:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
    1264:	88 23       	and	r24, r24
    1266:	21 f0       	breq	.+8      	; 0x1270 <write_MCP23008+0x3a>
		stop_TWI();
    1268:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
    126c:	c3 e6       	ldi	r28, 0x63	; 99
    126e:	0c c0       	rjmp	.+24     	; 0x1288 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1270:	81 2f       	mov	r24, r17
    1272:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
    1276:	88 23       	and	r24, r24
    1278:	21 f0       	breq	.+8      	; 0x1282 <write_MCP23008+0x4c>
		stop_TWI();
    127a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
    127e:	c3 e6       	ldi	r28, 0x63	; 99
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <write_MCP23008+0x52>
	}
	stop_TWI();
    1282:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
	return(NOERROR);
    1286:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1288:	8c 2f       	mov	r24, r28
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	08 95       	ret

00001292 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	88 e1       	ldi	r24, 0x18	; 24
    12aa:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    12ae:	83 36       	cpi	r24, 0x63	; 99
    12b0:	51 f4       	brne	.+20     	; 0x12c6 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e8       	ldi	r21, 0x80	; 128
    12b6:	66 e2       	ldi	r22, 0x26	; 38
    12b8:	74 ec       	ldi	r23, 0xC4	; 196
    12ba:	f8 01       	movw	r30, r16
    12bc:	40 83       	st	Z, r20
    12be:	51 83       	std	Z+1, r21	; 0x01
    12c0:	62 83       	std	Z+2, r22	; 0x02
    12c2:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    12c4:	43 c0       	rjmp	.+134    	; 0x134c <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    12c6:	85 e0       	ldi	r24, 0x05	; 5
    12c8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	88 e1       	ldi	r24, 0x18	; 24
    12d0:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
	highbyte = read_TWI();
    12d4:	0e 94 8c 19 	call	0x3318	; 0x3318 <read_TWI>
    12d8:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    12da:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
    12de:	d8 2f       	mov	r29, r24
	stop_TWI();
    12e0:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    12e4:	fc 2f       	mov	r31, r28
    12e6:	f0 71       	andi	r31, 0x10	; 16
    12e8:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    12ea:	6c 2f       	mov	r22, r28
    12ec:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    1304:	4b 01       	movw	r8, r22
    1306:	5c 01       	movw	r10, r24
    1308:	6d 2f       	mov	r22, r29
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5d e3       	ldi	r21, 0x3D	; 61
    131c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	c5 01       	movw	r24, r10
    1326:	b4 01       	movw	r22, r8
    1328:	0e 94 9d 1c 	call	0x393a	; 0x393a <__addsf3>
	if (sign) {
    132c:	ff 20       	and	r15, r15
    132e:	41 f0       	breq	.+16     	; 0x1340 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	93 e4       	ldi	r25, 0x43	; 67
    133c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__subsf3>
	}
	*temperature = temp;
    1340:	f8 01       	movw	r30, r16
    1342:	60 83       	st	Z, r22
    1344:	71 83       	std	Z+1, r23	; 0x01
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    134a:	80 e0       	ldi	r24, 0x00	; 0
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	f8 2e       	mov	r15, r24
    136e:	e6 2e       	mov	r14, r22
    1370:	ea 01       	movw	r28, r20
    1372:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    137a:	18 2f       	mov	r17, r24
    137c:	83 36       	cpi	r24, 0x63	; 99
    137e:	19 f4       	brne	.+6      	; 0x1386 <read_MMA8451+0x26>
		stop_TWI();
    1380:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
    1384:	23 c0       	rjmp	.+70     	; 0x13cc <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1386:	8e 2d       	mov	r24, r14
    1388:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
    138c:	18 2f       	mov	r17, r24
    138e:	83 36       	cpi	r24, 0x63	; 99
    1390:	e9 f0       	breq	.+58     	; 0x13cc <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	8f 2d       	mov	r24, r15
    1396:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    139a:	18 2f       	mov	r17, r24
    139c:	83 36       	cpi	r24, 0x63	; 99
    139e:	69 f4       	brne	.+26     	; 0x13ba <read_MMA8451+0x5a>
		stop_TWI();
    13a0:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(ERROR);
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    13a6:	7e 01       	movw	r14, r28
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	e8 1a       	sub	r14, r24
    13ac:	f8 0a       	sbc	r15, r24
    13ae:	0e 94 8c 19 	call	0x3318	; 0x3318 <read_TWI>
    13b2:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13b4:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    13b6:	e7 01       	movw	r28, r14
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <read_MMA8451+0x5c>
    13ba:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13bc:	10 17       	cp	r17, r16
    13be:	98 f3       	brcs	.-26     	; 0x13a6 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    13c0:	0e 94 9c 19 	call	0x3338	; 0x3338 <readlast_TWI>
    13c4:	88 83       	st	Y, r24
	stop_TWI();
    13c6:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
	return(NOERROR);
    13ca:	10 e0       	ldi	r17, 0x00	; 0

}
    13cc:	81 2f       	mov	r24, r17
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	08 95       	ret

000013dc <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	26 97       	sbiw	r28, 0x06	; 6
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	6c 01       	movw	r12, r24
    13f8:	7b 01       	movw	r14, r22
    13fa:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e8       	ldi	r25, 0x80	; 128
    1400:	a6 e2       	ldi	r26, 0x26	; 38
    1402:	b4 ec       	ldi	r27, 0xC4	; 196
    1404:	fa 01       	movw	r30, r20
    1406:	80 83       	st	Z, r24
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	a2 83       	std	Z+2, r26	; 0x02
    140c:	b3 83       	std	Z+3, r27	; 0x03
    140e:	fb 01       	movw	r30, r22
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
    1418:	f6 01       	movw	r30, r12
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1422:	26 e0       	ldi	r18, 0x06	; 6
    1424:	ae 01       	movw	r20, r28
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	8d e1       	ldi	r24, 0x1D	; 29
    142e:	0e 94 b0 09 	call	0x1360	; 0x1360 <read_MMA8451>
    1432:	83 36       	cpi	r24, 0x63	; 99
    1434:	09 f4       	brne	.+2      	; 0x1438 <get_orientation+0x5c>
    1436:	61 c0       	rjmp	.+194    	; 0x14fa <get_orientation+0x11e>
		return(ERROR);
	}

	ix = datain[0];
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    143c:	98 2f       	mov	r25, r24
    143e:	88 27       	eor	r24, r24
	ix |= datain[1];
    1440:	2a 81       	ldd	r18, Y+2	; 0x02
    1442:	82 2b       	or	r24, r18
	ix /= 4;
    1444:	bc 01       	movw	r22, r24
    1446:	77 23       	and	r23, r23
    1448:	14 f4       	brge	.+4      	; 0x144e <get_orientation+0x72>
    144a:	6d 5f       	subi	r22, 0xFD	; 253
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	75 95       	asr	r23
    1450:	67 95       	ror	r22
    1452:	75 95       	asr	r23
    1454:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1456:	07 2e       	mov	r0, r23
    1458:	00 0c       	add	r0, r0
    145a:	88 0b       	sbc	r24, r24
    145c:	99 0b       	sbc	r25, r25
    145e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    1462:	26 e6       	ldi	r18, 0x66	; 102
    1464:	36 e2       	ldi	r19, 0x26	; 38
    1466:	45 e7       	ldi	r20, 0x75	; 117
    1468:	5e e3       	ldi	r21, 0x3E	; 62
    146a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    146e:	f6 01       	movw	r30, r12
    1470:	60 83       	st	Z, r22
    1472:	71 83       	std	Z+1, r23	; 0x01
    1474:	82 83       	std	Z+2, r24	; 0x02
    1476:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    147c:	98 2f       	mov	r25, r24
    147e:	88 27       	eor	r24, r24
	iy |= datain[3];
    1480:	2c 81       	ldd	r18, Y+4	; 0x04
    1482:	82 2b       	or	r24, r18
	iy /= 4;
    1484:	bc 01       	movw	r22, r24
    1486:	77 23       	and	r23, r23
    1488:	14 f4       	brge	.+4      	; 0x148e <get_orientation+0xb2>
    148a:	6d 5f       	subi	r22, 0xFD	; 253
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	75 95       	asr	r23
    1490:	67 95       	ror	r22
    1492:	75 95       	asr	r23
    1494:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1496:	07 2e       	mov	r0, r23
    1498:	00 0c       	add	r0, r0
    149a:	88 0b       	sbc	r24, r24
    149c:	99 0b       	sbc	r25, r25
    149e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    14a2:	26 e6       	ldi	r18, 0x66	; 102
    14a4:	36 e2       	ldi	r19, 0x26	; 38
    14a6:	45 e7       	ldi	r20, 0x75	; 117
    14a8:	5e e3       	ldi	r21, 0x3E	; 62
    14aa:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    14ae:	f7 01       	movw	r30, r14
    14b0:	60 83       	st	Z, r22
    14b2:	71 83       	std	Z+1, r23	; 0x01
    14b4:	82 83       	std	Z+2, r24	; 0x02
    14b6:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    14bc:	98 2f       	mov	r25, r24
    14be:	88 27       	eor	r24, r24
	iz |= datain[5];
    14c0:	2e 81       	ldd	r18, Y+6	; 0x06
    14c2:	82 2b       	or	r24, r18
	iz /= 4;
    14c4:	bc 01       	movw	r22, r24
    14c6:	77 23       	and	r23, r23
    14c8:	14 f4       	brge	.+4      	; 0x14ce <get_orientation+0xf2>
    14ca:	6d 5f       	subi	r22, 0xFD	; 253
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	75 95       	asr	r23
    14d0:	67 95       	ror	r22
    14d2:	75 95       	asr	r23
    14d4:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    14d6:	07 2e       	mov	r0, r23
    14d8:	00 0c       	add	r0, r0
    14da:	88 0b       	sbc	r24, r24
    14dc:	99 0b       	sbc	r25, r25
    14de:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    14e2:	26 e6       	ldi	r18, 0x66	; 102
    14e4:	36 e2       	ldi	r19, 0x26	; 38
    14e6:	45 e7       	ldi	r20, 0x75	; 117
    14e8:	5e e3       	ldi	r21, 0x3E	; 62
    14ea:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    14ee:	f8 01       	movw	r30, r16
    14f0:	60 83       	st	Z, r22
    14f2:	71 83       	std	Z+1, r23	; 0x01
    14f4:	82 83       	std	Z+2, r24	; 0x02
    14f6:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    14f8:	80 e0       	ldi	r24, 0x00	; 0

}
    14fa:	26 96       	adiw	r28, 0x06	; 6
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	d6 2f       	mov	r29, r22
    151a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
    1522:	c8 2f       	mov	r28, r24
    1524:	88 23       	and	r24, r24
    1526:	21 f0       	breq	.+8      	; 0x1530 <write_MMA8451+0x1e>
		stop_TWI();
    1528:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(retval);
    152c:	8c 2f       	mov	r24, r28
    152e:	17 c0       	rjmp	.+46     	; 0x155e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1530:	8d 2f       	mov	r24, r29
    1532:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
    1536:	c8 2f       	mov	r28, r24
    1538:	88 23       	and	r24, r24
    153a:	21 f0       	breq	.+8      	; 0x1544 <write_MMA8451+0x32>
		stop_TWI();
    153c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(retval);
    1540:	8c 2f       	mov	r24, r28
    1542:	0d c0       	rjmp	.+26     	; 0x155e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1544:	81 2f       	mov	r24, r17
    1546:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
    154a:	c8 2f       	mov	r28, r24
    154c:	88 23       	and	r24, r24
    154e:	21 f0       	breq	.+8      	; 0x1558 <write_MMA8451+0x46>
		stop_TWI();
    1550:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
		return(retval);
    1554:	8c 2f       	mov	r24, r28
    1556:	03 c0       	rjmp	.+6      	; 0x155e <write_MMA8451+0x4c>
	}
	stop_TWI();
    1558:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>
	return(0);
    155c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	08 95       	ret

00001566 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	1f 92       	push	r1
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1570:	40 e4       	ldi	r20, 0x40	; 64
    1572:	6b e2       	ldi	r22, 0x2B	; 43
    1574:	8d e1       	ldi	r24, 0x1D	; 29
    1576:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	6b e2       	ldi	r22, 0x2B	; 43
    1584:	8d e1       	ldi	r24, 0x1D	; 29
    1586:	0e 94 b0 09 	call	0x1360	; 0x1360 <read_MMA8451>
	while (retval & 0x40) {
    158a:	08 c0       	rjmp	.+16     	; 0x159c <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	ae 01       	movw	r20, r28
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	6b e2       	ldi	r22, 0x2B	; 43
    1596:	8d e1       	ldi	r24, 0x1D	; 29
    1598:	0e 94 b0 09 	call	0x1360	; 0x1360 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	86 fd       	sbrc	r24, 6
    15a0:	f5 cf       	rjmp	.-22     	; 0x158c <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    15a2:	40 ec       	ldi	r20, 0xC0	; 192
    15a4:	6f e0       	ldi	r22, 0x0F	; 15
    15a6:	8d e1       	ldi	r24, 0x1D	; 29
    15a8:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    15ac:	42 e0       	ldi	r20, 0x02	; 2
    15ae:	6b e2       	ldi	r22, 0x2B	; 43
    15b0:	8d e1       	ldi	r24, 0x1D	; 29
    15b2:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    15b6:	4d e3       	ldi	r20, 0x3D	; 61
    15b8:	6a e2       	ldi	r22, 0x2A	; 42
    15ba:	8d e1       	ldi	r24, 0x1D	; 29
    15bc:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

	return(retval);

}
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	0f 90       	pop	r0
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	2e 97       	sbiw	r28, 0x0e	; 14
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	ef e0       	ldi	r30, 0x0F	; 15
    15e6:	fb e8       	ldi	r31, 0x8B	; 139
    15e8:	de 01       	movw	r26, r28
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	01 90       	ld	r0, Z+
    15ee:	0d 92       	st	X+, r0
    15f0:	8a 95       	dec	r24
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    15f4:	f8 01       	movw	r30, r16
    15f6:	01 90       	ld	r0, Z+
    15f8:	00 20       	and	r0, r0
    15fa:	e9 f7       	brne	.-6      	; 0x15f6 <checksum_NMEA+0x2c>
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	3e 2f       	mov	r19, r30
    1600:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1602:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1608:	f8 01       	movw	r30, r16
    160a:	e8 0f       	add	r30, r24
    160c:	f1 1d       	adc	r31, r1
    160e:	20 81       	ld	r18, Z
    1610:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	83 17       	cp	r24, r19
    1616:	c0 f3       	brcs	.-16     	; 0x1608 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1618:	1f 92       	push	r1
    161a:	9f 93       	push	r25
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	7e 01       	movw	r14, r28
    1626:	89 e0       	ldi	r24, 0x09	; 9
    1628:	e8 0e       	add	r14, r24
    162a:	f1 1c       	adc	r15, r1
    162c:	ff 92       	push	r15
    162e:	ef 92       	push	r14
    1630:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
	strcat(str, chksum);
    1634:	b7 01       	movw	r22, r14
    1636:	c8 01       	movw	r24, r16
    1638:	0e 94 e5 23 	call	0x47ca	; 0x47ca <strcat>

}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	2e 96       	adiw	r28, 0x0e	; 14
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    165c:	e0 e6       	ldi	r30, 0x60	; 96
    165e:	f4 e0       	ldi	r31, 0x04	; 4
    1660:	80 e4       	ldi	r24, 0x40	; 64
    1662:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1664:	81 83       	std	Z+1, r24	; 0x01
    1666:	a1 e4       	ldi	r26, 0x41	; 65
    1668:	b3 e0       	ldi	r27, 0x03	; 3
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <reset_OLED+0xe>
    166e:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1670:	85 83       	std	Z+5, r24	; 0x05
    1672:	08 95       	ret

00001674 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	d6 2f       	mov	r29, r22
    167a:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	0e 94 a9 19 	call	0x3352	; 0x3352 <start_TWI>
	write_TWI(type);
    1682:	8d 2f       	mov	r24, r29
    1684:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
	write_TWI(byteToSend);
    1688:	8c 2f       	mov	r24, r28
    168a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <write_TWI>
	stop_TWI();
    168e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <stop_TWI>

}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1698:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    169a:	88 23       	and	r24, r24
    169c:	29 f0       	breq	.+10     	; 0x16a8 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <init_OLEDDISPLAY+0xc>
    16a2:	9e c0       	rjmp	.+316    	; 0x17e0 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    16a4:	cd e3       	ldi	r28, 0x3D	; 61
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    16a8:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    16aa:	4a e2       	ldi	r20, 0x2A	; 42
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	8c 2f       	mov	r24, r28
    16b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    16b4:	41 e7       	ldi	r20, 0x71	; 113
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	8c 2f       	mov	r24, r28
    16ba:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    16be:	4c e5       	ldi	r20, 0x5C	; 92
    16c0:	60 e4       	ldi	r22, 0x40	; 64
    16c2:	8c 2f       	mov	r24, r28
    16c4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16c8:	48 e2       	ldi	r20, 0x28	; 40
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	8c 2f       	mov	r24, r28
    16ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    16d2:	48 e0       	ldi	r20, 0x08	; 8
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	8c 2f       	mov	r24, r28
    16d8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    16dc:	4a e2       	ldi	r20, 0x2A	; 42
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	8c 2f       	mov	r24, r28
    16e2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16e6:	49 e7       	ldi	r20, 0x79	; 121
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	8c 2f       	mov	r24, r28
    16ec:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    16f0:	45 ed       	ldi	r20, 0xD5	; 213
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	8c 2f       	mov	r24, r28
    16f6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    16fa:	40 e7       	ldi	r20, 0x70	; 112
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1704:	48 e7       	ldi	r20, 0x78	; 120
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	8c 2f       	mov	r24, r28
    170a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    170e:	48 e0       	ldi	r20, 0x08	; 8
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	8c 2f       	mov	r24, r28
    1714:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1718:	46 e0       	ldi	r20, 0x06	; 6
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	8c 2f       	mov	r24, r28
    171e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1722:	42 e7       	ldi	r20, 0x72	; 114
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	8c 2f       	mov	r24, r28
    1728:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	60 e4       	ldi	r22, 0x40	; 64
    1730:	8c 2f       	mov	r24, r28
    1732:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1736:	4a e2       	ldi	r20, 0x2A	; 42
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	8c 2f       	mov	r24, r28
    173c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1740:	49 e7       	ldi	r20, 0x79	; 121
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	8c 2f       	mov	r24, r28
    1746:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    174a:	4a ed       	ldi	r20, 0xDA	; 218
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	8c 2f       	mov	r24, r28
    1750:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	8c 2f       	mov	r24, r28
    175a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    175e:	4c ed       	ldi	r20, 0xDC	; 220
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	8c 2f       	mov	r24, r28
    1764:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	8c 2f       	mov	r24, r28
    176e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1772:	41 e8       	ldi	r20, 0x81	; 129
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	8c 2f       	mov	r24, r28
    1778:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	8c 2f       	mov	r24, r28
    1782:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1786:	49 ed       	ldi	r20, 0xD9	; 217
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	8c 2f       	mov	r24, r28
    178c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1790:	41 ef       	ldi	r20, 0xF1	; 241
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	8c 2f       	mov	r24, r28
    1796:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    179a:	4b ed       	ldi	r20, 0xDB	; 219
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	8c 2f       	mov	r24, r28
    17a0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    17a4:	40 e4       	ldi	r20, 0x40	; 64
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	8c 2f       	mov	r24, r28
    17aa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    17ae:	48 e7       	ldi	r20, 0x78	; 120
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	8c 2f       	mov	r24, r28
    17b4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    17b8:	48 e2       	ldi	r20, 0x28	; 40
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	8c 2f       	mov	r24, r28
    17be:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	8c 2f       	mov	r24, r28
    17c8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    17d6:	4c e0       	ldi	r20, 0x0C	; 12
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	8c 2f       	mov	r24, r28
    17dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>

}
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    17e4:	0e 94 2e 0b 	call	0x165c	; 0x165c <reset_OLED>
	init_OLEDDISPLAY(0);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_OLEDDISPLAY>
    17f4:	2a e6       	ldi	r18, 0x6A	; 106
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	21 50       	subi	r18, 0x01	; 1
    17fc:	80 40       	sbci	r24, 0x00	; 0
    17fe:	90 40       	sbci	r25, 0x00	; 0
    1800:	e1 f7       	brne	.-8      	; 0x17fa <init_OLED+0x16>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
    1804:	08 95       	ret

00001806 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	e2 97       	sbiw	r28, 0x32	; 50
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    181e:	91 e1       	ldi	r25, 0x11	; 17
    1820:	e7 e1       	ldi	r30, 0x17	; 23
    1822:	fb e8       	ldi	r31, 0x8B	; 139
    1824:	de 01       	movw	r26, r28
    1826:	92 96       	adiw	r26, 0x22	; 34
    1828:	01 90       	ld	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	9a 95       	dec	r25
    182e:	e1 f7       	brne	.-8      	; 0x1828 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1830:	81 11       	cpse	r24, r1
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1834:	0c e3       	ldi	r16, 0x3C	; 60
    1836:	01 c0       	rjmp	.+2      	; 0x183a <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1838:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	7c 01       	movw	r14, r24
    1840:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <strcpy>
	if (strlen(strbuf) > 16) {
    1844:	f7 01       	movw	r30, r14
    1846:	01 90       	ld	r0, Z+
    1848:	00 20       	and	r0, r0
    184a:	e9 f7       	brne	.-6      	; 0x1846 <writestr_OLED+0x40>
    184c:	31 97       	sbiw	r30, 0x01	; 1
    184e:	ee 19       	sub	r30, r14
    1850:	ff 09       	sbc	r31, r15
    1852:	71 97       	sbiw	r30, 0x11	; 17
    1854:	08 f0       	brcs	.+2      	; 0x1858 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1856:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1858:	be 01       	movw	r22, r28
    185a:	6e 5d       	subi	r22, 0xDE	; 222
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	0e 94 e5 23 	call	0x47ca	; 0x47ca <strcat>

	if (lineno == 1) {
    1866:	11 30       	cpi	r17, 0x01	; 1
    1868:	39 f4       	brne	.+14     	; 0x1878 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	80 2f       	mov	r24, r16
    1870:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	12 c0       	rjmp	.+36     	; 0x189c <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1878:	40 ec       	ldi	r20, 0xC0	; 192
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	80 2f       	mov	r24, r16
    187e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
    1882:	f8 cf       	rjmp	.-16     	; 0x1874 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1884:	e1 e0       	ldi	r30, 0x01	; 1
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	ec 0f       	add	r30, r28
    188a:	fd 1f       	adc	r31, r29
    188c:	e1 0f       	add	r30, r17
    188e:	f1 1d       	adc	r31, r1
    1890:	40 81       	ld	r20, Z
    1892:	60 e4       	ldi	r22, 0x40	; 64
    1894:	80 2f       	mov	r24, r16
    1896:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    189a:	1f 5f       	subi	r17, 0xFF	; 255
    189c:	10 31       	cpi	r17, 0x10	; 16
    189e:	90 f3       	brcs	.-28     	; 0x1884 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timerOLED>
    18a8:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timerOLED+0x1>

}
    18ac:	e2 96       	adiw	r28, 0x32	; 50
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	08 95       	ret

000018c0 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	1f 92       	push	r1
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    18ce:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	be 01       	movw	r22, r28
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    18dc:	42 e0       	ldi	r20, 0x02	; 2
    18de:	be 01       	movw	r22, r28
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	81 2f       	mov	r24, r17
    18e6:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	timerOLED = 0;
    18ea:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    18ee:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>

}
    18f2:	0f 90       	pop	r0
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <init_PNEU>:
*/

uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	84 e2       	ldi	r24, 0x24	; 36
    1902:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    1906:	83 36       	cpi	r24, 0x63	; 99
    1908:	a9 f1       	breq	.+106    	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	6a e0       	ldi	r22, 0x0A	; 10
    190e:	84 e2       	ldi	r24, 0x24	; 36
    1910:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    1914:	83 36       	cpi	r24, 0x63	; 99
    1916:	71 f1       	breq	.+92     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1918:	4e ef       	ldi	r20, 0xFE	; 254
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	81 e2       	ldi	r24, 0x21	; 33
    191e:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    1922:	83 36       	cpi	r24, 0x63	; 99
    1924:	39 f1       	breq	.+78     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	81 e2       	ldi	r24, 0x21	; 33
    192c:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    1930:	83 36       	cpi	r24, 0x63	; 99
    1932:	01 f1       	breq	.+64     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1934:	4c ef       	ldi	r20, 0xFC	; 252
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	81 e2       	ldi	r24, 0x21	; 33
    193a:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    193e:	83 36       	cpi	r24, 0x63	; 99
    1940:	c9 f0       	breq	.+50     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	64 e0       	ldi	r22, 0x04	; 4
    1946:	81 e2       	ldi	r24, 0x21	; 33
    1948:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    194c:	83 36       	cpi	r24, 0x63	; 99
    194e:	91 f0       	breq	.+36     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	65 e0       	ldi	r22, 0x05	; 5
    1954:	81 e2       	ldi	r24, 0x21	; 33
    1956:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    195a:	83 36       	cpi	r24, 0x63	; 99
    195c:	59 f0       	breq	.+22     	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	66 e0       	ldi	r22, 0x06	; 6
    1962:	81 e2       	ldi	r24, 0x21	; 33
    1964:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
    1968:	83 36       	cpi	r24, 0x63	; 99
    196a:	21 f0       	breq	.+8      	; 0x1974 <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    196c:	89 e0       	ldi	r24, 0x09	; 9
    196e:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    1972:	80 e0       	ldi	r24, 0x00	; 0

}
    1974:	08 95       	ret

00001976 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	6c 01       	movw	r12, r24
    1988:	8b 01       	movw	r16, r22
    198a:	7a 01       	movw	r14, r20
    198c:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    198e:	69 e0       	ldi	r22, 0x09	; 9
    1990:	81 e2       	ldi	r24, 0x21	; 33
    1992:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1996:	98 2f       	mov	r25, r24
    1998:	92 95       	swap	r25
    199a:	96 95       	lsr	r25
    199c:	96 95       	lsr	r25
    199e:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    19a0:	91 30       	cpi	r25, 0x01	; 1
    19a2:	21 f4       	brne	.+8      	; 0x19ac <read_PNEUSensors+0x36>
		*shutter = 'c';
    19a4:	93 e6       	ldi	r25, 0x63	; 99
    19a6:	f6 01       	movw	r30, r12
    19a8:	90 83       	st	Z, r25
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <read_PNEUSensors+0x54>
	} else if (state == 2) {
    19ac:	92 30       	cpi	r25, 0x02	; 2
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <read_PNEUSensors+0x42>
		*shutter = 'o';
    19b0:	9f e6       	ldi	r25, 0x6F	; 111
    19b2:	f6 01       	movw	r30, r12
    19b4:	90 83       	st	Z, r25
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <read_PNEUSensors+0x54>
	} else if (state == 3) {
    19b8:	93 30       	cpi	r25, 0x03	; 3
    19ba:	21 f4       	brne	.+8      	; 0x19c4 <read_PNEUSensors+0x4e>
		*shutter = 't';
    19bc:	94 e7       	ldi	r25, 0x74	; 116
    19be:	f6 01       	movw	r30, r12
    19c0:	90 83       	st	Z, r25
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    19c4:	98 e7       	ldi	r25, 0x78	; 120
    19c6:	f6 01       	movw	r30, r12
    19c8:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    19ca:	98 2f       	mov	r25, r24
    19cc:	96 95       	lsr	r25
    19ce:	96 95       	lsr	r25
	state &= 0b00000011;
    19d0:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    19d2:	91 30       	cpi	r25, 0x01	; 1
    19d4:	21 f4       	brne	.+8      	; 0x19de <read_PNEUSensors+0x68>
		*right = 'c';
    19d6:	93 e6       	ldi	r25, 0x63	; 99
    19d8:	f7 01       	movw	r30, r14
    19da:	90 83       	st	Z, r25
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <read_PNEUSensors+0x86>
	} else if (state == 2) {
    19de:	92 30       	cpi	r25, 0x02	; 2
    19e0:	21 f4       	brne	.+8      	; 0x19ea <read_PNEUSensors+0x74>
		*right = 'o';
    19e2:	9f e6       	ldi	r25, 0x6F	; 111
    19e4:	f7 01       	movw	r30, r14
    19e6:	90 83       	st	Z, r25
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <read_PNEUSensors+0x86>
	} else if (state == 3) {
    19ea:	93 30       	cpi	r25, 0x03	; 3
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <read_PNEUSensors+0x80>
		*right = 't';
    19ee:	94 e7       	ldi	r25, 0x74	; 116
    19f0:	f7 01       	movw	r30, r14
    19f2:	90 83       	st	Z, r25
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    19f6:	98 e7       	ldi	r25, 0x78	; 120
    19f8:	f7 01       	movw	r30, r14
    19fa:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    19fc:	98 2f       	mov	r25, r24
    19fe:	92 95       	swap	r25
    1a00:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1a02:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1a04:	91 30       	cpi	r25, 0x01	; 1
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <read_PNEUSensors+0x9a>
		*left = 'o';
    1a08:	9f e6       	ldi	r25, 0x6F	; 111
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	90 83       	st	Z, r25
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1a10:	92 30       	cpi	r25, 0x02	; 2
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <read_PNEUSensors+0xa6>
		*left = 'c';
    1a14:	93 e6       	ldi	r25, 0x63	; 99
    1a16:	f8 01       	movw	r30, r16
    1a18:	90 83       	st	Z, r25
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1a1c:	93 30       	cpi	r25, 0x03	; 3
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <read_PNEUSensors+0xb2>
		*left = 't';
    1a20:	94 e7       	ldi	r25, 0x74	; 116
    1a22:	f8 01       	movw	r30, r16
    1a24:	90 83       	st	Z, r25
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1a28:	98 e7       	ldi	r25, 0x78	; 120
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1a2e:	81 ff       	sbrs	r24, 1
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <read_PNEUSensors+0xc2>
		*air = '0';
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	88 83       	st	Y, r24
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1a38:	81 e3       	ldi	r24, 0x31	; 49
    1a3a:	88 83       	st	Y, r24
	}
}
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	08 95       	ret

00001a4e <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	d8 2f       	mov	r29, r24
    1a54:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1a56:	69 e0       	ldi	r22, 0x09	; 9
    1a58:	84 e2       	ldi	r24, 0x24	; 36
    1a5a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1a5e:	8d 2b       	or	r24, r29
    1a60:	48 2f       	mov	r20, r24
    1a62:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1a64:	6a e0       	ldi	r22, 0x0A	; 10
    1a66:	84 e2       	ldi	r24, 0x24	; 36
    1a68:	0e 94 1b 09 	call	0x1236	; 0x1236 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	6a 97       	sbiw	r28, 0x1a	; 26
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1a80:	99 e0       	ldi	r25, 0x09	; 9
    1a82:	e2 e6       	ldi	r30, 0x62	; 98
    1a84:	fb e8       	ldi	r31, 0x8B	; 139
    1a86:	de 01       	movw	r26, r28
    1a88:	11 96       	adiw	r26, 0x01	; 1
    1a8a:	01 90       	ld	r0, Z+
    1a8c:	0d 92       	st	X+, r0
    1a8e:	9a 95       	dec	r25
    1a90:	e1 f7       	brne	.-8      	; 0x1a8a <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1a92:	24 e3       	ldi	r18, 0x34	; 52
    1a94:	82 9f       	mul	r24, r18
    1a96:	c0 01       	movw	r24, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e8 5f       	subi	r30, 0xF8	; 248
    1a9e:	f7 4d       	sbci	r31, 0xD7	; 215
    1aa0:	81 81       	ldd	r24, Z+1	; 0x01
    1aa2:	8c 36       	cpi	r24, 0x6C	; 108
    1aa4:	31 f1       	breq	.+76     	; 0x1af2 <close_PNEU+0x80>
    1aa6:	18 f4       	brcc	.+6      	; 0x1aae <close_PNEU+0x3c>
    1aa8:	82 36       	cpi	r24, 0x62	; 98
    1aaa:	39 f0       	breq	.+14     	; 0x1aba <close_PNEU+0x48>
    1aac:	6a c0       	rjmp	.+212    	; 0x1b82 <close_PNEU+0x110>
    1aae:	82 37       	cpi	r24, 0x72	; 114
    1ab0:	c1 f1       	breq	.+112    	; 0x1b22 <close_PNEU+0xb0>
    1ab2:	83 37       	cpi	r24, 0x73	; 115
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <close_PNEU+0x46>
    1ab6:	4d c0       	rjmp	.+154    	; 0x1b52 <close_PNEU+0xe0>
    1ab8:	64 c0       	rjmp	.+200    	; 0x1b82 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1aba:	6a ee       	ldi	r22, 0xEA	; 234
    1abc:	84 e4       	ldi	r24, 0x44	; 68
    1abe:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1ac2:	66 ee       	ldi	r22, 0xE6	; 230
    1ac4:	88 e8       	ldi	r24, 0x88	; 136
    1ac6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1aca:	88 e2       	ldi	r24, 0x28	; 40
    1acc:	9b e8       	ldi	r25, 0x8B	; 139
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	09 96       	adiw	r24, 0x09	; 9
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	59 c0       	rjmp	.+178    	; 0x1ba4 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1af2:	6a ee       	ldi	r22, 0xEA	; 234
    1af4:	84 e4       	ldi	r24, 0x44	; 68
    1af6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1afa:	8d e2       	ldi	r24, 0x2D	; 45
    1afc:	9b e8       	ldi	r25, 0x8B	; 139
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	9f 93       	push	r25
    1b08:	8f 93       	push	r24
    1b0a:	09 96       	adiw	r24, 0x09	; 9
    1b0c:	9f 93       	push	r25
    1b0e:	8f 93       	push	r24
    1b10:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	41 c0       	rjmp	.+130    	; 0x1ba4 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1b22:	66 ee       	ldi	r22, 0xE6	; 230
    1b24:	88 e8       	ldi	r24, 0x88	; 136
    1b26:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1b2a:	82 e3       	ldi	r24, 0x32	; 50
    1b2c:	9b e8       	ldi	r25, 0x8B	; 139
    1b2e:	9f 93       	push	r25
    1b30:	8f 93       	push	r24
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	09 96       	adiw	r24, 0x09	; 9
    1b3c:	9f 93       	push	r25
    1b3e:	8f 93       	push	r24
    1b40:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	29 c0       	rjmp	.+82     	; 0x1ba4 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1b52:	6c ee       	ldi	r22, 0xEC	; 236
    1b54:	82 e2       	ldi	r24, 0x22	; 34
    1b56:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1b5a:	88 e3       	ldi	r24, 0x38	; 56
    1b5c:	9b e8       	ldi	r25, 0x8B	; 139
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	ce 01       	movw	r24, r28
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	09 96       	adiw	r24, 0x09	; 9
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	11 c0       	rjmp	.+34     	; 0x1ba4 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1b82:	60 e4       	ldi	r22, 0x40	; 64
    1b84:	7b e8       	ldi	r23, 0x8B	; 139
    1b86:	85 ef       	ldi	r24, 0xF5	; 245
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			strcpy(outbuf, "close what?");
    1b8e:	8c e0       	ldi	r24, 0x0C	; 12
    1b90:	e6 e5       	ldi	r30, 0x56	; 86
    1b92:	fb e8       	ldi	r31, 0x8B	; 139
    1b94:	de 01       	movw	r26, r28
    1b96:	1a 96       	adiw	r26, 0x0a	; 10
    1b98:	01 90       	ld	r0, Z+
    1b9a:	0d 92       	st	X+, r0
    1b9c:	8a 95       	dec	r24
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <close_PNEU+0x126>
			return(ERROR);
    1ba0:	83 e6       	ldi	r24, 0x63	; 99
    1ba2:	0b c0       	rjmp	.+22     	; 0x1bba <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	be 01       	movw	r22, r28
    1bae:	66 5f       	subi	r22, 0xF6	; 246
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	return(NOERROR);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0

}
    1bba:	6a 96       	adiw	r28, 0x1a	; 26
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	69 97       	sbiw	r28, 0x19	; 25
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1bd4:	98 e0       	ldi	r25, 0x08	; 8
    1bd6:	eb e8       	ldi	r30, 0x8B	; 139
    1bd8:	fb e8       	ldi	r31, 0x8B	; 139
    1bda:	de 01       	movw	r26, r28
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	9a 95       	dec	r25
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1be6:	24 e3       	ldi	r18, 0x34	; 52
    1be8:	82 9f       	mul	r24, r18
    1bea:	c0 01       	movw	r24, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e8 5f       	subi	r30, 0xF8	; 248
    1bf2:	f7 4d       	sbci	r31, 0xD7	; 215
    1bf4:	81 81       	ldd	r24, Z+1	; 0x01
    1bf6:	8c 36       	cpi	r24, 0x6C	; 108
    1bf8:	31 f1       	breq	.+76     	; 0x1c46 <open_PNEU+0x80>
    1bfa:	18 f4       	brcc	.+6      	; 0x1c02 <open_PNEU+0x3c>
    1bfc:	82 36       	cpi	r24, 0x62	; 98
    1bfe:	39 f0       	breq	.+14     	; 0x1c0e <open_PNEU+0x48>
    1c00:	6a c0       	rjmp	.+212    	; 0x1cd6 <open_PNEU+0x110>
    1c02:	82 37       	cpi	r24, 0x72	; 114
    1c04:	c1 f1       	breq	.+112    	; 0x1c76 <open_PNEU+0xb0>
    1c06:	83 37       	cpi	r24, 0x73	; 115
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <open_PNEU+0x46>
    1c0a:	4d c0       	rjmp	.+154    	; 0x1ca6 <open_PNEU+0xe0>
    1c0c:	64 c0       	rjmp	.+200    	; 0x1cd6 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1c0e:	6e ea       	ldi	r22, 0xAE	; 174
    1c10:	84 e4       	ldi	r24, 0x44	; 68
    1c12:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1c16:	6e e6       	ldi	r22, 0x6E	; 110
    1c18:	88 e8       	ldi	r24, 0x88	; 136
    1c1a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1c1e:	88 e2       	ldi	r24, 0x28	; 40
    1c20:	9b e8       	ldi	r25, 0x8B	; 139
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	ce 01       	movw	r24, r28
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	9f 93       	push	r25
    1c2c:	8f 93       	push	r24
    1c2e:	08 96       	adiw	r24, 0x08	; 8
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	59 c0       	rjmp	.+178    	; 0x1cf8 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1c46:	6e ea       	ldi	r22, 0xAE	; 174
    1c48:	84 e4       	ldi	r24, 0x44	; 68
    1c4a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1c4e:	8d e2       	ldi	r24, 0x2D	; 45
    1c50:	9b e8       	ldi	r25, 0x8B	; 139
    1c52:	9f 93       	push	r25
    1c54:	8f 93       	push	r24
    1c56:	ce 01       	movw	r24, r28
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	9f 93       	push	r25
    1c5c:	8f 93       	push	r24
    1c5e:	08 96       	adiw	r24, 0x08	; 8
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	41 c0       	rjmp	.+130    	; 0x1cf8 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1c76:	6e e6       	ldi	r22, 0x6E	; 110
    1c78:	88 e8       	ldi	r24, 0x88	; 136
    1c7a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1c7e:	82 e3       	ldi	r24, 0x32	; 50
    1c80:	9b e8       	ldi	r25, 0x8B	; 139
    1c82:	9f 93       	push	r25
    1c84:	8f 93       	push	r24
    1c86:	ce 01       	movw	r24, r28
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	9f 93       	push	r25
    1c8c:	8f 93       	push	r24
    1c8e:	08 96       	adiw	r24, 0x08	; 8
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	29 c0       	rjmp	.+82     	; 0x1cf8 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1ca6:	6e ec       	ldi	r22, 0xCE	; 206
    1ca8:	82 e2       	ldi	r24, 0x22	; 34
    1caa:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1cae:	88 e3       	ldi	r24, 0x38	; 56
    1cb0:	9b e8       	ldi	r25, 0x8B	; 139
    1cb2:	9f 93       	push	r25
    1cb4:	8f 93       	push	r24
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	08 96       	adiw	r24, 0x08	; 8
    1cc0:	9f 93       	push	r25
    1cc2:	8f 93       	push	r24
    1cc4:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			break;
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	11 c0       	rjmp	.+34     	; 0x1cf8 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1cd6:	6b e6       	ldi	r22, 0x6B	; 107
    1cd8:	7b e8       	ldi	r23, 0x8B	; 139
    1cda:	85 ef       	ldi	r24, 0xF5	; 245
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			strcpy(outbuf, "open what?");
    1ce2:	8b e0       	ldi	r24, 0x0B	; 11
    1ce4:	e0 e8       	ldi	r30, 0x80	; 128
    1ce6:	fb e8       	ldi	r31, 0x8B	; 139
    1ce8:	de 01       	movw	r26, r28
    1cea:	19 96       	adiw	r26, 0x09	; 9
    1cec:	01 90       	ld	r0, Z+
    1cee:	0d 92       	st	X+, r0
    1cf0:	8a 95       	dec	r24
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <open_PNEU+0x126>
			return(ERROR);
    1cf4:	83 e6       	ldi	r24, 0x63	; 99
    1cf6:	0b c0       	rjmp	.+22     	; 0x1d0e <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	be 01       	movw	r22, r28
    1d02:	67 5f       	subi	r22, 0xF7	; 247
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	return(NOERROR);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0

}
    1d0e:	69 96       	adiw	r28, 0x19	; 25
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	ef 93       	push	r30
    1d3a:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1d3c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1d40:	88 23       	and	r24, r24
    1d42:	4c f4       	brge	.+18     	; 0x1d56 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1d4a:	68 e0       	ldi	r22, 0x08	; 8
    1d4c:	81 e2       	ldi	r24, 0x21	; 33
    1d4e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <read_MCP23008>
    1d52:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <pneuState>
	}

}
    1d56:	ff 91       	pop	r31
    1d58:	ef 91       	pop	r30
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	0f 90       	pop	r0
    1d74:	1f 90       	pop	r1
    1d76:	18 95       	reti

00001d78 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1d78:	e0 ea       	ldi	r30, 0xA0	; 160
    1d7a:	f4 e0       	ldi	r31, 0x04	; 4
    1d7c:	8b e0       	ldi	r24, 0x0B	; 11
    1d7e:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.DIRCLR = PIN2_bm;										// SPECID port
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;										// LED output
    1d84:	90 e2       	ldi	r25, 0x20	; 32
    1d86:	91 83       	std	Z+1, r25	; 0x01
	PORTB.DIRSET = PIN2_bm;										// Beeper
    1d88:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
    1d8c:	08 95       	ret

00001d8e <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d8e:	2f 92       	push	r2
    1d90:	3f 92       	push	r3
    1d92:	4f 92       	push	r4
    1d94:	5f 92       	push	r5
    1d96:	6f 92       	push	r6
    1d98:	7f 92       	push	r7
    1d9a:	8f 92       	push	r8
    1d9c:	9f 92       	push	r9
    1d9e:	af 92       	push	r10
    1da0:	bf 92       	push	r11
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	cf 5d       	subi	r28, 0xDF	; 223
    1db8:	d2 40       	sbci	r29, 0x02	; 2
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1dbe:	95 e4       	ldi	r25, 0x45	; 69
    1dc0:	e1 ef       	ldi	r30, 0xF1	; 241
    1dc2:	fb e8       	ldi	r31, 0x8B	; 139
    1dc4:	de 01       	movw	r26, r28
    1dc6:	a6 5b       	subi	r26, 0xB6	; 182
    1dc8:	be 4f       	sbci	r27, 0xFE	; 254
    1dca:	01 90       	ld	r0, Z+
    1dcc:	0d 92       	st	X+, r0
    1dce:	9a 95       	dec	r25
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1dd2:	9f e2       	ldi	r25, 0x2F	; 47
    1dd4:	e6 e3       	ldi	r30, 0x36	; 54
    1dd6:	fc e8       	ldi	r31, 0x8C	; 140
    1dd8:	de 01       	movw	r26, r28
    1dda:	a1 57       	subi	r26, 0x71	; 113
    1ddc:	be 4f       	sbci	r27, 0xFE	; 254
    1dde:	01 90       	ld	r0, Z+
    1de0:	0d 92       	st	X+, r0
    1de2:	9a 95       	dec	r25
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1de6:	9d e1       	ldi	r25, 0x1D	; 29
    1de8:	e5 e6       	ldi	r30, 0x65	; 101
    1dea:	fc e8       	ldi	r31, 0x8C	; 140
    1dec:	de 01       	movw	r26, r28
    1dee:	a2 54       	subi	r26, 0x42	; 66
    1df0:	be 4f       	sbci	r27, 0xFE	; 254
    1df2:	01 90       	ld	r0, Z+
    1df4:	0d 92       	st	X+, r0
    1df6:	9a 95       	dec	r25
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1dfa:	9c e1       	ldi	r25, 0x1C	; 28
    1dfc:	e2 e8       	ldi	r30, 0x82	; 130
    1dfe:	fc e8       	ldi	r31, 0x8C	; 140
    1e00:	de 01       	movw	r26, r28
    1e02:	a5 52       	subi	r26, 0x25	; 37
    1e04:	be 4f       	sbci	r27, 0xFE	; 254
    1e06:	01 90       	ld	r0, Z+
    1e08:	0d 92       	st	X+, r0
    1e0a:	9a 95       	dec	r25
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1e0e:	92 e1       	ldi	r25, 0x12	; 18
    1e10:	ee e9       	ldi	r30, 0x9E	; 158
    1e12:	fc e8       	ldi	r31, 0x8C	; 140
    1e14:	de 01       	movw	r26, r28
    1e16:	a9 50       	subi	r26, 0x09	; 9
    1e18:	be 4f       	sbci	r27, 0xFE	; 254
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	0d 92       	st	X+, r0
    1e1e:	9a 95       	dec	r25
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1e22:	9d e2       	ldi	r25, 0x2D	; 45
    1e24:	e0 eb       	ldi	r30, 0xB0	; 176
    1e26:	fc e8       	ldi	r31, 0x8C	; 140
    1e28:	de 01       	movw	r26, r28
    1e2a:	a7 5f       	subi	r26, 0xF7	; 247
    1e2c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2e:	01 90       	ld	r0, Z+
    1e30:	0d 92       	st	X+, r0
    1e32:	9a 95       	dec	r25
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1e36:	93 e1       	ldi	r25, 0x13	; 19
    1e38:	ed ed       	ldi	r30, 0xDD	; 221
    1e3a:	fc e8       	ldi	r31, 0x8C	; 140
    1e3c:	de 01       	movw	r26, r28
    1e3e:	aa 5c       	subi	r26, 0xCA	; 202
    1e40:	bd 4f       	sbci	r27, 0xFD	; 253
    1e42:	01 90       	ld	r0, Z+
    1e44:	0d 92       	st	X+, r0
    1e46:	9a 95       	dec	r25
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1e4a:	93 e1       	ldi	r25, 0x13	; 19
    1e4c:	e0 ef       	ldi	r30, 0xF0	; 240
    1e4e:	fc e8       	ldi	r31, 0x8C	; 140
    1e50:	de 01       	movw	r26, r28
    1e52:	a7 5b       	subi	r26, 0xB7	; 183
    1e54:	bd 4f       	sbci	r27, 0xFD	; 253
    1e56:	01 90       	ld	r0, Z+
    1e58:	0d 92       	st	X+, r0
    1e5a:	9a 95       	dec	r25
    1e5c:	e1 f7       	brne	.-8      	; 0x1e56 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1e5e:	99 e1       	ldi	r25, 0x19	; 25
    1e60:	e3 e0       	ldi	r30, 0x03	; 3
    1e62:	fd e8       	ldi	r31, 0x8D	; 141
    1e64:	de 01       	movw	r26, r28
    1e66:	a4 5a       	subi	r26, 0xA4	; 164
    1e68:	bd 4f       	sbci	r27, 0xFD	; 253
    1e6a:	01 90       	ld	r0, Z+
    1e6c:	0d 92       	st	X+, r0
    1e6e:	9a 95       	dec	r25
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e72:	95 e2       	ldi	r25, 0x25	; 37
    1e74:	ec e1       	ldi	r30, 0x1C	; 28
    1e76:	fd e8       	ldi	r31, 0x8D	; 141
    1e78:	de 01       	movw	r26, r28
    1e7a:	ab 58       	subi	r26, 0x8B	; 139
    1e7c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e7e:	01 90       	ld	r0, Z+
    1e80:	0d 92       	st	X+, r0
    1e82:	9a 95       	dec	r25
    1e84:	e1 f7       	brne	.-8      	; 0x1e7e <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e86:	9d e0       	ldi	r25, 0x0D	; 13
    1e88:	e1 e4       	ldi	r30, 0x41	; 65
    1e8a:	fd e8       	ldi	r31, 0x8D	; 141
    1e8c:	de 01       	movw	r26, r28
    1e8e:	a6 56       	subi	r26, 0x66	; 102
    1e90:	bd 4f       	sbci	r27, 0xFD	; 253
    1e92:	01 90       	ld	r0, Z+
    1e94:	0d 92       	st	X+, r0
    1e96:	9a 95       	dec	r25
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e9a:	9d e0       	ldi	r25, 0x0D	; 13
    1e9c:	ee e4       	ldi	r30, 0x4E	; 78
    1e9e:	fd e8       	ldi	r31, 0x8D	; 141
    1ea0:	de 01       	movw	r26, r28
    1ea2:	a9 55       	subi	r26, 0x59	; 89
    1ea4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	9a 95       	dec	r25
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1eae:	08 2f       	mov	r16, r24
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	84 e3       	ldi	r24, 0x34	; 52
    1eb4:	80 9f       	mul	r24, r16
    1eb6:	f0 01       	movw	r30, r0
    1eb8:	81 9f       	mul	r24, r17
    1eba:	f0 0d       	add	r31, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	e8 5f       	subi	r30, 0xF8	; 248
    1ec0:	f7 4d       	sbci	r31, 0xD7	; 215
    1ec2:	e1 81       	ldd	r30, Z+1	; 0x01
    1ec4:	8e 2f       	mov	r24, r30
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e1 54       	subi	r30, 0x41	; 65
    1ecc:	f1 09       	sbc	r31, r1
    1ece:	e6 33       	cpi	r30, 0x36	; 54
    1ed0:	f1 05       	cpc	r31, r1
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <report+0x148>
    1ed4:	cd c4       	rjmp	.+2458   	; 0x2870 <report+0xae2>
    1ed6:	e4 58       	subi	r30, 0x84	; 132
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	86 5f       	subi	r24, 0xF6	; 246
    1ee2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			controller = pcmd[cstack].cobject + 63;
    1ee8:	84 e3       	ldi	r24, 0x34	; 52
    1eea:	80 9f       	mul	r24, r16
    1eec:	f0 01       	movw	r30, r0
    1eee:	81 9f       	mul	r24, r17
    1ef0:	f0 0d       	add	r31, r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	e8 5f       	subi	r30, 0xF8	; 248
    1ef6:	f7 4d       	sbci	r31, 0xD7	; 215
    1ef8:	f1 80       	ldd	r15, Z+1	; 0x01
    1efa:	0f 2e       	mov	r0, r31
    1efc:	ff e3       	ldi	r31, 0x3F	; 63
    1efe:	ef 2e       	mov	r14, r31
    1f00:	f0 2d       	mov	r31, r0
    1f02:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1f04:	ae 01       	movw	r20, r28
    1f06:	4c 53       	subi	r20, 0x3C	; 60
    1f08:	5d 4f       	sbci	r21, 0xFD	; 253
    1f0a:	68 e1       	ldi	r22, 0x18	; 24
    1f0c:	8e 2d       	mov	r24, r14
    1f0e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <get_MOTORFloat>
			if (retval == ERROR) {
    1f12:	83 36       	cpi	r24, 0x63	; 99
    1f14:	61 f4       	brne	.+24     	; 0x1f2e <report+0x1a0>
				voltage = -666.0;
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e8       	ldi	r25, 0x80	; 128
    1f1a:	a6 e2       	ldi	r26, 0x26	; 38
    1f1c:	b4 ec       	ldi	r27, 0xC4	; 196
    1f1e:	cc 53       	subi	r28, 0x3C	; 60
    1f20:	dd 4f       	sbci	r29, 0xFD	; 253
    1f22:	88 83       	st	Y, r24
    1f24:	99 83       	std	Y+1, r25	; 0x01
    1f26:	aa 83       	std	Y+2, r26	; 0x02
    1f28:	bb 83       	std	Y+3, r27	; 0x03
    1f2a:	c4 5c       	subi	r28, 0xC4	; 196
    1f2c:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1f2e:	ae 01       	movw	r20, r28
    1f30:	40 54       	subi	r20, 0x40	; 64
    1f32:	5d 4f       	sbci	r21, 0xFD	; 253
    1f34:	62 e5       	ldi	r22, 0x52	; 82
    1f36:	8e 2d       	mov	r24, r14
    1f38:	0e 94 82 15 	call	0x2b04	; 0x2b04 <get_MOTORFloat>
			if (retval == ERROR) {
    1f3c:	83 36       	cpi	r24, 0x63	; 99
    1f3e:	61 f4       	brne	.+24     	; 0x1f58 <report+0x1ca>
				t0 = -666.0;
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e8       	ldi	r25, 0x80	; 128
    1f44:	a6 e2       	ldi	r26, 0x26	; 38
    1f46:	b4 ec       	ldi	r27, 0xC4	; 196
    1f48:	c0 54       	subi	r28, 0x40	; 64
    1f4a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4c:	88 83       	st	Y, r24
    1f4e:	99 83       	std	Y+1, r25	; 0x01
    1f50:	aa 83       	std	Y+2, r26	; 0x02
    1f52:	bb 83       	std	Y+3, r27	; 0x03
    1f54:	c0 5c       	subi	r28, 0xC0	; 192
    1f56:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1f58:	24 e3       	ldi	r18, 0x34	; 52
    1f5a:	20 9f       	mul	r18, r16
    1f5c:	c0 01       	movw	r24, r0
    1f5e:	21 9f       	mul	r18, r17
    1f60:	90 0d       	add	r25, r0
    1f62:	11 24       	eor	r1, r1
    1f64:	8d 5c       	subi	r24, 0xCD	; 205
    1f66:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	cd 53       	subi	r28, 0x3D	; 61
    1f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f70:	88 81       	ld	r24, Y
    1f72:	c3 5c       	subi	r28, 0xC3	; 195
    1f74:	d2 40       	sbci	r29, 0x02	; 2
    1f76:	8f 93       	push	r24
    1f78:	ce 53       	subi	r28, 0x3E	; 62
    1f7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f7c:	88 81       	ld	r24, Y
    1f7e:	c2 5c       	subi	r28, 0xC2	; 194
    1f80:	d2 40       	sbci	r29, 0x02	; 2
    1f82:	8f 93       	push	r24
    1f84:	cf 53       	subi	r28, 0x3F	; 63
    1f86:	dd 4f       	sbci	r29, 0xFD	; 253
    1f88:	88 81       	ld	r24, Y
    1f8a:	c1 5c       	subi	r28, 0xC1	; 193
    1f8c:	d2 40       	sbci	r29, 0x02	; 2
    1f8e:	8f 93       	push	r24
    1f90:	c0 54       	subi	r28, 0x40	; 64
    1f92:	dd 4f       	sbci	r29, 0xFD	; 253
    1f94:	88 81       	ld	r24, Y
    1f96:	c0 5c       	subi	r28, 0xC0	; 192
    1f98:	d2 40       	sbci	r29, 0x02	; 2
    1f9a:	8f 93       	push	r24
    1f9c:	c9 53       	subi	r28, 0x39	; 57
    1f9e:	dd 4f       	sbci	r29, 0xFD	; 253
    1fa0:	88 81       	ld	r24, Y
    1fa2:	c7 5c       	subi	r28, 0xC7	; 199
    1fa4:	d2 40       	sbci	r29, 0x02	; 2
    1fa6:	8f 93       	push	r24
    1fa8:	ca 53       	subi	r28, 0x3A	; 58
    1faa:	dd 4f       	sbci	r29, 0xFD	; 253
    1fac:	88 81       	ld	r24, Y
    1fae:	c6 5c       	subi	r28, 0xC6	; 198
    1fb0:	d2 40       	sbci	r29, 0x02	; 2
    1fb2:	8f 93       	push	r24
    1fb4:	cb 53       	subi	r28, 0x3B	; 59
    1fb6:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb8:	88 81       	ld	r24, Y
    1fba:	c5 5c       	subi	r28, 0xC5	; 197
    1fbc:	d2 40       	sbci	r29, 0x02	; 2
    1fbe:	8f 93       	push	r24
    1fc0:	cc 53       	subi	r28, 0x3C	; 60
    1fc2:	dd 4f       	sbci	r29, 0xFD	; 253
    1fc4:	88 81       	ld	r24, Y
    1fc6:	c4 5c       	subi	r28, 0xC4	; 196
    1fc8:	d2 40       	sbci	r29, 0x02	; 2
    1fca:	8f 93       	push	r24
    1fcc:	1f 92       	push	r1
    1fce:	ff 92       	push	r15
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	86 5f       	subi	r24, 0xF6	; 246
    1fd4:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd6:	9f 93       	push	r25
    1fd8:	8f 93       	push	r24
    1fda:	8c 54       	subi	r24, 0x4C	; 76
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	0f 5f       	subi	r16, 0xFF	; 255
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	1f 93       	push	r17
    1fea:	0f 93       	push	r16
    1fec:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			break;
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1ffc:	40 c4       	rjmp	.+2176   	; 0x287e <report+0xaf0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1ffe:	ce 01       	movw	r24, r28
    2000:	86 5f       	subi	r24, 0xF6	; 246
    2002:	9e 4f       	sbci	r25, 0xFE	; 254
    2004:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			controller = pcmd[cstack].cobject + 31;
    2008:	84 e3       	ldi	r24, 0x34	; 52
    200a:	80 9f       	mul	r24, r16
    200c:	f0 01       	movw	r30, r0
    200e:	81 9f       	mul	r24, r17
    2010:	f0 0d       	add	r31, r0
    2012:	11 24       	eor	r1, r1
    2014:	e8 5f       	subi	r30, 0xF8	; 248
    2016:	f7 4d       	sbci	r31, 0xD7	; 215
    2018:	81 81       	ldd	r24, Z+1	; 0x01
    201a:	0f 2e       	mov	r0, r31
    201c:	ff e1       	ldi	r31, 0x1F	; 31
    201e:	7f 2e       	mov	r7, r31
    2020:	f0 2d       	mov	r31, r0
    2022:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    2024:	ae 01       	movw	r20, r28
    2026:	4c 54       	subi	r20, 0x4C	; 76
    2028:	5d 4f       	sbci	r21, 0xFD	; 253
    202a:	60 e1       	ldi	r22, 0x10	; 16
    202c:	87 2d       	mov	r24, r7
    202e:	0e 94 cd 14 	call	0x299a	; 0x299a <get_MOTOREncoder>
			if (retval == ERROR) {
    2032:	83 36       	cpi	r24, 0x63	; 99
    2034:	61 f4       	brne	.+24     	; 0x204e <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
    203a:	af ef       	ldi	r26, 0xFF	; 255
    203c:	bf e7       	ldi	r27, 0x7F	; 127
    203e:	cc 54       	subi	r28, 0x4C	; 76
    2040:	dd 4f       	sbci	r29, 0xFD	; 253
    2042:	88 83       	st	Y, r24
    2044:	99 83       	std	Y+1, r25	; 0x01
    2046:	aa 83       	std	Y+2, r26	; 0x02
    2048:	bb 83       	std	Y+3, r27	; 0x03
    204a:	c4 5b       	subi	r28, 0xB4	; 180
    204c:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    204e:	cc 54       	subi	r28, 0x4C	; 76
    2050:	dd 4f       	sbci	r29, 0xFD	; 253
    2052:	68 81       	ld	r22, Y
    2054:	79 81       	ldd	r23, Y+1	; 0x01
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	c4 5b       	subi	r28, 0xB4	; 180
    205c:	d2 40       	sbci	r29, 0x02	; 2
    205e:	2c e0       	ldi	r18, 0x0C	; 12
    2060:	31 e0       	ldi	r19, 0x01	; 1
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	0e 94 35 22 	call	0x446a	; 0x446a <__divmodsi4>
    206a:	f2 2e       	mov	r15, r18
    206c:	e3 2e       	mov	r14, r19
    206e:	d4 2e       	mov	r13, r20
    2070:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    2072:	ae 01       	movw	r20, r28
    2074:	48 54       	subi	r20, 0x48	; 72
    2076:	5d 4f       	sbci	r21, 0xFD	; 253
    2078:	62 e1       	ldi	r22, 0x12	; 18
    207a:	87 2d       	mov	r24, r7
    207c:	0e 94 cd 14 	call	0x299a	; 0x299a <get_MOTOREncoder>
			if (retval == ERROR) {
    2080:	83 36       	cpi	r24, 0x63	; 99
    2082:	61 f4       	brne	.+24     	; 0x209c <report+0x30e>
				encoderSpeed = 0x7FFFFFFF;
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	9f ef       	ldi	r25, 0xFF	; 255
    2088:	af ef       	ldi	r26, 0xFF	; 255
    208a:	bf e7       	ldi	r27, 0x7F	; 127
    208c:	c8 54       	subi	r28, 0x48	; 72
    208e:	dd 4f       	sbci	r29, 0xFD	; 253
    2090:	88 83       	st	Y, r24
    2092:	99 83       	std	Y+1, r25	; 0x01
    2094:	aa 83       	std	Y+2, r26	; 0x02
    2096:	bb 83       	std	Y+3, r27	; 0x03
    2098:	c8 5b       	subi	r28, 0xB8	; 184
    209a:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    209c:	c8 54       	subi	r28, 0x48	; 72
    209e:	dd 4f       	sbci	r29, 0xFD	; 253
    20a0:	68 81       	ld	r22, Y
    20a2:	79 81       	ldd	r23, Y+1	; 0x01
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	c8 5b       	subi	r28, 0xB8	; 184
    20aa:	d2 40       	sbci	r29, 0x02	; 2
    20ac:	2c e0       	ldi	r18, 0x0C	; 12
    20ae:	31 e0       	ldi	r19, 0x01	; 1
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	0e 94 35 22 	call	0x446a	; 0x446a <__divmodsi4>
    20b8:	b2 2e       	mov	r11, r18
    20ba:	a3 2e       	mov	r10, r19
    20bc:	94 2e       	mov	r9, r20
    20be:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    20c0:	ae 01       	movw	r20, r28
    20c2:	44 54       	subi	r20, 0x44	; 68
    20c4:	5d 4f       	sbci	r21, 0xFD	; 253
    20c6:	61 e3       	ldi	r22, 0x31	; 49
    20c8:	87 2d       	mov	r24, r7
    20ca:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_MOTORInt32>
			if (retval == ERROR) {
    20ce:	83 36       	cpi	r24, 0x63	; 99
    20d0:	61 f4       	brne	.+24     	; 0x20ea <report+0x35c>
				icurrents = 0x7FFFFFFF;
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	af ef       	ldi	r26, 0xFF	; 255
    20d8:	bf e7       	ldi	r27, 0x7F	; 127
    20da:	c4 54       	subi	r28, 0x44	; 68
    20dc:	dd 4f       	sbci	r29, 0xFD	; 253
    20de:	88 83       	st	Y, r24
    20e0:	99 83       	std	Y+1, r25	; 0x01
    20e2:	aa 83       	std	Y+2, r26	; 0x02
    20e4:	bb 83       	std	Y+3, r27	; 0x03
    20e6:	cc 5b       	subi	r28, 0xBC	; 188
    20e8:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    20ea:	c4 54       	subi	r28, 0x44	; 68
    20ec:	dd 4f       	sbci	r29, 0xFD	; 253
    20ee:	88 81       	ld	r24, Y
    20f0:	99 81       	ldd	r25, Y+1	; 0x01
    20f2:	aa 81       	ldd	r26, Y+2	; 0x02
    20f4:	bb 81       	ldd	r27, Y+3	; 0x03
    20f6:	cc 5b       	subi	r28, 0xBC	; 188
    20f8:	d2 40       	sbci	r29, 0x02	; 2
    20fa:	cd 01       	movw	r24, r26
    20fc:	aa 27       	eor	r26, r26
    20fe:	bb 27       	eor	r27, r27
    2100:	9c 01       	movw	r18, r24
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    2116:	44 e3       	ldi	r20, 0x34	; 52
    2118:	40 9f       	mul	r20, r16
    211a:	90 01       	movw	r18, r0
    211c:	41 9f       	mul	r20, r17
    211e:	30 0d       	add	r19, r0
    2120:	11 24       	eor	r1, r1
    2122:	a9 01       	movw	r20, r18
    2124:	4d 5c       	subi	r20, 0xCD	; 205
    2126:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2128:	f9 01       	movw	r30, r18
    212a:	e8 5f       	subi	r30, 0xF8	; 248
    212c:	f7 4d       	sbci	r31, 0xD7	; 215
    212e:	21 81       	ldd	r18, Z+1	; 0x01
    2130:	5f 93       	push	r21
    2132:	4f 93       	push	r20
    2134:	9f 93       	push	r25
    2136:	8f 93       	push	r24
    2138:	8f 92       	push	r8
    213a:	9f 92       	push	r9
    213c:	af 92       	push	r10
    213e:	bf 92       	push	r11
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	1f 92       	push	r1
    214a:	2f 93       	push	r18
    214c:	ce 01       	movw	r24, r28
    214e:	86 5f       	subi	r24, 0xF6	; 246
    2150:	9e 4f       	sbci	r25, 0xFE	; 254
    2152:	9f 93       	push	r25
    2154:	8f 93       	push	r24
    2156:	8b 57       	subi	r24, 0x7B	; 123
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	9f 93       	push	r25
    215c:	8f 93       	push	r24
    215e:	8e 01       	movw	r16, r28
    2160:	0f 5f       	subi	r16, 0xFF	; 255
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	1f 93       	push	r17
    2166:	0f 93       	push	r16
    2168:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    216c:	c8 01       	movw	r24, r16
    216e:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			break;
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2176:	80 e0       	ldi	r24, 0x00	; 0
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2178:	82 c3       	rjmp	.+1796   	; 0x287e <report+0xaf0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
    2180:	c0 54       	subi	r28, 0x40	; 64
    2182:	dd 4f       	sbci	r29, 0xFD	; 253
    2184:	68 83       	st	Y, r22
    2186:	79 83       	std	Y+1, r23	; 0x01
    2188:	8a 83       	std	Y+2, r24	; 0x02
    218a:	9b 83       	std	Y+3, r25	; 0x03
    218c:	c0 5c       	subi	r28, 0xC0	; 192
    218e:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 89 07 	call	0xf12	; 0xf12 <get_humidity>
    2196:	d6 2e       	mov	r13, r22
    2198:	c7 2e       	mov	r12, r23
    219a:	b8 2e       	mov	r11, r24
    219c:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
    21a4:	cc 52       	subi	r28, 0x2C	; 44
    21a6:	dd 4f       	sbci	r29, 0xFD	; 253
    21a8:	68 83       	st	Y, r22
    21aa:	c4 5d       	subi	r28, 0xD4	; 212
    21ac:	d2 40       	sbci	r29, 0x02	; 2
    21ae:	cb 52       	subi	r28, 0x2B	; 43
    21b0:	dd 4f       	sbci	r29, 0xFD	; 253
    21b2:	78 83       	st	Y, r23
    21b4:	c5 5d       	subi	r28, 0xD5	; 213
    21b6:	d2 40       	sbci	r29, 0x02	; 2
    21b8:	ca 52       	subi	r28, 0x2A	; 42
    21ba:	dd 4f       	sbci	r29, 0xFD	; 253
    21bc:	88 83       	st	Y, r24
    21be:	c6 5d       	subi	r28, 0xD6	; 214
    21c0:	d2 40       	sbci	r29, 0x02	; 2
    21c2:	c9 52       	subi	r28, 0x29	; 41
    21c4:	dd 4f       	sbci	r29, 0xFD	; 253
    21c6:	98 83       	st	Y, r25
    21c8:	c7 5d       	subi	r28, 0xD7	; 215
    21ca:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	0e 94 89 07 	call	0xf12	; 0xf12 <get_humidity>
    21d2:	c8 52       	subi	r28, 0x28	; 40
    21d4:	dd 4f       	sbci	r29, 0xFD	; 253
    21d6:	68 83       	st	Y, r22
    21d8:	c8 5d       	subi	r28, 0xD8	; 216
    21da:	d2 40       	sbci	r29, 0x02	; 2
    21dc:	c7 52       	subi	r28, 0x27	; 39
    21de:	dd 4f       	sbci	r29, 0xFD	; 253
    21e0:	78 83       	st	Y, r23
    21e2:	c9 5d       	subi	r28, 0xD9	; 217
    21e4:	d2 40       	sbci	r29, 0x02	; 2
    21e6:	c6 52       	subi	r28, 0x26	; 38
    21e8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ea:	88 83       	st	Y, r24
    21ec:	ca 5d       	subi	r28, 0xDA	; 218
    21ee:	d2 40       	sbci	r29, 0x02	; 2
    21f0:	c5 52       	subi	r28, 0x25	; 37
    21f2:	dd 4f       	sbci	r29, 0xFD	; 253
    21f4:	98 83       	st	Y, r25
    21f6:	cb 5d       	subi	r28, 0xDB	; 219
    21f8:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
    2200:	c4 52       	subi	r28, 0x24	; 36
    2202:	dd 4f       	sbci	r29, 0xFD	; 253
    2204:	68 83       	st	Y, r22
    2206:	cc 5d       	subi	r28, 0xDC	; 220
    2208:	d2 40       	sbci	r29, 0x02	; 2
    220a:	c3 52       	subi	r28, 0x23	; 35
    220c:	dd 4f       	sbci	r29, 0xFD	; 253
    220e:	78 83       	st	Y, r23
    2210:	cd 5d       	subi	r28, 0xDD	; 221
    2212:	d2 40       	sbci	r29, 0x02	; 2
    2214:	98 2e       	mov	r9, r24
    2216:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	0e 94 89 07 	call	0xf12	; 0xf12 <get_humidity>
    221e:	76 2e       	mov	r7, r22
    2220:	67 2e       	mov	r6, r23
    2222:	58 2e       	mov	r5, r24
    2224:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	0e 94 23 19 	call	0x3246	; 0x3246 <get_temperature>
    222c:	c2 52       	subi	r28, 0x22	; 34
    222e:	dd 4f       	sbci	r29, 0xFD	; 253
    2230:	68 83       	st	Y, r22
    2232:	ce 5d       	subi	r28, 0xDE	; 222
    2234:	d2 40       	sbci	r29, 0x02	; 2
    2236:	c1 52       	subi	r28, 0x21	; 33
    2238:	dd 4f       	sbci	r29, 0xFD	; 253
    223a:	78 83       	st	Y, r23
    223c:	cf 5d       	subi	r28, 0xDF	; 223
    223e:	d2 40       	sbci	r29, 0x02	; 2
    2240:	38 2e       	mov	r3, r24
    2242:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2244:	7e 01       	movw	r14, r28
    2246:	96 ef       	ldi	r25, 0xF6	; 246
    2248:	e9 1a       	sub	r14, r25
    224a:	9e ef       	ldi	r25, 0xFE	; 254
    224c:	f9 0a       	sbc	r15, r25
    224e:	c7 01       	movw	r24, r14
    2250:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2254:	24 e3       	ldi	r18, 0x34	; 52
    2256:	20 9f       	mul	r18, r16
    2258:	c0 01       	movw	r24, r0
    225a:	21 9f       	mul	r18, r17
    225c:	90 0d       	add	r25, r0
    225e:	11 24       	eor	r1, r1
    2260:	8d 5c       	subi	r24, 0xCD	; 205
    2262:	97 4d       	sbci	r25, 0xD7	; 215
    2264:	9f 93       	push	r25
    2266:	8f 93       	push	r24
    2268:	2f 92       	push	r2
    226a:	3f 92       	push	r3
    226c:	c1 52       	subi	r28, 0x21	; 33
    226e:	dd 4f       	sbci	r29, 0xFD	; 253
    2270:	88 81       	ld	r24, Y
    2272:	cf 5d       	subi	r28, 0xDF	; 223
    2274:	d2 40       	sbci	r29, 0x02	; 2
    2276:	8f 93       	push	r24
    2278:	c2 52       	subi	r28, 0x22	; 34
    227a:	dd 4f       	sbci	r29, 0xFD	; 253
    227c:	98 81       	ld	r25, Y
    227e:	ce 5d       	subi	r28, 0xDE	; 222
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	9f 93       	push	r25
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	c3 52       	subi	r28, 0x23	; 35
    2292:	dd 4f       	sbci	r29, 0xFD	; 253
    2294:	88 81       	ld	r24, Y
    2296:	cd 5d       	subi	r28, 0xDD	; 221
    2298:	d2 40       	sbci	r29, 0x02	; 2
    229a:	8f 93       	push	r24
    229c:	c4 52       	subi	r28, 0x24	; 36
    229e:	dd 4f       	sbci	r29, 0xFD	; 253
    22a0:	98 81       	ld	r25, Y
    22a2:	cc 5d       	subi	r28, 0xDC	; 220
    22a4:	d2 40       	sbci	r29, 0x02	; 2
    22a6:	9f 93       	push	r25
    22a8:	c5 52       	subi	r28, 0x25	; 37
    22aa:	dd 4f       	sbci	r29, 0xFD	; 253
    22ac:	88 81       	ld	r24, Y
    22ae:	cb 5d       	subi	r28, 0xDB	; 219
    22b0:	d2 40       	sbci	r29, 0x02	; 2
    22b2:	8f 93       	push	r24
    22b4:	c6 52       	subi	r28, 0x26	; 38
    22b6:	dd 4f       	sbci	r29, 0xFD	; 253
    22b8:	98 81       	ld	r25, Y
    22ba:	ca 5d       	subi	r28, 0xDA	; 218
    22bc:	d2 40       	sbci	r29, 0x02	; 2
    22be:	9f 93       	push	r25
    22c0:	c7 52       	subi	r28, 0x27	; 39
    22c2:	dd 4f       	sbci	r29, 0xFD	; 253
    22c4:	88 81       	ld	r24, Y
    22c6:	c9 5d       	subi	r28, 0xD9	; 217
    22c8:	d2 40       	sbci	r29, 0x02	; 2
    22ca:	8f 93       	push	r24
    22cc:	c8 52       	subi	r28, 0x28	; 40
    22ce:	dd 4f       	sbci	r29, 0xFD	; 253
    22d0:	98 81       	ld	r25, Y
    22d2:	c8 5d       	subi	r28, 0xD8	; 216
    22d4:	d2 40       	sbci	r29, 0x02	; 2
    22d6:	9f 93       	push	r25
    22d8:	c9 52       	subi	r28, 0x29	; 41
    22da:	dd 4f       	sbci	r29, 0xFD	; 253
    22dc:	88 81       	ld	r24, Y
    22de:	c7 5d       	subi	r28, 0xD7	; 215
    22e0:	d2 40       	sbci	r29, 0x02	; 2
    22e2:	8f 93       	push	r24
    22e4:	ca 52       	subi	r28, 0x2A	; 42
    22e6:	dd 4f       	sbci	r29, 0xFD	; 253
    22e8:	98 81       	ld	r25, Y
    22ea:	c6 5d       	subi	r28, 0xD6	; 214
    22ec:	d2 40       	sbci	r29, 0x02	; 2
    22ee:	9f 93       	push	r25
    22f0:	cb 52       	subi	r28, 0x2B	; 43
    22f2:	dd 4f       	sbci	r29, 0xFD	; 253
    22f4:	88 81       	ld	r24, Y
    22f6:	c5 5d       	subi	r28, 0xD5	; 213
    22f8:	d2 40       	sbci	r29, 0x02	; 2
    22fa:	8f 93       	push	r24
    22fc:	cc 52       	subi	r28, 0x2C	; 44
    22fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2300:	98 81       	ld	r25, Y
    2302:	c4 5d       	subi	r28, 0xD4	; 212
    2304:	d2 40       	sbci	r29, 0x02	; 2
    2306:	9f 93       	push	r25
    2308:	af 92       	push	r10
    230a:	bf 92       	push	r11
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	cd 53       	subi	r28, 0x3D	; 61
    2312:	dd 4f       	sbci	r29, 0xFD	; 253
    2314:	88 81       	ld	r24, Y
    2316:	c3 5c       	subi	r28, 0xC3	; 195
    2318:	d2 40       	sbci	r29, 0x02	; 2
    231a:	8f 93       	push	r24
    231c:	ce 53       	subi	r28, 0x3E	; 62
    231e:	dd 4f       	sbci	r29, 0xFD	; 253
    2320:	88 81       	ld	r24, Y
    2322:	c2 5c       	subi	r28, 0xC2	; 194
    2324:	d2 40       	sbci	r29, 0x02	; 2
    2326:	8f 93       	push	r24
    2328:	cf 53       	subi	r28, 0x3F	; 63
    232a:	dd 4f       	sbci	r29, 0xFD	; 253
    232c:	88 81       	ld	r24, Y
    232e:	c1 5c       	subi	r28, 0xC1	; 193
    2330:	d2 40       	sbci	r29, 0x02	; 2
    2332:	8f 93       	push	r24
    2334:	c0 54       	subi	r28, 0x40	; 64
    2336:	dd 4f       	sbci	r29, 0xFD	; 253
    2338:	88 81       	ld	r24, Y
    233a:	c0 5c       	subi	r28, 0xC0	; 192
    233c:	d2 40       	sbci	r29, 0x02	; 2
    233e:	8f 93       	push	r24
    2340:	ff 92       	push	r15
    2342:	ef 92       	push	r14
    2344:	ce 01       	movw	r24, r28
    2346:	86 5b       	subi	r24, 0xB6	; 182
    2348:	9e 4f       	sbci	r25, 0xFE	; 254
    234a:	9f 93       	push	r25
    234c:	8f 93       	push	r24
    234e:	8e 01       	movw	r16, r28
    2350:	0f 5f       	subi	r16, 0xFF	; 255
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	1f 93       	push	r17
    2356:	0f 93       	push	r16
    2358:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			printLine(outbuf);
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	c8 01       	movw	r24, r16
    2362:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	63 e9       	ldi	r22, 0x93	; 147
    236a:	7b e8       	ldi	r23, 0x8B	; 139
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2372:	c0 54       	subi	r28, 0x40	; 64
    2374:	dd 4f       	sbci	r29, 0xFD	; 253
    2376:	f8 80       	ld	r15, Y
    2378:	c0 5c       	subi	r28, 0xC0	; 192
    237a:	d2 40       	sbci	r29, 0x02	; 2
    237c:	cf 53       	subi	r28, 0x3F	; 63
    237e:	dd 4f       	sbci	r29, 0xFD	; 253
    2380:	e8 80       	ld	r14, Y
    2382:	c1 5c       	subi	r28, 0xC1	; 193
    2384:	d2 40       	sbci	r29, 0x02	; 2
    2386:	ce 53       	subi	r28, 0x3E	; 62
    2388:	dd 4f       	sbci	r29, 0xFD	; 253
    238a:	98 80       	ld	r9, Y
    238c:	c2 5c       	subi	r28, 0xC2	; 194
    238e:	d2 40       	sbci	r29, 0x02	; 2
    2390:	cd 53       	subi	r28, 0x3D	; 61
    2392:	dd 4f       	sbci	r29, 0xFD	; 253
    2394:	88 80       	ld	r8, Y
    2396:	c3 5c       	subi	r28, 0xC3	; 195
    2398:	d2 40       	sbci	r29, 0x02	; 2
    239a:	26 e6       	ldi	r18, 0x66	; 102
    239c:	36 e6       	ldi	r19, 0x66	; 102
    239e:	46 ee       	ldi	r20, 0xE6	; 230
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	6f 2d       	mov	r22, r15
    23a4:	7e 2d       	mov	r23, r14
    23a6:	89 2d       	mov	r24, r9
    23a8:	98 2d       	mov	r25, r8
    23aa:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsf3>
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	52 e4       	ldi	r21, 0x42	; 66
    23be:	0e 94 9d 1c 	call	0x393a	; 0x393a <__addsf3>
    23c2:	9f 93       	push	r25
    23c4:	8f 93       	push	r24
    23c6:	7f 93       	push	r23
    23c8:	6f 93       	push	r22
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	83 ea       	ldi	r24, 0xA3	; 163
    23d4:	9b e8       	ldi	r25, 0x8B	; 139
    23d6:	9f 93       	push	r25
    23d8:	8f 93       	push	r24
    23da:	1f 93       	push	r17
    23dc:	0f 93       	push	r16
    23de:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    23e2:	42 e0       	ldi	r20, 0x02	; 2
    23e4:	b8 01       	movw	r22, r16
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    23f2:	45 c2       	rjmp	.+1162   	; 0x287e <report+0xaf0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    23f4:	ae 01       	movw	r20, r28
    23f6:	40 53       	subi	r20, 0x30	; 48
    23f8:	5d 4f       	sbci	r21, 0xFD	; 253
    23fa:	be 01       	movw	r22, r28
    23fc:	64 53       	subi	r22, 0x34	; 52
    23fe:	7d 4f       	sbci	r23, 0xFD	; 253
    2400:	ce 01       	movw	r24, r28
    2402:	88 53       	subi	r24, 0x38	; 56
    2404:	9d 4f       	sbci	r25, 0xFD	; 253
    2406:	0e 94 ee 09 	call	0x13dc	; 0x13dc <get_orientation>
			get_time(currenttime);
    240a:	7e 01       	movw	r14, r28
    240c:	96 ef       	ldi	r25, 0xF6	; 246
    240e:	e9 1a       	sub	r14, r25
    2410:	9e ef       	ldi	r25, 0xFE	; 254
    2412:	f9 0a       	sbc	r15, r25
    2414:	c7 01       	movw	r24, r14
    2416:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    241a:	24 e3       	ldi	r18, 0x34	; 52
    241c:	20 9f       	mul	r18, r16
    241e:	c0 01       	movw	r24, r0
    2420:	21 9f       	mul	r18, r17
    2422:	90 0d       	add	r25, r0
    2424:	11 24       	eor	r1, r1
    2426:	8d 5c       	subi	r24, 0xCD	; 205
    2428:	97 4d       	sbci	r25, 0xD7	; 215
    242a:	9f 93       	push	r25
    242c:	8f 93       	push	r24
    242e:	cd 52       	subi	r28, 0x2D	; 45
    2430:	dd 4f       	sbci	r29, 0xFD	; 253
    2432:	88 81       	ld	r24, Y
    2434:	c3 5d       	subi	r28, 0xD3	; 211
    2436:	d2 40       	sbci	r29, 0x02	; 2
    2438:	8f 93       	push	r24
    243a:	ce 52       	subi	r28, 0x2E	; 46
    243c:	dd 4f       	sbci	r29, 0xFD	; 253
    243e:	88 81       	ld	r24, Y
    2440:	c2 5d       	subi	r28, 0xD2	; 210
    2442:	d2 40       	sbci	r29, 0x02	; 2
    2444:	8f 93       	push	r24
    2446:	cf 52       	subi	r28, 0x2F	; 47
    2448:	dd 4f       	sbci	r29, 0xFD	; 253
    244a:	88 81       	ld	r24, Y
    244c:	c1 5d       	subi	r28, 0xD1	; 209
    244e:	d2 40       	sbci	r29, 0x02	; 2
    2450:	8f 93       	push	r24
    2452:	c0 53       	subi	r28, 0x30	; 48
    2454:	dd 4f       	sbci	r29, 0xFD	; 253
    2456:	88 81       	ld	r24, Y
    2458:	c0 5d       	subi	r28, 0xD0	; 208
    245a:	d2 40       	sbci	r29, 0x02	; 2
    245c:	8f 93       	push	r24
    245e:	c1 53       	subi	r28, 0x31	; 49
    2460:	dd 4f       	sbci	r29, 0xFD	; 253
    2462:	88 81       	ld	r24, Y
    2464:	cf 5c       	subi	r28, 0xCF	; 207
    2466:	d2 40       	sbci	r29, 0x02	; 2
    2468:	8f 93       	push	r24
    246a:	c2 53       	subi	r28, 0x32	; 50
    246c:	dd 4f       	sbci	r29, 0xFD	; 253
    246e:	88 81       	ld	r24, Y
    2470:	ce 5c       	subi	r28, 0xCE	; 206
    2472:	d2 40       	sbci	r29, 0x02	; 2
    2474:	8f 93       	push	r24
    2476:	c3 53       	subi	r28, 0x33	; 51
    2478:	dd 4f       	sbci	r29, 0xFD	; 253
    247a:	88 81       	ld	r24, Y
    247c:	cd 5c       	subi	r28, 0xCD	; 205
    247e:	d2 40       	sbci	r29, 0x02	; 2
    2480:	8f 93       	push	r24
    2482:	c4 53       	subi	r28, 0x34	; 52
    2484:	dd 4f       	sbci	r29, 0xFD	; 253
    2486:	88 81       	ld	r24, Y
    2488:	cc 5c       	subi	r28, 0xCC	; 204
    248a:	d2 40       	sbci	r29, 0x02	; 2
    248c:	8f 93       	push	r24
    248e:	c5 53       	subi	r28, 0x35	; 53
    2490:	dd 4f       	sbci	r29, 0xFD	; 253
    2492:	88 81       	ld	r24, Y
    2494:	cb 5c       	subi	r28, 0xCB	; 203
    2496:	d2 40       	sbci	r29, 0x02	; 2
    2498:	8f 93       	push	r24
    249a:	c6 53       	subi	r28, 0x36	; 54
    249c:	dd 4f       	sbci	r29, 0xFD	; 253
    249e:	88 81       	ld	r24, Y
    24a0:	ca 5c       	subi	r28, 0xCA	; 202
    24a2:	d2 40       	sbci	r29, 0x02	; 2
    24a4:	8f 93       	push	r24
    24a6:	c7 53       	subi	r28, 0x37	; 55
    24a8:	dd 4f       	sbci	r29, 0xFD	; 253
    24aa:	88 81       	ld	r24, Y
    24ac:	c9 5c       	subi	r28, 0xC9	; 201
    24ae:	d2 40       	sbci	r29, 0x02	; 2
    24b0:	8f 93       	push	r24
    24b2:	c8 53       	subi	r28, 0x38	; 56
    24b4:	dd 4f       	sbci	r29, 0xFD	; 253
    24b6:	88 81       	ld	r24, Y
    24b8:	c8 5c       	subi	r28, 0xC8	; 200
    24ba:	d2 40       	sbci	r29, 0x02	; 2
    24bc:	8f 93       	push	r24
    24be:	ff 92       	push	r15
    24c0:	ef 92       	push	r14
    24c2:	ce 01       	movw	r24, r28
    24c4:	85 52       	subi	r24, 0x25	; 37
    24c6:	9e 4f       	sbci	r25, 0xFE	; 254
    24c8:	9f 93       	push	r25
    24ca:	8f 93       	push	r24
    24cc:	8e 01       	movw	r16, r28
    24ce:	0f 5f       	subi	r16, 0xFF	; 255
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	1f 93       	push	r17
    24d4:	0f 93       	push	r16
    24d6:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			printLine(outbuf);
    24da:	c8 01       	movw	r24, r16
    24dc:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			writestr_OLED(1, "Orientation", 1);
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	69 eb       	ldi	r22, 0xB9	; 185
    24e4:	7b e8       	ldi	r23, 0x8B	; 139
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    24ec:	cd 52       	subi	r28, 0x2D	; 45
    24ee:	dd 4f       	sbci	r29, 0xFD	; 253
    24f0:	88 81       	ld	r24, Y
    24f2:	c3 5d       	subi	r28, 0xD3	; 211
    24f4:	d2 40       	sbci	r29, 0x02	; 2
    24f6:	8f 93       	push	r24
    24f8:	ce 52       	subi	r28, 0x2E	; 46
    24fa:	dd 4f       	sbci	r29, 0xFD	; 253
    24fc:	88 81       	ld	r24, Y
    24fe:	c2 5d       	subi	r28, 0xD2	; 210
    2500:	d2 40       	sbci	r29, 0x02	; 2
    2502:	8f 93       	push	r24
    2504:	cf 52       	subi	r28, 0x2F	; 47
    2506:	dd 4f       	sbci	r29, 0xFD	; 253
    2508:	88 81       	ld	r24, Y
    250a:	c1 5d       	subi	r28, 0xD1	; 209
    250c:	d2 40       	sbci	r29, 0x02	; 2
    250e:	8f 93       	push	r24
    2510:	c0 53       	subi	r28, 0x30	; 48
    2512:	dd 4f       	sbci	r29, 0xFD	; 253
    2514:	88 81       	ld	r24, Y
    2516:	c0 5d       	subi	r28, 0xD0	; 208
    2518:	d2 40       	sbci	r29, 0x02	; 2
    251a:	8f 93       	push	r24
    251c:	c1 53       	subi	r28, 0x31	; 49
    251e:	dd 4f       	sbci	r29, 0xFD	; 253
    2520:	88 81       	ld	r24, Y
    2522:	cf 5c       	subi	r28, 0xCF	; 207
    2524:	d2 40       	sbci	r29, 0x02	; 2
    2526:	8f 93       	push	r24
    2528:	c2 53       	subi	r28, 0x32	; 50
    252a:	dd 4f       	sbci	r29, 0xFD	; 253
    252c:	88 81       	ld	r24, Y
    252e:	ce 5c       	subi	r28, 0xCE	; 206
    2530:	d2 40       	sbci	r29, 0x02	; 2
    2532:	8f 93       	push	r24
    2534:	c3 53       	subi	r28, 0x33	; 51
    2536:	dd 4f       	sbci	r29, 0xFD	; 253
    2538:	88 81       	ld	r24, Y
    253a:	cd 5c       	subi	r28, 0xCD	; 205
    253c:	d2 40       	sbci	r29, 0x02	; 2
    253e:	8f 93       	push	r24
    2540:	c4 53       	subi	r28, 0x34	; 52
    2542:	dd 4f       	sbci	r29, 0xFD	; 253
    2544:	88 81       	ld	r24, Y
    2546:	cc 5c       	subi	r28, 0xCC	; 204
    2548:	d2 40       	sbci	r29, 0x02	; 2
    254a:	8f 93       	push	r24
    254c:	c5 53       	subi	r28, 0x35	; 53
    254e:	dd 4f       	sbci	r29, 0xFD	; 253
    2550:	88 81       	ld	r24, Y
    2552:	cb 5c       	subi	r28, 0xCB	; 203
    2554:	d2 40       	sbci	r29, 0x02	; 2
    2556:	8f 93       	push	r24
    2558:	c6 53       	subi	r28, 0x36	; 54
    255a:	dd 4f       	sbci	r29, 0xFD	; 253
    255c:	88 81       	ld	r24, Y
    255e:	ca 5c       	subi	r28, 0xCA	; 202
    2560:	d2 40       	sbci	r29, 0x02	; 2
    2562:	8f 93       	push	r24
    2564:	c7 53       	subi	r28, 0x37	; 55
    2566:	dd 4f       	sbci	r29, 0xFD	; 253
    2568:	88 81       	ld	r24, Y
    256a:	c9 5c       	subi	r28, 0xC9	; 201
    256c:	d2 40       	sbci	r29, 0x02	; 2
    256e:	8f 93       	push	r24
    2570:	c8 53       	subi	r28, 0x38	; 56
    2572:	dd 4f       	sbci	r29, 0xFD	; 253
    2574:	88 81       	ld	r24, Y
    2576:	c8 5c       	subi	r28, 0xC8	; 200
    2578:	d2 40       	sbci	r29, 0x02	; 2
    257a:	8f 93       	push	r24
    257c:	ce 01       	movw	r24, r28
    257e:	89 50       	subi	r24, 0x09	; 9
    2580:	9e 4f       	sbci	r25, 0xFE	; 254
    2582:	9f 93       	push	r25
    2584:	8f 93       	push	r24
    2586:	1f 93       	push	r17
    2588:	0f 93       	push	r16
    258a:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	42 e0       	ldi	r20, 0x02	; 2
    2594:	b8 01       	movw	r22, r16
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    259c:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    259e:	6f c1       	rjmp	.+734    	; 0x287e <report+0xaf0>

		case 'p':
			get_time(currenttime);
    25a0:	7e 01       	movw	r14, r28
    25a2:	96 ef       	ldi	r25, 0xF6	; 246
    25a4:	e9 1a       	sub	r14, r25
    25a6:	9e ef       	ldi	r25, 0xFE	; 254
    25a8:	f9 0a       	sbc	r15, r25
    25aa:	c7 01       	movw	r24, r14
    25ac:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    25b0:	9e 01       	movw	r18, r28
    25b2:	27 5b       	subi	r18, 0xB7	; 183
    25b4:	3e 4f       	sbci	r19, 0xFE	; 254
    25b6:	ae 01       	movw	r20, r28
    25b8:	48 5b       	subi	r20, 0xB8	; 184
    25ba:	5e 4f       	sbci	r21, 0xFE	; 254
    25bc:	be 01       	movw	r22, r28
    25be:	69 5b       	subi	r22, 0xB9	; 185
    25c0:	7e 4f       	sbci	r23, 0xFE	; 254
    25c2:	ce 01       	movw	r24, r28
    25c4:	8a 5b       	subi	r24, 0xBA	; 186
    25c6:	9e 4f       	sbci	r25, 0xFE	; 254
    25c8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    25cc:	24 e3       	ldi	r18, 0x34	; 52
    25ce:	20 9f       	mul	r18, r16
    25d0:	c0 01       	movw	r24, r0
    25d2:	21 9f       	mul	r18, r17
    25d4:	90 0d       	add	r25, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	8d 5c       	subi	r24, 0xCD	; 205
    25da:	97 4d       	sbci	r25, 0xD7	; 215
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	c7 5b       	subi	r28, 0xB7	; 183
    25e2:	de 4f       	sbci	r29, 0xFE	; 254
    25e4:	88 81       	ld	r24, Y
    25e6:	c9 54       	subi	r28, 0x49	; 73
    25e8:	d1 40       	sbci	r29, 0x01	; 1
    25ea:	1f 92       	push	r1
    25ec:	8f 93       	push	r24
    25ee:	c8 5b       	subi	r28, 0xB8	; 184
    25f0:	de 4f       	sbci	r29, 0xFE	; 254
    25f2:	88 81       	ld	r24, Y
    25f4:	c8 54       	subi	r28, 0x48	; 72
    25f6:	d1 40       	sbci	r29, 0x01	; 1
    25f8:	1f 92       	push	r1
    25fa:	8f 93       	push	r24
    25fc:	c9 5b       	subi	r28, 0xB9	; 185
    25fe:	de 4f       	sbci	r29, 0xFE	; 254
    2600:	88 81       	ld	r24, Y
    2602:	c7 54       	subi	r28, 0x47	; 71
    2604:	d1 40       	sbci	r29, 0x01	; 1
    2606:	1f 92       	push	r1
    2608:	8f 93       	push	r24
    260a:	ca 5b       	subi	r28, 0xBA	; 186
    260c:	de 4f       	sbci	r29, 0xFE	; 254
    260e:	88 81       	ld	r24, Y
    2610:	c6 54       	subi	r28, 0x46	; 70
    2612:	d1 40       	sbci	r29, 0x01	; 1
    2614:	1f 92       	push	r1
    2616:	8f 93       	push	r24
    2618:	ff 92       	push	r15
    261a:	ef 92       	push	r14
    261c:	ce 01       	movw	r24, r28
    261e:	87 5f       	subi	r24, 0xF7	; 247
    2620:	9d 4f       	sbci	r25, 0xFD	; 253
    2622:	9f 93       	push	r25
    2624:	8f 93       	push	r24
    2626:	8e 01       	movw	r16, r28
    2628:	0f 5f       	subi	r16, 0xFF	; 255
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	1f 93       	push	r17
    262e:	0f 93       	push	r16
    2630:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			printLine(outbuf);
    2634:	c8 01       	movw	r24, r16
    2636:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>

			sprintf(outbuf, dformat_PN1, left, right);
    263a:	c8 5b       	subi	r28, 0xB8	; 184
    263c:	de 4f       	sbci	r29, 0xFE	; 254
    263e:	88 81       	ld	r24, Y
    2640:	c8 54       	subi	r28, 0x48	; 72
    2642:	d1 40       	sbci	r29, 0x01	; 1
    2644:	1f 92       	push	r1
    2646:	8f 93       	push	r24
    2648:	c9 5b       	subi	r28, 0xB9	; 185
    264a:	de 4f       	sbci	r29, 0xFE	; 254
    264c:	88 81       	ld	r24, Y
    264e:	c7 54       	subi	r28, 0x47	; 71
    2650:	d1 40       	sbci	r29, 0x01	; 1
    2652:	1f 92       	push	r1
    2654:	8f 93       	push	r24
    2656:	ce 01       	movw	r24, r28
    2658:	8a 5c       	subi	r24, 0xCA	; 202
    265a:	9d 4f       	sbci	r25, 0xFD	; 253
    265c:	9f 93       	push	r25
    265e:	8f 93       	push	r24
    2660:	1f 93       	push	r17
    2662:	0f 93       	push	r16
    2664:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	b8 01       	movw	r22, r16
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2672:	c7 5b       	subi	r28, 0xB7	; 183
    2674:	de 4f       	sbci	r29, 0xFE	; 254
    2676:	88 81       	ld	r24, Y
    2678:	c9 54       	subi	r28, 0x49	; 73
    267a:	d1 40       	sbci	r29, 0x01	; 1
    267c:	1f 92       	push	r1
    267e:	8f 93       	push	r24
    2680:	ca 5b       	subi	r28, 0xBA	; 186
    2682:	de 4f       	sbci	r29, 0xFE	; 254
    2684:	88 81       	ld	r24, Y
    2686:	c6 54       	subi	r28, 0x46	; 70
    2688:	d1 40       	sbci	r29, 0x01	; 1
    268a:	1f 92       	push	r1
    268c:	8f 93       	push	r24
    268e:	ce 01       	movw	r24, r28
    2690:	87 5b       	subi	r24, 0xB7	; 183
    2692:	9d 4f       	sbci	r25, 0xFD	; 253
    2694:	9f 93       	push	r25
    2696:	8f 93       	push	r24
    2698:	1f 93       	push	r17
    269a:	0f 93       	push	r16
    269c:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	42 e0       	ldi	r20, 0x02	; 2
    26a6:	b8 01       	movw	r22, r16
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26ae:	80 e0       	ldi	r24, 0x00	; 0

			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    26b0:	e6 c0       	rjmp	.+460    	; 0x287e <report+0xaf0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    26b2:	7e 01       	movw	r14, r28
    26b4:	96 ef       	ldi	r25, 0xF6	; 246
    26b6:	e9 1a       	sub	r14, r25
    26b8:	9e ef       	ldi	r25, 0xFE	; 254
    26ba:	f9 0a       	sbc	r15, r25
    26bc:	c7 01       	movw	r24, r14
    26be:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			get_SETTIME(lastsettime);
    26c2:	6e 01       	movw	r12, r28
    26c4:	82 ee       	ldi	r24, 0xE2	; 226
    26c6:	c8 1a       	sub	r12, r24
    26c8:	8e ef       	ldi	r24, 0xFE	; 254
    26ca:	d8 0a       	sbc	r13, r24
    26cc:	c6 01       	movw	r24, r12
    26ce:	0e 94 27 07 	call	0xe4e	; 0xe4e <get_SETTIME>
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
    26d2:	5e 01       	movw	r10, r28
    26d4:	9e ec       	ldi	r25, 0xCE	; 206
    26d6:	a9 1a       	sub	r10, r25
    26d8:	9e ef       	ldi	r25, 0xFE	; 254
    26da:	b9 0a       	sbc	r11, r25
    26dc:	c5 01       	movw	r24, r10
    26de:	0e 94 59 06 	call	0xcb2	; 0xcb2 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    26e2:	24 e3       	ldi	r18, 0x34	; 52
    26e4:	20 9f       	mul	r18, r16
    26e6:	c0 01       	movw	r24, r0
    26e8:	21 9f       	mul	r18, r17
    26ea:	90 0d       	add	r25, r0
    26ec:	11 24       	eor	r1, r1
    26ee:	8d 5c       	subi	r24, 0xCD	; 205
    26f0:	97 4d       	sbci	r25, 0xD7	; 215
		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    26f2:	9f 93       	push	r25
    26f4:	8f 93       	push	r24
    26f6:	bf 92       	push	r11
    26f8:	af 92       	push	r10
    26fa:	df 92       	push	r13
    26fc:	cf 92       	push	r12
    26fe:	ff 92       	push	r15
    2700:	ef 92       	push	r14
    2702:	ce 01       	movw	r24, r28
    2704:	84 5a       	subi	r24, 0xA4	; 164
    2706:	9d 4f       	sbci	r25, 0xFD	; 253
    2708:	9f 93       	push	r25
    270a:	8f 93       	push	r24
    270c:	8e 01       	movw	r16, r28
    270e:	0f 5f       	subi	r16, 0xFF	; 255
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	1f 93       	push	r17
    2714:	0f 93       	push	r16
    2716:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    271a:	c8 01       	movw	r24, r16
    271c:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			writestr_OLED(1, "Time", 1);
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	65 ec       	ldi	r22, 0xC5	; 197
    2724:	7b e8       	ldi	r23, 0x8B	; 139
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    272c:	b7 01       	movw	r22, r14
    272e:	65 5f       	subi	r22, 0xF5	; 245
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	42 e0       	ldi	r20, 0x02	; 2
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    273e:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2740:	9e c0       	rjmp	.+316    	; 0x287e <report+0xaf0>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 4b 08 	call	0x1096	; 0x1096 <read_ionpump>
    2748:	d6 2e       	mov	r13, r22
    274a:	c7 2e       	mov	r12, r23
    274c:	b8 2e       	mov	r11, r24
    274e:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	0e 94 4b 08 	call	0x1096	; 0x1096 <read_ionpump>
    2756:	96 2e       	mov	r9, r22
    2758:	87 2e       	mov	r8, r23
    275a:	78 2e       	mov	r7, r24
    275c:	69 2e       	mov	r6, r25
			get_time(currenttime);
    275e:	7e 01       	movw	r14, r28
    2760:	96 ef       	ldi	r25, 0xF6	; 246
    2762:	e9 1a       	sub	r14, r25
    2764:	9e ef       	ldi	r25, 0xFE	; 254
    2766:	f9 0a       	sbc	r15, r25
    2768:	c7 01       	movw	r24, r14
    276a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    276e:	24 e3       	ldi	r18, 0x34	; 52
    2770:	20 9f       	mul	r18, r16
    2772:	c0 01       	movw	r24, r0
    2774:	21 9f       	mul	r18, r17
    2776:	90 0d       	add	r25, r0
    2778:	11 24       	eor	r1, r1
    277a:	8d 5c       	subi	r24, 0xCD	; 205
    277c:	97 4d       	sbci	r25, 0xD7	; 215
    277e:	9f 93       	push	r25
    2780:	8f 93       	push	r24
    2782:	6f 92       	push	r6
    2784:	7f 92       	push	r7
    2786:	8f 92       	push	r8
    2788:	9f 92       	push	r9
    278a:	af 92       	push	r10
    278c:	bf 92       	push	r11
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ff 92       	push	r15
    2794:	ef 92       	push	r14
    2796:	ce 01       	movw	r24, r28
    2798:	8b 58       	subi	r24, 0x8B	; 139
    279a:	9d 4f       	sbci	r25, 0xFD	; 253
    279c:	9f 93       	push	r25
    279e:	8f 93       	push	r24
    27a0:	8e 01       	movw	r16, r28
    27a2:	0f 5f       	subi	r16, 0xFF	; 255
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	1f 93       	push	r17
    27a8:	0f 93       	push	r16
    27aa:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			printLine(outbuf);
    27ae:	c8 01       	movw	r24, r16
    27b0:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>

			writestr_OLED(1, "RedVac  BlueVac", 1);
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	6a ec       	ldi	r22, 0xCA	; 202
    27b8:	7b e8       	ldi	r23, 0x8B	; 139
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    27c0:	6f 92       	push	r6
    27c2:	7f 92       	push	r7
    27c4:	8f 92       	push	r8
    27c6:	9f 92       	push	r9
    27c8:	af 92       	push	r10
    27ca:	bf 92       	push	r11
    27cc:	cf 92       	push	r12
    27ce:	df 92       	push	r13
    27d0:	ce 01       	movw	r24, r28
    27d2:	86 56       	subi	r24, 0x66	; 102
    27d4:	9d 4f       	sbci	r25, 0xFD	; 253
    27d6:	9f 93       	push	r25
    27d8:	8f 93       	push	r24
    27da:	1f 93       	push	r17
    27dc:	0f 93       	push	r16
    27de:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    27e2:	42 e0       	ldi	r20, 0x02	; 2
    27e4:	b8 01       	movw	r22, r16
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);

			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    27f2:	45 c0       	rjmp	.+138    	; 0x287e <report+0xaf0>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    27f4:	6e 01       	movw	r12, r28
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	c9 0e       	add	r12, r25
    27fa:	d1 1c       	adc	r13, r1
    27fc:	c6 01       	movw	r24, r12
    27fe:	0e 94 60 06 	call	0xcc0	; 0xcc0 <get_VERSION>
			get_time(currenttime);
    2802:	7e 01       	movw	r14, r28
    2804:	86 ef       	ldi	r24, 0xF6	; 246
    2806:	e8 1a       	sub	r14, r24
    2808:	8e ef       	ldi	r24, 0xFE	; 254
    280a:	f8 0a       	sbc	r15, r24
    280c:	c7 01       	movw	r24, r14
    280e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2812:	24 e3       	ldi	r18, 0x34	; 52
    2814:	20 9f       	mul	r18, r16
    2816:	c0 01       	movw	r24, r0
    2818:	21 9f       	mul	r18, r17
    281a:	90 0d       	add	r25, r0
    281c:	11 24       	eor	r1, r1
    281e:	8d 5c       	subi	r24, 0xCD	; 205
    2820:	97 4d       	sbci	r25, 0xD7	; 215
    2822:	9f 93       	push	r25
    2824:	8f 93       	push	r24
    2826:	df 92       	push	r13
    2828:	cf 92       	push	r12
    282a:	ff 92       	push	r15
    282c:	ef 92       	push	r14
    282e:	ce 01       	movw	r24, r28
    2830:	89 55       	subi	r24, 0x59	; 89
    2832:	9d 4f       	sbci	r25, 0xFD	; 253
    2834:	9f 93       	push	r25
    2836:	8f 93       	push	r24
    2838:	8e 01       	movw	r16, r28
    283a:	0f 5f       	subi	r16, 0xFF	; 255
    283c:	1f 4f       	sbci	r17, 0xFF	; 255
    283e:	1f 93       	push	r17
    2840:	0f 93       	push	r16
    2842:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
			printLine(outbuf);
    2846:	c8 01       	movw	r24, r16
    2848:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	65 ed       	ldi	r22, 0xD5	; 213
    2850:	7a e8       	ldi	r23, 0x8A	; 138
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			get_VERSION(outbuf);
    2858:	c8 01       	movw	r24, r16
    285a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    285e:	42 e0       	ldi	r20, 0x02	; 2
    2860:	b8 01       	movw	r22, r16
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    286c:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    286e:	07 c0       	rjmp	.+14     	; 0x287e <report+0xaf0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2870:	6a ed       	ldi	r22, 0xDA	; 218
    2872:	7b e8       	ldi	r23, 0x8B	; 139
    2874:	8a ec       	ldi	r24, 0xCA	; 202
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    287c:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    287e:	c1 52       	subi	r28, 0x21	; 33
    2880:	dd 4f       	sbci	r29, 0xFD	; 253
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	df 90       	pop	r13
    2894:	cf 90       	pop	r12
    2896:	bf 90       	pop	r11
    2898:	af 90       	pop	r10
    289a:	9f 90       	pop	r9
    289c:	8f 90       	pop	r8
    289e:	7f 90       	pop	r7
    28a0:	6f 90       	pop	r6
    28a2:	5f 90       	pop	r5
    28a4:	4f 90       	pop	r4
    28a6:	3f 90       	pop	r3
    28a8:	2f 90       	pop	r2
    28aa:	08 95       	ret

000028ac <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    28ac:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28b6:	1b c0       	rjmp	.+54     	; 0x28ee <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    28b8:	fd 01       	movw	r30, r26
    28ba:	e4 0f       	add	r30, r20
    28bc:	f5 1f       	adc	r31, r21
    28be:	20 81       	ld	r18, Z
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	32 2f       	mov	r19, r18
    28c4:	22 27       	eor	r18, r18
    28c6:	82 27       	eor	r24, r18
    28c8:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	0c c0       	rjmp	.+24     	; 0x28e6 <crc16+0x3a>
			if (crc & 0x8000) {
    28ce:	99 23       	and	r25, r25
    28d0:	3c f4       	brge	.+14     	; 0x28e0 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	31 e2       	ldi	r19, 0x21	; 33
    28d8:	83 27       	eor	r24, r19
    28da:	30 e1       	ldi	r19, 0x10	; 16
    28dc:	93 27       	eor	r25, r19
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <crc16+0x38>
			} else {
				crc = crc << 1;
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    28e4:	2f 5f       	subi	r18, 0xFF	; 255
    28e6:	28 30       	cpi	r18, 0x08	; 8
    28e8:	90 f3       	brcs	.-28     	; 0x28ce <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28ea:	4f 5f       	subi	r20, 0xFF	; 255
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	46 17       	cp	r20, r22
    28f0:	57 07       	cpc	r21, r23
    28f2:	10 f3       	brcs	.-60     	; 0x28b8 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    28f4:	08 95       	ret

000028f6 <getFRAM_MOTOREncoder>:
	Returns:
		ERROR on FRAM read error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t getFRAM_MOTOREncoder(uint8_t controller, int32_t *encoderValue)
{
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <getFRAM_MOTOREncoder+0xa>
    2900:	00 d0       	rcall	.+0      	; 0x2902 <getFRAM_MOTOREncoder+0xc>
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	8b 01       	movw	r16, r22

	uint8_t tbuf[4];
	uint16_t memaddr;
	int32_t tempVal;

	switch (controller) {
    2908:	81 38       	cpi	r24, 0x81	; 129
    290a:	51 f0       	breq	.+20     	; 0x2920 <getFRAM_MOTOREncoder+0x2a>
    290c:	82 38       	cpi	r24, 0x82	; 130
    290e:	29 f0       	breq	.+10     	; 0x291a <getFRAM_MOTOREncoder+0x24>
    2910:	80 38       	cpi	r24, 0x80	; 128
    2912:	d1 f5       	brne	.+116    	; 0x2988 <getFRAM_MOTOREncoder+0x92>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
    2914:	64 e1       	ldi	r22, 0x14	; 20
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <getFRAM_MOTOREncoder+0x2e>
		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
    291a:	6c e1       	ldi	r22, 0x1C	; 28
    291c:	70 e0       	ldi	r23, 0x00	; 0
			break;
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <getFRAM_MOTOREncoder+0x2e>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
    2920:	68 e1       	ldi	r22, 0x18	; 24
    2922:	70 e0       	ldi	r23, 0x00	; 0

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, memaddr, tbuf, 4) == ERROR) {
    2924:	24 e0       	ldi	r18, 0x04	; 4
    2926:	ae 01       	movw	r20, r28
    2928:	4f 5f       	subi	r20, 0xFF	; 255
    292a:	5f 4f       	sbci	r21, 0xFF	; 255
    292c:	80 e5       	ldi	r24, 0x50	; 80
    292e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <read_FRAM>
    2932:	83 36       	cpi	r24, 0x63	; 99
    2934:	51 f1       	breq	.+84     	; 0x298a <getFRAM_MOTOREncoder+0x94>
		return(ERROR);
	}
	tempVal =  (uint32_t) tbuf[0] << 24;
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	78 2f       	mov	r23, r24
    2940:	66 27       	eor	r22, r22
    2942:	55 27       	eor	r21, r21
    2944:	44 27       	eor	r20, r20
	tempVal |= (uint32_t) tbuf[1] << 16;
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	89 2f       	mov	r24, r25
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e0       	ldi	r26, 0x00	; 0
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	dc 01       	movw	r26, r24
    2952:	99 27       	eor	r25, r25
    2954:	88 27       	eor	r24, r24
    2956:	84 2b       	or	r24, r20
    2958:	95 2b       	or	r25, r21
    295a:	a6 2b       	or	r26, r22
    295c:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[2] << 8;
    295e:	4b 81       	ldd	r20, Y+3	; 0x03
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	76 2f       	mov	r23, r22
    2968:	65 2f       	mov	r22, r21
    296a:	54 2f       	mov	r21, r20
    296c:	44 27       	eor	r20, r20
    296e:	84 2b       	or	r24, r20
    2970:	95 2b       	or	r25, r21
    2972:	a6 2b       	or	r26, r22
    2974:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[3];
    2976:	2c 81       	ldd	r18, Y+4	; 0x04
    2978:	82 2b       	or	r24, r18
	*encoderValue = tempVal;
    297a:	f8 01       	movw	r30, r16
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	01 c0       	rjmp	.+2      	; 0x298a <getFRAM_MOTOREncoder+0x94>
		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    2988:	83 e6       	ldi	r24, 0x63	; 99
	tempVal |= (uint32_t) tbuf[3];
	*encoderValue = tempVal;

	return(NOERROR);

}
    298a:	24 96       	adiw	r28, 0x04	; 4
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	27 97       	sbiw	r28, 0x07	; 7
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    29b2:	97 e0       	ldi	r25, 0x07	; 7
    29b4:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    29b8:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    29bc:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    29c0:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    29c2:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    29c4:	42 e0       	ldi	r20, 0x02	; 2
    29c6:	be 01       	movw	r22, r28
    29c8:	6f 5f       	subi	r22, 0xFF	; 255
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

	start_TCB0(1);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    29da:	16 c0       	rjmp	.+44     	; 0x2a08 <get_MOTOREncoder+0x6e>
		asm("nop");
    29dc:	00 00       	nop
		if (ticks > 500) {			// Timeout
    29de:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    29e2:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    29e6:	85 3f       	cpi	r24, 0xF5	; 245
    29e8:	91 40       	sbci	r25, 0x01	; 1
    29ea:	70 f0       	brcs	.+28     	; 0x2a08 <get_MOTOREncoder+0x6e>
			stop_TCB0();
    29ec:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    29f0:	6b e5       	ldi	r22, 0x5B	; 91
    29f2:	7d e8       	ldi	r23, 0x8D	; 141
    29f4:	80 e3       	ldi	r24, 0x30	; 48
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
printLine("timeout");													// THIS GETS HIT ON 11 sec ticks but not on ra command
    29fc:	8d eb       	ldi	r24, 0xBD	; 189
    29fe:	9d e8       	ldi	r25, 0x8D	; 141
    2a00:	0e 94 8a 03 	call	0x714	; 0x714 <printLine>
			return(ERROR);
    2a04:	83 e6       	ldi	r24, 0x63	; 99
    2a06:	74 c0       	rjmp	.+232    	; 0x2af0 <get_MOTOREncoder+0x156>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    2a08:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2a0c:	88 23       	and	r24, r24
    2a0e:	31 f3       	breq	.-52     	; 0x29dc <get_MOTOREncoder+0x42>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
printLine("timeout");													// THIS GETS HIT ON 11 sec ticks but not on ra command
			return(ERROR);
		}
	}
	stop_TCB0();
    2a10:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2a14:	e9 e1       	ldi	r30, 0x19	; 25
    2a16:	fa e2       	ldi	r31, 0x2A	; 42
    2a18:	e5 80       	ldd	r14, Z+5	; 0x05
    2a1a:	f1 2c       	mov	r15, r1
    2a1c:	fe 2c       	mov	r15, r14
    2a1e:	ee 24       	eor	r14, r14
    2a20:	86 81       	ldd	r24, Z+6	; 0x06
    2a22:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a24:	22 e0       	ldi	r18, 0x02	; 2
    2a26:	0e c0       	rjmp	.+28     	; 0x2a44 <get_MOTOREncoder+0xaa>
		tbuf[i] = recv1_buf.data[i-2];
    2a28:	82 2f       	mov	r24, r18
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e9 5e       	subi	r30, 0xE9	; 233
    2a30:	f5 4d       	sbci	r31, 0xD5	; 213
    2a32:	30 81       	ld	r19, Z
    2a34:	e1 e0       	ldi	r30, 0x01	; 1
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	ec 0f       	add	r30, r28
    2a3a:	fd 1f       	adc	r31, r29
    2a3c:	e8 0f       	add	r30, r24
    2a3e:	f9 1f       	adc	r31, r25
    2a40:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a42:	2f 5f       	subi	r18, 0xFF	; 255
    2a44:	27 30       	cpi	r18, 0x07	; 7
    2a46:	80 f3       	brcs	.-32     	; 0x2a28 <get_MOTOREncoder+0x8e>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2a48:	67 e0       	ldi	r22, 0x07	; 7
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	0e 94 56 14 	call	0x28ac	; 0x28ac <crc16>

	if (crcReceived != crcExpected) {
    2a54:	e8 16       	cp	r14, r24
    2a56:	f9 06       	cpc	r15, r25
    2a58:	71 f0       	breq	.+28     	; 0x2a76 <get_MOTOREncoder+0xdc>
		*value = 0;
    2a5a:	d8 01       	movw	r26, r16
    2a5c:	1d 92       	st	X+, r1
    2a5e:	1d 92       	st	X+, r1
    2a60:	1d 92       	st	X+, r1
    2a62:	1c 92       	st	X, r1
    2a64:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2a66:	64 e7       	ldi	r22, 0x74	; 116
    2a68:	7d e8       	ldi	r23, 0x8D	; 141
    2a6a:	81 e3       	ldi	r24, 0x31	; 49
    2a6c:	91 e0       	ldi	r25, 0x01	; 1
    2a6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    2a72:	83 e6       	ldi	r24, 0x63	; 99
    2a74:	3d c0       	rjmp	.+122    	; 0x2af0 <get_MOTOREncoder+0x156>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2a76:	29 e1       	ldi	r18, 0x19	; 25
    2a78:	3a e2       	ldi	r19, 0x2A	; 42
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	80 81       	ld	r24, Z
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a0 e0       	ldi	r26, 0x00	; 0
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	78 2f       	mov	r23, r24
    2a86:	66 27       	eor	r22, r22
    2a88:	55 27       	eor	r21, r21
    2a8a:	44 27       	eor	r20, r20
    2a8c:	d8 01       	movw	r26, r16
    2a8e:	4d 93       	st	X+, r20
    2a90:	5d 93       	st	X+, r21
    2a92:	6d 93       	st	X+, r22
    2a94:	7c 93       	st	X, r23
    2a96:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	89 2f       	mov	r24, r25
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	99 27       	eor	r25, r25
    2aa6:	88 27       	eor	r24, r24
    2aa8:	84 2b       	or	r24, r20
    2aaa:	95 2b       	or	r25, r21
    2aac:	a6 2b       	or	r26, r22
    2aae:	b7 2b       	or	r27, r23
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2aba:	f9 01       	movw	r30, r18
    2abc:	42 81       	ldd	r20, Z+2	; 0x02
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	76 2f       	mov	r23, r22
    2ac6:	65 2f       	mov	r22, r21
    2ac8:	54 2f       	mov	r21, r20
    2aca:	44 27       	eor	r20, r20
    2acc:	84 2b       	or	r24, r20
    2ace:	95 2b       	or	r25, r21
    2ad0:	a6 2b       	or	r26, r22
    2ad2:	b7 2b       	or	r27, r23
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	80 83       	st	Z, r24
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	a2 83       	std	Z+2, r26	; 0x02
    2adc:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2ade:	f9 01       	movw	r30, r18
    2ae0:	23 81       	ldd	r18, Z+3	; 0x03
    2ae2:	82 2b       	or	r24, r18
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    2aee:	80 e0       	ldi	r24, 0x00	; 0

}
    2af0:	27 96       	adiw	r28, 0x07	; 7
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <get_MOTORFloat+0x16>
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <get_MOTORFloat+0x18>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	a8 2e       	mov	r10, r24
    2b22:	b6 2e       	mov	r11, r22
    2b24:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2b26:	84 e0       	ldi	r24, 0x04	; 4
    2b28:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2b2c:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2b30:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2b34:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b36:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b38:	42 e0       	ldi	r20, 0x02	; 2
    2b3a:	be 01       	movw	r22, r28
    2b3c:	6f 5f       	subi	r22, 0xFF	; 255
    2b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

	start_TCB0(1);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b4e:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	81 f0       	breq	.+32     	; 0x2b76 <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2b56:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2b5a:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2b5e:	c3 97       	sbiw	r24, 0x33	; 51
    2b60:	b0 f3       	brcs	.-20     	; 0x2b4e <get_MOTORFloat+0x4a>
			stop_TCB0();
    2b62:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2b66:	69 e8       	ldi	r22, 0x89	; 137
    2b68:	7d e8       	ldi	r23, 0x8D	; 141
    2b6a:	80 e3       	ldi	r24, 0x30	; 48
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    2b72:	83 e6       	ldi	r24, 0x63	; 99
    2b74:	37 c0       	rjmp	.+110    	; 0x2be4 <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2b76:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2b7a:	e9 e1       	ldi	r30, 0x19	; 25
    2b7c:	fa e2       	ldi	r31, 0x2A	; 42
    2b7e:	90 81       	ld	r25, Z
    2b80:	c9 2e       	mov	r12, r25
    2b82:	d1 2c       	mov	r13, r1
    2b84:	dc 2c       	mov	r13, r12
    2b86:	cc 24       	eor	r12, r12
    2b88:	81 81       	ldd	r24, Z+1	; 0x01
    2b8a:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2b8c:	02 81       	ldd	r16, Z+2	; 0x02
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	10 2f       	mov	r17, r16
    2b92:	00 27       	eor	r16, r16
    2b94:	23 81       	ldd	r18, Z+3	; 0x03
    2b96:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2b98:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b9a:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2b9c:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2b9e:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2ba0:	64 e0       	ldi	r22, 0x04	; 4
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	0e 94 56 14 	call	0x28ac	; 0x28ac <crc16>

	if (crcExpected != crcReceived) {
    2bac:	08 17       	cp	r16, r24
    2bae:	19 07       	cpc	r17, r25
    2bb0:	41 f0       	breq	.+16     	; 0x2bc2 <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2bb2:	6b e9       	ldi	r22, 0x9B	; 155
    2bb4:	7d e8       	ldi	r23, 0x8D	; 141
    2bb6:	81 e3       	ldi	r24, 0x31	; 49
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    2bbe:	83 e6       	ldi	r24, 0x63	; 99
    2bc0:	11 c0       	rjmp	.+34     	; 0x2be4 <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2bc2:	b6 01       	movw	r22, r12
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	51 e4       	ldi	r21, 0x41	; 65
    2bd4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__divsf3>
    2bd8:	f7 01       	movw	r30, r14
    2bda:	60 83       	st	Z, r22
    2bdc:	71 83       	std	Z+1, r23	; 0x01
    2bde:	82 83       	std	Z+2, r24	; 0x02
    2be0:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2be2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2be4:	24 96       	adiw	r28, 0x04	; 4
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	ff 90       	pop	r15
    2bf4:	ef 90       	pop	r14
    2bf6:	df 90       	pop	r13
    2bf8:	cf 90       	pop	r12
    2bfa:	bf 90       	pop	r11
    2bfc:	af 90       	pop	r10
    2bfe:	08 95       	ret

00002c00 <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	26 97       	sbiw	r28, 0x06	; 6
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2c18:	96 e0       	ldi	r25, 0x06	; 6
    2c1a:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2c1e:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2c22:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2c26:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2c28:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2c2a:	42 e0       	ldi	r20, 0x02	; 2
    2c2c:	be 01       	movw	r22, r28
    2c2e:	6f 5f       	subi	r22, 0xFF	; 255
    2c30:	7f 4f       	sbci	r23, 0xFF	; 255
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

	start_TCB0(1);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2c40:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	61 f4       	brne	.+24     	; 0x2c60 <get_MOTORInt32+0x60>
			stop_TCB0();
    2c48:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2c4c:	e9 e1       	ldi	r30, 0x19	; 25
    2c4e:	fa e2       	ldi	r31, 0x2A	; 42
    2c50:	e4 80       	ldd	r14, Z+4	; 0x04
    2c52:	f1 2c       	mov	r15, r1
    2c54:	fe 2c       	mov	r15, r14
    2c56:	ee 24       	eor	r14, r14
    2c58:	85 81       	ldd	r24, Z+5	; 0x05
    2c5a:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c5c:	22 e0       	ldi	r18, 0x02	; 2
    2c5e:	1e c0       	rjmp	.+60     	; 0x2c9c <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2c60:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2c64:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2c68:	c3 97       	sbiw	r24, 0x33	; 51
    2c6a:	50 f3       	brcs	.-44     	; 0x2c40 <get_MOTORInt32+0x40>
			stop_TCB0();
    2c6c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2c70:	6e ea       	ldi	r22, 0xAE	; 174
    2c72:	7d e8       	ldi	r23, 0x8D	; 141
    2c74:	8f e2       	ldi	r24, 0x2F	; 47
    2c76:	91 e0       	ldi	r25, 0x01	; 1
    2c78:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    2c7c:	83 e6       	ldi	r24, 0x63	; 99
    2c7e:	54 c0       	rjmp	.+168    	; 0x2d28 <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2c80:	82 2f       	mov	r24, r18
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	fc 01       	movw	r30, r24
    2c86:	e9 5e       	subi	r30, 0xE9	; 233
    2c88:	f5 4d       	sbci	r31, 0xD5	; 213
    2c8a:	30 81       	ld	r19, Z
    2c8c:	e1 e0       	ldi	r30, 0x01	; 1
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	ec 0f       	add	r30, r28
    2c92:	fd 1f       	adc	r31, r29
    2c94:	e8 0f       	add	r30, r24
    2c96:	f9 1f       	adc	r31, r25
    2c98:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c9a:	2f 5f       	subi	r18, 0xFF	; 255
    2c9c:	26 30       	cpi	r18, 0x06	; 6
    2c9e:	80 f3       	brcs	.-32     	; 0x2c80 <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2ca0:	66 e0       	ldi	r22, 0x06	; 6
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	0e 94 56 14 	call	0x28ac	; 0x28ac <crc16>

	if (crcReceived != crcExpected) {
    2cac:	e8 16       	cp	r14, r24
    2cae:	f9 06       	cpc	r15, r25
    2cb0:	89 f0       	breq	.+34     	; 0x2cd4 <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2cb2:	65 ec       	ldi	r22, 0xC5	; 197
    2cb4:	7d e8       	ldi	r23, 0x8D	; 141
    2cb6:	81 e3       	ldi	r24, 0x31	; 49
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		*value = 0x7FFFFFFF;
    2cbe:	8f ef       	ldi	r24, 0xFF	; 255
    2cc0:	9f ef       	ldi	r25, 0xFF	; 255
    2cc2:	af ef       	ldi	r26, 0xFF	; 255
    2cc4:	bf e7       	ldi	r27, 0x7F	; 127
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	80 83       	st	Z, r24
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	a2 83       	std	Z+2, r26	; 0x02
    2cce:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2cd0:	83 e6       	ldi	r24, 0x63	; 99
    2cd2:	2a c0       	rjmp	.+84     	; 0x2d28 <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2cd4:	e9 e1       	ldi	r30, 0x19	; 25
    2cd6:	fa e2       	ldi	r31, 0x2A	; 42
    2cd8:	80 81       	ld	r24, Z
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a0 e0       	ldi	r26, 0x00	; 0
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	78 2f       	mov	r23, r24
    2ce2:	66 27       	eor	r22, r22
    2ce4:	55 27       	eor	r21, r21
    2ce6:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	89 2f       	mov	r24, r25
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a0 e0       	ldi	r26, 0x00	; 0
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	99 27       	eor	r25, r25
    2cf6:	88 27       	eor	r24, r24
    2cf8:	84 2b       	or	r24, r20
    2cfa:	95 2b       	or	r25, r21
    2cfc:	a6 2b       	or	r26, r22
    2cfe:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2d00:	42 81       	ldd	r20, Z+2	; 0x02
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	76 2f       	mov	r23, r22
    2d0a:	65 2f       	mov	r22, r21
    2d0c:	54 2f       	mov	r21, r20
    2d0e:	44 27       	eor	r20, r20
    2d10:	84 2b       	or	r24, r20
    2d12:	95 2b       	or	r25, r21
    2d14:	a6 2b       	or	r26, r22
    2d16:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2d18:	23 81       	ldd	r18, Z+3	; 0x03
    2d1a:	82 2b       	or	r24, r18
	*value = tempval;
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	80 83       	st	Z, r24
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	a2 83       	std	Z+2, r26	; 0x02
    2d24:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2d26:	80 e0       	ldi	r24, 0x00	; 0

}
    2d28:	26 96       	adiw	r28, 0x06	; 6
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	ff 90       	pop	r15
    2d38:	ef 90       	pop	r14
    2d3a:	08 95       	ret

00002d3c <motorsMoving>:
		return(NOERROR);
	}
}

uint8_t motorsMoving(void)
{
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <motorsMoving+0x8>
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <motorsMoving+0xa>
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2d4a:	10 e8       	ldi	r17, 0x80	; 128
    2d4c:	10 c0       	rjmp	.+32     	; 0x2d6e <motorsMoving+0x32>
		get_MOTOREncoder(i, ROBOREADENCODERSPEED, &encoderSpeed);
    2d4e:	ae 01       	movw	r20, r28
    2d50:	4f 5f       	subi	r20, 0xFF	; 255
    2d52:	5f 4f       	sbci	r21, 0xFF	; 255
    2d54:	62 e1       	ldi	r22, 0x12	; 18
    2d56:	81 2f       	mov	r24, r17
    2d58:	0e 94 cd 14 	call	0x299a	; 0x299a <get_MOTOREncoder>
		if (encoderSpeed) {
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	ab 81       	ldd	r26, Y+3	; 0x03
    2d62:	bc 81       	ldd	r27, Y+4	; 0x04
    2d64:	89 2b       	or	r24, r25
    2d66:	8a 2b       	or	r24, r26
    2d68:	8b 2b       	or	r24, r27
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <motorsMoving+0x3a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2d6c:	1f 5f       	subi	r17, 0xFF	; 255
    2d6e:	13 38       	cpi	r17, 0x83	; 131
    2d70:	70 f3       	brcs	.-36     	; 0x2d4e <motorsMoving+0x12>
		if (encoderSpeed) {
			return(YES);
		}
	}

	return(NO);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <motorsMoving+0x3c>
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
		get_MOTOREncoder(i, ROBOREADENCODERSPEED, &encoderSpeed);
		if (encoderSpeed) {
			return(YES);
    2d76:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    2d78:	24 96       	adiw	r28, 0x04	; 4
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	08 95       	ret

00002d86 <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	65 97       	sbiw	r28, 0x15	; 21
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2d94:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2d9e:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2da2:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2da6:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2da8:	81 e4       	ldi	r24, 0x41	; 65
    2daa:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2dac:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2dae:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2db0:	80 e2       	ldi	r24, 0x20	; 32
    2db2:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2db4:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2db6:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2db8:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2dba:	90 e4       	ldi	r25, 0x40	; 64
    2dbc:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2dbe:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2dc0:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2dc2:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2dc4:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2dc6:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2dc8:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2dca:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2dcc:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2dce:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2dd0:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2dd2:	63 e1       	ldi	r22, 0x13	; 19
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	0e 94 56 14 	call	0x28ac	; 0x28ac <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2dde:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2de0:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2de2:	45 e1       	ldi	r20, 0x15	; 21
    2de4:	be 01       	movw	r22, r28
    2de6:	6f 5f       	subi	r22, 0xFF	; 255
    2de8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2df8:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	41 f4       	brne	.+16     	; 0x2e10 <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2e00:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2e04:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    2e08:	8f 3f       	cpi	r24, 0xFF	; 255
    2e0a:	91 f4       	brne	.+36     	; 0x2e30 <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	17 c0       	rjmp	.+46     	; 0x2e3e <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2e10:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2e14:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2e18:	c3 97       	sbiw	r24, 0x33	; 51
    2e1a:	70 f3       	brcs	.-36     	; 0x2df8 <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2e1c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2e20:	6e ed       	ldi	r22, 0xDE	; 222
    2e22:	7d e8       	ldi	r23, 0x8D	; 141
    2e24:	8f e2       	ldi	r24, 0x2F	; 47
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    2e2c:	83 e6       	ldi	r24, 0x63	; 99
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2e30:	69 ef       	ldi	r22, 0xF9	; 249
    2e32:	7d e8       	ldi	r23, 0x8D	; 141
    2e34:	8f e2       	ldi	r24, 0x2F	; 47
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    2e3c:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2e3e:	65 96       	adiw	r28, 0x15	; 21
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <move_MOTOR+0x10>
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <move_MOTOR+0x12>
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2e60:	e8 2e       	mov	r14, r24
    2e62:	f1 2c       	mov	r15, r1
    2e64:	84 e3       	ldi	r24, 0x34	; 52
    2e66:	8e 9d       	mul	r24, r14
    2e68:	f0 01       	movw	r30, r0
    2e6a:	8f 9d       	mul	r24, r15
    2e6c:	f0 0d       	add	r31, r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	e8 5f       	subi	r30, 0xF8	; 248
    2e72:	f7 4d       	sbci	r31, 0xD7	; 215
    2e74:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2e76:	81 34       	cpi	r24, 0x41	; 65
    2e78:	d0 f0       	brcs	.+52     	; 0x2eae <move_MOTOR+0x64>
    2e7a:	84 34       	cpi	r24, 0x44	; 68
    2e7c:	28 f0       	brcs	.+10     	; 0x2e88 <move_MOTOR+0x3e>
    2e7e:	9f e9       	ldi	r25, 0x9F	; 159
    2e80:	98 0f       	add	r25, r24
    2e82:	93 30       	cpi	r25, 0x03	; 3
    2e84:	40 f0       	brcs	.+16     	; 0x2e96 <move_MOTOR+0x4c>
    2e86:	13 c0       	rjmp	.+38     	; 0x2eae <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2e88:	1f e3       	ldi	r17, 0x3F	; 63
    2e8a:	18 0f       	add	r17, r24
			currentPosition = 0;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
    2e8e:	1a 82       	std	Y+2, r1	; 0x02
    2e90:	1b 82       	std	Y+3, r1	; 0x03
    2e92:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2e94:	14 c0       	rjmp	.+40     	; 0x2ebe <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2e96:	1f e1       	ldi	r17, 0x1F	; 31
    2e98:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2e9a:	ae 01       	movw	r20, r28
    2e9c:	4f 5f       	subi	r20, 0xFF	; 255
    2e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea0:	60 e1       	ldi	r22, 0x10	; 16
    2ea2:	81 2f       	mov	r24, r17
    2ea4:	0e 94 cd 14 	call	0x299a	; 0x299a <get_MOTOREncoder>
			if (retval == ERROR) {
    2ea8:	83 36       	cpi	r24, 0x63	; 99
    2eaa:	49 f4       	brne	.+18     	; 0x2ebe <move_MOTOR+0x74>
    2eac:	39 c0       	rjmp	.+114    	; 0x2f20 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2eae:	60 e1       	ldi	r22, 0x10	; 16
    2eb0:	7e e8       	ldi	r23, 0x8E	; 142
    2eb2:	8d e2       	ldi	r24, 0x2D	; 45
    2eb4:	91 e0       	ldi	r25, 0x01	; 1
    2eb6:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    2eba:	83 e6       	ldi	r24, 0x63	; 99
    2ebc:	32 c0       	rjmp	.+100    	; 0x2f22 <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2ebe:	84 e3       	ldi	r24, 0x34	; 52
    2ec0:	8e 9d       	mul	r24, r14
    2ec2:	f0 01       	movw	r30, r0
    2ec4:	8f 9d       	mul	r24, r15
    2ec6:	f0 0d       	add	r31, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	e8 5f       	subi	r30, 0xF8	; 248
    2ecc:	f7 4d       	sbci	r31, 0xD7	; 215
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	08 c0       	rjmp	.+16     	; 0x2ee4 <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2ed4:	69 e2       	ldi	r22, 0x29	; 41
    2ed6:	7e e8       	ldi	r23, 0x8E	; 142
    2ed8:	83 e3       	ldi	r24, 0x33	; 51
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    2ee0:	83 e6       	ldi	r24, 0x63	; 99
    2ee2:	1f c0       	rjmp	.+62     	; 0x2f22 <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2ee4:	24 e3       	ldi	r18, 0x34	; 52
    2ee6:	2e 9d       	mul	r18, r14
    2ee8:	c0 01       	movw	r24, r0
    2eea:	2f 9d       	mul	r18, r15
    2eec:	90 0d       	add	r25, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	86 5f       	subi	r24, 0xF6	; 246
    2ef2:	97 4d       	sbci	r25, 0xD7	; 215
    2ef4:	0e 94 db 22 	call	0x45b6	; 0x45b6 <atol>
    2ef8:	9b 01       	movw	r18, r22
    2efa:	ac 01       	movw	r20, r24
    2efc:	ac e0       	ldi	r26, 0x0C	; 12
    2efe:	b1 e0       	ldi	r27, 0x01	; 1
    2f00:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__muluhisi3>
    2f04:	c9 80       	ldd	r12, Y+1	; 0x01
    2f06:	da 80       	ldd	r13, Y+2	; 0x02
    2f08:	eb 80       	ldd	r14, Y+3	; 0x03
    2f0a:	fc 80       	ldd	r15, Y+4	; 0x04
    2f0c:	ab 01       	movw	r20, r22
    2f0e:	bc 01       	movw	r22, r24
    2f10:	4c 0d       	add	r20, r12
    2f12:	5d 1d       	adc	r21, r13
    2f14:	6e 1d       	adc	r22, r14
    2f16:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2f18:	81 2f       	mov	r24, r17
    2f1a:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <move_MOTORAbsolute>
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2f20:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2f22:	24 96       	adiw	r28, 0x04	; 4
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	08 95       	ret

00002f38 <putFRAM_MOTOREncoder>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t putFRAM_MOTOREncoder(uint8_t controller)
{
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	28 97       	sbiw	r28, 0x08	; 8
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[4];
	uint16_t memaddr;
	int32_t oldencoderValue, encoderValue;

	switch (controller) {
    2f4a:	81 38       	cpi	r24, 0x81	; 129
    2f4c:	51 f0       	breq	.+20     	; 0x2f62 <putFRAM_MOTOREncoder+0x2a>
    2f4e:	82 38       	cpi	r24, 0x82	; 130
    2f50:	29 f0       	breq	.+10     	; 0x2f5c <putFRAM_MOTOREncoder+0x24>
    2f52:	80 38       	cpi	r24, 0x80	; 128
    2f54:	09 f5       	brne	.+66     	; 0x2f98 <putFRAM_MOTOREncoder+0x60>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
    2f56:	04 e1       	ldi	r16, 0x14	; 20
    2f58:	10 e0       	ldi	r17, 0x00	; 0
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <putFRAM_MOTOREncoder+0x2e>
		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
    2f5c:	0c e1       	ldi	r16, 0x1C	; 28
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <putFRAM_MOTOREncoder+0x2e>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
    2f62:	08 e1       	ldi	r16, 0x18	; 24
    2f64:	10 e0       	ldi	r17, 0x00	; 0
	oldencoderValue =  (uint32_t) tbuf[0] << 24;
	oldencoderValue |= (uint32_t) tbuf[1] << 16;
	oldencoderValue |= (uint32_t) tbuf[2] << 8;
	oldencoderValue |= (uint32_t) tbuf[3];
*/
	if (get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue) == ERROR) {		// THIS FAILS
    2f66:	ae 01       	movw	r20, r28
    2f68:	4b 5f       	subi	r20, 0xFB	; 251
    2f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6c:	60 e1       	ldi	r22, 0x10	; 16
    2f6e:	0e 94 cd 14 	call	0x299a	; 0x299a <get_MOTOREncoder>
    2f72:	83 36       	cpi	r24, 0x63	; 99
    2f74:	91 f0       	breq	.+36     	; 0x2f9a <putFRAM_MOTOREncoder+0x62>
/*
	if (oldencoderValue == encoderValue) {
		return(NOERROR);
	}
*/
	tbuf[0] = (encoderValue >> 24) & 0xFF;
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f7c:	38 85       	ldd	r19, Y+8	; 0x08
    2f7e:	39 83       	std	Y+1, r19	; 0x01
	tbuf[1] = (encoderValue >> 16) & 0xFF;
    2f80:	2a 83       	std	Y+2, r18	; 0x02
	tbuf[2] = (encoderValue >> 8) & 0xFF;
    2f82:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = encoderValue & 0xFF;
    2f84:	8c 83       	std	Y+4, r24	; 0x04

	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));
    2f86:	24 e0       	ldi	r18, 0x04	; 4
    2f88:	ae 01       	movw	r20, r28
    2f8a:	4f 5f       	subi	r20, 0xFF	; 255
    2f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8e:	b8 01       	movw	r22, r16
    2f90:	80 e5       	ldi	r24, 0x50	; 80
    2f92:	0e 94 57 07 	call	0xeae	; 0xeae <write_FRAM>
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <putFRAM_MOTOREncoder+0x62>
		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    2f98:	83 e6       	ldi	r24, 0x63	; 99
	tbuf[2] = (encoderValue >> 8) & 0xFF;
	tbuf[3] = encoderValue & 0xFF;

	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));

}
    2f9a:	28 96       	adiw	r28, 0x08	; 8
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	df 91       	pop	r29
    2fa2:	cf 91       	pop	r28
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	08 95       	ret

00002faa <saveFRAM_MOTOREncoders>:

uint8_t saveFRAM_MOTOREncoders(void)
{
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
	uint8_t i, error = 0, retval;
    2fae:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2fb0:	c0 e8       	ldi	r28, 0x80	; 128
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <saveFRAM_MOTOREncoders+0x14>
		retval = putFRAM_MOTOREncoder(i);
    2fb4:	8c 2f       	mov	r24, r28
    2fb6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <putFRAM_MOTOREncoder>
		error += retval;
    2fba:	d8 0f       	add	r29, r24

uint8_t saveFRAM_MOTOREncoders(void)
{
	uint8_t i, error = 0, retval;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2fbc:	cf 5f       	subi	r28, 0xFF	; 255
    2fbe:	c3 38       	cpi	r28, 0x83	; 131
    2fc0:	c8 f3       	brcs	.-14     	; 0x2fb4 <saveFRAM_MOTOREncoders+0xa>
		retval = putFRAM_MOTOREncoder(i);
		error += retval;
	}
	if (error) {
    2fc2:	dd 23       	and	r29, r29
    2fc4:	11 f0       	breq	.+4      	; 0x2fca <saveFRAM_MOTOREncoders+0x20>
		return(ERROR);
    2fc6:	83 e6       	ldi	r24, 0x63	; 99
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <saveFRAM_MOTOREncoders+0x22>
	} else {
		return(NOERROR);
    2fca:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	08 95       	ret

00002fd2 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, int32_t value)
{
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	26 97       	sbiw	r28, 0x06	; 6
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2fe0:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2fea:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2fee:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2ff2:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2ff4:	86 e1       	ldi	r24, 0x16	; 22
    2ff6:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2ff8:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2ffa:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2ffc:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2ffe:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    3000:	46 e0       	ldi	r20, 0x06	; 6
    3002:	be 01       	movw	r22, r28
    3004:	6f 5f       	subi	r22, 0xFF	; 255
    3006:	7f 4f       	sbci	r23, 0xFF	; 255
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    3016:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	41 f4       	brne	.+16     	; 0x302e <set_MOTOREncoder+0x5c>
			stop_TCB0();
    301e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    3022:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    3026:	8f 3f       	cpi	r24, 0xFF	; 255
    3028:	61 f0       	breq	.+24     	; 0x3042 <set_MOTOREncoder+0x70>
		return(ERROR);
    302a:	83 e6       	ldi	r24, 0x63	; 99
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    302e:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    3032:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    3036:	c3 97       	sbiw	r24, 0x33	; 51
    3038:	70 f3       	brcs	.-36     	; 0x3016 <set_MOTOREncoder+0x44>
			stop_TCB0();
    303a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			return(ERROR);
    303e:	83 e6       	ldi	r24, 0x63	; 99
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    3042:	80 e0       	ldi	r24, 0x00	; 0

}
    3044:	26 96       	adiw	r28, 0x06	; 6
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <init_MOTORS>:
		NOERROR otherwise

NEED TO FIGURE OUT WHAT TO DO ABOUT ERRORS
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	6d 97       	sbiw	r28, 0x1d	; 29
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	de bf       	out	0x3e, r29	; 62
	uint8_t controller, error = 0;
	int32_t encoderValue;

char str[25];

	timerSAVEENCODER = 0;
    3066:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    306a:	8b e0       	ldi	r24, 0x0B	; 11
    306c:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <timeoutSAVEENCODER>
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    3070:	e1 2c       	mov	r14, r1
char str[25];

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = 128; controller < 131; controller++) {
    3072:	68 94       	set
    3074:	ff 24       	eor	r15, r15
    3076:	f7 f8       	bld	r15, 7
    3078:	46 c0       	rjmp	.+140    	; 0x3106 <init_MOTORS+0xb6>
		// get saved encoder value from FRAM
		getFRAM_MOTOREncoder(controller, &encoderValue);
    307a:	be 01       	movw	r22, r28
    307c:	6f 5f       	subi	r22, 0xFF	; 255
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	8f 2d       	mov	r24, r15
    3082:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <getFRAM_MOTOREncoder>

sprintf(str, "encval=%ld\r\n", encoderValue);
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	8f 93       	push	r24
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	8f 93       	push	r24
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	8f 93       	push	r24
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	8f 93       	push	r24
    3096:	8d e4       	ldi	r24, 0x4D	; 77
    3098:	9e e8       	ldi	r25, 0x8E	; 142
    309a:	9f 93       	push	r25
    309c:	8f 93       	push	r24
    309e:	8e 01       	movw	r16, r28
    30a0:	0b 5f       	subi	r16, 0xFB	; 251
    30a2:	1f 4f       	sbci	r17, 0xFF	; 255
    30a4:	1f 93       	push	r17
    30a6:	0f 93       	push	r16
    30a8:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
send_USART(0, (uint8_t*) str, strlen(str));
    30ac:	f8 01       	movw	r30, r16
    30ae:	01 90       	ld	r0, Z+
    30b0:	00 20       	and	r0, r0
    30b2:	e9 f7       	brne	.-6      	; 0x30ae <init_MOTORS+0x5e>
    30b4:	31 97       	sbiw	r30, 0x01	; 1
    30b6:	af 01       	movw	r20, r30
    30b8:	40 1b       	sub	r20, r16
    30ba:	51 0b       	sbc	r21, r17
    30bc:	b8 01       	movw	r22, r16
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	0e 94 6d 1a 	call	0x34da	; 0x34da <send_USART>

		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    30c4:	49 81       	ldd	r20, Y+1	; 0x01
    30c6:	5a 81       	ldd	r21, Y+2	; 0x02
    30c8:	6b 81       	ldd	r22, Y+3	; 0x03
    30ca:	7c 81       	ldd	r23, Y+4	; 0x04
    30cc:	8f 2d       	mov	r24, r15
    30ce:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <set_MOTOREncoder>
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	83 36       	cpi	r24, 0x63	; 99
    30d8:	a9 f4       	brne	.+42     	; 0x3104 <init_MOTORS+0xb4>
			if (!firstTime[controller - 128]) {
    30da:	0f 2d       	mov	r16, r15
    30dc:	10 e0       	ldi	r17, 0x00	; 0
    30de:	00 58       	subi	r16, 0x80	; 128
    30e0:	11 09       	sbc	r17, r1
    30e2:	f8 01       	movw	r30, r16
    30e4:	e0 50       	subi	r30, 0x00	; 0
    30e6:	f8 4d       	sbci	r31, 0xD8	; 216
    30e8:	80 81       	ld	r24, Z
    30ea:	81 11       	cpse	r24, r1
    30ec:	0a c0       	rjmp	.+20     	; 0x3102 <init_MOTORS+0xb2>
				printError(ERR_MTRSETENC, "init_MOTORS");
    30ee:	6a e5       	ldi	r22, 0x5A	; 90
    30f0:	7e e8       	ldi	r23, 0x8E	; 142
    30f2:	82 e3       	ldi	r24, 0x32	; 50
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
				firstTime[controller - 128] = NO;
    30fa:	f8 01       	movw	r30, r16
    30fc:	e0 50       	subi	r30, 0x00	; 0
    30fe:	f8 4d       	sbci	r31, 0xD8	; 216
    3100:	10 82       	st	Z, r1
			}
			error++;
    3102:	e3 94       	inc	r14
char str[25];

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = 128; controller < 131; controller++) {
    3104:	f3 94       	inc	r15
    3106:	32 e8       	ldi	r19, 0x82	; 130
    3108:	3f 15       	cp	r19, r15
    310a:	08 f0       	brcs	.+2      	; 0x310e <init_MOTORS+0xbe>
    310c:	b6 cf       	rjmp	.-148    	; 0x307a <init_MOTORS+0x2a>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    310e:	ee 20       	and	r14, r14
    3110:	11 f0       	breq	.+4      	; 0x3116 <init_MOTORS+0xc6>
		return(ERROR);
    3112:	83 e6       	ldi	r24, 0x63	; 99
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <init_MOTORS+0xc8>
	} else {
		return(NOERROR);
    3116:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3118:	6d 96       	adiw	r28, 0x1d	; 29
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	ef 90       	pop	r14
    312a:	08 95       	ret

0000312c <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    312c:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    312e:	e0 e6       	ldi	r30, 0x60	; 96
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    3134:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    3136:	88 ed       	ldi	r24, 0xD8	; 216
    3138:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    313a:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    313c:	01 c0       	rjmp	.+2      	; 0x3140 <init_RTC+0x14>
		asm("nop");
    313e:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    3140:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    3144:	96 fd       	sbrc	r25, 6
    3146:	fb cf       	rjmp	.-10     	; 0x313e <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    3148:	e0 e6       	ldi	r30, 0x60	; 96
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    314e:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    3150:	28 ed       	ldi	r18, 0xD8	; 216
    3152:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    3154:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    3156:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    3158:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    315a:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    315c:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <init_RTC+0x36>
		asm("nop");
    3160:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    3162:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    3166:	91 11       	cpse	r25, r1
    3168:	fb cf       	rjmp	.-10     	; 0x3160 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    316a:	e0 e4       	ldi	r30, 0x40	; 64
    316c:	f1 e0       	ldi	r31, 0x01	; 1
    316e:	42 87       	std	Z+10, r20	; 0x0a
    3170:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    3176:	85 81       	ldd	r24, Z+5	; 0x05
    3178:	81 60       	ori	r24, 0x01	; 1
    317a:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    317c:	81 eb       	ldi	r24, 0xB1	; 177
    317e:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	81 60       	ori	r24, 0x01	; 1
    3184:	82 83       	std	Z+2, r24	; 0x02
    3186:	08 95       	ret

00003188 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    3188:	1f 92       	push	r1
    318a:	0f 92       	push	r0
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	0f 92       	push	r0
    3190:	11 24       	eor	r1, r1
    3192:	8f 93       	push	r24
    3194:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
			timerOLED++;
		}
	}
*/

	timerOLED++;					// Turn off the OLED display
    319c:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <timerOLED>
    31a0:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <timerOLED+0x1>
    31a4:	01 96       	adiw	r24, 0x01	; 1
    31a6:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timerOLED>
    31aa:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timerOLED+0x1>
	toggle_LED;						// Blink the light
    31ae:	80 e2       	ldi	r24, 0x20	; 32
    31b0:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
	timerSAVEENCODER++;				// Save the motor encoder values
    31b4:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerSAVEENCODER>

}
    31be:	9f 91       	pop	r25
    31c0:	8f 91       	pop	r24
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0
    31c8:	1f 90       	pop	r1
    31ca:	18 95       	reti

000031cc <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	24 e3       	ldi	r18, 0x34	; 52
    31d4:	28 9f       	mul	r18, r24
    31d6:	f0 01       	movw	r30, r0
    31d8:	29 9f       	mul	r18, r25
    31da:	f0 0d       	add	r31, r0
    31dc:	11 24       	eor	r1, r1
    31de:	e8 5f       	subi	r30, 0xF8	; 248
    31e0:	f7 4d       	sbci	r31, 0xD7	; 215
    31e2:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    31e4:	24 37       	cpi	r18, 0x74	; 116
    31e6:	29 f5       	brne	.+74     	; 0x3232 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    31e8:	24 e3       	ldi	r18, 0x34	; 52
    31ea:	28 9f       	mul	r18, r24
    31ec:	e0 01       	movw	r28, r0
    31ee:	29 9f       	mul	r18, r25
    31f0:	d0 0d       	add	r29, r0
    31f2:	11 24       	eor	r1, r1
    31f4:	c6 5f       	subi	r28, 0xF6	; 246
    31f6:	d7 4d       	sbci	r29, 0xD7	; 215
    31f8:	fe 01       	movw	r30, r28
    31fa:	01 90       	ld	r0, Z+
    31fc:	00 20       	and	r0, r0
    31fe:	e9 f7       	brne	.-6      	; 0x31fa <set+0x2e>
    3200:	31 97       	sbiw	r30, 0x01	; 1
    3202:	ec 1b       	sub	r30, r28
    3204:	fd 0b       	sbc	r31, r29
    3206:	73 97       	sbiw	r30, 0x13	; 19
    3208:	41 f0       	breq	.+16     	; 0x321a <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    320a:	66 e6       	ldi	r22, 0x66	; 102
    320c:	7e e8       	ldi	r23, 0x8E	; 142
    320e:	8a e5       	ldi	r24, 0x5A	; 90
    3210:	92 e0       	ldi	r25, 0x02	; 2
    3212:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
				return(ERROR);
    3216:	83 e6       	ldi	r24, 0x63	; 99
    3218:	13 c0       	rjmp	.+38     	; 0x3240 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    321a:	ce 01       	movw	r24, r28
    321c:	0e 94 33 06 	call	0xc66	; 0xc66 <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    3220:	24 e1       	ldi	r18, 0x14	; 20
    3222:	ae 01       	movw	r20, r28
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	80 e5       	ldi	r24, 0x50	; 80
    322a:	0e 94 57 07 	call	0xeae	; 0xeae <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <set+0x74>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
//			write_FRAM(FRAMTWIADDR, SETTIMEFRAM, (uint8_t*) pcmd[cstack].cvalue);
			break;

		default:
			printError(ERR_SET, "set what?");
    3232:	6b e7       	ldi	r22, 0x7B	; 123
    3234:	7e e8       	ldi	r23, 0x8E	; 142
    3236:	89 e5       	ldi	r24, 0x59	; 89
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
			return(ERROR);
    323e:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	00 d0       	rcall	.+0      	; 0x324c <get_temperature+0x6>
    324c:	00 d0       	rcall	.+0      	; 0x324e <get_temperature+0x8>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    3252:	83 30       	cpi	r24, 0x03	; 3
    3254:	18 f0       	brcs	.+6      	; 0x325c <get_temperature+0x16>
    3256:	83 30       	cpi	r24, 0x03	; 3
    3258:	39 f0       	breq	.+14     	; 0x3268 <get_temperature+0x22>
    325a:	0b c0       	rjmp	.+22     	; 0x3272 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    325c:	be 01       	movw	r22, r28
    325e:	6f 5f       	subi	r22, 0xFF	; 255
    3260:	7f 4f       	sbci	r23, 0xFF	; 255
    3262:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_AD590>
			break;
    3266:	0d c0       	rjmp	.+26     	; 0x3282 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    3268:	ce 01       	movw	r24, r28
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	0e 94 49 09 	call	0x1292	; 0x1292 <read_MCP9808>
			break;
    3270:	08 c0       	rjmp	.+16     	; 0x3282 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e8       	ldi	r25, 0x80	; 128
    3276:	a6 e2       	ldi	r26, 0x26	; 38
    3278:	b4 ec       	ldi	r27, 0xC4	; 196
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	ab 83       	std	Y+3, r26	; 0x03
    3280:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    3282:	69 81       	ldd	r22, Y+1	; 0x01
    3284:	7a 81       	ldd	r23, Y+2	; 0x02
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04

}
    328a:	24 96       	adiw	r28, 0x04	; 4
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	08 95       	ret

00003296 <testroutine>:

void testroutine(void)
{


	init_MOTORS();
    3296:	0e 94 28 18 	call	0x3050	; 0x3050 <init_MOTORS>
    329a:	08 95       	ret

0000329c <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    329c:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <ticks>
    32a0:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    32a4:	25 e0       	ldi	r18, 0x05	; 5
    32a6:	3d e0       	ldi	r19, 0x0D	; 13
    32a8:	ac 01       	movw	r20, r24
    32aa:	42 9f       	mul	r20, r18
    32ac:	c0 01       	movw	r24, r0
    32ae:	43 9f       	mul	r20, r19
    32b0:	90 0d       	add	r25, r0
    32b2:	52 9f       	mul	r21, r18
    32b4:	90 0d       	add	r25, r0
    32b6:	11 24       	eor	r1, r1
    32b8:	e0 e8       	ldi	r30, 0x80	; 128
    32ba:	fa e0       	ldi	r31, 0x0A	; 10
    32bc:	84 87       	std	Z+12, r24	; 0x0c
    32be:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    32c4:	80 83       	st	Z, r24
    32c6:	08 95       	ret

000032c8 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    32c8:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    32cc:	08 95       	ret

000032ce <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    32ce:	1f 92       	push	r1
    32d0:	0f 92       	push	r0
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	0f 92       	push	r0
    32d6:	11 24       	eor	r1, r1
    32d8:	8f 93       	push	r24
    32da:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    32e2:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    32e6:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <ticks>
    32f0:	90 93 18 2a 	sts	0x2A18, r25	; 0x802a18 <ticks+0x1>

    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	0f 90       	pop	r0
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	0f 90       	pop	r0
    32fe:	1f 90       	pop	r1
    3300:	18 95       	reti

00003302 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3302:	e0 ea       	ldi	r30, 0xA0	; 160
    3304:	f8 e0       	ldi	r31, 0x08	; 8
    3306:	8b e0       	ldi	r24, 0x0B	; 11
    3308:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    330a:	83 81       	ldd	r24, Z+3	; 0x03
    330c:	81 60       	ori	r24, 0x01	; 1
    330e:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3310:	85 81       	ldd	r24, Z+5	; 0x05
    3312:	81 60       	ori	r24, 0x01	; 1
    3314:	85 83       	std	Z+5, r24	; 0x05
    3316:	08 95       	ret

00003318 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3318:	01 c0       	rjmp	.+2      	; 0x331c <read_TWI+0x4>
		asm("nop");								// Should set timer here
    331a:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    331c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3320:	88 23       	and	r24, r24
    3322:	dc f7       	brge	.-10     	; 0x331a <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    3324:	e0 ea       	ldi	r30, 0xA0	; 160
    3326:	f8 e0       	ldi	r31, 0x08	; 8
    3328:	84 81       	ldd	r24, Z+4	; 0x04
    332a:	8b 7f       	andi	r24, 0xFB	; 251
    332c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    332e:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3330:	94 81       	ldd	r25, Z+4	; 0x04
    3332:	92 60       	ori	r25, 0x02	; 2
    3334:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    3336:	08 95       	ret

00003338 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3338:	01 c0       	rjmp	.+2      	; 0x333c <readlast_TWI+0x4>
		asm("nop");
    333a:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    333c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3340:	88 23       	and	r24, r24
    3342:	dc f7       	brge	.-10     	; 0x333a <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3344:	e0 ea       	ldi	r30, 0xA0	; 160
    3346:	f8 e0       	ldi	r31, 0x08	; 8
    3348:	84 81       	ldd	r24, Z+4	; 0x04
    334a:	84 60       	ori	r24, 0x04	; 4
    334c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    334e:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3350:	08 95       	ret

00003352 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3352:	61 30       	cpi	r22, 0x01	; 1
    3354:	39 f4       	brne	.+14     	; 0x3364 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	88 0f       	add	r24, r24
    335a:	99 1f       	adc	r25, r25
    335c:	81 60       	ori	r24, 0x01	; 1
    335e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3362:	03 c0       	rjmp	.+6      	; 0x336a <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    3364:	88 0f       	add	r24, r24
    3366:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3372:	0b c0       	rjmp	.+22     	; 0x338a <start_TWI+0x38>
		if (ticks > 10) {
    3374:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    3378:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    337c:	0b 97       	sbiw	r24, 0x0b	; 11
    337e:	20 f0       	brcs	.+8      	; 0x3388 <start_TWI+0x36>
			stop_TCB0();
    3380:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			return(ERROR);
    3384:	83 e6       	ldi	r24, 0x63	; 99
    3386:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    3388:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    338a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    338e:	80 7c       	andi	r24, 0xC0	; 192
    3390:	89 f3       	breq	.-30     	; 0x3374 <start_TWI+0x22>
			stop_TCB0();
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    3392:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3396:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    339a:	82 ff       	sbrs	r24, 2
    339c:	08 c0       	rjmp	.+16     	; 0x33ae <start_TWI+0x5c>
		printError(ERR_TWI, "TWI bus");
    339e:	65 e8       	ldi	r22, 0x85	; 133
    33a0:	7e e8       	ldi	r23, 0x8E	; 142
    33a2:	81 e9       	ldi	r24, 0x91	; 145
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    33aa:	83 e6       	ldi	r24, 0x63	; 99
    33ac:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    33ae:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    33b2:	83 ff       	sbrs	r24, 3
    33b4:	08 c0       	rjmp	.+16     	; 0x33c6 <start_TWI+0x74>
		printError(ERR_TWI, "TWI arbitration");
    33b6:	6d e8       	ldi	r22, 0x8D	; 141
    33b8:	7e e8       	ldi	r23, 0x8E	; 142
    33ba:	81 e9       	ldi	r24, 0x91	; 145
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	0e 94 a3 06 	call	0xd46	; 0xd46 <printError>
		return(ERROR);
    33c2:	83 e6       	ldi	r24, 0x63	; 99
    33c4:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    33c6:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    33ca:	89 2f       	mov	r24, r25
    33cc:	80 71       	andi	r24, 0x10	; 16
    33ce:	94 fd       	sbrc	r25, 4
		return(ERROR);
    33d0:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    33d2:	08 95       	ret

000033d4 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    33d4:	87 e0       	ldi	r24, 0x07	; 7
    33d6:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    33da:	08 95       	ret

000033dc <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <write_TWI+0x4>
		asm("nop");
    33de:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    33e0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    33e4:	96 ff       	sbrs	r25, 6
    33e6:	fb cf       	rjmp	.-10     	; 0x33de <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    33e8:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    33f4:	0b c0       	rjmp	.+22     	; 0x340c <write_TWI+0x30>
		asm("nop");
    33f6:	00 00       	nop
		if (ticks > 50) {
    33f8:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    33fc:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    3400:	c3 97       	sbiw	r24, 0x33	; 51
    3402:	20 f0       	brcs	.+8      	; 0x340c <write_TWI+0x30>
			stop_TCB0();
    3404:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			return(ERROR);
    3408:	83 e6       	ldi	r24, 0x63	; 99
    340a:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    340c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3410:	86 ff       	sbrs	r24, 6
    3412:	f1 cf       	rjmp	.-30     	; 0x33f6 <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    3414:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3418:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    341c:	89 2f       	mov	r24, r25
    341e:	80 71       	andi	r24, 0x10	; 16
    3420:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3422:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    3424:	08 95       	ret

00003426 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3426:	e0 e0       	ldi	r30, 0x00	; 0
    3428:	f4 e0       	ldi	r31, 0x04	; 4
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    342e:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    3430:	e0 e0       	ldi	r30, 0x00	; 0
    3432:	f8 e0       	ldi	r31, 0x08	; 8
    3434:	24 e7       	ldi	r18, 0x74	; 116
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	20 87       	std	Z+8, r18	; 0x08
    343a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    343c:	95 81       	ldd	r25, Z+5	; 0x05
    343e:	90 68       	ori	r25, 0x80	; 128
    3440:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3442:	96 81       	ldd	r25, Z+6	; 0x06
    3444:	90 64       	ori	r25, 0x40	; 64
    3446:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3448:	96 81       	ldd	r25, Z+6	; 0x06
    344a:	90 68       	ori	r25, 0x80	; 128
    344c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    344e:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0xfe>
	send0_buf.tail = 0;
    3452:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0xff>
	send0_buf.done = YES;
    3456:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	recv0_buf.head = 0;
    345a:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    345e:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    3462:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
	recv0_buf.length = 0;
    3466:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
	recv0_buf.done = NO;
    346a:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    346e:	e0 e4       	ldi	r30, 0x40	; 64
    3470:	f4 e0       	ldi	r31, 0x04	; 4
    3472:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    3474:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    3476:	e0 e2       	ldi	r30, 0x20	; 32
    3478:	f8 e0       	ldi	r31, 0x08	; 8
    347a:	2b e5       	ldi	r18, 0x5B	; 91
    347c:	31 e0       	ldi	r19, 0x01	; 1
    347e:	20 87       	std	Z+8, r18	; 0x08
    3480:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3482:	95 81       	ldd	r25, Z+5	; 0x05
    3484:	90 68       	ori	r25, 0x80	; 128
    3486:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3488:	96 81       	ldd	r25, Z+6	; 0x06
    348a:	90 64       	ori	r25, 0x40	; 64
    348c:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    348e:	96 81       	ldd	r25, Z+6	; 0x06
    3490:	90 68       	ori	r25, 0x80	; 128
    3492:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3494:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0xfe>
	send1_buf.tail = 0;
    3498:	10 92 2c 30 	sts	0x302C, r1	; 0x80302c <send1_buf+0xff>
	send1_buf.done = YES;
    349c:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	recv1_buf.head = 0;
    34a0:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    34a4:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    34a8:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.done = NO;
    34ac:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    34b0:	e0 e2       	ldi	r30, 0x20	; 32
    34b2:	f4 e0       	ldi	r31, 0x04	; 4
    34b4:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    34b6:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    34b8:	e0 e6       	ldi	r30, 0x60	; 96
    34ba:	f8 e0       	ldi	r31, 0x08	; 8
    34bc:	2d e6       	ldi	r18, 0x6D	; 109
    34be:	35 e0       	ldi	r19, 0x05	; 5
    34c0:	20 87       	std	Z+8, r18	; 0x08
    34c2:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    34c4:	96 81       	ldd	r25, Z+6	; 0x06
    34c6:	90 64       	ori	r25, 0x40	; 64
    34c8:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    34ca:	96 81       	ldd	r25, Z+6	; 0x06
    34cc:	90 68       	ori	r25, 0x80	; 128
    34ce:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    34d0:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	recv3_buf.done = NO;
    34d4:	10 92 28 2e 	sts	0x2E28, r1	; 0x802e28 <recv3_buf+0x103>
    34d8:	08 95       	ret

000034da <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	eb 01       	movw	r28, r22
    34e4:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	d1 f1       	breq	.+116    	; 0x355e <send_USART+0x84>
    34ea:	20 f0       	brcs	.+8      	; 0x34f4 <send_USART+0x1a>
    34ec:	83 30       	cpi	r24, 0x03	; 3
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <send_USART+0x18>
    34f0:	85 c0       	rjmp	.+266    	; 0x35fc <send_USART+0x122>
    34f2:	8c c0       	rjmp	.+280    	; 0x360c <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    34f4:	10 92 24 2d 	sts	0x2D24, r1	; 0x802d24 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	11 c0       	rjmp	.+34     	; 0x351e <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    34fc:	ef e1       	ldi	r30, 0x1F	; 31
    34fe:	fd e2       	ldi	r31, 0x2D	; 45
    3500:	80 81       	ld	r24, Z
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	38 81       	ld	r19, Y
    3506:	dc 01       	movw	r26, r24
    3508:	af 5d       	subi	r26, 0xDF	; 223
    350a:	b3 4d       	sbci	r27, 0xD3	; 211
    350c:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    350e:	01 96       	adiw	r24, 0x01	; 1
    3510:	6e ef       	ldi	r22, 0xFE	; 254
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
    3518:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    351a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    351c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    351e:	21 17       	cp	r18, r17
    3520:	68 f3       	brcs	.-38     	; 0x34fc <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3522:	e0 e0       	ldi	r30, 0x00	; 0
    3524:	f8 e0       	ldi	r31, 0x08	; 8
    3526:	85 81       	ldd	r24, Z+5	; 0x05
    3528:	80 62       	ori	r24, 0x20	; 32
    352a:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    352c:	8a e0       	ldi	r24, 0x0A	; 10
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 4e 19 	call	0x329c	; 0x329c <start_TCB0>
			while (send0_buf.done == NO) {
    3534:	0d c0       	rjmp	.+26     	; 0x3550 <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    3536:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    353a:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    353e:	85 36       	cpi	r24, 0x65	; 101
    3540:	91 05       	cpc	r25, r1
    3542:	30 f0       	brcs	.+12     	; 0x3550 <send_USART+0x76>
					stop_TCB0();
    3544:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
					send0_buf.done = YES;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
					return;
    354e:	5e c0       	rjmp	.+188    	; 0x360c <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    3550:	80 91 24 2d 	lds	r24, 0x2D24	; 0x802d24 <send0_buf+0x103>
    3554:	88 23       	and	r24, r24
    3556:	79 f3       	breq	.-34     	; 0x3536 <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    3558:	0e 94 64 19 	call	0x32c8	; 0x32c8 <stop_TCB0>
			break;
    355c:	57 c0       	rjmp	.+174    	; 0x360c <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    355e:	64 2f       	mov	r22, r20
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	ce 01       	movw	r24, r28
    3564:	0e 94 56 14 	call	0x28ac	; 0x28ac <crc16>
    3568:	48 2f       	mov	r20, r24
    356a:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	11 c0       	rjmp	.+34     	; 0x3592 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    3570:	eb e2       	ldi	r30, 0x2B	; 43
    3572:	f0 e3       	ldi	r31, 0x30	; 48
    3574:	80 81       	ld	r24, Z
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	38 81       	ld	r19, Y
    357a:	dc 01       	movw	r26, r24
    357c:	a3 5d       	subi	r26, 0xD3	; 211
    357e:	b0 4d       	sbci	r27, 0xD0	; 208
    3580:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3582:	01 96       	adiw	r24, 0x01	; 1
    3584:	6e ef       	ldi	r22, 0xFE	; 254
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
    358c:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    358e:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3590:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3592:	21 17       	cp	r18, r17
    3594:	68 f3       	brcs	.-38     	; 0x3570 <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3596:	eb e2       	ldi	r30, 0x2B	; 43
    3598:	f0 e3       	ldi	r31, 0x30	; 48
    359a:	80 81       	ld	r24, Z
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	dc 01       	movw	r26, r24
    35a0:	a3 5d       	subi	r26, 0xD3	; 211
    35a2:	b0 4d       	sbci	r27, 0xD0	; 208
    35a4:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    35a6:	01 96       	adiw	r24, 0x01	; 1
    35a8:	2e ef       	ldi	r18, 0xFE	; 254
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	b9 01       	movw	r22, r18
    35ae:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	dc 01       	movw	r26, r24
    35b6:	a3 5d       	subi	r26, 0xD3	; 211
    35b8:	b0 4d       	sbci	r27, 0xD0	; 208
    35ba:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	b9 01       	movw	r22, r18
    35c0:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
    35c4:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    35c6:	1e 5f       	subi	r17, 0xFE	; 254
    35c8:	10 93 2d 30 	sts	0x302D, r17	; 0x80302d <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    35cc:	e0 e2       	ldi	r30, 0x20	; 32
    35ce:	f8 e0       	ldi	r31, 0x08	; 8
    35d0:	85 81       	ldd	r24, Z+5	; 0x05
    35d2:	80 62       	ori	r24, 0x20	; 32
    35d4:	85 83       	std	Z+5, r24	; 0x05
			break;
    35d6:	1a c0       	rjmp	.+52     	; 0x360c <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    35d8:	e7 e2       	ldi	r30, 0x27	; 39
    35da:	ff e2       	ldi	r31, 0x2F	; 47
    35dc:	80 81       	ld	r24, Z
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	38 81       	ld	r19, Y
    35e2:	dc 01       	movw	r26, r24
    35e4:	a7 5d       	subi	r26, 0xD7	; 215
    35e6:	b1 4d       	sbci	r27, 0xD1	; 209
    35e8:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	6e ef       	ldi	r22, 0xFE	; 254
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
    35f4:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    35f6:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    35f8:	21 96       	adiw	r28, 0x01	; 1
    35fa:	01 c0       	rjmp	.+2      	; 0x35fe <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    35fc:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    35fe:	21 17       	cp	r18, r17
    3600:	58 f3       	brcs	.-42     	; 0x35d8 <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3602:	e0 e6       	ldi	r30, 0x60	; 96
    3604:	f8 e0       	ldi	r31, 0x08	; 8
    3606:	85 81       	ldd	r24, Z+5	; 0x05
    3608:	80 62       	ori	r24, 0x20	; 32
    360a:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3616:	1f 92       	push	r1
    3618:	0f 92       	push	r0
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	0f 92       	push	r0
    361e:	11 24       	eor	r1, r1
    3620:	5f 93       	push	r21
    3622:	6f 93       	push	r22
    3624:	7f 93       	push	r23
    3626:	8f 93       	push	r24
    3628:	9f 93       	push	r25
    362a:	af 93       	push	r26
    362c:	bf 93       	push	r27
    362e:	ef 93       	push	r30
    3630:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    3632:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    3636:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
    363a:	8d 3f       	cpi	r24, 0xFD	; 253
    363c:	10 f5       	brcc	.+68     	; 0x3682 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    363e:	9d 30       	cpi	r25, 0x0D	; 13
    3640:	51 f4       	brne	.+20     	; 0x3656 <__vector_17+0x40>
			recv0_buf.done = YES;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    3648:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	e3 5e       	subi	r30, 0xE3	; 227
    3650:	f4 4d       	sbci	r31, 0xD4	; 212
    3652:	10 82       	st	Z, r1
    3654:	06 c0       	rjmp	.+12     	; 0x3662 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3656:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	e3 5e       	subi	r30, 0xE3	; 227
    365e:	f4 4d       	sbci	r31, 0xD4	; 212
    3660:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    3662:	ee e1       	ldi	r30, 0x1E	; 30
    3664:	fc e2       	ldi	r31, 0x2C	; 44
    3666:	80 81       	ld	r24, Z
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    366c:	eb e1       	ldi	r30, 0x1B	; 27
    366e:	fc e2       	ldi	r31, 0x2C	; 44
    3670:	80 81       	ld	r24, Z
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	6e ef       	ldi	r22, 0xFE	; 254
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	0e 94 21 22 	call	0x4442	; 0x4442 <__divmodhi4>
    367e:	80 83       	st	Z, r24
    3680:	0a c0       	rjmp	.+20     	; 0x3696 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    3682:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    3686:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    368a:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
		recv0_buf.length = 0;
    368e:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
		recv0_buf.done = NO;
    3692:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
	}
}
    3696:	ff 91       	pop	r31
    3698:	ef 91       	pop	r30
    369a:	bf 91       	pop	r27
    369c:	af 91       	pop	r26
    369e:	9f 91       	pop	r25
    36a0:	8f 91       	pop	r24
    36a2:	7f 91       	pop	r23
    36a4:	6f 91       	pop	r22
    36a6:	5f 91       	pop	r21
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	0f 90       	pop	r0
    36ae:	1f 90       	pop	r1
    36b0:	18 95       	reti

000036b2 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    36b2:	1f 92       	push	r1
    36b4:	0f 92       	push	r0
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	0f 92       	push	r0
    36ba:	11 24       	eor	r1, r1
    36bc:	2f 93       	push	r18
    36be:	8f 93       	push	r24
    36c0:	9f 93       	push	r25
    36c2:	ef 93       	push	r30
    36c4:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    36c6:	e0 e0       	ldi	r30, 0x00	; 0
    36c8:	f8 e0       	ldi	r31, 0x08	; 8
    36ca:	85 81       	ldd	r24, Z+5	; 0x05
    36cc:	8f 7d       	andi	r24, 0xDF	; 223
    36ce:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    36d0:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <send0_buf+0xfe>
    36d4:	e0 91 20 2d 	lds	r30, 0x2D20	; 0x802d20 <send0_buf+0xff>
    36d8:	8e 17       	cp	r24, r30
    36da:	d1 f0       	breq	.+52     	; 0x3710 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	8e 0f       	add	r24, r30
    36e0:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	ef 5d       	subi	r30, 0xDF	; 223
    36e8:	f3 4d       	sbci	r31, 0xD3	; 211
    36ea:	90 81       	ld	r25, Z
    36ec:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    36f0:	91 e0       	ldi	r25, 0x01	; 1
    36f2:	8e 3f       	cpi	r24, 0xFE	; 254
    36f4:	08 f4       	brcc	.+2      	; 0x36f8 <__vector_18+0x46>
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	91 95       	neg	r25
    36fa:	29 2f       	mov	r18, r25
    36fc:	22 0f       	add	r18, r18
    36fe:	82 1b       	sub	r24, r18
    3700:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3704:	e0 e0       	ldi	r30, 0x00	; 0
    3706:	f8 e0       	ldi	r31, 0x08	; 8
    3708:	85 81       	ldd	r24, Z+5	; 0x05
    370a:	80 62       	ori	r24, 0x20	; 32
    370c:	85 83       	std	Z+5, r24	; 0x05
    370e:	03 c0       	rjmp	.+6      	; 0x3716 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	}

}
    3716:	ff 91       	pop	r31
    3718:	ef 91       	pop	r30
    371a:	9f 91       	pop	r25
    371c:	8f 91       	pop	r24
    371e:	2f 91       	pop	r18
    3720:	0f 90       	pop	r0
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	0f 90       	pop	r0
    3726:	1f 90       	pop	r1
    3728:	18 95       	reti

0000372a <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    372a:	1f 92       	push	r1
    372c:	0f 92       	push	r0
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	0f 92       	push	r0
    3732:	11 24       	eor	r1, r1
    3734:	2f 93       	push	r18
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	ef 93       	push	r30
    373c:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    373e:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    3742:	e0 91 1b 2b 	lds	r30, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    3746:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x100>
    374a:	e8 17       	cp	r30, r24
    374c:	40 f4       	brcc	.+16     	; 0x375e <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    374e:	21 e0       	ldi	r18, 0x01	; 1
    3750:	2e 0f       	add	r18, r30
    3752:	20 93 1b 2b 	sts	0x2B1B, r18	; 0x802b1b <recv1_buf+0x102>
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	e7 5e       	subi	r30, 0xE7	; 231
    375a:	f5 4d       	sbci	r31, 0xD5	; 213
    375c:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    375e:	90 91 1b 2b 	lds	r25, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    3762:	98 17       	cp	r25, r24
    3764:	18 f0       	brcs	.+6      	; 0x376c <__vector_26+0x42>
		recv1_buf.done = YES;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	80 93 1c 2b 	sts	0x2B1C, r24	; 0x802b1c <recv1_buf+0x103>
	}

}
    376c:	ff 91       	pop	r31
    376e:	ef 91       	pop	r30
    3770:	9f 91       	pop	r25
    3772:	8f 91       	pop	r24
    3774:	2f 91       	pop	r18
    3776:	0f 90       	pop	r0
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	0f 90       	pop	r0
    377c:	1f 90       	pop	r1
    377e:	18 95       	reti

00003780 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3780:	1f 92       	push	r1
    3782:	0f 92       	push	r0
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	0f 92       	push	r0
    3788:	11 24       	eor	r1, r1
    378a:	2f 93       	push	r18
    378c:	8f 93       	push	r24
    378e:	9f 93       	push	r25
    3790:	ef 93       	push	r30
    3792:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3794:	e0 e2       	ldi	r30, 0x20	; 32
    3796:	f8 e0       	ldi	r31, 0x08	; 8
    3798:	85 81       	ldd	r24, Z+5	; 0x05
    379a:	8f 7d       	andi	r24, 0xDF	; 223
    379c:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    379e:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <send1_buf+0xfe>
    37a2:	e0 91 2c 30 	lds	r30, 0x302C	; 0x80302c <send1_buf+0xff>
    37a6:	8e 17       	cp	r24, r30
    37a8:	d1 f0       	breq	.+52     	; 0x37de <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	8e 0f       	add	r24, r30
    37ae:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	e3 5d       	subi	r30, 0xD3	; 211
    37b6:	f0 4d       	sbci	r31, 0xD0	; 208
    37b8:	90 81       	ld	r25, Z
    37ba:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	8e 3f       	cpi	r24, 0xFE	; 254
    37c2:	08 f4       	brcc	.+2      	; 0x37c6 <__vector_27+0x46>
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	91 95       	neg	r25
    37c8:	29 2f       	mov	r18, r25
    37ca:	22 0f       	add	r18, r18
    37cc:	82 1b       	sub	r24, r18
    37ce:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    37d2:	e0 e2       	ldi	r30, 0x20	; 32
    37d4:	f8 e0       	ldi	r31, 0x08	; 8
    37d6:	85 81       	ldd	r24, Z+5	; 0x05
    37d8:	80 62       	ori	r24, 0x20	; 32
    37da:	85 83       	std	Z+5, r24	; 0x05
    37dc:	03 c0       	rjmp	.+6      	; 0x37e4 <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	}

}
    37e4:	ff 91       	pop	r31
    37e6:	ef 91       	pop	r30
    37e8:	9f 91       	pop	r25
    37ea:	8f 91       	pop	r24
    37ec:	2f 91       	pop	r18
    37ee:	0f 90       	pop	r0
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	0f 90       	pop	r0
    37f4:	1f 90       	pop	r1
    37f6:	18 95       	reti

000037f8 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    37f8:	1f 92       	push	r1
    37fa:	0f 92       	push	r0
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	0f 92       	push	r0
    3800:	11 24       	eor	r1, r1
    3802:	8f 93       	push	r24
    3804:	9f 93       	push	r25
    3806:	af 93       	push	r26
    3808:	bf 93       	push	r27
    380a:	ef 93       	push	r30
    380c:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    380e:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3812:	8d 30       	cpi	r24, 0x0D	; 13
    3814:	21 f0       	breq	.+8      	; 0x381e <__vector_37+0x26>
    3816:	e0 91 27 2e 	lds	r30, 0x2E27	; 0x802e27 <recv3_buf+0x102>
    381a:	ed 3f       	cpi	r30, 0xFD	; 253
    381c:	78 f0       	brcs	.+30     	; 0x383c <__vector_37+0x44>
		recv3_buf.done = YES;
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	80 93 28 2e 	sts	0x2E28, r24	; 0x802e28 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3824:	a7 e2       	ldi	r26, 0x27	; 39
    3826:	be e2       	ldi	r27, 0x2E	; 46
    3828:	8c 91       	ld	r24, X
    382a:	e8 2f       	mov	r30, r24
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	eb 5d       	subi	r30, 0xDB	; 219
    3830:	f2 4d       	sbci	r31, 0xD2	; 210
    3832:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    3834:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    3838:	1c 92       	st	X, r1
		return;
    383a:	08 c0       	rjmp	.+16     	; 0x384c <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	9e 0f       	add	r25, r30
    3840:	90 93 27 2e 	sts	0x2E27, r25	; 0x802e27 <recv3_buf+0x102>
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	eb 5d       	subi	r30, 0xDB	; 219
    3848:	f2 4d       	sbci	r31, 0xD2	; 210
    384a:	80 83       	st	Z, r24
	}

}
    384c:	ff 91       	pop	r31
    384e:	ef 91       	pop	r30
    3850:	bf 91       	pop	r27
    3852:	af 91       	pop	r26
    3854:	9f 91       	pop	r25
    3856:	8f 91       	pop	r24
    3858:	0f 90       	pop	r0
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	0f 90       	pop	r0
    385e:	1f 90       	pop	r1
    3860:	18 95       	reti

00003862 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    3862:	1f 92       	push	r1
    3864:	0f 92       	push	r0
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	0f 92       	push	r0
    386a:	11 24       	eor	r1, r1
    386c:	8f 93       	push	r24
    386e:	9f 93       	push	r25
    3870:	af 93       	push	r26
    3872:	bf 93       	push	r27
    3874:	ef 93       	push	r30
    3876:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3878:	ab e2       	ldi	r26, 0x2B	; 43
    387a:	bf e2       	ldi	r27, 0x2F	; 47
    387c:	ec 91       	ld	r30, X
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	8e 0f       	add	r24, r30
    3882:	8c 93       	st	X, r24
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	e7 5d       	subi	r30, 0xD7	; 215
    3888:	f1 4d       	sbci	r31, 0xD1	; 209
    388a:	90 81       	ld	r25, Z
    388c:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3890:	90 91 29 2f 	lds	r25, 0x2F29	; 0x802f29 <send3_buf+0x100>
    3894:	89 17       	cp	r24, r25
    3896:	40 f0       	brcs	.+16     	; 0x38a8 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3898:	e0 e6       	ldi	r30, 0x60	; 96
    389a:	f8 e0       	ldi	r31, 0x08	; 8
    389c:	85 81       	ldd	r24, Z+5	; 0x05
    389e:	8f 7d       	andi	r24, 0xDF	; 223
    38a0:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	}

}
    38a8:	ff 91       	pop	r31
    38aa:	ef 91       	pop	r30
    38ac:	bf 91       	pop	r27
    38ae:	af 91       	pop	r26
    38b0:	9f 91       	pop	r25
    38b2:	8f 91       	pop	r24
    38b4:	0f 90       	pop	r0
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	0f 90       	pop	r0
    38ba:	1f 90       	pop	r1
    38bc:	18 95       	reti

000038be <reboot>:
void reboot(void)
{

//	init_USART();
//	init_XPORT();
	CPU_CCP = CCP_IOREG_gc;
    38be:	88 ed       	ldi	r24, 0xD8	; 216
    38c0:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    38c8:	08 95       	ret

000038ca <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    38ca:	1f 92       	push	r1
    38cc:	0f 92       	push	r0
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	0f 92       	push	r0
    38d2:	11 24       	eor	r1, r1
    38d4:	2f 93       	push	r18
    38d6:	3f 93       	push	r19
    38d8:	4f 93       	push	r20
    38da:	5f 93       	push	r21
    38dc:	6f 93       	push	r22
    38de:	7f 93       	push	r23
    38e0:	8f 93       	push	r24
    38e2:	9f 93       	push	r25
    38e4:	af 93       	push	r26
    38e6:	bf 93       	push	r27
    38e8:	ef 93       	push	r30
    38ea:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    38ec:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    38f0:	86 ff       	sbrs	r24, 6
    38f2:	05 c0       	rjmp	.+10     	; 0x38fe <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    38f4:	80 e4       	ldi	r24, 0x40	; 64
    38f6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
//motorsMoving(); // doing this doesn't work
//return;
		reboot();
    38fa:	0e 94 5f 1c 	call	0x38be	; 0x38be <reboot>
//			reboot();
//		} else {
//			squelchErrors = NO;
//		}
	}
}
    38fe:	ff 91       	pop	r31
    3900:	ef 91       	pop	r30
    3902:	bf 91       	pop	r27
    3904:	af 91       	pop	r26
    3906:	9f 91       	pop	r25
    3908:	8f 91       	pop	r24
    390a:	7f 91       	pop	r23
    390c:	6f 91       	pop	r22
    390e:	5f 91       	pop	r21
    3910:	4f 91       	pop	r20
    3912:	3f 91       	pop	r19
    3914:	2f 91       	pop	r18
    3916:	0f 90       	pop	r0
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	0f 90       	pop	r0
    391c:	1f 90       	pop	r1
    391e:	18 95       	reti

00003920 <init_XPORT>:
#include "xport.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    3920:	e0 e4       	ldi	r30, 0x40	; 64
    3922:	f4 e0       	ldi	r31, 0x04	; 4
    3924:	88 e0       	ldi	r24, 0x08	; 8
    3926:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    3928:	81 83       	std	Z+1, r24	; 0x01
    392a:	ad e8       	ldi	r26, 0x8D	; 141
    392c:	b0 e2       	ldi	r27, 0x20	; 32
    392e:	11 97       	sbiw	r26, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <init_XPORT+0xe>
    3932:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    3934:	85 83       	std	Z+5, r24	; 0x05
    3936:	08 95       	ret

00003938 <__subsf3>:
    3938:	50 58       	subi	r21, 0x80	; 128

0000393a <__addsf3>:
    393a:	bb 27       	eor	r27, r27
    393c:	aa 27       	eor	r26, r26
    393e:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3x>
    3942:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__fp_round>
    3946:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscA>
    394a:	38 f0       	brcs	.+14     	; 0x395a <__addsf3+0x20>
    394c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__fp_pscB>
    3950:	20 f0       	brcs	.+8      	; 0x395a <__addsf3+0x20>
    3952:	39 f4       	brne	.+14     	; 0x3962 <__addsf3+0x28>
    3954:	9f 3f       	cpi	r25, 0xFF	; 255
    3956:	19 f4       	brne	.+6      	; 0x395e <__addsf3+0x24>
    3958:	26 f4       	brtc	.+8      	; 0x3962 <__addsf3+0x28>
    395a:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__fp_nan>
    395e:	0e f4       	brtc	.+2      	; 0x3962 <__addsf3+0x28>
    3960:	e0 95       	com	r30
    3962:	e7 fb       	bst	r30, 7
    3964:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_inf>

00003968 <__addsf3x>:
    3968:	e9 2f       	mov	r30, r25
    396a:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_split3>
    396e:	58 f3       	brcs	.-42     	; 0x3946 <__addsf3+0xc>
    3970:	ba 17       	cp	r27, r26
    3972:	62 07       	cpc	r22, r18
    3974:	73 07       	cpc	r23, r19
    3976:	84 07       	cpc	r24, r20
    3978:	95 07       	cpc	r25, r21
    397a:	20 f0       	brcs	.+8      	; 0x3984 <__addsf3x+0x1c>
    397c:	79 f4       	brne	.+30     	; 0x399c <__addsf3x+0x34>
    397e:	a6 f5       	brtc	.+104    	; 0x39e8 <__addsf3x+0x80>
    3980:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__fp_zero>
    3984:	0e f4       	brtc	.+2      	; 0x3988 <__addsf3x+0x20>
    3986:	e0 95       	com	r30
    3988:	0b 2e       	mov	r0, r27
    398a:	ba 2f       	mov	r27, r26
    398c:	a0 2d       	mov	r26, r0
    398e:	0b 01       	movw	r0, r22
    3990:	b9 01       	movw	r22, r18
    3992:	90 01       	movw	r18, r0
    3994:	0c 01       	movw	r0, r24
    3996:	ca 01       	movw	r24, r20
    3998:	a0 01       	movw	r20, r0
    399a:	11 24       	eor	r1, r1
    399c:	ff 27       	eor	r31, r31
    399e:	59 1b       	sub	r21, r25
    39a0:	99 f0       	breq	.+38     	; 0x39c8 <__addsf3x+0x60>
    39a2:	59 3f       	cpi	r21, 0xF9	; 249
    39a4:	50 f4       	brcc	.+20     	; 0x39ba <__addsf3x+0x52>
    39a6:	50 3e       	cpi	r21, 0xE0	; 224
    39a8:	68 f1       	brcs	.+90     	; 0x3a04 <__addsf3x+0x9c>
    39aa:	1a 16       	cp	r1, r26
    39ac:	f0 40       	sbci	r31, 0x00	; 0
    39ae:	a2 2f       	mov	r26, r18
    39b0:	23 2f       	mov	r18, r19
    39b2:	34 2f       	mov	r19, r20
    39b4:	44 27       	eor	r20, r20
    39b6:	58 5f       	subi	r21, 0xF8	; 248
    39b8:	f3 cf       	rjmp	.-26     	; 0x39a0 <__addsf3x+0x38>
    39ba:	46 95       	lsr	r20
    39bc:	37 95       	ror	r19
    39be:	27 95       	ror	r18
    39c0:	a7 95       	ror	r26
    39c2:	f0 40       	sbci	r31, 0x00	; 0
    39c4:	53 95       	inc	r21
    39c6:	c9 f7       	brne	.-14     	; 0x39ba <__addsf3x+0x52>
    39c8:	7e f4       	brtc	.+30     	; 0x39e8 <__addsf3x+0x80>
    39ca:	1f 16       	cp	r1, r31
    39cc:	ba 0b       	sbc	r27, r26
    39ce:	62 0b       	sbc	r22, r18
    39d0:	73 0b       	sbc	r23, r19
    39d2:	84 0b       	sbc	r24, r20
    39d4:	ba f0       	brmi	.+46     	; 0x3a04 <__addsf3x+0x9c>
    39d6:	91 50       	subi	r25, 0x01	; 1
    39d8:	a1 f0       	breq	.+40     	; 0x3a02 <__addsf3x+0x9a>
    39da:	ff 0f       	add	r31, r31
    39dc:	bb 1f       	adc	r27, r27
    39de:	66 1f       	adc	r22, r22
    39e0:	77 1f       	adc	r23, r23
    39e2:	88 1f       	adc	r24, r24
    39e4:	c2 f7       	brpl	.-16     	; 0x39d6 <__addsf3x+0x6e>
    39e6:	0e c0       	rjmp	.+28     	; 0x3a04 <__addsf3x+0x9c>
    39e8:	ba 0f       	add	r27, r26
    39ea:	62 1f       	adc	r22, r18
    39ec:	73 1f       	adc	r23, r19
    39ee:	84 1f       	adc	r24, r20
    39f0:	48 f4       	brcc	.+18     	; 0x3a04 <__addsf3x+0x9c>
    39f2:	87 95       	ror	r24
    39f4:	77 95       	ror	r23
    39f6:	67 95       	ror	r22
    39f8:	b7 95       	ror	r27
    39fa:	f7 95       	ror	r31
    39fc:	9e 3f       	cpi	r25, 0xFE	; 254
    39fe:	08 f0       	brcs	.+2      	; 0x3a02 <__addsf3x+0x9a>
    3a00:	b0 cf       	rjmp	.-160    	; 0x3962 <__addsf3+0x28>
    3a02:	93 95       	inc	r25
    3a04:	88 0f       	add	r24, r24
    3a06:	08 f0       	brcs	.+2      	; 0x3a0a <__addsf3x+0xa2>
    3a08:	99 27       	eor	r25, r25
    3a0a:	ee 0f       	add	r30, r30
    3a0c:	97 95       	ror	r25
    3a0e:	87 95       	ror	r24
    3a10:	08 95       	ret

00003a12 <__cmpsf2>:
    3a12:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fp_cmp>
    3a16:	08 f4       	brcc	.+2      	; 0x3a1a <__cmpsf2+0x8>
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	08 95       	ret

00003a1c <__divsf3>:
    3a1c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__divsf3x>
    3a20:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__fp_round>
    3a24:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__fp_pscB>
    3a28:	58 f0       	brcs	.+22     	; 0x3a40 <__divsf3+0x24>
    3a2a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscA>
    3a2e:	40 f0       	brcs	.+16     	; 0x3a40 <__divsf3+0x24>
    3a30:	29 f4       	brne	.+10     	; 0x3a3c <__divsf3+0x20>
    3a32:	5f 3f       	cpi	r21, 0xFF	; 255
    3a34:	29 f0       	breq	.+10     	; 0x3a40 <__divsf3+0x24>
    3a36:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_inf>
    3a3a:	51 11       	cpse	r21, r1
    3a3c:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__fp_szero>
    3a40:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__fp_nan>

00003a44 <__divsf3x>:
    3a44:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_split3>
    3a48:	68 f3       	brcs	.-38     	; 0x3a24 <__divsf3+0x8>

00003a4a <__divsf3_pse>:
    3a4a:	99 23       	and	r25, r25
    3a4c:	b1 f3       	breq	.-20     	; 0x3a3a <__divsf3+0x1e>
    3a4e:	55 23       	and	r21, r21
    3a50:	91 f3       	breq	.-28     	; 0x3a36 <__divsf3+0x1a>
    3a52:	95 1b       	sub	r25, r21
    3a54:	55 0b       	sbc	r21, r21
    3a56:	bb 27       	eor	r27, r27
    3a58:	aa 27       	eor	r26, r26
    3a5a:	62 17       	cp	r22, r18
    3a5c:	73 07       	cpc	r23, r19
    3a5e:	84 07       	cpc	r24, r20
    3a60:	38 f0       	brcs	.+14     	; 0x3a70 <__divsf3_pse+0x26>
    3a62:	9f 5f       	subi	r25, 0xFF	; 255
    3a64:	5f 4f       	sbci	r21, 0xFF	; 255
    3a66:	22 0f       	add	r18, r18
    3a68:	33 1f       	adc	r19, r19
    3a6a:	44 1f       	adc	r20, r20
    3a6c:	aa 1f       	adc	r26, r26
    3a6e:	a9 f3       	breq	.-22     	; 0x3a5a <__divsf3_pse+0x10>
    3a70:	35 d0       	rcall	.+106    	; 0x3adc <__divsf3_pse+0x92>
    3a72:	0e 2e       	mov	r0, r30
    3a74:	3a f0       	brmi	.+14     	; 0x3a84 <__divsf3_pse+0x3a>
    3a76:	e0 e8       	ldi	r30, 0x80	; 128
    3a78:	32 d0       	rcall	.+100    	; 0x3ade <__divsf3_pse+0x94>
    3a7a:	91 50       	subi	r25, 0x01	; 1
    3a7c:	50 40       	sbci	r21, 0x00	; 0
    3a7e:	e6 95       	lsr	r30
    3a80:	00 1c       	adc	r0, r0
    3a82:	ca f7       	brpl	.-14     	; 0x3a76 <__divsf3_pse+0x2c>
    3a84:	2b d0       	rcall	.+86     	; 0x3adc <__divsf3_pse+0x92>
    3a86:	fe 2f       	mov	r31, r30
    3a88:	29 d0       	rcall	.+82     	; 0x3adc <__divsf3_pse+0x92>
    3a8a:	66 0f       	add	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	88 1f       	adc	r24, r24
    3a90:	bb 1f       	adc	r27, r27
    3a92:	26 17       	cp	r18, r22
    3a94:	37 07       	cpc	r19, r23
    3a96:	48 07       	cpc	r20, r24
    3a98:	ab 07       	cpc	r26, r27
    3a9a:	b0 e8       	ldi	r27, 0x80	; 128
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <__divsf3_pse+0x56>
    3a9e:	bb 0b       	sbc	r27, r27
    3aa0:	80 2d       	mov	r24, r0
    3aa2:	bf 01       	movw	r22, r30
    3aa4:	ff 27       	eor	r31, r31
    3aa6:	93 58       	subi	r25, 0x83	; 131
    3aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    3aaa:	3a f0       	brmi	.+14     	; 0x3aba <__divsf3_pse+0x70>
    3aac:	9e 3f       	cpi	r25, 0xFE	; 254
    3aae:	51 05       	cpc	r21, r1
    3ab0:	78 f0       	brcs	.+30     	; 0x3ad0 <__divsf3_pse+0x86>
    3ab2:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_inf>
    3ab6:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__fp_szero>
    3aba:	5f 3f       	cpi	r21, 0xFF	; 255
    3abc:	e4 f3       	brlt	.-8      	; 0x3ab6 <__divsf3_pse+0x6c>
    3abe:	98 3e       	cpi	r25, 0xE8	; 232
    3ac0:	d4 f3       	brlt	.-12     	; 0x3ab6 <__divsf3_pse+0x6c>
    3ac2:	86 95       	lsr	r24
    3ac4:	77 95       	ror	r23
    3ac6:	67 95       	ror	r22
    3ac8:	b7 95       	ror	r27
    3aca:	f7 95       	ror	r31
    3acc:	9f 5f       	subi	r25, 0xFF	; 255
    3ace:	c9 f7       	brne	.-14     	; 0x3ac2 <__divsf3_pse+0x78>
    3ad0:	88 0f       	add	r24, r24
    3ad2:	91 1d       	adc	r25, r1
    3ad4:	96 95       	lsr	r25
    3ad6:	87 95       	ror	r24
    3ad8:	97 f9       	bld	r25, 7
    3ada:	08 95       	ret
    3adc:	e1 e0       	ldi	r30, 0x01	; 1
    3ade:	66 0f       	add	r22, r22
    3ae0:	77 1f       	adc	r23, r23
    3ae2:	88 1f       	adc	r24, r24
    3ae4:	bb 1f       	adc	r27, r27
    3ae6:	62 17       	cp	r22, r18
    3ae8:	73 07       	cpc	r23, r19
    3aea:	84 07       	cpc	r24, r20
    3aec:	ba 07       	cpc	r27, r26
    3aee:	20 f0       	brcs	.+8      	; 0x3af8 <__divsf3_pse+0xae>
    3af0:	62 1b       	sub	r22, r18
    3af2:	73 0b       	sbc	r23, r19
    3af4:	84 0b       	sbc	r24, r20
    3af6:	ba 0b       	sbc	r27, r26
    3af8:	ee 1f       	adc	r30, r30
    3afa:	88 f7       	brcc	.-30     	; 0x3ade <__divsf3_pse+0x94>
    3afc:	e0 95       	com	r30
    3afe:	08 95       	ret

00003b00 <__floatunsisf>:
    3b00:	e8 94       	clt
    3b02:	09 c0       	rjmp	.+18     	; 0x3b16 <__floatsisf+0x12>

00003b04 <__floatsisf>:
    3b04:	97 fb       	bst	r25, 7
    3b06:	3e f4       	brtc	.+14     	; 0x3b16 <__floatsisf+0x12>
    3b08:	90 95       	com	r25
    3b0a:	80 95       	com	r24
    3b0c:	70 95       	com	r23
    3b0e:	61 95       	neg	r22
    3b10:	7f 4f       	sbci	r23, 0xFF	; 255
    3b12:	8f 4f       	sbci	r24, 0xFF	; 255
    3b14:	9f 4f       	sbci	r25, 0xFF	; 255
    3b16:	99 23       	and	r25, r25
    3b18:	a9 f0       	breq	.+42     	; 0x3b44 <__floatsisf+0x40>
    3b1a:	f9 2f       	mov	r31, r25
    3b1c:	96 e9       	ldi	r25, 0x96	; 150
    3b1e:	bb 27       	eor	r27, r27
    3b20:	93 95       	inc	r25
    3b22:	f6 95       	lsr	r31
    3b24:	87 95       	ror	r24
    3b26:	77 95       	ror	r23
    3b28:	67 95       	ror	r22
    3b2a:	b7 95       	ror	r27
    3b2c:	f1 11       	cpse	r31, r1
    3b2e:	f8 cf       	rjmp	.-16     	; 0x3b20 <__floatsisf+0x1c>
    3b30:	fa f4       	brpl	.+62     	; 0x3b70 <__floatsisf+0x6c>
    3b32:	bb 0f       	add	r27, r27
    3b34:	11 f4       	brne	.+4      	; 0x3b3a <__floatsisf+0x36>
    3b36:	60 ff       	sbrs	r22, 0
    3b38:	1b c0       	rjmp	.+54     	; 0x3b70 <__floatsisf+0x6c>
    3b3a:	6f 5f       	subi	r22, 0xFF	; 255
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b40:	9f 4f       	sbci	r25, 0xFF	; 255
    3b42:	16 c0       	rjmp	.+44     	; 0x3b70 <__floatsisf+0x6c>
    3b44:	88 23       	and	r24, r24
    3b46:	11 f0       	breq	.+4      	; 0x3b4c <__floatsisf+0x48>
    3b48:	96 e9       	ldi	r25, 0x96	; 150
    3b4a:	11 c0       	rjmp	.+34     	; 0x3b6e <__floatsisf+0x6a>
    3b4c:	77 23       	and	r23, r23
    3b4e:	21 f0       	breq	.+8      	; 0x3b58 <__floatsisf+0x54>
    3b50:	9e e8       	ldi	r25, 0x8E	; 142
    3b52:	87 2f       	mov	r24, r23
    3b54:	76 2f       	mov	r23, r22
    3b56:	05 c0       	rjmp	.+10     	; 0x3b62 <__floatsisf+0x5e>
    3b58:	66 23       	and	r22, r22
    3b5a:	71 f0       	breq	.+28     	; 0x3b78 <__floatsisf+0x74>
    3b5c:	96 e8       	ldi	r25, 0x86	; 134
    3b5e:	86 2f       	mov	r24, r22
    3b60:	70 e0       	ldi	r23, 0x00	; 0
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	2a f0       	brmi	.+10     	; 0x3b70 <__floatsisf+0x6c>
    3b66:	9a 95       	dec	r25
    3b68:	66 0f       	add	r22, r22
    3b6a:	77 1f       	adc	r23, r23
    3b6c:	88 1f       	adc	r24, r24
    3b6e:	da f7       	brpl	.-10     	; 0x3b66 <__floatsisf+0x62>
    3b70:	88 0f       	add	r24, r24
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	97 f9       	bld	r25, 7
    3b78:	08 95       	ret

00003b7a <__fp_cmp>:
    3b7a:	99 0f       	add	r25, r25
    3b7c:	00 08       	sbc	r0, r0
    3b7e:	55 0f       	add	r21, r21
    3b80:	aa 0b       	sbc	r26, r26
    3b82:	e0 e8       	ldi	r30, 0x80	; 128
    3b84:	fe ef       	ldi	r31, 0xFE	; 254
    3b86:	16 16       	cp	r1, r22
    3b88:	17 06       	cpc	r1, r23
    3b8a:	e8 07       	cpc	r30, r24
    3b8c:	f9 07       	cpc	r31, r25
    3b8e:	c0 f0       	brcs	.+48     	; 0x3bc0 <__fp_cmp+0x46>
    3b90:	12 16       	cp	r1, r18
    3b92:	13 06       	cpc	r1, r19
    3b94:	e4 07       	cpc	r30, r20
    3b96:	f5 07       	cpc	r31, r21
    3b98:	98 f0       	brcs	.+38     	; 0x3bc0 <__fp_cmp+0x46>
    3b9a:	62 1b       	sub	r22, r18
    3b9c:	73 0b       	sbc	r23, r19
    3b9e:	84 0b       	sbc	r24, r20
    3ba0:	95 0b       	sbc	r25, r21
    3ba2:	39 f4       	brne	.+14     	; 0x3bb2 <__fp_cmp+0x38>
    3ba4:	0a 26       	eor	r0, r26
    3ba6:	61 f0       	breq	.+24     	; 0x3bc0 <__fp_cmp+0x46>
    3ba8:	23 2b       	or	r18, r19
    3baa:	24 2b       	or	r18, r20
    3bac:	25 2b       	or	r18, r21
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <__fp_cmp+0x3e>
    3bb0:	08 95       	ret
    3bb2:	0a 26       	eor	r0, r26
    3bb4:	09 f4       	brne	.+2      	; 0x3bb8 <__fp_cmp+0x3e>
    3bb6:	a1 40       	sbci	r26, 0x01	; 1
    3bb8:	a6 95       	lsr	r26
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
    3bbc:	81 1d       	adc	r24, r1
    3bbe:	81 1d       	adc	r24, r1
    3bc0:	08 95       	ret

00003bc2 <__fp_inf>:
    3bc2:	97 f9       	bld	r25, 7
    3bc4:	9f 67       	ori	r25, 0x7F	; 127
    3bc6:	80 e8       	ldi	r24, 0x80	; 128
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	08 95       	ret

00003bce <__fp_nan>:
    3bce:	9f ef       	ldi	r25, 0xFF	; 255
    3bd0:	80 ec       	ldi	r24, 0xC0	; 192
    3bd2:	08 95       	ret

00003bd4 <__fp_pscA>:
    3bd4:	00 24       	eor	r0, r0
    3bd6:	0a 94       	dec	r0
    3bd8:	16 16       	cp	r1, r22
    3bda:	17 06       	cpc	r1, r23
    3bdc:	18 06       	cpc	r1, r24
    3bde:	09 06       	cpc	r0, r25
    3be0:	08 95       	ret

00003be2 <__fp_pscB>:
    3be2:	00 24       	eor	r0, r0
    3be4:	0a 94       	dec	r0
    3be6:	12 16       	cp	r1, r18
    3be8:	13 06       	cpc	r1, r19
    3bea:	14 06       	cpc	r1, r20
    3bec:	05 06       	cpc	r0, r21
    3bee:	08 95       	ret

00003bf0 <__fp_round>:
    3bf0:	09 2e       	mov	r0, r25
    3bf2:	03 94       	inc	r0
    3bf4:	00 0c       	add	r0, r0
    3bf6:	11 f4       	brne	.+4      	; 0x3bfc <__fp_round+0xc>
    3bf8:	88 23       	and	r24, r24
    3bfa:	52 f0       	brmi	.+20     	; 0x3c10 <__fp_round+0x20>
    3bfc:	bb 0f       	add	r27, r27
    3bfe:	40 f4       	brcc	.+16     	; 0x3c10 <__fp_round+0x20>
    3c00:	bf 2b       	or	r27, r31
    3c02:	11 f4       	brne	.+4      	; 0x3c08 <__fp_round+0x18>
    3c04:	60 ff       	sbrs	r22, 0
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <__fp_round+0x20>
    3c08:	6f 5f       	subi	r22, 0xFF	; 255
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c10:	08 95       	ret

00003c12 <__fp_split3>:
    3c12:	57 fd       	sbrc	r21, 7
    3c14:	90 58       	subi	r25, 0x80	; 128
    3c16:	44 0f       	add	r20, r20
    3c18:	55 1f       	adc	r21, r21
    3c1a:	59 f0       	breq	.+22     	; 0x3c32 <__fp_splitA+0x10>
    3c1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c1e:	71 f0       	breq	.+28     	; 0x3c3c <__fp_splitA+0x1a>
    3c20:	47 95       	ror	r20

00003c22 <__fp_splitA>:
    3c22:	88 0f       	add	r24, r24
    3c24:	97 fb       	bst	r25, 7
    3c26:	99 1f       	adc	r25, r25
    3c28:	61 f0       	breq	.+24     	; 0x3c42 <__fp_splitA+0x20>
    3c2a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c2c:	79 f0       	breq	.+30     	; 0x3c4c <__fp_splitA+0x2a>
    3c2e:	87 95       	ror	r24
    3c30:	08 95       	ret
    3c32:	12 16       	cp	r1, r18
    3c34:	13 06       	cpc	r1, r19
    3c36:	14 06       	cpc	r1, r20
    3c38:	55 1f       	adc	r21, r21
    3c3a:	f2 cf       	rjmp	.-28     	; 0x3c20 <__fp_split3+0xe>
    3c3c:	46 95       	lsr	r20
    3c3e:	f1 df       	rcall	.-30     	; 0x3c22 <__fp_splitA>
    3c40:	08 c0       	rjmp	.+16     	; 0x3c52 <__fp_splitA+0x30>
    3c42:	16 16       	cp	r1, r22
    3c44:	17 06       	cpc	r1, r23
    3c46:	18 06       	cpc	r1, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	f1 cf       	rjmp	.-30     	; 0x3c2e <__fp_splitA+0xc>
    3c4c:	86 95       	lsr	r24
    3c4e:	71 05       	cpc	r23, r1
    3c50:	61 05       	cpc	r22, r1
    3c52:	08 94       	sec
    3c54:	08 95       	ret

00003c56 <__fp_zero>:
    3c56:	e8 94       	clt

00003c58 <__fp_szero>:
    3c58:	bb 27       	eor	r27, r27
    3c5a:	66 27       	eor	r22, r22
    3c5c:	77 27       	eor	r23, r23
    3c5e:	cb 01       	movw	r24, r22
    3c60:	97 f9       	bld	r25, 7
    3c62:	08 95       	ret

00003c64 <__gesf2>:
    3c64:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fp_cmp>
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <__gesf2+0x8>
    3c6a:	8f ef       	ldi	r24, 0xFF	; 255
    3c6c:	08 95       	ret

00003c6e <__mulsf3>:
    3c6e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3x>
    3c72:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__fp_round>
    3c76:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscA>
    3c7a:	38 f0       	brcs	.+14     	; 0x3c8a <__mulsf3+0x1c>
    3c7c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__fp_pscB>
    3c80:	20 f0       	brcs	.+8      	; 0x3c8a <__mulsf3+0x1c>
    3c82:	95 23       	and	r25, r21
    3c84:	11 f0       	breq	.+4      	; 0x3c8a <__mulsf3+0x1c>
    3c86:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_inf>
    3c8a:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__fp_nan>
    3c8e:	11 24       	eor	r1, r1
    3c90:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__fp_szero>

00003c94 <__mulsf3x>:
    3c94:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_split3>
    3c98:	70 f3       	brcs	.-36     	; 0x3c76 <__mulsf3+0x8>

00003c9a <__mulsf3_pse>:
    3c9a:	95 9f       	mul	r25, r21
    3c9c:	c1 f3       	breq	.-16     	; 0x3c8e <__mulsf3+0x20>
    3c9e:	95 0f       	add	r25, r21
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	55 1f       	adc	r21, r21
    3ca4:	62 9f       	mul	r22, r18
    3ca6:	f0 01       	movw	r30, r0
    3ca8:	72 9f       	mul	r23, r18
    3caa:	bb 27       	eor	r27, r27
    3cac:	f0 0d       	add	r31, r0
    3cae:	b1 1d       	adc	r27, r1
    3cb0:	63 9f       	mul	r22, r19
    3cb2:	aa 27       	eor	r26, r26
    3cb4:	f0 0d       	add	r31, r0
    3cb6:	b1 1d       	adc	r27, r1
    3cb8:	aa 1f       	adc	r26, r26
    3cba:	64 9f       	mul	r22, r20
    3cbc:	66 27       	eor	r22, r22
    3cbe:	b0 0d       	add	r27, r0
    3cc0:	a1 1d       	adc	r26, r1
    3cc2:	66 1f       	adc	r22, r22
    3cc4:	82 9f       	mul	r24, r18
    3cc6:	22 27       	eor	r18, r18
    3cc8:	b0 0d       	add	r27, r0
    3cca:	a1 1d       	adc	r26, r1
    3ccc:	62 1f       	adc	r22, r18
    3cce:	73 9f       	mul	r23, r19
    3cd0:	b0 0d       	add	r27, r0
    3cd2:	a1 1d       	adc	r26, r1
    3cd4:	62 1f       	adc	r22, r18
    3cd6:	83 9f       	mul	r24, r19
    3cd8:	a0 0d       	add	r26, r0
    3cda:	61 1d       	adc	r22, r1
    3cdc:	22 1f       	adc	r18, r18
    3cde:	74 9f       	mul	r23, r20
    3ce0:	33 27       	eor	r19, r19
    3ce2:	a0 0d       	add	r26, r0
    3ce4:	61 1d       	adc	r22, r1
    3ce6:	23 1f       	adc	r18, r19
    3ce8:	84 9f       	mul	r24, r20
    3cea:	60 0d       	add	r22, r0
    3cec:	21 1d       	adc	r18, r1
    3cee:	82 2f       	mov	r24, r18
    3cf0:	76 2f       	mov	r23, r22
    3cf2:	6a 2f       	mov	r22, r26
    3cf4:	11 24       	eor	r1, r1
    3cf6:	9f 57       	subi	r25, 0x7F	; 127
    3cf8:	50 40       	sbci	r21, 0x00	; 0
    3cfa:	9a f0       	brmi	.+38     	; 0x3d22 <__mulsf3_pse+0x88>
    3cfc:	f1 f0       	breq	.+60     	; 0x3d3a <__mulsf3_pse+0xa0>
    3cfe:	88 23       	and	r24, r24
    3d00:	4a f0       	brmi	.+18     	; 0x3d14 <__mulsf3_pse+0x7a>
    3d02:	ee 0f       	add	r30, r30
    3d04:	ff 1f       	adc	r31, r31
    3d06:	bb 1f       	adc	r27, r27
    3d08:	66 1f       	adc	r22, r22
    3d0a:	77 1f       	adc	r23, r23
    3d0c:	88 1f       	adc	r24, r24
    3d0e:	91 50       	subi	r25, 0x01	; 1
    3d10:	50 40       	sbci	r21, 0x00	; 0
    3d12:	a9 f7       	brne	.-22     	; 0x3cfe <__mulsf3_pse+0x64>
    3d14:	9e 3f       	cpi	r25, 0xFE	; 254
    3d16:	51 05       	cpc	r21, r1
    3d18:	80 f0       	brcs	.+32     	; 0x3d3a <__mulsf3_pse+0xa0>
    3d1a:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_inf>
    3d1e:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__fp_szero>
    3d22:	5f 3f       	cpi	r21, 0xFF	; 255
    3d24:	e4 f3       	brlt	.-8      	; 0x3d1e <__mulsf3_pse+0x84>
    3d26:	98 3e       	cpi	r25, 0xE8	; 232
    3d28:	d4 f3       	brlt	.-12     	; 0x3d1e <__mulsf3_pse+0x84>
    3d2a:	86 95       	lsr	r24
    3d2c:	77 95       	ror	r23
    3d2e:	67 95       	ror	r22
    3d30:	b7 95       	ror	r27
    3d32:	f7 95       	ror	r31
    3d34:	e7 95       	ror	r30
    3d36:	9f 5f       	subi	r25, 0xFF	; 255
    3d38:	c1 f7       	brne	.-16     	; 0x3d2a <__mulsf3_pse+0x90>
    3d3a:	fe 2b       	or	r31, r30
    3d3c:	88 0f       	add	r24, r24
    3d3e:	91 1d       	adc	r25, r1
    3d40:	96 95       	lsr	r25
    3d42:	87 95       	ror	r24
    3d44:	97 f9       	bld	r25, 7
    3d46:	08 95       	ret

00003d48 <vfprintf>:
    3d48:	a0 e1       	ldi	r26, 0x10	; 16
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	ea ea       	ldi	r30, 0xAA	; 170
    3d4e:	fe e1       	ldi	r31, 0x1E	; 30
    3d50:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__prologue_saves__>
    3d54:	7c 01       	movw	r14, r24
    3d56:	1b 01       	movw	r2, r22
    3d58:	6a 01       	movw	r12, r20
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	16 82       	std	Z+6, r1	; 0x06
    3d5e:	17 82       	std	Z+7, r1	; 0x07
    3d60:	83 81       	ldd	r24, Z+3	; 0x03
    3d62:	81 ff       	sbrs	r24, 1
    3d64:	44 c3       	rjmp	.+1672   	; 0x43ee <__RODATA_PM_OFFSET__+0x3ee>
    3d66:	9e 01       	movw	r18, r28
    3d68:	2f 5f       	subi	r18, 0xFF	; 255
    3d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6c:	39 01       	movw	r6, r18
    3d6e:	f7 01       	movw	r30, r14
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	f1 01       	movw	r30, r2
    3d74:	93 fd       	sbrc	r25, 3
    3d76:	85 91       	lpm	r24, Z+
    3d78:	93 ff       	sbrs	r25, 3
    3d7a:	81 91       	ld	r24, Z+
    3d7c:	1f 01       	movw	r2, r30
    3d7e:	88 23       	and	r24, r24
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <vfprintf+0x3c>
    3d82:	31 c3       	rjmp	.+1634   	; 0x43e6 <__RODATA_PM_OFFSET__+0x3e6>
    3d84:	85 32       	cpi	r24, 0x25	; 37
    3d86:	39 f4       	brne	.+14     	; 0x3d96 <vfprintf+0x4e>
    3d88:	93 fd       	sbrc	r25, 3
    3d8a:	85 91       	lpm	r24, Z+
    3d8c:	93 ff       	sbrs	r25, 3
    3d8e:	81 91       	ld	r24, Z+
    3d90:	1f 01       	movw	r2, r30
    3d92:	85 32       	cpi	r24, 0x25	; 37
    3d94:	39 f4       	brne	.+14     	; 0x3da4 <vfprintf+0x5c>
    3d96:	b7 01       	movw	r22, r14
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    3d9e:	56 01       	movw	r10, r12
    3da0:	65 01       	movw	r12, r10
    3da2:	e5 cf       	rjmp	.-54     	; 0x3d6e <vfprintf+0x26>
    3da4:	10 e0       	ldi	r17, 0x00	; 0
    3da6:	51 2c       	mov	r5, r1
    3da8:	91 2c       	mov	r9, r1
    3daa:	ff e1       	ldi	r31, 0x1F	; 31
    3dac:	f9 15       	cp	r31, r9
    3dae:	d8 f0       	brcs	.+54     	; 0x3de6 <vfprintf+0x9e>
    3db0:	8b 32       	cpi	r24, 0x2B	; 43
    3db2:	79 f0       	breq	.+30     	; 0x3dd2 <vfprintf+0x8a>
    3db4:	38 f4       	brcc	.+14     	; 0x3dc4 <vfprintf+0x7c>
    3db6:	80 32       	cpi	r24, 0x20	; 32
    3db8:	79 f0       	breq	.+30     	; 0x3dd8 <vfprintf+0x90>
    3dba:	83 32       	cpi	r24, 0x23	; 35
    3dbc:	a1 f4       	brne	.+40     	; 0x3de6 <vfprintf+0x9e>
    3dbe:	f9 2d       	mov	r31, r9
    3dc0:	f0 61       	ori	r31, 0x10	; 16
    3dc2:	2e c0       	rjmp	.+92     	; 0x3e20 <vfprintf+0xd8>
    3dc4:	8d 32       	cpi	r24, 0x2D	; 45
    3dc6:	61 f0       	breq	.+24     	; 0x3de0 <vfprintf+0x98>
    3dc8:	80 33       	cpi	r24, 0x30	; 48
    3dca:	69 f4       	brne	.+26     	; 0x3de6 <vfprintf+0x9e>
    3dcc:	29 2d       	mov	r18, r9
    3dce:	21 60       	ori	r18, 0x01	; 1
    3dd0:	2d c0       	rjmp	.+90     	; 0x3e2c <vfprintf+0xe4>
    3dd2:	39 2d       	mov	r19, r9
    3dd4:	32 60       	ori	r19, 0x02	; 2
    3dd6:	93 2e       	mov	r9, r19
    3dd8:	89 2d       	mov	r24, r9
    3dda:	84 60       	ori	r24, 0x04	; 4
    3ddc:	98 2e       	mov	r9, r24
    3dde:	2a c0       	rjmp	.+84     	; 0x3e34 <vfprintf+0xec>
    3de0:	e9 2d       	mov	r30, r9
    3de2:	e8 60       	ori	r30, 0x08	; 8
    3de4:	15 c0       	rjmp	.+42     	; 0x3e10 <vfprintf+0xc8>
    3de6:	97 fc       	sbrc	r9, 7
    3de8:	2d c0       	rjmp	.+90     	; 0x3e44 <vfprintf+0xfc>
    3dea:	20 ed       	ldi	r18, 0xD0	; 208
    3dec:	28 0f       	add	r18, r24
    3dee:	2a 30       	cpi	r18, 0x0A	; 10
    3df0:	88 f4       	brcc	.+34     	; 0x3e14 <vfprintf+0xcc>
    3df2:	96 fe       	sbrs	r9, 6
    3df4:	06 c0       	rjmp	.+12     	; 0x3e02 <vfprintf+0xba>
    3df6:	3a e0       	ldi	r19, 0x0A	; 10
    3df8:	13 9f       	mul	r17, r19
    3dfa:	20 0d       	add	r18, r0
    3dfc:	11 24       	eor	r1, r1
    3dfe:	12 2f       	mov	r17, r18
    3e00:	19 c0       	rjmp	.+50     	; 0x3e34 <vfprintf+0xec>
    3e02:	8a e0       	ldi	r24, 0x0A	; 10
    3e04:	58 9e       	mul	r5, r24
    3e06:	20 0d       	add	r18, r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	52 2e       	mov	r5, r18
    3e0c:	e9 2d       	mov	r30, r9
    3e0e:	e0 62       	ori	r30, 0x20	; 32
    3e10:	9e 2e       	mov	r9, r30
    3e12:	10 c0       	rjmp	.+32     	; 0x3e34 <vfprintf+0xec>
    3e14:	8e 32       	cpi	r24, 0x2E	; 46
    3e16:	31 f4       	brne	.+12     	; 0x3e24 <vfprintf+0xdc>
    3e18:	96 fc       	sbrc	r9, 6
    3e1a:	e5 c2       	rjmp	.+1482   	; 0x43e6 <__RODATA_PM_OFFSET__+0x3e6>
    3e1c:	f9 2d       	mov	r31, r9
    3e1e:	f0 64       	ori	r31, 0x40	; 64
    3e20:	9f 2e       	mov	r9, r31
    3e22:	08 c0       	rjmp	.+16     	; 0x3e34 <vfprintf+0xec>
    3e24:	8c 36       	cpi	r24, 0x6C	; 108
    3e26:	21 f4       	brne	.+8      	; 0x3e30 <vfprintf+0xe8>
    3e28:	29 2d       	mov	r18, r9
    3e2a:	20 68       	ori	r18, 0x80	; 128
    3e2c:	92 2e       	mov	r9, r18
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <vfprintf+0xec>
    3e30:	88 36       	cpi	r24, 0x68	; 104
    3e32:	41 f4       	brne	.+16     	; 0x3e44 <vfprintf+0xfc>
    3e34:	f1 01       	movw	r30, r2
    3e36:	93 fd       	sbrc	r25, 3
    3e38:	85 91       	lpm	r24, Z+
    3e3a:	93 ff       	sbrs	r25, 3
    3e3c:	81 91       	ld	r24, Z+
    3e3e:	1f 01       	movw	r2, r30
    3e40:	81 11       	cpse	r24, r1
    3e42:	b3 cf       	rjmp	.-154    	; 0x3daa <vfprintf+0x62>
    3e44:	9b eb       	ldi	r25, 0xBB	; 187
    3e46:	98 0f       	add	r25, r24
    3e48:	93 30       	cpi	r25, 0x03	; 3
    3e4a:	20 f4       	brcc	.+8      	; 0x3e54 <vfprintf+0x10c>
    3e4c:	99 2d       	mov	r25, r9
    3e4e:	90 61       	ori	r25, 0x10	; 16
    3e50:	80 5e       	subi	r24, 0xE0	; 224
    3e52:	07 c0       	rjmp	.+14     	; 0x3e62 <vfprintf+0x11a>
    3e54:	9b e9       	ldi	r25, 0x9B	; 155
    3e56:	98 0f       	add	r25, r24
    3e58:	93 30       	cpi	r25, 0x03	; 3
    3e5a:	08 f0       	brcs	.+2      	; 0x3e5e <vfprintf+0x116>
    3e5c:	66 c1       	rjmp	.+716    	; 0x412a <__RODATA_PM_OFFSET__+0x12a>
    3e5e:	99 2d       	mov	r25, r9
    3e60:	9f 7e       	andi	r25, 0xEF	; 239
    3e62:	96 ff       	sbrs	r25, 6
    3e64:	16 e0       	ldi	r17, 0x06	; 6
    3e66:	9f 73       	andi	r25, 0x3F	; 63
    3e68:	99 2e       	mov	r9, r25
    3e6a:	85 36       	cpi	r24, 0x65	; 101
    3e6c:	19 f4       	brne	.+6      	; 0x3e74 <vfprintf+0x12c>
    3e6e:	90 64       	ori	r25, 0x40	; 64
    3e70:	99 2e       	mov	r9, r25
    3e72:	08 c0       	rjmp	.+16     	; 0x3e84 <vfprintf+0x13c>
    3e74:	86 36       	cpi	r24, 0x66	; 102
    3e76:	21 f4       	brne	.+8      	; 0x3e80 <vfprintf+0x138>
    3e78:	39 2f       	mov	r19, r25
    3e7a:	30 68       	ori	r19, 0x80	; 128
    3e7c:	93 2e       	mov	r9, r19
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <vfprintf+0x13c>
    3e80:	11 11       	cpse	r17, r1
    3e82:	11 50       	subi	r17, 0x01	; 1
    3e84:	97 fe       	sbrs	r9, 7
    3e86:	07 c0       	rjmp	.+14     	; 0x3e96 <vfprintf+0x14e>
    3e88:	1c 33       	cpi	r17, 0x3C	; 60
    3e8a:	50 f4       	brcc	.+20     	; 0x3ea0 <vfprintf+0x158>
    3e8c:	44 24       	eor	r4, r4
    3e8e:	43 94       	inc	r4
    3e90:	41 0e       	add	r4, r17
    3e92:	27 e0       	ldi	r18, 0x07	; 7
    3e94:	0b c0       	rjmp	.+22     	; 0x3eac <vfprintf+0x164>
    3e96:	18 30       	cpi	r17, 0x08	; 8
    3e98:	38 f0       	brcs	.+14     	; 0x3ea8 <vfprintf+0x160>
    3e9a:	27 e0       	ldi	r18, 0x07	; 7
    3e9c:	17 e0       	ldi	r17, 0x07	; 7
    3e9e:	05 c0       	rjmp	.+10     	; 0x3eaa <vfprintf+0x162>
    3ea0:	27 e0       	ldi	r18, 0x07	; 7
    3ea2:	9c e3       	ldi	r25, 0x3C	; 60
    3ea4:	49 2e       	mov	r4, r25
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <vfprintf+0x164>
    3ea8:	21 2f       	mov	r18, r17
    3eaa:	41 2c       	mov	r4, r1
    3eac:	56 01       	movw	r10, r12
    3eae:	84 e0       	ldi	r24, 0x04	; 4
    3eb0:	a8 0e       	add	r10, r24
    3eb2:	b1 1c       	adc	r11, r1
    3eb4:	f6 01       	movw	r30, r12
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	04 2d       	mov	r16, r4
    3ec0:	a3 01       	movw	r20, r6
    3ec2:	0e 94 02 23 	call	0x4604	; 0x4604 <__ftoa_engine>
    3ec6:	6c 01       	movw	r12, r24
    3ec8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eca:	fc 87       	std	Y+12, r31	; 0x0c
    3ecc:	f0 ff       	sbrs	r31, 0
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <vfprintf+0x18c>
    3ed0:	f3 ff       	sbrs	r31, 3
    3ed2:	06 c0       	rjmp	.+12     	; 0x3ee0 <vfprintf+0x198>
    3ed4:	91 fc       	sbrc	r9, 1
    3ed6:	06 c0       	rjmp	.+12     	; 0x3ee4 <vfprintf+0x19c>
    3ed8:	92 fe       	sbrs	r9, 2
    3eda:	06 c0       	rjmp	.+12     	; 0x3ee8 <vfprintf+0x1a0>
    3edc:	00 e2       	ldi	r16, 0x20	; 32
    3ede:	05 c0       	rjmp	.+10     	; 0x3eea <vfprintf+0x1a2>
    3ee0:	0d e2       	ldi	r16, 0x2D	; 45
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <vfprintf+0x1a2>
    3ee4:	0b e2       	ldi	r16, 0x2B	; 43
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <vfprintf+0x1a2>
    3ee8:	00 e0       	ldi	r16, 0x00	; 0
    3eea:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eec:	8c 70       	andi	r24, 0x0C	; 12
    3eee:	19 f0       	breq	.+6      	; 0x3ef6 <vfprintf+0x1ae>
    3ef0:	01 11       	cpse	r16, r1
    3ef2:	5a c2       	rjmp	.+1204   	; 0x43a8 <__RODATA_PM_OFFSET__+0x3a8>
    3ef4:	9b c2       	rjmp	.+1334   	; 0x442c <__RODATA_PM_OFFSET__+0x42c>
    3ef6:	97 fe       	sbrs	r9, 7
    3ef8:	10 c0       	rjmp	.+32     	; 0x3f1a <vfprintf+0x1d2>
    3efa:	4c 0c       	add	r4, r12
    3efc:	fc 85       	ldd	r31, Y+12	; 0x0c
    3efe:	f4 ff       	sbrs	r31, 4
    3f00:	04 c0       	rjmp	.+8      	; 0x3f0a <vfprintf+0x1c2>
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	81 33       	cpi	r24, 0x31	; 49
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <vfprintf+0x1c2>
    3f08:	4a 94       	dec	r4
    3f0a:	14 14       	cp	r1, r4
    3f0c:	74 f5       	brge	.+92     	; 0x3f6a <vfprintf+0x222>
    3f0e:	28 e0       	ldi	r18, 0x08	; 8
    3f10:	24 15       	cp	r18, r4
    3f12:	78 f5       	brcc	.+94     	; 0x3f72 <vfprintf+0x22a>
    3f14:	88 e0       	ldi	r24, 0x08	; 8
    3f16:	48 2e       	mov	r4, r24
    3f18:	2c c0       	rjmp	.+88     	; 0x3f72 <vfprintf+0x22a>
    3f1a:	96 fc       	sbrc	r9, 6
    3f1c:	2a c0       	rjmp	.+84     	; 0x3f72 <vfprintf+0x22a>
    3f1e:	81 2f       	mov	r24, r17
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	8c 15       	cp	r24, r12
    3f24:	9d 05       	cpc	r25, r13
    3f26:	9c f0       	brlt	.+38     	; 0x3f4e <vfprintf+0x206>
    3f28:	3c ef       	ldi	r19, 0xFC	; 252
    3f2a:	c3 16       	cp	r12, r19
    3f2c:	3f ef       	ldi	r19, 0xFF	; 255
    3f2e:	d3 06       	cpc	r13, r19
    3f30:	74 f0       	brlt	.+28     	; 0x3f4e <vfprintf+0x206>
    3f32:	89 2d       	mov	r24, r9
    3f34:	80 68       	ori	r24, 0x80	; 128
    3f36:	98 2e       	mov	r9, r24
    3f38:	0a c0       	rjmp	.+20     	; 0x3f4e <vfprintf+0x206>
    3f3a:	e2 e0       	ldi	r30, 0x02	; 2
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	ec 0f       	add	r30, r28
    3f40:	fd 1f       	adc	r31, r29
    3f42:	e1 0f       	add	r30, r17
    3f44:	f1 1d       	adc	r31, r1
    3f46:	80 81       	ld	r24, Z
    3f48:	80 33       	cpi	r24, 0x30	; 48
    3f4a:	19 f4       	brne	.+6      	; 0x3f52 <vfprintf+0x20a>
    3f4c:	11 50       	subi	r17, 0x01	; 1
    3f4e:	11 11       	cpse	r17, r1
    3f50:	f4 cf       	rjmp	.-24     	; 0x3f3a <vfprintf+0x1f2>
    3f52:	97 fe       	sbrs	r9, 7
    3f54:	0e c0       	rjmp	.+28     	; 0x3f72 <vfprintf+0x22a>
    3f56:	44 24       	eor	r4, r4
    3f58:	43 94       	inc	r4
    3f5a:	41 0e       	add	r4, r17
    3f5c:	81 2f       	mov	r24, r17
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	c8 16       	cp	r12, r24
    3f62:	d9 06       	cpc	r13, r25
    3f64:	2c f4       	brge	.+10     	; 0x3f70 <vfprintf+0x228>
    3f66:	1c 19       	sub	r17, r12
    3f68:	04 c0       	rjmp	.+8      	; 0x3f72 <vfprintf+0x22a>
    3f6a:	44 24       	eor	r4, r4
    3f6c:	43 94       	inc	r4
    3f6e:	01 c0       	rjmp	.+2      	; 0x3f72 <vfprintf+0x22a>
    3f70:	10 e0       	ldi	r17, 0x00	; 0
    3f72:	97 fe       	sbrs	r9, 7
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <vfprintf+0x23a>
    3f76:	1c 14       	cp	r1, r12
    3f78:	1d 04       	cpc	r1, r13
    3f7a:	34 f4       	brge	.+12     	; 0x3f88 <vfprintf+0x240>
    3f7c:	c6 01       	movw	r24, r12
    3f7e:	01 96       	adiw	r24, 0x01	; 1
    3f80:	05 c0       	rjmp	.+10     	; 0x3f8c <vfprintf+0x244>
    3f82:	85 e0       	ldi	r24, 0x05	; 5
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <vfprintf+0x244>
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	01 11       	cpse	r16, r1
    3f8e:	01 96       	adiw	r24, 0x01	; 1
    3f90:	11 23       	and	r17, r17
    3f92:	31 f0       	breq	.+12     	; 0x3fa0 <vfprintf+0x258>
    3f94:	21 2f       	mov	r18, r17
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	2f 5f       	subi	r18, 0xFF	; 255
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	82 0f       	add	r24, r18
    3f9e:	93 1f       	adc	r25, r19
    3fa0:	25 2d       	mov	r18, r5
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	82 17       	cp	r24, r18
    3fa6:	93 07       	cpc	r25, r19
    3fa8:	14 f4       	brge	.+4      	; 0x3fae <vfprintf+0x266>
    3faa:	58 1a       	sub	r5, r24
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <vfprintf+0x268>
    3fae:	51 2c       	mov	r5, r1
    3fb0:	89 2d       	mov	r24, r9
    3fb2:	89 70       	andi	r24, 0x09	; 9
    3fb4:	49 f4       	brne	.+18     	; 0x3fc8 <vfprintf+0x280>
    3fb6:	55 20       	and	r5, r5
    3fb8:	39 f0       	breq	.+14     	; 0x3fc8 <vfprintf+0x280>
    3fba:	b7 01       	movw	r22, r14
    3fbc:	80 e2       	ldi	r24, 0x20	; 32
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    3fc4:	5a 94       	dec	r5
    3fc6:	f7 cf       	rjmp	.-18     	; 0x3fb6 <vfprintf+0x26e>
    3fc8:	00 23       	and	r16, r16
    3fca:	29 f0       	breq	.+10     	; 0x3fd6 <vfprintf+0x28e>
    3fcc:	b7 01       	movw	r22, r14
    3fce:	80 2f       	mov	r24, r16
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    3fd6:	93 fc       	sbrc	r9, 3
    3fd8:	09 c0       	rjmp	.+18     	; 0x3fec <vfprintf+0x2a4>
    3fda:	55 20       	and	r5, r5
    3fdc:	39 f0       	breq	.+14     	; 0x3fec <vfprintf+0x2a4>
    3fde:	b7 01       	movw	r22, r14
    3fe0:	80 e3       	ldi	r24, 0x30	; 48
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    3fe8:	5a 94       	dec	r5
    3fea:	f7 cf       	rjmp	.-18     	; 0x3fda <vfprintf+0x292>
    3fec:	97 fe       	sbrs	r9, 7
    3fee:	4c c0       	rjmp	.+152    	; 0x4088 <__RODATA_PM_OFFSET__+0x88>
    3ff0:	46 01       	movw	r8, r12
    3ff2:	d7 fe       	sbrs	r13, 7
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <vfprintf+0x2b2>
    3ff6:	81 2c       	mov	r8, r1
    3ff8:	91 2c       	mov	r9, r1
    3ffa:	c6 01       	movw	r24, r12
    3ffc:	88 19       	sub	r24, r8
    3ffe:	99 09       	sbc	r25, r9
    4000:	f3 01       	movw	r30, r6
    4002:	e8 0f       	add	r30, r24
    4004:	f9 1f       	adc	r31, r25
    4006:	ed 87       	std	Y+13, r30	; 0x0d
    4008:	fe 87       	std	Y+14, r31	; 0x0e
    400a:	96 01       	movw	r18, r12
    400c:	24 19       	sub	r18, r4
    400e:	31 09       	sbc	r19, r1
    4010:	2f 87       	std	Y+15, r18	; 0x0f
    4012:	38 8b       	std	Y+16, r19	; 0x10
    4014:	01 2f       	mov	r16, r17
    4016:	10 e0       	ldi	r17, 0x00	; 0
    4018:	11 95       	neg	r17
    401a:	01 95       	neg	r16
    401c:	11 09       	sbc	r17, r1
    401e:	3f ef       	ldi	r19, 0xFF	; 255
    4020:	83 16       	cp	r8, r19
    4022:	93 06       	cpc	r9, r19
    4024:	29 f4       	brne	.+10     	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    4026:	b7 01       	movw	r22, r14
    4028:	8e e2       	ldi	r24, 0x2E	; 46
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4030:	c8 14       	cp	r12, r8
    4032:	d9 04       	cpc	r13, r9
    4034:	4c f0       	brlt	.+18     	; 0x4048 <__RODATA_PM_OFFSET__+0x48>
    4036:	8f 85       	ldd	r24, Y+15	; 0x0f
    4038:	98 89       	ldd	r25, Y+16	; 0x10
    403a:	88 15       	cp	r24, r8
    403c:	99 05       	cpc	r25, r9
    403e:	24 f4       	brge	.+8      	; 0x4048 <__RODATA_PM_OFFSET__+0x48>
    4040:	ed 85       	ldd	r30, Y+13	; 0x0d
    4042:	fe 85       	ldd	r31, Y+14	; 0x0e
    4044:	81 81       	ldd	r24, Z+1	; 0x01
    4046:	01 c0       	rjmp	.+2      	; 0x404a <__RODATA_PM_OFFSET__+0x4a>
    4048:	80 e3       	ldi	r24, 0x30	; 48
    404a:	f1 e0       	ldi	r31, 0x01	; 1
    404c:	8f 1a       	sub	r8, r31
    404e:	91 08       	sbc	r9, r1
    4050:	2d 85       	ldd	r18, Y+13	; 0x0d
    4052:	3e 85       	ldd	r19, Y+14	; 0x0e
    4054:	2f 5f       	subi	r18, 0xFF	; 255
    4056:	3f 4f       	sbci	r19, 0xFF	; 255
    4058:	2d 87       	std	Y+13, r18	; 0x0d
    405a:	3e 87       	std	Y+14, r19	; 0x0e
    405c:	80 16       	cp	r8, r16
    405e:	91 06       	cpc	r9, r17
    4060:	2c f0       	brlt	.+10     	; 0x406c <__RODATA_PM_OFFSET__+0x6c>
    4062:	b7 01       	movw	r22, r14
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    406a:	d9 cf       	rjmp	.-78     	; 0x401e <__RODATA_PM_OFFSET__+0x1e>
    406c:	c8 14       	cp	r12, r8
    406e:	d9 04       	cpc	r13, r9
    4070:	41 f4       	brne	.+16     	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	96 33       	cpi	r25, 0x36	; 54
    4076:	20 f4       	brcc	.+8      	; 0x4080 <__RODATA_PM_OFFSET__+0x80>
    4078:	95 33       	cpi	r25, 0x35	; 53
    407a:	19 f4       	brne	.+6      	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    407c:	3c 85       	ldd	r19, Y+12	; 0x0c
    407e:	34 ff       	sbrs	r19, 4
    4080:	81 e3       	ldi	r24, 0x31	; 49
    4082:	b7 01       	movw	r22, r14
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	4e c0       	rjmp	.+156    	; 0x4124 <__RODATA_PM_OFFSET__+0x124>
    4088:	8a 81       	ldd	r24, Y+2	; 0x02
    408a:	81 33       	cpi	r24, 0x31	; 49
    408c:	19 f0       	breq	.+6      	; 0x4094 <__RODATA_PM_OFFSET__+0x94>
    408e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4090:	9f 7e       	andi	r25, 0xEF	; 239
    4092:	9c 87       	std	Y+12, r25	; 0x0c
    4094:	b7 01       	movw	r22, r14
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    409c:	11 11       	cpse	r17, r1
    409e:	05 c0       	rjmp	.+10     	; 0x40aa <__RODATA_PM_OFFSET__+0xaa>
    40a0:	94 fc       	sbrc	r9, 4
    40a2:	18 c0       	rjmp	.+48     	; 0x40d4 <__RODATA_PM_OFFSET__+0xd4>
    40a4:	85 e6       	ldi	r24, 0x65	; 101
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	17 c0       	rjmp	.+46     	; 0x40d8 <__RODATA_PM_OFFSET__+0xd8>
    40aa:	b7 01       	movw	r22, r14
    40ac:	8e e2       	ldi	r24, 0x2E	; 46
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    40b4:	1e 5f       	subi	r17, 0xFE	; 254
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	01 e0       	ldi	r16, 0x01	; 1
    40ba:	08 0f       	add	r16, r24
    40bc:	f3 01       	movw	r30, r6
    40be:	e8 0f       	add	r30, r24
    40c0:	f1 1d       	adc	r31, r1
    40c2:	80 81       	ld	r24, Z
    40c4:	b7 01       	movw	r22, r14
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    40cc:	80 2f       	mov	r24, r16
    40ce:	01 13       	cpse	r16, r17
    40d0:	f3 cf       	rjmp	.-26     	; 0x40b8 <__RODATA_PM_OFFSET__+0xb8>
    40d2:	e6 cf       	rjmp	.-52     	; 0x40a0 <__RODATA_PM_OFFSET__+0xa0>
    40d4:	85 e4       	ldi	r24, 0x45	; 69
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	b7 01       	movw	r22, r14
    40da:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    40de:	d7 fc       	sbrc	r13, 7
    40e0:	06 c0       	rjmp	.+12     	; 0x40ee <__RODATA_PM_OFFSET__+0xee>
    40e2:	c1 14       	cp	r12, r1
    40e4:	d1 04       	cpc	r13, r1
    40e6:	41 f4       	brne	.+16     	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    40ea:	e4 ff       	sbrs	r30, 4
    40ec:	05 c0       	rjmp	.+10     	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40ee:	d1 94       	neg	r13
    40f0:	c1 94       	neg	r12
    40f2:	d1 08       	sbc	r13, r1
    40f4:	8d e2       	ldi	r24, 0x2D	; 45
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <__RODATA_PM_OFFSET__+0xfa>
    40f8:	8b e2       	ldi	r24, 0x2B	; 43
    40fa:	b7 01       	movw	r22, r14
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4102:	80 e3       	ldi	r24, 0x30	; 48
    4104:	2a e0       	ldi	r18, 0x0A	; 10
    4106:	c2 16       	cp	r12, r18
    4108:	d1 04       	cpc	r13, r1
    410a:	2c f0       	brlt	.+10     	; 0x4116 <__RODATA_PM_OFFSET__+0x116>
    410c:	8f 5f       	subi	r24, 0xFF	; 255
    410e:	fa e0       	ldi	r31, 0x0A	; 10
    4110:	cf 1a       	sub	r12, r31
    4112:	d1 08       	sbc	r13, r1
    4114:	f7 cf       	rjmp	.-18     	; 0x4104 <__RODATA_PM_OFFSET__+0x104>
    4116:	b7 01       	movw	r22, r14
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    411e:	b7 01       	movw	r22, r14
    4120:	c6 01       	movw	r24, r12
    4122:	c0 96       	adiw	r24, 0x30	; 48
    4124:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4128:	54 c1       	rjmp	.+680    	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    412a:	83 36       	cpi	r24, 0x63	; 99
    412c:	31 f0       	breq	.+12     	; 0x413a <__RODATA_PM_OFFSET__+0x13a>
    412e:	83 37       	cpi	r24, 0x73	; 115
    4130:	79 f0       	breq	.+30     	; 0x4150 <__RODATA_PM_OFFSET__+0x150>
    4132:	83 35       	cpi	r24, 0x53	; 83
    4134:	09 f0       	breq	.+2      	; 0x4138 <__RODATA_PM_OFFSET__+0x138>
    4136:	56 c0       	rjmp	.+172    	; 0x41e4 <__RODATA_PM_OFFSET__+0x1e4>
    4138:	20 c0       	rjmp	.+64     	; 0x417a <__RODATA_PM_OFFSET__+0x17a>
    413a:	56 01       	movw	r10, r12
    413c:	32 e0       	ldi	r19, 0x02	; 2
    413e:	a3 0e       	add	r10, r19
    4140:	b1 1c       	adc	r11, r1
    4142:	f6 01       	movw	r30, r12
    4144:	80 81       	ld	r24, Z
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	01 e0       	ldi	r16, 0x01	; 1
    414a:	10 e0       	ldi	r17, 0x00	; 0
    414c:	63 01       	movw	r12, r6
    414e:	12 c0       	rjmp	.+36     	; 0x4174 <__RODATA_PM_OFFSET__+0x174>
    4150:	56 01       	movw	r10, r12
    4152:	f2 e0       	ldi	r31, 0x02	; 2
    4154:	af 0e       	add	r10, r31
    4156:	b1 1c       	adc	r11, r1
    4158:	f6 01       	movw	r30, r12
    415a:	c0 80       	ld	r12, Z
    415c:	d1 80       	ldd	r13, Z+1	; 0x01
    415e:	96 fe       	sbrs	r9, 6
    4160:	03 c0       	rjmp	.+6      	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    4162:	61 2f       	mov	r22, r17
    4164:	70 e0       	ldi	r23, 0x00	; 0
    4166:	02 c0       	rjmp	.+4      	; 0x416c <__RODATA_PM_OFFSET__+0x16c>
    4168:	6f ef       	ldi	r22, 0xFF	; 255
    416a:	7f ef       	ldi	r23, 0xFF	; 255
    416c:	c6 01       	movw	r24, r12
    416e:	0e 94 f7 23 	call	0x47ee	; 0x47ee <strnlen>
    4172:	8c 01       	movw	r16, r24
    4174:	f9 2d       	mov	r31, r9
    4176:	ff 77       	andi	r31, 0x7F	; 127
    4178:	14 c0       	rjmp	.+40     	; 0x41a2 <__RODATA_PM_OFFSET__+0x1a2>
    417a:	56 01       	movw	r10, r12
    417c:	22 e0       	ldi	r18, 0x02	; 2
    417e:	a2 0e       	add	r10, r18
    4180:	b1 1c       	adc	r11, r1
    4182:	f6 01       	movw	r30, r12
    4184:	c0 80       	ld	r12, Z
    4186:	d1 80       	ldd	r13, Z+1	; 0x01
    4188:	96 fe       	sbrs	r9, 6
    418a:	03 c0       	rjmp	.+6      	; 0x4192 <__RODATA_PM_OFFSET__+0x192>
    418c:	61 2f       	mov	r22, r17
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	02 c0       	rjmp	.+4      	; 0x4196 <__RODATA_PM_OFFSET__+0x196>
    4192:	6f ef       	ldi	r22, 0xFF	; 255
    4194:	7f ef       	ldi	r23, 0xFF	; 255
    4196:	c6 01       	movw	r24, r12
    4198:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strnlen_P>
    419c:	8c 01       	movw	r16, r24
    419e:	f9 2d       	mov	r31, r9
    41a0:	f0 68       	ori	r31, 0x80	; 128
    41a2:	9f 2e       	mov	r9, r31
    41a4:	f3 fd       	sbrc	r31, 3
    41a6:	1a c0       	rjmp	.+52     	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    41a8:	85 2d       	mov	r24, r5
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	08 17       	cp	r16, r24
    41ae:	19 07       	cpc	r17, r25
    41b0:	a8 f4       	brcc	.+42     	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    41b2:	b7 01       	movw	r22, r14
    41b4:	80 e2       	ldi	r24, 0x20	; 32
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    41bc:	5a 94       	dec	r5
    41be:	f4 cf       	rjmp	.-24     	; 0x41a8 <__RODATA_PM_OFFSET__+0x1a8>
    41c0:	f6 01       	movw	r30, r12
    41c2:	97 fc       	sbrc	r9, 7
    41c4:	85 91       	lpm	r24, Z+
    41c6:	97 fe       	sbrs	r9, 7
    41c8:	81 91       	ld	r24, Z+
    41ca:	6f 01       	movw	r12, r30
    41cc:	b7 01       	movw	r22, r14
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    41d4:	51 10       	cpse	r5, r1
    41d6:	5a 94       	dec	r5
    41d8:	01 50       	subi	r16, 0x01	; 1
    41da:	11 09       	sbc	r17, r1
    41dc:	01 15       	cp	r16, r1
    41de:	11 05       	cpc	r17, r1
    41e0:	79 f7       	brne	.-34     	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    41e2:	f7 c0       	rjmp	.+494    	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    41e4:	84 36       	cpi	r24, 0x64	; 100
    41e6:	11 f0       	breq	.+4      	; 0x41ec <__RODATA_PM_OFFSET__+0x1ec>
    41e8:	89 36       	cpi	r24, 0x69	; 105
    41ea:	61 f5       	brne	.+88     	; 0x4244 <__RODATA_PM_OFFSET__+0x244>
    41ec:	56 01       	movw	r10, r12
    41ee:	97 fe       	sbrs	r9, 7
    41f0:	09 c0       	rjmp	.+18     	; 0x4204 <__RODATA_PM_OFFSET__+0x204>
    41f2:	24 e0       	ldi	r18, 0x04	; 4
    41f4:	a2 0e       	add	r10, r18
    41f6:	b1 1c       	adc	r11, r1
    41f8:	f6 01       	movw	r30, r12
    41fa:	60 81       	ld	r22, Z
    41fc:	71 81       	ldd	r23, Z+1	; 0x01
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	0a c0       	rjmp	.+20     	; 0x4218 <__RODATA_PM_OFFSET__+0x218>
    4204:	f2 e0       	ldi	r31, 0x02	; 2
    4206:	af 0e       	add	r10, r31
    4208:	b1 1c       	adc	r11, r1
    420a:	f6 01       	movw	r30, r12
    420c:	60 81       	ld	r22, Z
    420e:	71 81       	ldd	r23, Z+1	; 0x01
    4210:	07 2e       	mov	r0, r23
    4212:	00 0c       	add	r0, r0
    4214:	88 0b       	sbc	r24, r24
    4216:	99 0b       	sbc	r25, r25
    4218:	f9 2d       	mov	r31, r9
    421a:	ff 76       	andi	r31, 0x6F	; 111
    421c:	9f 2e       	mov	r9, r31
    421e:	97 ff       	sbrs	r25, 7
    4220:	09 c0       	rjmp	.+18     	; 0x4234 <__RODATA_PM_OFFSET__+0x234>
    4222:	90 95       	com	r25
    4224:	80 95       	com	r24
    4226:	70 95       	com	r23
    4228:	61 95       	neg	r22
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	8f 4f       	sbci	r24, 0xFF	; 255
    422e:	9f 4f       	sbci	r25, 0xFF	; 255
    4230:	f0 68       	ori	r31, 0x80	; 128
    4232:	9f 2e       	mov	r9, r31
    4234:	2a e0       	ldi	r18, 0x0A	; 10
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	a3 01       	movw	r20, r6
    423a:	0e 94 75 24 	call	0x48ea	; 0x48ea <__ultoa_invert>
    423e:	c8 2e       	mov	r12, r24
    4240:	c6 18       	sub	r12, r6
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <__RODATA_PM_OFFSET__+0x2c2>
    4244:	09 2d       	mov	r16, r9
    4246:	85 37       	cpi	r24, 0x75	; 117
    4248:	21 f4       	brne	.+8      	; 0x4252 <__RODATA_PM_OFFSET__+0x252>
    424a:	0f 7e       	andi	r16, 0xEF	; 239
    424c:	2a e0       	ldi	r18, 0x0A	; 10
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	1d c0       	rjmp	.+58     	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    4252:	09 7f       	andi	r16, 0xF9	; 249
    4254:	8f 36       	cpi	r24, 0x6F	; 111
    4256:	91 f0       	breq	.+36     	; 0x427c <__RODATA_PM_OFFSET__+0x27c>
    4258:	18 f4       	brcc	.+6      	; 0x4260 <__RODATA_PM_OFFSET__+0x260>
    425a:	88 35       	cpi	r24, 0x58	; 88
    425c:	59 f0       	breq	.+22     	; 0x4274 <__RODATA_PM_OFFSET__+0x274>
    425e:	c3 c0       	rjmp	.+390    	; 0x43e6 <__RODATA_PM_OFFSET__+0x3e6>
    4260:	80 37       	cpi	r24, 0x70	; 112
    4262:	19 f0       	breq	.+6      	; 0x426a <__RODATA_PM_OFFSET__+0x26a>
    4264:	88 37       	cpi	r24, 0x78	; 120
    4266:	11 f0       	breq	.+4      	; 0x426c <__RODATA_PM_OFFSET__+0x26c>
    4268:	be c0       	rjmp	.+380    	; 0x43e6 <__RODATA_PM_OFFSET__+0x3e6>
    426a:	00 61       	ori	r16, 0x10	; 16
    426c:	04 ff       	sbrs	r16, 4
    426e:	09 c0       	rjmp	.+18     	; 0x4282 <__RODATA_PM_OFFSET__+0x282>
    4270:	04 60       	ori	r16, 0x04	; 4
    4272:	07 c0       	rjmp	.+14     	; 0x4282 <__RODATA_PM_OFFSET__+0x282>
    4274:	94 fe       	sbrs	r9, 4
    4276:	08 c0       	rjmp	.+16     	; 0x4288 <__RODATA_PM_OFFSET__+0x288>
    4278:	06 60       	ori	r16, 0x06	; 6
    427a:	06 c0       	rjmp	.+12     	; 0x4288 <__RODATA_PM_OFFSET__+0x288>
    427c:	28 e0       	ldi	r18, 0x08	; 8
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	05 c0       	rjmp	.+10     	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    4282:	20 e1       	ldi	r18, 0x10	; 16
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	02 c0       	rjmp	.+4      	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    4288:	20 e1       	ldi	r18, 0x10	; 16
    428a:	32 e0       	ldi	r19, 0x02	; 2
    428c:	56 01       	movw	r10, r12
    428e:	07 ff       	sbrs	r16, 7
    4290:	09 c0       	rjmp	.+18     	; 0x42a4 <__RODATA_PM_OFFSET__+0x2a4>
    4292:	84 e0       	ldi	r24, 0x04	; 4
    4294:	a8 0e       	add	r10, r24
    4296:	b1 1c       	adc	r11, r1
    4298:	f6 01       	movw	r30, r12
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	82 81       	ldd	r24, Z+2	; 0x02
    42a0:	93 81       	ldd	r25, Z+3	; 0x03
    42a2:	08 c0       	rjmp	.+16     	; 0x42b4 <__RODATA_PM_OFFSET__+0x2b4>
    42a4:	f2 e0       	ldi	r31, 0x02	; 2
    42a6:	af 0e       	add	r10, r31
    42a8:	b1 1c       	adc	r11, r1
    42aa:	f6 01       	movw	r30, r12
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	a3 01       	movw	r20, r6
    42b6:	0e 94 75 24 	call	0x48ea	; 0x48ea <__ultoa_invert>
    42ba:	c8 2e       	mov	r12, r24
    42bc:	c6 18       	sub	r12, r6
    42be:	0f 77       	andi	r16, 0x7F	; 127
    42c0:	90 2e       	mov	r9, r16
    42c2:	96 fe       	sbrs	r9, 6
    42c4:	0b c0       	rjmp	.+22     	; 0x42dc <__RODATA_PM_OFFSET__+0x2dc>
    42c6:	09 2d       	mov	r16, r9
    42c8:	0e 7f       	andi	r16, 0xFE	; 254
    42ca:	c1 16       	cp	r12, r17
    42cc:	50 f4       	brcc	.+20     	; 0x42e2 <__RODATA_PM_OFFSET__+0x2e2>
    42ce:	94 fe       	sbrs	r9, 4
    42d0:	0a c0       	rjmp	.+20     	; 0x42e6 <__RODATA_PM_OFFSET__+0x2e6>
    42d2:	92 fc       	sbrc	r9, 2
    42d4:	08 c0       	rjmp	.+16     	; 0x42e6 <__RODATA_PM_OFFSET__+0x2e6>
    42d6:	09 2d       	mov	r16, r9
    42d8:	0e 7e       	andi	r16, 0xEE	; 238
    42da:	05 c0       	rjmp	.+10     	; 0x42e6 <__RODATA_PM_OFFSET__+0x2e6>
    42dc:	dc 2c       	mov	r13, r12
    42de:	09 2d       	mov	r16, r9
    42e0:	03 c0       	rjmp	.+6      	; 0x42e8 <__RODATA_PM_OFFSET__+0x2e8>
    42e2:	dc 2c       	mov	r13, r12
    42e4:	01 c0       	rjmp	.+2      	; 0x42e8 <__RODATA_PM_OFFSET__+0x2e8>
    42e6:	d1 2e       	mov	r13, r17
    42e8:	04 ff       	sbrs	r16, 4
    42ea:	0d c0       	rjmp	.+26     	; 0x4306 <__RODATA_PM_OFFSET__+0x306>
    42ec:	fe 01       	movw	r30, r28
    42ee:	ec 0d       	add	r30, r12
    42f0:	f1 1d       	adc	r31, r1
    42f2:	80 81       	ld	r24, Z
    42f4:	80 33       	cpi	r24, 0x30	; 48
    42f6:	11 f4       	brne	.+4      	; 0x42fc <__RODATA_PM_OFFSET__+0x2fc>
    42f8:	09 7e       	andi	r16, 0xE9	; 233
    42fa:	09 c0       	rjmp	.+18     	; 0x430e <__RODATA_PM_OFFSET__+0x30e>
    42fc:	02 ff       	sbrs	r16, 2
    42fe:	06 c0       	rjmp	.+12     	; 0x430c <__RODATA_PM_OFFSET__+0x30c>
    4300:	d3 94       	inc	r13
    4302:	d3 94       	inc	r13
    4304:	04 c0       	rjmp	.+8      	; 0x430e <__RODATA_PM_OFFSET__+0x30e>
    4306:	80 2f       	mov	r24, r16
    4308:	86 78       	andi	r24, 0x86	; 134
    430a:	09 f0       	breq	.+2      	; 0x430e <__RODATA_PM_OFFSET__+0x30e>
    430c:	d3 94       	inc	r13
    430e:	03 fd       	sbrc	r16, 3
    4310:	11 c0       	rjmp	.+34     	; 0x4334 <__RODATA_PM_OFFSET__+0x334>
    4312:	00 ff       	sbrs	r16, 0
    4314:	06 c0       	rjmp	.+12     	; 0x4322 <__RODATA_PM_OFFSET__+0x322>
    4316:	1c 2d       	mov	r17, r12
    4318:	d5 14       	cp	r13, r5
    431a:	80 f4       	brcc	.+32     	; 0x433c <__RODATA_PM_OFFSET__+0x33c>
    431c:	15 0d       	add	r17, r5
    431e:	1d 19       	sub	r17, r13
    4320:	0d c0       	rjmp	.+26     	; 0x433c <__RODATA_PM_OFFSET__+0x33c>
    4322:	d5 14       	cp	r13, r5
    4324:	58 f4       	brcc	.+22     	; 0x433c <__RODATA_PM_OFFSET__+0x33c>
    4326:	b7 01       	movw	r22, r14
    4328:	80 e2       	ldi	r24, 0x20	; 32
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4330:	d3 94       	inc	r13
    4332:	f7 cf       	rjmp	.-18     	; 0x4322 <__RODATA_PM_OFFSET__+0x322>
    4334:	d5 14       	cp	r13, r5
    4336:	10 f4       	brcc	.+4      	; 0x433c <__RODATA_PM_OFFSET__+0x33c>
    4338:	5d 18       	sub	r5, r13
    433a:	01 c0       	rjmp	.+2      	; 0x433e <__RODATA_PM_OFFSET__+0x33e>
    433c:	51 2c       	mov	r5, r1
    433e:	04 ff       	sbrs	r16, 4
    4340:	10 c0       	rjmp	.+32     	; 0x4362 <__RODATA_PM_OFFSET__+0x362>
    4342:	b7 01       	movw	r22, r14
    4344:	80 e3       	ldi	r24, 0x30	; 48
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    434c:	02 ff       	sbrs	r16, 2
    434e:	17 c0       	rjmp	.+46     	; 0x437e <__RODATA_PM_OFFSET__+0x37e>
    4350:	01 fd       	sbrc	r16, 1
    4352:	03 c0       	rjmp	.+6      	; 0x435a <__RODATA_PM_OFFSET__+0x35a>
    4354:	88 e7       	ldi	r24, 0x78	; 120
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	02 c0       	rjmp	.+4      	; 0x435e <__RODATA_PM_OFFSET__+0x35e>
    435a:	88 e5       	ldi	r24, 0x58	; 88
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	b7 01       	movw	r22, r14
    4360:	0c c0       	rjmp	.+24     	; 0x437a <__RODATA_PM_OFFSET__+0x37a>
    4362:	80 2f       	mov	r24, r16
    4364:	86 78       	andi	r24, 0x86	; 134
    4366:	59 f0       	breq	.+22     	; 0x437e <__RODATA_PM_OFFSET__+0x37e>
    4368:	01 ff       	sbrs	r16, 1
    436a:	02 c0       	rjmp	.+4      	; 0x4370 <__RODATA_PM_OFFSET__+0x370>
    436c:	8b e2       	ldi	r24, 0x2B	; 43
    436e:	01 c0       	rjmp	.+2      	; 0x4372 <__RODATA_PM_OFFSET__+0x372>
    4370:	80 e2       	ldi	r24, 0x20	; 32
    4372:	07 fd       	sbrc	r16, 7
    4374:	8d e2       	ldi	r24, 0x2D	; 45
    4376:	b7 01       	movw	r22, r14
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    437e:	c1 16       	cp	r12, r17
    4380:	38 f4       	brcc	.+14     	; 0x4390 <__RODATA_PM_OFFSET__+0x390>
    4382:	b7 01       	movw	r22, r14
    4384:	80 e3       	ldi	r24, 0x30	; 48
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    438c:	11 50       	subi	r17, 0x01	; 1
    438e:	f7 cf       	rjmp	.-18     	; 0x437e <__RODATA_PM_OFFSET__+0x37e>
    4390:	ca 94       	dec	r12
    4392:	f3 01       	movw	r30, r6
    4394:	ec 0d       	add	r30, r12
    4396:	f1 1d       	adc	r31, r1
    4398:	80 81       	ld	r24, Z
    439a:	b7 01       	movw	r22, r14
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    43a2:	c1 10       	cpse	r12, r1
    43a4:	f5 cf       	rjmp	.-22     	; 0x4390 <__RODATA_PM_OFFSET__+0x390>
    43a6:	15 c0       	rjmp	.+42     	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    43a8:	f4 e0       	ldi	r31, 0x04	; 4
    43aa:	f5 15       	cp	r31, r5
    43ac:	60 f5       	brcc	.+88     	; 0x4406 <__RODATA_PM_OFFSET__+0x406>
    43ae:	84 e0       	ldi	r24, 0x04	; 4
    43b0:	58 1a       	sub	r5, r24
    43b2:	93 fe       	sbrs	r9, 3
    43b4:	1f c0       	rjmp	.+62     	; 0x43f4 <__RODATA_PM_OFFSET__+0x3f4>
    43b6:	01 11       	cpse	r16, r1
    43b8:	27 c0       	rjmp	.+78     	; 0x4408 <__RODATA_PM_OFFSET__+0x408>
    43ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    43bc:	23 ff       	sbrs	r18, 3
    43be:	2a c0       	rjmp	.+84     	; 0x4414 <__RODATA_PM_OFFSET__+0x414>
    43c0:	04 e6       	ldi	r16, 0x64	; 100
    43c2:	11 e0       	ldi	r17, 0x01	; 1
    43c4:	39 2d       	mov	r19, r9
    43c6:	30 71       	andi	r19, 0x10	; 16
    43c8:	93 2e       	mov	r9, r19
    43ca:	f8 01       	movw	r30, r16
    43cc:	84 91       	lpm	r24, Z
    43ce:	81 11       	cpse	r24, r1
    43d0:	24 c0       	rjmp	.+72     	; 0x441a <__RODATA_PM_OFFSET__+0x41a>
    43d2:	55 20       	and	r5, r5
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <__RODATA_PM_OFFSET__+0x3d8>
    43d6:	e4 cc       	rjmp	.-1592   	; 0x3da0 <vfprintf+0x58>
    43d8:	b7 01       	movw	r22, r14
    43da:	80 e2       	ldi	r24, 0x20	; 32
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    43e2:	5a 94       	dec	r5
    43e4:	f6 cf       	rjmp	.-20     	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    43e6:	f7 01       	movw	r30, r14
    43e8:	86 81       	ldd	r24, Z+6	; 0x06
    43ea:	97 81       	ldd	r25, Z+7	; 0x07
    43ec:	26 c0       	rjmp	.+76     	; 0x443a <__RODATA_PM_OFFSET__+0x43a>
    43ee:	8f ef       	ldi	r24, 0xFF	; 255
    43f0:	9f ef       	ldi	r25, 0xFF	; 255
    43f2:	23 c0       	rjmp	.+70     	; 0x443a <__RODATA_PM_OFFSET__+0x43a>
    43f4:	b7 01       	movw	r22, r14
    43f6:	80 e2       	ldi	r24, 0x20	; 32
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    43fe:	5a 94       	dec	r5
    4400:	51 10       	cpse	r5, r1
    4402:	f8 cf       	rjmp	.-16     	; 0x43f4 <__RODATA_PM_OFFSET__+0x3f4>
    4404:	d8 cf       	rjmp	.-80     	; 0x43b6 <__RODATA_PM_OFFSET__+0x3b6>
    4406:	51 2c       	mov	r5, r1
    4408:	b7 01       	movw	r22, r14
    440a:	80 2f       	mov	r24, r16
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4412:	d3 cf       	rjmp	.-90     	; 0x43ba <__RODATA_PM_OFFSET__+0x3ba>
    4414:	08 e6       	ldi	r16, 0x68	; 104
    4416:	11 e0       	ldi	r17, 0x01	; 1
    4418:	d5 cf       	rjmp	.-86     	; 0x43c4 <__RODATA_PM_OFFSET__+0x3c4>
    441a:	91 10       	cpse	r9, r1
    441c:	80 52       	subi	r24, 0x20	; 32
    441e:	b7 01       	movw	r22, r14
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4426:	0f 5f       	subi	r16, 0xFF	; 255
    4428:	1f 4f       	sbci	r17, 0xFF	; 255
    442a:	cf cf       	rjmp	.-98     	; 0x43ca <__RODATA_PM_OFFSET__+0x3ca>
    442c:	23 e0       	ldi	r18, 0x03	; 3
    442e:	25 15       	cp	r18, r5
    4430:	10 f4       	brcc	.+4      	; 0x4436 <__RODATA_PM_OFFSET__+0x436>
    4432:	83 e0       	ldi	r24, 0x03	; 3
    4434:	bd cf       	rjmp	.-134    	; 0x43b0 <__RODATA_PM_OFFSET__+0x3b0>
    4436:	51 2c       	mov	r5, r1
    4438:	c0 cf       	rjmp	.-128    	; 0x43ba <__RODATA_PM_OFFSET__+0x3ba>
    443a:	60 96       	adiw	r28, 0x10	; 16
    443c:	e2 e1       	ldi	r30, 0x12	; 18
    443e:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__epilogue_restores__>

00004442 <__divmodhi4>:
    4442:	97 fb       	bst	r25, 7
    4444:	07 2e       	mov	r0, r23
    4446:	16 f4       	brtc	.+4      	; 0x444c <__divmodhi4+0xa>
    4448:	00 94       	com	r0
    444a:	07 d0       	rcall	.+14     	; 0x445a <__divmodhi4_neg1>
    444c:	77 fd       	sbrc	r23, 7
    444e:	09 d0       	rcall	.+18     	; 0x4462 <__divmodhi4_neg2>
    4450:	0e 94 96 22 	call	0x452c	; 0x452c <__udivmodhi4>
    4454:	07 fc       	sbrc	r0, 7
    4456:	05 d0       	rcall	.+10     	; 0x4462 <__divmodhi4_neg2>
    4458:	3e f4       	brtc	.+14     	; 0x4468 <__divmodhi4_exit>

0000445a <__divmodhi4_neg1>:
    445a:	90 95       	com	r25
    445c:	81 95       	neg	r24
    445e:	9f 4f       	sbci	r25, 0xFF	; 255
    4460:	08 95       	ret

00004462 <__divmodhi4_neg2>:
    4462:	70 95       	com	r23
    4464:	61 95       	neg	r22
    4466:	7f 4f       	sbci	r23, 0xFF	; 255

00004468 <__divmodhi4_exit>:
    4468:	08 95       	ret

0000446a <__divmodsi4>:
    446a:	05 2e       	mov	r0, r21
    446c:	97 fb       	bst	r25, 7
    446e:	1e f4       	brtc	.+6      	; 0x4476 <__divmodsi4+0xc>
    4470:	00 94       	com	r0
    4472:	0e 94 4c 22 	call	0x4498	; 0x4498 <__negsi2>
    4476:	57 fd       	sbrc	r21, 7
    4478:	07 d0       	rcall	.+14     	; 0x4488 <__divmodsi4_neg2>
    447a:	0e 94 aa 22 	call	0x4554	; 0x4554 <__udivmodsi4>
    447e:	07 fc       	sbrc	r0, 7
    4480:	03 d0       	rcall	.+6      	; 0x4488 <__divmodsi4_neg2>
    4482:	4e f4       	brtc	.+18     	; 0x4496 <__divmodsi4_exit>
    4484:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <__negsi2>

00004488 <__divmodsi4_neg2>:
    4488:	50 95       	com	r21
    448a:	40 95       	com	r20
    448c:	30 95       	com	r19
    448e:	21 95       	neg	r18
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	4f 4f       	sbci	r20, 0xFF	; 255
    4494:	5f 4f       	sbci	r21, 0xFF	; 255

00004496 <__divmodsi4_exit>:
    4496:	08 95       	ret

00004498 <__negsi2>:
    4498:	90 95       	com	r25
    449a:	80 95       	com	r24
    449c:	70 95       	com	r23
    449e:	61 95       	neg	r22
    44a0:	7f 4f       	sbci	r23, 0xFF	; 255
    44a2:	8f 4f       	sbci	r24, 0xFF	; 255
    44a4:	9f 4f       	sbci	r25, 0xFF	; 255
    44a6:	08 95       	ret

000044a8 <__tablejump2__>:
    44a8:	ee 0f       	add	r30, r30
    44aa:	ff 1f       	adc	r31, r31
    44ac:	05 90       	lpm	r0, Z+
    44ae:	f4 91       	lpm	r31, Z
    44b0:	e0 2d       	mov	r30, r0
    44b2:	09 94       	ijmp

000044b4 <__muluhisi3>:
    44b4:	0e 94 cc 22 	call	0x4598	; 0x4598 <__umulhisi3>
    44b8:	a5 9f       	mul	r26, r21
    44ba:	90 0d       	add	r25, r0
    44bc:	b4 9f       	mul	r27, r20
    44be:	90 0d       	add	r25, r0
    44c0:	a4 9f       	mul	r26, r20
    44c2:	80 0d       	add	r24, r0
    44c4:	91 1d       	adc	r25, r1
    44c6:	11 24       	eor	r1, r1
    44c8:	08 95       	ret

000044ca <__prologue_saves__>:
    44ca:	2f 92       	push	r2
    44cc:	3f 92       	push	r3
    44ce:	4f 92       	push	r4
    44d0:	5f 92       	push	r5
    44d2:	6f 92       	push	r6
    44d4:	7f 92       	push	r7
    44d6:	8f 92       	push	r8
    44d8:	9f 92       	push	r9
    44da:	af 92       	push	r10
    44dc:	bf 92       	push	r11
    44de:	cf 92       	push	r12
    44e0:	df 92       	push	r13
    44e2:	ef 92       	push	r14
    44e4:	ff 92       	push	r15
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	ca 1b       	sub	r28, r26
    44f4:	db 0b       	sbc	r29, r27
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	09 94       	ijmp

000044fc <__epilogue_restores__>:
    44fc:	2a 88       	ldd	r2, Y+18	; 0x12
    44fe:	39 88       	ldd	r3, Y+17	; 0x11
    4500:	48 88       	ldd	r4, Y+16	; 0x10
    4502:	5f 84       	ldd	r5, Y+15	; 0x0f
    4504:	6e 84       	ldd	r6, Y+14	; 0x0e
    4506:	7d 84       	ldd	r7, Y+13	; 0x0d
    4508:	8c 84       	ldd	r8, Y+12	; 0x0c
    450a:	9b 84       	ldd	r9, Y+11	; 0x0b
    450c:	aa 84       	ldd	r10, Y+10	; 0x0a
    450e:	b9 84       	ldd	r11, Y+9	; 0x09
    4510:	c8 84       	ldd	r12, Y+8	; 0x08
    4512:	df 80       	ldd	r13, Y+7	; 0x07
    4514:	ee 80       	ldd	r14, Y+6	; 0x06
    4516:	fd 80       	ldd	r15, Y+5	; 0x05
    4518:	0c 81       	ldd	r16, Y+4	; 0x04
    451a:	1b 81       	ldd	r17, Y+3	; 0x03
    451c:	aa 81       	ldd	r26, Y+2	; 0x02
    451e:	b9 81       	ldd	r27, Y+1	; 0x01
    4520:	ce 0f       	add	r28, r30
    4522:	d1 1d       	adc	r29, r1
    4524:	cd bf       	out	0x3d, r28	; 61
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	ed 01       	movw	r28, r26
    452a:	08 95       	ret

0000452c <__udivmodhi4>:
    452c:	aa 1b       	sub	r26, r26
    452e:	bb 1b       	sub	r27, r27
    4530:	51 e1       	ldi	r21, 0x11	; 17
    4532:	07 c0       	rjmp	.+14     	; 0x4542 <__udivmodhi4_ep>

00004534 <__udivmodhi4_loop>:
    4534:	aa 1f       	adc	r26, r26
    4536:	bb 1f       	adc	r27, r27
    4538:	a6 17       	cp	r26, r22
    453a:	b7 07       	cpc	r27, r23
    453c:	10 f0       	brcs	.+4      	; 0x4542 <__udivmodhi4_ep>
    453e:	a6 1b       	sub	r26, r22
    4540:	b7 0b       	sbc	r27, r23

00004542 <__udivmodhi4_ep>:
    4542:	88 1f       	adc	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	5a 95       	dec	r21
    4548:	a9 f7       	brne	.-22     	; 0x4534 <__udivmodhi4_loop>
    454a:	80 95       	com	r24
    454c:	90 95       	com	r25
    454e:	bc 01       	movw	r22, r24
    4550:	cd 01       	movw	r24, r26
    4552:	08 95       	ret

00004554 <__udivmodsi4>:
    4554:	a1 e2       	ldi	r26, 0x21	; 33
    4556:	1a 2e       	mov	r1, r26
    4558:	aa 1b       	sub	r26, r26
    455a:	bb 1b       	sub	r27, r27
    455c:	fd 01       	movw	r30, r26
    455e:	0d c0       	rjmp	.+26     	; 0x457a <__udivmodsi4_ep>

00004560 <__udivmodsi4_loop>:
    4560:	aa 1f       	adc	r26, r26
    4562:	bb 1f       	adc	r27, r27
    4564:	ee 1f       	adc	r30, r30
    4566:	ff 1f       	adc	r31, r31
    4568:	a2 17       	cp	r26, r18
    456a:	b3 07       	cpc	r27, r19
    456c:	e4 07       	cpc	r30, r20
    456e:	f5 07       	cpc	r31, r21
    4570:	20 f0       	brcs	.+8      	; 0x457a <__udivmodsi4_ep>
    4572:	a2 1b       	sub	r26, r18
    4574:	b3 0b       	sbc	r27, r19
    4576:	e4 0b       	sbc	r30, r20
    4578:	f5 0b       	sbc	r31, r21

0000457a <__udivmodsi4_ep>:
    457a:	66 1f       	adc	r22, r22
    457c:	77 1f       	adc	r23, r23
    457e:	88 1f       	adc	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	1a 94       	dec	r1
    4584:	69 f7       	brne	.-38     	; 0x4560 <__udivmodsi4_loop>
    4586:	60 95       	com	r22
    4588:	70 95       	com	r23
    458a:	80 95       	com	r24
    458c:	90 95       	com	r25
    458e:	9b 01       	movw	r18, r22
    4590:	ac 01       	movw	r20, r24
    4592:	bd 01       	movw	r22, r26
    4594:	cf 01       	movw	r24, r30
    4596:	08 95       	ret

00004598 <__umulhisi3>:
    4598:	a2 9f       	mul	r26, r18
    459a:	b0 01       	movw	r22, r0
    459c:	b3 9f       	mul	r27, r19
    459e:	c0 01       	movw	r24, r0
    45a0:	a3 9f       	mul	r26, r19
    45a2:	70 0d       	add	r23, r0
    45a4:	81 1d       	adc	r24, r1
    45a6:	11 24       	eor	r1, r1
    45a8:	91 1d       	adc	r25, r1
    45aa:	b2 9f       	mul	r27, r18
    45ac:	70 0d       	add	r23, r0
    45ae:	81 1d       	adc	r24, r1
    45b0:	11 24       	eor	r1, r1
    45b2:	91 1d       	adc	r25, r1
    45b4:	08 95       	ret

000045b6 <atol>:
    45b6:	1f 93       	push	r17
    45b8:	fc 01       	movw	r30, r24
    45ba:	99 27       	eor	r25, r25
    45bc:	88 27       	eor	r24, r24
    45be:	bc 01       	movw	r22, r24
    45c0:	e8 94       	clt
    45c2:	11 91       	ld	r17, Z+
    45c4:	10 32       	cpi	r17, 0x20	; 32
    45c6:	e9 f3       	breq	.-6      	; 0x45c2 <atol+0xc>
    45c8:	19 30       	cpi	r17, 0x09	; 9
    45ca:	10 f0       	brcs	.+4      	; 0x45d0 <atol+0x1a>
    45cc:	1e 30       	cpi	r17, 0x0E	; 14
    45ce:	c8 f3       	brcs	.-14     	; 0x45c2 <atol+0xc>
    45d0:	1b 32       	cpi	r17, 0x2B	; 43
    45d2:	51 f0       	breq	.+20     	; 0x45e8 <atol+0x32>
    45d4:	1d 32       	cpi	r17, 0x2D	; 45
    45d6:	49 f4       	brne	.+18     	; 0x45ea <atol+0x34>
    45d8:	68 94       	set
    45da:	06 c0       	rjmp	.+12     	; 0x45e8 <atol+0x32>
    45dc:	0e 94 02 24 	call	0x4804	; 0x4804 <__mulsi_const_10>
    45e0:	61 0f       	add	r22, r17
    45e2:	71 1d       	adc	r23, r1
    45e4:	81 1d       	adc	r24, r1
    45e6:	91 1d       	adc	r25, r1
    45e8:	11 91       	ld	r17, Z+
    45ea:	10 53       	subi	r17, 0x30	; 48
    45ec:	1a 30       	cpi	r17, 0x0A	; 10
    45ee:	b0 f3       	brcs	.-20     	; 0x45dc <atol+0x26>
    45f0:	3e f4       	brtc	.+14     	; 0x4600 <atol+0x4a>
    45f2:	90 95       	com	r25
    45f4:	80 95       	com	r24
    45f6:	70 95       	com	r23
    45f8:	61 95       	neg	r22
    45fa:	7f 4f       	sbci	r23, 0xFF	; 255
    45fc:	8f 4f       	sbci	r24, 0xFF	; 255
    45fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4600:	1f 91       	pop	r17
    4602:	08 95       	ret

00004604 <__ftoa_engine>:
    4604:	28 30       	cpi	r18, 0x08	; 8
    4606:	08 f0       	brcs	.+2      	; 0x460a <__ftoa_engine+0x6>
    4608:	27 e0       	ldi	r18, 0x07	; 7
    460a:	33 27       	eor	r19, r19
    460c:	da 01       	movw	r26, r20
    460e:	99 0f       	add	r25, r25
    4610:	31 1d       	adc	r19, r1
    4612:	87 fd       	sbrc	r24, 7
    4614:	91 60       	ori	r25, 0x01	; 1
    4616:	00 96       	adiw	r24, 0x00	; 0
    4618:	61 05       	cpc	r22, r1
    461a:	71 05       	cpc	r23, r1
    461c:	39 f4       	brne	.+14     	; 0x462c <__ftoa_engine+0x28>
    461e:	32 60       	ori	r19, 0x02	; 2
    4620:	2e 5f       	subi	r18, 0xFE	; 254
    4622:	3d 93       	st	X+, r19
    4624:	30 e3       	ldi	r19, 0x30	; 48
    4626:	2a 95       	dec	r18
    4628:	e1 f7       	brne	.-8      	; 0x4622 <__ftoa_engine+0x1e>
    462a:	08 95       	ret
    462c:	9f 3f       	cpi	r25, 0xFF	; 255
    462e:	30 f0       	brcs	.+12     	; 0x463c <__ftoa_engine+0x38>
    4630:	80 38       	cpi	r24, 0x80	; 128
    4632:	71 05       	cpc	r23, r1
    4634:	61 05       	cpc	r22, r1
    4636:	09 f0       	breq	.+2      	; 0x463a <__ftoa_engine+0x36>
    4638:	3c 5f       	subi	r19, 0xFC	; 252
    463a:	3c 5f       	subi	r19, 0xFC	; 252
    463c:	3d 93       	st	X+, r19
    463e:	91 30       	cpi	r25, 0x01	; 1
    4640:	08 f0       	brcs	.+2      	; 0x4644 <__ftoa_engine+0x40>
    4642:	80 68       	ori	r24, 0x80	; 128
    4644:	91 1d       	adc	r25, r1
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	1f 93       	push	r17
    464c:	0f 93       	push	r16
    464e:	ff 92       	push	r15
    4650:	ef 92       	push	r14
    4652:	19 2f       	mov	r17, r25
    4654:	98 7f       	andi	r25, 0xF8	; 248
    4656:	96 95       	lsr	r25
    4658:	e9 2f       	mov	r30, r25
    465a:	96 95       	lsr	r25
    465c:	96 95       	lsr	r25
    465e:	e9 0f       	add	r30, r25
    4660:	ff 27       	eor	r31, r31
    4662:	ea 53       	subi	r30, 0x3A	; 58
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	99 27       	eor	r25, r25
    4668:	33 27       	eor	r19, r19
    466a:	ee 24       	eor	r14, r14
    466c:	ff 24       	eor	r15, r15
    466e:	a7 01       	movw	r20, r14
    4670:	e7 01       	movw	r28, r14
    4672:	05 90       	lpm	r0, Z+
    4674:	08 94       	sec
    4676:	07 94       	ror	r0
    4678:	28 f4       	brcc	.+10     	; 0x4684 <__ftoa_engine+0x80>
    467a:	36 0f       	add	r19, r22
    467c:	e7 1e       	adc	r14, r23
    467e:	f8 1e       	adc	r15, r24
    4680:	49 1f       	adc	r20, r25
    4682:	51 1d       	adc	r21, r1
    4684:	66 0f       	add	r22, r22
    4686:	77 1f       	adc	r23, r23
    4688:	88 1f       	adc	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	06 94       	lsr	r0
    468e:	a1 f7       	brne	.-24     	; 0x4678 <__ftoa_engine+0x74>
    4690:	05 90       	lpm	r0, Z+
    4692:	07 94       	ror	r0
    4694:	28 f4       	brcc	.+10     	; 0x46a0 <__ftoa_engine+0x9c>
    4696:	e7 0e       	add	r14, r23
    4698:	f8 1e       	adc	r15, r24
    469a:	49 1f       	adc	r20, r25
    469c:	56 1f       	adc	r21, r22
    469e:	c1 1d       	adc	r28, r1
    46a0:	77 0f       	add	r23, r23
    46a2:	88 1f       	adc	r24, r24
    46a4:	99 1f       	adc	r25, r25
    46a6:	66 1f       	adc	r22, r22
    46a8:	06 94       	lsr	r0
    46aa:	a1 f7       	brne	.-24     	; 0x4694 <__ftoa_engine+0x90>
    46ac:	05 90       	lpm	r0, Z+
    46ae:	07 94       	ror	r0
    46b0:	28 f4       	brcc	.+10     	; 0x46bc <__ftoa_engine+0xb8>
    46b2:	f8 0e       	add	r15, r24
    46b4:	49 1f       	adc	r20, r25
    46b6:	56 1f       	adc	r21, r22
    46b8:	c7 1f       	adc	r28, r23
    46ba:	d1 1d       	adc	r29, r1
    46bc:	88 0f       	add	r24, r24
    46be:	99 1f       	adc	r25, r25
    46c0:	66 1f       	adc	r22, r22
    46c2:	77 1f       	adc	r23, r23
    46c4:	06 94       	lsr	r0
    46c6:	a1 f7       	brne	.-24     	; 0x46b0 <__ftoa_engine+0xac>
    46c8:	05 90       	lpm	r0, Z+
    46ca:	07 94       	ror	r0
    46cc:	20 f4       	brcc	.+8      	; 0x46d6 <__ftoa_engine+0xd2>
    46ce:	49 0f       	add	r20, r25
    46d0:	56 1f       	adc	r21, r22
    46d2:	c7 1f       	adc	r28, r23
    46d4:	d8 1f       	adc	r29, r24
    46d6:	99 0f       	add	r25, r25
    46d8:	66 1f       	adc	r22, r22
    46da:	77 1f       	adc	r23, r23
    46dc:	88 1f       	adc	r24, r24
    46de:	06 94       	lsr	r0
    46e0:	a9 f7       	brne	.-22     	; 0x46cc <__ftoa_engine+0xc8>
    46e2:	84 91       	lpm	r24, Z
    46e4:	10 95       	com	r17
    46e6:	17 70       	andi	r17, 0x07	; 7
    46e8:	41 f0       	breq	.+16     	; 0x46fa <__ftoa_engine+0xf6>
    46ea:	d6 95       	lsr	r29
    46ec:	c7 95       	ror	r28
    46ee:	57 95       	ror	r21
    46f0:	47 95       	ror	r20
    46f2:	f7 94       	ror	r15
    46f4:	e7 94       	ror	r14
    46f6:	1a 95       	dec	r17
    46f8:	c1 f7       	brne	.-16     	; 0x46ea <__ftoa_engine+0xe6>
    46fa:	ec e6       	ldi	r30, 0x6C	; 108
    46fc:	f1 e0       	ldi	r31, 0x01	; 1
    46fe:	68 94       	set
    4700:	15 90       	lpm	r1, Z+
    4702:	15 91       	lpm	r17, Z+
    4704:	35 91       	lpm	r19, Z+
    4706:	65 91       	lpm	r22, Z+
    4708:	95 91       	lpm	r25, Z+
    470a:	05 90       	lpm	r0, Z+
    470c:	7f e2       	ldi	r23, 0x2F	; 47
    470e:	73 95       	inc	r23
    4710:	e1 18       	sub	r14, r1
    4712:	f1 0a       	sbc	r15, r17
    4714:	43 0b       	sbc	r20, r19
    4716:	56 0b       	sbc	r21, r22
    4718:	c9 0b       	sbc	r28, r25
    471a:	d0 09       	sbc	r29, r0
    471c:	c0 f7       	brcc	.-16     	; 0x470e <__ftoa_engine+0x10a>
    471e:	e1 0c       	add	r14, r1
    4720:	f1 1e       	adc	r15, r17
    4722:	43 1f       	adc	r20, r19
    4724:	56 1f       	adc	r21, r22
    4726:	c9 1f       	adc	r28, r25
    4728:	d0 1d       	adc	r29, r0
    472a:	7e f4       	brtc	.+30     	; 0x474a <__ftoa_engine+0x146>
    472c:	70 33       	cpi	r23, 0x30	; 48
    472e:	11 f4       	brne	.+4      	; 0x4734 <__ftoa_engine+0x130>
    4730:	8a 95       	dec	r24
    4732:	e6 cf       	rjmp	.-52     	; 0x4700 <__ftoa_engine+0xfc>
    4734:	e8 94       	clt
    4736:	01 50       	subi	r16, 0x01	; 1
    4738:	30 f0       	brcs	.+12     	; 0x4746 <__ftoa_engine+0x142>
    473a:	08 0f       	add	r16, r24
    473c:	0a f4       	brpl	.+2      	; 0x4740 <__ftoa_engine+0x13c>
    473e:	00 27       	eor	r16, r16
    4740:	02 17       	cp	r16, r18
    4742:	08 f4       	brcc	.+2      	; 0x4746 <__ftoa_engine+0x142>
    4744:	20 2f       	mov	r18, r16
    4746:	23 95       	inc	r18
    4748:	02 2f       	mov	r16, r18
    474a:	7a 33       	cpi	r23, 0x3A	; 58
    474c:	28 f0       	brcs	.+10     	; 0x4758 <__ftoa_engine+0x154>
    474e:	79 e3       	ldi	r23, 0x39	; 57
    4750:	7d 93       	st	X+, r23
    4752:	2a 95       	dec	r18
    4754:	e9 f7       	brne	.-6      	; 0x4750 <__ftoa_engine+0x14c>
    4756:	10 c0       	rjmp	.+32     	; 0x4778 <__ftoa_engine+0x174>
    4758:	7d 93       	st	X+, r23
    475a:	2a 95       	dec	r18
    475c:	89 f6       	brne	.-94     	; 0x4700 <__ftoa_engine+0xfc>
    475e:	06 94       	lsr	r0
    4760:	97 95       	ror	r25
    4762:	67 95       	ror	r22
    4764:	37 95       	ror	r19
    4766:	17 95       	ror	r17
    4768:	17 94       	ror	r1
    476a:	e1 18       	sub	r14, r1
    476c:	f1 0a       	sbc	r15, r17
    476e:	43 0b       	sbc	r20, r19
    4770:	56 0b       	sbc	r21, r22
    4772:	c9 0b       	sbc	r28, r25
    4774:	d0 09       	sbc	r29, r0
    4776:	98 f0       	brcs	.+38     	; 0x479e <__ftoa_engine+0x19a>
    4778:	23 95       	inc	r18
    477a:	7e 91       	ld	r23, -X
    477c:	73 95       	inc	r23
    477e:	7a 33       	cpi	r23, 0x3A	; 58
    4780:	08 f0       	brcs	.+2      	; 0x4784 <__ftoa_engine+0x180>
    4782:	70 e3       	ldi	r23, 0x30	; 48
    4784:	7c 93       	st	X, r23
    4786:	20 13       	cpse	r18, r16
    4788:	b8 f7       	brcc	.-18     	; 0x4778 <__ftoa_engine+0x174>
    478a:	7e 91       	ld	r23, -X
    478c:	70 61       	ori	r23, 0x10	; 16
    478e:	7d 93       	st	X+, r23
    4790:	30 f0       	brcs	.+12     	; 0x479e <__ftoa_engine+0x19a>
    4792:	83 95       	inc	r24
    4794:	71 e3       	ldi	r23, 0x31	; 49
    4796:	7d 93       	st	X+, r23
    4798:	70 e3       	ldi	r23, 0x30	; 48
    479a:	2a 95       	dec	r18
    479c:	e1 f7       	brne	.-8      	; 0x4796 <__ftoa_engine+0x192>
    479e:	11 24       	eor	r1, r1
    47a0:	ef 90       	pop	r14
    47a2:	ff 90       	pop	r15
    47a4:	0f 91       	pop	r16
    47a6:	1f 91       	pop	r17
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	99 27       	eor	r25, r25
    47ae:	87 fd       	sbrc	r24, 7
    47b0:	90 95       	com	r25
    47b2:	08 95       	ret

000047b4 <strnlen_P>:
    47b4:	fc 01       	movw	r30, r24
    47b6:	05 90       	lpm	r0, Z+
    47b8:	61 50       	subi	r22, 0x01	; 1
    47ba:	70 40       	sbci	r23, 0x00	; 0
    47bc:	01 10       	cpse	r0, r1
    47be:	d8 f7       	brcc	.-10     	; 0x47b6 <strnlen_P+0x2>
    47c0:	80 95       	com	r24
    47c2:	90 95       	com	r25
    47c4:	8e 0f       	add	r24, r30
    47c6:	9f 1f       	adc	r25, r31
    47c8:	08 95       	ret

000047ca <strcat>:
    47ca:	fb 01       	movw	r30, r22
    47cc:	dc 01       	movw	r26, r24
    47ce:	0d 90       	ld	r0, X+
    47d0:	00 20       	and	r0, r0
    47d2:	e9 f7       	brne	.-6      	; 0x47ce <strcat+0x4>
    47d4:	11 97       	sbiw	r26, 0x01	; 1
    47d6:	01 90       	ld	r0, Z+
    47d8:	0d 92       	st	X+, r0
    47da:	00 20       	and	r0, r0
    47dc:	e1 f7       	brne	.-8      	; 0x47d6 <strcat+0xc>
    47de:	08 95       	ret

000047e0 <strcpy>:
    47e0:	fb 01       	movw	r30, r22
    47e2:	dc 01       	movw	r26, r24
    47e4:	01 90       	ld	r0, Z+
    47e6:	0d 92       	st	X+, r0
    47e8:	00 20       	and	r0, r0
    47ea:	e1 f7       	brne	.-8      	; 0x47e4 <strcpy+0x4>
    47ec:	08 95       	ret

000047ee <strnlen>:
    47ee:	fc 01       	movw	r30, r24
    47f0:	61 50       	subi	r22, 0x01	; 1
    47f2:	70 40       	sbci	r23, 0x00	; 0
    47f4:	01 90       	ld	r0, Z+
    47f6:	01 10       	cpse	r0, r1
    47f8:	d8 f7       	brcc	.-10     	; 0x47f0 <strnlen+0x2>
    47fa:	80 95       	com	r24
    47fc:	90 95       	com	r25
    47fe:	8e 0f       	add	r24, r30
    4800:	9f 1f       	adc	r25, r31
    4802:	08 95       	ret

00004804 <__mulsi_const_10>:
    4804:	59 2f       	mov	r21, r25
    4806:	48 2f       	mov	r20, r24
    4808:	37 2f       	mov	r19, r23
    480a:	26 2f       	mov	r18, r22
    480c:	66 0f       	add	r22, r22
    480e:	77 1f       	adc	r23, r23
    4810:	88 1f       	adc	r24, r24
    4812:	99 1f       	adc	r25, r25
    4814:	66 0f       	add	r22, r22
    4816:	77 1f       	adc	r23, r23
    4818:	88 1f       	adc	r24, r24
    481a:	99 1f       	adc	r25, r25
    481c:	62 0f       	add	r22, r18
    481e:	73 1f       	adc	r23, r19
    4820:	84 1f       	adc	r24, r20
    4822:	95 1f       	adc	r25, r21
    4824:	66 0f       	add	r22, r22
    4826:	77 1f       	adc	r23, r23
    4828:	88 1f       	adc	r24, r24
    482a:	99 1f       	adc	r25, r25
    482c:	08 95       	ret

0000482e <fputc>:
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	fb 01       	movw	r30, r22
    4838:	23 81       	ldd	r18, Z+3	; 0x03
    483a:	21 fd       	sbrc	r18, 1
    483c:	03 c0       	rjmp	.+6      	; 0x4844 <fputc+0x16>
    483e:	8f ef       	ldi	r24, 0xFF	; 255
    4840:	9f ef       	ldi	r25, 0xFF	; 255
    4842:	2c c0       	rjmp	.+88     	; 0x489c <fputc+0x6e>
    4844:	22 ff       	sbrs	r18, 2
    4846:	16 c0       	rjmp	.+44     	; 0x4874 <fputc+0x46>
    4848:	46 81       	ldd	r20, Z+6	; 0x06
    484a:	57 81       	ldd	r21, Z+7	; 0x07
    484c:	24 81       	ldd	r18, Z+4	; 0x04
    484e:	35 81       	ldd	r19, Z+5	; 0x05
    4850:	42 17       	cp	r20, r18
    4852:	53 07       	cpc	r21, r19
    4854:	44 f4       	brge	.+16     	; 0x4866 <fputc+0x38>
    4856:	a0 81       	ld	r26, Z
    4858:	b1 81       	ldd	r27, Z+1	; 0x01
    485a:	9d 01       	movw	r18, r26
    485c:	2f 5f       	subi	r18, 0xFF	; 255
    485e:	3f 4f       	sbci	r19, 0xFF	; 255
    4860:	20 83       	st	Z, r18
    4862:	31 83       	std	Z+1, r19	; 0x01
    4864:	8c 93       	st	X, r24
    4866:	26 81       	ldd	r18, Z+6	; 0x06
    4868:	37 81       	ldd	r19, Z+7	; 0x07
    486a:	2f 5f       	subi	r18, 0xFF	; 255
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	26 83       	std	Z+6, r18	; 0x06
    4870:	37 83       	std	Z+7, r19	; 0x07
    4872:	14 c0       	rjmp	.+40     	; 0x489c <fputc+0x6e>
    4874:	8b 01       	movw	r16, r22
    4876:	ec 01       	movw	r28, r24
    4878:	fb 01       	movw	r30, r22
    487a:	00 84       	ldd	r0, Z+8	; 0x08
    487c:	f1 85       	ldd	r31, Z+9	; 0x09
    487e:	e0 2d       	mov	r30, r0
    4880:	09 95       	icall
    4882:	89 2b       	or	r24, r25
    4884:	e1 f6       	brne	.-72     	; 0x483e <fputc+0x10>
    4886:	d8 01       	movw	r26, r16
    4888:	16 96       	adiw	r26, 0x06	; 6
    488a:	8d 91       	ld	r24, X+
    488c:	9c 91       	ld	r25, X
    488e:	17 97       	sbiw	r26, 0x07	; 7
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	16 96       	adiw	r26, 0x06	; 6
    4894:	8d 93       	st	X+, r24
    4896:	9c 93       	st	X, r25
    4898:	17 97       	sbiw	r26, 0x07	; 7
    489a:	ce 01       	movw	r24, r28
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	08 95       	ret

000048a6 <sprintf>:
    48a6:	ae e0       	ldi	r26, 0x0E	; 14
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	e9 e5       	ldi	r30, 0x59	; 89
    48ac:	f4 e2       	ldi	r31, 0x24	; 36
    48ae:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <__prologue_saves__+0x1c>
    48b2:	0d 89       	ldd	r16, Y+21	; 0x15
    48b4:	1e 89       	ldd	r17, Y+22	; 0x16
    48b6:	86 e0       	ldi	r24, 0x06	; 6
    48b8:	8c 83       	std	Y+4, r24	; 0x04
    48ba:	09 83       	std	Y+1, r16	; 0x01
    48bc:	1a 83       	std	Y+2, r17	; 0x02
    48be:	8f ef       	ldi	r24, 0xFF	; 255
    48c0:	9f e7       	ldi	r25, 0x7F	; 127
    48c2:	8d 83       	std	Y+5, r24	; 0x05
    48c4:	9e 83       	std	Y+6, r25	; 0x06
    48c6:	ae 01       	movw	r20, r28
    48c8:	47 5e       	subi	r20, 0xE7	; 231
    48ca:	5f 4f       	sbci	r21, 0xFF	; 255
    48cc:	6f 89       	ldd	r22, Y+23	; 0x17
    48ce:	78 8d       	ldd	r23, Y+24	; 0x18
    48d0:	ce 01       	movw	r24, r28
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vfprintf>
    48d8:	ef 81       	ldd	r30, Y+7	; 0x07
    48da:	f8 85       	ldd	r31, Y+8	; 0x08
    48dc:	e0 0f       	add	r30, r16
    48de:	f1 1f       	adc	r31, r17
    48e0:	10 82       	st	Z, r1
    48e2:	2e 96       	adiw	r28, 0x0e	; 14
    48e4:	e4 e0       	ldi	r30, 0x04	; 4
    48e6:	0c 94 8c 22 	jmp	0x4518	; 0x4518 <__epilogue_restores__+0x1c>

000048ea <__ultoa_invert>:
    48ea:	fa 01       	movw	r30, r20
    48ec:	aa 27       	eor	r26, r26
    48ee:	28 30       	cpi	r18, 0x08	; 8
    48f0:	51 f1       	breq	.+84     	; 0x4946 <__ultoa_invert+0x5c>
    48f2:	20 31       	cpi	r18, 0x10	; 16
    48f4:	81 f1       	breq	.+96     	; 0x4956 <__ultoa_invert+0x6c>
    48f6:	e8 94       	clt
    48f8:	6f 93       	push	r22
    48fa:	6e 7f       	andi	r22, 0xFE	; 254
    48fc:	6e 5f       	subi	r22, 0xFE	; 254
    48fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4900:	8f 4f       	sbci	r24, 0xFF	; 255
    4902:	9f 4f       	sbci	r25, 0xFF	; 255
    4904:	af 4f       	sbci	r26, 0xFF	; 255
    4906:	b1 e0       	ldi	r27, 0x01	; 1
    4908:	3e d0       	rcall	.+124    	; 0x4986 <__ultoa_invert+0x9c>
    490a:	b4 e0       	ldi	r27, 0x04	; 4
    490c:	3c d0       	rcall	.+120    	; 0x4986 <__ultoa_invert+0x9c>
    490e:	67 0f       	add	r22, r23
    4910:	78 1f       	adc	r23, r24
    4912:	89 1f       	adc	r24, r25
    4914:	9a 1f       	adc	r25, r26
    4916:	a1 1d       	adc	r26, r1
    4918:	68 0f       	add	r22, r24
    491a:	79 1f       	adc	r23, r25
    491c:	8a 1f       	adc	r24, r26
    491e:	91 1d       	adc	r25, r1
    4920:	a1 1d       	adc	r26, r1
    4922:	6a 0f       	add	r22, r26
    4924:	71 1d       	adc	r23, r1
    4926:	81 1d       	adc	r24, r1
    4928:	91 1d       	adc	r25, r1
    492a:	a1 1d       	adc	r26, r1
    492c:	20 d0       	rcall	.+64     	; 0x496e <__ultoa_invert+0x84>
    492e:	09 f4       	brne	.+2      	; 0x4932 <__ultoa_invert+0x48>
    4930:	68 94       	set
    4932:	3f 91       	pop	r19
    4934:	2a e0       	ldi	r18, 0x0A	; 10
    4936:	26 9f       	mul	r18, r22
    4938:	11 24       	eor	r1, r1
    493a:	30 19       	sub	r19, r0
    493c:	30 5d       	subi	r19, 0xD0	; 208
    493e:	31 93       	st	Z+, r19
    4940:	de f6       	brtc	.-74     	; 0x48f8 <__ultoa_invert+0xe>
    4942:	cf 01       	movw	r24, r30
    4944:	08 95       	ret
    4946:	46 2f       	mov	r20, r22
    4948:	47 70       	andi	r20, 0x07	; 7
    494a:	40 5d       	subi	r20, 0xD0	; 208
    494c:	41 93       	st	Z+, r20
    494e:	b3 e0       	ldi	r27, 0x03	; 3
    4950:	0f d0       	rcall	.+30     	; 0x4970 <__ultoa_invert+0x86>
    4952:	c9 f7       	brne	.-14     	; 0x4946 <__ultoa_invert+0x5c>
    4954:	f6 cf       	rjmp	.-20     	; 0x4942 <__ultoa_invert+0x58>
    4956:	46 2f       	mov	r20, r22
    4958:	4f 70       	andi	r20, 0x0F	; 15
    495a:	40 5d       	subi	r20, 0xD0	; 208
    495c:	4a 33       	cpi	r20, 0x3A	; 58
    495e:	18 f0       	brcs	.+6      	; 0x4966 <__ultoa_invert+0x7c>
    4960:	49 5d       	subi	r20, 0xD9	; 217
    4962:	31 fd       	sbrc	r19, 1
    4964:	40 52       	subi	r20, 0x20	; 32
    4966:	41 93       	st	Z+, r20
    4968:	02 d0       	rcall	.+4      	; 0x496e <__ultoa_invert+0x84>
    496a:	a9 f7       	brne	.-22     	; 0x4956 <__ultoa_invert+0x6c>
    496c:	ea cf       	rjmp	.-44     	; 0x4942 <__ultoa_invert+0x58>
    496e:	b4 e0       	ldi	r27, 0x04	; 4
    4970:	a6 95       	lsr	r26
    4972:	97 95       	ror	r25
    4974:	87 95       	ror	r24
    4976:	77 95       	ror	r23
    4978:	67 95       	ror	r22
    497a:	ba 95       	dec	r27
    497c:	c9 f7       	brne	.-14     	; 0x4970 <__ultoa_invert+0x86>
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	61 05       	cpc	r22, r1
    4982:	71 05       	cpc	r23, r1
    4984:	08 95       	ret
    4986:	9b 01       	movw	r18, r22
    4988:	ac 01       	movw	r20, r24
    498a:	0a 2e       	mov	r0, r26
    498c:	06 94       	lsr	r0
    498e:	57 95       	ror	r21
    4990:	47 95       	ror	r20
    4992:	37 95       	ror	r19
    4994:	27 95       	ror	r18
    4996:	ba 95       	dec	r27
    4998:	c9 f7       	brne	.-14     	; 0x498c <__ultoa_invert+0xa2>
    499a:	62 0f       	add	r22, r18
    499c:	73 1f       	adc	r23, r19
    499e:	84 1f       	adc	r24, r20
    49a0:	95 1f       	adc	r25, r21
    49a2:	a0 1d       	adc	r26, r0
    49a4:	08 95       	ret

000049a6 <eeprom_read_block>:
    49a6:	60 50       	subi	r22, 0x00	; 0
    49a8:	7c 4e       	sbci	r23, 0xEC	; 236
    49aa:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <memcpy>

000049ae <eeprom_update_block>:
    49ae:	dc 01       	movw	r26, r24
    49b0:	a4 0f       	add	r26, r20
    49b2:	b5 1f       	adc	r27, r21
    49b4:	41 50       	subi	r20, 0x01	; 1
    49b6:	50 40       	sbci	r21, 0x00	; 0
    49b8:	48 f0       	brcs	.+18     	; 0x49cc <eeprom_update_block+0x1e>
    49ba:	cb 01       	movw	r24, r22
    49bc:	84 0f       	add	r24, r20
    49be:	95 1f       	adc	r25, r21
    49c0:	2e 91       	ld	r18, -X
    49c2:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <eeprom_update_r18>
    49c6:	41 50       	subi	r20, 0x01	; 1
    49c8:	50 40       	sbci	r21, 0x00	; 0
    49ca:	d0 f7       	brcc	.-12     	; 0x49c0 <eeprom_update_block+0x12>
    49cc:	08 95       	ret

000049ce <eeprom_update_byte>:
    49ce:	26 2f       	mov	r18, r22

000049d0 <eeprom_update_r18>:
    49d0:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <eeprom_mapen>
    49d4:	00 80       	ld	r0, Z
    49d6:	02 16       	cp	r0, r18
    49d8:	19 f0       	breq	.+6      	; 0x49e0 <eeprom_update_r18+0x10>
    49da:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <eeprom_write_r18>
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	08 95       	ret

000049e4 <eeprom_write_byte>:
    49e4:	26 2f       	mov	r18, r22

000049e6 <eeprom_write_r18>:
    49e6:	af 93       	push	r26
    49e8:	bf 93       	push	r27
    49ea:	e0 e0       	ldi	r30, 0x00	; 0
    49ec:	f0 e1       	ldi	r31, 0x10	; 16
    49ee:	32 81       	ldd	r19, Z+2	; 0x02
    49f0:	31 fd       	sbrc	r19, 1
    49f2:	fd cf       	rjmp	.-6      	; 0x49ee <eeprom_write_r18+0x8>
    49f4:	dc 01       	movw	r26, r24
    49f6:	a0 50       	subi	r26, 0x00	; 0
    49f8:	bc 4e       	sbci	r27, 0xEC	; 236
    49fa:	2c 93       	st	X, r18
    49fc:	2d e9       	ldi	r18, 0x9D	; 157
    49fe:	24 bf       	out	0x34, r18	; 52
    4a00:	23 e0       	ldi	r18, 0x03	; 3
    4a02:	20 83       	st	Z, r18
    4a04:	01 96       	adiw	r24, 0x01	; 1
    4a06:	bf 91       	pop	r27
    4a08:	af 91       	pop	r26
    4a0a:	08 95       	ret

00004a0c <eeprom_read_byte>:
    4a0c:	03 d0       	rcall	.+6      	; 0x4a14 <eeprom_mapen>
    4a0e:	80 81       	ld	r24, Z
    4a10:	99 27       	eor	r25, r25
    4a12:	08 95       	ret

00004a14 <eeprom_mapen>:
    4a14:	fc 01       	movw	r30, r24
    4a16:	e0 50       	subi	r30, 0x00	; 0
    4a18:	fc 4e       	sbci	r31, 0xEC	; 236
    4a1a:	08 95       	ret

00004a1c <memcpy>:
    4a1c:	fb 01       	movw	r30, r22
    4a1e:	dc 01       	movw	r26, r24
    4a20:	02 c0       	rjmp	.+4      	; 0x4a26 <memcpy+0xa>
    4a22:	01 90       	ld	r0, Z+
    4a24:	0d 92       	st	X+, r0
    4a26:	41 50       	subi	r20, 0x01	; 1
    4a28:	50 40       	sbci	r21, 0x00	; 0
    4a2a:	d8 f7       	brcc	.-10     	; 0x4a22 <memcpy+0x6>
    4a2c:	08 95       	ret

00004a2e <_exit>:
    4a2e:	f8 94       	cli

00004a30 <__stop_program>:
    4a30:	ff cf       	rjmp	.-2      	; 0x4a30 <__stop_program>
