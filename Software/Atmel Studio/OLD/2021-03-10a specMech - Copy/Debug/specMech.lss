
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004b16  00004bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004766  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  00008766  00004766  0000481a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082f  00802804  00802804  00004bce  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004bce  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c2c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00004c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4cd  00000000  00000000  000052d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004781  00000000  00000000  0000f79d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000461d  00000000  00000000  00013f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ed0  00000000  00000000  0001853c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022d3  00000000  00000000  0001940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004091  00000000  00000000  0001b6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0001f770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__vector_17>
      48:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__vector_26>
      6c:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__vector_37>
      98:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	a0 04       	cpc	r10, r0
      a2:	ae 04       	cpc	r10, r14
      a4:	ae 04       	cpc	r10, r14
      a6:	ae 04       	cpc	r10, r14
      a8:	ae 04       	cpc	r10, r14
      aa:	ae 04       	cpc	r10, r14
      ac:	ae 04       	cpc	r10, r14
      ae:	ae 04       	cpc	r10, r14
      b0:	ae 04       	cpc	r10, r14
      b2:	ae 04       	cpc	r10, r14
      b4:	ae 04       	cpc	r10, r14
      b6:	ae 04       	cpc	r10, r14
      b8:	ae 04       	cpc	r10, r14
      ba:	ae 04       	cpc	r10, r14
      bc:	ae 04       	cpc	r10, r14
      be:	ae 04       	cpc	r10, r14
      c0:	ae 04       	cpc	r10, r14
      c2:	86 04       	cpc	r8, r6
      c4:	ae 04       	cpc	r10, r14
      c6:	ae 04       	cpc	r10, r14
      c8:	ae 04       	cpc	r10, r14
      ca:	ae 04       	cpc	r10, r14
      cc:	ae 04       	cpc	r10, r14
      ce:	ae 04       	cpc	r10, r14
      d0:	ae 04       	cpc	r10, r14
      d2:	ae 04       	cpc	r10, r14
      d4:	ae 04       	cpc	r10, r14
      d6:	90 04       	cpc	r9, r0
      d8:	ae 04       	cpc	r10, r14
      da:	8b 04       	cpc	r8, r11
      dc:	ae 04       	cpc	r10, r14
      de:	ae 04       	cpc	r10, r14
      e0:	94 04       	cpc	r9, r4
      e2:	98 04       	cpc	r9, r8
      e4:	9c 04       	cpc	r9, r12
      e6:	a2 0e       	add	r10, r18
      e8:	a2 0e       	add	r10, r18
      ea:	a2 0e       	add	r10, r18
      ec:	07 14       	cp	r0, r7
      ee:	07 14       	cp	r0, r7
      f0:	07 14       	cp	r0, r7
      f2:	07 14       	cp	r0, r7
      f4:	07 14       	cp	r0, r7
      f6:	07 14       	cp	r0, r7
      f8:	07 14       	cp	r0, r7
      fa:	07 14       	cp	r0, r7
      fc:	07 14       	cp	r0, r7
      fe:	07 14       	cp	r0, r7
     100:	07 14       	cp	r0, r7
     102:	07 14       	cp	r0, r7
     104:	07 14       	cp	r0, r7
     106:	07 14       	cp	r0, r7
     108:	07 14       	cp	r0, r7
     10a:	07 14       	cp	r0, r7
     10c:	07 14       	cp	r0, r7
     10e:	07 14       	cp	r0, r7
     110:	b5 13       	cpse	r27, r21
     112:	07 14       	cp	r0, r7
     114:	07 14       	cp	r0, r7
     116:	07 14       	cp	r0, r7
     118:	07 14       	cp	r0, r7
     11a:	07 14       	cp	r0, r7
     11c:	07 14       	cp	r0, r7
     11e:	07 14       	cp	r0, r7
     120:	07 14       	cp	r0, r7
     122:	07 14       	cp	r0, r7
     124:	07 14       	cp	r0, r7
     126:	48 0f       	add	r20, r24
     128:	48 0f       	add	r20, r24
     12a:	48 0f       	add	r20, r24
     12c:	07 14       	cp	r0, r7
     12e:	1c 10       	cpse	r1, r12
     130:	07 14       	cp	r0, r7
     132:	07 14       	cp	r0, r7
     134:	07 14       	cp	r0, r7
     136:	07 14       	cp	r0, r7
     138:	07 14       	cp	r0, r7
     13a:	07 14       	cp	r0, r7
     13c:	07 14       	cp	r0, r7
     13e:	07 14       	cp	r0, r7
     140:	07 14       	cp	r0, r7
     142:	5c 11       	cpse	r21, r12
     144:	4a 12       	cpse	r4, r26
     146:	07 14       	cp	r0, r7
     148:	07 14       	cp	r0, r7
     14a:	07 14       	cp	r0, r7
     14c:	e8 12       	cpse	r14, r24
     14e:	07 14       	cp	r0, r7
     150:	47 13       	cpse	r20, r23

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	e6 e1       	ldi	r30, 0x16	; 22
     268:	fb e4       	ldi	r31, 0x4B	; 75
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a3 33       	cpi	r26, 0x33	; 51
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 3f 08 	call	0x107e	; 0x107e <main>
     28a:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <read_AD590+0x40>
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <read_AD590+0x16>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	61 f0       	breq	.+24     	; 0x2be <read_AD590+0x2c>
     2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f3 e3       	ldi	r31, 0x33	; 51
     2ac:	cf 2e       	mov	r12, r31
     2ae:	dc 2c       	mov	r13, r12
     2b0:	f3 ef       	ldi	r31, 0xF3	; 243
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f0 e4       	ldi	r31, 0x40	; 64
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ba:	c1 e0       	ldi	r28, 0x01	; 1
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c4:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c6:	09 c0       	rjmp	.+18     	; 0x2da <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d2:	c1 2c       	mov	r12, r1
     2d4:	d1 2c       	mov	r13, r1
     2d6:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d8:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	87 e2       	ldi	r24, 0x27	; 39
     2e0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e4:	4c 2f       	mov	r20, r28
     2e6:	40 95       	com	r20
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2f0:	4c 2f       	mov	r20, r28
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	87 e2       	ldi	r24, 0x27	; 39
     2f6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	86 e1       	ldi	r24, 0x16	; 22
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <read_AD590+0x6a>
     300:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     302:	20 e8       	ldi	r18, 0x80	; 128
     304:	40 e7       	ldi	r20, 0x70	; 112
     306:	68 e0       	ldi	r22, 0x08	; 8
     308:	88 e4       	ldi	r24, 0x48	; 72
     30a:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
     31a:	23 e3       	ldi	r18, 0x33	; 51
     31c:	33 e9       	ldi	r19, 0x93	; 147
     31e:	48 e8       	ldi	r20, 0x88	; 136
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 36 1b 	call	0x366c	; 0x366c <__subsf3>
     326:	9b 01       	movw	r18, r22
     328:	ac 01       	movw	r20, r24
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	0e 94 37 1b 	call	0x366e	; 0x366e <__addsf3>
	return(temperature);

}
     332:	cf 91       	pop	r28
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	d8 2f       	mov	r29, r24
     350:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     352:	46 2b       	or	r20, r22
     354:	c4 2f       	mov	r28, r20
     356:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     358:	12 2f       	mov	r17, r18
     35a:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     362:	08 2f       	mov	r16, r24
     364:	88 23       	and	r24, r24
     366:	69 f0       	breq	.+26     	; 0x382 <read_ADS1115+0x44>
		stop_TWI();
     368:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     36c:	60 2f       	mov	r22, r16
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
     378:	56 2f       	mov	r21, r22
     37a:	47 2f       	mov	r20, r23
     37c:	38 2f       	mov	r19, r24
     37e:	29 2f       	mov	r18, r25
     380:	d0 c0       	rjmp	.+416    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     388:	08 2f       	mov	r16, r24
     38a:	88 23       	and	r24, r24
     38c:	69 f0       	breq	.+26     	; 0x3a8 <read_ADS1115+0x6a>
		stop_TWI();
     38e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     392:	60 2f       	mov	r22, r16
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
     39e:	56 2f       	mov	r21, r22
     3a0:	47 2f       	mov	r20, r23
     3a2:	38 2f       	mov	r19, r24
     3a4:	29 2f       	mov	r18, r25
     3a6:	bd c0       	rjmp	.+378    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a8:	8c 2f       	mov	r24, r28
     3aa:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     3ae:	c8 2f       	mov	r28, r24
     3b0:	88 23       	and	r24, r24
     3b2:	69 f0       	breq	.+26     	; 0x3ce <read_ADS1115+0x90>
		stop_TWI();
     3b4:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     3b8:	6c 2f       	mov	r22, r28
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
     3c4:	56 2f       	mov	r21, r22
     3c6:	47 2f       	mov	r20, r23
     3c8:	38 2f       	mov	r19, r24
     3ca:	29 2f       	mov	r18, r25
     3cc:	aa c0       	rjmp	.+340    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3ce:	81 2f       	mov	r24, r17
     3d0:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	88 23       	and	r24, r24
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <read_ADS1115+0xb6>
		stop_TWI();
     3da:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     3de:	6c 2f       	mov	r22, r28
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
     3ea:	56 2f       	mov	r21, r22
     3ec:	47 2f       	mov	r20, r23
     3ee:	38 2f       	mov	r19, r24
     3f0:	29 2f       	mov	r18, r25
     3f2:	97 c0       	rjmp	.+302    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	stop_TWI();
     3f4:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
     3f8:	8c e1       	ldi	r24, 0x1C	; 28
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fe:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		start_TWI(addr, TWIREAD);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     40a:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			converting = NO;
     412:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     414:	c1 11       	cpse	r28, r1
     416:	f5 cf       	rjmp	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     418:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	8d 2f       	mov	r24, r29
     420:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	highbyte = read_TWI();
     432:	0e 94 99 18 	call	0x3132	; 0x3132 <read_TWI>
     436:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     438:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
     43c:	d8 2f       	mov	r29, r24
	stop_TWI();
     43e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	value = highbyte;
     442:	6c 2f       	mov	r22, r28
     444:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     446:	76 2f       	mov	r23, r22
     448:	66 27       	eor	r22, r22
	value |= lowbyte;
     44a:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	f8 16       	cp	r15, r24
     450:	49 f1       	breq	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     452:	8f 15       	cp	r24, r15
     454:	30 f0       	brcs	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	ff 20       	and	r15, r15
     458:	d9 f1       	breq	.+118    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	f8 16       	cp	r15, r24
     45e:	69 f1       	breq	.+90     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     460:	42 c0       	rjmp	.+132    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	f8 16       	cp	r15, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	42 c0       	rjmp	.+132    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	f8 16       	cp	r15, r24
     46e:	21 f0       	breq	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	f8 12       	cpse	r15, r24
     474:	38 c0       	rjmp	.+112    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		case PGA0256:
			scale = SCA0256;
     478:	0f 2e       	mov	r0, r31
     47a:	f4 e7       	ldi	r31, 0x74	; 116
     47c:	cf 2e       	mov	r12, r31
     47e:	f3 e1       	ldi	r31, 0x13	; 19
     480:	df 2e       	mov	r13, r31
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	ef 2e       	mov	r14, r31
     486:	f7 e3       	ldi	r31, 0x37	; 55
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	3a c0       	rjmp	.+116    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48e:	0f 2e       	mov	r0, r31
     490:	f4 e7       	ldi	r31, 0x74	; 116
     492:	cf 2e       	mov	r12, r31
     494:	f3 e1       	ldi	r31, 0x13	; 19
     496:	df 2e       	mov	r13, r31
     498:	f3 e0       	ldi	r31, 0x03	; 3
     49a:	ef 2e       	mov	r14, r31
     49c:	f8 e3       	ldi	r31, 0x38	; 56
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
			break;
     4a2:	2f c0       	rjmp	.+94     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA2048:
			scale = SCA2048;
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f2 e1       	ldi	r31, 0x12	; 18
     4a8:	cf 2e       	mov	r12, r31
     4aa:	f3 e1       	ldi	r31, 0x13	; 19
     4ac:	df 2e       	mov	r13, r31
     4ae:	f3 e8       	ldi	r31, 0x83	; 131
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f8 e3       	ldi	r31, 0x38	; 56
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
			break;
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA4096:
			scale = SCA4096;
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f4 e7       	ldi	r31, 0x74	; 116
     4be:	cf 2e       	mov	r12, r31
     4c0:	f3 e1       	ldi	r31, 0x13	; 19
     4c2:	df 2e       	mov	r13, r31
     4c4:	f3 e0       	ldi	r31, 0x03	; 3
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f9 e3       	ldi	r31, 0x39	; 57
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
			break;
     4ce:	19 c0       	rjmp	.+50     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA6144:
			scale = SCA6144;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe e2       	ldi	r31, 0x2E	; 46
     4d4:	cf 2e       	mov	r12, r31
     4d6:	fd e9       	ldi	r31, 0x9D	; 157
     4d8:	df 2e       	mov	r13, r31
     4da:	f4 e4       	ldi	r31, 0x44	; 68
     4dc:	ef 2e       	mov	r14, r31
     4de:	f9 e3       	ldi	r31, 0x39	; 57
     4e0:	ff 2e       	mov	r15, r31
     4e2:	f0 2d       	mov	r31, r0
			break;
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		default:
			scale = 0.0;
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	76 01       	movw	r14, r12
			break;
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f1 e7       	ldi	r31, 0x71	; 113
     4f2:	cf 2e       	mov	r12, r31
     4f4:	f3 e1       	ldi	r31, 0x13	; 19
     4f6:	df 2e       	mov	r13, r31
     4f8:	f3 e8       	ldi	r31, 0x83	; 131
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f7 e3       	ldi	r31, 0x37	; 55
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__floatsisf>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
	return(voltage);
     51a:	56 2f       	mov	r21, r22
     51c:	47 2f       	mov	r20, r23
     51e:	38 2f       	mov	r19, r24
     520:	29 2f       	mov	r18, r25

}
     522:	65 2f       	mov	r22, r21
     524:	74 2f       	mov	r23, r20
     526:	83 2f       	mov	r24, r19
     528:	92 2f       	mov	r25, r18
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53c:	e0 e2       	ldi	r30, 0x20	; 32
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     544:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     546:	86 83       	std	Z+6, r24	; 0x06
     548:	08 95       	ret

0000054a <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	cb 52       	subi	r28, 0x2B	; 43
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	18 2f       	mov	r17, r24
     560:	09 2f       	mov	r16, r25
     562:	8e e0       	ldi	r24, 0x0E	; 14
     564:	e6 e6       	ldi	r30, 0x66	; 102
     566:	f7 e8       	ldi	r31, 0x87	; 135
     568:	de 01       	movw	r26, r28
     56a:	11 96       	adiw	r26, 0x01	; 1
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <echo_cmd+0x22>
     574:	ce 01       	movw	r24, r28
     576:	0f 96       	adiw	r24, 0x0f	; 15
     578:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
     57c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     580:	82 ff       	sbrs	r24, 2
     582:	03 c0       	rjmp	.+6      	; 0x58a <echo_cmd+0x40>
     584:	22 e0       	ldi	r18, 0x02	; 2
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <echo_cmd+0x44>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	ce 01       	movw	r24, r28
     594:	0f 96       	adiw	r24, 0x0f	; 15
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	3f 93       	push	r19
     59c:	2f 93       	push	r18
     59e:	0e 97       	sbiw	r24, 0x0e	; 14
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	8e 01       	movw	r16, r28
     5a6:	0d 5d       	subi	r16, 0xDD	; 221
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	1f 93       	push	r17
     5ac:	0f 93       	push	r16
     5ae:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
     5b2:	c8 01       	movw	r24, r16
     5b4:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
     5b8:	f8 01       	movw	r30, r16
     5ba:	01 90       	ld	r0, Z+
     5bc:	00 20       	and	r0, r0
     5be:	e9 f7       	brne	.-6      	; 0x5ba <echo_cmd+0x70>
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	af 01       	movw	r20, r30
     5c4:	40 1b       	sub	r20, r16
     5c6:	51 0b       	sbc	r21, r17
     5c8:	b8 01       	movw	r22, r16
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	c5 5d       	subi	r28, 0xD5	; 213
     5d6:	de 4f       	sbci	r29, 0xFE	; 254
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <get_cmdline>:
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	9c 01       	movw	r18, r24
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	1c c0       	rjmp	.+56     	; 0x628 <get_cmdline+0x42>
     5f0:	ca e1       	ldi	r28, 0x1A	; 26
     5f2:	dc e2       	ldi	r29, 0x2C	; 44
     5f4:	e8 81       	ld	r30, Y
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e6 5e       	subi	r30, 0xE6	; 230
     5fa:	f4 4d       	sbci	r31, 0xD4	; 212
     5fc:	80 81       	ld	r24, Z
     5fe:	f9 01       	movw	r30, r18
     600:	e4 0f       	add	r30, r20
     602:	f1 1d       	adc	r31, r1
     604:	80 83       	st	Z, r24
     606:	ac e1       	ldi	r26, 0x1C	; 28
     608:	bc e2       	ldi	r27, 0x2C	; 44
     60a:	8c 91       	ld	r24, X
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	8c 93       	st	X, r24
     610:	88 81       	ld	r24, Y
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	6f ef       	ldi	r22, 0xFF	; 255
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
     61e:	88 83       	st	Y, r24
     620:	80 81       	ld	r24, Z
     622:	88 23       	and	r24, r24
     624:	29 f0       	breq	.+10     	; 0x630 <get_cmdline+0x4a>
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <recv0_buf+0x102>
     62c:	81 11       	cpse	r24, r1
     62e:	e0 cf       	rjmp	.-64     	; 0x5f0 <get_cmdline+0xa>
     630:	f9 01       	movw	r30, r18
     632:	e4 0f       	add	r30, r20
     634:	f1 1d       	adc	r31, r1
     636:	10 82       	st	Z, r1
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     63e:	9f e9       	ldi	r25, 0x9F	; 159
     640:	98 0f       	add	r25, r24
     642:	9a 31       	cpi	r25, 0x1A	; 26
     644:	28 f0       	brcs	.+10     	; 0x650 <isaletter+0x12>
     646:	81 54       	subi	r24, 0x41	; 65
     648:	8a 31       	cpi	r24, 0x1A	; 26
     64a:	20 f4       	brcc	.+8      	; 0x654 <isaletter+0x16>
		return(1);
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 95       	ret
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret
	}
	return(0);
     654:	80 e0       	ldi	r24, 0x00	; 0

}
     656:	08 95       	ret

00000658 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     664:	e6 2e       	mov	r14, r22
     666:	f1 2c       	mov	r15, r1
     668:	84 e3       	ldi	r24, 0x34	; 52
     66a:	8e 9d       	mul	r24, r14
     66c:	f0 01       	movw	r30, r0
     66e:	8f 9d       	mul	r24, r15
     670:	f0 0d       	add	r31, r0
     672:	11 24       	eor	r1, r1
     674:	ea 5f       	subi	r30, 0xFA	; 250
     676:	f7 4d       	sbci	r31, 0xD7	; 215
     678:	8f e3       	ldi	r24, 0x3F	; 63
     67a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     67c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     67e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     680:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     682:	04 c0       	rjmp	.+8      	; 0x68c <parse_cmd+0x34>
		if (*ptr == '\0') {
     684:	11 23       	and	r17, r17
     686:	09 f4       	brne	.+2      	; 0x68a <parse_cmd+0x32>
     688:	75 c0       	rjmp	.+234    	; 0x774 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     68a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     68c:	18 81       	ld	r17, Y
     68e:	81 2f       	mov	r24, r17
     690:	0e 94 1f 03 	call	0x63e	; 0x63e <isaletter>
     694:	88 23       	and	r24, r24
     696:	b1 f3       	breq	.-20     	; 0x684 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	84 e3       	ldi	r24, 0x34	; 52
     69c:	8e 9d       	mul	r24, r14
     69e:	f0 01       	movw	r30, r0
     6a0:	8f 9d       	mul	r24, r15
     6a2:	f0 0d       	add	r31, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	ea 5f       	subi	r30, 0xFA	; 250
     6a8:	f7 4d       	sbci	r31, 0xD7	; 215
     6aa:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     6ae:	11 23       	and	r17, r17
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <parse_cmd+0x5c>
     6b2:	60 c0       	rjmp	.+192    	; 0x774 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6b4:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     6b6:	18 81       	ld	r17, Y
     6b8:	81 2f       	mov	r24, r17
     6ba:	0e 94 1f 03 	call	0x63e	; 0x63e <isaletter>
     6be:	88 23       	and	r24, r24
     6c0:	b1 f3       	breq	.-20     	; 0x6ae <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
     6c4:	84 e3       	ldi	r24, 0x34	; 52
     6c6:	8e 9d       	mul	r24, r14
     6c8:	f0 01       	movw	r30, r0
     6ca:	8f 9d       	mul	r24, r15
     6cc:	f0 0d       	add	r31, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	ea 5f       	subi	r30, 0xFA	; 250
     6d2:	f7 4d       	sbci	r31, 0xD7	; 215
     6d4:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	2a c0       	rjmp	.+84     	; 0x72e <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6da:	98 81       	ld	r25, Y
     6dc:	91 11       	cpse	r25, r1
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6e0:	94 e3       	ldi	r25, 0x34	; 52
     6e2:	9e 9d       	mul	r25, r14
     6e4:	f0 01       	movw	r30, r0
     6e6:	9f 9d       	mul	r25, r15
     6e8:	f0 0d       	add	r31, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	ea 5f       	subi	r30, 0xFA	; 250
     6ee:	f7 4d       	sbci	r31, 0xD7	; 215
     6f0:	e8 0f       	add	r30, r24
     6f2:	f1 1d       	adc	r31, r1
     6f4:	12 82       	std	Z+2, r1	; 0x02
			return;
     6f6:	3e c0       	rjmp	.+124    	; 0x774 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     6f8:	9b 33       	cpi	r25, 0x3B	; 59
     6fa:	61 f4       	brne	.+24     	; 0x714 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6fc:	94 e3       	ldi	r25, 0x34	; 52
     6fe:	9e 9d       	mul	r25, r14
     700:	f0 01       	movw	r30, r0
     702:	9f 9d       	mul	r25, r15
     704:	f0 0d       	add	r31, r0
     706:	11 24       	eor	r1, r1
     708:	ea 5f       	subi	r30, 0xFA	; 250
     70a:	f7 4d       	sbci	r31, 0xD7	; 215
     70c:	e8 0f       	add	r30, r24
     70e:	f1 1d       	adc	r31, r1
     710:	12 82       	std	Z+2, r1	; 0x02
			break;
     712:	0f c0       	rjmp	.+30     	; 0x732 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     714:	21 96       	adiw	r28, 0x01	; 1
     716:	24 e3       	ldi	r18, 0x34	; 52
     718:	2e 9d       	mul	r18, r14
     71a:	f0 01       	movw	r30, r0
     71c:	2f 9d       	mul	r18, r15
     71e:	f0 0d       	add	r31, r0
     720:	11 24       	eor	r1, r1
     722:	ea 5f       	subi	r30, 0xFA	; 250
     724:	f7 4d       	sbci	r31, 0xD7	; 215
     726:	e8 0f       	add	r30, r24
     728:	f1 1d       	adc	r31, r1
     72a:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	89 32       	cpi	r24, 0x29	; 41
     730:	a0 f2       	brcs	.-88     	; 0x6da <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     732:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	1c c0       	rjmp	.+56     	; 0x770 <parse_cmd+0x118>
		if (*ptr == '\0') {
     738:	98 81       	ld	r25, Y
     73a:	91 11       	cpse	r25, r1
     73c:	0c c0       	rjmp	.+24     	; 0x756 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     73e:	94 e3       	ldi	r25, 0x34	; 52
     740:	9e 9d       	mul	r25, r14
     742:	f0 01       	movw	r30, r0
     744:	9f 9d       	mul	r25, r15
     746:	f0 0d       	add	r31, r0
     748:	11 24       	eor	r1, r1
     74a:	ea 5f       	subi	r30, 0xFA	; 250
     74c:	f7 4d       	sbci	r31, 0xD7	; 215
     74e:	e8 0f       	add	r30, r24
     750:	f1 1d       	adc	r31, r1
     752:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     754:	0f c0       	rjmp	.+30     	; 0x774 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     756:	21 96       	adiw	r28, 0x01	; 1
     758:	24 e3       	ldi	r18, 0x34	; 52
     75a:	2e 9d       	mul	r18, r14
     75c:	f0 01       	movw	r30, r0
     75e:	2f 9d       	mul	r18, r15
     760:	f0 0d       	add	r31, r0
     762:	11 24       	eor	r1, r1
     764:	ea 5f       	subi	r30, 0xFA	; 250
     766:	f7 4d       	sbci	r31, 0xD7	; 215
     768:	e8 0f       	add	r30, r24
     76a:	f1 1d       	adc	r31, r1
     76c:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	89 30       	cpi	r24, 0x09	; 9
     772:	10 f3       	brcs	.-60     	; 0x738 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	08 95       	ret

00000780 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	6d 97       	sbiw	r28, 0x1d	; 29
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     792:	2e e3       	ldi	r18, 0x3E	; 62
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	29 83       	std	Y+1, r18	; 0x01
     798:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     79a:	21 e2       	ldi	r18, 0x21	; 33
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	2b 83       	std	Y+3, r18	; 0x03
     7a0:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     7a2:	88 23       	and	r24, r24
     7a4:	19 f0       	breq	.+6      	; 0x7ac <send_prompt+0x2c>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	b9 f0       	breq	.+46     	; 0x7d8 <send_prompt+0x58>
     7aa:	2c c0       	rjmp	.+88     	; 0x804 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     7ac:	8e 01       	movw	r16, r28
     7ae:	0b 5f       	subi	r16, 0xFB	; 251
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 8a 22 	call	0x4514	; 0x4514 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7be:	f8 01       	movw	r30, r16
     7c0:	01 90       	ld	r0, Z+
     7c2:	00 20       	and	r0, r0
     7c4:	e9 f7       	brne	.-6      	; 0x7c0 <send_prompt+0x40>
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	af 01       	movw	r20, r30
     7ca:	40 1b       	sub	r20, r16
     7cc:	51 0b       	sbc	r21, r17
     7ce:	b8 01       	movw	r22, r16
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			break;
     7d6:	2b c0       	rjmp	.+86     	; 0x82e <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     7d8:	8e 01       	movw	r16, r28
     7da:	0b 5f       	subi	r16, 0xFB	; 251
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	be 01       	movw	r22, r28
     7e0:	6d 5f       	subi	r22, 0xFD	; 253
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 8a 22 	call	0x4514	; 0x4514 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ea:	f8 01       	movw	r30, r16
     7ec:	01 90       	ld	r0, Z+
     7ee:	00 20       	and	r0, r0
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <send_prompt+0x6c>
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	af 01       	movw	r20, r30
     7f6:	40 1b       	sub	r20, r16
     7f8:	51 0b       	sbc	r21, r17
     7fa:	b8 01       	movw	r22, r16
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			break;
     802:	15 c0       	rjmp	.+42     	; 0x82e <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     804:	8e 01       	movw	r16, r28
     806:	0b 5f       	subi	r16, 0xFB	; 251
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	be 01       	movw	r22, r28
     80c:	6d 5f       	subi	r22, 0xFD	; 253
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	0e 94 8a 22 	call	0x4514	; 0x4514 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     816:	f8 01       	movw	r30, r16
     818:	01 90       	ld	r0, Z+
     81a:	00 20       	and	r0, r0
     81c:	e9 f7       	brne	.-6      	; 0x818 <send_prompt+0x98>
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	af 01       	movw	r20, r30
     822:	40 1b       	sub	r20, r16
     824:	51 0b       	sbc	r21, r17
     826:	b8 01       	movw	r22, r16
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			break;

	}

}
     82e:	6d 96       	adiw	r28, 0x1d	; 29
     830:	cd bf       	out	0x3d, r28	; 61
     832:	de bf       	out	0x3e, r29	; 62
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <rebootACKd>:
uint8_t rebootACKd(char *cmdline)
{

	static uint8_t rebootnack = 1;

	if (rebootnack) {
     83e:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     842:	22 23       	and	r18, r18
     844:	19 f1       	breq	.+70     	; 0x88c <rebootACKd+0x4e>
     846:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     848:	80 81       	ld	r24, Z
     84a:	81 32       	cpi	r24, 0x21	; 33
     84c:	89 f4       	brne	.+34     	; 0x870 <rebootACKd+0x32>
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	91 11       	cpse	r25, r1
     852:	0e c0       	rjmp	.+28     	; 0x870 <rebootACKd+0x32>
			init_RTC(511);		// 1-sec RTC clock ticks
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timeoutOLED>
     864:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timeoutOLED+0x1>
//			send_prompt(GREATERPROMPT);
			rebootnack = 0;
     868:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return(YES);
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	08 95       	ret
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     870:	81 32       	cpi	r24, 0x21	; 33
     872:	39 f4       	brne	.+14     	; 0x882 <rebootACKd+0x44>
     874:	81 81       	ldd	r24, Z+1	; 0x01
     876:	88 23       	and	r24, r24
     878:	21 f0       	breq	.+8      	; 0x882 <rebootACKd+0x44>
//			send_prompt(EXCLAIMPROMPT);
			reboot();
     87a:	0e 94 20 1b 	call	0x3640	; 0x3640 <reboot>
			return(NO);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
		} else {
			send_prompt(EXCLAIMPROMPT);
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
			return(NO);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	08 95       	ret
		}
	}

	return(YES);
     88c:	81 e0       	ldi	r24, 0x01	; 1

}
     88e:	08 95       	ret

00000890 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	cf 5f       	subi	r28, 0xFF	; 255
     89a:	d1 09       	sbc	r29, r1
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	de bf       	out	0x3e, r29	; 62
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
*/
	get_cmdline(cmdline);
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_cmdline>

	if (!rebootACKd(cmdline)) {
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <commands+0x26>
     8b4:	70 c0       	rjmp	.+224    	; 0x996 <commands+0x106>
			return;
		}
	}
*/
	// Echo the command back to the user
	if (notfirstpass) {
     8b6:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <notfirstpass.3678>
     8ba:	88 23       	and	r24, r24
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <commands+0x36>
		echo_cmd(cmdline);
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 a5 02 	call	0x54a	; 0x54a <echo_cmd>
	}
	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	81 11       	cpse	r24, r1
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <commands+0x42>
		send_prompt(GREATERPROMPT);
     8cc:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
		return;
     8d0:	62 c0       	rjmp	.+196    	; 0x996 <commands+0x106>
	}

	parse_cmd(cmdline, cstack);
     8d2:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	0e 94 2c 03 	call	0x658	; 0x658 <parse_cmd>
	verb = pcmd[cstack].cverb;
     8de:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     8e2:	24 e3       	ldi	r18, 0x34	; 52
     8e4:	82 9f       	mul	r24, r18
     8e6:	d0 01       	movw	r26, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	aa 5f       	subi	r26, 0xFA	; 250
     8ec:	b7 4d       	sbci	r27, 0xD7	; 215
     8ee:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8f0:	11 96       	adiw	r26, 0x01	; 1
     8f2:	9c 91       	ld	r25, X

	switch (verb) {
     8f4:	4e 2f       	mov	r20, r30
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	fa 01       	movw	r30, r20
     8fa:	e2 55       	subi	r30, 0x52	; 82
     8fc:	f1 09       	sbc	r31, r1
     8fe:	e3 32       	cpi	r30, 0x23	; 35
     900:	f1 05       	cpc	r31, r1
     902:	60 f5       	brcc	.+88     	; 0x95c <commands+0xcc>
     904:	e0 5b       	subi	r30, 0xB0	; 176
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     90c:	89 2f       	mov	r24, r25
     90e:	0e 94 6f 0c 	call	0x18de	; 0x18de <close_PNEU>
     912:	28 2f       	mov	r18, r24
			break;
     914:	30 c0       	rjmp	.+96     	; 0x976 <commands+0xe6>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     916:	89 2f       	mov	r24, r25
     918:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <open_PNEU>
     91c:	28 2f       	mov	r18, r24
			break;
     91e:	2b c0       	rjmp	.+86     	; 0x976 <commands+0xe6>

		case 'm':				// move
			move_MOTOR(cstack);
     920:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <move_MOTOR>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     924:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(object);
			break;

		case 'm':				// move
			move_MOTOR(cstack);
			break;
     926:	27 c0       	rjmp	.+78     	; 0x976 <commands+0xe6>

		case 'r':				// Report
			prompt_flag = report(cstack);
     928:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <report>
     92c:	28 2f       	mov	r18, r24
			break;
     92e:	23 c0       	rjmp	.+70     	; 0x976 <commands+0xe6>

		case 's':				// Set
			prompt_flag = set(cstack);
     930:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <set>
     934:	28 2f       	mov	r18, r24
			break;
     936:	1f c0       	rjmp	.+62     	; 0x976 <commands+0xe6>

		case 't':
			testroutine();
     938:	0e 94 1c 18 	call	0x3038	; 0x3038 <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     93c:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     93e:	1b c0       	rjmp	.+54     	; 0x976 <commands+0xe6>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     946:	8a e6       	ldi	r24, 0x6A	; 106
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	20 40       	sbci	r18, 0x00	; 0
     952:	e1 f7       	brne	.-8      	; 0x94c <commands+0xbc>
     954:	00 c0       	rjmp	.+0      	; 0x956 <commands+0xc6>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     956:	0e 94 20 1b 	call	0x3640	; 0x3640 <reboot>
			return;
     95a:	1d c0       	rjmp	.+58     	; 0x996 <commands+0x106>

		default:
			if (notfirstpass) {
     95c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <notfirstpass.3678>
     960:	88 23       	and	r24, r24
     962:	41 f0       	breq	.+16     	; 0x974 <commands+0xe4>
				printError(ERR_BADCOMMAND, "Not a command");
     964:	64 e7       	ldi	r22, 0x74	; 116
     966:	77 e8       	ldi	r23, 0x87	; 135
     968:	89 ec       	ldi	r24, 0xC9	; 201
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			}
			prompt_flag = GREATERPROMPT;
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	01 c0       	rjmp	.+2      	; 0x976 <commands+0xe6>
     974:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     976:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	6a e0       	ldi	r22, 0x0A	; 10
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
     986:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	notfirstpass = YES;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <notfirstpass.3678>
	send_prompt(prompt_flag);
     990:	82 2f       	mov	r24, r18
     992:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>

}
     996:	c1 50       	subi	r28, 0x01	; 1
     998:	df 4f       	sbci	r29, 0xFF	; 255
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9a4:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     9a6:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     9a8:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     9aa:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     9ac:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     9ae:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     9b0:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     9b2:	1f 92       	push	r1
     9b4:	7f 93       	push	r23
     9b6:	1f 92       	push	r1
     9b8:	6f 93       	push	r22
     9ba:	1f 92       	push	r1
     9bc:	5f 93       	push	r21
     9be:	1f 92       	push	r1
     9c0:	4f 93       	push	r20
     9c2:	1f 92       	push	r1
     9c4:	3f 93       	push	r19
     9c6:	1f 92       	push	r1
     9c8:	2f 93       	push	r18
     9ca:	22 e8       	ldi	r18, 0x82	; 130
     9cc:	37 e8       	ldi	r19, 0x87	; 135
     9ce:	3f 93       	push	r19
     9d0:	2f 93       	push	r18
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9da:	8d b7       	in	r24, 0x3d	; 61
     9dc:	9e b7       	in	r25, 0x3e	; 62
     9de:	40 96       	adiw	r24, 0x10	; 16
     9e0:	8d bf       	out	0x3d, r24	; 61
     9e2:	9e bf       	out	0x3e, r25	; 62
     9e4:	08 95       	ret

000009e6 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9e6:	dc 01       	movw	r26, r24
     9e8:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9ea:	81 89       	ldd	r24, Z+17	; 0x11
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	c0 97       	sbiw	r24, 0x30	; 48
     9f0:	82 95       	swap	r24
     9f2:	92 95       	swap	r25
     9f4:	90 7f       	andi	r25, 0xF0	; 240
     9f6:	98 27       	eor	r25, r24
     9f8:	80 7f       	andi	r24, 0xF0	; 240
     9fa:	98 27       	eor	r25, r24
     9fc:	92 89       	ldd	r25, Z+18	; 0x12
     9fe:	90 53       	subi	r25, 0x30	; 48
     a00:	89 2b       	or	r24, r25
     a02:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a04:	86 85       	ldd	r24, Z+14	; 0x0e
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	c0 97       	sbiw	r24, 0x30	; 48
     a0a:	82 95       	swap	r24
     a0c:	92 95       	swap	r25
     a0e:	90 7f       	andi	r25, 0xF0	; 240
     a10:	98 27       	eor	r25, r24
     a12:	80 7f       	andi	r24, 0xF0	; 240
     a14:	98 27       	eor	r25, r24
     a16:	97 85       	ldd	r25, Z+15	; 0x0f
     a18:	90 53       	subi	r25, 0x30	; 48
     a1a:	89 2b       	or	r24, r25
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	8c 93       	st	X, r24
     a20:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a22:	83 85       	ldd	r24, Z+11	; 0x0b
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	c0 97       	sbiw	r24, 0x30	; 48
     a28:	82 95       	swap	r24
     a2a:	92 95       	swap	r25
     a2c:	90 7f       	andi	r25, 0xF0	; 240
     a2e:	98 27       	eor	r25, r24
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	98 27       	eor	r25, r24
     a34:	94 85       	ldd	r25, Z+12	; 0x0c
     a36:	90 53       	subi	r25, 0x30	; 48
     a38:	89 2b       	or	r24, r25
     a3a:	12 96       	adiw	r26, 0x02	; 2
     a3c:	8c 93       	st	X, r24
     a3e:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	13 96       	adiw	r26, 0x03	; 3
     a44:	8c 93       	st	X, r24
     a46:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a48:	80 85       	ldd	r24, Z+8	; 0x08
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	c0 97       	sbiw	r24, 0x30	; 48
     a4e:	82 95       	swap	r24
     a50:	92 95       	swap	r25
     a52:	90 7f       	andi	r25, 0xF0	; 240
     a54:	98 27       	eor	r25, r24
     a56:	80 7f       	andi	r24, 0xF0	; 240
     a58:	98 27       	eor	r25, r24
     a5a:	91 85       	ldd	r25, Z+9	; 0x09
     a5c:	90 53       	subi	r25, 0x30	; 48
     a5e:	89 2b       	or	r24, r25
     a60:	14 96       	adiw	r26, 0x04	; 4
     a62:	8c 93       	st	X, r24
     a64:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a66:	25 81       	ldd	r18, Z+5	; 0x05
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	20 53       	subi	r18, 0x30	; 48
     a6c:	31 09       	sbc	r19, r1
     a6e:	22 95       	swap	r18
     a70:	32 95       	swap	r19
     a72:	30 7f       	andi	r19, 0xF0	; 240
     a74:	32 27       	eor	r19, r18
     a76:	20 7f       	andi	r18, 0xF0	; 240
     a78:	32 27       	eor	r19, r18
     a7a:	86 81       	ldd	r24, Z+6	; 0x06
     a7c:	80 53       	subi	r24, 0x30	; 48
     a7e:	28 2b       	or	r18, r24
     a80:	15 96       	adiw	r26, 0x05	; 5
     a82:	2c 93       	st	X, r18
     a84:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a86:	22 81       	ldd	r18, Z+2	; 0x02
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	20 53       	subi	r18, 0x30	; 48
     a8c:	31 09       	sbc	r19, r1
     a8e:	22 95       	swap	r18
     a90:	32 95       	swap	r19
     a92:	30 7f       	andi	r19, 0xF0	; 240
     a94:	32 27       	eor	r19, r18
     a96:	20 7f       	andi	r18, 0xF0	; 240
     a98:	32 27       	eor	r19, r18
     a9a:	83 81       	ldd	r24, Z+3	; 0x03
     a9c:	80 53       	subi	r24, 0x30	; 48
     a9e:	28 2b       	or	r18, r24
     aa0:	16 96       	adiw	r26, 0x06	; 6
     aa2:	2c 93       	st	X, r18
     aa4:	08 95       	ret

00000aa6 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     ab8:	c8 2f       	mov	r28, r24
     aba:	88 23       	and	r24, r24
     abc:	21 f0       	breq	.+8      	; 0xac6 <read_DS3231+0x20>
		stop_TWI();
     abe:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     ac2:	8c 2f       	mov	r24, r28
     ac4:	28 c0       	rjmp	.+80     	; 0xb16 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     acc:	c8 2f       	mov	r28, r24
     ace:	88 23       	and	r24, r24
     ad0:	21 f0       	breq	.+8      	; 0xada <read_DS3231+0x34>
		stop_TWI();
     ad2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     ad6:	8c 2f       	mov	r24, r28
     ad8:	1e c0       	rjmp	.+60     	; 0xb16 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	88 e6       	ldi	r24, 0x68	; 104
     ade:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     ae2:	c8 2f       	mov	r28, r24
     ae4:	88 23       	and	r24, r24
     ae6:	69 f0       	breq	.+26     	; 0xb02 <read_DS3231+0x5c>
		stop_TWI();
     ae8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     aec:	8c 2f       	mov	r24, r28
     aee:	13 c0       	rjmp	.+38     	; 0xb16 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     af0:	87 01       	movw	r16, r14
     af2:	0c 0f       	add	r16, r28
     af4:	11 1d       	adc	r17, r1
     af6:	0e 94 99 18 	call	0x3132	; 0x3132 <read_TWI>
     afa:	f8 01       	movw	r30, r16
     afc:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     afe:	cf 5f       	subi	r28, 0xFF	; 255
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <read_DS3231+0x5e>
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	c6 30       	cpi	r28, 0x06	; 6
     b06:	a0 f3       	brcs	.-24     	; 0xaf0 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     b08:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
     b0c:	f7 01       	movw	r30, r14
     b0e:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b10:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	return(0);
     b14:	80 e0       	ldi	r24, 0x00	; 0

}
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	27 97       	sbiw	r28, 0x07	; 7
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b36:	be 01       	movw	r22, r28
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	88 e6       	ldi	r24, 0x68	; 104
     b3e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <read_DS3231>
     b42:	88 23       	and	r24, r24
     b44:	49 f0       	breq	.+18     	; 0xb58 <get_time+0x36>
// avoid a bootup announcement at boot-time by not sending this
//		printError(ERR_GETTIME, "DS3231 get_time");
		strcpy(isotime, "CurrentTime?");
     b46:	9d e0       	ldi	r25, 0x0D	; 13
     b48:	e2 ea       	ldi	r30, 0xA2	; 162
     b4a:	f7 e8       	ldi	r31, 0x87	; 135
     b4c:	d8 01       	movw	r26, r16
     b4e:	01 90       	ld	r0, Z+
     b50:	0d 92       	st	X+, r0
     b52:	9a 95       	dec	r25
     b54:	e1 f7       	brne	.-8      	; 0xb4e <get_time+0x2c>
		return(retval);
     b56:	07 c0       	rjmp	.+14     	; 0xb66 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b58:	be 01       	movw	r22, r28
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	c8 01       	movw	r24, r16
     b60:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <convert_ds2iso>
	return(0);
     b64:	80 e0       	ldi	r24, 0x00	; 0

}
     b66:	27 96       	adiw	r28, 0x07	; 7
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     b8a:	c8 2f       	mov	r28, r24
     b8c:	88 23       	and	r24, r24
     b8e:	21 f0       	breq	.+8      	; 0xb98 <write_DS3231+0x22>
		stop_TWI();
     b90:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     b94:	8c 2f       	mov	r24, r28
     b96:	22 c0       	rjmp	.+68     	; 0xbdc <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     b9e:	c8 2f       	mov	r28, r24
     ba0:	88 23       	and	r24, r24
     ba2:	b1 f0       	breq	.+44     	; 0xbd0 <write_DS3231+0x5a>
		stop_TWI();
     ba4:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
     ba8:	8c 2f       	mov	r24, r28
     baa:	18 c0       	rjmp	.+48     	; 0xbdc <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     bac:	78 01       	movw	r14, r16
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	e8 1a       	sub	r14, r24
     bb2:	f8 0a       	sbc	r15, r24
     bb4:	f8 01       	movw	r30, r16
     bb6:	80 81       	ld	r24, Z
     bb8:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     bbc:	c8 2f       	mov	r28, r24
     bbe:	88 23       	and	r24, r24
     bc0:	21 f0       	breq	.+8      	; 0xbca <write_DS3231+0x54>
			stop_TWI();
     bc2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
			return(retval);
     bc6:	8c 2f       	mov	r24, r28
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     bca:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     bcc:	87 01       	movw	r16, r14
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <write_DS3231+0x5c>
     bd0:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     bd2:	d7 30       	cpi	r29, 0x07	; 7
     bd4:	58 f3       	brcs	.-42     	; 0xbac <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     bd6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	return(0);
     bda:	80 e0       	ldi	r24, 0x00	; 0

}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	08 95       	ret

00000bea <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	27 97       	sbiw	r28, 0x07	; 7
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bf8:	bc 01       	movw	r22, r24
     bfa:	ce 01       	movw	r24, r28
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     c02:	be 01       	movw	r22, r28
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	88 e6       	ldi	r24, 0x68	; 104
     c0a:	0e 94 bb 05 	call	0xb76	; 0xb76 <write_DS3231>
		return(retval);
	}
	return(0);

}
     c0e:	27 96       	adiw	r28, 0x07	; 7
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c1a:	45 e1       	ldi	r20, 0x15	; 21
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	6b e0       	ldi	r22, 0x0B	; 11
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 6d 23 	call	0x46da	; 0x46da <eeprom_read_block>
     c26:	08 95       	ret

00000c28 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c28:	4b e0       	ldi	r20, 0x0B	; 11
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 6d 23 	call	0x46da	; 0x46da <eeprom_read_block>
     c34:	08 95       	ret

00000c36 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	65 97       	sbiw	r28, 0x15	; 21
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c4c:	45 e1       	ldi	r20, 0x15	; 21
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	6b e0       	ldi	r22, 0x0B	; 11
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 71 23 	call	0x46e2	; 0x46e2 <eeprom_update_block>

}
     c5c:	65 96       	adiw	r28, 0x15	; 21
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <update_VERSION>:

void update_VERSION(void)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	2b 97       	sbiw	r28, 0x0b	; 11
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c76:	8b e0       	ldi	r24, 0x0B	; 11
     c78:	ef ea       	ldi	r30, 0xAF	; 175
     c7a:	f7 e8       	ldi	r31, 0x87	; 135
     c7c:	de 01       	movw	r26, r28
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	01 90       	ld	r0, Z+
     c82:	0d 92       	st	X+, r0
     c84:	8a 95       	dec	r24
     c86:	e1 f7       	brne	.-8      	; 0xc80 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c88:	4b e0       	ldi	r20, 0x0B	; 11
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 71 23 	call	0x46e2	; 0x46e2 <eeprom_update_block>

}
     c98:	2b 96       	adiw	r28, 0x0b	; 11
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     ca4:	0e 94 1b 06 	call	0xc36	; 0xc36 <update_BOOTTIME>
	update_VERSION();
     ca8:	0e 94 34 06 	call	0xc68	; 0xc68 <update_VERSION>
     cac:	08 95       	ret

00000cae <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	cf 55       	subi	r28, 0x5F	; 95
     cbc:	d1 09       	sbc	r29, r1
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errorFormat[] = "$S%dERR,%d,%s";
     cc2:	2e e0       	ldi	r18, 0x0E	; 14
     cc4:	ea eb       	ldi	r30, 0xBA	; 186
     cc6:	f7 e8       	ldi	r31, 0x87	; 135
     cc8:	de 01       	movw	r26, r28
     cca:	ae 5a       	subi	r26, 0xAE	; 174
     ccc:	bf 4f       	sbci	r27, 0xFF	; 255
     cce:	01 90       	ld	r0, Z+
     cd0:	0d 92       	st	X+, r0
     cd2:	2a 95       	dec	r18
     cd4:	e1 f7       	brne	.-8      	; 0xcce <printError+0x20>

	sprintf(strbuf, errorFormat, get_SPECID, errorNumber, errorString);
     cd6:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     cda:	22 ff       	sbrs	r18, 2
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <printError+0x36>
     cde:	22 e0       	ldi	r18, 0x02	; 2
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <printError+0x3a>
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	7f 93       	push	r23
     cea:	6f 93       	push	r22
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	3f 93       	push	r19
     cf2:	2f 93       	push	r18
     cf4:	ce 01       	movw	r24, r28
     cf6:	8e 5a       	subi	r24, 0xAE	; 174
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	8e 01       	movw	r16, r28
     d00:	0f 5f       	subi	r16, 0xFF	; 255
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	1f 93       	push	r17
     d06:	0f 93       	push	r16
     d08:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
	checksum_NMEA(strbuf);
     d0c:	c8 01       	movw	r24, r16
     d0e:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     d12:	f8 01       	movw	r30, r16
     d14:	01 90       	ld	r0, Z+
     d16:	00 20       	and	r0, r0
     d18:	e9 f7       	brne	.-6      	; 0xd14 <printError+0x66>
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	af 01       	movw	r20, r30
     d1e:	40 1b       	sub	r20, r16
     d20:	51 0b       	sbc	r21, r17
     d22:	b8 01       	movw	r22, r16
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

}
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	c1 5a       	subi	r28, 0xA1	; 161
     d30:	df 4f       	sbci	r29, 0xFF	; 255
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	c8 2f       	mov	r28, r24
     d4e:	e6 2e       	mov	r14, r22
     d50:	f7 2e       	mov	r15, r23
     d52:	8a 01       	movw	r16, r20
     d54:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     d5c:	81 11       	cpse	r24, r1
     d5e:	2b c0       	rjmp	.+86     	; 0xdb6 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     d60:	8f 2d       	mov	r24, r15
     d62:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     d66:	81 11       	cpse	r24, r1
     d68:	26 c0       	rjmp	.+76     	; 0xdb6 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     d6a:	8e 2d       	mov	r24, r14
     d6c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     d70:	81 11       	cpse	r24, r1
     d72:	21 c0       	rjmp	.+66     	; 0xdb6 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     d7c:	81 11       	cpse	r24, r1
     d7e:	1b c0       	rjmp	.+54     	; 0xdb6 <read_FRAM+0x76>
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d84:	78 01       	movw	r14, r16
     d86:	ec 0e       	add	r14, r28
     d88:	f1 1c       	adc	r15, r1
     d8a:	0e 94 99 18 	call	0x3132	; 0x3132 <read_TWI>
     d8e:	f7 01       	movw	r30, r14
     d90:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d92:	cf 5f       	subi	r28, 0xFF	; 255
     d94:	2c 2f       	mov	r18, r28
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8d 2f       	mov	r24, r29
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	84 f3       	brlt	.-32     	; 0xd84 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     da4:	ec 01       	movw	r28, r24
     da6:	c0 0f       	add	r28, r16
     da8:	d1 1f       	adc	r29, r17
     daa:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
     dae:	88 83       	st	Y, r24

	stop_TWI();
     db0:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	return(0);
     db4:	80 e0       	ldi	r24, 0x00	; 0

}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	08 95       	ret

00000dc4 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	f6 2e       	mov	r15, r22
     dd2:	17 2f       	mov	r17, r23
     dd4:	ea 01       	movw	r28, r20
     dd6:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
     dde:	81 11       	cpse	r24, r1
     de0:	1c c0       	rjmp	.+56     	; 0xe1a <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     de2:	81 2f       	mov	r24, r17
     de4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     de8:	81 11       	cpse	r24, r1
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     dec:	8f 2d       	mov	r24, r15
     dee:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     df2:	81 11       	cpse	r24, r1
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <write_FRAM+0x56>
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     dfa:	7e 01       	movw	r14, r28
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	e8 1a       	sub	r14, r24
     e00:	f8 0a       	sbc	r15, r24
     e02:	88 81       	ld	r24, Y
     e04:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
     e08:	81 11       	cpse	r24, r1
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e0c:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     e0e:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e10:	10 17       	cp	r17, r16
     e12:	98 f3       	brcs	.-26     	; 0xdfa <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     e14:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	return(0);
     e18:	80 e0       	ldi	r24, 0x00	; 0

}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     e28:	8f 92       	push	r8
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	59 f0       	breq	.+22     	; 0xe52 <get_humidity+0x2a>
     e3c:	18 f0       	brcs	.+6      	; 0xe44 <get_humidity+0x1c>
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	79 f0       	breq	.+30     	; 0xe60 <get_humidity+0x38>
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
     e4a:	4b 01       	movw	r8, r22
     e4c:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     e4e:	40 e4       	ldi	r20, 0x40	; 64
			break;
     e50:	17 c0       	rjmp	.+46     	; 0xe80 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
     e58:	4b 01       	movw	r8, r22
     e5a:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     e5c:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e5e:	10 c0       	rjmp	.+32     	; 0xe80 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
     e66:	4b 01       	movw	r8, r22
     e68:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     e6a:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e6e:	0f 2e       	mov	r0, r31
     e70:	81 2c       	mov	r8, r1
     e72:	91 2c       	mov	r9, r1
     e74:	f0 ea       	ldi	r31, 0xA0	; 160
     e76:	af 2e       	mov	r10, r31
     e78:	f1 e4       	ldi	r31, 0x41	; 65
     e7a:	bf 2e       	mov	r11, r31
     e7c:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e7e:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     e80:	20 e8       	ldi	r18, 0x80	; 128
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	88 e4       	ldi	r24, 0x48	; 72
     e86:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 ea       	ldi	r20, 0xA0	; 160
     e90:	50 e4       	ldi	r21, 0x40	; 64
     e92:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divsf3>
     e96:	2a e0       	ldi	r18, 0x0A	; 10
     e98:	37 ed       	ldi	r19, 0xD7	; 215
     e9a:	43 e2       	ldi	r20, 0x23	; 35
     e9c:	5e e3       	ldi	r21, 0x3E	; 62
     e9e:	0e 94 36 1b 	call	0x366c	; 0x366c <__subsf3>
     ea2:	2f e5       	ldi	r18, 0x5F	; 95
     ea4:	39 e2       	ldi	r19, 0x29	; 41
     ea6:	4b ec       	ldi	r20, 0xCB	; 203
     ea8:	5b e3       	ldi	r21, 0x3B	; 59
     eaa:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divsf3>
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     eb2:	29 ec       	ldi	r18, 0xC9	; 201
     eb4:	3e e8       	ldi	r19, 0x8E	; 142
     eb6:	4d e0       	ldi	r20, 0x0D	; 13
     eb8:	5b e3       	ldi	r21, 0x3B	; 59
     eba:	c5 01       	movw	r24, r10
     ebc:	b4 01       	movw	r22, r8
     ebe:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	62 e2       	ldi	r22, 0x22	; 34
     ec8:	7d ef       	ldi	r23, 0xFD	; 253
     eca:	86 e8       	ldi	r24, 0x86	; 134
     ecc:	9f e3       	ldi	r25, 0x3F	; 63
     ece:	0e 94 36 1b 	call	0x366c	; 0x366c <__subsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
     eda:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divsf3>
	return(humidity);

}
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	08 95       	ret

00000ef0 <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     ef0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     ef4:	8b e0       	ldi	r24, 0x0B	; 11
     ef6:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     efa:	0e 94 2a 1b 	call	0x3654	; 0x3654 <init_XPORT>
	init_SPECID();
     efe:	0e 94 04 18 	call	0x3008	; 0x3008 <init_SPECID>
	init_LED();
     f02:	0e 94 39 08 	call	0x1072	; 0x1072 <init_LED>
	init_BEEPER();
     f06:	0e 94 9e 02 	call	0x53c	; 0x53c <init_BEEPER>
	init_TWI();
     f0a:	0e 94 8e 18 	call	0x311c	; 0x311c <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <init_RTC>
	init_USART();
     f16:	0e 94 03 19 	call	0x3206	; 0x3206 <init_USART>
     f1a:	08 95       	ret

00000f1c <initialize1>:

}

void initialize1(void)
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2b 97       	sbiw	r28, 0x0b	; 11
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_MOTORS();
     f2a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <init_MOTORS>
	init_MMA8451();
     f2e:	0e 94 df 09 	call	0x13be	; 0x13be <init_MMA8451>
	init_PNEU();
     f32:	0e 94 b4 0b 	call	0x1768	; 0x1768 <init_PNEU>
	init_OLED(0);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <init_OLED>
	init_OLED(1);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <init_OLED>
	init_EEPROM();	// Needs TWI
     f42:	0e 94 52 06 	call	0xca4	; 0xca4 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     f46:	80 ee       	ldi	r24, 0xE0	; 224
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timeoutOLED>
     f4e:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 14 06 	call	0xc28	; 0xc28 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	68 ec       	ldi	r22, 0xC8	; 200
     f5e:	77 e8       	ldi	r23, 0x87	; 135
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     f66:	42 e0       	ldi	r20, 0x02	; 2
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>

}
     f74:	2b 96       	adiw	r28, 0x0b	; 11
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	ef 93       	push	r30
     fa0:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     fa2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     fa6:	86 ff       	sbrs	r24, 6
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     faa:	80 e4       	ldi	r24, 0x40	; 64
     fac:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     fb0:	0e 94 20 1b 	call	0x3640	; 0x3640 <reboot>
	}

}
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	21 f0       	breq	.+8      	; 0xfea <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	79 f5       	brne	.+94     	; 0x1044 <read_ionpump+0x6e>
		pins = AIN23;
     fe6:	40 e3       	ldi	r20, 0x30	; 48
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     fea:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     fec:	20 e8       	ldi	r18, 0x80	; 128
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	89 e4       	ldi	r24, 0x49	; 73
     ff2:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     ff6:	6b 01       	movw	r12, r22
     ff8:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     ffa:	2d ec       	ldi	r18, 0xCD	; 205
     ffc:	3c ec       	ldi	r19, 0xCC	; 204
     ffe:	4c ec       	ldi	r20, 0xCC	; 204
    1000:	5e e3       	ldi	r21, 0x3E	; 62
    1002:	0e 94 a3 1b 	call	0x3746	; 0x3746 <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	14 f1       	brlt	.+68     	; 0x104e <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e4       	ldi	r21, 0x40	; 64
    1012:	c7 01       	movw	r24, r14
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__gesf2>
    101a:	18 16       	cp	r1, r24
    101c:	ec f0       	brlt	.+58     	; 0x1058 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    101e:	29 e7       	ldi	r18, 0x79	; 121
    1020:	39 ee       	ldi	r19, 0xE9	; 233
    1022:	42 e0       	ldi	r20, 0x02	; 2
    1024:	50 e4       	ldi	r21, 0x40	; 64
    1026:	c7 01       	movw	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    102e:	2e e6       	ldi	r18, 0x6E	; 110
    1030:	33 ea       	ldi	r19, 0xA3	; 163
    1032:	4b ed       	ldi	r20, 0xDB	; 219
    1034:	50 e4       	ldi	r21, 0x40	; 64
    1036:	0e 94 36 1b 	call	0x366c	; 0x366c <__subsf3>

	return(vacuum);
    103a:	56 2f       	mov	r21, r22
    103c:	47 2f       	mov	r20, r23
    103e:	38 2f       	mov	r19, r24
    1040:	29 2f       	mov	r18, r25
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	36 e2       	ldi	r19, 0x26	; 38
    104a:	24 ec       	ldi	r18, 0xC4	; 196
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	36 e2       	ldi	r19, 0x26	; 38
    1054:	24 ec       	ldi	r18, 0xC4	; 196
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	36 e2       	ldi	r19, 0x26	; 38
    105e:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
    1060:	65 2f       	mov	r22, r21
    1062:	74 2f       	mov	r23, r20
    1064:	83 2f       	mov	r24, r19
    1066:	92 2f       	mov	r25, r18
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    1072:	e0 ea       	ldi	r30, 0xA0	; 160
    1074:	f4 e0       	ldi	r31, 0x04	; 4
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    107a:	81 83       	std	Z+1, r24	; 0x01
    107c:	08 95       	ret

0000107e <main>:
extern void initialize(void);

int main(void)
{

	initialize0();
    107e:	0e 94 78 07 	call	0xef0	; 0xef0 <initialize0>
	sei();
    1082:	78 94       	sei
	initialize1();
    1084:	0e 94 8e 07 	call	0xf1c	; 0xf1c <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    1088:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x104>
    108c:	88 23       	and	r24, r24
    108e:	e1 f3       	breq	.-8      	; 0x1088 <main+0xa>
			recv0_buf.done = NO;
    1090:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x104>
			commands();
    1094:	0e 94 48 04 	call	0x890	; 0x890 <commands>
    1098:	f7 cf       	rjmp	.-18     	; 0x1088 <main+0xa>

0000109a <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	c8 2f       	mov	r28, r24
    10a0:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
    10a8:	83 36       	cpi	r24, 0x63	; 99
    10aa:	51 f4       	brne	.+20     	; 0x10c0 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 error");
    10ac:	69 ed       	ldi	r22, 0xD9	; 217
    10ae:	77 e8       	ldi	r23, 0x87	; 135
    10b0:	81 e9       	ldi	r24, 0x91	; 145
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		stop_TWI();
    10b8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(0x7F);
    10bc:	8f e7       	ldi	r24, 0x7F	; 127
    10be:	0d c0       	rjmp	.+26     	; 0x10da <read_MCP23008+0x40>
	}
	write_TWI(reg);
    10c0:	8d 2f       	mov	r24, r29
    10c2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
	start_TWI(addr, TWIREAD);
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	8c 2f       	mov	r24, r28
    10ca:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	value = readlast_TWI();
    10ce:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
    10d2:	c8 2f       	mov	r28, r24
	stop_TWI();
    10d4:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
	return(value);
    10d8:	8c 2f       	mov	r24, r28

}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	d6 2f       	mov	r29, r22
    10e8:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
    10f0:	c8 2f       	mov	r28, r24
    10f2:	88 23       	and	r24, r24
    10f4:	21 f0       	breq	.+8      	; 0x10fe <write_MCP23008+0x1e>
		stop_TWI();
    10f6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    10fa:	8c 2f       	mov	r24, r28
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    10fe:	8d 2f       	mov	r24, r29
    1100:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
    1104:	c8 2f       	mov	r28, r24
    1106:	88 23       	and	r24, r24
    1108:	21 f0       	breq	.+8      	; 0x1112 <write_MCP23008+0x32>
		stop_TWI();
    110a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    110e:	8c 2f       	mov	r24, r28
    1110:	0d c0       	rjmp	.+26     	; 0x112c <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1112:	81 2f       	mov	r24, r17
    1114:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
    1118:	c8 2f       	mov	r28, r24
    111a:	88 23       	and	r24, r24
    111c:	21 f0       	breq	.+8      	; 0x1126 <write_MCP23008+0x46>
		stop_TWI();
    111e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    1122:	8c 2f       	mov	r24, r28
    1124:	03 c0       	rjmp	.+6      	; 0x112c <write_MCP23008+0x4c>
	}
	stop_TWI();
    1126:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
	return(0);
    112a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	08 95       	ret

00001134 <read_MCP9808>:
#include "globals.h"
#include "mcp9808.h"
#include "twi.h"

float read_MCP9808(void)
{
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	88 e1       	ldi	r24, 0x18	; 24
    1146:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	write_TWI(TEMPREGISTER);
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	88 e1       	ldi	r24, 0x18	; 24
    1154:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	highbyte = read_TWI();
    1158:	0e 94 99 18 	call	0x3132	; 0x3132 <read_TWI>
    115c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    115e:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
    1162:	d8 2f       	mov	r29, r24
	stop_TWI();
    1164:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1168:	1c 2f       	mov	r17, r28
    116a:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    116c:	6c 2f       	mov	r22, r28
    116e:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    1186:	6b 01       	movw	r12, r22
    1188:	7c 01       	movw	r14, r24
    118a:	6d 2f       	mov	r22, r29
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5d e3       	ldi	r21, 0x3D	; 61
    119e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    11a6:	c7 01       	movw	r24, r14
    11a8:	b6 01       	movw	r22, r12
    11aa:	0e 94 37 1b 	call	0x366e	; 0x366e <__addsf3>
	if (sign) {
    11ae:	11 23       	and	r17, r17
    11b0:	41 f0       	breq	.+16     	; 0x11c2 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e8       	ldi	r24, 0x80	; 128
    11bc:	93 e4       	ldi	r25, 0x43	; 67
    11be:	0e 94 36 1b 	call	0x366c	; 0x366c <__subsf3>
	}
	return(temperature);
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	08 95       	ret

000011d2 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	18 2f       	mov	r17, r24
    11e0:	f6 2e       	mov	r15, r22
    11e2:	ea 01       	movw	r28, r20
    11e4:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
    11ec:	81 11       	cpse	r24, r1
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    11f0:	8f 2d       	mov	r24, r15
    11f2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
    11f6:	81 11       	cpse	r24, r1
    11f8:	19 c0       	rjmp	.+50     	; 0x122c <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	81 2f       	mov	r24, r17
    11fe:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
    1202:	81 11       	cpse	r24, r1
    1204:	13 c0       	rjmp	.+38     	; 0x122c <read_MMA8451+0x5a>
    1206:	11 e0       	ldi	r17, 0x01	; 1
    1208:	09 c0       	rjmp	.+18     	; 0x121c <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    120a:	7e 01       	movw	r14, r28
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	e8 1a       	sub	r14, r24
    1210:	f8 0a       	sbc	r15, r24
    1212:	0e 94 99 18 	call	0x3132	; 0x3132 <read_TWI>
    1216:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1218:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    121a:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    121c:	10 17       	cp	r17, r16
    121e:	a8 f3       	brcs	.-22     	; 0x120a <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1220:	0e 94 a9 18 	call	0x3152	; 0x3152 <readlast_TWI>
    1224:	88 83       	st	Y, r24
	stop_TWI();
    1226:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
	return(0);
    122a:	80 e0       	ldi	r24, 0x00	; 0

}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	26 97       	sbiw	r28, 0x06	; 6
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	6c 01       	movw	r12, r24
    1256:	7b 01       	movw	r14, r22
    1258:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e8       	ldi	r25, 0x80	; 128
    125e:	a6 e2       	ldi	r26, 0x26	; 38
    1260:	b4 ec       	ldi	r27, 0xC4	; 196
    1262:	fa 01       	movw	r30, r20
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
    126c:	fb 01       	movw	r30, r22
    126e:	80 83       	st	Z, r24
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	a2 83       	std	Z+2, r26	; 0x02
    1274:	b3 83       	std	Z+3, r27	; 0x03
    1276:	f6 01       	movw	r30, r12
    1278:	80 83       	st	Z, r24
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	a2 83       	std	Z+2, r26	; 0x02
    127e:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1280:	26 e0       	ldi	r18, 0x06	; 6
    1282:	ae 01       	movw	r20, r28
    1284:	4f 5f       	subi	r20, 0xFF	; 255
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	8d e1       	ldi	r24, 0x1D	; 29
    128c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MMA8451>

	ix = datain[0];
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1294:	98 2f       	mov	r25, r24
    1296:	88 27       	eor	r24, r24
	ix |= datain[1];
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	82 2b       	or	r24, r18
	ix /= 4;
    129c:	bc 01       	movw	r22, r24
    129e:	77 23       	and	r23, r23
    12a0:	14 f4       	brge	.+4      	; 0x12a6 <get_orientation+0x6c>
    12a2:	6d 5f       	subi	r22, 0xFD	; 253
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	75 95       	asr	r23
    12a8:	67 95       	ror	r22
    12aa:	75 95       	asr	r23
    12ac:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    12ae:	07 2e       	mov	r0, r23
    12b0:	00 0c       	add	r0, r0
    12b2:	88 0b       	sbc	r24, r24
    12b4:	99 0b       	sbc	r25, r25
    12b6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__floatsisf>
    12ba:	26 e6       	ldi	r18, 0x66	; 102
    12bc:	36 e2       	ldi	r19, 0x26	; 38
    12be:	45 e7       	ldi	r20, 0x75	; 117
    12c0:	5e e3       	ldi	r21, 0x3E	; 62
    12c2:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    12c6:	f6 01       	movw	r30, r12
    12c8:	60 83       	st	Z, r22
    12ca:	71 83       	std	Z+1, r23	; 0x01
    12cc:	82 83       	std	Z+2, r24	; 0x02
    12ce:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    12d4:	98 2f       	mov	r25, r24
    12d6:	88 27       	eor	r24, r24
	iy |= datain[3];
    12d8:	2c 81       	ldd	r18, Y+4	; 0x04
    12da:	82 2b       	or	r24, r18
	iy /= 4;
    12dc:	bc 01       	movw	r22, r24
    12de:	77 23       	and	r23, r23
    12e0:	14 f4       	brge	.+4      	; 0x12e6 <get_orientation+0xac>
    12e2:	6d 5f       	subi	r22, 0xFD	; 253
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	75 95       	asr	r23
    12e8:	67 95       	ror	r22
    12ea:	75 95       	asr	r23
    12ec:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    12ee:	07 2e       	mov	r0, r23
    12f0:	00 0c       	add	r0, r0
    12f2:	88 0b       	sbc	r24, r24
    12f4:	99 0b       	sbc	r25, r25
    12f6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__floatsisf>
    12fa:	26 e6       	ldi	r18, 0x66	; 102
    12fc:	36 e2       	ldi	r19, 0x26	; 38
    12fe:	45 e7       	ldi	r20, 0x75	; 117
    1300:	5e e3       	ldi	r21, 0x3E	; 62
    1302:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    1306:	f7 01       	movw	r30, r14
    1308:	60 83       	st	Z, r22
    130a:	71 83       	std	Z+1, r23	; 0x01
    130c:	82 83       	std	Z+2, r24	; 0x02
    130e:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1314:	98 2f       	mov	r25, r24
    1316:	88 27       	eor	r24, r24
	iz |= datain[5];
    1318:	2e 81       	ldd	r18, Y+6	; 0x06
    131a:	82 2b       	or	r24, r18
	iz /= 4;
    131c:	bc 01       	movw	r22, r24
    131e:	77 23       	and	r23, r23
    1320:	14 f4       	brge	.+4      	; 0x1326 <get_orientation+0xec>
    1322:	6d 5f       	subi	r22, 0xFD	; 253
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	75 95       	asr	r23
    1328:	67 95       	ror	r22
    132a:	75 95       	asr	r23
    132c:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    132e:	07 2e       	mov	r0, r23
    1330:	00 0c       	add	r0, r0
    1332:	88 0b       	sbc	r24, r24
    1334:	99 0b       	sbc	r25, r25
    1336:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__floatsisf>
    133a:	26 e6       	ldi	r18, 0x66	; 102
    133c:	36 e2       	ldi	r19, 0x26	; 38
    133e:	45 e7       	ldi	r20, 0x75	; 117
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    1346:	f8 01       	movw	r30, r16
    1348:	60 83       	st	Z, r22
    134a:	71 83       	std	Z+1, r23	; 0x01
    134c:	82 83       	std	Z+2, r24	; 0x02
    134e:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	26 96       	adiw	r28, 0x06	; 6
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	d6 2f       	mov	r29, r22
    1372:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
    137a:	c8 2f       	mov	r28, r24
    137c:	88 23       	and	r24, r24
    137e:	21 f0       	breq	.+8      	; 0x1388 <write_MMA8451+0x1e>
		stop_TWI();
    1380:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    1384:	8c 2f       	mov	r24, r28
    1386:	17 c0       	rjmp	.+46     	; 0x13b6 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1388:	8d 2f       	mov	r24, r29
    138a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
    138e:	c8 2f       	mov	r28, r24
    1390:	88 23       	and	r24, r24
    1392:	21 f0       	breq	.+8      	; 0x139c <write_MMA8451+0x32>
		stop_TWI();
    1394:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    1398:	8c 2f       	mov	r24, r28
    139a:	0d c0       	rjmp	.+26     	; 0x13b6 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    139c:	81 2f       	mov	r24, r17
    139e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
    13a2:	c8 2f       	mov	r28, r24
    13a4:	88 23       	and	r24, r24
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <write_MMA8451+0x46>
		stop_TWI();
    13a8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
		return(retval);
    13ac:	8c 2f       	mov	r24, r28
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <write_MMA8451+0x4c>
	}
	stop_TWI();
    13b0:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>
	return(0);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
	
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	08 95       	ret

000013be <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	1f 92       	push	r1
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    13c8:	40 e4       	ldi	r20, 0x40	; 64
    13ca:	6b e2       	ldi	r22, 0x2B	; 43
    13cc:	8d e1       	ldi	r24, 0x1D	; 29
    13ce:	0e 94 b5 09 	call	0x136a	; 0x136a <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	ae 01       	movw	r20, r28
    13d6:	4f 5f       	subi	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	6b e2       	ldi	r22, 0x2B	; 43
    13dc:	8d e1       	ldi	r24, 0x1D	; 29
    13de:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MMA8451>
	while (retval & 0x40) {
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	ae 01       	movw	r20, r28
    13e8:	4f 5f       	subi	r20, 0xFF	; 255
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	6b e2       	ldi	r22, 0x2B	; 43
    13ee:	8d e1       	ldi	r24, 0x1D	; 29
    13f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	86 fd       	sbrc	r24, 6
    13f8:	f5 cf       	rjmp	.-22     	; 0x13e4 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    13fa:	40 ec       	ldi	r20, 0xC0	; 192
    13fc:	6f e0       	ldi	r22, 0x0F	; 15
    13fe:	8d e1       	ldi	r24, 0x1D	; 29
    1400:	0e 94 b5 09 	call	0x136a	; 0x136a <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1404:	42 e0       	ldi	r20, 0x02	; 2
    1406:	6b e2       	ldi	r22, 0x2B	; 43
    1408:	8d e1       	ldi	r24, 0x1D	; 29
    140a:	0e 94 b5 09 	call	0x136a	; 0x136a <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    140e:	4d e3       	ldi	r20, 0x3D	; 61
    1410:	6a e2       	ldi	r22, 0x2A	; 42
    1412:	8d e1       	ldi	r24, 0x1D	; 29
    1414:	0e 94 b5 09 	call	0x136a	; 0x136a <write_MMA8451>

	return(retval);

}
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2e 97       	sbiw	r28, 0x0e	; 14
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    143a:	88 e0       	ldi	r24, 0x08	; 8
    143c:	e8 ee       	ldi	r30, 0xE8	; 232
    143e:	f7 e8       	ldi	r31, 0x87	; 135
    1440:	de 01       	movw	r26, r28
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	01 90       	ld	r0, Z+
    1446:	0d 92       	st	X+, r0
    1448:	8a 95       	dec	r24
    144a:	e1 f7       	brne	.-8      	; 0x1444 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    144c:	f8 01       	movw	r30, r16
    144e:	01 90       	ld	r0, Z+
    1450:	00 20       	and	r0, r0
    1452:	e9 f7       	brne	.-6      	; 0x144e <checksum_NMEA+0x2c>
    1454:	31 97       	sbiw	r30, 0x01	; 1
    1456:	3e 2f       	mov	r19, r30
    1458:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    145a:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	06 c0       	rjmp	.+12     	; 0x146c <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1460:	f8 01       	movw	r30, r16
    1462:	e8 0f       	add	r30, r24
    1464:	f1 1d       	adc	r31, r1
    1466:	20 81       	ld	r18, Z
    1468:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	83 17       	cp	r24, r19
    146e:	c0 f3       	brcs	.-16     	; 0x1460 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1470:	1f 92       	push	r1
    1472:	9f 93       	push	r25
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	9f 93       	push	r25
    147a:	8f 93       	push	r24
    147c:	7e 01       	movw	r14, r28
    147e:	89 e0       	ldi	r24, 0x09	; 9
    1480:	e8 0e       	add	r14, r24
    1482:	f1 1c       	adc	r15, r1
    1484:	ff 92       	push	r15
    1486:	ef 92       	push	r14
    1488:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
	strcat(str, chksum);
    148c:	b7 01       	movw	r22, r14
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strcat>

}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	2e 96       	adiw	r28, 0x0e	; 14
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	08 95       	ret

000014b4 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	d6 2f       	mov	r29, r22
    14ba:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	0e 94 b6 18 	call	0x316c	; 0x316c <start_TWI>
	write_TWI(type);
    14c2:	8d 2f       	mov	r24, r29
    14c4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
	write_TWI(byteToSend);
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 ee 18 	call	0x31dc	; 0x31dc <write_TWI>
	stop_TWI();
    14ce:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <stop_TWI>

}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    14d8:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    14da:	e0 e6       	ldi	r30, 0x60	; 96
    14dc:	f4 e0       	ldi	r31, 0x04	; 4
    14de:	90 e4       	ldi	r25, 0x40	; 64
    14e0:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	a1 e4       	ldi	r26, 0x41	; 65
    14e6:	b3 e0       	ldi	r27, 0x03	; 3
    14e8:	11 97       	sbiw	r26, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <init_OLED+0x10>
    14ec:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    14ee:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    14f0:	81 11       	cpse	r24, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    14f4:	cc e3       	ldi	r28, 0x3C	; 60
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    14f8:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    14fa:	4a e2       	ldi	r20, 0x2A	; 42
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	8c 2f       	mov	r24, r28
    1500:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1504:	41 e7       	ldi	r20, 0x71	; 113
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    150e:	4c e5       	ldi	r20, 0x5C	; 92
    1510:	60 e4       	ldi	r22, 0x40	; 64
    1512:	8c 2f       	mov	r24, r28
    1514:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1518:	48 e2       	ldi	r20, 0x28	; 40
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	8c 2f       	mov	r24, r28
    151e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1522:	48 e0       	ldi	r20, 0x08	; 8
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    152c:	4a e2       	ldi	r20, 0x2A	; 42
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1536:	49 e7       	ldi	r20, 0x79	; 121
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1540:	45 ed       	ldi	r20, 0xD5	; 213
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    154a:	40 e7       	ldi	r20, 0x70	; 112
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	8c 2f       	mov	r24, r28
    1550:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1554:	48 e7       	ldi	r20, 0x78	; 120
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    155e:	48 e0       	ldi	r20, 0x08	; 8
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1568:	46 e0       	ldi	r20, 0x06	; 6
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1572:	42 e7       	ldi	r20, 0x72	; 114
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	8c 2f       	mov	r24, r28
    1578:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	60 e4       	ldi	r22, 0x40	; 64
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1586:	4a e2       	ldi	r20, 0x2A	; 42
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1590:	49 e7       	ldi	r20, 0x79	; 121
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	8c 2f       	mov	r24, r28
    1596:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    159a:	4a ed       	ldi	r20, 0xDA	; 218
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	8c 2f       	mov	r24, r28
    15a0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	8c 2f       	mov	r24, r28
    15aa:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    15ae:	4c ed       	ldi	r20, 0xDC	; 220
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	8c 2f       	mov	r24, r28
    15b4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8c 2f       	mov	r24, r28
    15be:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    15c2:	41 e8       	ldi	r20, 0x81	; 129
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8c 2f       	mov	r24, r28
    15c8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	8c 2f       	mov	r24, r28
    15d2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    15d6:	49 ed       	ldi	r20, 0xD9	; 217
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	8c 2f       	mov	r24, r28
    15dc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    15e0:	41 ef       	ldi	r20, 0xF1	; 241
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	8c 2f       	mov	r24, r28
    15e6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    15ea:	4b ed       	ldi	r20, 0xDB	; 219
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	8c 2f       	mov	r24, r28
    15f0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    15f4:	40 e4       	ldi	r20, 0x40	; 64
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	8c 2f       	mov	r24, r28
    15fa:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    15fe:	48 e7       	ldi	r20, 0x78	; 120
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	8c 2f       	mov	r24, r28
    1604:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1608:	48 e2       	ldi	r20, 0x28	; 40
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	8c 2f       	mov	r24, r28
    160e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	8c 2f       	mov	r24, r28
    1618:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	8c 2f       	mov	r24, r28
    1622:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1626:	4c e0       	ldi	r20, 0x0C	; 12
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	8c 2f       	mov	r24, r28
    162c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
    1630:	ba e6       	ldi	r27, 0x6A	; 106
    1632:	24 e0       	ldi	r18, 0x04	; 4
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	b1 50       	subi	r27, 0x01	; 1
    1638:	20 40       	sbci	r18, 0x00	; 0
    163a:	80 40       	sbci	r24, 0x00	; 0
    163c:	e1 f7       	brne	.-8      	; 0x1636 <init_OLED+0x15e>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    1640:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED>
    1644:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED+0x1>
	timeoutOLED = 5;
    1648:	85 e0       	ldi	r24, 0x05	; 5
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timeoutOLED>
    1650:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timeoutOLED+0x1>

}
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	e2 97       	sbiw	r28, 0x32	; 50
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1670:	91 e1       	ldi	r25, 0x11	; 17
    1672:	e0 ef       	ldi	r30, 0xF0	; 240
    1674:	f7 e8       	ldi	r31, 0x87	; 135
    1676:	de 01       	movw	r26, r28
    1678:	92 96       	adiw	r26, 0x22	; 34
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	9a 95       	dec	r25
    1680:	e1 f7       	brne	.-8      	; 0x167a <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1682:	81 11       	cpse	r24, r1
    1684:	02 c0       	rjmp	.+4      	; 0x168a <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1686:	0c e3       	ldi	r16, 0x3C	; 60
    1688:	01 c0       	rjmp	.+2      	; 0x168c <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    168a:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	7c 01       	movw	r14, r24
    1692:	0e 94 8a 22 	call	0x4514	; 0x4514 <strcpy>
	if (strlen(strbuf) > 16) {
    1696:	f7 01       	movw	r30, r14
    1698:	01 90       	ld	r0, Z+
    169a:	00 20       	and	r0, r0
    169c:	e9 f7       	brne	.-6      	; 0x1698 <writestr_OLED+0x40>
    169e:	31 97       	sbiw	r30, 0x01	; 1
    16a0:	ee 19       	sub	r30, r14
    16a2:	ff 09       	sbc	r31, r15
    16a4:	71 97       	sbiw	r30, 0x11	; 17
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <writestr_OLED+0x52>
		strbuf[16] = '\0';
    16a8:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    16aa:	be 01       	movw	r22, r28
    16ac:	6e 5d       	subi	r22, 0xDE	; 222
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strcat>

	if (lineno == 1) {
    16b8:	11 30       	cpi	r17, 0x01	; 1
    16ba:	39 f4       	brne	.+14     	; 0x16ca <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	80 2f       	mov	r24, r16
    16c2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    16ca:	40 ec       	ldi	r20, 0xC0	; 192
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	80 2f       	mov	r24, r16
    16d0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>
    16d4:	f8 cf       	rjmp	.-16     	; 0x16c6 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    16d6:	e1 e0       	ldi	r30, 0x01	; 1
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	ec 0f       	add	r30, r28
    16dc:	fd 1f       	adc	r31, r29
    16de:	e1 0f       	add	r30, r17
    16e0:	f1 1d       	adc	r31, r1
    16e2:	40 81       	ld	r20, Z
    16e4:	60 e4       	ldi	r22, 0x40	; 64
    16e6:	80 2f       	mov	r24, r16
    16e8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    16ec:	1f 5f       	subi	r17, 0xFF	; 255
    16ee:	10 31       	cpi	r17, 0x10	; 16
    16f0:	90 f3       	brcs	.-28     	; 0x16d6 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timerOLED>
    16fa:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timerOLED+0x1>

}
    16fe:	e2 96       	adiw	r28, 0x32	; 50
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	61 97       	sbiw	r28, 0x11	; 17
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1724:	81 e1       	ldi	r24, 0x11	; 17
    1726:	e0 ef       	ldi	r30, 0xF0	; 240
    1728:	f7 e8       	ldi	r31, 0x87	; 135
    172a:	de 01       	movw	r26, r28
    172c:	11 96       	adiw	r26, 0x01	; 1
    172e:	01 90       	ld	r0, Z+
    1730:	0d 92       	st	X+, r0
    1732:	8a 95       	dec	r24
    1734:	e1 f7       	brne	.-8      	; 0x172e <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	be 01       	movw	r22, r28
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	81 2f       	mov	r24, r17
    1740:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1744:	42 e0       	ldi	r20, 0x02	; 2
    1746:	be 01       	movw	r22, r28
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	81 2f       	mov	r24, r17
    174e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
	timerOLED = 0;
    1752:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED>
    1756:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED+0x1>

}
    175a:	61 96       	adiw	r28, 0x11	; 17
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	08 95       	ret

00001768 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	84 e2       	ldi	r24, 0x24	; 36
    176e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    1772:	81 11       	cpse	r24, r1
    1774:	35 c0       	rjmp	.+106    	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	6a e0       	ldi	r22, 0x0A	; 10
    177a:	84 e2       	ldi	r24, 0x24	; 36
    177c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    1780:	81 11       	cpse	r24, r1
    1782:	2e c0       	rjmp	.+92     	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1784:	4e ef       	ldi	r20, 0xFE	; 254
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	81 e2       	ldi	r24, 0x21	; 33
    178a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    178e:	81 11       	cpse	r24, r1
    1790:	27 c0       	rjmp	.+78     	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	81 e2       	ldi	r24, 0x21	; 33
    1798:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    179c:	81 11       	cpse	r24, r1
    179e:	20 c0       	rjmp	.+64     	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    17a0:	4c ef       	ldi	r20, 0xFC	; 252
    17a2:	62 e0       	ldi	r22, 0x02	; 2
    17a4:	81 e2       	ldi	r24, 0x21	; 33
    17a6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    17aa:	81 11       	cpse	r24, r1
    17ac:	19 c0       	rjmp	.+50     	; 0x17e0 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	81 e2       	ldi	r24, 0x21	; 33
    17b4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    17b8:	81 11       	cpse	r24, r1
    17ba:	12 c0       	rjmp	.+36     	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	65 e0       	ldi	r22, 0x05	; 5
    17c0:	81 e2       	ldi	r24, 0x21	; 33
    17c2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    17c6:	81 11       	cpse	r24, r1
    17c8:	0b c0       	rjmp	.+22     	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	66 e0       	ldi	r22, 0x06	; 6
    17ce:	81 e2       	ldi	r24, 0x21	; 33
    17d0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
    17d4:	81 11       	cpse	r24, r1
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    17de:	80 e0       	ldi	r24, 0x00	; 0

}
    17e0:	08 95       	ret

000017e2 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	6c 01       	movw	r12, r24
    17f4:	8b 01       	movw	r16, r22
    17f6:	7a 01       	movw	r14, r20
    17f8:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    17fa:	69 e0       	ldi	r22, 0x09	; 9
    17fc:	81 e2       	ldi	r24, 0x21	; 33
    17fe:	0e 94 4d 08 	call	0x109a	; 0x109a <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1802:	98 2f       	mov	r25, r24
    1804:	92 95       	swap	r25
    1806:	96 95       	lsr	r25
    1808:	96 95       	lsr	r25
    180a:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    180c:	91 30       	cpi	r25, 0x01	; 1
    180e:	21 f4       	brne	.+8      	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
		*shutter = 'c';
    1810:	93 e6       	ldi	r25, 0x63	; 99
    1812:	f6 01       	movw	r30, r12
    1814:	90 83       	st	Z, r25
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
	} else if (state == 2) {
    1818:	92 30       	cpi	r25, 0x02	; 2
    181a:	21 f4       	brne	.+8      	; 0x1824 <__DATA_REGION_LENGTH__+0x24>
		*shutter = 'o';
    181c:	9f e6       	ldi	r25, 0x6F	; 111
    181e:	f6 01       	movw	r30, r12
    1820:	90 83       	st	Z, r25
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
	} else if (state == 3) {
    1824:	93 30       	cpi	r25, 0x03	; 3
    1826:	21 f4       	brne	.+8      	; 0x1830 <__DATA_REGION_LENGTH__+0x30>
		*shutter = 't';
    1828:	94 e7       	ldi	r25, 0x74	; 116
    182a:	f6 01       	movw	r30, r12
    182c:	90 83       	st	Z, r25
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
	} else {
		*shutter = 'x';
    1830:	98 e7       	ldi	r25, 0x78	; 120
    1832:	f6 01       	movw	r30, r12
    1834:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1836:	98 2f       	mov	r25, r24
    1838:	96 95       	lsr	r25
    183a:	96 95       	lsr	r25
	state &= 0b00000011;
    183c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    183e:	91 30       	cpi	r25, 0x01	; 1
    1840:	21 f4       	brne	.+8      	; 0x184a <__DATA_REGION_LENGTH__+0x4a>
		*right = 'c';
    1842:	93 e6       	ldi	r25, 0x63	; 99
    1844:	f7 01       	movw	r30, r14
    1846:	90 83       	st	Z, r25
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
	} else if (state == 2) {
    184a:	92 30       	cpi	r25, 0x02	; 2
    184c:	21 f4       	brne	.+8      	; 0x1856 <__DATA_REGION_LENGTH__+0x56>
		*right = 'o';
    184e:	9f e6       	ldi	r25, 0x6F	; 111
    1850:	f7 01       	movw	r30, r14
    1852:	90 83       	st	Z, r25
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
	} else if (state == 3) {
    1856:	93 30       	cpi	r25, 0x03	; 3
    1858:	21 f4       	brne	.+8      	; 0x1862 <__DATA_REGION_LENGTH__+0x62>
		*right = 't';
    185a:	94 e7       	ldi	r25, 0x74	; 116
    185c:	f7 01       	movw	r30, r14
    185e:	90 83       	st	Z, r25
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
	} else {
		*right = 'x';
    1862:	98 e7       	ldi	r25, 0x78	; 120
    1864:	f7 01       	movw	r30, r14
    1866:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1868:	98 2f       	mov	r25, r24
    186a:	92 95       	swap	r25
    186c:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    186e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1870:	91 30       	cpi	r25, 0x01	; 1
    1872:	21 f4       	brne	.+8      	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
		*left = 'o';
    1874:	9f e6       	ldi	r25, 0x6F	; 111
    1876:	f8 01       	movw	r30, r16
    1878:	90 83       	st	Z, r25
    187a:	0f c0       	rjmp	.+30     	; 0x189a <__DATA_REGION_LENGTH__+0x9a>
	} else if (state == 2) {
    187c:	92 30       	cpi	r25, 0x02	; 2
    187e:	21 f4       	brne	.+8      	; 0x1888 <__DATA_REGION_LENGTH__+0x88>
		*left = 'c';
    1880:	93 e6       	ldi	r25, 0x63	; 99
    1882:	f8 01       	movw	r30, r16
    1884:	90 83       	st	Z, r25
    1886:	09 c0       	rjmp	.+18     	; 0x189a <__DATA_REGION_LENGTH__+0x9a>
	} else if (state == 3) {
    1888:	93 30       	cpi	r25, 0x03	; 3
    188a:	21 f4       	brne	.+8      	; 0x1894 <__DATA_REGION_LENGTH__+0x94>
		*left = 't';
    188c:	94 e7       	ldi	r25, 0x74	; 116
    188e:	f8 01       	movw	r30, r16
    1890:	90 83       	st	Z, r25
    1892:	03 c0       	rjmp	.+6      	; 0x189a <__DATA_REGION_LENGTH__+0x9a>
	} else {
		*left = 'x';
    1894:	98 e7       	ldi	r25, 0x78	; 120
    1896:	f8 01       	movw	r30, r16
    1898:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    189a:	81 ff       	sbrs	r24, 1
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <__DATA_REGION_LENGTH__+0xa4>
		*air = '0';
    189e:	80 e3       	ldi	r24, 0x30	; 48
    18a0:	88 83       	st	Y, r24
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <__DATA_REGION_LENGTH__+0xa8>
	} else {
		*air = '1';
    18a4:	81 e3       	ldi	r24, 0x31	; 49
    18a6:	88 83       	st	Y, r24
	}
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	08 95       	ret

000018ba <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	d8 2f       	mov	r29, r24
    18c0:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    18c2:	69 e0       	ldi	r22, 0x09	; 9
    18c4:	84 e2       	ldi	r24, 0x24	; 36
    18c6:	0e 94 4d 08 	call	0x109a	; 0x109a <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    18ca:	8d 2b       	or	r24, r29
    18cc:	48 2f       	mov	r20, r24
    18ce:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    18d0:	6a e0       	ldi	r22, 0x0A	; 10
    18d2:	84 e2       	ldi	r24, 0x24	; 36
    18d4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	6a 97       	sbiw	r28, 0x1a	; 26
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    18ec:	99 e0       	ldi	r25, 0x09	; 9
    18ee:	e9 e1       	ldi	r30, 0x19	; 25
    18f0:	f8 e8       	ldi	r31, 0x88	; 136
    18f2:	de 01       	movw	r26, r28
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	01 90       	ld	r0, Z+
    18f8:	0d 92       	st	X+, r0
    18fa:	9a 95       	dec	r25
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    18fe:	8c 36       	cpi	r24, 0x6C	; 108
    1900:	31 f1       	breq	.+76     	; 0x194e <close_PNEU+0x70>
    1902:	18 f4       	brcc	.+6      	; 0x190a <close_PNEU+0x2c>
    1904:	82 36       	cpi	r24, 0x62	; 98
    1906:	39 f0       	breq	.+14     	; 0x1916 <close_PNEU+0x38>
    1908:	75 c0       	rjmp	.+234    	; 0x19f4 <close_PNEU+0x116>
    190a:	82 37       	cpi	r24, 0x72	; 114
    190c:	c1 f1       	breq	.+112    	; 0x197e <close_PNEU+0xa0>
    190e:	83 37       	cpi	r24, 0x73	; 115
    1910:	09 f4       	brne	.+2      	; 0x1914 <close_PNEU+0x36>
    1912:	4d c0       	rjmp	.+154    	; 0x19ae <close_PNEU+0xd0>
    1914:	6f c0       	rjmp	.+222    	; 0x19f4 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1916:	6a ee       	ldi	r22, 0xEA	; 234
    1918:	84 e4       	ldi	r24, 0x44	; 68
    191a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    191e:	66 ee       	ldi	r22, 0xE6	; 230
    1920:	88 e8       	ldi	r24, 0x88	; 136
    1922:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	98 e8       	ldi	r25, 0x88	; 136
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	9f 93       	push	r25
    1934:	8f 93       	push	r24
    1936:	09 96       	adiw	r24, 0x09	; 9
    1938:	9f 93       	push	r25
    193a:	8f 93       	push	r24
    193c:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	47 c0       	rjmp	.+142    	; 0x19dc <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    194e:	6a ee       	ldi	r22, 0xEA	; 234
    1950:	84 e4       	ldi	r24, 0x44	; 68
    1952:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1956:	86 e0       	ldi	r24, 0x06	; 6
    1958:	98 e8       	ldi	r25, 0x88	; 136
    195a:	9f 93       	push	r25
    195c:	8f 93       	push	r24
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	9f 93       	push	r25
    1964:	8f 93       	push	r24
    1966:	09 96       	adiw	r24, 0x09	; 9
    1968:	9f 93       	push	r25
    196a:	8f 93       	push	r24
    196c:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	2f c0       	rjmp	.+94     	; 0x19dc <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    197e:	66 ee       	ldi	r22, 0xE6	; 230
    1980:	88 e8       	ldi	r24, 0x88	; 136
    1982:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1986:	8b e0       	ldi	r24, 0x0B	; 11
    1988:	98 e8       	ldi	r25, 0x88	; 136
    198a:	9f 93       	push	r25
    198c:	8f 93       	push	r24
    198e:	ce 01       	movw	r24, r28
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	09 96       	adiw	r24, 0x09	; 9
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	17 c0       	rjmp	.+46     	; 0x19dc <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    19ae:	6c ee       	ldi	r22, 0xEC	; 236
    19b0:	82 e2       	ldi	r24, 0x22	; 34
    19b2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    19b6:	81 e1       	ldi	r24, 0x11	; 17
    19b8:	98 e8       	ldi	r25, 0x88	; 136
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	ce 01       	movw	r24, r28
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	09 96       	adiw	r24, 0x09	; 9
    19c8:	9f 93       	push	r25
    19ca:	8f 93       	push	r24
    19cc:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 89 0b 	call	0x1712	; 0x1712 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	be 01       	movw	r22, r28
    19e6:	66 5f       	subi	r22, 0xF6	; 246
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
	return(GREATERPROMPT);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    19f4:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    19f6:	6a 96       	adiw	r28, 0x1a	; 26
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	69 97       	sbiw	r28, 0x19	; 25
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    1a10:	98 e0       	ldi	r25, 0x08	; 8
    1a12:	e2 e2       	ldi	r30, 0x22	; 34
    1a14:	f8 e8       	ldi	r31, 0x88	; 136
    1a16:	de 01       	movw	r26, r28
    1a18:	11 96       	adiw	r26, 0x01	; 1
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	0d 92       	st	X+, r0
    1a1e:	9a 95       	dec	r25
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    1a22:	8c 36       	cpi	r24, 0x6C	; 108
    1a24:	31 f1       	breq	.+76     	; 0x1a72 <open_PNEU+0x70>
    1a26:	18 f4       	brcc	.+6      	; 0x1a2e <open_PNEU+0x2c>
    1a28:	82 36       	cpi	r24, 0x62	; 98
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <open_PNEU+0x38>
    1a2c:	75 c0       	rjmp	.+234    	; 0x1b18 <open_PNEU+0x116>
    1a2e:	82 37       	cpi	r24, 0x72	; 114
    1a30:	c1 f1       	breq	.+112    	; 0x1aa2 <open_PNEU+0xa0>
    1a32:	83 37       	cpi	r24, 0x73	; 115
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <open_PNEU+0x36>
    1a36:	4d c0       	rjmp	.+154    	; 0x1ad2 <open_PNEU+0xd0>
    1a38:	6f c0       	rjmp	.+222    	; 0x1b18 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a3a:	6e ea       	ldi	r22, 0xAE	; 174
    1a3c:	84 e4       	ldi	r24, 0x44	; 68
    1a3e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a42:	6e e6       	ldi	r22, 0x6E	; 110
    1a44:	88 e8       	ldi	r24, 0x88	; 136
    1a46:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	98 e8       	ldi	r25, 0x88	; 136
    1a4e:	9f 93       	push	r25
    1a50:	8f 93       	push	r24
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	9f 93       	push	r25
    1a58:	8f 93       	push	r24
    1a5a:	08 96       	adiw	r24, 0x08	; 8
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	47 c0       	rjmp	.+142    	; 0x1b00 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a72:	6e ea       	ldi	r22, 0xAE	; 174
    1a74:	84 e4       	ldi	r24, 0x44	; 68
    1a76:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a7a:	86 e0       	ldi	r24, 0x06	; 6
    1a7c:	98 e8       	ldi	r25, 0x88	; 136
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	08 96       	adiw	r24, 0x08	; 8
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	2f c0       	rjmp	.+94     	; 0x1b00 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1aa2:	6e e6       	ldi	r22, 0x6E	; 110
    1aa4:	88 e8       	ldi	r24, 0x88	; 136
    1aa6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1aaa:	8b e0       	ldi	r24, 0x0B	; 11
    1aac:	98 e8       	ldi	r25, 0x88	; 136
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	08 96       	adiw	r24, 0x08	; 8
    1abc:	9f 93       	push	r25
    1abe:	8f 93       	push	r24
    1ac0:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	17 c0       	rjmp	.+46     	; 0x1b00 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1ad2:	6e ec       	ldi	r22, 0xCE	; 206
    1ad4:	82 e2       	ldi	r24, 0x22	; 34
    1ad6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1ada:	81 e1       	ldi	r24, 0x11	; 17
    1adc:	98 e8       	ldi	r25, 0x88	; 136
    1ade:	9f 93       	push	r25
    1ae0:	8f 93       	push	r24
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	08 96       	adiw	r24, 0x08	; 8
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			break;
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	0e 94 89 0b 	call	0x1712	; 0x1712 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	be 01       	movw	r22, r28
    1b0a:	67 5f       	subi	r22, 0xF7	; 247
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
	return(GREATERPROMPT);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1b18:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1b1a:	69 96       	adiw	r28, 0x19	; 25
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1b26:	1f 92       	push	r1
    1b28:	0f 92       	push	r0
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	0f 92       	push	r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	2f 93       	push	r18
    1b32:	3f 93       	push	r19
    1b34:	4f 93       	push	r20
    1b36:	5f 93       	push	r21
    1b38:	6f 93       	push	r22
    1b3a:	7f 93       	push	r23
    1b3c:	8f 93       	push	r24
    1b3e:	9f 93       	push	r25
    1b40:	af 93       	push	r26
    1b42:	bf 93       	push	r27
    1b44:	ef 93       	push	r30
    1b46:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1b48:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1b4c:	88 23       	and	r24, r24
    1b4e:	4c f4       	brge	.+18     	; 0x1b62 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1b50:	80 e8       	ldi	r24, 0x80	; 128
    1b52:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1b56:	68 e0       	ldi	r22, 0x08	; 8
    1b58:	81 e2       	ldi	r24, 0x21	; 33
    1b5a:	0e 94 4d 08 	call	0x109a	; 0x109a <read_MCP23008>
    1b5e:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <pneuState>
	}

}
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	7f 91       	pop	r23
    1b70:	6f 91       	pop	r22
    1b72:	5f 91       	pop	r21
    1b74:	4f 91       	pop	r20
    1b76:	3f 91       	pop	r19
    1b78:	2f 91       	pop	r18
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	0f 90       	pop	r0
    1b80:	1f 90       	pop	r1
    1b82:	18 95       	reti

00001b84 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b84:	e0 e0       	ldi	r30, 0x00	; 0
    1b86:	f4 e0       	ldi	r31, 0x04	; 4
    1b88:	88 e0       	ldi	r24, 0x08	; 8
    1b8a:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b8c:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b8e:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b90:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b92:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b94:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b96:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b98:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b9a:	e0 e2       	ldi	r30, 0x20	; 32
    1b9c:	f4 e0       	ldi	r31, 0x04	; 4
    1b9e:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1ba0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1ba2:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1ba4:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1ba6:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1ba8:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1baa:	e0 e4       	ldi	r30, 0x40	; 64
    1bac:	f4 e0       	ldi	r31, 0x04	; 4
    1bae:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1bb0:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1bb2:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1bb4:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1bb6:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1bb8:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1bba:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1bbc:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bbe:	e0 e6       	ldi	r30, 0x60	; 96
    1bc0:	f4 e0       	ldi	r31, 0x04	; 4
    1bc2:	94 e0       	ldi	r25, 0x04	; 4
    1bc4:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bc6:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bc8:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bca:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bcc:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bce:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bd0:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bd2:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1bd4:	e0 e8       	ldi	r30, 0x80	; 128
    1bd6:	f4 e0       	ldi	r31, 0x04	; 4
    1bd8:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1bda:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1bdc:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1bde:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1be0:	e0 ea       	ldi	r30, 0xA0	; 160
    1be2:	f4 e0       	ldi	r31, 0x04	; 4
    1be4:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1be6:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1be8:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1bea:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1bec:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1bee:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1bf0:	86 8b       	std	Z+22, r24	; 0x16
    1bf2:	08 95       	ret

00001bf4 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1bf4:	2f 92       	push	r2
    1bf6:	3f 92       	push	r3
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	c1 50       	subi	r28, 0x01	; 1
    1c1e:	d3 40       	sbci	r29, 0x03	; 3
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1c24:	92 e4       	ldi	r25, 0x42	; 66
    1c26:	e8 e8       	ldi	r30, 0x88	; 136
    1c28:	f8 e8       	ldi	r31, 0x88	; 136
    1c2a:	de 01       	movw	r26, r28
    1c2c:	ab 5a       	subi	r26, 0xAB	; 171
    1c2e:	be 4f       	sbci	r27, 0xFE	; 254
    1c30:	01 90       	ld	r0, Z+
    1c32:	0d 92       	st	X+, r0
    1c34:	9a 95       	dec	r25
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1c38:	93 e3       	ldi	r25, 0x33	; 51
    1c3a:	ea ec       	ldi	r30, 0xCA	; 202
    1c3c:	f8 e8       	ldi	r31, 0x88	; 136
    1c3e:	de 01       	movw	r26, r28
    1c40:	a9 56       	subi	r26, 0x69	; 105
    1c42:	be 4f       	sbci	r27, 0xFE	; 254
    1c44:	01 90       	ld	r0, Z+
    1c46:	0d 92       	st	X+, r0
    1c48:	9a 95       	dec	r25
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <report+0x50>
	const char format1_MTR[] = "$S%dMTR,%s,%c,%3.1f,V,%3.1f,C,%s";
    1c4c:	91 e2       	ldi	r25, 0x21	; 33
    1c4e:	ed ef       	ldi	r30, 0xFD	; 253
    1c50:	f8 e8       	ldi	r31, 0x88	; 136
    1c52:	de 01       	movw	r26, r28
    1c54:	a6 53       	subi	r26, 0x36	; 54
    1c56:	be 4f       	sbci	r27, 0xFE	; 254
    1c58:	01 90       	ld	r0, Z+
    1c5a:	0d 92       	st	X+, r0
    1c5c:	9a 95       	dec	r25
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <report+0x64>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1c60:	90 e2       	ldi	r25, 0x20	; 32
    1c62:	ee e1       	ldi	r30, 0x1E	; 30
    1c64:	f9 e8       	ldi	r31, 0x89	; 137
    1c66:	de 01       	movw	r26, r28
    1c68:	a5 51       	subi	r26, 0x15	; 21
    1c6a:	be 4f       	sbci	r27, 0xFE	; 254
    1c6c:	01 90       	ld	r0, Z+
    1c6e:	0d 92       	st	X+, r0
    1c70:	9a 95       	dec	r25
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1c74:	92 e1       	ldi	r25, 0x12	; 18
    1c76:	ee e3       	ldi	r30, 0x3E	; 62
    1c78:	f9 e8       	ldi	r31, 0x89	; 137
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a5 5f       	subi	r26, 0xF5	; 245
    1c7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c80:	01 90       	ld	r0, Z+
    1c82:	0d 92       	st	X+, r0
    1c84:	9a 95       	dec	r25
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <report+0x8c>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c88:	91 e3       	ldi	r25, 0x31	; 49
    1c8a:	e0 e5       	ldi	r30, 0x50	; 80
    1c8c:	f9 e8       	ldi	r31, 0x89	; 137
    1c8e:	de 01       	movw	r26, r28
    1c90:	a3 5e       	subi	r26, 0xE3	; 227
    1c92:	bd 4f       	sbci	r27, 0xFD	; 253
    1c94:	01 90       	ld	r0, Z+
    1c96:	0d 92       	st	X+, r0
    1c98:	9a 95       	dec	r25
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c9c:	93 e1       	ldi	r25, 0x13	; 19
    1c9e:	e1 e8       	ldi	r30, 0x81	; 129
    1ca0:	f9 e8       	ldi	r31, 0x89	; 137
    1ca2:	de 01       	movw	r26, r28
    1ca4:	a2 5b       	subi	r26, 0xB2	; 178
    1ca6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ca8:	01 90       	ld	r0, Z+
    1caa:	0d 92       	st	X+, r0
    1cac:	9a 95       	dec	r25
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1cb0:	93 e1       	ldi	r25, 0x13	; 19
    1cb2:	e4 e9       	ldi	r30, 0x94	; 148
    1cb4:	f9 e8       	ldi	r31, 0x89	; 137
    1cb6:	de 01       	movw	r26, r28
    1cb8:	af 59       	subi	r26, 0x9F	; 159
    1cba:	bd 4f       	sbci	r27, 0xFD	; 253
    1cbc:	01 90       	ld	r0, Z+
    1cbe:	0d 92       	st	X+, r0
    1cc0:	9a 95       	dec	r25
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <report+0xc8>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1cc4:	9d e1       	ldi	r25, 0x1D	; 29
    1cc6:	e7 ea       	ldi	r30, 0xA7	; 167
    1cc8:	f9 e8       	ldi	r31, 0x89	; 137
    1cca:	de 01       	movw	r26, r28
    1ccc:	ac 58       	subi	r26, 0x8C	; 140
    1cce:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	0d 92       	st	X+, r0
    1cd4:	9a 95       	dec	r25
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <report+0xdc>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1cd8:	99 e2       	ldi	r25, 0x29	; 41
    1cda:	e4 ec       	ldi	r30, 0xC4	; 196
    1cdc:	f9 e8       	ldi	r31, 0x89	; 137
    1cde:	de 01       	movw	r26, r28
    1ce0:	af 56       	subi	r26, 0x6F	; 111
    1ce2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	0d 92       	st	X+, r0
    1ce8:	9a 95       	dec	r25
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1cec:	9d e0       	ldi	r25, 0x0D	; 13
    1cee:	ed ee       	ldi	r30, 0xED	; 237
    1cf0:	f9 e8       	ldi	r31, 0x89	; 137
    1cf2:	de 01       	movw	r26, r28
    1cf4:	a6 54       	subi	r26, 0x46	; 70
    1cf6:	bd 4f       	sbci	r27, 0xFD	; 253
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	0d 92       	st	X+, r0
    1cfc:	9a 95       	dec	r25
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <report+0x104>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1d00:	91 e1       	ldi	r25, 0x11	; 17
    1d02:	ea ef       	ldi	r30, 0xFA	; 250
    1d04:	f9 e8       	ldi	r31, 0x89	; 137
    1d06:	de 01       	movw	r26, r28
    1d08:	a9 53       	subi	r26, 0x39	; 57
    1d0a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d0c:	01 90       	ld	r0, Z+
    1d0e:	0d 92       	st	X+, r0
    1d10:	9a 95       	dec	r25
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1d14:	08 2f       	mov	r16, r24
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	84 e3       	ldi	r24, 0x34	; 52
    1d1a:	80 9f       	mul	r24, r16
    1d1c:	f0 01       	movw	r30, r0
    1d1e:	81 9f       	mul	r24, r17
    1d20:	f0 0d       	add	r31, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	ea 5f       	subi	r30, 0xFA	; 250
    1d26:	f7 4d       	sbci	r31, 0xD7	; 215
    1d28:	e1 81       	ldd	r30, Z+1	; 0x01
    1d2a:	8e 2f       	mov	r24, r30
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e1 54       	subi	r30, 0x41	; 65
    1d32:	f1 09       	sbc	r31, r1
    1d34:	e6 33       	cpi	r30, 0x36	; 54
    1d36:	f1 05       	cpc	r31, r1
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <report+0x148>
    1d3a:	69 c5       	rjmp	.+2770   	; 0x280e <report+0xc1a>
    1d3c:	ed 58       	subi	r30, 0x8D	; 141
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1d44:	ce 01       	movw	r24, r28
    1d46:	8b 5e       	subi	r24, 0xEB	; 235
    1d48:	9e 4f       	sbci	r25, 0xFE	; 254
    1d4a:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1d4e:	84 e3       	ldi	r24, 0x34	; 52
    1d50:	80 9f       	mul	r24, r16
    1d52:	f0 01       	movw	r30, r0
    1d54:	81 9f       	mul	r24, r17
    1d56:	f0 0d       	add	r31, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	ea 5f       	subi	r30, 0xFA	; 250
    1d5c:	f7 4d       	sbci	r31, 0xD7	; 215
    1d5e:	e1 80       	ldd	r14, Z+1	; 0x01
    1d60:	0f 2e       	mov	r0, r31
    1d62:	ff e3       	ldi	r31, 0x3F	; 63
    1d64:	ff 2e       	mov	r15, r31
    1d66:	f0 2d       	mov	r31, r0
    1d68:	fe 0c       	add	r15, r14
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	48 51       	subi	r20, 0x18	; 24
    1d6e:	5d 4f       	sbci	r21, 0xFD	; 253
    1d70:	68 e1       	ldi	r22, 0x18	; 24
    1d72:	8f 2d       	mov	r24, r15
    1d74:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <get_MOTORFloat>
			if (retval == ERROR) {
    1d78:	83 36       	cpi	r24, 0x63	; 99
    1d7a:	61 f4       	brne	.+24     	; 0x1d94 <report+0x1a0>
				voltage = -666.0;
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e8       	ldi	r25, 0x80	; 128
    1d80:	a6 e2       	ldi	r26, 0x26	; 38
    1d82:	b4 ec       	ldi	r27, 0xC4	; 196
    1d84:	c8 51       	subi	r28, 0x18	; 24
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	88 83       	st	Y, r24
    1d8a:	99 83       	std	Y+1, r25	; 0x01
    1d8c:	aa 83       	std	Y+2, r26	; 0x02
    1d8e:	bb 83       	std	Y+3, r27	; 0x03
    1d90:	c8 5e       	subi	r28, 0xE8	; 232
    1d92:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1d94:	ae 01       	movw	r20, r28
    1d96:	4c 51       	subi	r20, 0x1C	; 28
    1d98:	5d 4f       	sbci	r21, 0xFD	; 253
    1d9a:	62 e5       	ldi	r22, 0x52	; 82
    1d9c:	8f 2d       	mov	r24, r15
    1d9e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <get_MOTORFloat>
			if (retval == ERROR) {
    1da2:	83 36       	cpi	r24, 0x63	; 99
    1da4:	61 f4       	brne	.+24     	; 0x1dbe <report+0x1ca>
				t0 = -666.0;
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e8       	ldi	r25, 0x80	; 128
    1daa:	a6 e2       	ldi	r26, 0x26	; 38
    1dac:	b4 ec       	ldi	r27, 0xC4	; 196
    1dae:	cc 51       	subi	r28, 0x1C	; 28
    1db0:	dd 4f       	sbci	r29, 0xFD	; 253
    1db2:	88 83       	st	Y, r24
    1db4:	99 83       	std	Y+1, r25	; 0x01
    1db6:	aa 83       	std	Y+2, r26	; 0x02
    1db8:	bb 83       	std	Y+3, r27	; 0x03
    1dba:	c4 5e       	subi	r28, 0xE4	; 228
    1dbc:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1dbe:	24 e3       	ldi	r18, 0x34	; 52
    1dc0:	20 9f       	mul	r18, r16
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	21 9f       	mul	r18, r17
    1dc6:	90 0d       	add	r25, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	8f 5c       	subi	r24, 0xCF	; 207
    1dcc:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
    1dce:	cc 51       	subi	r28, 0x1C	; 28
    1dd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd2:	68 81       	ld	r22, Y
    1dd4:	c4 5e       	subi	r28, 0xE4	; 228
    1dd6:	d2 40       	sbci	r29, 0x02	; 2
    1dd8:	cb 51       	subi	r28, 0x1B	; 27
    1dda:	dd 4f       	sbci	r29, 0xFD	; 253
    1ddc:	78 81       	ld	r23, Y
    1dde:	c5 5e       	subi	r28, 0xE5	; 229
    1de0:	d2 40       	sbci	r29, 0x02	; 2
    1de2:	ca 51       	subi	r28, 0x1A	; 26
    1de4:	dd 4f       	sbci	r29, 0xFD	; 253
    1de6:	e8 81       	ld	r30, Y
    1de8:	c6 5e       	subi	r28, 0xE6	; 230
    1dea:	d2 40       	sbci	r29, 0x02	; 2
    1dec:	c9 51       	subi	r28, 0x19	; 25
    1dee:	dd 4f       	sbci	r29, 0xFD	; 253
    1df0:	f8 81       	ld	r31, Y
    1df2:	c7 5e       	subi	r28, 0xE7	; 231
    1df4:	d2 40       	sbci	r29, 0x02	; 2
    1df6:	c8 51       	subi	r28, 0x18	; 24
    1df8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dfa:	28 81       	ld	r18, Y
    1dfc:	c8 5e       	subi	r28, 0xE8	; 232
    1dfe:	d2 40       	sbci	r29, 0x02	; 2
    1e00:	c7 51       	subi	r28, 0x17	; 23
    1e02:	dd 4f       	sbci	r29, 0xFD	; 253
    1e04:	38 81       	ld	r19, Y
    1e06:	c9 5e       	subi	r28, 0xE9	; 233
    1e08:	d2 40       	sbci	r29, 0x02	; 2
    1e0a:	c6 51       	subi	r28, 0x16	; 22
    1e0c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e0e:	48 81       	ld	r20, Y
    1e10:	ca 5e       	subi	r28, 0xEA	; 234
    1e12:	d2 40       	sbci	r29, 0x02	; 2
    1e14:	c5 51       	subi	r28, 0x15	; 21
    1e16:	dd 4f       	sbci	r29, 0xFD	; 253
    1e18:	58 81       	ld	r21, Y
    1e1a:	cb 5e       	subi	r28, 0xEB	; 235
    1e1c:	d2 40       	sbci	r29, 0x02	; 2
    1e1e:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1e22:	a2 ff       	sbrs	r26, 2
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <report+0x238>
    1e26:	a2 e0       	ldi	r26, 0x02	; 2
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <report+0x23c>
    1e2c:	a1 e0       	ldi	r26, 0x01	; 1
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	ff 93       	push	r31
    1e36:	ef 93       	push	r30
    1e38:	7f 93       	push	r23
    1e3a:	6f 93       	push	r22
    1e3c:	5f 93       	push	r21
    1e3e:	4f 93       	push	r20
    1e40:	3f 93       	push	r19
    1e42:	2f 93       	push	r18
    1e44:	1f 92       	push	r1
    1e46:	ef 92       	push	r14
    1e48:	ce 01       	movw	r24, r28
    1e4a:	8b 5e       	subi	r24, 0xEB	; 235
    1e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e4e:	9f 93       	push	r25
    1e50:	8f 93       	push	r24
    1e52:	bf 93       	push	r27
    1e54:	af 93       	push	r26
    1e56:	8b 54       	subi	r24, 0x4B	; 75
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	9f 93       	push	r25
    1e5c:	8f 93       	push	r24
    1e5e:	8e 01       	movw	r16, r28
    1e60:	0f 5f       	subi	r16, 0xFF	; 255
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	1f 93       	push	r17
    1e66:	0f 93       	push	r16
    1e68:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
				voltage, t0, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e72:	f8 01       	movw	r30, r16
    1e74:	01 90       	ld	r0, Z+
    1e76:	00 20       	and	r0, r0
    1e78:	e9 f7       	brne	.-6      	; 0x1e74 <report+0x280>
    1e7a:	31 97       	sbiw	r30, 0x01	; 1
    1e7c:	af 01       	movw	r20, r30
    1e7e:	40 1b       	sub	r20, r16
    1e80:	51 0b       	sbc	r21, r17
    1e82:	b8 01       	movw	r22, r16
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			break;
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	c5 c4       	rjmp	.+2442   	; 0x281a <report+0xc26>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1e90:	ce 01       	movw	r24, r28
    1e92:	8b 5e       	subi	r24, 0xEB	; 235
    1e94:	9e 4f       	sbci	r25, 0xFE	; 254
    1e96:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1e9a:	84 e3       	ldi	r24, 0x34	; 52
    1e9c:	80 9f       	mul	r24, r16
    1e9e:	f0 01       	movw	r30, r0
    1ea0:	81 9f       	mul	r24, r17
    1ea2:	f0 0d       	add	r31, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	ea 5f       	subi	r30, 0xFA	; 250
    1ea8:	f7 4d       	sbci	r31, 0xD7	; 215
    1eaa:	81 81       	ldd	r24, Z+1	; 0x01
    1eac:	0f 2e       	mov	r0, r31
    1eae:	ff e1       	ldi	r31, 0x1F	; 31
    1eb0:	7f 2e       	mov	r7, r31
    1eb2:	f0 2d       	mov	r31, r0
    1eb4:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1eb6:	ae 01       	movw	r20, r28
    1eb8:	48 52       	subi	r20, 0x28	; 40
    1eba:	5d 4f       	sbci	r21, 0xFD	; 253
    1ebc:	60 e1       	ldi	r22, 0x10	; 16
    1ebe:	87 2d       	mov	r24, r7
    1ec0:	0e 94 4a 14 	call	0x2894	; 0x2894 <get_MOTOREncoder>
			if (retval == ERROR) {
    1ec4:	83 36       	cpi	r24, 0x63	; 99
    1ec6:	61 f4       	brne	.+24     	; 0x1ee0 <report+0x2ec>
				encoderValue = 0x7FFFFFFF;
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	9f ef       	ldi	r25, 0xFF	; 255
    1ecc:	af ef       	ldi	r26, 0xFF	; 255
    1ece:	bf e7       	ldi	r27, 0x7F	; 127
    1ed0:	c8 52       	subi	r28, 0x28	; 40
    1ed2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ed4:	88 83       	st	Y, r24
    1ed6:	99 83       	std	Y+1, r25	; 0x01
    1ed8:	aa 83       	std	Y+2, r26	; 0x02
    1eda:	bb 83       	std	Y+3, r27	; 0x03
    1edc:	c8 5d       	subi	r28, 0xD8	; 216
    1ede:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1ee0:	c8 52       	subi	r28, 0x28	; 40
    1ee2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee4:	68 81       	ld	r22, Y
    1ee6:	79 81       	ldd	r23, Y+1	; 0x01
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	c8 5d       	subi	r28, 0xD8	; 216
    1eee:	d2 40       	sbci	r29, 0x02	; 2
    1ef0:	2c e0       	ldi	r18, 0x0C	; 12
    1ef2:	31 e0       	ldi	r19, 0x01	; 1
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	0e 94 cf 20 	call	0x419e	; 0x419e <__divmodsi4>
    1efc:	f2 2e       	mov	r15, r18
    1efe:	e3 2e       	mov	r14, r19
    1f00:	d4 2e       	mov	r13, r20
    1f02:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1f04:	ae 01       	movw	r20, r28
    1f06:	44 52       	subi	r20, 0x24	; 36
    1f08:	5d 4f       	sbci	r21, 0xFD	; 253
    1f0a:	62 e1       	ldi	r22, 0x12	; 18
    1f0c:	87 2d       	mov	r24, r7
    1f0e:	0e 94 4a 14 	call	0x2894	; 0x2894 <get_MOTOREncoder>
			if (retval == ERROR) {
    1f12:	83 36       	cpi	r24, 0x63	; 99
    1f14:	61 f4       	brne	.+24     	; 0x1f2e <report+0x33a>
				encoderSpeed = 0x7FFFFFFF;
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	af ef       	ldi	r26, 0xFF	; 255
    1f1c:	bf e7       	ldi	r27, 0x7F	; 127
    1f1e:	c4 52       	subi	r28, 0x24	; 36
    1f20:	dd 4f       	sbci	r29, 0xFD	; 253
    1f22:	88 83       	st	Y, r24
    1f24:	99 83       	std	Y+1, r25	; 0x01
    1f26:	aa 83       	std	Y+2, r26	; 0x02
    1f28:	bb 83       	std	Y+3, r27	; 0x03
    1f2a:	cc 5d       	subi	r28, 0xDC	; 220
    1f2c:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    1f2e:	c4 52       	subi	r28, 0x24	; 36
    1f30:	dd 4f       	sbci	r29, 0xFD	; 253
    1f32:	68 81       	ld	r22, Y
    1f34:	79 81       	ldd	r23, Y+1	; 0x01
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	cc 5d       	subi	r28, 0xDC	; 220
    1f3c:	d2 40       	sbci	r29, 0x02	; 2
    1f3e:	2c e0       	ldi	r18, 0x0C	; 12
    1f40:	31 e0       	ldi	r19, 0x01	; 1
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	0e 94 cf 20 	call	0x419e	; 0x419e <__divmodsi4>
    1f4a:	b2 2e       	mov	r11, r18
    1f4c:	a3 2e       	mov	r10, r19
    1f4e:	94 2e       	mov	r9, r20
    1f50:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    1f52:	ae 01       	movw	r20, r28
    1f54:	40 52       	subi	r20, 0x20	; 32
    1f56:	5d 4f       	sbci	r21, 0xFD	; 253
    1f58:	61 e3       	ldi	r22, 0x31	; 49
    1f5a:	87 2d       	mov	r24, r7
    1f5c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <get_MOTORInt32>
			if (retval == ERROR) {
    1f60:	83 36       	cpi	r24, 0x63	; 99
    1f62:	61 f4       	brne	.+24     	; 0x1f7c <report+0x388>
				icurrents = 0x7FFFFFFF;
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	af ef       	ldi	r26, 0xFF	; 255
    1f6a:	bf e7       	ldi	r27, 0x7F	; 127
    1f6c:	c0 52       	subi	r28, 0x20	; 32
    1f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f70:	88 83       	st	Y, r24
    1f72:	99 83       	std	Y+1, r25	; 0x01
    1f74:	aa 83       	std	Y+2, r26	; 0x02
    1f76:	bb 83       	std	Y+3, r27	; 0x03
    1f78:	c0 5e       	subi	r28, 0xE0	; 224
    1f7a:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1f7c:	c0 52       	subi	r28, 0x20	; 32
    1f7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f80:	88 81       	ld	r24, Y
    1f82:	99 81       	ldd	r25, Y+1	; 0x01
    1f84:	aa 81       	ldd	r26, Y+2	; 0x02
    1f86:	bb 81       	ldd	r27, Y+3	; 0x03
    1f88:	c0 5e       	subi	r28, 0xE0	; 224
    1f8a:	d2 40       	sbci	r29, 0x02	; 2
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	aa 27       	eor	r26, r26
    1f90:	bb 27       	eor	r27, r27
    1f92:	9c 01       	movw	r18, r24
    1f94:	22 0f       	add	r18, r18
    1f96:	33 1f       	adc	r19, r19
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1fa8:	44 e3       	ldi	r20, 0x34	; 52
    1faa:	40 9f       	mul	r20, r16
    1fac:	90 01       	movw	r18, r0
    1fae:	41 9f       	mul	r20, r17
    1fb0:	30 0d       	add	r19, r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	4f 5c       	subi	r20, 0xCF	; 207
    1fb8:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1fba:	f9 01       	movw	r30, r18
    1fbc:	ea 5f       	subi	r30, 0xFA	; 250
    1fbe:	f7 4d       	sbci	r31, 0xD7	; 215
    1fc0:	21 81       	ldd	r18, Z+1	; 0x01
    1fc2:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1fc6:	32 ff       	sbrs	r19, 2
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <report+0x3dc>
    1fca:	32 e0       	ldi	r19, 0x02	; 2
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <report+0x3e0>
    1fd0:	31 e0       	ldi	r19, 0x01	; 1
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	5f 93       	push	r21
    1fd6:	4f 93       	push	r20
    1fd8:	9f 93       	push	r25
    1fda:	8f 93       	push	r24
    1fdc:	8f 92       	push	r8
    1fde:	9f 92       	push	r9
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	1f 92       	push	r1
    1fee:	2f 93       	push	r18
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	8b 5e       	subi	r24, 0xEB	; 235
    1ff4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff6:	9f 93       	push	r25
    1ff8:	8f 93       	push	r24
    1ffa:	6f 93       	push	r22
    1ffc:	3f 93       	push	r19
    1ffe:	8e 57       	subi	r24, 0x7E	; 126
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	9f 93       	push	r25
    2004:	8f 93       	push	r24
    2006:	8e 01       	movw	r16, r28
    2008:	0f 5f       	subi	r16, 0xFF	; 255
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	1f 93       	push	r17
    200e:	0f 93       	push	r16
    2010:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2014:	c8 01       	movw	r24, r16
    2016:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    201a:	f8 01       	movw	r30, r16
    201c:	01 90       	ld	r0, Z+
    201e:	00 20       	and	r0, r0
    2020:	e9 f7       	brne	.-6      	; 0x201c <report+0x428>
    2022:	31 97       	sbiw	r30, 0x01	; 1
    2024:	af 01       	movw	r20, r30
    2026:	40 1b       	sub	r20, r16
    2028:	51 0b       	sbc	r21, r17
    202a:	b8 01       	movw	r22, r16
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			break;
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	f1 c3       	rjmp	.+2018   	; 0x281a <report+0xc26>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
    203e:	cc 51       	subi	r28, 0x1C	; 28
    2040:	dd 4f       	sbci	r29, 0xFD	; 253
    2042:	68 83       	st	Y, r22
    2044:	79 83       	std	Y+1, r23	; 0x01
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	9b 83       	std	Y+3, r25	; 0x03
    204a:	c4 5e       	subi	r28, 0xE4	; 228
    204c:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 14 07 	call	0xe28	; 0xe28 <get_humidity>
    2054:	f6 2e       	mov	r15, r22
    2056:	e7 2e       	mov	r14, r23
    2058:	d8 2e       	mov	r13, r24
    205a:	c9 2e       	mov	r12, r25
			t1 = get_temperature(1);
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
    2062:	c8 50       	subi	r28, 0x08	; 8
    2064:	dd 4f       	sbci	r29, 0xFD	; 253
    2066:	68 83       	st	Y, r22
    2068:	c8 5f       	subi	r28, 0xF8	; 248
    206a:	d2 40       	sbci	r29, 0x02	; 2
    206c:	c7 50       	subi	r28, 0x07	; 7
    206e:	dd 4f       	sbci	r29, 0xFD	; 253
    2070:	78 83       	st	Y, r23
    2072:	c9 5f       	subi	r28, 0xF9	; 249
    2074:	d2 40       	sbci	r29, 0x02	; 2
    2076:	c6 50       	subi	r28, 0x06	; 6
    2078:	dd 4f       	sbci	r29, 0xFD	; 253
    207a:	88 83       	st	Y, r24
    207c:	ca 5f       	subi	r28, 0xFA	; 250
    207e:	d2 40       	sbci	r29, 0x02	; 2
    2080:	c5 50       	subi	r28, 0x05	; 5
    2082:	dd 4f       	sbci	r29, 0xFD	; 253
    2084:	98 83       	st	Y, r25
    2086:	cb 5f       	subi	r28, 0xFB	; 251
    2088:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 14 07 	call	0xe28	; 0xe28 <get_humidity>
    2090:	c4 50       	subi	r28, 0x04	; 4
    2092:	dd 4f       	sbci	r29, 0xFD	; 253
    2094:	68 83       	st	Y, r22
    2096:	cc 5f       	subi	r28, 0xFC	; 252
    2098:	d2 40       	sbci	r29, 0x02	; 2
    209a:	c3 50       	subi	r28, 0x03	; 3
    209c:	dd 4f       	sbci	r29, 0xFD	; 253
    209e:	78 83       	st	Y, r23
    20a0:	cd 5f       	subi	r28, 0xFD	; 253
    20a2:	d2 40       	sbci	r29, 0x02	; 2
    20a4:	c2 50       	subi	r28, 0x02	; 2
    20a6:	dd 4f       	sbci	r29, 0xFD	; 253
    20a8:	88 83       	st	Y, r24
    20aa:	ce 5f       	subi	r28, 0xFE	; 254
    20ac:	d2 40       	sbci	r29, 0x02	; 2
    20ae:	c1 50       	subi	r28, 0x01	; 1
    20b0:	dd 4f       	sbci	r29, 0xFD	; 253
    20b2:	98 83       	st	Y, r25
    20b4:	cf 5f       	subi	r28, 0xFF	; 255
    20b6:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
    20be:	b6 2e       	mov	r11, r22
    20c0:	a7 2e       	mov	r10, r23
    20c2:	98 2e       	mov	r9, r24
    20c4:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	0e 94 14 07 	call	0xe28	; 0xe28 <get_humidity>
    20cc:	76 2e       	mov	r7, r22
    20ce:	67 2e       	mov	r6, r23
    20d0:	58 2e       	mov	r5, r24
    20d2:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	0e 94 0c 18 	call	0x3018	; 0x3018 <get_temperature>
    20da:	c0 50       	subi	r28, 0x00	; 0
    20dc:	dd 4f       	sbci	r29, 0xFD	; 253
    20de:	68 83       	st	Y, r22
    20e0:	c0 50       	subi	r28, 0x00	; 0
    20e2:	d3 40       	sbci	r29, 0x03	; 3
    20e4:	cf 5f       	subi	r28, 0xFF	; 255
    20e6:	dc 4f       	sbci	r29, 0xFC	; 252
    20e8:	78 83       	st	Y, r23
    20ea:	c1 50       	subi	r28, 0x01	; 1
    20ec:	d3 40       	sbci	r29, 0x03	; 3
    20ee:	38 2e       	mov	r3, r24
    20f0:	29 2e       	mov	r2, r25
			get_time(currenttime);
    20f2:	ce 01       	movw	r24, r28
    20f4:	8b 5e       	subi	r24, 0xEB	; 235
    20f6:	9e 4f       	sbci	r25, 0xFE	; 254
    20f8:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    20fc:	24 e3       	ldi	r18, 0x34	; 52
    20fe:	20 9f       	mul	r18, r16
    2100:	c0 01       	movw	r24, r0
    2102:	21 9f       	mul	r18, r17
    2104:	90 0d       	add	r25, r0
    2106:	11 24       	eor	r1, r1
    2108:	8f 5c       	subi	r24, 0xCF	; 207
    210a:	97 4d       	sbci	r25, 0xD7	; 215
    210c:	cc 51       	subi	r28, 0x1C	; 28
    210e:	dd 4f       	sbci	r29, 0xFD	; 253
    2110:	28 81       	ld	r18, Y
    2112:	c4 5e       	subi	r28, 0xE4	; 228
    2114:	d2 40       	sbci	r29, 0x02	; 2
    2116:	cb 51       	subi	r28, 0x1B	; 27
    2118:	dd 4f       	sbci	r29, 0xFD	; 253
    211a:	38 81       	ld	r19, Y
    211c:	c5 5e       	subi	r28, 0xE5	; 229
    211e:	d2 40       	sbci	r29, 0x02	; 2
    2120:	ca 51       	subi	r28, 0x1A	; 26
    2122:	dd 4f       	sbci	r29, 0xFD	; 253
    2124:	48 81       	ld	r20, Y
    2126:	c6 5e       	subi	r28, 0xE6	; 230
    2128:	d2 40       	sbci	r29, 0x02	; 2
    212a:	c9 51       	subi	r28, 0x19	; 25
    212c:	dd 4f       	sbci	r29, 0xFD	; 253
    212e:	58 81       	ld	r21, Y
    2130:	c7 5e       	subi	r28, 0xE7	; 231
    2132:	d2 40       	sbci	r29, 0x02	; 2
    2134:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2138:	62 ff       	sbrs	r22, 2
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <report+0x54e>
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <report+0x552>
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	9f 93       	push	r25
    2148:	8f 93       	push	r24
    214a:	2f 92       	push	r2
    214c:	3f 92       	push	r3
    214e:	cf 5f       	subi	r28, 0xFF	; 255
    2150:	dc 4f       	sbci	r29, 0xFC	; 252
    2152:	98 81       	ld	r25, Y
    2154:	c1 50       	subi	r28, 0x01	; 1
    2156:	d3 40       	sbci	r29, 0x03	; 3
    2158:	9f 93       	push	r25
    215a:	c0 50       	subi	r28, 0x00	; 0
    215c:	dd 4f       	sbci	r29, 0xFD	; 253
    215e:	88 81       	ld	r24, Y
    2160:	c0 50       	subi	r28, 0x00	; 0
    2162:	d3 40       	sbci	r29, 0x03	; 3
    2164:	8f 93       	push	r24
    2166:	4f 92       	push	r4
    2168:	5f 92       	push	r5
    216a:	6f 92       	push	r6
    216c:	7f 92       	push	r7
    216e:	8f 92       	push	r8
    2170:	9f 92       	push	r9
    2172:	af 92       	push	r10
    2174:	bf 92       	push	r11
    2176:	c1 50       	subi	r28, 0x01	; 1
    2178:	dd 4f       	sbci	r29, 0xFD	; 253
    217a:	98 81       	ld	r25, Y
    217c:	cf 5f       	subi	r28, 0xFF	; 255
    217e:	d2 40       	sbci	r29, 0x02	; 2
    2180:	9f 93       	push	r25
    2182:	c2 50       	subi	r28, 0x02	; 2
    2184:	dd 4f       	sbci	r29, 0xFD	; 253
    2186:	88 81       	ld	r24, Y
    2188:	ce 5f       	subi	r28, 0xFE	; 254
    218a:	d2 40       	sbci	r29, 0x02	; 2
    218c:	8f 93       	push	r24
    218e:	c3 50       	subi	r28, 0x03	; 3
    2190:	dd 4f       	sbci	r29, 0xFD	; 253
    2192:	98 81       	ld	r25, Y
    2194:	cd 5f       	subi	r28, 0xFD	; 253
    2196:	d2 40       	sbci	r29, 0x02	; 2
    2198:	9f 93       	push	r25
    219a:	c4 50       	subi	r28, 0x04	; 4
    219c:	dd 4f       	sbci	r29, 0xFD	; 253
    219e:	88 81       	ld	r24, Y
    21a0:	cc 5f       	subi	r28, 0xFC	; 252
    21a2:	d2 40       	sbci	r29, 0x02	; 2
    21a4:	8f 93       	push	r24
    21a6:	c5 50       	subi	r28, 0x05	; 5
    21a8:	dd 4f       	sbci	r29, 0xFD	; 253
    21aa:	98 81       	ld	r25, Y
    21ac:	cb 5f       	subi	r28, 0xFB	; 251
    21ae:	d2 40       	sbci	r29, 0x02	; 2
    21b0:	9f 93       	push	r25
    21b2:	c6 50       	subi	r28, 0x06	; 6
    21b4:	dd 4f       	sbci	r29, 0xFD	; 253
    21b6:	88 81       	ld	r24, Y
    21b8:	ca 5f       	subi	r28, 0xFA	; 250
    21ba:	d2 40       	sbci	r29, 0x02	; 2
    21bc:	8f 93       	push	r24
    21be:	c7 50       	subi	r28, 0x07	; 7
    21c0:	dd 4f       	sbci	r29, 0xFD	; 253
    21c2:	98 81       	ld	r25, Y
    21c4:	c9 5f       	subi	r28, 0xF9	; 249
    21c6:	d2 40       	sbci	r29, 0x02	; 2
    21c8:	9f 93       	push	r25
    21ca:	c8 50       	subi	r28, 0x08	; 8
    21cc:	dd 4f       	sbci	r29, 0xFD	; 253
    21ce:	88 81       	ld	r24, Y
    21d0:	c8 5f       	subi	r28, 0xF8	; 248
    21d2:	d2 40       	sbci	r29, 0x02	; 2
    21d4:	8f 93       	push	r24
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	5f 93       	push	r21
    21e0:	4f 93       	push	r20
    21e2:	3f 93       	push	r19
    21e4:	2f 93       	push	r18
    21e6:	ce 01       	movw	r24, r28
    21e8:	8b 5e       	subi	r24, 0xEB	; 235
    21ea:	9e 4f       	sbci	r25, 0xFE	; 254
    21ec:	9f 93       	push	r25
    21ee:	8f 93       	push	r24
    21f0:	7f 93       	push	r23
    21f2:	6f 93       	push	r22
    21f4:	80 5c       	subi	r24, 0xC0	; 192
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	8e 01       	movw	r16, r28
    21fe:	0f 5f       	subi	r16, 0xFF	; 255
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	1f 93       	push	r17
    2204:	0f 93       	push	r16
    2206:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			checksum_NMEA(outbuf);
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	c8 01       	movw	r24, r16
    2210:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2214:	f8 01       	movw	r30, r16
    2216:	01 90       	ld	r0, Z+
    2218:	00 20       	and	r0, r0
    221a:	e9 f7       	brne	.-6      	; 0x2216 <report+0x622>
    221c:	31 97       	sbiw	r30, 0x01	; 1
    221e:	af 01       	movw	r20, r30
    2220:	40 1b       	sub	r20, r16
    2222:	51 0b       	sbc	r21, r17
    2224:	b8 01       	movw	r22, r16
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	6a e2       	ldi	r22, 0x2A	; 42
    2230:	78 e8       	ldi	r23, 0x88	; 136
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2238:	cc 51       	subi	r28, 0x1C	; 28
    223a:	dd 4f       	sbci	r29, 0xFD	; 253
    223c:	b8 80       	ld	r11, Y
    223e:	c4 5e       	subi	r28, 0xE4	; 228
    2240:	d2 40       	sbci	r29, 0x02	; 2
    2242:	cb 51       	subi	r28, 0x1B	; 27
    2244:	dd 4f       	sbci	r29, 0xFD	; 253
    2246:	a8 80       	ld	r10, Y
    2248:	c5 5e       	subi	r28, 0xE5	; 229
    224a:	d2 40       	sbci	r29, 0x02	; 2
    224c:	ca 51       	subi	r28, 0x1A	; 26
    224e:	dd 4f       	sbci	r29, 0xFD	; 253
    2250:	98 80       	ld	r9, Y
    2252:	c6 5e       	subi	r28, 0xE6	; 230
    2254:	d2 40       	sbci	r29, 0x02	; 2
    2256:	c9 51       	subi	r28, 0x19	; 25
    2258:	dd 4f       	sbci	r29, 0xFD	; 253
    225a:	88 80       	ld	r8, Y
    225c:	c7 5e       	subi	r28, 0xE7	; 231
    225e:	d2 40       	sbci	r29, 0x02	; 2
    2260:	26 e6       	ldi	r18, 0x66	; 102
    2262:	36 e6       	ldi	r19, 0x66	; 102
    2264:	46 ee       	ldi	r20, 0xE6	; 230
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	6b 2d       	mov	r22, r11
    226a:	7a 2d       	mov	r23, r10
    226c:	89 2d       	mov	r24, r9
    226e:	98 2d       	mov	r25, r8
    2270:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsf3>
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	52 e4       	ldi	r21, 0x42	; 66
    2284:	0e 94 37 1b 	call	0x366e	; 0x366e <__addsf3>
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	7f 93       	push	r23
    228e:	6f 93       	push	r22
    2290:	8f 92       	push	r8
    2292:	9f 92       	push	r9
    2294:	af 92       	push	r10
    2296:	bf 92       	push	r11
    2298:	8a e3       	ldi	r24, 0x3A	; 58
    229a:	98 e8       	ldi	r25, 0x88	; 136
    229c:	9f 93       	push	r25
    229e:	8f 93       	push	r24
    22a0:	1f 93       	push	r17
    22a2:	0f 93       	push	r16
    22a4:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			writestr_OLED(1, outbuf, 2);
    22a8:	42 e0       	ldi	r20, 0x02	; 2
    22aa:	b8 01       	movw	r22, r16
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	b1 c2       	rjmp	.+1378   	; 0x281a <report+0xc26>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    22b8:	ae 01       	movw	r20, r28
    22ba:	4c 50       	subi	r20, 0x0C	; 12
    22bc:	5d 4f       	sbci	r21, 0xFD	; 253
    22be:	be 01       	movw	r22, r28
    22c0:	60 51       	subi	r22, 0x10	; 16
    22c2:	7d 4f       	sbci	r23, 0xFD	; 253
    22c4:	ce 01       	movw	r24, r28
    22c6:	84 51       	subi	r24, 0x14	; 20
    22c8:	9d 4f       	sbci	r25, 0xFD	; 253
    22ca:	0e 94 1d 09 	call	0x123a	; 0x123a <get_orientation>
			get_time(currenttime);
    22ce:	ce 01       	movw	r24, r28
    22d0:	8b 5e       	subi	r24, 0xEB	; 235
    22d2:	9e 4f       	sbci	r25, 0xFE	; 254
    22d4:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    22d8:	24 e3       	ldi	r18, 0x34	; 52
    22da:	20 9f       	mul	r18, r16
    22dc:	c0 01       	movw	r24, r0
    22de:	21 9f       	mul	r18, r17
    22e0:	90 0d       	add	r25, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	8f 5c       	subi	r24, 0xCF	; 207
    22e6:	97 4d       	sbci	r25, 0xD7	; 215
    22e8:	cc 50       	subi	r28, 0x0C	; 12
    22ea:	dd 4f       	sbci	r29, 0xFD	; 253
    22ec:	a8 81       	ld	r26, Y
    22ee:	c4 5f       	subi	r28, 0xF4	; 244
    22f0:	d2 40       	sbci	r29, 0x02	; 2
    22f2:	cb 50       	subi	r28, 0x0B	; 11
    22f4:	dd 4f       	sbci	r29, 0xFD	; 253
    22f6:	b8 81       	ld	r27, Y
    22f8:	c5 5f       	subi	r28, 0xF5	; 245
    22fa:	d2 40       	sbci	r29, 0x02	; 2
    22fc:	ca 50       	subi	r28, 0x0A	; 10
    22fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2300:	18 81       	ld	r17, Y
    2302:	c6 5f       	subi	r28, 0xF6	; 246
    2304:	d2 40       	sbci	r29, 0x02	; 2
    2306:	c9 50       	subi	r28, 0x09	; 9
    2308:	dd 4f       	sbci	r29, 0xFD	; 253
    230a:	08 81       	ld	r16, Y
    230c:	c7 5f       	subi	r28, 0xF7	; 247
    230e:	d2 40       	sbci	r29, 0x02	; 2
    2310:	c0 51       	subi	r28, 0x10	; 16
    2312:	dd 4f       	sbci	r29, 0xFD	; 253
    2314:	68 81       	ld	r22, Y
    2316:	c0 5f       	subi	r28, 0xF0	; 240
    2318:	d2 40       	sbci	r29, 0x02	; 2
    231a:	cf 50       	subi	r28, 0x0F	; 15
    231c:	dd 4f       	sbci	r29, 0xFD	; 253
    231e:	78 81       	ld	r23, Y
    2320:	c1 5f       	subi	r28, 0xF1	; 241
    2322:	d2 40       	sbci	r29, 0x02	; 2
    2324:	ce 50       	subi	r28, 0x0E	; 14
    2326:	dd 4f       	sbci	r29, 0xFD	; 253
    2328:	e8 81       	ld	r30, Y
    232a:	c2 5f       	subi	r28, 0xF2	; 242
    232c:	d2 40       	sbci	r29, 0x02	; 2
    232e:	cd 50       	subi	r28, 0x0D	; 13
    2330:	dd 4f       	sbci	r29, 0xFD	; 253
    2332:	f8 81       	ld	r31, Y
    2334:	c3 5f       	subi	r28, 0xF3	; 243
    2336:	d2 40       	sbci	r29, 0x02	; 2
    2338:	c4 51       	subi	r28, 0x14	; 20
    233a:	dd 4f       	sbci	r29, 0xFD	; 253
    233c:	28 81       	ld	r18, Y
    233e:	cc 5e       	subi	r28, 0xEC	; 236
    2340:	d2 40       	sbci	r29, 0x02	; 2
    2342:	c3 51       	subi	r28, 0x13	; 19
    2344:	dd 4f       	sbci	r29, 0xFD	; 253
    2346:	38 81       	ld	r19, Y
    2348:	cd 5e       	subi	r28, 0xED	; 237
    234a:	d2 40       	sbci	r29, 0x02	; 2
    234c:	c2 51       	subi	r28, 0x12	; 18
    234e:	dd 4f       	sbci	r29, 0xFD	; 253
    2350:	48 81       	ld	r20, Y
    2352:	ce 5e       	subi	r28, 0xEE	; 238
    2354:	d2 40       	sbci	r29, 0x02	; 2
    2356:	c1 51       	subi	r28, 0x11	; 17
    2358:	dd 4f       	sbci	r29, 0xFD	; 253
    235a:	58 81       	ld	r21, Y
    235c:	cf 5e       	subi	r28, 0xEF	; 239
    235e:	d2 40       	sbci	r29, 0x02	; 2
    2360:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2364:	f2 fe       	sbrs	r15, 2
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <report+0x77e>
    2368:	68 94       	set
    236a:	ff 24       	eor	r15, r15
    236c:	f1 f8       	bld	r15, 1
    236e:	e1 2c       	mov	r14, r1
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <report+0x784>
    2372:	ff 24       	eor	r15, r15
    2374:	f3 94       	inc	r15
    2376:	e1 2c       	mov	r14, r1
    2378:	9f 93       	push	r25
    237a:	8f 93       	push	r24
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	bf 93       	push	r27
    2382:	af 93       	push	r26
    2384:	ff 93       	push	r31
    2386:	ef 93       	push	r30
    2388:	7f 93       	push	r23
    238a:	6f 93       	push	r22
    238c:	5f 93       	push	r21
    238e:	4f 93       	push	r20
    2390:	3f 93       	push	r19
    2392:	2f 93       	push	r18
    2394:	ce 01       	movw	r24, r28
    2396:	8b 5e       	subi	r24, 0xEB	; 235
    2398:	9e 4f       	sbci	r25, 0xFE	; 254
    239a:	9f 93       	push	r25
    239c:	8f 93       	push	r24
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	8a 52       	subi	r24, 0x2A	; 42
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	9f 93       	push	r25
    23a8:	8f 93       	push	r24
    23aa:	8e 01       	movw	r16, r28
    23ac:	0f 5f       	subi	r16, 0xFF	; 255
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	1f 93       	push	r17
    23b2:	0f 93       	push	r16
    23b4:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			checksum_NMEA(outbuf);
    23b8:	c8 01       	movw	r24, r16
    23ba:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23be:	f8 01       	movw	r30, r16
    23c0:	01 90       	ld	r0, Z+
    23c2:	00 20       	and	r0, r0
    23c4:	e9 f7       	brne	.-6      	; 0x23c0 <report+0x7cc>
    23c6:	31 97       	sbiw	r30, 0x01	; 1
    23c8:	af 01       	movw	r20, r30
    23ca:	40 1b       	sub	r20, r16
    23cc:	51 0b       	sbc	r21, r17
    23ce:	b8 01       	movw	r22, r16
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	60 e5       	ldi	r22, 0x50	; 80
    23da:	78 e8       	ldi	r23, 0x88	; 136
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    23e2:	c9 50       	subi	r28, 0x09	; 9
    23e4:	dd 4f       	sbci	r29, 0xFD	; 253
    23e6:	88 81       	ld	r24, Y
    23e8:	c7 5f       	subi	r28, 0xF7	; 247
    23ea:	d2 40       	sbci	r29, 0x02	; 2
    23ec:	8f 93       	push	r24
    23ee:	ca 50       	subi	r28, 0x0A	; 10
    23f0:	dd 4f       	sbci	r29, 0xFD	; 253
    23f2:	88 81       	ld	r24, Y
    23f4:	c6 5f       	subi	r28, 0xF6	; 246
    23f6:	d2 40       	sbci	r29, 0x02	; 2
    23f8:	8f 93       	push	r24
    23fa:	cb 50       	subi	r28, 0x0B	; 11
    23fc:	dd 4f       	sbci	r29, 0xFD	; 253
    23fe:	88 81       	ld	r24, Y
    2400:	c5 5f       	subi	r28, 0xF5	; 245
    2402:	d2 40       	sbci	r29, 0x02	; 2
    2404:	8f 93       	push	r24
    2406:	cc 50       	subi	r28, 0x0C	; 12
    2408:	dd 4f       	sbci	r29, 0xFD	; 253
    240a:	88 81       	ld	r24, Y
    240c:	c4 5f       	subi	r28, 0xF4	; 244
    240e:	d2 40       	sbci	r29, 0x02	; 2
    2410:	8f 93       	push	r24
    2412:	cd 50       	subi	r28, 0x0D	; 13
    2414:	dd 4f       	sbci	r29, 0xFD	; 253
    2416:	88 81       	ld	r24, Y
    2418:	c3 5f       	subi	r28, 0xF3	; 243
    241a:	d2 40       	sbci	r29, 0x02	; 2
    241c:	8f 93       	push	r24
    241e:	ce 50       	subi	r28, 0x0E	; 14
    2420:	dd 4f       	sbci	r29, 0xFD	; 253
    2422:	88 81       	ld	r24, Y
    2424:	c2 5f       	subi	r28, 0xF2	; 242
    2426:	d2 40       	sbci	r29, 0x02	; 2
    2428:	8f 93       	push	r24
    242a:	cf 50       	subi	r28, 0x0F	; 15
    242c:	dd 4f       	sbci	r29, 0xFD	; 253
    242e:	88 81       	ld	r24, Y
    2430:	c1 5f       	subi	r28, 0xF1	; 241
    2432:	d2 40       	sbci	r29, 0x02	; 2
    2434:	8f 93       	push	r24
    2436:	c0 51       	subi	r28, 0x10	; 16
    2438:	dd 4f       	sbci	r29, 0xFD	; 253
    243a:	88 81       	ld	r24, Y
    243c:	c0 5f       	subi	r28, 0xF0	; 240
    243e:	d2 40       	sbci	r29, 0x02	; 2
    2440:	8f 93       	push	r24
    2442:	c1 51       	subi	r28, 0x11	; 17
    2444:	dd 4f       	sbci	r29, 0xFD	; 253
    2446:	88 81       	ld	r24, Y
    2448:	cf 5e       	subi	r28, 0xEF	; 239
    244a:	d2 40       	sbci	r29, 0x02	; 2
    244c:	8f 93       	push	r24
    244e:	c2 51       	subi	r28, 0x12	; 18
    2450:	dd 4f       	sbci	r29, 0xFD	; 253
    2452:	88 81       	ld	r24, Y
    2454:	ce 5e       	subi	r28, 0xEE	; 238
    2456:	d2 40       	sbci	r29, 0x02	; 2
    2458:	8f 93       	push	r24
    245a:	c3 51       	subi	r28, 0x13	; 19
    245c:	dd 4f       	sbci	r29, 0xFD	; 253
    245e:	88 81       	ld	r24, Y
    2460:	cd 5e       	subi	r28, 0xED	; 237
    2462:	d2 40       	sbci	r29, 0x02	; 2
    2464:	8f 93       	push	r24
    2466:	c4 51       	subi	r28, 0x14	; 20
    2468:	dd 4f       	sbci	r29, 0xFD	; 253
    246a:	88 81       	ld	r24, Y
    246c:	cc 5e       	subi	r28, 0xEC	; 236
    246e:	d2 40       	sbci	r29, 0x02	; 2
    2470:	8f 93       	push	r24
    2472:	ce 01       	movw	r24, r28
    2474:	85 5f       	subi	r24, 0xF5	; 245
    2476:	9d 4f       	sbci	r25, 0xFD	; 253
    2478:	9f 93       	push	r25
    247a:	8f 93       	push	r24
    247c:	1f 93       	push	r17
    247e:	0f 93       	push	r16
    2480:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			writestr_OLED(1, outbuf, 2);
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	42 e0       	ldi	r20, 0x02	; 2
    248a:	b8 01       	movw	r22, r16
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    2492:	c3 c1       	rjmp	.+902    	; 0x281a <report+0xc26>

		case 'p':
			get_time(currenttime);
    2494:	ce 01       	movw	r24, r28
    2496:	8b 5e       	subi	r24, 0xEB	; 235
    2498:	9e 4f       	sbci	r25, 0xFE	; 254
    249a:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    249e:	9e 01       	movw	r18, r28
    24a0:	2c 5a       	subi	r18, 0xAC	; 172
    24a2:	3e 4f       	sbci	r19, 0xFE	; 254
    24a4:	ae 01       	movw	r20, r28
    24a6:	4d 5a       	subi	r20, 0xAD	; 173
    24a8:	5e 4f       	sbci	r21, 0xFE	; 254
    24aa:	be 01       	movw	r22, r28
    24ac:	6e 5a       	subi	r22, 0xAE	; 174
    24ae:	7e 4f       	sbci	r23, 0xFE	; 254
    24b0:	ce 01       	movw	r24, r28
    24b2:	8f 5a       	subi	r24, 0xAF	; 175
    24b4:	9e 4f       	sbci	r25, 0xFE	; 254
    24b6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    24ba:	24 e3       	ldi	r18, 0x34	; 52
    24bc:	20 9f       	mul	r18, r16
    24be:	c0 01       	movw	r24, r0
    24c0:	21 9f       	mul	r18, r17
    24c2:	90 0d       	add	r25, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	8f 5c       	subi	r24, 0xCF	; 207
    24c8:	97 4d       	sbci	r25, 0xD7	; 215
    24ca:	cc 5a       	subi	r28, 0xAC	; 172
    24cc:	de 4f       	sbci	r29, 0xFE	; 254
    24ce:	58 81       	ld	r21, Y
    24d0:	c4 55       	subi	r28, 0x54	; 84
    24d2:	d1 40       	sbci	r29, 0x01	; 1
    24d4:	cd 5a       	subi	r28, 0xAD	; 173
    24d6:	de 4f       	sbci	r29, 0xFE	; 254
    24d8:	48 81       	ld	r20, Y
    24da:	c3 55       	subi	r28, 0x53	; 83
    24dc:	d1 40       	sbci	r29, 0x01	; 1
    24de:	ce 5a       	subi	r28, 0xAE	; 174
    24e0:	de 4f       	sbci	r29, 0xFE	; 254
    24e2:	38 81       	ld	r19, Y
    24e4:	c2 55       	subi	r28, 0x52	; 82
    24e6:	d1 40       	sbci	r29, 0x01	; 1
    24e8:	cf 5a       	subi	r28, 0xAF	; 175
    24ea:	de 4f       	sbci	r29, 0xFE	; 254
    24ec:	28 81       	ld	r18, Y
    24ee:	c1 55       	subi	r28, 0x51	; 81
    24f0:	d1 40       	sbci	r29, 0x01	; 1
    24f2:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    24f6:	62 ff       	sbrs	r22, 2
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <report+0x90c>
    24fa:	62 e0       	ldi	r22, 0x02	; 2
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <report+0x910>
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	9f 93       	push	r25
    2506:	8f 93       	push	r24
    2508:	1f 92       	push	r1
    250a:	5f 93       	push	r21
    250c:	1f 92       	push	r1
    250e:	4f 93       	push	r20
    2510:	1f 92       	push	r1
    2512:	3f 93       	push	r19
    2514:	1f 92       	push	r1
    2516:	2f 93       	push	r18
    2518:	ce 01       	movw	r24, r28
    251a:	8b 5e       	subi	r24, 0xEB	; 235
    251c:	9e 4f       	sbci	r25, 0xFE	; 254
    251e:	9f 93       	push	r25
    2520:	8f 93       	push	r24
    2522:	7f 93       	push	r23
    2524:	6f 93       	push	r22
    2526:	88 5f       	subi	r24, 0xF8	; 248
    2528:	9e 4f       	sbci	r25, 0xFE	; 254
    252a:	9f 93       	push	r25
    252c:	8f 93       	push	r24
    252e:	8e 01       	movw	r16, r28
    2530:	0f 5f       	subi	r16, 0xFF	; 255
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	1f 93       	push	r17
    2536:	0f 93       	push	r16
    2538:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			checksum_NMEA(outbuf);
    253c:	c8 01       	movw	r24, r16
    253e:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2542:	f8 01       	movw	r30, r16
    2544:	01 90       	ld	r0, Z+
    2546:	00 20       	and	r0, r0
    2548:	e9 f7       	brne	.-6      	; 0x2544 <report+0x950>
    254a:	31 97       	sbiw	r30, 0x01	; 1
    254c:	af 01       	movw	r20, r30
    254e:	40 1b       	sub	r20, r16
    2550:	51 0b       	sbc	r21, r17
    2552:	b8 01       	movw	r22, r16
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    255a:	cd 5a       	subi	r28, 0xAD	; 173
    255c:	de 4f       	sbci	r29, 0xFE	; 254
    255e:	88 81       	ld	r24, Y
    2560:	c3 55       	subi	r28, 0x53	; 83
    2562:	d1 40       	sbci	r29, 0x01	; 1
    2564:	1f 92       	push	r1
    2566:	8f 93       	push	r24
    2568:	ce 5a       	subi	r28, 0xAE	; 174
    256a:	de 4f       	sbci	r29, 0xFE	; 254
    256c:	88 81       	ld	r24, Y
    256e:	c2 55       	subi	r28, 0x52	; 82
    2570:	d1 40       	sbci	r29, 0x01	; 1
    2572:	1f 92       	push	r1
    2574:	8f 93       	push	r24
    2576:	ce 01       	movw	r24, r28
    2578:	82 5b       	subi	r24, 0xB2	; 178
    257a:	9d 4f       	sbci	r25, 0xFD	; 253
    257c:	9f 93       	push	r25
    257e:	8f 93       	push	r24
    2580:	1f 93       	push	r17
    2582:	0f 93       	push	r16
    2584:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			writestr_OLED(1, outbuf, 1);
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	b8 01       	movw	r22, r16
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2592:	cc 5a       	subi	r28, 0xAC	; 172
    2594:	de 4f       	sbci	r29, 0xFE	; 254
    2596:	88 81       	ld	r24, Y
    2598:	c4 55       	subi	r28, 0x54	; 84
    259a:	d1 40       	sbci	r29, 0x01	; 1
    259c:	1f 92       	push	r1
    259e:	8f 93       	push	r24
    25a0:	cf 5a       	subi	r28, 0xAF	; 175
    25a2:	de 4f       	sbci	r29, 0xFE	; 254
    25a4:	88 81       	ld	r24, Y
    25a6:	c1 55       	subi	r28, 0x51	; 81
    25a8:	d1 40       	sbci	r29, 0x01	; 1
    25aa:	1f 92       	push	r1
    25ac:	8f 93       	push	r24
    25ae:	ce 01       	movw	r24, r28
    25b0:	8f 59       	subi	r24, 0x9F	; 159
    25b2:	9d 4f       	sbci	r25, 0xFD	; 253
    25b4:	9f 93       	push	r25
    25b6:	8f 93       	push	r24
    25b8:	1f 93       	push	r17
    25ba:	0f 93       	push	r16
    25bc:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			writestr_OLED(1, outbuf, 2);
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	42 e0       	ldi	r20, 0x02	; 2
    25c6:	b8 01       	movw	r22, r16
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    25ce:	25 c1       	rjmp	.+586    	; 0x281a <report+0xc26>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    25d0:	ce 01       	movw	r24, r28
    25d2:	8b 5e       	subi	r24, 0xEB	; 235
    25d4:	9e 4f       	sbci	r25, 0xFE	; 254
    25d6:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    25da:	24 e1       	ldi	r18, 0x14	; 20
    25dc:	ae 01       	movw	r20, r28
    25de:	47 5d       	subi	r20, 0xD7	; 215
    25e0:	5e 4f       	sbci	r21, 0xFE	; 254
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	80 e5       	ldi	r24, 0x50	; 80
    25e8:	0e 94 a0 06 	call	0xd40	; 0xd40 <read_FRAM>
			get_BOOTTIME(boottime);
    25ec:	ce 01       	movw	r24, r28
    25ee:	83 5c       	subi	r24, 0xC3	; 195
    25f0:	9e 4f       	sbci	r25, 0xFE	; 254
    25f2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    25f6:	24 e3       	ldi	r18, 0x34	; 52
    25f8:	20 9f       	mul	r18, r16
    25fa:	c0 01       	movw	r24, r0
    25fc:	21 9f       	mul	r18, r17
    25fe:	90 0d       	add	r25, r0
    2600:	11 24       	eor	r1, r1
    2602:	8f 5c       	subi	r24, 0xCF	; 207
    2604:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    2606:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    260a:	22 ff       	sbrs	r18, 2
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <report+0xa20>
    260e:	22 e0       	ldi	r18, 0x02	; 2
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <report+0xa24>
    2614:	21 e0       	ldi	r18, 0x01	; 1
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	9f 93       	push	r25
    261a:	8f 93       	push	r24
    261c:	ce 01       	movw	r24, r28
    261e:	83 5c       	subi	r24, 0xC3	; 195
    2620:	9e 4f       	sbci	r25, 0xFE	; 254
    2622:	9f 93       	push	r25
    2624:	8f 93       	push	r24
    2626:	44 97       	sbiw	r24, 0x14	; 20
    2628:	9f 93       	push	r25
    262a:	8f 93       	push	r24
    262c:	8e 01       	movw	r16, r28
    262e:	0b 5e       	subi	r16, 0xEB	; 235
    2630:	1e 4f       	sbci	r17, 0xFE	; 254
    2632:	1f 93       	push	r17
    2634:	0f 93       	push	r16
    2636:	3f 93       	push	r19
    2638:	2f 93       	push	r18
    263a:	85 5b       	subi	r24, 0xB5	; 181
    263c:	9e 4f       	sbci	r25, 0xFE	; 254
    263e:	9f 93       	push	r25
    2640:	8f 93       	push	r24
    2642:	83 57       	subi	r24, 0x73	; 115
    2644:	92 40       	sbci	r25, 0x02	; 2
    2646:	7c 01       	movw	r14, r24
    2648:	9f 93       	push	r25
    264a:	8f 93       	push	r24
    264c:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2650:	c7 01       	movw	r24, r14
    2652:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2656:	f7 01       	movw	r30, r14
    2658:	01 90       	ld	r0, Z+
    265a:	00 20       	and	r0, r0
    265c:	e9 f7       	brne	.-6      	; 0x2658 <report+0xa64>
    265e:	31 97       	sbiw	r30, 0x01	; 1
    2660:	af 01       	movw	r20, r30
    2662:	4e 19       	sub	r20, r14
    2664:	5f 09       	sbc	r21, r15
    2666:	b7 01       	movw	r22, r14
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			writestr_OLED(1, "Time", 1);
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	6c e5       	ldi	r22, 0x5C	; 92
    2672:	78 e8       	ldi	r23, 0x88	; 136
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    267a:	b8 01       	movw	r22, r16
    267c:	65 5f       	subi	r22, 0xF5	; 245
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	42 e0       	ldi	r20, 0x02	; 2
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	c6 c0       	rjmp	.+396    	; 0x281a <report+0xc26>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <read_ionpump>
    2694:	f6 2e       	mov	r15, r22
    2696:	e7 2e       	mov	r14, r23
    2698:	d8 2e       	mov	r13, r24
    269a:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <read_ionpump>
    26a2:	b6 2e       	mov	r11, r22
    26a4:	a7 2e       	mov	r10, r23
    26a6:	98 2e       	mov	r9, r24
    26a8:	89 2e       	mov	r8, r25
			get_time(currenttime);
    26aa:	ce 01       	movw	r24, r28
    26ac:	8b 5e       	subi	r24, 0xEB	; 235
    26ae:	9e 4f       	sbci	r25, 0xFE	; 254
    26b0:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    26b4:	24 e3       	ldi	r18, 0x34	; 52
    26b6:	20 9f       	mul	r18, r16
    26b8:	c0 01       	movw	r24, r0
    26ba:	21 9f       	mul	r18, r17
    26bc:	90 0d       	add	r25, r0
    26be:	11 24       	eor	r1, r1
    26c0:	8f 5c       	subi	r24, 0xCF	; 207
    26c2:	97 4d       	sbci	r25, 0xD7	; 215
    26c4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    26c8:	22 ff       	sbrs	r18, 2
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <report+0xade>
    26cc:	22 e0       	ldi	r18, 0x02	; 2
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <report+0xae2>
    26d2:	21 e0       	ldi	r18, 0x01	; 1
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	9f 93       	push	r25
    26d8:	8f 93       	push	r24
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	ce 01       	movw	r24, r28
    26ec:	8b 5e       	subi	r24, 0xEB	; 235
    26ee:	9e 4f       	sbci	r25, 0xFE	; 254
    26f0:	9f 93       	push	r25
    26f2:	8f 93       	push	r24
    26f4:	3f 93       	push	r19
    26f6:	2f 93       	push	r18
    26f8:	84 58       	subi	r24, 0x84	; 132
    26fa:	9e 4f       	sbci	r25, 0xFE	; 254
    26fc:	9f 93       	push	r25
    26fe:	8f 93       	push	r24
    2700:	8e 01       	movw	r16, r28
    2702:	0f 5f       	subi	r16, 0xFF	; 255
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	1f 93       	push	r17
    2708:	0f 93       	push	r16
    270a:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			checksum_NMEA(outbuf);
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2714:	f8 01       	movw	r30, r16
    2716:	01 90       	ld	r0, Z+
    2718:	00 20       	and	r0, r0
    271a:	e9 f7       	brne	.-6      	; 0x2716 <report+0xb22>
    271c:	31 97       	sbiw	r30, 0x01	; 1
    271e:	af 01       	movw	r20, r30
    2720:	40 1b       	sub	r20, r16
    2722:	51 0b       	sbc	r21, r17
    2724:	b8 01       	movw	r22, r16
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	61 e6       	ldi	r22, 0x61	; 97
    2730:	78 e8       	ldi	r23, 0x88	; 136
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2738:	8f 92       	push	r8
    273a:	9f 92       	push	r9
    273c:	af 92       	push	r10
    273e:	bf 92       	push	r11
    2740:	cf 92       	push	r12
    2742:	df 92       	push	r13
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	ce 01       	movw	r24, r28
    274a:	86 54       	subi	r24, 0x46	; 70
    274c:	9d 4f       	sbci	r25, 0xFD	; 253
    274e:	9f 93       	push	r25
    2750:	8f 93       	push	r24
    2752:	1f 93       	push	r17
    2754:	0f 93       	push	r16
    2756:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			writestr_OLED(1, outbuf, 2);
    275a:	42 e0       	ldi	r20, 0x02	; 2
    275c:	b8 01       	movw	r22, r16
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	58 c0       	rjmp	.+176    	; 0x281a <report+0xc26>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    276a:	ce 01       	movw	r24, r28
    276c:	86 5f       	subi	r24, 0xF6	; 246
    276e:	9e 4f       	sbci	r25, 0xFE	; 254
    2770:	0e 94 14 06 	call	0xc28	; 0xc28 <get_VERSION>
			get_time(currenttime);
    2774:	ce 01       	movw	r24, r28
    2776:	8b 5e       	subi	r24, 0xEB	; 235
    2778:	9e 4f       	sbci	r25, 0xFE	; 254
    277a:	0e 94 91 05 	call	0xb22	; 0xb22 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    277e:	24 e3       	ldi	r18, 0x34	; 52
    2780:	20 9f       	mul	r18, r16
    2782:	c0 01       	movw	r24, r0
    2784:	21 9f       	mul	r18, r17
    2786:	90 0d       	add	r25, r0
    2788:	11 24       	eor	r1, r1
    278a:	8f 5c       	subi	r24, 0xCF	; 207
    278c:	97 4d       	sbci	r25, 0xD7	; 215
    278e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2792:	22 ff       	sbrs	r18, 2
    2794:	03 c0       	rjmp	.+6      	; 0x279c <report+0xba8>
    2796:	22 e0       	ldi	r18, 0x02	; 2
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <report+0xbac>
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	9f 93       	push	r25
    27a2:	8f 93       	push	r24
    27a4:	ce 01       	movw	r24, r28
    27a6:	86 5f       	subi	r24, 0xF6	; 246
    27a8:	9e 4f       	sbci	r25, 0xFE	; 254
    27aa:	9f 93       	push	r25
    27ac:	8f 93       	push	r24
    27ae:	0b 96       	adiw	r24, 0x0b	; 11
    27b0:	9f 93       	push	r25
    27b2:	8f 93       	push	r24
    27b4:	3f 93       	push	r19
    27b6:	2f 93       	push	r18
    27b8:	8e 54       	subi	r24, 0x4E	; 78
    27ba:	9e 4f       	sbci	r25, 0xFE	; 254
    27bc:	9f 93       	push	r25
    27be:	8f 93       	push	r24
    27c0:	8e 01       	movw	r16, r28
    27c2:	0f 5f       	subi	r16, 0xFF	; 255
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	1f 93       	push	r17
    27c8:	0f 93       	push	r16
    27ca:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
			checksum_NMEA(outbuf);
    27ce:	c8 01       	movw	r24, r16
    27d0:	0e 94 11 0a 	call	0x1422	; 0x1422 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    27d4:	f8 01       	movw	r30, r16
    27d6:	01 90       	ld	r0, Z+
    27d8:	00 20       	and	r0, r0
    27da:	e9 f7       	brne	.-6      	; 0x27d6 <report+0xbe2>
    27dc:	31 97       	sbiw	r30, 0x01	; 1
    27de:	af 01       	movw	r20, r30
    27e0:	40 1b       	sub	r20, r16
    27e2:	51 0b       	sbc	r21, r17
    27e4:	b8 01       	movw	r22, r16
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	68 ec       	ldi	r22, 0xC8	; 200
    27f0:	77 e8       	ldi	r23, 0x87	; 135
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			get_VERSION(outbuf);
    27f8:	c8 01       	movw	r24, r16
    27fa:	0e 94 14 06 	call	0xc28	; 0xc28 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27fe:	42 e0       	ldi	r20, 0x02	; 2
    2800:	b8 01       	movw	r22, r16
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	0e 94 2c 0b 	call	0x1658	; 0x1658 <writestr_OLED>
			break;
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	06 c0       	rjmp	.+12     	; 0x281a <report+0xc26>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    280e:	61 e7       	ldi	r22, 0x71	; 113
    2810:	78 e8       	ldi	r23, 0x88	; 136
    2812:	8a ec       	ldi	r24, 0xCA	; 202
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			break;
	}

	return(GREATERPROMPT);

}
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	cf 5f       	subi	r28, 0xFF	; 255
    281e:	dc 4f       	sbci	r29, 0xFC	; 252
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	9f 90       	pop	r9
    283a:	8f 90       	pop	r8
    283c:	7f 90       	pop	r7
    283e:	6f 90       	pop	r6
    2840:	5f 90       	pop	r5
    2842:	4f 90       	pop	r4
    2844:	3f 90       	pop	r3
    2846:	2f 90       	pop	r2
    2848:	08 95       	ret

0000284a <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    284a:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2854:	1b c0       	rjmp	.+54     	; 0x288c <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2856:	fd 01       	movw	r30, r26
    2858:	e4 0f       	add	r30, r20
    285a:	f5 1f       	adc	r31, r21
    285c:	20 81       	ld	r18, Z
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	32 2f       	mov	r19, r18
    2862:	22 27       	eor	r18, r18
    2864:	82 27       	eor	r24, r18
    2866:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	0c c0       	rjmp	.+24     	; 0x2884 <crc16+0x3a>
			if (crc & 0x8000) {
    286c:	99 23       	and	r25, r25
    286e:	3c f4       	brge	.+14     	; 0x287e <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	31 e2       	ldi	r19, 0x21	; 33
    2876:	83 27       	eor	r24, r19
    2878:	30 e1       	ldi	r19, 0x10	; 16
    287a:	93 27       	eor	r25, r19
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <crc16+0x38>
			} else {
				crc = crc << 1;
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2882:	2f 5f       	subi	r18, 0xFF	; 255
    2884:	28 30       	cpi	r18, 0x08	; 8
    2886:	90 f3       	brcs	.-28     	; 0x286c <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2888:	4f 5f       	subi	r20, 0xFF	; 255
    288a:	5f 4f       	sbci	r21, 0xFF	; 255
    288c:	46 17       	cp	r20, r22
    288e:	57 07       	cpc	r21, r23
    2890:	10 f3       	brcs	.-60     	; 0x2856 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    2892:	08 95       	ret

00002894 <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	27 97       	sbiw	r28, 0x07	; 7
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    28ac:	97 e0       	ldi	r25, 0x07	; 7
    28ae:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    28b2:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	recv1_buf.done = NO;
    28b6:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	tbuf[0] = controller;
    28ba:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    28bc:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    28be:	42 e0       	ldi	r20, 0x02	; 2
    28c0:	be 01       	movw	r22, r28
    28c2:	6f 5f       	subi	r22, 0xFF	; 255
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

	start_TCB0(1);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    28d4:	11 c0       	rjmp	.+34     	; 0x28f8 <get_MOTOREncoder+0x64>
		asm("nop");
    28d6:	00 00       	nop
		if (ticks > 50) {			// Timeout
    28d8:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    28dc:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    28e0:	c3 97       	sbiw	r24, 0x33	; 51
    28e2:	50 f0       	brcs	.+20     	; 0x28f8 <get_MOTOREncoder+0x64>
			stop_TCB0();
    28e4:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    28e8:	6b e0       	ldi	r22, 0x0B	; 11
    28ea:	7a e8       	ldi	r23, 0x8A	; 138
    28ec:	80 e3       	ldi	r24, 0x30	; 48
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			return(ERROR);
    28f4:	83 e6       	ldi	r24, 0x63	; 99
    28f6:	74 c0       	rjmp	.+232    	; 0x29e0 <get_MOTOREncoder+0x14c>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    28f8:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x104>
    28fc:	88 23       	and	r24, r24
    28fe:	59 f3       	breq	.-42     	; 0x28d6 <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    2900:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2904:	e5 e1       	ldi	r30, 0x15	; 21
    2906:	fa e2       	ldi	r31, 0x2A	; 42
    2908:	e5 80       	ldd	r14, Z+5	; 0x05
    290a:	f1 2c       	mov	r15, r1
    290c:	fe 2c       	mov	r15, r14
    290e:	ee 24       	eor	r14, r14
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2914:	22 e0       	ldi	r18, 0x02	; 2
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2918:	82 2f       	mov	r24, r18
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	fc 01       	movw	r30, r24
    291e:	ed 5e       	subi	r30, 0xED	; 237
    2920:	f5 4d       	sbci	r31, 0xD5	; 213
    2922:	30 81       	ld	r19, Z
    2924:	e1 e0       	ldi	r30, 0x01	; 1
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	ec 0f       	add	r30, r28
    292a:	fd 1f       	adc	r31, r29
    292c:	e8 0f       	add	r30, r24
    292e:	f9 1f       	adc	r31, r25
    2930:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2932:	2f 5f       	subi	r18, 0xFF	; 255
    2934:	27 30       	cpi	r18, 0x07	; 7
    2936:	80 f3       	brcs	.-32     	; 0x2918 <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2938:	67 e0       	ldi	r22, 0x07	; 7
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	0e 94 25 14 	call	0x284a	; 0x284a <crc16>

	if (crcReceived != crcExpected) {
    2944:	e8 16       	cp	r14, r24
    2946:	f9 06       	cpc	r15, r25
    2948:	71 f0       	breq	.+28     	; 0x2966 <get_MOTOREncoder+0xd2>
		*value = 0;
    294a:	d8 01       	movw	r26, r16
    294c:	1d 92       	st	X+, r1
    294e:	1d 92       	st	X+, r1
    2950:	1d 92       	st	X+, r1
    2952:	1c 92       	st	X, r1
    2954:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2956:	64 e2       	ldi	r22, 0x24	; 36
    2958:	7a e8       	ldi	r23, 0x8A	; 138
    295a:	81 e3       	ldi	r24, 0x31	; 49
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		return(ERROR);
    2962:	83 e6       	ldi	r24, 0x63	; 99
    2964:	3d c0       	rjmp	.+122    	; 0x29e0 <get_MOTOREncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2966:	25 e1       	ldi	r18, 0x15	; 21
    2968:	3a e2       	ldi	r19, 0x2A	; 42
    296a:	f9 01       	movw	r30, r18
    296c:	80 81       	ld	r24, Z
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 e0       	ldi	r26, 0x00	; 0
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	78 2f       	mov	r23, r24
    2976:	66 27       	eor	r22, r22
    2978:	55 27       	eor	r21, r21
    297a:	44 27       	eor	r20, r20
    297c:	d8 01       	movw	r26, r16
    297e:	4d 93       	st	X+, r20
    2980:	5d 93       	st	X+, r21
    2982:	6d 93       	st	X+, r22
    2984:	7c 93       	st	X, r23
    2986:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	89 2f       	mov	r24, r25
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	dc 01       	movw	r26, r24
    2994:	99 27       	eor	r25, r25
    2996:	88 27       	eor	r24, r24
    2998:	84 2b       	or	r24, r20
    299a:	95 2b       	or	r25, r21
    299c:	a6 2b       	or	r26, r22
    299e:	b7 2b       	or	r27, r23
    29a0:	f8 01       	movw	r30, r16
    29a2:	80 83       	st	Z, r24
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	a2 83       	std	Z+2, r26	; 0x02
    29a8:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    29aa:	f9 01       	movw	r30, r18
    29ac:	42 81       	ldd	r20, Z+2	; 0x02
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	76 2f       	mov	r23, r22
    29b6:	65 2f       	mov	r22, r21
    29b8:	54 2f       	mov	r21, r20
    29ba:	44 27       	eor	r20, r20
    29bc:	84 2b       	or	r24, r20
    29be:	95 2b       	or	r25, r21
    29c0:	a6 2b       	or	r26, r22
    29c2:	b7 2b       	or	r27, r23
    29c4:	f8 01       	movw	r30, r16
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    29ce:	f9 01       	movw	r30, r18
    29d0:	23 81       	ldd	r18, Z+3	; 0x03
    29d2:	82 2b       	or	r24, r18
    29d4:	f8 01       	movw	r30, r16
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    29de:	80 e0       	ldi	r24, 0x00	; 0

}
    29e0:	27 96       	adiw	r28, 0x07	; 7
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	08 95       	ret

000029f4 <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    29f4:	af 92       	push	r10
    29f6:	bf 92       	push	r11
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <get_MOTORFloat+0x16>
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <get_MOTORFloat+0x18>
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	a8 2e       	mov	r10, r24
    2a12:	b6 2e       	mov	r11, r22
    2a14:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2a16:	84 e0       	ldi	r24, 0x04	; 4
    2a18:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2a1c:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2a20:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	tbuf[0] = controller;
    2a24:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a26:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2a28:	42 e0       	ldi	r20, 0x02	; 2
    2a2a:	be 01       	movw	r22, r28
    2a2c:	6f 5f       	subi	r22, 0xFF	; 255
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

	start_TCB0(1);
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2a3e:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x104>
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	81 f0       	breq	.+32     	; 0x2a66 <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2a46:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2a4a:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2a4e:	c3 97       	sbiw	r24, 0x33	; 51
    2a50:	b0 f3       	brcs	.-20     	; 0x2a3e <get_MOTORFloat+0x4a>
			stop_TCB0();
    2a52:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2a56:	69 e3       	ldi	r22, 0x39	; 57
    2a58:	7a e8       	ldi	r23, 0x8A	; 138
    2a5a:	80 e3       	ldi	r24, 0x30	; 48
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			return(ERROR);
    2a62:	83 e6       	ldi	r24, 0x63	; 99
    2a64:	37 c0       	rjmp	.+110    	; 0x2ad4 <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2a66:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2a6a:	e5 e1       	ldi	r30, 0x15	; 21
    2a6c:	fa e2       	ldi	r31, 0x2A	; 42
    2a6e:	90 81       	ld	r25, Z
    2a70:	c9 2e       	mov	r12, r25
    2a72:	d1 2c       	mov	r13, r1
    2a74:	dc 2c       	mov	r13, r12
    2a76:	cc 24       	eor	r12, r12
    2a78:	81 81       	ldd	r24, Z+1	; 0x01
    2a7a:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2a7c:	02 81       	ldd	r16, Z+2	; 0x02
    2a7e:	10 e0       	ldi	r17, 0x00	; 0
    2a80:	10 2f       	mov	r17, r16
    2a82:	00 27       	eor	r16, r16
    2a84:	23 81       	ldd	r18, Z+3	; 0x03
    2a86:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2a88:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a8a:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2a8c:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2a8e:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2a90:	64 e0       	ldi	r22, 0x04	; 4
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	ce 01       	movw	r24, r28
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	0e 94 25 14 	call	0x284a	; 0x284a <crc16>

	if (crcExpected != crcReceived) {
    2a9c:	08 17       	cp	r16, r24
    2a9e:	19 07       	cpc	r17, r25
    2aa0:	41 f0       	breq	.+16     	; 0x2ab2 <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2aa2:	6b e4       	ldi	r22, 0x4B	; 75
    2aa4:	7a e8       	ldi	r23, 0x8A	; 138
    2aa6:	81 e3       	ldi	r24, 0x31	; 49
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		return(ERROR);
    2aae:	83 e6       	ldi	r24, 0x63	; 99
    2ab0:	11 c0       	rjmp	.+34     	; 0x2ad4 <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2ab2:	b6 01       	movw	r22, r12
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__floatunsisf>
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divsf3>
    2ac8:	f7 01       	movw	r30, r14
    2aca:	60 83       	st	Z, r22
    2acc:	71 83       	std	Z+1, r23	; 0x01
    2ace:	82 83       	std	Z+2, r24	; 0x02
    2ad0:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ad4:	24 96       	adiw	r28, 0x04	; 4
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	bf 90       	pop	r11
    2aec:	af 90       	pop	r10
    2aee:	08 95       	ret

00002af0 <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	26 97       	sbiw	r28, 0x06	; 6
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2b08:	96 e0       	ldi	r25, 0x06	; 6
    2b0a:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2b0e:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2b12:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	tbuf[0] = controller;
    2b16:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2b18:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b1a:	42 e0       	ldi	r20, 0x02	; 2
    2b1c:	be 01       	movw	r22, r28
    2b1e:	6f 5f       	subi	r22, 0xFF	; 255
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

	start_TCB0(1);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b30:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x104>
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	61 f4       	brne	.+24     	; 0x2b50 <get_MOTORInt32+0x60>
			stop_TCB0();
    2b38:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2b3c:	e5 e1       	ldi	r30, 0x15	; 21
    2b3e:	fa e2       	ldi	r31, 0x2A	; 42
    2b40:	e4 80       	ldd	r14, Z+4	; 0x04
    2b42:	f1 2c       	mov	r15, r1
    2b44:	fe 2c       	mov	r15, r14
    2b46:	ee 24       	eor	r14, r14
    2b48:	85 81       	ldd	r24, Z+5	; 0x05
    2b4a:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b4c:	22 e0       	ldi	r18, 0x02	; 2
    2b4e:	1e c0       	rjmp	.+60     	; 0x2b8c <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2b50:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2b54:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2b58:	c3 97       	sbiw	r24, 0x33	; 51
    2b5a:	50 f3       	brcs	.-44     	; 0x2b30 <get_MOTORInt32+0x40>
			stop_TCB0();
    2b5c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2b60:	6e e5       	ldi	r22, 0x5E	; 94
    2b62:	7a e8       	ldi	r23, 0x8A	; 138
    2b64:	8f e2       	ldi	r24, 0x2F	; 47
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			return(ERROR);
    2b6c:	83 e6       	ldi	r24, 0x63	; 99
    2b6e:	54 c0       	rjmp	.+168    	; 0x2c18 <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2b70:	82 2f       	mov	r24, r18
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	fc 01       	movw	r30, r24
    2b76:	ed 5e       	subi	r30, 0xED	; 237
    2b78:	f5 4d       	sbci	r31, 0xD5	; 213
    2b7a:	30 81       	ld	r19, Z
    2b7c:	e1 e0       	ldi	r30, 0x01	; 1
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	ec 0f       	add	r30, r28
    2b82:	fd 1f       	adc	r31, r29
    2b84:	e8 0f       	add	r30, r24
    2b86:	f9 1f       	adc	r31, r25
    2b88:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b8a:	2f 5f       	subi	r18, 0xFF	; 255
    2b8c:	26 30       	cpi	r18, 0x06	; 6
    2b8e:	80 f3       	brcs	.-32     	; 0x2b70 <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2b90:	66 e0       	ldi	r22, 0x06	; 6
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	0e 94 25 14 	call	0x284a	; 0x284a <crc16>

	if (crcReceived != crcExpected) {
    2b9c:	e8 16       	cp	r14, r24
    2b9e:	f9 06       	cpc	r15, r25
    2ba0:	89 f0       	breq	.+34     	; 0x2bc4 <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2ba2:	65 e7       	ldi	r22, 0x75	; 117
    2ba4:	7a e8       	ldi	r23, 0x8A	; 138
    2ba6:	81 e3       	ldi	r24, 0x31	; 49
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		*value = 0x7FFFFFFF;
    2bae:	8f ef       	ldi	r24, 0xFF	; 255
    2bb0:	9f ef       	ldi	r25, 0xFF	; 255
    2bb2:	af ef       	ldi	r26, 0xFF	; 255
    2bb4:	bf e7       	ldi	r27, 0x7F	; 127
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 83       	st	Z, r24
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	a2 83       	std	Z+2, r26	; 0x02
    2bbe:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2bc0:	83 e6       	ldi	r24, 0x63	; 99
    2bc2:	2a c0       	rjmp	.+84     	; 0x2c18 <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2bc4:	e5 e1       	ldi	r30, 0x15	; 21
    2bc6:	fa e2       	ldi	r31, 0x2A	; 42
    2bc8:	80 81       	ld	r24, Z
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e0       	ldi	r26, 0x00	; 0
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	78 2f       	mov	r23, r24
    2bd2:	66 27       	eor	r22, r22
    2bd4:	55 27       	eor	r21, r21
    2bd6:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	89 2f       	mov	r24, r25
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	dc 01       	movw	r26, r24
    2be4:	99 27       	eor	r25, r25
    2be6:	88 27       	eor	r24, r24
    2be8:	84 2b       	or	r24, r20
    2bea:	95 2b       	or	r25, r21
    2bec:	a6 2b       	or	r26, r22
    2bee:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2bf0:	42 81       	ldd	r20, Z+2	; 0x02
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	76 2f       	mov	r23, r22
    2bfa:	65 2f       	mov	r22, r21
    2bfc:	54 2f       	mov	r21, r20
    2bfe:	44 27       	eor	r20, r20
    2c00:	84 2b       	or	r24, r20
    2c02:	95 2b       	or	r25, r21
    2c04:	a6 2b       	or	r26, r22
    2c06:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2c08:	23 81       	ldd	r18, Z+3	; 0x03
    2c0a:	82 2b       	or	r24, r18
	*value = tempval;
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	80 83       	st	Z, r24
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	a2 83       	std	Z+2, r26	; 0x02
    2c14:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2c16:	80 e0       	ldi	r24, 0x00	; 0

}
    2c18:	26 96       	adiw	r28, 0x06	; 6
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	08 95       	ret

00002c2c <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	65 97       	sbiw	r28, 0x15	; 21
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2c3a:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.nbytes = 1;
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2c44:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2c48:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	tbuf[0] = controller;
    2c4c:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2c4e:	81 e4       	ldi	r24, 0x41	; 65
    2c50:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2c52:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2c54:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2c56:	80 e2       	ldi	r24, 0x20	; 32
    2c58:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2c5a:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2c5c:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2c5e:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2c60:	90 e4       	ldi	r25, 0x40	; 64
    2c62:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2c64:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2c66:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2c68:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2c6a:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2c6c:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2c6e:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2c70:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2c72:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2c74:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2c76:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2c78:	63 e1       	ldi	r22, 0x13	; 19
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	0e 94 25 14 	call	0x284a	; 0x284a <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2c84:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2c86:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2c88:	45 e1       	ldi	r20, 0x15	; 21
    2c8a:	be 01       	movw	r22, r28
    2c8c:	6f 5f       	subi	r22, 0xFF	; 255
    2c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2c9e:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x104>
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	41 f4       	brne	.+16     	; 0x2cb6 <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2ca6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2caa:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <recv1_buf>
    2cae:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb0:	91 f4       	brne	.+36     	; 0x2cd6 <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	17 c0       	rjmp	.+46     	; 0x2ce4 <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2cb6:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2cba:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2cbe:	c3 97       	sbiw	r24, 0x33	; 51
    2cc0:	70 f3       	brcs	.-36     	; 0x2c9e <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2cc2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2cc6:	6e e8       	ldi	r22, 0x8E	; 142
    2cc8:	7a e8       	ldi	r23, 0x8A	; 138
    2cca:	8f e2       	ldi	r24, 0x2F	; 47
    2ccc:	91 e0       	ldi	r25, 0x01	; 1
    2cce:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			return(ERROR);
    2cd2:	83 e6       	ldi	r24, 0x63	; 99
    2cd4:	07 c0       	rjmp	.+14     	; 0x2ce4 <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2cd6:	69 ea       	ldi	r22, 0xA9	; 169
    2cd8:	7a e8       	ldi	r23, 0x8A	; 138
    2cda:	8f e2       	ldi	r24, 0x2F	; 47
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		return(ERROR);
    2ce2:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2ce4:	65 96       	adiw	r28, 0x15	; 21
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	08 95       	ret

00002cf0 <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <move_MOTOR+0x10>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <move_MOTOR+0x12>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2d06:	e8 2e       	mov	r14, r24
    2d08:	f1 2c       	mov	r15, r1
    2d0a:	84 e3       	ldi	r24, 0x34	; 52
    2d0c:	8e 9d       	mul	r24, r14
    2d0e:	f0 01       	movw	r30, r0
    2d10:	8f 9d       	mul	r24, r15
    2d12:	f0 0d       	add	r31, r0
    2d14:	11 24       	eor	r1, r1
    2d16:	ea 5f       	subi	r30, 0xFA	; 250
    2d18:	f7 4d       	sbci	r31, 0xD7	; 215
    2d1a:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2d1c:	81 34       	cpi	r24, 0x41	; 65
    2d1e:	d0 f0       	brcs	.+52     	; 0x2d54 <move_MOTOR+0x64>
    2d20:	84 34       	cpi	r24, 0x44	; 68
    2d22:	28 f0       	brcs	.+10     	; 0x2d2e <move_MOTOR+0x3e>
    2d24:	9f e9       	ldi	r25, 0x9F	; 159
    2d26:	98 0f       	add	r25, r24
    2d28:	93 30       	cpi	r25, 0x03	; 3
    2d2a:	40 f0       	brcs	.+16     	; 0x2d3c <move_MOTOR+0x4c>
    2d2c:	13 c0       	rjmp	.+38     	; 0x2d54 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2d2e:	1f e3       	ldi	r17, 0x3F	; 63
    2d30:	18 0f       	add	r17, r24
			currentPosition = 0;
    2d32:	19 82       	std	Y+1, r1	; 0x01
    2d34:	1a 82       	std	Y+2, r1	; 0x02
    2d36:	1b 82       	std	Y+3, r1	; 0x03
    2d38:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2d3c:	1f e1       	ldi	r17, 0x1F	; 31
    2d3e:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2d40:	ae 01       	movw	r20, r28
    2d42:	4f 5f       	subi	r20, 0xFF	; 255
    2d44:	5f 4f       	sbci	r21, 0xFF	; 255
    2d46:	60 e1       	ldi	r22, 0x10	; 16
    2d48:	81 2f       	mov	r24, r17
    2d4a:	0e 94 4a 14 	call	0x2894	; 0x2894 <get_MOTOREncoder>
			if (retval == ERROR) {
    2d4e:	83 36       	cpi	r24, 0x63	; 99
    2d50:	49 f4       	brne	.+18     	; 0x2d64 <move_MOTOR+0x74>
    2d52:	39 c0       	rjmp	.+114    	; 0x2dc6 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2d54:	60 ec       	ldi	r22, 0xC0	; 192
    2d56:	7a e8       	ldi	r23, 0x8A	; 138
    2d58:	8d e2       	ldi	r24, 0x2D	; 45
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
			return(ERROR);
    2d60:	83 e6       	ldi	r24, 0x63	; 99
    2d62:	32 c0       	rjmp	.+100    	; 0x2dc8 <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2d64:	84 e3       	ldi	r24, 0x34	; 52
    2d66:	8e 9d       	mul	r24, r14
    2d68:	f0 01       	movw	r30, r0
    2d6a:	8f 9d       	mul	r24, r15
    2d6c:	f0 0d       	add	r31, r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	ea 5f       	subi	r30, 0xFA	; 250
    2d72:	f7 4d       	sbci	r31, 0xD7	; 215
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	81 11       	cpse	r24, r1
    2d78:	08 c0       	rjmp	.+16     	; 0x2d8a <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2d7a:	69 ed       	ldi	r22, 0xD9	; 217
    2d7c:	7a e8       	ldi	r23, 0x8A	; 138
    2d7e:	83 e3       	ldi	r24, 0x33	; 51
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
		return(ERROR);
    2d86:	83 e6       	ldi	r24, 0x63	; 99
    2d88:	1f c0       	rjmp	.+62     	; 0x2dc8 <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2d8a:	24 e3       	ldi	r18, 0x34	; 52
    2d8c:	2e 9d       	mul	r18, r14
    2d8e:	c0 01       	movw	r24, r0
    2d90:	2f 9d       	mul	r18, r15
    2d92:	90 0d       	add	r25, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	88 5f       	subi	r24, 0xF8	; 248
    2d98:	97 4d       	sbci	r25, 0xD7	; 215
    2d9a:	0e 94 75 21 	call	0x42ea	; 0x42ea <atol>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	ac 01       	movw	r20, r24
    2da2:	ac e0       	ldi	r26, 0x0C	; 12
    2da4:	b1 e0       	ldi	r27, 0x01	; 1
    2da6:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <__muluhisi3>
    2daa:	c9 80       	ldd	r12, Y+1	; 0x01
    2dac:	da 80       	ldd	r13, Y+2	; 0x02
    2dae:	eb 80       	ldd	r14, Y+3	; 0x03
    2db0:	fc 80       	ldd	r15, Y+4	; 0x04
    2db2:	ab 01       	movw	r20, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	4c 0d       	add	r20, r12
    2db8:	5d 1d       	adc	r21, r13
    2dba:	6e 1d       	adc	r22, r14
    2dbc:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2dbe:	81 2f       	mov	r24, r17
    2dc0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <move_MOTORAbsolute>
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2dc6:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2dc8:	24 96       	adiw	r28, 0x04	; 4
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	de bf       	out	0x3e, r29	; 62
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	ff 90       	pop	r15
    2dd6:	ef 90       	pop	r14
    2dd8:	df 90       	pop	r13
    2dda:	cf 90       	pop	r12
    2ddc:	08 95       	ret

00002dde <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	26 97       	sbiw	r28, 0x06	; 6
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2dec:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.nbytes = 1;
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2df6:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2dfa:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	tbuf[0] = controller;
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2e00:	86 e1       	ldi	r24, 0x16	; 22
    2e02:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2e04:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2e06:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2e08:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2e0a:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    2e0c:	46 e0       	ldi	r20, 0x06	; 6
    2e0e:	be 01       	movw	r22, r28
    2e10:	6f 5f       	subi	r22, 0xFF	; 255
    2e12:	7f 4f       	sbci	r23, 0xFF	; 255
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e22:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x104>
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	41 f4       	brne	.+16     	; 0x2e3a <set_MOTOREncoder+0x5c>
			stop_TCB0();
    2e2a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    2e2e:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <recv1_buf>
    2e32:	8f 3f       	cpi	r24, 0xFF	; 255
    2e34:	61 f0       	breq	.+24     	; 0x2e4e <set_MOTOREncoder+0x70>
		return(ERROR);
    2e36:	83 e6       	ldi	r24, 0x63	; 99
    2e38:	0b c0       	rjmp	.+22     	; 0x2e50 <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    2e3a:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2e3e:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2e42:	c3 97       	sbiw	r24, 0x33	; 51
    2e44:	70 f3       	brcs	.-36     	; 0x2e22 <set_MOTOREncoder+0x44>
			stop_TCB0();
    2e46:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			return(ERROR);
    2e4a:	83 e6       	ldi	r24, 0x63	; 99
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    2e4e:	80 e0       	ldi	r24, 0x00	; 0

}
    2e50:	26 96       	adiw	r28, 0x06	; 6
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	08 95       	ret

00002e5c <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    2e64:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2e66:	c0 e8       	ldi	r28, 0x80	; 128
    2e68:	1f c0       	rjmp	.+62     	; 0x2ea8 <init_MOTORS+0x4c>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    2e6a:	48 e0       	ldi	r20, 0x08	; 8
    2e6c:	57 e1       	ldi	r21, 0x17	; 23
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	8c 2f       	mov	r24, r28
    2e74:	0e 94 ef 16 	call	0x2dde	; 0x2dde <set_MOTOREncoder>
    2e78:	83 36       	cpi	r24, 0x63	; 99
    2e7a:	a9 f4       	brne	.+42     	; 0x2ea6 <init_MOTORS+0x4a>
			if (!firstTime[controller - 128]) {
    2e7c:	0c 2f       	mov	r16, r28
    2e7e:	10 e0       	ldi	r17, 0x00	; 0
    2e80:	00 58       	subi	r16, 0x80	; 128
    2e82:	11 09       	sbc	r17, r1
    2e84:	f8 01       	movw	r30, r16
    2e86:	ef 5f       	subi	r30, 0xFF	; 255
    2e88:	f7 4d       	sbci	r31, 0xD7	; 215
    2e8a:	80 81       	ld	r24, Z
    2e8c:	81 11       	cpse	r24, r1
    2e8e:	0a c0       	rjmp	.+20     	; 0x2ea4 <init_MOTORS+0x48>
				printError(ERR_MTRSETENC, "init_MOTORS");
    2e90:	6d ef       	ldi	r22, 0xFD	; 253
    2e92:	7a e8       	ldi	r23, 0x8A	; 138
    2e94:	82 e3       	ldi	r24, 0x32	; 50
    2e96:	91 e0       	ldi	r25, 0x01	; 1
    2e98:	0e 94 57 06 	call	0xcae	; 0xcae <printError>
				firstTime[controller - 128] = NO;
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	ef 5f       	subi	r30, 0xFF	; 255
    2ea0:	f7 4d       	sbci	r31, 0xD7	; 215
    2ea2:	10 82       	st	Z, r1
			}
			error++;
    2ea4:	df 5f       	subi	r29, 0xFF	; 255

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2ea6:	cf 5f       	subi	r28, 0xFF	; 255
    2ea8:	c3 38       	cpi	r28, 0x83	; 131
    2eaa:	f8 f2       	brcs	.-66     	; 0x2e6a <init_MOTORS+0xe>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    2eac:	dd 23       	and	r29, r29
    2eae:	11 f0       	breq	.+4      	; 0x2eb4 <init_MOTORS+0x58>
		return(ERROR);
    2eb0:	83 e6       	ldi	r24, 0x63	; 99
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <init_MOTORS+0x5a>
	} else {
		return(NOERROR);
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	1f 91       	pop	r17
    2ebc:	0f 91       	pop	r16
    2ebe:	08 95       	ret

00002ec0 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    2ec0:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2ec2:	e0 e6       	ldi	r30, 0x60	; 96
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2ec8:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2eca:	88 ed       	ldi	r24, 0xD8	; 216
    2ecc:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ece:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <init_RTC+0x14>
		asm("nop");
    2ed2:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ed4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2ed8:	96 fd       	sbrc	r25, 6
    2eda:	fb cf       	rjmp	.-10     	; 0x2ed2 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2edc:	e0 e6       	ldi	r30, 0x60	; 96
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2ee2:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2ee4:	28 ed       	ldi	r18, 0xD8	; 216
    2ee6:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ee8:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2eea:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2eec:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2eee:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ef0:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <init_RTC+0x36>
		asm("nop");
    2ef4:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2ef6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2efa:	91 11       	cpse	r25, r1
    2efc:	fb cf       	rjmp	.-10     	; 0x2ef4 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    2efe:	e0 e4       	ldi	r30, 0x40	; 64
    2f00:	f1 e0       	ldi	r31, 0x01	; 1
    2f02:	42 87       	std	Z+10, r20	; 0x0a
    2f04:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2f0a:	85 81       	ldd	r24, Z+5	; 0x05
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2f10:	81 eb       	ldi	r24, 0xB1	; 177
    2f12:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	81 60       	ori	r24, 0x01	; 1
    2f18:	82 83       	std	Z+2, r24	; 0x02
    2f1a:	08 95       	ret

00002f1c <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2f1c:	1f 92       	push	r1
    2f1e:	0f 92       	push	r0
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	0f 92       	push	r0
    2f24:	11 24       	eor	r1, r1
    2f26:	2f 93       	push	r18
    2f28:	3f 93       	push	r19
    2f2a:	4f 93       	push	r20
    2f2c:	5f 93       	push	r21
    2f2e:	6f 93       	push	r22
    2f30:	7f 93       	push	r23
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	af 93       	push	r26
    2f38:	bf 93       	push	r27
    2f3a:	ef 93       	push	r30
    2f3c:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2f44:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <timerOLED>
    2f48:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <timerOLED+0x1>
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	b9 f0       	breq	.+46     	; 0x2f7e <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2f50:	20 91 10 2a 	lds	r18, 0x2A10	; 0x802a10 <timeoutOLED>
    2f54:	30 91 11 2a 	lds	r19, 0x2A11	; 0x802a11 <timeoutOLED+0x1>
    2f58:	28 17       	cp	r18, r24
    2f5a:	39 07       	cpc	r19, r25
    2f5c:	58 f4       	brcc	.+22     	; 0x2f74 <__vector_3+0x58>
			clear_OLED(0);
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	0e 94 89 0b 	call	0x1712	; 0x1712 <clear_OLED>
			clear_OLED(1);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	0e 94 89 0b 	call	0x1712	; 0x1712 <clear_OLED>
			timerOLED = 0;
    2f6a:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED>
    2f6e:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED+0x1>
    2f72:	05 c0       	rjmp	.+10     	; 0x2f7e <__vector_3+0x62>
		} else {
			timerOLED++;
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timerOLED>
    2f7a:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2f7e:	80 e2       	ldi	r24, 0x20	; 32
    2f80:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2f84:	ff 91       	pop	r31
    2f86:	ef 91       	pop	r30
    2f88:	bf 91       	pop	r27
    2f8a:	af 91       	pop	r26
    2f8c:	9f 91       	pop	r25
    2f8e:	8f 91       	pop	r24
    2f90:	7f 91       	pop	r23
    2f92:	6f 91       	pop	r22
    2f94:	5f 91       	pop	r21
    2f96:	4f 91       	pop	r20
    2f98:	3f 91       	pop	r19
    2f9a:	2f 91       	pop	r18
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	0f 90       	pop	r0
    2fa2:	1f 90       	pop	r1
    2fa4:	18 95       	reti

00002fa6 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	24 e3       	ldi	r18, 0x34	; 52
    2fae:	28 9f       	mul	r18, r24
    2fb0:	f0 01       	movw	r30, r0
    2fb2:	29 9f       	mul	r18, r25
    2fb4:	f0 0d       	add	r31, r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	ea 5f       	subi	r30, 0xFA	; 250
    2fba:	f7 4d       	sbci	r31, 0xD7	; 215
    2fbc:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2fbe:	24 37       	cpi	r18, 0x74	; 116
    2fc0:	e9 f4       	brne	.+58     	; 0x2ffc <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2fc2:	24 e3       	ldi	r18, 0x34	; 52
    2fc4:	28 9f       	mul	r18, r24
    2fc6:	e0 01       	movw	r28, r0
    2fc8:	29 9f       	mul	r18, r25
    2fca:	d0 0d       	add	r29, r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	c8 5f       	subi	r28, 0xF8	; 248
    2fd0:	d7 4d       	sbci	r29, 0xD7	; 215
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	00 20       	and	r0, r0
    2fd8:	e9 f7       	brne	.-6      	; 0x2fd4 <set+0x2e>
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	ec 1b       	sub	r30, r28
    2fde:	fd 0b       	sbc	r31, r29
    2fe0:	73 97       	sbiw	r30, 0x13	; 19
    2fe2:	71 f4       	brne	.+28     	; 0x3000 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	0e 94 f5 05 	call	0xbea	; 0xbea <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2fea:	24 e1       	ldi	r18, 0x14	; 20
    2fec:	ae 01       	movw	r20, r28
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	80 e5       	ldi	r24, 0x50	; 80
    2ff4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    3000:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    3008:	e0 ea       	ldi	r30, 0xA0	; 160
    300a:	f4 e0       	ldi	r31, 0x04	; 4
    300c:	82 89       	ldd	r24, Z+18	; 0x12
    300e:	87 7f       	andi	r24, 0xF7	; 247
    3010:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	82 83       	std	Z+2, r24	; 0x02
    3016:	08 95       	ret

00003018 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    3018:	83 30       	cpi	r24, 0x03	; 3
    301a:	18 f0       	brcs	.+6      	; 0x3022 <get_temperature+0xa>
    301c:	83 30       	cpi	r24, 0x03	; 3
    301e:	21 f0       	breq	.+8      	; 0x3028 <get_temperature+0x10>
    3020:	06 c0       	rjmp	.+12     	; 0x302e <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    3022:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    3026:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    3028:	0e 94 9a 08 	call	0x1134	; 0x1134 <read_MCP9808>
			break;
    302c:	08 95       	ret
		default:
			temperature = -666.0;
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	70 e8       	ldi	r23, 0x80	; 128
    3032:	86 e2       	ldi	r24, 0x26	; 38
    3034:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    3036:	08 95       	ret

00003038 <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	e2 97       	sbiw	r28, 0x32	; 50
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
    3052:	8d e8       	ldi	r24, 0x8D	; 141
    3054:	90 e2       	ldi	r25, 0x20	; 32
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <testroutine+0x1e>
    305a:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    305c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    3060:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    3064:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3068:	9f 93       	push	r25
    306a:	8f 93       	push	r24
    306c:	89 e0       	ldi	r24, 0x09	; 9
    306e:	9b e8       	ldi	r25, 0x8B	; 139
    3070:	9f 93       	push	r25
    3072:	8f 93       	push	r24
    3074:	8e 01       	movw	r16, r28
    3076:	0f 5f       	subi	r16, 0xFF	; 255
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	1f 93       	push	r17
    307c:	0f 93       	push	r16
    307e:	0e 94 ed 22 	call	0x45da	; 0x45da <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    3082:	f8 01       	movw	r30, r16
    3084:	01 90       	ld	r0, Z+
    3086:	00 20       	and	r0, r0
    3088:	e9 f7       	brne	.-6      	; 0x3084 <testroutine+0x4c>
    308a:	31 97       	sbiw	r30, 0x01	; 1
    308c:	af 01       	movw	r20, r30
    308e:	40 1b       	sub	r20, r16
    3090:	51 0b       	sbc	r21, r17
    3092:	b8 01       	movw	r22, r16
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	e2 96       	adiw	r28, 0x32	; 50
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	08 95       	ret

000030b6 <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    30b6:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <ticks>
    30ba:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    30be:	25 e0       	ldi	r18, 0x05	; 5
    30c0:	3d e0       	ldi	r19, 0x0D	; 13
    30c2:	ac 01       	movw	r20, r24
    30c4:	42 9f       	mul	r20, r18
    30c6:	c0 01       	movw	r24, r0
    30c8:	43 9f       	mul	r20, r19
    30ca:	90 0d       	add	r25, r0
    30cc:	52 9f       	mul	r21, r18
    30ce:	90 0d       	add	r25, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	e0 e8       	ldi	r30, 0x80	; 128
    30d4:	fa e0       	ldi	r31, 0x0A	; 10
    30d6:	84 87       	std	Z+12, r24	; 0x0c
    30d8:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    30de:	80 83       	st	Z, r24
    30e0:	08 95       	ret

000030e2 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    30e2:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    30e6:	08 95       	ret

000030e8 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    30e8:	1f 92       	push	r1
    30ea:	0f 92       	push	r0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	0f 92       	push	r0
    30f0:	11 24       	eor	r1, r1
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    30fc:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    3100:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <ticks>
    310a:	90 93 14 2a 	sts	0x2A14, r25	; 0x802a14 <ticks+0x1>

    310e:	9f 91       	pop	r25
    3110:	8f 91       	pop	r24
    3112:	0f 90       	pop	r0
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	0f 90       	pop	r0
    3118:	1f 90       	pop	r1
    311a:	18 95       	reti

0000311c <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    311c:	e0 ea       	ldi	r30, 0xA0	; 160
    311e:	f8 e0       	ldi	r31, 0x08	; 8
    3120:	8b e0       	ldi	r24, 0x0B	; 11
    3122:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    3124:	83 81       	ldd	r24, Z+3	; 0x03
    3126:	81 60       	ori	r24, 0x01	; 1
    3128:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    312a:	85 81       	ldd	r24, Z+5	; 0x05
    312c:	81 60       	ori	r24, 0x01	; 1
    312e:	85 83       	std	Z+5, r24	; 0x05
    3130:	08 95       	ret

00003132 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    3134:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3136:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    313a:	88 23       	and	r24, r24
    313c:	dc f7       	brge	.-10     	; 0x3134 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    313e:	e0 ea       	ldi	r30, 0xA0	; 160
    3140:	f8 e0       	ldi	r31, 0x08	; 8
    3142:	84 81       	ldd	r24, Z+4	; 0x04
    3144:	8b 7f       	andi	r24, 0xFB	; 251
    3146:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3148:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    314a:	94 81       	ldd	r25, Z+4	; 0x04
    314c:	92 60       	ori	r25, 0x02	; 2
    314e:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    3150:	08 95       	ret

00003152 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <readlast_TWI+0x4>
		asm("nop");
    3154:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3156:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    315a:	88 23       	and	r24, r24
    315c:	dc f7       	brge	.-10     	; 0x3154 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    315e:	e0 ea       	ldi	r30, 0xA0	; 160
    3160:	f8 e0       	ldi	r31, 0x08	; 8
    3162:	84 81       	ldd	r24, Z+4	; 0x04
    3164:	84 60       	ori	r24, 0x04	; 4
    3166:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3168:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    316a:	08 95       	ret

0000316c <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    316c:	61 30       	cpi	r22, 0x01	; 1
    316e:	39 f4       	brne	.+14     	; 0x317e <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	81 60       	ori	r24, 0x01	; 1
    3178:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    317e:	88 0f       	add	r24, r24
    3180:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    318c:	0b c0       	rjmp	.+22     	; 0x31a4 <start_TWI+0x38>
		if (ticks > 10) {
    318e:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    3192:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3196:	0b 97       	sbiw	r24, 0x0b	; 11
    3198:	20 f0       	brcs	.+8      	; 0x31a2 <start_TWI+0x36>
			stop_TCB0();
    319a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <stop_TCB0>
			return(ERROR);
    319e:	83 e6       	ldi	r24, 0x63	; 99
    31a0:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    31a2:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    31a4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31a8:	80 7c       	andi	r24, 0xC0	; 192
    31aa:	89 f3       	breq	.-30     	; 0x318e <start_TWI+0x22>
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    31ac:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31b0:	82 fd       	sbrc	r24, 2
    31b2:	0c c0       	rjmp	.+24     	; 0x31cc <start_TWI+0x60>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    31b4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31b8:	83 fd       	sbrc	r24, 3
    31ba:	0a c0       	rjmp	.+20     	; 0x31d0 <start_TWI+0x64>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    31bc:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31c0:	89 2f       	mov	r24, r25
    31c2:	80 71       	andi	r24, 0x10	; 16
    31c4:	94 ff       	sbrs	r25, 4
    31c6:	05 c0       	rjmp	.+10     	; 0x31d2 <start_TWI+0x66>
		return(TWINODEVICE);
    31c8:	84 e0       	ldi	r24, 0x04	; 4
    31ca:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    31d0:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(NOERROR);
	}
}
    31d2:	08 95       	ret

000031d4 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    31d4:	87 e0       	ldi	r24, 0x07	; 7
    31d6:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    31da:	08 95       	ret

000031dc <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <write_TWI+0x4>
		asm("nop");
    31de:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    31e0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31e4:	96 ff       	sbrs	r25, 6
    31e6:	fb cf       	rjmp	.-10     	; 0x31de <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    31e8:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    31ec:	01 c0       	rjmp	.+2      	; 0x31f0 <write_TWI+0x14>
		asm("nop");
    31ee:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    31f0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31f4:	86 ff       	sbrs	r24, 6
    31f6:	fb cf       	rjmp	.-10     	; 0x31ee <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    31f8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31fc:	89 2f       	mov	r24, r25
    31fe:	80 71       	andi	r24, 0x10	; 16
    3200:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    3202:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    3204:	08 95       	ret

00003206 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3206:	e0 e0       	ldi	r30, 0x00	; 0
    3208:	f4 e0       	ldi	r31, 0x04	; 4
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    320e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3210:	e0 e0       	ldi	r30, 0x00	; 0
    3212:	f8 e0       	ldi	r31, 0x08	; 8
    3214:	2d e6       	ldi	r18, 0x6D	; 109
    3216:	35 e0       	ldi	r19, 0x05	; 5
    3218:	20 87       	std	Z+8, r18	; 0x08
    321a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    321c:	95 81       	ldd	r25, Z+5	; 0x05
    321e:	90 68       	ori	r25, 0x80	; 128
    3220:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3222:	96 81       	ldd	r25, Z+6	; 0x06
    3224:	90 64       	ori	r25, 0x40	; 64
    3226:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    3228:	96 81       	ldd	r25, Z+6	; 0x06
    322a:	90 68       	ori	r25, 0x80	; 128
    322c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    322e:	10 92 1e 2d 	sts	0x2D1E, r1	; 0x802d1e <send0_buf+0xff>
	send0_buf.tail = 0;
    3232:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0x100>
	send0_buf.done = YES;
    3236:	80 93 23 2d 	sts	0x2D23, r24	; 0x802d23 <send0_buf+0x104>
	recv0_buf.head = 0;
    323a:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    323e:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    3242:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv0_buf>
	recv0_buf.length = 0;
    3246:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x102>
	recv0_buf.done = NO;
    324a:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    324e:	e0 e4       	ldi	r30, 0x40	; 64
    3250:	f4 e0       	ldi	r31, 0x04	; 4
    3252:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    3254:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    3256:	e0 e2       	ldi	r30, 0x20	; 32
    3258:	f8 e0       	ldi	r31, 0x08	; 8
    325a:	4b e5       	ldi	r20, 0x5B	; 91
    325c:	51 e0       	ldi	r21, 0x01	; 1
    325e:	40 87       	std	Z+8, r20	; 0x08
    3260:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3262:	95 81       	ldd	r25, Z+5	; 0x05
    3264:	90 68       	ori	r25, 0x80	; 128
    3266:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    3268:	96 81       	ldd	r25, Z+6	; 0x06
    326a:	90 64       	ori	r25, 0x40	; 64
    326c:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    326e:	96 81       	ldd	r25, Z+6	; 0x06
    3270:	90 68       	ori	r25, 0x80	; 128
    3272:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3274:	10 92 2d 30 	sts	0x302D, r1	; 0x80302d <send1_buf+0xff>
	send1_buf.tail = 0;
    3278:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x100>
	send1_buf.done = YES;
    327c:	80 93 32 30 	sts	0x3032, r24	; 0x803032 <send1_buf+0x104>
	recv1_buf.head = 0;
    3280:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    3284:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    3288:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.done = NO;
    328c:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3290:	e0 e2       	ldi	r30, 0x20	; 32
    3292:	f4 e0       	ldi	r31, 0x04	; 4
    3294:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3296:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3298:	e0 e6       	ldi	r30, 0x60	; 96
    329a:	f8 e0       	ldi	r31, 0x08	; 8
    329c:	20 87       	std	Z+8, r18	; 0x08
    329e:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    32a0:	96 81       	ldd	r25, Z+6	; 0x06
    32a2:	90 64       	ori	r25, 0x40	; 64
    32a4:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    32a6:	96 81       	ldd	r25, Z+6	; 0x06
    32a8:	90 68       	ori	r25, 0x80	; 128
    32aa:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    32ac:	80 93 2d 2f 	sts	0x2F2D, r24	; 0x802f2d <send3_buf+0x104>
	recv3_buf.done = NO;
    32b0:	10 92 28 2e 	sts	0x2E28, r1	; 0x802e28 <recv3_buf+0x104>
    32b4:	08 95       	ret

000032b6 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    32b6:	0f 93       	push	r16
    32b8:	1f 93       	push	r17
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29
    32be:	eb 01       	movw	r28, r22
    32c0:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	01 f1       	breq	.+64     	; 0x3306 <send_USART+0x50>
    32c6:	b0 f0       	brcs	.+44     	; 0x32f4 <send_USART+0x3e>
    32c8:	83 30       	cpi	r24, 0x03	; 3
    32ca:	09 f4       	brne	.+2      	; 0x32ce <send_USART+0x18>
    32cc:	6d c0       	rjmp	.+218    	; 0x33a8 <send_USART+0xf2>
    32ce:	74 c0       	rjmp	.+232    	; 0x33b8 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    32d0:	ee e1       	ldi	r30, 0x1E	; 30
    32d2:	fd e2       	ldi	r31, 0x2D	; 45
    32d4:	80 81       	ld	r24, Z
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	38 81       	ld	r19, Y
    32da:	dc 01       	movw	r26, r24
    32dc:	a1 5e       	subi	r26, 0xE1	; 225
    32de:	b3 4d       	sbci	r27, 0xD3	; 211
    32e0:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    32e2:	01 96       	adiw	r24, 0x01	; 1
    32e4:	6f ef       	ldi	r22, 0xFF	; 255
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    32ec:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    32ee:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    32f0:	21 96       	adiw	r28, 0x01	; 1
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    32f4:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    32f6:	21 17       	cp	r18, r17
    32f8:	58 f3       	brcs	.-42     	; 0x32d0 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    32fa:	e0 e0       	ldi	r30, 0x00	; 0
    32fc:	f8 e0       	ldi	r31, 0x08	; 8
    32fe:	85 81       	ldd	r24, Z+5	; 0x05
    3300:	80 62       	ori	r24, 0x20	; 32
    3302:	85 83       	std	Z+5, r24	; 0x05
			break;
    3304:	59 c0       	rjmp	.+178    	; 0x33b8 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    3306:	64 2f       	mov	r22, r20
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	ce 01       	movw	r24, r28
    330c:	0e 94 25 14 	call	0x284a	; 0x284a <crc16>
    3310:	48 2f       	mov	r20, r24
    3312:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	11 c0       	rjmp	.+34     	; 0x333a <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    3318:	ed e2       	ldi	r30, 0x2D	; 45
    331a:	f0 e3       	ldi	r31, 0x30	; 48
    331c:	80 81       	ld	r24, Z
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	38 81       	ld	r19, Y
    3322:	dc 01       	movw	r26, r24
    3324:	a2 5d       	subi	r26, 0xD2	; 210
    3326:	b0 4d       	sbci	r27, 0xD0	; 208
    3328:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    332a:	01 96       	adiw	r24, 0x01	; 1
    332c:	6f ef       	ldi	r22, 0xFF	; 255
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    3334:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3336:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3338:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    333a:	21 17       	cp	r18, r17
    333c:	68 f3       	brcs	.-38     	; 0x3318 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    333e:	ed e2       	ldi	r30, 0x2D	; 45
    3340:	f0 e3       	ldi	r31, 0x30	; 48
    3342:	80 81       	ld	r24, Z
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	dc 01       	movw	r26, r24
    3348:	a2 5d       	subi	r26, 0xD2	; 210
    334a:	b0 4d       	sbci	r27, 0xD0	; 208
    334c:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    334e:	01 96       	adiw	r24, 0x01	; 1
    3350:	2f ef       	ldi	r18, 0xFF	; 255
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	b9 01       	movw	r22, r18
    3356:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	dc 01       	movw	r26, r24
    335e:	a2 5d       	subi	r26, 0xD2	; 210
    3360:	b0 4d       	sbci	r27, 0xD0	; 208
    3362:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	b9 01       	movw	r22, r18
    3368:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    336c:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    336e:	1e 5f       	subi	r17, 0xFE	; 254
    3370:	10 93 2f 30 	sts	0x302F, r17	; 0x80302f <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    3374:	10 92 31 30 	sts	0x3031, r1	; 0x803031 <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3378:	e0 e2       	ldi	r30, 0x20	; 32
    337a:	f8 e0       	ldi	r31, 0x08	; 8
    337c:	85 81       	ldd	r24, Z+5	; 0x05
    337e:	80 62       	ori	r24, 0x20	; 32
    3380:	85 83       	std	Z+5, r24	; 0x05
			break;
    3382:	1a c0       	rjmp	.+52     	; 0x33b8 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3384:	e8 e2       	ldi	r30, 0x28	; 40
    3386:	ff e2       	ldi	r31, 0x2F	; 47
    3388:	80 81       	ld	r24, Z
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	38 81       	ld	r19, Y
    338e:	dc 01       	movw	r26, r24
    3390:	a7 5d       	subi	r26, 0xD7	; 215
    3392:	b1 4d       	sbci	r27, 0xD1	; 209
    3394:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3396:	01 96       	adiw	r24, 0x01	; 1
    3398:	6f ef       	ldi	r22, 0xFF	; 255
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    33a0:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    33a2:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    33a4:	21 96       	adiw	r28, 0x01	; 1
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    33a8:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    33aa:	21 17       	cp	r18, r17
    33ac:	58 f3       	brcs	.-42     	; 0x3384 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    33ae:	e0 e6       	ldi	r30, 0x60	; 96
    33b0:	f8 e0       	ldi	r31, 0x08	; 8
    33b2:	85 81       	ldd	r24, Z+5	; 0x05
    33b4:	80 62       	ori	r24, 0x20	; 32
    33b6:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	1f 91       	pop	r17
    33be:	0f 91       	pop	r16
    33c0:	08 95       	ret

000033c2 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    33c2:	1f 92       	push	r1
    33c4:	0f 92       	push	r0
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	0f 92       	push	r0
    33ca:	11 24       	eor	r1, r1
    33cc:	5f 93       	push	r21
    33ce:	6f 93       	push	r22
    33d0:	7f 93       	push	r23
    33d2:	8f 93       	push	r24
    33d4:	9f 93       	push	r25
    33d6:	af 93       	push	r26
    33d8:	bf 93       	push	r27
    33da:	ef 93       	push	r30
    33dc:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    33de:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <recv0_buf+0x102>
    33e2:	8f 3f       	cpi	r24, 0xFF	; 255
    33e4:	19 f1       	breq	.+70     	; 0x342c <__vector_17+0x6a>
		c = USART0.RXDATAL;
    33e6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    33ea:	8d 30       	cpi	r24, 0x0D	; 13
    33ec:	51 f4       	brne	.+20     	; 0x3402 <__vector_17+0x40>
			recv0_buf.done = YES;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    33f4:	e0 91 19 2c 	lds	r30, 0x2C19	; 0x802c19 <recv0_buf+0xff>
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	e6 5e       	subi	r30, 0xE6	; 230
    33fc:	f4 4d       	sbci	r31, 0xD4	; 212
    33fe:	10 82       	st	Z, r1
    3400:	06 c0       	rjmp	.+12     	; 0x340e <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3402:	e0 91 19 2c 	lds	r30, 0x2C19	; 0x802c19 <recv0_buf+0xff>
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	e6 5e       	subi	r30, 0xE6	; 230
    340a:	f4 4d       	sbci	r31, 0xD4	; 212
    340c:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    340e:	ec e1       	ldi	r30, 0x1C	; 28
    3410:	fc e2       	ldi	r31, 0x2C	; 44
    3412:	80 81       	ld	r24, Z
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3418:	e9 e1       	ldi	r30, 0x19	; 25
    341a:	fc e2       	ldi	r31, 0x2C	; 44
    341c:	80 81       	ld	r24, Z
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	6f ef       	ldi	r22, 0xFF	; 255
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    342a:	80 83       	st	Z, r24
	}
}
    342c:	ff 91       	pop	r31
    342e:	ef 91       	pop	r30
    3430:	bf 91       	pop	r27
    3432:	af 91       	pop	r26
    3434:	9f 91       	pop	r25
    3436:	8f 91       	pop	r24
    3438:	7f 91       	pop	r23
    343a:	6f 91       	pop	r22
    343c:	5f 91       	pop	r21
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	0f 90       	pop	r0
    3444:	1f 90       	pop	r1
    3446:	18 95       	reti

00003448 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    3448:	1f 92       	push	r1
    344a:	0f 92       	push	r0
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	0f 92       	push	r0
    3450:	11 24       	eor	r1, r1
    3452:	8f 93       	push	r24
    3454:	9f 93       	push	r25
    3456:	ef 93       	push	r30
    3458:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    345a:	e0 e0       	ldi	r30, 0x00	; 0
    345c:	f8 e0       	ldi	r31, 0x08	; 8
    345e:	85 81       	ldd	r24, Z+5	; 0x05
    3460:	8f 7d       	andi	r24, 0xDF	; 223
    3462:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3464:	80 91 1e 2d 	lds	r24, 0x2D1E	; 0x802d1e <send0_buf+0xff>
    3468:	e0 91 1f 2d 	lds	r30, 0x2D1F	; 0x802d1f <send0_buf+0x100>
    346c:	8e 17       	cp	r24, r30
    346e:	b9 f0       	breq	.+46     	; 0x349e <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3470:	91 e0       	ldi	r25, 0x01	; 1
    3472:	9e 0f       	add	r25, r30
    3474:	90 93 1f 2d 	sts	0x2D1F, r25	; 0x802d1f <send0_buf+0x100>
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	e1 5e       	subi	r30, 0xE1	; 225
    347c:	f3 4d       	sbci	r31, 0xD3	; 211
    347e:	80 81       	ld	r24, Z
    3480:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	9f 3f       	cpi	r25, 0xFF	; 255
    3488:	08 f4       	brcc	.+2      	; 0x348c <__vector_18+0x44>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	89 0f       	add	r24, r25
    348e:	80 93 1f 2d 	sts	0x2D1F, r24	; 0x802d1f <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3492:	e0 e0       	ldi	r30, 0x00	; 0
    3494:	f8 e0       	ldi	r31, 0x08	; 8
    3496:	85 81       	ldd	r24, Z+5	; 0x05
    3498:	80 62       	ori	r24, 0x20	; 32
    349a:	85 83       	std	Z+5, r24	; 0x05
    349c:	03 c0       	rjmp	.+6      	; 0x34a4 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	80 93 23 2d 	sts	0x2D23, r24	; 0x802d23 <send0_buf+0x104>
	}

}
    34a4:	ff 91       	pop	r31
    34a6:	ef 91       	pop	r30
    34a8:	9f 91       	pop	r25
    34aa:	8f 91       	pop	r24
    34ac:	0f 90       	pop	r0
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	0f 90       	pop	r0
    34b2:	1f 90       	pop	r1
    34b4:	18 95       	reti

000034b6 <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    34b6:	1f 92       	push	r1
    34b8:	0f 92       	push	r0
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	0f 92       	push	r0
    34be:	11 24       	eor	r1, r1
    34c0:	2f 93       	push	r18
    34c2:	8f 93       	push	r24
    34c4:	9f 93       	push	r25
    34c6:	ef 93       	push	r30
    34c8:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    34ca:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    34ce:	e0 91 18 2b 	lds	r30, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    34d2:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x101>
    34d6:	e8 17       	cp	r30, r24
    34d8:	40 f4       	brcc	.+16     	; 0x34ea <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    34da:	21 e0       	ldi	r18, 0x01	; 1
    34dc:	2e 0f       	add	r18, r30
    34de:	20 93 18 2b 	sts	0x2B18, r18	; 0x802b18 <recv1_buf+0x103>
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	eb 5e       	subi	r30, 0xEB	; 235
    34e6:	f5 4d       	sbci	r31, 0xD5	; 213
    34e8:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    34ea:	90 91 18 2b 	lds	r25, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    34ee:	98 17       	cp	r25, r24
    34f0:	18 f0       	brcs	.+6      	; 0x34f8 <__vector_26+0x42>
		recv1_buf.done = YES;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <recv1_buf+0x104>
	}

}
    34f8:	ff 91       	pop	r31
    34fa:	ef 91       	pop	r30
    34fc:	9f 91       	pop	r25
    34fe:	8f 91       	pop	r24
    3500:	2f 91       	pop	r18
    3502:	0f 90       	pop	r0
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	0f 90       	pop	r0
    3508:	1f 90       	pop	r1
    350a:	18 95       	reti

0000350c <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    350c:	1f 92       	push	r1
    350e:	0f 92       	push	r0
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	0f 92       	push	r0
    3514:	11 24       	eor	r1, r1
    3516:	8f 93       	push	r24
    3518:	9f 93       	push	r25
    351a:	ef 93       	push	r30
    351c:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    351e:	e0 e2       	ldi	r30, 0x20	; 32
    3520:	f8 e0       	ldi	r31, 0x08	; 8
    3522:	85 81       	ldd	r24, Z+5	; 0x05
    3524:	8f 7d       	andi	r24, 0xDF	; 223
    3526:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3528:	80 91 2d 30 	lds	r24, 0x302D	; 0x80302d <send1_buf+0xff>
    352c:	e0 91 2e 30 	lds	r30, 0x302E	; 0x80302e <send1_buf+0x100>
    3530:	8e 17       	cp	r24, r30
    3532:	b9 f0       	breq	.+46     	; 0x3562 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	9e 0f       	add	r25, r30
    3538:	90 93 2e 30 	sts	0x302E, r25	; 0x80302e <send1_buf+0x100>
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	e2 5d       	subi	r30, 0xD2	; 210
    3540:	f0 4d       	sbci	r31, 0xD0	; 208
    3542:	80 81       	ld	r24, Z
    3544:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	9f 3f       	cpi	r25, 0xFF	; 255
    354c:	08 f4       	brcc	.+2      	; 0x3550 <__vector_27+0x44>
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	89 0f       	add	r24, r25
    3552:	80 93 2e 30 	sts	0x302E, r24	; 0x80302e <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3556:	e0 e2       	ldi	r30, 0x20	; 32
    3558:	f8 e0       	ldi	r31, 0x08	; 8
    355a:	85 81       	ldd	r24, Z+5	; 0x05
    355c:	80 62       	ori	r24, 0x20	; 32
    355e:	85 83       	std	Z+5, r24	; 0x05
    3560:	03 c0       	rjmp	.+6      	; 0x3568 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	80 93 32 30 	sts	0x3032, r24	; 0x803032 <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    3568:	ff 91       	pop	r31
    356a:	ef 91       	pop	r30
    356c:	9f 91       	pop	r25
    356e:	8f 91       	pop	r24
    3570:	0f 90       	pop	r0
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	0f 90       	pop	r0
    3576:	1f 90       	pop	r1
    3578:	18 95       	reti

0000357a <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    357a:	1f 92       	push	r1
    357c:	0f 92       	push	r0
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	0f 92       	push	r0
    3582:	11 24       	eor	r1, r1
    3584:	8f 93       	push	r24
    3586:	9f 93       	push	r25
    3588:	af 93       	push	r26
    358a:	bf 93       	push	r27
    358c:	ef 93       	push	r30
    358e:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    3590:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3594:	8d 30       	cpi	r24, 0x0D	; 13
    3596:	21 f0       	breq	.+8      	; 0x35a0 <__vector_37+0x26>
    3598:	e0 91 27 2e 	lds	r30, 0x2E27	; 0x802e27 <recv3_buf+0x103>
    359c:	ee 3f       	cpi	r30, 0xFE	; 254
    359e:	78 f0       	brcs	.+30     	; 0x35be <__vector_37+0x44>
		recv3_buf.done = YES;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	80 93 28 2e 	sts	0x2E28, r24	; 0x802e28 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    35a6:	a7 e2       	ldi	r26, 0x27	; 39
    35a8:	be e2       	ldi	r27, 0x2E	; 46
    35aa:	8c 91       	ld	r24, X
    35ac:	e8 2f       	mov	r30, r24
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	ec 5d       	subi	r30, 0xDC	; 220
    35b2:	f2 4d       	sbci	r31, 0xD2	; 210
    35b4:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    35b6:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    35ba:	1c 92       	st	X, r1
		return;
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    35be:	91 e0       	ldi	r25, 0x01	; 1
    35c0:	9e 0f       	add	r25, r30
    35c2:	90 93 27 2e 	sts	0x2E27, r25	; 0x802e27 <recv3_buf+0x103>
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	ec 5d       	subi	r30, 0xDC	; 220
    35ca:	f2 4d       	sbci	r31, 0xD2	; 210
    35cc:	80 83       	st	Z, r24
	}

}
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	bf 91       	pop	r27
    35d4:	af 91       	pop	r26
    35d6:	9f 91       	pop	r25
    35d8:	8f 91       	pop	r24
    35da:	0f 90       	pop	r0
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	0f 90       	pop	r0
    35e0:	1f 90       	pop	r1
    35e2:	18 95       	reti

000035e4 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    35e4:	1f 92       	push	r1
    35e6:	0f 92       	push	r0
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	0f 92       	push	r0
    35ec:	11 24       	eor	r1, r1
    35ee:	8f 93       	push	r24
    35f0:	9f 93       	push	r25
    35f2:	af 93       	push	r26
    35f4:	bf 93       	push	r27
    35f6:	ef 93       	push	r30
    35f8:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    35fa:	ac e2       	ldi	r26, 0x2C	; 44
    35fc:	bf e2       	ldi	r27, 0x2F	; 47
    35fe:	ec 91       	ld	r30, X
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	8e 0f       	add	r24, r30
    3604:	8c 93       	st	X, r24
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	e7 5d       	subi	r30, 0xD7	; 215
    360a:	f1 4d       	sbci	r31, 0xD1	; 209
    360c:	90 81       	ld	r25, Z
    360e:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3612:	90 91 2a 2f 	lds	r25, 0x2F2A	; 0x802f2a <send3_buf+0x101>
    3616:	89 17       	cp	r24, r25
    3618:	40 f0       	brcs	.+16     	; 0x362a <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    361a:	e0 e6       	ldi	r30, 0x60	; 96
    361c:	f8 e0       	ldi	r31, 0x08	; 8
    361e:	85 81       	ldd	r24, Z+5	; 0x05
    3620:	8f 7d       	andi	r24, 0xDF	; 223
    3622:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	80 93 2d 2f 	sts	0x2F2D, r24	; 0x802f2d <send3_buf+0x104>
	}

}
    362a:	ff 91       	pop	r31
    362c:	ef 91       	pop	r30
    362e:	bf 91       	pop	r27
    3630:	af 91       	pop	r26
    3632:	9f 91       	pop	r25
    3634:	8f 91       	pop	r24
    3636:	0f 90       	pop	r0
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	0f 90       	pop	r0
    363c:	1f 90       	pop	r1
    363e:	18 95       	reti

00003640 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3640:	0e 94 03 19 	call	0x3206	; 0x3206 <init_USART>
	init_XPORT();
    3644:	0e 94 2a 1b 	call	0x3654	; 0x3654 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    3648:	88 ed       	ldi	r24, 0xD8	; 216
    364a:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3652:	08 95       	ret

00003654 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    3654:	e0 e4       	ldi	r30, 0x40	; 64
    3656:	f4 e0       	ldi	r31, 0x04	; 4
    3658:	88 e0       	ldi	r24, 0x08	; 8
    365a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    365c:	81 83       	std	Z+1, r24	; 0x01
    365e:	ad e8       	ldi	r26, 0x8D	; 141
    3660:	b0 e2       	ldi	r27, 0x20	; 32
    3662:	11 97       	sbiw	r26, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <init_XPORT+0xe>
    3666:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    3668:	85 83       	std	Z+5, r24	; 0x05
    366a:	08 95       	ret

0000366c <__subsf3>:
    366c:	50 58       	subi	r21, 0x80	; 128

0000366e <__addsf3>:
    366e:	bb 27       	eor	r27, r27
    3670:	aa 27       	eor	r26, r26
    3672:	0e 94 4e 1b 	call	0x369c	; 0x369c <__addsf3x>
    3676:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__fp_round>
    367a:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fp_pscA>
    367e:	38 f0       	brcs	.+14     	; 0x368e <__addsf3+0x20>
    3680:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscB>
    3684:	20 f0       	brcs	.+8      	; 0x368e <__addsf3+0x20>
    3686:	39 f4       	brne	.+14     	; 0x3696 <__addsf3+0x28>
    3688:	9f 3f       	cpi	r25, 0xFF	; 255
    368a:	19 f4       	brne	.+6      	; 0x3692 <__addsf3+0x24>
    368c:	26 f4       	brtc	.+8      	; 0x3696 <__addsf3+0x28>
    368e:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__fp_nan>
    3692:	0e f4       	brtc	.+2      	; 0x3696 <__addsf3+0x28>
    3694:	e0 95       	com	r30
    3696:	e7 fb       	bst	r30, 7
    3698:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_inf>

0000369c <__addsf3x>:
    369c:	e9 2f       	mov	r30, r25
    369e:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__fp_split3>
    36a2:	58 f3       	brcs	.-42     	; 0x367a <__addsf3+0xc>
    36a4:	ba 17       	cp	r27, r26
    36a6:	62 07       	cpc	r22, r18
    36a8:	73 07       	cpc	r23, r19
    36aa:	84 07       	cpc	r24, r20
    36ac:	95 07       	cpc	r25, r21
    36ae:	20 f0       	brcs	.+8      	; 0x36b8 <__addsf3x+0x1c>
    36b0:	79 f4       	brne	.+30     	; 0x36d0 <__addsf3x+0x34>
    36b2:	a6 f5       	brtc	.+104    	; 0x371c <__addsf3x+0x80>
    36b4:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__fp_zero>
    36b8:	0e f4       	brtc	.+2      	; 0x36bc <__addsf3x+0x20>
    36ba:	e0 95       	com	r30
    36bc:	0b 2e       	mov	r0, r27
    36be:	ba 2f       	mov	r27, r26
    36c0:	a0 2d       	mov	r26, r0
    36c2:	0b 01       	movw	r0, r22
    36c4:	b9 01       	movw	r22, r18
    36c6:	90 01       	movw	r18, r0
    36c8:	0c 01       	movw	r0, r24
    36ca:	ca 01       	movw	r24, r20
    36cc:	a0 01       	movw	r20, r0
    36ce:	11 24       	eor	r1, r1
    36d0:	ff 27       	eor	r31, r31
    36d2:	59 1b       	sub	r21, r25
    36d4:	99 f0       	breq	.+38     	; 0x36fc <__addsf3x+0x60>
    36d6:	59 3f       	cpi	r21, 0xF9	; 249
    36d8:	50 f4       	brcc	.+20     	; 0x36ee <__addsf3x+0x52>
    36da:	50 3e       	cpi	r21, 0xE0	; 224
    36dc:	68 f1       	brcs	.+90     	; 0x3738 <__addsf3x+0x9c>
    36de:	1a 16       	cp	r1, r26
    36e0:	f0 40       	sbci	r31, 0x00	; 0
    36e2:	a2 2f       	mov	r26, r18
    36e4:	23 2f       	mov	r18, r19
    36e6:	34 2f       	mov	r19, r20
    36e8:	44 27       	eor	r20, r20
    36ea:	58 5f       	subi	r21, 0xF8	; 248
    36ec:	f3 cf       	rjmp	.-26     	; 0x36d4 <__addsf3x+0x38>
    36ee:	46 95       	lsr	r20
    36f0:	37 95       	ror	r19
    36f2:	27 95       	ror	r18
    36f4:	a7 95       	ror	r26
    36f6:	f0 40       	sbci	r31, 0x00	; 0
    36f8:	53 95       	inc	r21
    36fa:	c9 f7       	brne	.-14     	; 0x36ee <__addsf3x+0x52>
    36fc:	7e f4       	brtc	.+30     	; 0x371c <__addsf3x+0x80>
    36fe:	1f 16       	cp	r1, r31
    3700:	ba 0b       	sbc	r27, r26
    3702:	62 0b       	sbc	r22, r18
    3704:	73 0b       	sbc	r23, r19
    3706:	84 0b       	sbc	r24, r20
    3708:	ba f0       	brmi	.+46     	; 0x3738 <__addsf3x+0x9c>
    370a:	91 50       	subi	r25, 0x01	; 1
    370c:	a1 f0       	breq	.+40     	; 0x3736 <__addsf3x+0x9a>
    370e:	ff 0f       	add	r31, r31
    3710:	bb 1f       	adc	r27, r27
    3712:	66 1f       	adc	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	88 1f       	adc	r24, r24
    3718:	c2 f7       	brpl	.-16     	; 0x370a <__addsf3x+0x6e>
    371a:	0e c0       	rjmp	.+28     	; 0x3738 <__addsf3x+0x9c>
    371c:	ba 0f       	add	r27, r26
    371e:	62 1f       	adc	r22, r18
    3720:	73 1f       	adc	r23, r19
    3722:	84 1f       	adc	r24, r20
    3724:	48 f4       	brcc	.+18     	; 0x3738 <__addsf3x+0x9c>
    3726:	87 95       	ror	r24
    3728:	77 95       	ror	r23
    372a:	67 95       	ror	r22
    372c:	b7 95       	ror	r27
    372e:	f7 95       	ror	r31
    3730:	9e 3f       	cpi	r25, 0xFE	; 254
    3732:	08 f0       	brcs	.+2      	; 0x3736 <__addsf3x+0x9a>
    3734:	b0 cf       	rjmp	.-160    	; 0x3696 <__addsf3+0x28>
    3736:	93 95       	inc	r25
    3738:	88 0f       	add	r24, r24
    373a:	08 f0       	brcs	.+2      	; 0x373e <__addsf3x+0xa2>
    373c:	99 27       	eor	r25, r25
    373e:	ee 0f       	add	r30, r30
    3740:	97 95       	ror	r25
    3742:	87 95       	ror	r24
    3744:	08 95       	ret

00003746 <__cmpsf2>:
    3746:	0e 94 57 1c 	call	0x38ae	; 0x38ae <__fp_cmp>
    374a:	08 f4       	brcc	.+2      	; 0x374e <__cmpsf2+0x8>
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	08 95       	ret

00003750 <__divsf3>:
    3750:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__divsf3x>
    3754:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__fp_round>
    3758:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscB>
    375c:	58 f0       	brcs	.+22     	; 0x3774 <__divsf3+0x24>
    375e:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fp_pscA>
    3762:	40 f0       	brcs	.+16     	; 0x3774 <__divsf3+0x24>
    3764:	29 f4       	brne	.+10     	; 0x3770 <__divsf3+0x20>
    3766:	5f 3f       	cpi	r21, 0xFF	; 255
    3768:	29 f0       	breq	.+10     	; 0x3774 <__divsf3+0x24>
    376a:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_inf>
    376e:	51 11       	cpse	r21, r1
    3770:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__fp_szero>
    3774:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__fp_nan>

00003778 <__divsf3x>:
    3778:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__fp_split3>
    377c:	68 f3       	brcs	.-38     	; 0x3758 <__divsf3+0x8>

0000377e <__divsf3_pse>:
    377e:	99 23       	and	r25, r25
    3780:	b1 f3       	breq	.-20     	; 0x376e <__divsf3+0x1e>
    3782:	55 23       	and	r21, r21
    3784:	91 f3       	breq	.-28     	; 0x376a <__divsf3+0x1a>
    3786:	95 1b       	sub	r25, r21
    3788:	55 0b       	sbc	r21, r21
    378a:	bb 27       	eor	r27, r27
    378c:	aa 27       	eor	r26, r26
    378e:	62 17       	cp	r22, r18
    3790:	73 07       	cpc	r23, r19
    3792:	84 07       	cpc	r24, r20
    3794:	38 f0       	brcs	.+14     	; 0x37a4 <__divsf3_pse+0x26>
    3796:	9f 5f       	subi	r25, 0xFF	; 255
    3798:	5f 4f       	sbci	r21, 0xFF	; 255
    379a:	22 0f       	add	r18, r18
    379c:	33 1f       	adc	r19, r19
    379e:	44 1f       	adc	r20, r20
    37a0:	aa 1f       	adc	r26, r26
    37a2:	a9 f3       	breq	.-22     	; 0x378e <__divsf3_pse+0x10>
    37a4:	35 d0       	rcall	.+106    	; 0x3810 <__divsf3_pse+0x92>
    37a6:	0e 2e       	mov	r0, r30
    37a8:	3a f0       	brmi	.+14     	; 0x37b8 <__divsf3_pse+0x3a>
    37aa:	e0 e8       	ldi	r30, 0x80	; 128
    37ac:	32 d0       	rcall	.+100    	; 0x3812 <__divsf3_pse+0x94>
    37ae:	91 50       	subi	r25, 0x01	; 1
    37b0:	50 40       	sbci	r21, 0x00	; 0
    37b2:	e6 95       	lsr	r30
    37b4:	00 1c       	adc	r0, r0
    37b6:	ca f7       	brpl	.-14     	; 0x37aa <__divsf3_pse+0x2c>
    37b8:	2b d0       	rcall	.+86     	; 0x3810 <__divsf3_pse+0x92>
    37ba:	fe 2f       	mov	r31, r30
    37bc:	29 d0       	rcall	.+82     	; 0x3810 <__divsf3_pse+0x92>
    37be:	66 0f       	add	r22, r22
    37c0:	77 1f       	adc	r23, r23
    37c2:	88 1f       	adc	r24, r24
    37c4:	bb 1f       	adc	r27, r27
    37c6:	26 17       	cp	r18, r22
    37c8:	37 07       	cpc	r19, r23
    37ca:	48 07       	cpc	r20, r24
    37cc:	ab 07       	cpc	r26, r27
    37ce:	b0 e8       	ldi	r27, 0x80	; 128
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <__divsf3_pse+0x56>
    37d2:	bb 0b       	sbc	r27, r27
    37d4:	80 2d       	mov	r24, r0
    37d6:	bf 01       	movw	r22, r30
    37d8:	ff 27       	eor	r31, r31
    37da:	93 58       	subi	r25, 0x83	; 131
    37dc:	5f 4f       	sbci	r21, 0xFF	; 255
    37de:	3a f0       	brmi	.+14     	; 0x37ee <__divsf3_pse+0x70>
    37e0:	9e 3f       	cpi	r25, 0xFE	; 254
    37e2:	51 05       	cpc	r21, r1
    37e4:	78 f0       	brcs	.+30     	; 0x3804 <__divsf3_pse+0x86>
    37e6:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_inf>
    37ea:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__fp_szero>
    37ee:	5f 3f       	cpi	r21, 0xFF	; 255
    37f0:	e4 f3       	brlt	.-8      	; 0x37ea <__divsf3_pse+0x6c>
    37f2:	98 3e       	cpi	r25, 0xE8	; 232
    37f4:	d4 f3       	brlt	.-12     	; 0x37ea <__divsf3_pse+0x6c>
    37f6:	86 95       	lsr	r24
    37f8:	77 95       	ror	r23
    37fa:	67 95       	ror	r22
    37fc:	b7 95       	ror	r27
    37fe:	f7 95       	ror	r31
    3800:	9f 5f       	subi	r25, 0xFF	; 255
    3802:	c9 f7       	brne	.-14     	; 0x37f6 <__divsf3_pse+0x78>
    3804:	88 0f       	add	r24, r24
    3806:	91 1d       	adc	r25, r1
    3808:	96 95       	lsr	r25
    380a:	87 95       	ror	r24
    380c:	97 f9       	bld	r25, 7
    380e:	08 95       	ret
    3810:	e1 e0       	ldi	r30, 0x01	; 1
    3812:	66 0f       	add	r22, r22
    3814:	77 1f       	adc	r23, r23
    3816:	88 1f       	adc	r24, r24
    3818:	bb 1f       	adc	r27, r27
    381a:	62 17       	cp	r22, r18
    381c:	73 07       	cpc	r23, r19
    381e:	84 07       	cpc	r24, r20
    3820:	ba 07       	cpc	r27, r26
    3822:	20 f0       	brcs	.+8      	; 0x382c <__divsf3_pse+0xae>
    3824:	62 1b       	sub	r22, r18
    3826:	73 0b       	sbc	r23, r19
    3828:	84 0b       	sbc	r24, r20
    382a:	ba 0b       	sbc	r27, r26
    382c:	ee 1f       	adc	r30, r30
    382e:	88 f7       	brcc	.-30     	; 0x3812 <__divsf3_pse+0x94>
    3830:	e0 95       	com	r30
    3832:	08 95       	ret

00003834 <__floatunsisf>:
    3834:	e8 94       	clt
    3836:	09 c0       	rjmp	.+18     	; 0x384a <__floatsisf+0x12>

00003838 <__floatsisf>:
    3838:	97 fb       	bst	r25, 7
    383a:	3e f4       	brtc	.+14     	; 0x384a <__floatsisf+0x12>
    383c:	90 95       	com	r25
    383e:	80 95       	com	r24
    3840:	70 95       	com	r23
    3842:	61 95       	neg	r22
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
    3846:	8f 4f       	sbci	r24, 0xFF	; 255
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	99 23       	and	r25, r25
    384c:	a9 f0       	breq	.+42     	; 0x3878 <__floatsisf+0x40>
    384e:	f9 2f       	mov	r31, r25
    3850:	96 e9       	ldi	r25, 0x96	; 150
    3852:	bb 27       	eor	r27, r27
    3854:	93 95       	inc	r25
    3856:	f6 95       	lsr	r31
    3858:	87 95       	ror	r24
    385a:	77 95       	ror	r23
    385c:	67 95       	ror	r22
    385e:	b7 95       	ror	r27
    3860:	f1 11       	cpse	r31, r1
    3862:	f8 cf       	rjmp	.-16     	; 0x3854 <__floatsisf+0x1c>
    3864:	fa f4       	brpl	.+62     	; 0x38a4 <__floatsisf+0x6c>
    3866:	bb 0f       	add	r27, r27
    3868:	11 f4       	brne	.+4      	; 0x386e <__floatsisf+0x36>
    386a:	60 ff       	sbrs	r22, 0
    386c:	1b c0       	rjmp	.+54     	; 0x38a4 <__floatsisf+0x6c>
    386e:	6f 5f       	subi	r22, 0xFF	; 255
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	8f 4f       	sbci	r24, 0xFF	; 255
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	16 c0       	rjmp	.+44     	; 0x38a4 <__floatsisf+0x6c>
    3878:	88 23       	and	r24, r24
    387a:	11 f0       	breq	.+4      	; 0x3880 <__floatsisf+0x48>
    387c:	96 e9       	ldi	r25, 0x96	; 150
    387e:	11 c0       	rjmp	.+34     	; 0x38a2 <__floatsisf+0x6a>
    3880:	77 23       	and	r23, r23
    3882:	21 f0       	breq	.+8      	; 0x388c <__floatsisf+0x54>
    3884:	9e e8       	ldi	r25, 0x8E	; 142
    3886:	87 2f       	mov	r24, r23
    3888:	76 2f       	mov	r23, r22
    388a:	05 c0       	rjmp	.+10     	; 0x3896 <__floatsisf+0x5e>
    388c:	66 23       	and	r22, r22
    388e:	71 f0       	breq	.+28     	; 0x38ac <__floatsisf+0x74>
    3890:	96 e8       	ldi	r25, 0x86	; 134
    3892:	86 2f       	mov	r24, r22
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	2a f0       	brmi	.+10     	; 0x38a4 <__floatsisf+0x6c>
    389a:	9a 95       	dec	r25
    389c:	66 0f       	add	r22, r22
    389e:	77 1f       	adc	r23, r23
    38a0:	88 1f       	adc	r24, r24
    38a2:	da f7       	brpl	.-10     	; 0x389a <__floatsisf+0x62>
    38a4:	88 0f       	add	r24, r24
    38a6:	96 95       	lsr	r25
    38a8:	87 95       	ror	r24
    38aa:	97 f9       	bld	r25, 7
    38ac:	08 95       	ret

000038ae <__fp_cmp>:
    38ae:	99 0f       	add	r25, r25
    38b0:	00 08       	sbc	r0, r0
    38b2:	55 0f       	add	r21, r21
    38b4:	aa 0b       	sbc	r26, r26
    38b6:	e0 e8       	ldi	r30, 0x80	; 128
    38b8:	fe ef       	ldi	r31, 0xFE	; 254
    38ba:	16 16       	cp	r1, r22
    38bc:	17 06       	cpc	r1, r23
    38be:	e8 07       	cpc	r30, r24
    38c0:	f9 07       	cpc	r31, r25
    38c2:	c0 f0       	brcs	.+48     	; 0x38f4 <__fp_cmp+0x46>
    38c4:	12 16       	cp	r1, r18
    38c6:	13 06       	cpc	r1, r19
    38c8:	e4 07       	cpc	r30, r20
    38ca:	f5 07       	cpc	r31, r21
    38cc:	98 f0       	brcs	.+38     	; 0x38f4 <__fp_cmp+0x46>
    38ce:	62 1b       	sub	r22, r18
    38d0:	73 0b       	sbc	r23, r19
    38d2:	84 0b       	sbc	r24, r20
    38d4:	95 0b       	sbc	r25, r21
    38d6:	39 f4       	brne	.+14     	; 0x38e6 <__fp_cmp+0x38>
    38d8:	0a 26       	eor	r0, r26
    38da:	61 f0       	breq	.+24     	; 0x38f4 <__fp_cmp+0x46>
    38dc:	23 2b       	or	r18, r19
    38de:	24 2b       	or	r18, r20
    38e0:	25 2b       	or	r18, r21
    38e2:	21 f4       	brne	.+8      	; 0x38ec <__fp_cmp+0x3e>
    38e4:	08 95       	ret
    38e6:	0a 26       	eor	r0, r26
    38e8:	09 f4       	brne	.+2      	; 0x38ec <__fp_cmp+0x3e>
    38ea:	a1 40       	sbci	r26, 0x01	; 1
    38ec:	a6 95       	lsr	r26
    38ee:	8f ef       	ldi	r24, 0xFF	; 255
    38f0:	81 1d       	adc	r24, r1
    38f2:	81 1d       	adc	r24, r1
    38f4:	08 95       	ret

000038f6 <__fp_inf>:
    38f6:	97 f9       	bld	r25, 7
    38f8:	9f 67       	ori	r25, 0x7F	; 127
    38fa:	80 e8       	ldi	r24, 0x80	; 128
    38fc:	70 e0       	ldi	r23, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	08 95       	ret

00003902 <__fp_nan>:
    3902:	9f ef       	ldi	r25, 0xFF	; 255
    3904:	80 ec       	ldi	r24, 0xC0	; 192
    3906:	08 95       	ret

00003908 <__fp_pscA>:
    3908:	00 24       	eor	r0, r0
    390a:	0a 94       	dec	r0
    390c:	16 16       	cp	r1, r22
    390e:	17 06       	cpc	r1, r23
    3910:	18 06       	cpc	r1, r24
    3912:	09 06       	cpc	r0, r25
    3914:	08 95       	ret

00003916 <__fp_pscB>:
    3916:	00 24       	eor	r0, r0
    3918:	0a 94       	dec	r0
    391a:	12 16       	cp	r1, r18
    391c:	13 06       	cpc	r1, r19
    391e:	14 06       	cpc	r1, r20
    3920:	05 06       	cpc	r0, r21
    3922:	08 95       	ret

00003924 <__fp_round>:
    3924:	09 2e       	mov	r0, r25
    3926:	03 94       	inc	r0
    3928:	00 0c       	add	r0, r0
    392a:	11 f4       	brne	.+4      	; 0x3930 <__fp_round+0xc>
    392c:	88 23       	and	r24, r24
    392e:	52 f0       	brmi	.+20     	; 0x3944 <__fp_round+0x20>
    3930:	bb 0f       	add	r27, r27
    3932:	40 f4       	brcc	.+16     	; 0x3944 <__fp_round+0x20>
    3934:	bf 2b       	or	r27, r31
    3936:	11 f4       	brne	.+4      	; 0x393c <__fp_round+0x18>
    3938:	60 ff       	sbrs	r22, 0
    393a:	04 c0       	rjmp	.+8      	; 0x3944 <__fp_round+0x20>
    393c:	6f 5f       	subi	r22, 0xFF	; 255
    393e:	7f 4f       	sbci	r23, 0xFF	; 255
    3940:	8f 4f       	sbci	r24, 0xFF	; 255
    3942:	9f 4f       	sbci	r25, 0xFF	; 255
    3944:	08 95       	ret

00003946 <__fp_split3>:
    3946:	57 fd       	sbrc	r21, 7
    3948:	90 58       	subi	r25, 0x80	; 128
    394a:	44 0f       	add	r20, r20
    394c:	55 1f       	adc	r21, r21
    394e:	59 f0       	breq	.+22     	; 0x3966 <__fp_splitA+0x10>
    3950:	5f 3f       	cpi	r21, 0xFF	; 255
    3952:	71 f0       	breq	.+28     	; 0x3970 <__fp_splitA+0x1a>
    3954:	47 95       	ror	r20

00003956 <__fp_splitA>:
    3956:	88 0f       	add	r24, r24
    3958:	97 fb       	bst	r25, 7
    395a:	99 1f       	adc	r25, r25
    395c:	61 f0       	breq	.+24     	; 0x3976 <__fp_splitA+0x20>
    395e:	9f 3f       	cpi	r25, 0xFF	; 255
    3960:	79 f0       	breq	.+30     	; 0x3980 <__fp_splitA+0x2a>
    3962:	87 95       	ror	r24
    3964:	08 95       	ret
    3966:	12 16       	cp	r1, r18
    3968:	13 06       	cpc	r1, r19
    396a:	14 06       	cpc	r1, r20
    396c:	55 1f       	adc	r21, r21
    396e:	f2 cf       	rjmp	.-28     	; 0x3954 <__fp_split3+0xe>
    3970:	46 95       	lsr	r20
    3972:	f1 df       	rcall	.-30     	; 0x3956 <__fp_splitA>
    3974:	08 c0       	rjmp	.+16     	; 0x3986 <__fp_splitA+0x30>
    3976:	16 16       	cp	r1, r22
    3978:	17 06       	cpc	r1, r23
    397a:	18 06       	cpc	r1, r24
    397c:	99 1f       	adc	r25, r25
    397e:	f1 cf       	rjmp	.-30     	; 0x3962 <__fp_splitA+0xc>
    3980:	86 95       	lsr	r24
    3982:	71 05       	cpc	r23, r1
    3984:	61 05       	cpc	r22, r1
    3986:	08 94       	sec
    3988:	08 95       	ret

0000398a <__fp_zero>:
    398a:	e8 94       	clt

0000398c <__fp_szero>:
    398c:	bb 27       	eor	r27, r27
    398e:	66 27       	eor	r22, r22
    3990:	77 27       	eor	r23, r23
    3992:	cb 01       	movw	r24, r22
    3994:	97 f9       	bld	r25, 7
    3996:	08 95       	ret

00003998 <__gesf2>:
    3998:	0e 94 57 1c 	call	0x38ae	; 0x38ae <__fp_cmp>
    399c:	08 f4       	brcc	.+2      	; 0x39a0 <__gesf2+0x8>
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	08 95       	ret

000039a2 <__mulsf3>:
    39a2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3x>
    39a6:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__fp_round>
    39aa:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fp_pscA>
    39ae:	38 f0       	brcs	.+14     	; 0x39be <__mulsf3+0x1c>
    39b0:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscB>
    39b4:	20 f0       	brcs	.+8      	; 0x39be <__mulsf3+0x1c>
    39b6:	95 23       	and	r25, r21
    39b8:	11 f0       	breq	.+4      	; 0x39be <__mulsf3+0x1c>
    39ba:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_inf>
    39be:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__fp_nan>
    39c2:	11 24       	eor	r1, r1
    39c4:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__fp_szero>

000039c8 <__mulsf3x>:
    39c8:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__fp_split3>
    39cc:	70 f3       	brcs	.-36     	; 0x39aa <__mulsf3+0x8>

000039ce <__mulsf3_pse>:
    39ce:	95 9f       	mul	r25, r21
    39d0:	c1 f3       	breq	.-16     	; 0x39c2 <__mulsf3+0x20>
    39d2:	95 0f       	add	r25, r21
    39d4:	50 e0       	ldi	r21, 0x00	; 0
    39d6:	55 1f       	adc	r21, r21
    39d8:	62 9f       	mul	r22, r18
    39da:	f0 01       	movw	r30, r0
    39dc:	72 9f       	mul	r23, r18
    39de:	bb 27       	eor	r27, r27
    39e0:	f0 0d       	add	r31, r0
    39e2:	b1 1d       	adc	r27, r1
    39e4:	63 9f       	mul	r22, r19
    39e6:	aa 27       	eor	r26, r26
    39e8:	f0 0d       	add	r31, r0
    39ea:	b1 1d       	adc	r27, r1
    39ec:	aa 1f       	adc	r26, r26
    39ee:	64 9f       	mul	r22, r20
    39f0:	66 27       	eor	r22, r22
    39f2:	b0 0d       	add	r27, r0
    39f4:	a1 1d       	adc	r26, r1
    39f6:	66 1f       	adc	r22, r22
    39f8:	82 9f       	mul	r24, r18
    39fa:	22 27       	eor	r18, r18
    39fc:	b0 0d       	add	r27, r0
    39fe:	a1 1d       	adc	r26, r1
    3a00:	62 1f       	adc	r22, r18
    3a02:	73 9f       	mul	r23, r19
    3a04:	b0 0d       	add	r27, r0
    3a06:	a1 1d       	adc	r26, r1
    3a08:	62 1f       	adc	r22, r18
    3a0a:	83 9f       	mul	r24, r19
    3a0c:	a0 0d       	add	r26, r0
    3a0e:	61 1d       	adc	r22, r1
    3a10:	22 1f       	adc	r18, r18
    3a12:	74 9f       	mul	r23, r20
    3a14:	33 27       	eor	r19, r19
    3a16:	a0 0d       	add	r26, r0
    3a18:	61 1d       	adc	r22, r1
    3a1a:	23 1f       	adc	r18, r19
    3a1c:	84 9f       	mul	r24, r20
    3a1e:	60 0d       	add	r22, r0
    3a20:	21 1d       	adc	r18, r1
    3a22:	82 2f       	mov	r24, r18
    3a24:	76 2f       	mov	r23, r22
    3a26:	6a 2f       	mov	r22, r26
    3a28:	11 24       	eor	r1, r1
    3a2a:	9f 57       	subi	r25, 0x7F	; 127
    3a2c:	50 40       	sbci	r21, 0x00	; 0
    3a2e:	9a f0       	brmi	.+38     	; 0x3a56 <__mulsf3_pse+0x88>
    3a30:	f1 f0       	breq	.+60     	; 0x3a6e <__mulsf3_pse+0xa0>
    3a32:	88 23       	and	r24, r24
    3a34:	4a f0       	brmi	.+18     	; 0x3a48 <__mulsf3_pse+0x7a>
    3a36:	ee 0f       	add	r30, r30
    3a38:	ff 1f       	adc	r31, r31
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	66 1f       	adc	r22, r22
    3a3e:	77 1f       	adc	r23, r23
    3a40:	88 1f       	adc	r24, r24
    3a42:	91 50       	subi	r25, 0x01	; 1
    3a44:	50 40       	sbci	r21, 0x00	; 0
    3a46:	a9 f7       	brne	.-22     	; 0x3a32 <__mulsf3_pse+0x64>
    3a48:	9e 3f       	cpi	r25, 0xFE	; 254
    3a4a:	51 05       	cpc	r21, r1
    3a4c:	80 f0       	brcs	.+32     	; 0x3a6e <__mulsf3_pse+0xa0>
    3a4e:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_inf>
    3a52:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__fp_szero>
    3a56:	5f 3f       	cpi	r21, 0xFF	; 255
    3a58:	e4 f3       	brlt	.-8      	; 0x3a52 <__mulsf3_pse+0x84>
    3a5a:	98 3e       	cpi	r25, 0xE8	; 232
    3a5c:	d4 f3       	brlt	.-12     	; 0x3a52 <__mulsf3_pse+0x84>
    3a5e:	86 95       	lsr	r24
    3a60:	77 95       	ror	r23
    3a62:	67 95       	ror	r22
    3a64:	b7 95       	ror	r27
    3a66:	f7 95       	ror	r31
    3a68:	e7 95       	ror	r30
    3a6a:	9f 5f       	subi	r25, 0xFF	; 255
    3a6c:	c1 f7       	brne	.-16     	; 0x3a5e <__mulsf3_pse+0x90>
    3a6e:	fe 2b       	or	r31, r30
    3a70:	88 0f       	add	r24, r24
    3a72:	91 1d       	adc	r25, r1
    3a74:	96 95       	lsr	r25
    3a76:	87 95       	ror	r24
    3a78:	97 f9       	bld	r25, 7
    3a7a:	08 95       	ret

00003a7c <vfprintf>:
    3a7c:	a0 e1       	ldi	r26, 0x10	; 16
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	e4 e4       	ldi	r30, 0x44	; 68
    3a82:	fd e1       	ldi	r31, 0x1D	; 29
    3a84:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__>
    3a88:	7c 01       	movw	r14, r24
    3a8a:	1b 01       	movw	r2, r22
    3a8c:	6a 01       	movw	r12, r20
    3a8e:	fc 01       	movw	r30, r24
    3a90:	16 82       	std	Z+6, r1	; 0x06
    3a92:	17 82       	std	Z+7, r1	; 0x07
    3a94:	83 81       	ldd	r24, Z+3	; 0x03
    3a96:	81 ff       	sbrs	r24, 1
    3a98:	44 c3       	rjmp	.+1672   	; 0x4122 <__RODATA_PM_OFFSET__+0x122>
    3a9a:	9e 01       	movw	r18, r28
    3a9c:	2f 5f       	subi	r18, 0xFF	; 255
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	39 01       	movw	r6, r18
    3aa2:	f7 01       	movw	r30, r14
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	f1 01       	movw	r30, r2
    3aa8:	93 fd       	sbrc	r25, 3
    3aaa:	85 91       	lpm	r24, Z+
    3aac:	93 ff       	sbrs	r25, 3
    3aae:	81 91       	ld	r24, Z+
    3ab0:	1f 01       	movw	r2, r30
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <vfprintf+0x3c>
    3ab6:	31 c3       	rjmp	.+1634   	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    3ab8:	85 32       	cpi	r24, 0x25	; 37
    3aba:	39 f4       	brne	.+14     	; 0x3aca <vfprintf+0x4e>
    3abc:	93 fd       	sbrc	r25, 3
    3abe:	85 91       	lpm	r24, Z+
    3ac0:	93 ff       	sbrs	r25, 3
    3ac2:	81 91       	ld	r24, Z+
    3ac4:	1f 01       	movw	r2, r30
    3ac6:	85 32       	cpi	r24, 0x25	; 37
    3ac8:	39 f4       	brne	.+14     	; 0x3ad8 <vfprintf+0x5c>
    3aca:	b7 01       	movw	r22, r14
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3ad2:	56 01       	movw	r10, r12
    3ad4:	65 01       	movw	r12, r10
    3ad6:	e5 cf       	rjmp	.-54     	; 0x3aa2 <vfprintf+0x26>
    3ad8:	10 e0       	ldi	r17, 0x00	; 0
    3ada:	51 2c       	mov	r5, r1
    3adc:	91 2c       	mov	r9, r1
    3ade:	ff e1       	ldi	r31, 0x1F	; 31
    3ae0:	f9 15       	cp	r31, r9
    3ae2:	d8 f0       	brcs	.+54     	; 0x3b1a <vfprintf+0x9e>
    3ae4:	8b 32       	cpi	r24, 0x2B	; 43
    3ae6:	79 f0       	breq	.+30     	; 0x3b06 <vfprintf+0x8a>
    3ae8:	38 f4       	brcc	.+14     	; 0x3af8 <vfprintf+0x7c>
    3aea:	80 32       	cpi	r24, 0x20	; 32
    3aec:	79 f0       	breq	.+30     	; 0x3b0c <vfprintf+0x90>
    3aee:	83 32       	cpi	r24, 0x23	; 35
    3af0:	a1 f4       	brne	.+40     	; 0x3b1a <vfprintf+0x9e>
    3af2:	f9 2d       	mov	r31, r9
    3af4:	f0 61       	ori	r31, 0x10	; 16
    3af6:	2e c0       	rjmp	.+92     	; 0x3b54 <vfprintf+0xd8>
    3af8:	8d 32       	cpi	r24, 0x2D	; 45
    3afa:	61 f0       	breq	.+24     	; 0x3b14 <vfprintf+0x98>
    3afc:	80 33       	cpi	r24, 0x30	; 48
    3afe:	69 f4       	brne	.+26     	; 0x3b1a <vfprintf+0x9e>
    3b00:	29 2d       	mov	r18, r9
    3b02:	21 60       	ori	r18, 0x01	; 1
    3b04:	2d c0       	rjmp	.+90     	; 0x3b60 <vfprintf+0xe4>
    3b06:	39 2d       	mov	r19, r9
    3b08:	32 60       	ori	r19, 0x02	; 2
    3b0a:	93 2e       	mov	r9, r19
    3b0c:	89 2d       	mov	r24, r9
    3b0e:	84 60       	ori	r24, 0x04	; 4
    3b10:	98 2e       	mov	r9, r24
    3b12:	2a c0       	rjmp	.+84     	; 0x3b68 <vfprintf+0xec>
    3b14:	e9 2d       	mov	r30, r9
    3b16:	e8 60       	ori	r30, 0x08	; 8
    3b18:	15 c0       	rjmp	.+42     	; 0x3b44 <vfprintf+0xc8>
    3b1a:	97 fc       	sbrc	r9, 7
    3b1c:	2d c0       	rjmp	.+90     	; 0x3b78 <vfprintf+0xfc>
    3b1e:	20 ed       	ldi	r18, 0xD0	; 208
    3b20:	28 0f       	add	r18, r24
    3b22:	2a 30       	cpi	r18, 0x0A	; 10
    3b24:	88 f4       	brcc	.+34     	; 0x3b48 <vfprintf+0xcc>
    3b26:	96 fe       	sbrs	r9, 6
    3b28:	06 c0       	rjmp	.+12     	; 0x3b36 <vfprintf+0xba>
    3b2a:	3a e0       	ldi	r19, 0x0A	; 10
    3b2c:	13 9f       	mul	r17, r19
    3b2e:	20 0d       	add	r18, r0
    3b30:	11 24       	eor	r1, r1
    3b32:	12 2f       	mov	r17, r18
    3b34:	19 c0       	rjmp	.+50     	; 0x3b68 <vfprintf+0xec>
    3b36:	8a e0       	ldi	r24, 0x0A	; 10
    3b38:	58 9e       	mul	r5, r24
    3b3a:	20 0d       	add	r18, r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	52 2e       	mov	r5, r18
    3b40:	e9 2d       	mov	r30, r9
    3b42:	e0 62       	ori	r30, 0x20	; 32
    3b44:	9e 2e       	mov	r9, r30
    3b46:	10 c0       	rjmp	.+32     	; 0x3b68 <vfprintf+0xec>
    3b48:	8e 32       	cpi	r24, 0x2E	; 46
    3b4a:	31 f4       	brne	.+12     	; 0x3b58 <vfprintf+0xdc>
    3b4c:	96 fc       	sbrc	r9, 6
    3b4e:	e5 c2       	rjmp	.+1482   	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    3b50:	f9 2d       	mov	r31, r9
    3b52:	f0 64       	ori	r31, 0x40	; 64
    3b54:	9f 2e       	mov	r9, r31
    3b56:	08 c0       	rjmp	.+16     	; 0x3b68 <vfprintf+0xec>
    3b58:	8c 36       	cpi	r24, 0x6C	; 108
    3b5a:	21 f4       	brne	.+8      	; 0x3b64 <vfprintf+0xe8>
    3b5c:	29 2d       	mov	r18, r9
    3b5e:	20 68       	ori	r18, 0x80	; 128
    3b60:	92 2e       	mov	r9, r18
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <vfprintf+0xec>
    3b64:	88 36       	cpi	r24, 0x68	; 104
    3b66:	41 f4       	brne	.+16     	; 0x3b78 <vfprintf+0xfc>
    3b68:	f1 01       	movw	r30, r2
    3b6a:	93 fd       	sbrc	r25, 3
    3b6c:	85 91       	lpm	r24, Z+
    3b6e:	93 ff       	sbrs	r25, 3
    3b70:	81 91       	ld	r24, Z+
    3b72:	1f 01       	movw	r2, r30
    3b74:	81 11       	cpse	r24, r1
    3b76:	b3 cf       	rjmp	.-154    	; 0x3ade <vfprintf+0x62>
    3b78:	9b eb       	ldi	r25, 0xBB	; 187
    3b7a:	98 0f       	add	r25, r24
    3b7c:	93 30       	cpi	r25, 0x03	; 3
    3b7e:	20 f4       	brcc	.+8      	; 0x3b88 <vfprintf+0x10c>
    3b80:	99 2d       	mov	r25, r9
    3b82:	90 61       	ori	r25, 0x10	; 16
    3b84:	80 5e       	subi	r24, 0xE0	; 224
    3b86:	07 c0       	rjmp	.+14     	; 0x3b96 <vfprintf+0x11a>
    3b88:	9b e9       	ldi	r25, 0x9B	; 155
    3b8a:	98 0f       	add	r25, r24
    3b8c:	93 30       	cpi	r25, 0x03	; 3
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <vfprintf+0x116>
    3b90:	66 c1       	rjmp	.+716    	; 0x3e5e <vfprintf+0x3e2>
    3b92:	99 2d       	mov	r25, r9
    3b94:	9f 7e       	andi	r25, 0xEF	; 239
    3b96:	96 ff       	sbrs	r25, 6
    3b98:	16 e0       	ldi	r17, 0x06	; 6
    3b9a:	9f 73       	andi	r25, 0x3F	; 63
    3b9c:	99 2e       	mov	r9, r25
    3b9e:	85 36       	cpi	r24, 0x65	; 101
    3ba0:	19 f4       	brne	.+6      	; 0x3ba8 <vfprintf+0x12c>
    3ba2:	90 64       	ori	r25, 0x40	; 64
    3ba4:	99 2e       	mov	r9, r25
    3ba6:	08 c0       	rjmp	.+16     	; 0x3bb8 <vfprintf+0x13c>
    3ba8:	86 36       	cpi	r24, 0x66	; 102
    3baa:	21 f4       	brne	.+8      	; 0x3bb4 <vfprintf+0x138>
    3bac:	39 2f       	mov	r19, r25
    3bae:	30 68       	ori	r19, 0x80	; 128
    3bb0:	93 2e       	mov	r9, r19
    3bb2:	02 c0       	rjmp	.+4      	; 0x3bb8 <vfprintf+0x13c>
    3bb4:	11 11       	cpse	r17, r1
    3bb6:	11 50       	subi	r17, 0x01	; 1
    3bb8:	97 fe       	sbrs	r9, 7
    3bba:	07 c0       	rjmp	.+14     	; 0x3bca <vfprintf+0x14e>
    3bbc:	1c 33       	cpi	r17, 0x3C	; 60
    3bbe:	50 f4       	brcc	.+20     	; 0x3bd4 <vfprintf+0x158>
    3bc0:	44 24       	eor	r4, r4
    3bc2:	43 94       	inc	r4
    3bc4:	41 0e       	add	r4, r17
    3bc6:	27 e0       	ldi	r18, 0x07	; 7
    3bc8:	0b c0       	rjmp	.+22     	; 0x3be0 <vfprintf+0x164>
    3bca:	18 30       	cpi	r17, 0x08	; 8
    3bcc:	38 f0       	brcs	.+14     	; 0x3bdc <vfprintf+0x160>
    3bce:	27 e0       	ldi	r18, 0x07	; 7
    3bd0:	17 e0       	ldi	r17, 0x07	; 7
    3bd2:	05 c0       	rjmp	.+10     	; 0x3bde <vfprintf+0x162>
    3bd4:	27 e0       	ldi	r18, 0x07	; 7
    3bd6:	9c e3       	ldi	r25, 0x3C	; 60
    3bd8:	49 2e       	mov	r4, r25
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <vfprintf+0x164>
    3bdc:	21 2f       	mov	r18, r17
    3bde:	41 2c       	mov	r4, r1
    3be0:	56 01       	movw	r10, r12
    3be2:	84 e0       	ldi	r24, 0x04	; 4
    3be4:	a8 0e       	add	r10, r24
    3be6:	b1 1c       	adc	r11, r1
    3be8:	f6 01       	movw	r30, r12
    3bea:	60 81       	ld	r22, Z
    3bec:	71 81       	ldd	r23, Z+1	; 0x01
    3bee:	82 81       	ldd	r24, Z+2	; 0x02
    3bf0:	93 81       	ldd	r25, Z+3	; 0x03
    3bf2:	04 2d       	mov	r16, r4
    3bf4:	a3 01       	movw	r20, r6
    3bf6:	0e 94 9c 21 	call	0x4338	; 0x4338 <__ftoa_engine>
    3bfa:	6c 01       	movw	r12, r24
    3bfc:	f9 81       	ldd	r31, Y+1	; 0x01
    3bfe:	fc 87       	std	Y+12, r31	; 0x0c
    3c00:	f0 ff       	sbrs	r31, 0
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <vfprintf+0x18c>
    3c04:	f3 ff       	sbrs	r31, 3
    3c06:	06 c0       	rjmp	.+12     	; 0x3c14 <vfprintf+0x198>
    3c08:	91 fc       	sbrc	r9, 1
    3c0a:	06 c0       	rjmp	.+12     	; 0x3c18 <vfprintf+0x19c>
    3c0c:	92 fe       	sbrs	r9, 2
    3c0e:	06 c0       	rjmp	.+12     	; 0x3c1c <vfprintf+0x1a0>
    3c10:	00 e2       	ldi	r16, 0x20	; 32
    3c12:	05 c0       	rjmp	.+10     	; 0x3c1e <vfprintf+0x1a2>
    3c14:	0d e2       	ldi	r16, 0x2D	; 45
    3c16:	03 c0       	rjmp	.+6      	; 0x3c1e <vfprintf+0x1a2>
    3c18:	0b e2       	ldi	r16, 0x2B	; 43
    3c1a:	01 c0       	rjmp	.+2      	; 0x3c1e <vfprintf+0x1a2>
    3c1c:	00 e0       	ldi	r16, 0x00	; 0
    3c1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c20:	8c 70       	andi	r24, 0x0C	; 12
    3c22:	19 f0       	breq	.+6      	; 0x3c2a <vfprintf+0x1ae>
    3c24:	01 11       	cpse	r16, r1
    3c26:	5a c2       	rjmp	.+1204   	; 0x40dc <__RODATA_PM_OFFSET__+0xdc>
    3c28:	9b c2       	rjmp	.+1334   	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    3c2a:	97 fe       	sbrs	r9, 7
    3c2c:	10 c0       	rjmp	.+32     	; 0x3c4e <vfprintf+0x1d2>
    3c2e:	4c 0c       	add	r4, r12
    3c30:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c32:	f4 ff       	sbrs	r31, 4
    3c34:	04 c0       	rjmp	.+8      	; 0x3c3e <vfprintf+0x1c2>
    3c36:	8a 81       	ldd	r24, Y+2	; 0x02
    3c38:	81 33       	cpi	r24, 0x31	; 49
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <vfprintf+0x1c2>
    3c3c:	4a 94       	dec	r4
    3c3e:	14 14       	cp	r1, r4
    3c40:	74 f5       	brge	.+92     	; 0x3c9e <vfprintf+0x222>
    3c42:	28 e0       	ldi	r18, 0x08	; 8
    3c44:	24 15       	cp	r18, r4
    3c46:	78 f5       	brcc	.+94     	; 0x3ca6 <vfprintf+0x22a>
    3c48:	88 e0       	ldi	r24, 0x08	; 8
    3c4a:	48 2e       	mov	r4, r24
    3c4c:	2c c0       	rjmp	.+88     	; 0x3ca6 <vfprintf+0x22a>
    3c4e:	96 fc       	sbrc	r9, 6
    3c50:	2a c0       	rjmp	.+84     	; 0x3ca6 <vfprintf+0x22a>
    3c52:	81 2f       	mov	r24, r17
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	8c 15       	cp	r24, r12
    3c58:	9d 05       	cpc	r25, r13
    3c5a:	9c f0       	brlt	.+38     	; 0x3c82 <vfprintf+0x206>
    3c5c:	3c ef       	ldi	r19, 0xFC	; 252
    3c5e:	c3 16       	cp	r12, r19
    3c60:	3f ef       	ldi	r19, 0xFF	; 255
    3c62:	d3 06       	cpc	r13, r19
    3c64:	74 f0       	brlt	.+28     	; 0x3c82 <vfprintf+0x206>
    3c66:	89 2d       	mov	r24, r9
    3c68:	80 68       	ori	r24, 0x80	; 128
    3c6a:	98 2e       	mov	r9, r24
    3c6c:	0a c0       	rjmp	.+20     	; 0x3c82 <vfprintf+0x206>
    3c6e:	e2 e0       	ldi	r30, 0x02	; 2
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	ec 0f       	add	r30, r28
    3c74:	fd 1f       	adc	r31, r29
    3c76:	e1 0f       	add	r30, r17
    3c78:	f1 1d       	adc	r31, r1
    3c7a:	80 81       	ld	r24, Z
    3c7c:	80 33       	cpi	r24, 0x30	; 48
    3c7e:	19 f4       	brne	.+6      	; 0x3c86 <vfprintf+0x20a>
    3c80:	11 50       	subi	r17, 0x01	; 1
    3c82:	11 11       	cpse	r17, r1
    3c84:	f4 cf       	rjmp	.-24     	; 0x3c6e <vfprintf+0x1f2>
    3c86:	97 fe       	sbrs	r9, 7
    3c88:	0e c0       	rjmp	.+28     	; 0x3ca6 <vfprintf+0x22a>
    3c8a:	44 24       	eor	r4, r4
    3c8c:	43 94       	inc	r4
    3c8e:	41 0e       	add	r4, r17
    3c90:	81 2f       	mov	r24, r17
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	c8 16       	cp	r12, r24
    3c96:	d9 06       	cpc	r13, r25
    3c98:	2c f4       	brge	.+10     	; 0x3ca4 <vfprintf+0x228>
    3c9a:	1c 19       	sub	r17, r12
    3c9c:	04 c0       	rjmp	.+8      	; 0x3ca6 <vfprintf+0x22a>
    3c9e:	44 24       	eor	r4, r4
    3ca0:	43 94       	inc	r4
    3ca2:	01 c0       	rjmp	.+2      	; 0x3ca6 <vfprintf+0x22a>
    3ca4:	10 e0       	ldi	r17, 0x00	; 0
    3ca6:	97 fe       	sbrs	r9, 7
    3ca8:	06 c0       	rjmp	.+12     	; 0x3cb6 <vfprintf+0x23a>
    3caa:	1c 14       	cp	r1, r12
    3cac:	1d 04       	cpc	r1, r13
    3cae:	34 f4       	brge	.+12     	; 0x3cbc <vfprintf+0x240>
    3cb0:	c6 01       	movw	r24, r12
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	05 c0       	rjmp	.+10     	; 0x3cc0 <vfprintf+0x244>
    3cb6:	85 e0       	ldi	r24, 0x05	; 5
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	02 c0       	rjmp	.+4      	; 0x3cc0 <vfprintf+0x244>
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	01 11       	cpse	r16, r1
    3cc2:	01 96       	adiw	r24, 0x01	; 1
    3cc4:	11 23       	and	r17, r17
    3cc6:	31 f0       	breq	.+12     	; 0x3cd4 <vfprintf+0x258>
    3cc8:	21 2f       	mov	r18, r17
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	2f 5f       	subi	r18, 0xFF	; 255
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	82 0f       	add	r24, r18
    3cd2:	93 1f       	adc	r25, r19
    3cd4:	25 2d       	mov	r18, r5
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	82 17       	cp	r24, r18
    3cda:	93 07       	cpc	r25, r19
    3cdc:	14 f4       	brge	.+4      	; 0x3ce2 <vfprintf+0x266>
    3cde:	58 1a       	sub	r5, r24
    3ce0:	01 c0       	rjmp	.+2      	; 0x3ce4 <vfprintf+0x268>
    3ce2:	51 2c       	mov	r5, r1
    3ce4:	89 2d       	mov	r24, r9
    3ce6:	89 70       	andi	r24, 0x09	; 9
    3ce8:	49 f4       	brne	.+18     	; 0x3cfc <vfprintf+0x280>
    3cea:	55 20       	and	r5, r5
    3cec:	39 f0       	breq	.+14     	; 0x3cfc <vfprintf+0x280>
    3cee:	b7 01       	movw	r22, r14
    3cf0:	80 e2       	ldi	r24, 0x20	; 32
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3cf8:	5a 94       	dec	r5
    3cfa:	f7 cf       	rjmp	.-18     	; 0x3cea <vfprintf+0x26e>
    3cfc:	00 23       	and	r16, r16
    3cfe:	29 f0       	breq	.+10     	; 0x3d0a <vfprintf+0x28e>
    3d00:	b7 01       	movw	r22, r14
    3d02:	80 2f       	mov	r24, r16
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3d0a:	93 fc       	sbrc	r9, 3
    3d0c:	09 c0       	rjmp	.+18     	; 0x3d20 <vfprintf+0x2a4>
    3d0e:	55 20       	and	r5, r5
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <vfprintf+0x2a4>
    3d12:	b7 01       	movw	r22, r14
    3d14:	80 e3       	ldi	r24, 0x30	; 48
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3d1c:	5a 94       	dec	r5
    3d1e:	f7 cf       	rjmp	.-18     	; 0x3d0e <vfprintf+0x292>
    3d20:	97 fe       	sbrs	r9, 7
    3d22:	4c c0       	rjmp	.+152    	; 0x3dbc <vfprintf+0x340>
    3d24:	46 01       	movw	r8, r12
    3d26:	d7 fe       	sbrs	r13, 7
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <vfprintf+0x2b2>
    3d2a:	81 2c       	mov	r8, r1
    3d2c:	91 2c       	mov	r9, r1
    3d2e:	c6 01       	movw	r24, r12
    3d30:	88 19       	sub	r24, r8
    3d32:	99 09       	sbc	r25, r9
    3d34:	f3 01       	movw	r30, r6
    3d36:	e8 0f       	add	r30, r24
    3d38:	f9 1f       	adc	r31, r25
    3d3a:	ed 87       	std	Y+13, r30	; 0x0d
    3d3c:	fe 87       	std	Y+14, r31	; 0x0e
    3d3e:	96 01       	movw	r18, r12
    3d40:	24 19       	sub	r18, r4
    3d42:	31 09       	sbc	r19, r1
    3d44:	2f 87       	std	Y+15, r18	; 0x0f
    3d46:	38 8b       	std	Y+16, r19	; 0x10
    3d48:	01 2f       	mov	r16, r17
    3d4a:	10 e0       	ldi	r17, 0x00	; 0
    3d4c:	11 95       	neg	r17
    3d4e:	01 95       	neg	r16
    3d50:	11 09       	sbc	r17, r1
    3d52:	3f ef       	ldi	r19, 0xFF	; 255
    3d54:	83 16       	cp	r8, r19
    3d56:	93 06       	cpc	r9, r19
    3d58:	29 f4       	brne	.+10     	; 0x3d64 <vfprintf+0x2e8>
    3d5a:	b7 01       	movw	r22, r14
    3d5c:	8e e2       	ldi	r24, 0x2E	; 46
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3d64:	c8 14       	cp	r12, r8
    3d66:	d9 04       	cpc	r13, r9
    3d68:	4c f0       	brlt	.+18     	; 0x3d7c <vfprintf+0x300>
    3d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d6c:	98 89       	ldd	r25, Y+16	; 0x10
    3d6e:	88 15       	cp	r24, r8
    3d70:	99 05       	cpc	r25, r9
    3d72:	24 f4       	brge	.+8      	; 0x3d7c <vfprintf+0x300>
    3d74:	ed 85       	ldd	r30, Y+13	; 0x0d
    3d76:	fe 85       	ldd	r31, Y+14	; 0x0e
    3d78:	81 81       	ldd	r24, Z+1	; 0x01
    3d7a:	01 c0       	rjmp	.+2      	; 0x3d7e <vfprintf+0x302>
    3d7c:	80 e3       	ldi	r24, 0x30	; 48
    3d7e:	f1 e0       	ldi	r31, 0x01	; 1
    3d80:	8f 1a       	sub	r8, r31
    3d82:	91 08       	sbc	r9, r1
    3d84:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d86:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
    3d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8c:	2d 87       	std	Y+13, r18	; 0x0d
    3d8e:	3e 87       	std	Y+14, r19	; 0x0e
    3d90:	80 16       	cp	r8, r16
    3d92:	91 06       	cpc	r9, r17
    3d94:	2c f0       	brlt	.+10     	; 0x3da0 <vfprintf+0x324>
    3d96:	b7 01       	movw	r22, r14
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3d9e:	d9 cf       	rjmp	.-78     	; 0x3d52 <vfprintf+0x2d6>
    3da0:	c8 14       	cp	r12, r8
    3da2:	d9 04       	cpc	r13, r9
    3da4:	41 f4       	brne	.+16     	; 0x3db6 <vfprintf+0x33a>
    3da6:	9a 81       	ldd	r25, Y+2	; 0x02
    3da8:	96 33       	cpi	r25, 0x36	; 54
    3daa:	20 f4       	brcc	.+8      	; 0x3db4 <vfprintf+0x338>
    3dac:	95 33       	cpi	r25, 0x35	; 53
    3dae:	19 f4       	brne	.+6      	; 0x3db6 <vfprintf+0x33a>
    3db0:	3c 85       	ldd	r19, Y+12	; 0x0c
    3db2:	34 ff       	sbrs	r19, 4
    3db4:	81 e3       	ldi	r24, 0x31	; 49
    3db6:	b7 01       	movw	r22, r14
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	4e c0       	rjmp	.+156    	; 0x3e58 <vfprintf+0x3dc>
    3dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbe:	81 33       	cpi	r24, 0x31	; 49
    3dc0:	19 f0       	breq	.+6      	; 0x3dc8 <vfprintf+0x34c>
    3dc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3dc4:	9f 7e       	andi	r25, 0xEF	; 239
    3dc6:	9c 87       	std	Y+12, r25	; 0x0c
    3dc8:	b7 01       	movw	r22, r14
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3dd0:	11 11       	cpse	r17, r1
    3dd2:	05 c0       	rjmp	.+10     	; 0x3dde <vfprintf+0x362>
    3dd4:	94 fc       	sbrc	r9, 4
    3dd6:	18 c0       	rjmp	.+48     	; 0x3e08 <vfprintf+0x38c>
    3dd8:	85 e6       	ldi	r24, 0x65	; 101
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	17 c0       	rjmp	.+46     	; 0x3e0c <vfprintf+0x390>
    3dde:	b7 01       	movw	r22, r14
    3de0:	8e e2       	ldi	r24, 0x2E	; 46
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3de8:	1e 5f       	subi	r17, 0xFE	; 254
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	01 e0       	ldi	r16, 0x01	; 1
    3dee:	08 0f       	add	r16, r24
    3df0:	f3 01       	movw	r30, r6
    3df2:	e8 0f       	add	r30, r24
    3df4:	f1 1d       	adc	r31, r1
    3df6:	80 81       	ld	r24, Z
    3df8:	b7 01       	movw	r22, r14
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3e00:	80 2f       	mov	r24, r16
    3e02:	01 13       	cpse	r16, r17
    3e04:	f3 cf       	rjmp	.-26     	; 0x3dec <vfprintf+0x370>
    3e06:	e6 cf       	rjmp	.-52     	; 0x3dd4 <vfprintf+0x358>
    3e08:	85 e4       	ldi	r24, 0x45	; 69
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	b7 01       	movw	r22, r14
    3e0e:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3e12:	d7 fc       	sbrc	r13, 7
    3e14:	06 c0       	rjmp	.+12     	; 0x3e22 <vfprintf+0x3a6>
    3e16:	c1 14       	cp	r12, r1
    3e18:	d1 04       	cpc	r13, r1
    3e1a:	41 f4       	brne	.+16     	; 0x3e2c <vfprintf+0x3b0>
    3e1c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e1e:	e4 ff       	sbrs	r30, 4
    3e20:	05 c0       	rjmp	.+10     	; 0x3e2c <vfprintf+0x3b0>
    3e22:	d1 94       	neg	r13
    3e24:	c1 94       	neg	r12
    3e26:	d1 08       	sbc	r13, r1
    3e28:	8d e2       	ldi	r24, 0x2D	; 45
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <vfprintf+0x3b2>
    3e2c:	8b e2       	ldi	r24, 0x2B	; 43
    3e2e:	b7 01       	movw	r22, r14
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3e36:	80 e3       	ldi	r24, 0x30	; 48
    3e38:	2a e0       	ldi	r18, 0x0A	; 10
    3e3a:	c2 16       	cp	r12, r18
    3e3c:	d1 04       	cpc	r13, r1
    3e3e:	2c f0       	brlt	.+10     	; 0x3e4a <vfprintf+0x3ce>
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	fa e0       	ldi	r31, 0x0A	; 10
    3e44:	cf 1a       	sub	r12, r31
    3e46:	d1 08       	sbc	r13, r1
    3e48:	f7 cf       	rjmp	.-18     	; 0x3e38 <vfprintf+0x3bc>
    3e4a:	b7 01       	movw	r22, r14
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3e52:	b7 01       	movw	r22, r14
    3e54:	c6 01       	movw	r24, r12
    3e56:	c0 96       	adiw	r24, 0x30	; 48
    3e58:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3e5c:	54 c1       	rjmp	.+680    	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3e5e:	83 36       	cpi	r24, 0x63	; 99
    3e60:	31 f0       	breq	.+12     	; 0x3e6e <vfprintf+0x3f2>
    3e62:	83 37       	cpi	r24, 0x73	; 115
    3e64:	79 f0       	breq	.+30     	; 0x3e84 <vfprintf+0x408>
    3e66:	83 35       	cpi	r24, 0x53	; 83
    3e68:	09 f0       	breq	.+2      	; 0x3e6c <vfprintf+0x3f0>
    3e6a:	56 c0       	rjmp	.+172    	; 0x3f18 <vfprintf+0x49c>
    3e6c:	20 c0       	rjmp	.+64     	; 0x3eae <vfprintf+0x432>
    3e6e:	56 01       	movw	r10, r12
    3e70:	32 e0       	ldi	r19, 0x02	; 2
    3e72:	a3 0e       	add	r10, r19
    3e74:	b1 1c       	adc	r11, r1
    3e76:	f6 01       	movw	r30, r12
    3e78:	80 81       	ld	r24, Z
    3e7a:	89 83       	std	Y+1, r24	; 0x01
    3e7c:	01 e0       	ldi	r16, 0x01	; 1
    3e7e:	10 e0       	ldi	r17, 0x00	; 0
    3e80:	63 01       	movw	r12, r6
    3e82:	12 c0       	rjmp	.+36     	; 0x3ea8 <vfprintf+0x42c>
    3e84:	56 01       	movw	r10, r12
    3e86:	f2 e0       	ldi	r31, 0x02	; 2
    3e88:	af 0e       	add	r10, r31
    3e8a:	b1 1c       	adc	r11, r1
    3e8c:	f6 01       	movw	r30, r12
    3e8e:	c0 80       	ld	r12, Z
    3e90:	d1 80       	ldd	r13, Z+1	; 0x01
    3e92:	96 fe       	sbrs	r9, 6
    3e94:	03 c0       	rjmp	.+6      	; 0x3e9c <vfprintf+0x420>
    3e96:	61 2f       	mov	r22, r17
    3e98:	70 e0       	ldi	r23, 0x00	; 0
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <vfprintf+0x424>
    3e9c:	6f ef       	ldi	r22, 0xFF	; 255
    3e9e:	7f ef       	ldi	r23, 0xFF	; 255
    3ea0:	c6 01       	movw	r24, r12
    3ea2:	0e 94 91 22 	call	0x4522	; 0x4522 <strnlen>
    3ea6:	8c 01       	movw	r16, r24
    3ea8:	f9 2d       	mov	r31, r9
    3eaa:	ff 77       	andi	r31, 0x7F	; 127
    3eac:	14 c0       	rjmp	.+40     	; 0x3ed6 <vfprintf+0x45a>
    3eae:	56 01       	movw	r10, r12
    3eb0:	22 e0       	ldi	r18, 0x02	; 2
    3eb2:	a2 0e       	add	r10, r18
    3eb4:	b1 1c       	adc	r11, r1
    3eb6:	f6 01       	movw	r30, r12
    3eb8:	c0 80       	ld	r12, Z
    3eba:	d1 80       	ldd	r13, Z+1	; 0x01
    3ebc:	96 fe       	sbrs	r9, 6
    3ebe:	03 c0       	rjmp	.+6      	; 0x3ec6 <vfprintf+0x44a>
    3ec0:	61 2f       	mov	r22, r17
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <vfprintf+0x44e>
    3ec6:	6f ef       	ldi	r22, 0xFF	; 255
    3ec8:	7f ef       	ldi	r23, 0xFF	; 255
    3eca:	c6 01       	movw	r24, r12
    3ecc:	0e 94 74 22 	call	0x44e8	; 0x44e8 <strnlen_P>
    3ed0:	8c 01       	movw	r16, r24
    3ed2:	f9 2d       	mov	r31, r9
    3ed4:	f0 68       	ori	r31, 0x80	; 128
    3ed6:	9f 2e       	mov	r9, r31
    3ed8:	f3 fd       	sbrc	r31, 3
    3eda:	1a c0       	rjmp	.+52     	; 0x3f10 <vfprintf+0x494>
    3edc:	85 2d       	mov	r24, r5
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	08 17       	cp	r16, r24
    3ee2:	19 07       	cpc	r17, r25
    3ee4:	a8 f4       	brcc	.+42     	; 0x3f10 <vfprintf+0x494>
    3ee6:	b7 01       	movw	r22, r14
    3ee8:	80 e2       	ldi	r24, 0x20	; 32
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3ef0:	5a 94       	dec	r5
    3ef2:	f4 cf       	rjmp	.-24     	; 0x3edc <vfprintf+0x460>
    3ef4:	f6 01       	movw	r30, r12
    3ef6:	97 fc       	sbrc	r9, 7
    3ef8:	85 91       	lpm	r24, Z+
    3efa:	97 fe       	sbrs	r9, 7
    3efc:	81 91       	ld	r24, Z+
    3efe:	6f 01       	movw	r12, r30
    3f00:	b7 01       	movw	r22, r14
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    3f08:	51 10       	cpse	r5, r1
    3f0a:	5a 94       	dec	r5
    3f0c:	01 50       	subi	r16, 0x01	; 1
    3f0e:	11 09       	sbc	r17, r1
    3f10:	01 15       	cp	r16, r1
    3f12:	11 05       	cpc	r17, r1
    3f14:	79 f7       	brne	.-34     	; 0x3ef4 <vfprintf+0x478>
    3f16:	f7 c0       	rjmp	.+494    	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3f18:	84 36       	cpi	r24, 0x64	; 100
    3f1a:	11 f0       	breq	.+4      	; 0x3f20 <vfprintf+0x4a4>
    3f1c:	89 36       	cpi	r24, 0x69	; 105
    3f1e:	61 f5       	brne	.+88     	; 0x3f78 <vfprintf+0x4fc>
    3f20:	56 01       	movw	r10, r12
    3f22:	97 fe       	sbrs	r9, 7
    3f24:	09 c0       	rjmp	.+18     	; 0x3f38 <vfprintf+0x4bc>
    3f26:	24 e0       	ldi	r18, 0x04	; 4
    3f28:	a2 0e       	add	r10, r18
    3f2a:	b1 1c       	adc	r11, r1
    3f2c:	f6 01       	movw	r30, r12
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	0a c0       	rjmp	.+20     	; 0x3f4c <vfprintf+0x4d0>
    3f38:	f2 e0       	ldi	r31, 0x02	; 2
    3f3a:	af 0e       	add	r10, r31
    3f3c:	b1 1c       	adc	r11, r1
    3f3e:	f6 01       	movw	r30, r12
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	07 2e       	mov	r0, r23
    3f46:	00 0c       	add	r0, r0
    3f48:	88 0b       	sbc	r24, r24
    3f4a:	99 0b       	sbc	r25, r25
    3f4c:	f9 2d       	mov	r31, r9
    3f4e:	ff 76       	andi	r31, 0x6F	; 111
    3f50:	9f 2e       	mov	r9, r31
    3f52:	97 ff       	sbrs	r25, 7
    3f54:	09 c0       	rjmp	.+18     	; 0x3f68 <vfprintf+0x4ec>
    3f56:	90 95       	com	r25
    3f58:	80 95       	com	r24
    3f5a:	70 95       	com	r23
    3f5c:	61 95       	neg	r22
    3f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f60:	8f 4f       	sbci	r24, 0xFF	; 255
    3f62:	9f 4f       	sbci	r25, 0xFF	; 255
    3f64:	f0 68       	ori	r31, 0x80	; 128
    3f66:	9f 2e       	mov	r9, r31
    3f68:	2a e0       	ldi	r18, 0x0A	; 10
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	a3 01       	movw	r20, r6
    3f6e:	0e 94 0f 23 	call	0x461e	; 0x461e <__ultoa_invert>
    3f72:	c8 2e       	mov	r12, r24
    3f74:	c6 18       	sub	r12, r6
    3f76:	3f c0       	rjmp	.+126    	; 0x3ff6 <vfprintf+0x57a>
    3f78:	09 2d       	mov	r16, r9
    3f7a:	85 37       	cpi	r24, 0x75	; 117
    3f7c:	21 f4       	brne	.+8      	; 0x3f86 <vfprintf+0x50a>
    3f7e:	0f 7e       	andi	r16, 0xEF	; 239
    3f80:	2a e0       	ldi	r18, 0x0A	; 10
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	1d c0       	rjmp	.+58     	; 0x3fc0 <vfprintf+0x544>
    3f86:	09 7f       	andi	r16, 0xF9	; 249
    3f88:	8f 36       	cpi	r24, 0x6F	; 111
    3f8a:	91 f0       	breq	.+36     	; 0x3fb0 <vfprintf+0x534>
    3f8c:	18 f4       	brcc	.+6      	; 0x3f94 <vfprintf+0x518>
    3f8e:	88 35       	cpi	r24, 0x58	; 88
    3f90:	59 f0       	breq	.+22     	; 0x3fa8 <vfprintf+0x52c>
    3f92:	c3 c0       	rjmp	.+390    	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    3f94:	80 37       	cpi	r24, 0x70	; 112
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <vfprintf+0x522>
    3f98:	88 37       	cpi	r24, 0x78	; 120
    3f9a:	11 f0       	breq	.+4      	; 0x3fa0 <vfprintf+0x524>
    3f9c:	be c0       	rjmp	.+380    	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    3f9e:	00 61       	ori	r16, 0x10	; 16
    3fa0:	04 ff       	sbrs	r16, 4
    3fa2:	09 c0       	rjmp	.+18     	; 0x3fb6 <vfprintf+0x53a>
    3fa4:	04 60       	ori	r16, 0x04	; 4
    3fa6:	07 c0       	rjmp	.+14     	; 0x3fb6 <vfprintf+0x53a>
    3fa8:	94 fe       	sbrs	r9, 4
    3faa:	08 c0       	rjmp	.+16     	; 0x3fbc <vfprintf+0x540>
    3fac:	06 60       	ori	r16, 0x06	; 6
    3fae:	06 c0       	rjmp	.+12     	; 0x3fbc <vfprintf+0x540>
    3fb0:	28 e0       	ldi	r18, 0x08	; 8
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	05 c0       	rjmp	.+10     	; 0x3fc0 <vfprintf+0x544>
    3fb6:	20 e1       	ldi	r18, 0x10	; 16
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	02 c0       	rjmp	.+4      	; 0x3fc0 <vfprintf+0x544>
    3fbc:	20 e1       	ldi	r18, 0x10	; 16
    3fbe:	32 e0       	ldi	r19, 0x02	; 2
    3fc0:	56 01       	movw	r10, r12
    3fc2:	07 ff       	sbrs	r16, 7
    3fc4:	09 c0       	rjmp	.+18     	; 0x3fd8 <vfprintf+0x55c>
    3fc6:	84 e0       	ldi	r24, 0x04	; 4
    3fc8:	a8 0e       	add	r10, r24
    3fca:	b1 1c       	adc	r11, r1
    3fcc:	f6 01       	movw	r30, r12
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	82 81       	ldd	r24, Z+2	; 0x02
    3fd4:	93 81       	ldd	r25, Z+3	; 0x03
    3fd6:	08 c0       	rjmp	.+16     	; 0x3fe8 <vfprintf+0x56c>
    3fd8:	f2 e0       	ldi	r31, 0x02	; 2
    3fda:	af 0e       	add	r10, r31
    3fdc:	b1 1c       	adc	r11, r1
    3fde:	f6 01       	movw	r30, r12
    3fe0:	60 81       	ld	r22, Z
    3fe2:	71 81       	ldd	r23, Z+1	; 0x01
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	a3 01       	movw	r20, r6
    3fea:	0e 94 0f 23 	call	0x461e	; 0x461e <__ultoa_invert>
    3fee:	c8 2e       	mov	r12, r24
    3ff0:	c6 18       	sub	r12, r6
    3ff2:	0f 77       	andi	r16, 0x7F	; 127
    3ff4:	90 2e       	mov	r9, r16
    3ff6:	96 fe       	sbrs	r9, 6
    3ff8:	0b c0       	rjmp	.+22     	; 0x4010 <__RODATA_PM_OFFSET__+0x10>
    3ffa:	09 2d       	mov	r16, r9
    3ffc:	0e 7f       	andi	r16, 0xFE	; 254
    3ffe:	c1 16       	cp	r12, r17
    4000:	50 f4       	brcc	.+20     	; 0x4016 <__RODATA_PM_OFFSET__+0x16>
    4002:	94 fe       	sbrs	r9, 4
    4004:	0a c0       	rjmp	.+20     	; 0x401a <__RODATA_PM_OFFSET__+0x1a>
    4006:	92 fc       	sbrc	r9, 2
    4008:	08 c0       	rjmp	.+16     	; 0x401a <__RODATA_PM_OFFSET__+0x1a>
    400a:	09 2d       	mov	r16, r9
    400c:	0e 7e       	andi	r16, 0xEE	; 238
    400e:	05 c0       	rjmp	.+10     	; 0x401a <__RODATA_PM_OFFSET__+0x1a>
    4010:	dc 2c       	mov	r13, r12
    4012:	09 2d       	mov	r16, r9
    4014:	03 c0       	rjmp	.+6      	; 0x401c <__RODATA_PM_OFFSET__+0x1c>
    4016:	dc 2c       	mov	r13, r12
    4018:	01 c0       	rjmp	.+2      	; 0x401c <__RODATA_PM_OFFSET__+0x1c>
    401a:	d1 2e       	mov	r13, r17
    401c:	04 ff       	sbrs	r16, 4
    401e:	0d c0       	rjmp	.+26     	; 0x403a <__RODATA_PM_OFFSET__+0x3a>
    4020:	fe 01       	movw	r30, r28
    4022:	ec 0d       	add	r30, r12
    4024:	f1 1d       	adc	r31, r1
    4026:	80 81       	ld	r24, Z
    4028:	80 33       	cpi	r24, 0x30	; 48
    402a:	11 f4       	brne	.+4      	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    402c:	09 7e       	andi	r16, 0xE9	; 233
    402e:	09 c0       	rjmp	.+18     	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    4030:	02 ff       	sbrs	r16, 2
    4032:	06 c0       	rjmp	.+12     	; 0x4040 <__RODATA_PM_OFFSET__+0x40>
    4034:	d3 94       	inc	r13
    4036:	d3 94       	inc	r13
    4038:	04 c0       	rjmp	.+8      	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    403a:	80 2f       	mov	r24, r16
    403c:	86 78       	andi	r24, 0x86	; 134
    403e:	09 f0       	breq	.+2      	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    4040:	d3 94       	inc	r13
    4042:	03 fd       	sbrc	r16, 3
    4044:	11 c0       	rjmp	.+34     	; 0x4068 <__RODATA_PM_OFFSET__+0x68>
    4046:	00 ff       	sbrs	r16, 0
    4048:	06 c0       	rjmp	.+12     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    404a:	1c 2d       	mov	r17, r12
    404c:	d5 14       	cp	r13, r5
    404e:	80 f4       	brcc	.+32     	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    4050:	15 0d       	add	r17, r5
    4052:	1d 19       	sub	r17, r13
    4054:	0d c0       	rjmp	.+26     	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    4056:	d5 14       	cp	r13, r5
    4058:	58 f4       	brcc	.+22     	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    405a:	b7 01       	movw	r22, r14
    405c:	80 e2       	ldi	r24, 0x20	; 32
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    4064:	d3 94       	inc	r13
    4066:	f7 cf       	rjmp	.-18     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    4068:	d5 14       	cp	r13, r5
    406a:	10 f4       	brcc	.+4      	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    406c:	5d 18       	sub	r5, r13
    406e:	01 c0       	rjmp	.+2      	; 0x4072 <__RODATA_PM_OFFSET__+0x72>
    4070:	51 2c       	mov	r5, r1
    4072:	04 ff       	sbrs	r16, 4
    4074:	10 c0       	rjmp	.+32     	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    4076:	b7 01       	movw	r22, r14
    4078:	80 e3       	ldi	r24, 0x30	; 48
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    4080:	02 ff       	sbrs	r16, 2
    4082:	17 c0       	rjmp	.+46     	; 0x40b2 <__RODATA_PM_OFFSET__+0xb2>
    4084:	01 fd       	sbrc	r16, 1
    4086:	03 c0       	rjmp	.+6      	; 0x408e <__RODATA_PM_OFFSET__+0x8e>
    4088:	88 e7       	ldi	r24, 0x78	; 120
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	02 c0       	rjmp	.+4      	; 0x4092 <__RODATA_PM_OFFSET__+0x92>
    408e:	88 e5       	ldi	r24, 0x58	; 88
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	b7 01       	movw	r22, r14
    4094:	0c c0       	rjmp	.+24     	; 0x40ae <__RODATA_PM_OFFSET__+0xae>
    4096:	80 2f       	mov	r24, r16
    4098:	86 78       	andi	r24, 0x86	; 134
    409a:	59 f0       	breq	.+22     	; 0x40b2 <__RODATA_PM_OFFSET__+0xb2>
    409c:	01 ff       	sbrs	r16, 1
    409e:	02 c0       	rjmp	.+4      	; 0x40a4 <__RODATA_PM_OFFSET__+0xa4>
    40a0:	8b e2       	ldi	r24, 0x2B	; 43
    40a2:	01 c0       	rjmp	.+2      	; 0x40a6 <__RODATA_PM_OFFSET__+0xa6>
    40a4:	80 e2       	ldi	r24, 0x20	; 32
    40a6:	07 fd       	sbrc	r16, 7
    40a8:	8d e2       	ldi	r24, 0x2D	; 45
    40aa:	b7 01       	movw	r22, r14
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    40b2:	c1 16       	cp	r12, r17
    40b4:	38 f4       	brcc	.+14     	; 0x40c4 <__RODATA_PM_OFFSET__+0xc4>
    40b6:	b7 01       	movw	r22, r14
    40b8:	80 e3       	ldi	r24, 0x30	; 48
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    40c0:	11 50       	subi	r17, 0x01	; 1
    40c2:	f7 cf       	rjmp	.-18     	; 0x40b2 <__RODATA_PM_OFFSET__+0xb2>
    40c4:	ca 94       	dec	r12
    40c6:	f3 01       	movw	r30, r6
    40c8:	ec 0d       	add	r30, r12
    40ca:	f1 1d       	adc	r31, r1
    40cc:	80 81       	ld	r24, Z
    40ce:	b7 01       	movw	r22, r14
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    40d6:	c1 10       	cpse	r12, r1
    40d8:	f5 cf       	rjmp	.-22     	; 0x40c4 <__RODATA_PM_OFFSET__+0xc4>
    40da:	15 c0       	rjmp	.+42     	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    40dc:	f4 e0       	ldi	r31, 0x04	; 4
    40de:	f5 15       	cp	r31, r5
    40e0:	60 f5       	brcc	.+88     	; 0x413a <__RODATA_PM_OFFSET__+0x13a>
    40e2:	84 e0       	ldi	r24, 0x04	; 4
    40e4:	58 1a       	sub	r5, r24
    40e6:	93 fe       	sbrs	r9, 3
    40e8:	1f c0       	rjmp	.+62     	; 0x4128 <__RODATA_PM_OFFSET__+0x128>
    40ea:	01 11       	cpse	r16, r1
    40ec:	27 c0       	rjmp	.+78     	; 0x413c <__RODATA_PM_OFFSET__+0x13c>
    40ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    40f0:	23 ff       	sbrs	r18, 3
    40f2:	2a c0       	rjmp	.+84     	; 0x4148 <__RODATA_PM_OFFSET__+0x148>
    40f4:	02 e5       	ldi	r16, 0x52	; 82
    40f6:	11 e0       	ldi	r17, 0x01	; 1
    40f8:	39 2d       	mov	r19, r9
    40fa:	30 71       	andi	r19, 0x10	; 16
    40fc:	93 2e       	mov	r9, r19
    40fe:	f8 01       	movw	r30, r16
    4100:	84 91       	lpm	r24, Z
    4102:	81 11       	cpse	r24, r1
    4104:	24 c0       	rjmp	.+72     	; 0x414e <__RODATA_PM_OFFSET__+0x14e>
    4106:	55 20       	and	r5, r5
    4108:	09 f4       	brne	.+2      	; 0x410c <__RODATA_PM_OFFSET__+0x10c>
    410a:	e4 cc       	rjmp	.-1592   	; 0x3ad4 <vfprintf+0x58>
    410c:	b7 01       	movw	r22, r14
    410e:	80 e2       	ldi	r24, 0x20	; 32
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    4116:	5a 94       	dec	r5
    4118:	f6 cf       	rjmp	.-20     	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    411a:	f7 01       	movw	r30, r14
    411c:	86 81       	ldd	r24, Z+6	; 0x06
    411e:	97 81       	ldd	r25, Z+7	; 0x07
    4120:	26 c0       	rjmp	.+76     	; 0x416e <__RODATA_PM_OFFSET__+0x16e>
    4122:	8f ef       	ldi	r24, 0xFF	; 255
    4124:	9f ef       	ldi	r25, 0xFF	; 255
    4126:	23 c0       	rjmp	.+70     	; 0x416e <__RODATA_PM_OFFSET__+0x16e>
    4128:	b7 01       	movw	r22, r14
    412a:	80 e2       	ldi	r24, 0x20	; 32
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    4132:	5a 94       	dec	r5
    4134:	51 10       	cpse	r5, r1
    4136:	f8 cf       	rjmp	.-16     	; 0x4128 <__RODATA_PM_OFFSET__+0x128>
    4138:	d8 cf       	rjmp	.-80     	; 0x40ea <__RODATA_PM_OFFSET__+0xea>
    413a:	51 2c       	mov	r5, r1
    413c:	b7 01       	movw	r22, r14
    413e:	80 2f       	mov	r24, r16
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    4146:	d3 cf       	rjmp	.-90     	; 0x40ee <__RODATA_PM_OFFSET__+0xee>
    4148:	06 e5       	ldi	r16, 0x56	; 86
    414a:	11 e0       	ldi	r17, 0x01	; 1
    414c:	d5 cf       	rjmp	.-86     	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    414e:	91 10       	cpse	r9, r1
    4150:	80 52       	subi	r24, 0x20	; 32
    4152:	b7 01       	movw	r22, r14
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0e 94 b1 22 	call	0x4562	; 0x4562 <fputc>
    415a:	0f 5f       	subi	r16, 0xFF	; 255
    415c:	1f 4f       	sbci	r17, 0xFF	; 255
    415e:	cf cf       	rjmp	.-98     	; 0x40fe <__RODATA_PM_OFFSET__+0xfe>
    4160:	23 e0       	ldi	r18, 0x03	; 3
    4162:	25 15       	cp	r18, r5
    4164:	10 f4       	brcc	.+4      	; 0x416a <__RODATA_PM_OFFSET__+0x16a>
    4166:	83 e0       	ldi	r24, 0x03	; 3
    4168:	bd cf       	rjmp	.-134    	; 0x40e4 <__RODATA_PM_OFFSET__+0xe4>
    416a:	51 2c       	mov	r5, r1
    416c:	c0 cf       	rjmp	.-128    	; 0x40ee <__RODATA_PM_OFFSET__+0xee>
    416e:	60 96       	adiw	r28, 0x10	; 16
    4170:	e2 e1       	ldi	r30, 0x12	; 18
    4172:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__>

00004176 <__divmodhi4>:
    4176:	97 fb       	bst	r25, 7
    4178:	07 2e       	mov	r0, r23
    417a:	16 f4       	brtc	.+4      	; 0x4180 <__divmodhi4+0xa>
    417c:	00 94       	com	r0
    417e:	07 d0       	rcall	.+14     	; 0x418e <__divmodhi4_neg1>
    4180:	77 fd       	sbrc	r23, 7
    4182:	09 d0       	rcall	.+18     	; 0x4196 <__divmodhi4_neg2>
    4184:	0e 94 30 21 	call	0x4260	; 0x4260 <__udivmodhi4>
    4188:	07 fc       	sbrc	r0, 7
    418a:	05 d0       	rcall	.+10     	; 0x4196 <__divmodhi4_neg2>
    418c:	3e f4       	brtc	.+14     	; 0x419c <__divmodhi4_exit>

0000418e <__divmodhi4_neg1>:
    418e:	90 95       	com	r25
    4190:	81 95       	neg	r24
    4192:	9f 4f       	sbci	r25, 0xFF	; 255
    4194:	08 95       	ret

00004196 <__divmodhi4_neg2>:
    4196:	70 95       	com	r23
    4198:	61 95       	neg	r22
    419a:	7f 4f       	sbci	r23, 0xFF	; 255

0000419c <__divmodhi4_exit>:
    419c:	08 95       	ret

0000419e <__divmodsi4>:
    419e:	05 2e       	mov	r0, r21
    41a0:	97 fb       	bst	r25, 7
    41a2:	1e f4       	brtc	.+6      	; 0x41aa <__divmodsi4+0xc>
    41a4:	00 94       	com	r0
    41a6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__negsi2>
    41aa:	57 fd       	sbrc	r21, 7
    41ac:	07 d0       	rcall	.+14     	; 0x41bc <__divmodsi4_neg2>
    41ae:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodsi4>
    41b2:	07 fc       	sbrc	r0, 7
    41b4:	03 d0       	rcall	.+6      	; 0x41bc <__divmodsi4_neg2>
    41b6:	4e f4       	brtc	.+18     	; 0x41ca <__divmodsi4_exit>
    41b8:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__negsi2>

000041bc <__divmodsi4_neg2>:
    41bc:	50 95       	com	r21
    41be:	40 95       	com	r20
    41c0:	30 95       	com	r19
    41c2:	21 95       	neg	r18
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	4f 4f       	sbci	r20, 0xFF	; 255
    41c8:	5f 4f       	sbci	r21, 0xFF	; 255

000041ca <__divmodsi4_exit>:
    41ca:	08 95       	ret

000041cc <__negsi2>:
    41cc:	90 95       	com	r25
    41ce:	80 95       	com	r24
    41d0:	70 95       	com	r23
    41d2:	61 95       	neg	r22
    41d4:	7f 4f       	sbci	r23, 0xFF	; 255
    41d6:	8f 4f       	sbci	r24, 0xFF	; 255
    41d8:	9f 4f       	sbci	r25, 0xFF	; 255
    41da:	08 95       	ret

000041dc <__tablejump2__>:
    41dc:	ee 0f       	add	r30, r30
    41de:	ff 1f       	adc	r31, r31
    41e0:	05 90       	lpm	r0, Z+
    41e2:	f4 91       	lpm	r31, Z
    41e4:	e0 2d       	mov	r30, r0
    41e6:	09 94       	ijmp

000041e8 <__muluhisi3>:
    41e8:	0e 94 66 21 	call	0x42cc	; 0x42cc <__umulhisi3>
    41ec:	a5 9f       	mul	r26, r21
    41ee:	90 0d       	add	r25, r0
    41f0:	b4 9f       	mul	r27, r20
    41f2:	90 0d       	add	r25, r0
    41f4:	a4 9f       	mul	r26, r20
    41f6:	80 0d       	add	r24, r0
    41f8:	91 1d       	adc	r25, r1
    41fa:	11 24       	eor	r1, r1
    41fc:	08 95       	ret

000041fe <__prologue_saves__>:
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	ca 1b       	sub	r28, r26
    4228:	db 0b       	sbc	r29, r27
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	09 94       	ijmp

00004230 <__epilogue_restores__>:
    4230:	2a 88       	ldd	r2, Y+18	; 0x12
    4232:	39 88       	ldd	r3, Y+17	; 0x11
    4234:	48 88       	ldd	r4, Y+16	; 0x10
    4236:	5f 84       	ldd	r5, Y+15	; 0x0f
    4238:	6e 84       	ldd	r6, Y+14	; 0x0e
    423a:	7d 84       	ldd	r7, Y+13	; 0x0d
    423c:	8c 84       	ldd	r8, Y+12	; 0x0c
    423e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4240:	aa 84       	ldd	r10, Y+10	; 0x0a
    4242:	b9 84       	ldd	r11, Y+9	; 0x09
    4244:	c8 84       	ldd	r12, Y+8	; 0x08
    4246:	df 80       	ldd	r13, Y+7	; 0x07
    4248:	ee 80       	ldd	r14, Y+6	; 0x06
    424a:	fd 80       	ldd	r15, Y+5	; 0x05
    424c:	0c 81       	ldd	r16, Y+4	; 0x04
    424e:	1b 81       	ldd	r17, Y+3	; 0x03
    4250:	aa 81       	ldd	r26, Y+2	; 0x02
    4252:	b9 81       	ldd	r27, Y+1	; 0x01
    4254:	ce 0f       	add	r28, r30
    4256:	d1 1d       	adc	r29, r1
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	ed 01       	movw	r28, r26
    425e:	08 95       	ret

00004260 <__udivmodhi4>:
    4260:	aa 1b       	sub	r26, r26
    4262:	bb 1b       	sub	r27, r27
    4264:	51 e1       	ldi	r21, 0x11	; 17
    4266:	07 c0       	rjmp	.+14     	; 0x4276 <__udivmodhi4_ep>

00004268 <__udivmodhi4_loop>:
    4268:	aa 1f       	adc	r26, r26
    426a:	bb 1f       	adc	r27, r27
    426c:	a6 17       	cp	r26, r22
    426e:	b7 07       	cpc	r27, r23
    4270:	10 f0       	brcs	.+4      	; 0x4276 <__udivmodhi4_ep>
    4272:	a6 1b       	sub	r26, r22
    4274:	b7 0b       	sbc	r27, r23

00004276 <__udivmodhi4_ep>:
    4276:	88 1f       	adc	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	5a 95       	dec	r21
    427c:	a9 f7       	brne	.-22     	; 0x4268 <__udivmodhi4_loop>
    427e:	80 95       	com	r24
    4280:	90 95       	com	r25
    4282:	bc 01       	movw	r22, r24
    4284:	cd 01       	movw	r24, r26
    4286:	08 95       	ret

00004288 <__udivmodsi4>:
    4288:	a1 e2       	ldi	r26, 0x21	; 33
    428a:	1a 2e       	mov	r1, r26
    428c:	aa 1b       	sub	r26, r26
    428e:	bb 1b       	sub	r27, r27
    4290:	fd 01       	movw	r30, r26
    4292:	0d c0       	rjmp	.+26     	; 0x42ae <__udivmodsi4_ep>

00004294 <__udivmodsi4_loop>:
    4294:	aa 1f       	adc	r26, r26
    4296:	bb 1f       	adc	r27, r27
    4298:	ee 1f       	adc	r30, r30
    429a:	ff 1f       	adc	r31, r31
    429c:	a2 17       	cp	r26, r18
    429e:	b3 07       	cpc	r27, r19
    42a0:	e4 07       	cpc	r30, r20
    42a2:	f5 07       	cpc	r31, r21
    42a4:	20 f0       	brcs	.+8      	; 0x42ae <__udivmodsi4_ep>
    42a6:	a2 1b       	sub	r26, r18
    42a8:	b3 0b       	sbc	r27, r19
    42aa:	e4 0b       	sbc	r30, r20
    42ac:	f5 0b       	sbc	r31, r21

000042ae <__udivmodsi4_ep>:
    42ae:	66 1f       	adc	r22, r22
    42b0:	77 1f       	adc	r23, r23
    42b2:	88 1f       	adc	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	1a 94       	dec	r1
    42b8:	69 f7       	brne	.-38     	; 0x4294 <__udivmodsi4_loop>
    42ba:	60 95       	com	r22
    42bc:	70 95       	com	r23
    42be:	80 95       	com	r24
    42c0:	90 95       	com	r25
    42c2:	9b 01       	movw	r18, r22
    42c4:	ac 01       	movw	r20, r24
    42c6:	bd 01       	movw	r22, r26
    42c8:	cf 01       	movw	r24, r30
    42ca:	08 95       	ret

000042cc <__umulhisi3>:
    42cc:	a2 9f       	mul	r26, r18
    42ce:	b0 01       	movw	r22, r0
    42d0:	b3 9f       	mul	r27, r19
    42d2:	c0 01       	movw	r24, r0
    42d4:	a3 9f       	mul	r26, r19
    42d6:	70 0d       	add	r23, r0
    42d8:	81 1d       	adc	r24, r1
    42da:	11 24       	eor	r1, r1
    42dc:	91 1d       	adc	r25, r1
    42de:	b2 9f       	mul	r27, r18
    42e0:	70 0d       	add	r23, r0
    42e2:	81 1d       	adc	r24, r1
    42e4:	11 24       	eor	r1, r1
    42e6:	91 1d       	adc	r25, r1
    42e8:	08 95       	ret

000042ea <atol>:
    42ea:	1f 93       	push	r17
    42ec:	fc 01       	movw	r30, r24
    42ee:	99 27       	eor	r25, r25
    42f0:	88 27       	eor	r24, r24
    42f2:	bc 01       	movw	r22, r24
    42f4:	e8 94       	clt
    42f6:	11 91       	ld	r17, Z+
    42f8:	10 32       	cpi	r17, 0x20	; 32
    42fa:	e9 f3       	breq	.-6      	; 0x42f6 <atol+0xc>
    42fc:	19 30       	cpi	r17, 0x09	; 9
    42fe:	10 f0       	brcs	.+4      	; 0x4304 <atol+0x1a>
    4300:	1e 30       	cpi	r17, 0x0E	; 14
    4302:	c8 f3       	brcs	.-14     	; 0x42f6 <atol+0xc>
    4304:	1b 32       	cpi	r17, 0x2B	; 43
    4306:	51 f0       	breq	.+20     	; 0x431c <atol+0x32>
    4308:	1d 32       	cpi	r17, 0x2D	; 45
    430a:	49 f4       	brne	.+18     	; 0x431e <atol+0x34>
    430c:	68 94       	set
    430e:	06 c0       	rjmp	.+12     	; 0x431c <atol+0x32>
    4310:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsi_const_10>
    4314:	61 0f       	add	r22, r17
    4316:	71 1d       	adc	r23, r1
    4318:	81 1d       	adc	r24, r1
    431a:	91 1d       	adc	r25, r1
    431c:	11 91       	ld	r17, Z+
    431e:	10 53       	subi	r17, 0x30	; 48
    4320:	1a 30       	cpi	r17, 0x0A	; 10
    4322:	b0 f3       	brcs	.-20     	; 0x4310 <atol+0x26>
    4324:	3e f4       	brtc	.+14     	; 0x4334 <atol+0x4a>
    4326:	90 95       	com	r25
    4328:	80 95       	com	r24
    432a:	70 95       	com	r23
    432c:	61 95       	neg	r22
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	8f 4f       	sbci	r24, 0xFF	; 255
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	1f 91       	pop	r17
    4336:	08 95       	ret

00004338 <__ftoa_engine>:
    4338:	28 30       	cpi	r18, 0x08	; 8
    433a:	08 f0       	brcs	.+2      	; 0x433e <__ftoa_engine+0x6>
    433c:	27 e0       	ldi	r18, 0x07	; 7
    433e:	33 27       	eor	r19, r19
    4340:	da 01       	movw	r26, r20
    4342:	99 0f       	add	r25, r25
    4344:	31 1d       	adc	r19, r1
    4346:	87 fd       	sbrc	r24, 7
    4348:	91 60       	ori	r25, 0x01	; 1
    434a:	00 96       	adiw	r24, 0x00	; 0
    434c:	61 05       	cpc	r22, r1
    434e:	71 05       	cpc	r23, r1
    4350:	39 f4       	brne	.+14     	; 0x4360 <__ftoa_engine+0x28>
    4352:	32 60       	ori	r19, 0x02	; 2
    4354:	2e 5f       	subi	r18, 0xFE	; 254
    4356:	3d 93       	st	X+, r19
    4358:	30 e3       	ldi	r19, 0x30	; 48
    435a:	2a 95       	dec	r18
    435c:	e1 f7       	brne	.-8      	; 0x4356 <__ftoa_engine+0x1e>
    435e:	08 95       	ret
    4360:	9f 3f       	cpi	r25, 0xFF	; 255
    4362:	30 f0       	brcs	.+12     	; 0x4370 <__ftoa_engine+0x38>
    4364:	80 38       	cpi	r24, 0x80	; 128
    4366:	71 05       	cpc	r23, r1
    4368:	61 05       	cpc	r22, r1
    436a:	09 f0       	breq	.+2      	; 0x436e <__ftoa_engine+0x36>
    436c:	3c 5f       	subi	r19, 0xFC	; 252
    436e:	3c 5f       	subi	r19, 0xFC	; 252
    4370:	3d 93       	st	X+, r19
    4372:	91 30       	cpi	r25, 0x01	; 1
    4374:	08 f0       	brcs	.+2      	; 0x4378 <__ftoa_engine+0x40>
    4376:	80 68       	ori	r24, 0x80	; 128
    4378:	91 1d       	adc	r25, r1
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	1f 93       	push	r17
    4380:	0f 93       	push	r16
    4382:	ff 92       	push	r15
    4384:	ef 92       	push	r14
    4386:	19 2f       	mov	r17, r25
    4388:	98 7f       	andi	r25, 0xF8	; 248
    438a:	96 95       	lsr	r25
    438c:	e9 2f       	mov	r30, r25
    438e:	96 95       	lsr	r25
    4390:	96 95       	lsr	r25
    4392:	e9 0f       	add	r30, r25
    4394:	ff 27       	eor	r31, r31
    4396:	ec 54       	subi	r30, 0x4C	; 76
    4398:	fe 4f       	sbci	r31, 0xFE	; 254
    439a:	99 27       	eor	r25, r25
    439c:	33 27       	eor	r19, r19
    439e:	ee 24       	eor	r14, r14
    43a0:	ff 24       	eor	r15, r15
    43a2:	a7 01       	movw	r20, r14
    43a4:	e7 01       	movw	r28, r14
    43a6:	05 90       	lpm	r0, Z+
    43a8:	08 94       	sec
    43aa:	07 94       	ror	r0
    43ac:	28 f4       	brcc	.+10     	; 0x43b8 <__ftoa_engine+0x80>
    43ae:	36 0f       	add	r19, r22
    43b0:	e7 1e       	adc	r14, r23
    43b2:	f8 1e       	adc	r15, r24
    43b4:	49 1f       	adc	r20, r25
    43b6:	51 1d       	adc	r21, r1
    43b8:	66 0f       	add	r22, r22
    43ba:	77 1f       	adc	r23, r23
    43bc:	88 1f       	adc	r24, r24
    43be:	99 1f       	adc	r25, r25
    43c0:	06 94       	lsr	r0
    43c2:	a1 f7       	brne	.-24     	; 0x43ac <__ftoa_engine+0x74>
    43c4:	05 90       	lpm	r0, Z+
    43c6:	07 94       	ror	r0
    43c8:	28 f4       	brcc	.+10     	; 0x43d4 <__ftoa_engine+0x9c>
    43ca:	e7 0e       	add	r14, r23
    43cc:	f8 1e       	adc	r15, r24
    43ce:	49 1f       	adc	r20, r25
    43d0:	56 1f       	adc	r21, r22
    43d2:	c1 1d       	adc	r28, r1
    43d4:	77 0f       	add	r23, r23
    43d6:	88 1f       	adc	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	66 1f       	adc	r22, r22
    43dc:	06 94       	lsr	r0
    43de:	a1 f7       	brne	.-24     	; 0x43c8 <__ftoa_engine+0x90>
    43e0:	05 90       	lpm	r0, Z+
    43e2:	07 94       	ror	r0
    43e4:	28 f4       	brcc	.+10     	; 0x43f0 <__ftoa_engine+0xb8>
    43e6:	f8 0e       	add	r15, r24
    43e8:	49 1f       	adc	r20, r25
    43ea:	56 1f       	adc	r21, r22
    43ec:	c7 1f       	adc	r28, r23
    43ee:	d1 1d       	adc	r29, r1
    43f0:	88 0f       	add	r24, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	66 1f       	adc	r22, r22
    43f6:	77 1f       	adc	r23, r23
    43f8:	06 94       	lsr	r0
    43fa:	a1 f7       	brne	.-24     	; 0x43e4 <__ftoa_engine+0xac>
    43fc:	05 90       	lpm	r0, Z+
    43fe:	07 94       	ror	r0
    4400:	20 f4       	brcc	.+8      	; 0x440a <__ftoa_engine+0xd2>
    4402:	49 0f       	add	r20, r25
    4404:	56 1f       	adc	r21, r22
    4406:	c7 1f       	adc	r28, r23
    4408:	d8 1f       	adc	r29, r24
    440a:	99 0f       	add	r25, r25
    440c:	66 1f       	adc	r22, r22
    440e:	77 1f       	adc	r23, r23
    4410:	88 1f       	adc	r24, r24
    4412:	06 94       	lsr	r0
    4414:	a9 f7       	brne	.-22     	; 0x4400 <__ftoa_engine+0xc8>
    4416:	84 91       	lpm	r24, Z
    4418:	10 95       	com	r17
    441a:	17 70       	andi	r17, 0x07	; 7
    441c:	41 f0       	breq	.+16     	; 0x442e <__ftoa_engine+0xf6>
    441e:	d6 95       	lsr	r29
    4420:	c7 95       	ror	r28
    4422:	57 95       	ror	r21
    4424:	47 95       	ror	r20
    4426:	f7 94       	ror	r15
    4428:	e7 94       	ror	r14
    442a:	1a 95       	dec	r17
    442c:	c1 f7       	brne	.-16     	; 0x441e <__ftoa_engine+0xe6>
    442e:	ea e5       	ldi	r30, 0x5A	; 90
    4430:	f1 e0       	ldi	r31, 0x01	; 1
    4432:	68 94       	set
    4434:	15 90       	lpm	r1, Z+
    4436:	15 91       	lpm	r17, Z+
    4438:	35 91       	lpm	r19, Z+
    443a:	65 91       	lpm	r22, Z+
    443c:	95 91       	lpm	r25, Z+
    443e:	05 90       	lpm	r0, Z+
    4440:	7f e2       	ldi	r23, 0x2F	; 47
    4442:	73 95       	inc	r23
    4444:	e1 18       	sub	r14, r1
    4446:	f1 0a       	sbc	r15, r17
    4448:	43 0b       	sbc	r20, r19
    444a:	56 0b       	sbc	r21, r22
    444c:	c9 0b       	sbc	r28, r25
    444e:	d0 09       	sbc	r29, r0
    4450:	c0 f7       	brcc	.-16     	; 0x4442 <__ftoa_engine+0x10a>
    4452:	e1 0c       	add	r14, r1
    4454:	f1 1e       	adc	r15, r17
    4456:	43 1f       	adc	r20, r19
    4458:	56 1f       	adc	r21, r22
    445a:	c9 1f       	adc	r28, r25
    445c:	d0 1d       	adc	r29, r0
    445e:	7e f4       	brtc	.+30     	; 0x447e <__ftoa_engine+0x146>
    4460:	70 33       	cpi	r23, 0x30	; 48
    4462:	11 f4       	brne	.+4      	; 0x4468 <__ftoa_engine+0x130>
    4464:	8a 95       	dec	r24
    4466:	e6 cf       	rjmp	.-52     	; 0x4434 <__ftoa_engine+0xfc>
    4468:	e8 94       	clt
    446a:	01 50       	subi	r16, 0x01	; 1
    446c:	30 f0       	brcs	.+12     	; 0x447a <__ftoa_engine+0x142>
    446e:	08 0f       	add	r16, r24
    4470:	0a f4       	brpl	.+2      	; 0x4474 <__ftoa_engine+0x13c>
    4472:	00 27       	eor	r16, r16
    4474:	02 17       	cp	r16, r18
    4476:	08 f4       	brcc	.+2      	; 0x447a <__ftoa_engine+0x142>
    4478:	20 2f       	mov	r18, r16
    447a:	23 95       	inc	r18
    447c:	02 2f       	mov	r16, r18
    447e:	7a 33       	cpi	r23, 0x3A	; 58
    4480:	28 f0       	brcs	.+10     	; 0x448c <__ftoa_engine+0x154>
    4482:	79 e3       	ldi	r23, 0x39	; 57
    4484:	7d 93       	st	X+, r23
    4486:	2a 95       	dec	r18
    4488:	e9 f7       	brne	.-6      	; 0x4484 <__ftoa_engine+0x14c>
    448a:	10 c0       	rjmp	.+32     	; 0x44ac <__ftoa_engine+0x174>
    448c:	7d 93       	st	X+, r23
    448e:	2a 95       	dec	r18
    4490:	89 f6       	brne	.-94     	; 0x4434 <__ftoa_engine+0xfc>
    4492:	06 94       	lsr	r0
    4494:	97 95       	ror	r25
    4496:	67 95       	ror	r22
    4498:	37 95       	ror	r19
    449a:	17 95       	ror	r17
    449c:	17 94       	ror	r1
    449e:	e1 18       	sub	r14, r1
    44a0:	f1 0a       	sbc	r15, r17
    44a2:	43 0b       	sbc	r20, r19
    44a4:	56 0b       	sbc	r21, r22
    44a6:	c9 0b       	sbc	r28, r25
    44a8:	d0 09       	sbc	r29, r0
    44aa:	98 f0       	brcs	.+38     	; 0x44d2 <__ftoa_engine+0x19a>
    44ac:	23 95       	inc	r18
    44ae:	7e 91       	ld	r23, -X
    44b0:	73 95       	inc	r23
    44b2:	7a 33       	cpi	r23, 0x3A	; 58
    44b4:	08 f0       	brcs	.+2      	; 0x44b8 <__ftoa_engine+0x180>
    44b6:	70 e3       	ldi	r23, 0x30	; 48
    44b8:	7c 93       	st	X, r23
    44ba:	20 13       	cpse	r18, r16
    44bc:	b8 f7       	brcc	.-18     	; 0x44ac <__ftoa_engine+0x174>
    44be:	7e 91       	ld	r23, -X
    44c0:	70 61       	ori	r23, 0x10	; 16
    44c2:	7d 93       	st	X+, r23
    44c4:	30 f0       	brcs	.+12     	; 0x44d2 <__ftoa_engine+0x19a>
    44c6:	83 95       	inc	r24
    44c8:	71 e3       	ldi	r23, 0x31	; 49
    44ca:	7d 93       	st	X+, r23
    44cc:	70 e3       	ldi	r23, 0x30	; 48
    44ce:	2a 95       	dec	r18
    44d0:	e1 f7       	brne	.-8      	; 0x44ca <__ftoa_engine+0x192>
    44d2:	11 24       	eor	r1, r1
    44d4:	ef 90       	pop	r14
    44d6:	ff 90       	pop	r15
    44d8:	0f 91       	pop	r16
    44da:	1f 91       	pop	r17
    44dc:	cf 91       	pop	r28
    44de:	df 91       	pop	r29
    44e0:	99 27       	eor	r25, r25
    44e2:	87 fd       	sbrc	r24, 7
    44e4:	90 95       	com	r25
    44e6:	08 95       	ret

000044e8 <strnlen_P>:
    44e8:	fc 01       	movw	r30, r24
    44ea:	05 90       	lpm	r0, Z+
    44ec:	61 50       	subi	r22, 0x01	; 1
    44ee:	70 40       	sbci	r23, 0x00	; 0
    44f0:	01 10       	cpse	r0, r1
    44f2:	d8 f7       	brcc	.-10     	; 0x44ea <strnlen_P+0x2>
    44f4:	80 95       	com	r24
    44f6:	90 95       	com	r25
    44f8:	8e 0f       	add	r24, r30
    44fa:	9f 1f       	adc	r25, r31
    44fc:	08 95       	ret

000044fe <strcat>:
    44fe:	fb 01       	movw	r30, r22
    4500:	dc 01       	movw	r26, r24
    4502:	0d 90       	ld	r0, X+
    4504:	00 20       	and	r0, r0
    4506:	e9 f7       	brne	.-6      	; 0x4502 <strcat+0x4>
    4508:	11 97       	sbiw	r26, 0x01	; 1
    450a:	01 90       	ld	r0, Z+
    450c:	0d 92       	st	X+, r0
    450e:	00 20       	and	r0, r0
    4510:	e1 f7       	brne	.-8      	; 0x450a <strcat+0xc>
    4512:	08 95       	ret

00004514 <strcpy>:
    4514:	fb 01       	movw	r30, r22
    4516:	dc 01       	movw	r26, r24
    4518:	01 90       	ld	r0, Z+
    451a:	0d 92       	st	X+, r0
    451c:	00 20       	and	r0, r0
    451e:	e1 f7       	brne	.-8      	; 0x4518 <strcpy+0x4>
    4520:	08 95       	ret

00004522 <strnlen>:
    4522:	fc 01       	movw	r30, r24
    4524:	61 50       	subi	r22, 0x01	; 1
    4526:	70 40       	sbci	r23, 0x00	; 0
    4528:	01 90       	ld	r0, Z+
    452a:	01 10       	cpse	r0, r1
    452c:	d8 f7       	brcc	.-10     	; 0x4524 <strnlen+0x2>
    452e:	80 95       	com	r24
    4530:	90 95       	com	r25
    4532:	8e 0f       	add	r24, r30
    4534:	9f 1f       	adc	r25, r31
    4536:	08 95       	ret

00004538 <__mulsi_const_10>:
    4538:	59 2f       	mov	r21, r25
    453a:	48 2f       	mov	r20, r24
    453c:	37 2f       	mov	r19, r23
    453e:	26 2f       	mov	r18, r22
    4540:	66 0f       	add	r22, r22
    4542:	77 1f       	adc	r23, r23
    4544:	88 1f       	adc	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	66 0f       	add	r22, r22
    454a:	77 1f       	adc	r23, r23
    454c:	88 1f       	adc	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	62 0f       	add	r22, r18
    4552:	73 1f       	adc	r23, r19
    4554:	84 1f       	adc	r24, r20
    4556:	95 1f       	adc	r25, r21
    4558:	66 0f       	add	r22, r22
    455a:	77 1f       	adc	r23, r23
    455c:	88 1f       	adc	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	08 95       	ret

00004562 <fputc>:
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
    456a:	fb 01       	movw	r30, r22
    456c:	23 81       	ldd	r18, Z+3	; 0x03
    456e:	21 fd       	sbrc	r18, 1
    4570:	03 c0       	rjmp	.+6      	; 0x4578 <fputc+0x16>
    4572:	8f ef       	ldi	r24, 0xFF	; 255
    4574:	9f ef       	ldi	r25, 0xFF	; 255
    4576:	2c c0       	rjmp	.+88     	; 0x45d0 <fputc+0x6e>
    4578:	22 ff       	sbrs	r18, 2
    457a:	16 c0       	rjmp	.+44     	; 0x45a8 <fputc+0x46>
    457c:	46 81       	ldd	r20, Z+6	; 0x06
    457e:	57 81       	ldd	r21, Z+7	; 0x07
    4580:	24 81       	ldd	r18, Z+4	; 0x04
    4582:	35 81       	ldd	r19, Z+5	; 0x05
    4584:	42 17       	cp	r20, r18
    4586:	53 07       	cpc	r21, r19
    4588:	44 f4       	brge	.+16     	; 0x459a <fputc+0x38>
    458a:	a0 81       	ld	r26, Z
    458c:	b1 81       	ldd	r27, Z+1	; 0x01
    458e:	9d 01       	movw	r18, r26
    4590:	2f 5f       	subi	r18, 0xFF	; 255
    4592:	3f 4f       	sbci	r19, 0xFF	; 255
    4594:	20 83       	st	Z, r18
    4596:	31 83       	std	Z+1, r19	; 0x01
    4598:	8c 93       	st	X, r24
    459a:	26 81       	ldd	r18, Z+6	; 0x06
    459c:	37 81       	ldd	r19, Z+7	; 0x07
    459e:	2f 5f       	subi	r18, 0xFF	; 255
    45a0:	3f 4f       	sbci	r19, 0xFF	; 255
    45a2:	26 83       	std	Z+6, r18	; 0x06
    45a4:	37 83       	std	Z+7, r19	; 0x07
    45a6:	14 c0       	rjmp	.+40     	; 0x45d0 <fputc+0x6e>
    45a8:	8b 01       	movw	r16, r22
    45aa:	ec 01       	movw	r28, r24
    45ac:	fb 01       	movw	r30, r22
    45ae:	00 84       	ldd	r0, Z+8	; 0x08
    45b0:	f1 85       	ldd	r31, Z+9	; 0x09
    45b2:	e0 2d       	mov	r30, r0
    45b4:	09 95       	icall
    45b6:	89 2b       	or	r24, r25
    45b8:	e1 f6       	brne	.-72     	; 0x4572 <fputc+0x10>
    45ba:	d8 01       	movw	r26, r16
    45bc:	16 96       	adiw	r26, 0x06	; 6
    45be:	8d 91       	ld	r24, X+
    45c0:	9c 91       	ld	r25, X
    45c2:	17 97       	sbiw	r26, 0x07	; 7
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	16 96       	adiw	r26, 0x06	; 6
    45c8:	8d 93       	st	X+, r24
    45ca:	9c 93       	st	X, r25
    45cc:	17 97       	sbiw	r26, 0x07	; 7
    45ce:	ce 01       	movw	r24, r28
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	1f 91       	pop	r17
    45d6:	0f 91       	pop	r16
    45d8:	08 95       	ret

000045da <sprintf>:
    45da:	ae e0       	ldi	r26, 0x0E	; 14
    45dc:	b0 e0       	ldi	r27, 0x00	; 0
    45de:	e3 ef       	ldi	r30, 0xF3	; 243
    45e0:	f2 e2       	ldi	r31, 0x22	; 34
    45e2:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__prologue_saves__+0x1c>
    45e6:	0d 89       	ldd	r16, Y+21	; 0x15
    45e8:	1e 89       	ldd	r17, Y+22	; 0x16
    45ea:	86 e0       	ldi	r24, 0x06	; 6
    45ec:	8c 83       	std	Y+4, r24	; 0x04
    45ee:	09 83       	std	Y+1, r16	; 0x01
    45f0:	1a 83       	std	Y+2, r17	; 0x02
    45f2:	8f ef       	ldi	r24, 0xFF	; 255
    45f4:	9f e7       	ldi	r25, 0x7F	; 127
    45f6:	8d 83       	std	Y+5, r24	; 0x05
    45f8:	9e 83       	std	Y+6, r25	; 0x06
    45fa:	ae 01       	movw	r20, r28
    45fc:	47 5e       	subi	r20, 0xE7	; 231
    45fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4600:	6f 89       	ldd	r22, Y+23	; 0x17
    4602:	78 8d       	ldd	r23, Y+24	; 0x18
    4604:	ce 01       	movw	r24, r28
    4606:	01 96       	adiw	r24, 0x01	; 1
    4608:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <vfprintf>
    460c:	ef 81       	ldd	r30, Y+7	; 0x07
    460e:	f8 85       	ldd	r31, Y+8	; 0x08
    4610:	e0 0f       	add	r30, r16
    4612:	f1 1f       	adc	r31, r17
    4614:	10 82       	st	Z, r1
    4616:	2e 96       	adiw	r28, 0x0e	; 14
    4618:	e4 e0       	ldi	r30, 0x04	; 4
    461a:	0c 94 26 21 	jmp	0x424c	; 0x424c <__epilogue_restores__+0x1c>

0000461e <__ultoa_invert>:
    461e:	fa 01       	movw	r30, r20
    4620:	aa 27       	eor	r26, r26
    4622:	28 30       	cpi	r18, 0x08	; 8
    4624:	51 f1       	breq	.+84     	; 0x467a <__ultoa_invert+0x5c>
    4626:	20 31       	cpi	r18, 0x10	; 16
    4628:	81 f1       	breq	.+96     	; 0x468a <__ultoa_invert+0x6c>
    462a:	e8 94       	clt
    462c:	6f 93       	push	r22
    462e:	6e 7f       	andi	r22, 0xFE	; 254
    4630:	6e 5f       	subi	r22, 0xFE	; 254
    4632:	7f 4f       	sbci	r23, 0xFF	; 255
    4634:	8f 4f       	sbci	r24, 0xFF	; 255
    4636:	9f 4f       	sbci	r25, 0xFF	; 255
    4638:	af 4f       	sbci	r26, 0xFF	; 255
    463a:	b1 e0       	ldi	r27, 0x01	; 1
    463c:	3e d0       	rcall	.+124    	; 0x46ba <__ultoa_invert+0x9c>
    463e:	b4 e0       	ldi	r27, 0x04	; 4
    4640:	3c d0       	rcall	.+120    	; 0x46ba <__ultoa_invert+0x9c>
    4642:	67 0f       	add	r22, r23
    4644:	78 1f       	adc	r23, r24
    4646:	89 1f       	adc	r24, r25
    4648:	9a 1f       	adc	r25, r26
    464a:	a1 1d       	adc	r26, r1
    464c:	68 0f       	add	r22, r24
    464e:	79 1f       	adc	r23, r25
    4650:	8a 1f       	adc	r24, r26
    4652:	91 1d       	adc	r25, r1
    4654:	a1 1d       	adc	r26, r1
    4656:	6a 0f       	add	r22, r26
    4658:	71 1d       	adc	r23, r1
    465a:	81 1d       	adc	r24, r1
    465c:	91 1d       	adc	r25, r1
    465e:	a1 1d       	adc	r26, r1
    4660:	20 d0       	rcall	.+64     	; 0x46a2 <__ultoa_invert+0x84>
    4662:	09 f4       	brne	.+2      	; 0x4666 <__ultoa_invert+0x48>
    4664:	68 94       	set
    4666:	3f 91       	pop	r19
    4668:	2a e0       	ldi	r18, 0x0A	; 10
    466a:	26 9f       	mul	r18, r22
    466c:	11 24       	eor	r1, r1
    466e:	30 19       	sub	r19, r0
    4670:	30 5d       	subi	r19, 0xD0	; 208
    4672:	31 93       	st	Z+, r19
    4674:	de f6       	brtc	.-74     	; 0x462c <__ultoa_invert+0xe>
    4676:	cf 01       	movw	r24, r30
    4678:	08 95       	ret
    467a:	46 2f       	mov	r20, r22
    467c:	47 70       	andi	r20, 0x07	; 7
    467e:	40 5d       	subi	r20, 0xD0	; 208
    4680:	41 93       	st	Z+, r20
    4682:	b3 e0       	ldi	r27, 0x03	; 3
    4684:	0f d0       	rcall	.+30     	; 0x46a4 <__ultoa_invert+0x86>
    4686:	c9 f7       	brne	.-14     	; 0x467a <__ultoa_invert+0x5c>
    4688:	f6 cf       	rjmp	.-20     	; 0x4676 <__ultoa_invert+0x58>
    468a:	46 2f       	mov	r20, r22
    468c:	4f 70       	andi	r20, 0x0F	; 15
    468e:	40 5d       	subi	r20, 0xD0	; 208
    4690:	4a 33       	cpi	r20, 0x3A	; 58
    4692:	18 f0       	brcs	.+6      	; 0x469a <__ultoa_invert+0x7c>
    4694:	49 5d       	subi	r20, 0xD9	; 217
    4696:	31 fd       	sbrc	r19, 1
    4698:	40 52       	subi	r20, 0x20	; 32
    469a:	41 93       	st	Z+, r20
    469c:	02 d0       	rcall	.+4      	; 0x46a2 <__ultoa_invert+0x84>
    469e:	a9 f7       	brne	.-22     	; 0x468a <__ultoa_invert+0x6c>
    46a0:	ea cf       	rjmp	.-44     	; 0x4676 <__ultoa_invert+0x58>
    46a2:	b4 e0       	ldi	r27, 0x04	; 4
    46a4:	a6 95       	lsr	r26
    46a6:	97 95       	ror	r25
    46a8:	87 95       	ror	r24
    46aa:	77 95       	ror	r23
    46ac:	67 95       	ror	r22
    46ae:	ba 95       	dec	r27
    46b0:	c9 f7       	brne	.-14     	; 0x46a4 <__ultoa_invert+0x86>
    46b2:	00 97       	sbiw	r24, 0x00	; 0
    46b4:	61 05       	cpc	r22, r1
    46b6:	71 05       	cpc	r23, r1
    46b8:	08 95       	ret
    46ba:	9b 01       	movw	r18, r22
    46bc:	ac 01       	movw	r20, r24
    46be:	0a 2e       	mov	r0, r26
    46c0:	06 94       	lsr	r0
    46c2:	57 95       	ror	r21
    46c4:	47 95       	ror	r20
    46c6:	37 95       	ror	r19
    46c8:	27 95       	ror	r18
    46ca:	ba 95       	dec	r27
    46cc:	c9 f7       	brne	.-14     	; 0x46c0 <__ultoa_invert+0xa2>
    46ce:	62 0f       	add	r22, r18
    46d0:	73 1f       	adc	r23, r19
    46d2:	84 1f       	adc	r24, r20
    46d4:	95 1f       	adc	r25, r21
    46d6:	a0 1d       	adc	r26, r0
    46d8:	08 95       	ret

000046da <eeprom_read_block>:
    46da:	60 50       	subi	r22, 0x00	; 0
    46dc:	7c 4e       	sbci	r23, 0xEC	; 236
    46de:	0c 94 a8 23 	jmp	0x4750	; 0x4750 <memcpy>

000046e2 <eeprom_update_block>:
    46e2:	dc 01       	movw	r26, r24
    46e4:	a4 0f       	add	r26, r20
    46e6:	b5 1f       	adc	r27, r21
    46e8:	41 50       	subi	r20, 0x01	; 1
    46ea:	50 40       	sbci	r21, 0x00	; 0
    46ec:	48 f0       	brcs	.+18     	; 0x4700 <eeprom_update_block+0x1e>
    46ee:	cb 01       	movw	r24, r22
    46f0:	84 0f       	add	r24, r20
    46f2:	95 1f       	adc	r25, r21
    46f4:	2e 91       	ld	r18, -X
    46f6:	0e 94 82 23 	call	0x4704	; 0x4704 <eeprom_update_r18>
    46fa:	41 50       	subi	r20, 0x01	; 1
    46fc:	50 40       	sbci	r21, 0x00	; 0
    46fe:	d0 f7       	brcc	.-12     	; 0x46f4 <eeprom_update_block+0x12>
    4700:	08 95       	ret

00004702 <eeprom_update_byte>:
    4702:	26 2f       	mov	r18, r22

00004704 <eeprom_update_r18>:
    4704:	0e 94 a4 23 	call	0x4748	; 0x4748 <eeprom_mapen>
    4708:	00 80       	ld	r0, Z
    470a:	02 16       	cp	r0, r18
    470c:	19 f0       	breq	.+6      	; 0x4714 <eeprom_update_r18+0x10>
    470e:	0e 94 8d 23 	call	0x471a	; 0x471a <eeprom_write_r18>
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	08 95       	ret

00004718 <eeprom_write_byte>:
    4718:	26 2f       	mov	r18, r22

0000471a <eeprom_write_r18>:
    471a:	af 93       	push	r26
    471c:	bf 93       	push	r27
    471e:	e0 e0       	ldi	r30, 0x00	; 0
    4720:	f0 e1       	ldi	r31, 0x10	; 16
    4722:	32 81       	ldd	r19, Z+2	; 0x02
    4724:	31 fd       	sbrc	r19, 1
    4726:	fd cf       	rjmp	.-6      	; 0x4722 <eeprom_write_r18+0x8>
    4728:	dc 01       	movw	r26, r24
    472a:	a0 50       	subi	r26, 0x00	; 0
    472c:	bc 4e       	sbci	r27, 0xEC	; 236
    472e:	2c 93       	st	X, r18
    4730:	2d e9       	ldi	r18, 0x9D	; 157
    4732:	24 bf       	out	0x34, r18	; 52
    4734:	23 e0       	ldi	r18, 0x03	; 3
    4736:	20 83       	st	Z, r18
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	bf 91       	pop	r27
    473c:	af 91       	pop	r26
    473e:	08 95       	ret

00004740 <eeprom_read_byte>:
    4740:	03 d0       	rcall	.+6      	; 0x4748 <eeprom_mapen>
    4742:	80 81       	ld	r24, Z
    4744:	99 27       	eor	r25, r25
    4746:	08 95       	ret

00004748 <eeprom_mapen>:
    4748:	fc 01       	movw	r30, r24
    474a:	e0 50       	subi	r30, 0x00	; 0
    474c:	fc 4e       	sbci	r31, 0xEC	; 236
    474e:	08 95       	ret

00004750 <memcpy>:
    4750:	fb 01       	movw	r30, r22
    4752:	dc 01       	movw	r26, r24
    4754:	02 c0       	rjmp	.+4      	; 0x475a <memcpy+0xa>
    4756:	01 90       	ld	r0, Z+
    4758:	0d 92       	st	X+, r0
    475a:	41 50       	subi	r20, 0x01	; 1
    475c:	50 40       	sbci	r21, 0x00	; 0
    475e:	d8 f7       	brcc	.-10     	; 0x4756 <memcpy+0x6>
    4760:	08 95       	ret

00004762 <_exit>:
    4762:	f8 94       	cli

00004764 <__stop_program>:
    4764:	ff cf       	rjmp	.-2      	; 0x4764 <__stop_program>
