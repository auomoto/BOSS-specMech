
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003d47  00003dfb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b2e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000219  00007b2e  00003b2e  00003be2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000826  00802802  00802802  00003dfd  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003dfd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e5c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005a8  00000000  00000000  00003ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000945f  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004331  00000000  00000000  0000d8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c0e  00000000  00000000  00011bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cb4  00000000  00000000  000157e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000020de  00000000  00000000  0001649c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000036bf  00000000  00000000  0001857a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  0001bc39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_3>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__vector_17>
      48:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__vector_18>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_20>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      68:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_26>
      6c:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__vector_27>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      84:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_37>
      98:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__vector_38>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

000000a0 <__trampolines_end>:
      a0:	6e 61       	ori	r22, 0x1E	; 30
      a2:	6e 00       	.word	0x006e	; ????

000000a4 <__c.2332>:
      a4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      b4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      c4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      d4:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      e4:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      f4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     104:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     114:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     124:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     134:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     144:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     154:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     164:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     174:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     184:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     194:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e3       	ldi	r29, 0x3F	; 63
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	18 e2       	ldi	r17, 0x28	; 40
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b8 e2       	ldi	r27, 0x28	; 40
     1b4:	e7 e4       	ldi	r30, 0x47	; 71
     1b6:	fd e3       	ldi	r31, 0x3D	; 61
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a2 30       	cpi	r26, 0x02	; 2
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	20 e3       	ldi	r18, 0x30	; 48
     1c6:	a2 e0       	ldi	r26, 0x02	; 2
     1c8:	b8 e2       	ldi	r27, 0x28	; 40
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a8 32       	cpi	r26, 0x28	; 40
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 a2 07 	call	0xf44	; 0xf44 <main>
     1d8:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	c9 f0       	breq	.+50     	; 0x220 <read_AD590+0x40>
     1ee:	18 f0       	brcs	.+6      	; 0x1f6 <read_AD590+0x16>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	61 f0       	breq	.+24     	; 0x20c <read_AD590+0x2c>
     1f4:	10 c0       	rjmp	.+32     	; 0x216 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f3 e3       	ldi	r31, 0x33	; 51
     1fa:	cf 2e       	mov	r12, r31
     1fc:	dc 2c       	mov	r13, r12
     1fe:	f3 ef       	ldi	r31, 0xF3	; 243
     200:	ef 2e       	mov	r14, r31
     202:	f0 e4       	ldi	r31, 0x40	; 64
     204:	ff 2e       	mov	r15, r31
     206:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     208:	c1 e0       	ldi	r28, 0x01	; 1
     20a:	0e c0       	rjmp	.+28     	; 0x228 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     20c:	c1 2c       	mov	r12, r1
     20e:	d1 2c       	mov	r13, r1
     210:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     212:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     216:	c1 2c       	mov	r12, r1
     218:	d1 2c       	mov	r13, r1
     21a:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     21c:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     21e:	04 c0       	rjmp	.+8      	; 0x228 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     220:	c1 2c       	mov	r12, r1
     222:	d1 2c       	mov	r13, r1
     224:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     226:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	66 e0       	ldi	r22, 0x06	; 6
     22c:	87 e2       	ldi	r24, 0x27	; 39
     22e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     232:	4c 2f       	mov	r20, r28
     234:	40 95       	com	r20
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	87 e2       	ldi	r24, 0x27	; 39
     23a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     23e:	4c 2f       	mov	r20, r28
     240:	6a e0       	ldi	r22, 0x0A	; 10
     242:	87 e2       	ldi	r24, 0x27	; 39
     244:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	86 e1       	ldi	r24, 0x16	; 22
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <read_AD590+0x6a>
     24e:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     250:	20 e8       	ldi	r18, 0x80	; 128
     252:	40 e7       	ldi	r20, 0x70	; 112
     254:	68 e0       	ldi	r22, 0x08	; 8
     256:	88 e4       	ldi	r24, 0x48	; 72
     258:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	4a e7       	ldi	r20, 0x7A	; 122
     262:	54 e4       	ldi	r21, 0x44	; 68
     264:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     268:	23 e3       	ldi	r18, 0x33	; 51
     26a:	33 e9       	ldi	r19, 0x93	; 147
     26c:	48 e8       	ldi	r20, 0x88	; 136
     26e:	53 e4       	ldi	r21, 0x43	; 67
     270:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
	return(temperature);

}
     280:	cf 91       	pop	r28
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	08 95       	ret

0000028c <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	d8 2f       	mov	r29, r24
     29e:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     2a0:	46 2b       	or	r20, r22
     2a2:	c4 2f       	mov	r28, r20
     2a4:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     2a6:	12 2f       	mov	r17, r18
     2a8:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     2b0:	08 2f       	mov	r16, r24
     2b2:	88 23       	and	r24, r24
     2b4:	69 f0       	breq	.+26     	; 0x2d0 <read_ADS1115+0x44>
		stop_TWI();
     2b6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     2ba:	60 2f       	mov	r22, r16
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     2c6:	56 2f       	mov	r21, r22
     2c8:	47 2f       	mov	r20, r23
     2ca:	38 2f       	mov	r19, r24
     2cc:	29 2f       	mov	r18, r25
     2ce:	d0 c0       	rjmp	.+416    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     2d6:	08 2f       	mov	r16, r24
     2d8:	88 23       	and	r24, r24
     2da:	69 f0       	breq	.+26     	; 0x2f6 <read_ADS1115+0x6a>
		stop_TWI();
     2dc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     2e0:	60 2f       	mov	r22, r16
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     2ec:	56 2f       	mov	r21, r22
     2ee:	47 2f       	mov	r20, r23
     2f0:	38 2f       	mov	r19, r24
     2f2:	29 2f       	mov	r18, r25
     2f4:	bd c0       	rjmp	.+378    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     2f6:	8c 2f       	mov	r24, r28
     2f8:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     2fc:	c8 2f       	mov	r28, r24
     2fe:	88 23       	and	r24, r24
     300:	69 f0       	breq	.+26     	; 0x31c <read_ADS1115+0x90>
		stop_TWI();
     302:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     306:	6c 2f       	mov	r22, r28
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     312:	56 2f       	mov	r21, r22
     314:	47 2f       	mov	r20, r23
     316:	38 2f       	mov	r19, r24
     318:	29 2f       	mov	r18, r25
     31a:	aa c0       	rjmp	.+340    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     31c:	81 2f       	mov	r24, r17
     31e:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     322:	c8 2f       	mov	r28, r24
     324:	88 23       	and	r24, r24
     326:	69 f0       	breq	.+26     	; 0x342 <read_ADS1115+0xb6>
		stop_TWI();
     328:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     32c:	6c 2f       	mov	r22, r28
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     338:	56 2f       	mov	r21, r22
     33a:	47 2f       	mov	r20, r23
     33c:	38 2f       	mov	r19, r24
     33e:	29 2f       	mov	r18, r25
     340:	97 c0       	rjmp	.+302    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}
	stop_TWI();
     342:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
     346:	8c e1       	ldi	r24, 0x1C	; 28
     348:	8a 95       	dec	r24
     34a:	f1 f7       	brne	.-4      	; 0x348 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     34c:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     34e:	09 c0       	rjmp	.+18     	; 0x362 <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	8d 2f       	mov	r24, r29
     354:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     358:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     35c:	88 23       	and	r24, r24
     35e:	0c f4       	brge	.+2      	; 0x362 <read_ADS1115+0xd6>
			converting = NO;
     360:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     362:	c1 11       	cpse	r28, r1
     364:	f5 cf       	rjmp	.-22     	; 0x350 <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     366:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	8d 2f       	mov	r24, r29
     36e:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	8d 2f       	mov	r24, r29
     37c:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	highbyte = read_TWI();
     380:	0e 94 32 13 	call	0x2664	; 0x2664 <read_TWI>
     384:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     386:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
     38a:	d8 2f       	mov	r29, r24
	stop_TWI();
     38c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	value = highbyte;
     390:	6c 2f       	mov	r22, r28
     392:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     394:	76 2f       	mov	r23, r22
     396:	66 27       	eor	r22, r22
	value |= lowbyte;
     398:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	f8 16       	cp	r15, r24
     39e:	49 f1       	breq	.+82     	; 0x3f2 <read_ADS1115+0x166>
     3a0:	8f 15       	cp	r24, r15
     3a2:	30 f0       	brcs	.+12     	; 0x3b0 <read_ADS1115+0x124>
     3a4:	ff 20       	and	r15, r15
     3a6:	d9 f1       	breq	.+118    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	f8 16       	cp	r15, r24
     3ac:	69 f1       	breq	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ae:	42 c0       	rjmp	.+132    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	f8 16       	cp	r15, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <read_ADS1115+0x12c>
     3b6:	42 c0       	rjmp	.+132    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3b8:	8a e0       	ldi	r24, 0x0A	; 10
     3ba:	f8 16       	cp	r15, r24
     3bc:	21 f0       	breq	.+8      	; 0x3c6 <read_ADS1115+0x13a>
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	f8 12       	cpse	r15, r24
     3c2:	38 c0       	rjmp	.+112    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <read_ADS1115+0x150>
		case PGA0256:
			scale = SCA0256;
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f4 e7       	ldi	r31, 0x74	; 116
     3ca:	cf 2e       	mov	r12, r31
     3cc:	f3 e1       	ldi	r31, 0x13	; 19
     3ce:	df 2e       	mov	r13, r31
     3d0:	f3 e0       	ldi	r31, 0x03	; 3
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f7 e3       	ldi	r31, 0x37	; 55
     3d6:	ff 2e       	mov	r15, r31
     3d8:	f0 2d       	mov	r31, r0
     3da:	3a c0       	rjmp	.+116    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     3dc:	0f 2e       	mov	r0, r31
     3de:	f4 e7       	ldi	r31, 0x74	; 116
     3e0:	cf 2e       	mov	r12, r31
     3e2:	f3 e1       	ldi	r31, 0x13	; 19
     3e4:	df 2e       	mov	r13, r31
     3e6:	f3 e0       	ldi	r31, 0x03	; 3
     3e8:	ef 2e       	mov	r14, r31
     3ea:	f8 e3       	ldi	r31, 0x38	; 56
     3ec:	ff 2e       	mov	r15, r31
     3ee:	f0 2d       	mov	r31, r0
			break;
     3f0:	2f c0       	rjmp	.+94     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA2048:
			scale = SCA2048;
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f2 e1       	ldi	r31, 0x12	; 18
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f3 e1       	ldi	r31, 0x13	; 19
     3fa:	df 2e       	mov	r13, r31
     3fc:	f3 e8       	ldi	r31, 0x83	; 131
     3fe:	ef 2e       	mov	r14, r31
     400:	f8 e3       	ldi	r31, 0x38	; 56
     402:	ff 2e       	mov	r15, r31
     404:	f0 2d       	mov	r31, r0
			break;
     406:	24 c0       	rjmp	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA4096:
			scale = SCA4096;
     408:	0f 2e       	mov	r0, r31
     40a:	f4 e7       	ldi	r31, 0x74	; 116
     40c:	cf 2e       	mov	r12, r31
     40e:	f3 e1       	ldi	r31, 0x13	; 19
     410:	df 2e       	mov	r13, r31
     412:	f3 e0       	ldi	r31, 0x03	; 3
     414:	ef 2e       	mov	r14, r31
     416:	f9 e3       	ldi	r31, 0x39	; 57
     418:	ff 2e       	mov	r15, r31
     41a:	f0 2d       	mov	r31, r0
			break;
     41c:	19 c0       	rjmp	.+50     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case PGA6144:
			scale = SCA6144;
     41e:	0f 2e       	mov	r0, r31
     420:	fe e2       	ldi	r31, 0x2E	; 46
     422:	cf 2e       	mov	r12, r31
     424:	fd e9       	ldi	r31, 0x9D	; 157
     426:	df 2e       	mov	r13, r31
     428:	f4 e4       	ldi	r31, 0x44	; 68
     42a:	ef 2e       	mov	r14, r31
     42c:	f9 e3       	ldi	r31, 0x39	; 57
     42e:	ff 2e       	mov	r15, r31
     430:	f0 2d       	mov	r31, r0
			break;
     432:	0e c0       	rjmp	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		default:
			scale = 0.0;
     434:	c1 2c       	mov	r12, r1
     436:	d1 2c       	mov	r13, r1
     438:	76 01       	movw	r14, r12
			break;
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     43c:	0f 2e       	mov	r0, r31
     43e:	f1 e7       	ldi	r31, 0x71	; 113
     440:	cf 2e       	mov	r12, r31
     442:	f3 e1       	ldi	r31, 0x13	; 19
     444:	df 2e       	mov	r13, r31
     446:	f3 e8       	ldi	r31, 0x83	; 131
     448:	ef 2e       	mov	r14, r31
     44a:	f7 e3       	ldi	r31, 0x37	; 55
     44c:	ff 2e       	mov	r15, r31
     44e:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     450:	07 2e       	mov	r0, r23
     452:	00 0c       	add	r0, r0
     454:	88 0b       	sbc	r24, r24
     456:	99 0b       	sbc	r25, r25
     458:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	c7 01       	movw	r24, r14
     462:	b6 01       	movw	r22, r12
     464:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
	return(voltage);
     468:	56 2f       	mov	r21, r22
     46a:	47 2f       	mov	r20, r23
     46c:	38 2f       	mov	r19, r24
     46e:	29 2f       	mov	r18, r25

}
     470:	65 2f       	mov	r22, r21
     472:	74 2f       	mov	r23, r20
     474:	83 2f       	mov	r24, r19
     476:	92 2f       	mov	r25, r18
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	08 95       	ret

0000048a <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	f4 e0       	ldi	r31, 0x04	; 4
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     492:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     494:	86 83       	std	Z+6, r24	; 0x06
     496:	08 95       	ret

00000498 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	c4 51       	subi	r28, 0x14	; 20
     4a6:	d1 40       	sbci	r29, 0x01	; 1
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     4ac:	2b e0       	ldi	r18, 0x0B	; 11
     4ae:	ee e2       	ldi	r30, 0x2E	; 46
     4b0:	fb e7       	ldi	r31, 0x7B	; 123
     4b2:	de 01       	movw	r26, r28
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	2a 95       	dec	r18
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     4be:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     4c2:	22 ff       	sbrs	r18, 2
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <echo_cmd+0x34>
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <echo_cmd+0x38>
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	3f 93       	push	r19
     4d6:	2f 93       	push	r18
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	8e 01       	movw	r16, r28
     4e2:	04 5f       	subi	r16, 0xF4	; 244
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	1f 93       	push	r17
     4e8:	0f 93       	push	r16
     4ea:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
	checksum_NMEA(strbuf);
     4ee:	c8 01       	movw	r24, r16
     4f0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     4f4:	f8 01       	movw	r30, r16
     4f6:	01 90       	ld	r0, Z+
     4f8:	00 20       	and	r0, r0
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <echo_cmd+0x5e>
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	af 01       	movw	r20, r30
     500:	40 1b       	sub	r20, r16
     502:	51 0b       	sbc	r21, r17
     504:	b8 01       	movw	r22, r16
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
send_USART(1, (uint8_t*) strbuf, strlen(strbuf)); // testing the port
     50c:	f8 01       	movw	r30, r16
     50e:	01 90       	ld	r0, Z+
     510:	00 20       	and	r0, r0
     512:	e9 f7       	brne	.-6      	; 0x50e <echo_cmd+0x76>
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	af 01       	movw	r20, r30
     518:	40 1b       	sub	r20, r16
     51a:	51 0b       	sbc	r21, r17
     51c:	b8 01       	movw	r22, r16
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
}
     524:	cd bf       	out	0x3d, r28	; 61
     526:	de bf       	out	0x3e, r29	; 62
     528:	cc 5e       	subi	r28, 0xEC	; 236
     52a:	de 4f       	sbci	r29, 0xFE	; 254
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	de bf       	out	0x3e, r29	; 62
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     53a:	9f e9       	ldi	r25, 0x9F	; 159
     53c:	98 0f       	add	r25, r24
     53e:	9a 31       	cpi	r25, 0x1A	; 26
     540:	28 f0       	brcs	.+10     	; 0x54c <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     542:	81 54       	subi	r24, 0x41	; 65
     544:	8a 31       	cpi	r24, 0x1A	; 26
     546:	20 f4       	brcc	.+8      	; 0x550 <isaletter+0x16>
		return(1);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     550:	80 e0       	ldi	r24, 0x00	; 0

}
     552:	08 95       	ret

00000554 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     560:	e6 2e       	mov	r14, r22
     562:	f1 2c       	mov	r15, r1
     564:	84 e3       	ldi	r24, 0x34	; 52
     566:	8e 9d       	mul	r24, r14
     568:	f0 01       	movw	r30, r0
     56a:	8f 9d       	mul	r24, r15
     56c:	f0 0d       	add	r31, r0
     56e:	11 24       	eor	r1, r1
     570:	ed 5f       	subi	r30, 0xFD	; 253
     572:	f7 4d       	sbci	r31, 0xD7	; 215
     574:	8f e3       	ldi	r24, 0x3F	; 63
     576:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     578:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     57a:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     57c:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     57e:	04 c0       	rjmp	.+8      	; 0x588 <parse_cmd+0x34>
		if (*ptr == '\0') {
     580:	11 23       	and	r17, r17
     582:	09 f4       	brne	.+2      	; 0x586 <parse_cmd+0x32>
     584:	75 c0       	rjmp	.+234    	; 0x670 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     586:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     588:	18 81       	ld	r17, Y
     58a:	81 2f       	mov	r24, r17
     58c:	0e 94 9d 02 	call	0x53a	; 0x53a <isaletter>
     590:	88 23       	and	r24, r24
     592:	b1 f3       	breq	.-20     	; 0x580 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     594:	21 96       	adiw	r28, 0x01	; 1
     596:	84 e3       	ldi	r24, 0x34	; 52
     598:	8e 9d       	mul	r24, r14
     59a:	f0 01       	movw	r30, r0
     59c:	8f 9d       	mul	r24, r15
     59e:	f0 0d       	add	r31, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	ed 5f       	subi	r30, 0xFD	; 253
     5a4:	f7 4d       	sbci	r31, 0xD7	; 215
     5a6:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5aa:	11 23       	and	r17, r17
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <parse_cmd+0x5c>
     5ae:	60 c0       	rjmp	.+192    	; 0x670 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5b0:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     5b2:	18 81       	ld	r17, Y
     5b4:	81 2f       	mov	r24, r17
     5b6:	0e 94 9d 02 	call	0x53a	; 0x53a <isaletter>
     5ba:	88 23       	and	r24, r24
     5bc:	b1 f3       	breq	.-20     	; 0x5aa <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     5be:	21 96       	adiw	r28, 0x01	; 1
     5c0:	84 e3       	ldi	r24, 0x34	; 52
     5c2:	8e 9d       	mul	r24, r14
     5c4:	f0 01       	movw	r30, r0
     5c6:	8f 9d       	mul	r24, r15
     5c8:	f0 0d       	add	r31, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	ed 5f       	subi	r30, 0xFD	; 253
     5ce:	f7 4d       	sbci	r31, 0xD7	; 215
     5d0:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	2a c0       	rjmp	.+84     	; 0x62a <parse_cmd+0xd6>
		if (*ptr == '\0') {
     5d6:	98 81       	ld	r25, Y
     5d8:	91 11       	cpse	r25, r1
     5da:	0c c0       	rjmp	.+24     	; 0x5f4 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     5dc:	94 e3       	ldi	r25, 0x34	; 52
     5de:	9e 9d       	mul	r25, r14
     5e0:	f0 01       	movw	r30, r0
     5e2:	9f 9d       	mul	r25, r15
     5e4:	f0 0d       	add	r31, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	ed 5f       	subi	r30, 0xFD	; 253
     5ea:	f7 4d       	sbci	r31, 0xD7	; 215
     5ec:	e8 0f       	add	r30, r24
     5ee:	f1 1d       	adc	r31, r1
     5f0:	12 82       	std	Z+2, r1	; 0x02
			return;
     5f2:	3e c0       	rjmp	.+124    	; 0x670 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     5f4:	9b 33       	cpi	r25, 0x3B	; 59
     5f6:	61 f4       	brne	.+24     	; 0x610 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     5f8:	94 e3       	ldi	r25, 0x34	; 52
     5fa:	9e 9d       	mul	r25, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	9f 9d       	mul	r25, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	ed 5f       	subi	r30, 0xFD	; 253
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	e8 0f       	add	r30, r24
     60a:	f1 1d       	adc	r31, r1
     60c:	12 82       	std	Z+2, r1	; 0x02
			break;
     60e:	0f c0       	rjmp	.+30     	; 0x62e <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     610:	21 96       	adiw	r28, 0x01	; 1
     612:	24 e3       	ldi	r18, 0x34	; 52
     614:	2e 9d       	mul	r18, r14
     616:	f0 01       	movw	r30, r0
     618:	2f 9d       	mul	r18, r15
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	ed 5f       	subi	r30, 0xFD	; 253
     620:	f7 4d       	sbci	r31, 0xD7	; 215
     622:	e8 0f       	add	r30, r24
     624:	f1 1d       	adc	r31, r1
     626:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	89 32       	cpi	r24, 0x29	; 41
     62c:	a0 f2       	brcs	.-88     	; 0x5d6 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     62e:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	1c c0       	rjmp	.+56     	; 0x66c <parse_cmd+0x118>
		if (*ptr == '\0') {
     634:	98 81       	ld	r25, Y
     636:	91 11       	cpse	r25, r1
     638:	0c c0       	rjmp	.+24     	; 0x652 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     63a:	94 e3       	ldi	r25, 0x34	; 52
     63c:	9e 9d       	mul	r25, r14
     63e:	f0 01       	movw	r30, r0
     640:	9f 9d       	mul	r25, r15
     642:	f0 0d       	add	r31, r0
     644:	11 24       	eor	r1, r1
     646:	ed 5f       	subi	r30, 0xFD	; 253
     648:	f7 4d       	sbci	r31, 0xD7	; 215
     64a:	e8 0f       	add	r30, r24
     64c:	f1 1d       	adc	r31, r1
     64e:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     650:	0f c0       	rjmp	.+30     	; 0x670 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	24 e3       	ldi	r18, 0x34	; 52
     656:	2e 9d       	mul	r18, r14
     658:	f0 01       	movw	r30, r0
     65a:	2f 9d       	mul	r18, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	ed 5f       	subi	r30, 0xFD	; 253
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	e8 0f       	add	r30, r24
     666:	f1 1d       	adc	r31, r1
     668:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	89 30       	cpi	r24, 0x09	; 9
     66e:	10 f3       	brcs	.-60     	; 0x634 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	6d 97       	sbiw	r28, 0x1d	; 29
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     68e:	2e e3       	ldi	r18, 0x3E	; 62
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	29 83       	std	Y+1, r18	; 0x01
     694:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     696:	21 e2       	ldi	r18, 0x21	; 33
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	2b 83       	std	Y+3, r18	; 0x03
     69c:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <send_prompt+0x28>
     6a2:	3f c0       	rjmp	.+126    	; 0x722 <send_prompt+0xa6>
     6a4:	18 f0       	brcs	.+6      	; 0x6ac <send_prompt+0x30>
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	b9 f0       	breq	.+46     	; 0x6d8 <send_prompt+0x5c>
     6aa:	51 c0       	rjmp	.+162    	; 0x74e <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6ac:	8e 01       	movw	r16, r28
     6ae:	0b 5f       	subi	r16, 0xFB	; 251
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	be 01       	movw	r22, r28
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     6be:	f8 01       	movw	r30, r16
     6c0:	01 90       	ld	r0, Z+
     6c2:	00 20       	and	r0, r0
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <send_prompt+0x44>
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	af 01       	movw	r20, r30
     6ca:	40 1b       	sub	r20, r16
     6cc:	51 0b       	sbc	r21, r17
     6ce:	b8 01       	movw	r22, r16
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			break;
     6d6:	50 c0       	rjmp	.+160    	; 0x778 <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     6d8:	8e 01       	movw	r16, r28
     6da:	0b 5f       	subi	r16, 0xFB	; 251
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 b9 09 	call	0x1372	; 0x1372 <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     6e4:	f8 01       	movw	r30, r16
     6e6:	01 90       	ld	r0, Z+
     6e8:	00 20       	and	r0, r0
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <send_prompt+0x6a>
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	af 01       	movw	r20, r30
     6f0:	40 1b       	sub	r20, r16
     6f2:	51 0b       	sbc	r21, r17
     6f4:	b8 01       	movw	r22, r16
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			strcpy(prompt_str, str0);
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	c8 01       	movw	r24, r16
     704:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     708:	f8 01       	movw	r30, r16
     70a:	01 90       	ld	r0, Z+
     70c:	00 20       	and	r0, r0
     70e:	e9 f7       	brne	.-6      	; 0x70a <send_prompt+0x8e>
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	af 01       	movw	r20, r30
     714:	40 1b       	sub	r20, r16
     716:	51 0b       	sbc	r21, r17
     718:	b8 01       	movw	r22, r16
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			break;
     720:	2b c0       	rjmp	.+86     	; 0x778 <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     722:	8e 01       	movw	r16, r28
     724:	0b 5f       	subi	r16, 0xFB	; 251
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	be 01       	movw	r22, r28
     72a:	6d 5f       	subi	r22, 0xFD	; 253
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	c8 01       	movw	r24, r16
     730:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     734:	f8 01       	movw	r30, r16
     736:	01 90       	ld	r0, Z+
     738:	00 20       	and	r0, r0
     73a:	e9 f7       	brne	.-6      	; 0x736 <send_prompt+0xba>
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	af 01       	movw	r20, r30
     740:	40 1b       	sub	r20, r16
     742:	51 0b       	sbc	r21, r17
     744:	b8 01       	movw	r22, r16
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			break;
     74c:	15 c0       	rjmp	.+42     	; 0x778 <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     74e:	8e 01       	movw	r16, r28
     750:	0b 5f       	subi	r16, 0xFB	; 251
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	be 01       	movw	r22, r28
     756:	6d 5f       	subi	r22, 0xFD	; 253
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     760:	f8 01       	movw	r30, r16
     762:	01 90       	ld	r0, Z+
     764:	00 20       	and	r0, r0
     766:	e9 f7       	brne	.-6      	; 0x762 <send_prompt+0xe6>
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	af 01       	movw	r20, r30
     76c:	40 1b       	sub	r20, r16
     76e:	51 0b       	sbc	r21, r17
     770:	b8 01       	movw	r22, r16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			break;

	}

}
     778:	6d 96       	adiw	r28, 0x1d	; 29
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	cf 5f       	subi	r28, 0xFF	; 255
     796:	d1 09       	sbc	r29, r1
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < (BUFSIZE-1); i++) {
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	1a c0       	rjmp	.+52     	; 0x7d4 <commands+0x4c>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     7a0:	04 e1       	ldi	r16, 0x14	; 20
     7a2:	1c e2       	ldi	r17, 0x2C	; 44
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 81       	ld	r24, Z
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	ec 5e       	subi	r30, 0xEC	; 236
     7ae:	f4 4d       	sbci	r31, 0xD4	; 212
     7b0:	30 81       	ld	r19, Z
     7b2:	e1 e0       	ldi	r30, 0x01	; 1
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	ec 0f       	add	r30, r28
     7b8:	fd 1f       	adc	r31, r29
     7ba:	e2 0f       	add	r30, r18
     7bc:	f1 1d       	adc	r31, r1
     7be:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	6f ef       	ldi	r22, 0xFF	; 255
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 83       	st	Z, r24
		if (cmdline[i] == '\0') {
     7ce:	33 23       	and	r19, r19
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <commands+0x50>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < (BUFSIZE-1); i++) {
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	2e 3f       	cpi	r18, 0xFE	; 254
     7d6:	20 f3       	brcs	.-56     	; 0x7a0 <commands+0x18>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
		if (cmdline[i] == '\0') {
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
     7d8:	e1 e0       	ldi	r30, 0x01	; 1
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ec 0f       	add	r30, r28
     7de:	fd 1f       	adc	r31, r29
     7e0:	e2 0f       	add	r30, r18
     7e2:	f1 1d       	adc	r31, r1
     7e4:	10 82       	st	Z, r1
	if (rebootnack) {
     7e6:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     7ea:	88 23       	and	r24, r24
     7ec:	29 f1       	breq	.+74     	; 0x838 <commands+0xb0>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	81 32       	cpi	r24, 0x21	; 33
     7f2:	99 f4       	brne	.+38     	; 0x81a <commands+0x92>
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	91 11       	cpse	r25, r1
     7f8:	10 c0       	rjmp	.+32     	; 0x81a <commands+0x92>
			init_RTC(511);		// 1-sec RTC clock ticks
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (min)
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     80a:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
			rebootnack = 0;
     814:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     818:	6b c0       	rjmp	.+214    	; 0x8f0 <commands+0x168>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     81a:	81 32       	cpi	r24, 0x21	; 33
     81c:	49 f4       	brne	.+18     	; 0x830 <commands+0xa8>
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	88 23       	and	r24, r24
     822:	31 f0       	breq	.+12     	; 0x830 <commands+0xa8>
			send_prompt(EXCLAIMPROMPT);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
			reboot();
     82a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <reboot>
			return;
     82e:	60 c0       	rjmp	.+192    	; 0x8f0 <commands+0x168>
		} else {
			send_prompt(EXCLAIMPROMPT);
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
			return;
     836:	5c c0       	rjmp	.+184    	; 0x8f0 <commands+0x168>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 4c 02 	call	0x498	; 0x498 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	81 11       	cpse	r24, r1
     844:	03 c0       	rjmp	.+6      	; 0x84c <commands+0xc4>
		send_prompt(GREATERPROMPT);
     846:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
		return;
     84a:	52 c0       	rjmp	.+164    	; 0x8f0 <commands+0x168>
	}

	parse_cmd(cmdline, cstack);
     84c:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	0e 94 aa 02 	call	0x554	; 0x554 <parse_cmd>
	verb = pcmd[cstack].cverb;
     858:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     85c:	24 e3       	ldi	r18, 0x34	; 52
     85e:	82 9f       	mul	r24, r18
     860:	f0 01       	movw	r30, r0
     862:	11 24       	eor	r1, r1
     864:	ed 5f       	subi	r30, 0xFD	; 253
     866:	f7 4d       	sbci	r31, 0xD7	; 215
     868:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     86a:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     86c:	9d 36       	cpi	r25, 0x6D	; 109
     86e:	b9 f0       	breq	.+46     	; 0x89e <commands+0x116>
     870:	28 f4       	brcc	.+10     	; 0x87c <commands+0xf4>
     872:	92 35       	cpi	r25, 0x52	; 82
     874:	09 f1       	breq	.+66     	; 0x8b8 <commands+0x130>
     876:	93 36       	cpi	r25, 0x63	; 99
     878:	41 f0       	breq	.+16     	; 0x88a <commands+0x102>
     87a:	2c c0       	rjmp	.+88     	; 0x8d4 <commands+0x14c>
     87c:	92 37       	cpi	r25, 0x72	; 114
     87e:	a1 f0       	breq	.+40     	; 0x8a8 <commands+0x120>
     880:	93 37       	cpi	r25, 0x73	; 115
     882:	b1 f0       	breq	.+44     	; 0x8b0 <commands+0x128>
     884:	9f 36       	cpi	r25, 0x6F	; 111
     886:	31 f5       	brne	.+76     	; 0x8d4 <commands+0x14c>
     888:	05 c0       	rjmp	.+10     	; 0x894 <commands+0x10c>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     88a:	82 2f       	mov	r24, r18
     88c:	0e 94 07 0c 	call	0x180e	; 0x180e <close_PNEU>
     890:	28 2f       	mov	r18, r24
			break;
     892:	21 c0       	rjmp	.+66     	; 0x8d6 <commands+0x14e>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     894:	82 2f       	mov	r24, r18
     896:	0e 94 99 0c 	call	0x1932	; 0x1932 <open_PNEU>
     89a:	28 2f       	mov	r18, r24
			break;
     89c:	1c c0       	rjmp	.+56     	; 0x8d6 <commands+0x14e>

		case 'm':
			get_ROBOVoltage(MOTORAADDR);
     89e:	80 e8       	ldi	r24, 0x80	; 128
     8a0:	0e 94 2d 12 	call	0x245a	; 0x245a <get_ROBOVoltage>
{
uint8_t buffer[20];

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
     8a4:	20 e0       	ldi	r18, 0x00	; 0
			break;

		case 'm':
			get_ROBOVoltage(MOTORAADDR);
//			send_USART(1, buffer, 3);
			break;
     8a6:	17 c0       	rjmp	.+46     	; 0x8d6 <commands+0x14e>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8a8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <report>
     8ac:	28 2f       	mov	r18, r24
			break;
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <commands+0x14e>

		case 's':				// Set
			prompt_flag = set(cstack);
     8b0:	0e 94 de 12 	call	0x25bc	; 0x25bc <set>
     8b4:	28 2f       	mov	r18, r24
			break;
     8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <commands+0x14e>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8be:	8a e6       	ldi	r24, 0x6A	; 106
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	e1 e0       	ldi	r30, 0x01	; 1
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	90 40       	sbci	r25, 0x00	; 0
     8c8:	e0 40       	sbci	r30, 0x00	; 0
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <commands+0x13c>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <commands+0x146>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     8ce:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <reboot>
			return;
     8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <commands+0x168>

		default:
			prompt_flag = ERRORPROMPT;
     8d4:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     8d6:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
     8e6:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     8ea:	82 2f       	mov	r24, r18
     8ec:	0e 94 3e 03 	call	0x67c	; 0x67c <send_prompt>

}
     8f0:	c1 50       	subi	r28, 0x01	; 1
     8f2:	df 4f       	sbci	r29, 0xFF	; 255
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     902:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     904:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     906:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     908:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     90a:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     90c:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     90e:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     910:	1f 92       	push	r1
     912:	7f 93       	push	r23
     914:	1f 92       	push	r1
     916:	6f 93       	push	r22
     918:	1f 92       	push	r1
     91a:	5f 93       	push	r21
     91c:	1f 92       	push	r1
     91e:	4f 93       	push	r20
     920:	1f 92       	push	r1
     922:	3f 93       	push	r19
     924:	1f 92       	push	r1
     926:	2f 93       	push	r18
     928:	29 e3       	ldi	r18, 0x39	; 57
     92a:	3b e7       	ldi	r19, 0x7B	; 123
     92c:	3f 93       	push	r19
     92e:	2f 93       	push	r18
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     938:	8d b7       	in	r24, 0x3d	; 61
     93a:	9e b7       	in	r25, 0x3e	; 62
     93c:	40 96       	adiw	r24, 0x10	; 16
     93e:	8d bf       	out	0x3d, r24	; 61
     940:	9e bf       	out	0x3e, r25	; 62
     942:	08 95       	ret

00000944 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     944:	dc 01       	movw	r26, r24
     946:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     948:	81 89       	ldd	r24, Z+17	; 0x11
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	c0 97       	sbiw	r24, 0x30	; 48
     94e:	82 95       	swap	r24
     950:	92 95       	swap	r25
     952:	90 7f       	andi	r25, 0xF0	; 240
     954:	98 27       	eor	r25, r24
     956:	80 7f       	andi	r24, 0xF0	; 240
     958:	98 27       	eor	r25, r24
     95a:	92 89       	ldd	r25, Z+18	; 0x12
     95c:	90 53       	subi	r25, 0x30	; 48
     95e:	89 2b       	or	r24, r25
     960:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     962:	86 85       	ldd	r24, Z+14	; 0x0e
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	c0 97       	sbiw	r24, 0x30	; 48
     968:	82 95       	swap	r24
     96a:	92 95       	swap	r25
     96c:	90 7f       	andi	r25, 0xF0	; 240
     96e:	98 27       	eor	r25, r24
     970:	80 7f       	andi	r24, 0xF0	; 240
     972:	98 27       	eor	r25, r24
     974:	97 85       	ldd	r25, Z+15	; 0x0f
     976:	90 53       	subi	r25, 0x30	; 48
     978:	89 2b       	or	r24, r25
     97a:	11 96       	adiw	r26, 0x01	; 1
     97c:	8c 93       	st	X, r24
     97e:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     980:	83 85       	ldd	r24, Z+11	; 0x0b
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	c0 97       	sbiw	r24, 0x30	; 48
     986:	82 95       	swap	r24
     988:	92 95       	swap	r25
     98a:	90 7f       	andi	r25, 0xF0	; 240
     98c:	98 27       	eor	r25, r24
     98e:	80 7f       	andi	r24, 0xF0	; 240
     990:	98 27       	eor	r25, r24
     992:	94 85       	ldd	r25, Z+12	; 0x0c
     994:	90 53       	subi	r25, 0x30	; 48
     996:	89 2b       	or	r24, r25
     998:	12 96       	adiw	r26, 0x02	; 2
     99a:	8c 93       	st	X, r24
     99c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	8c 93       	st	X, r24
     9a4:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9a6:	80 85       	ldd	r24, Z+8	; 0x08
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	c0 97       	sbiw	r24, 0x30	; 48
     9ac:	82 95       	swap	r24
     9ae:	92 95       	swap	r25
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	98 27       	eor	r25, r24
     9b4:	80 7f       	andi	r24, 0xF0	; 240
     9b6:	98 27       	eor	r25, r24
     9b8:	91 85       	ldd	r25, Z+9	; 0x09
     9ba:	90 53       	subi	r25, 0x30	; 48
     9bc:	89 2b       	or	r24, r25
     9be:	14 96       	adiw	r26, 0x04	; 4
     9c0:	8c 93       	st	X, r24
     9c2:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9c4:	25 81       	ldd	r18, Z+5	; 0x05
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	20 53       	subi	r18, 0x30	; 48
     9ca:	31 09       	sbc	r19, r1
     9cc:	22 95       	swap	r18
     9ce:	32 95       	swap	r19
     9d0:	30 7f       	andi	r19, 0xF0	; 240
     9d2:	32 27       	eor	r19, r18
     9d4:	20 7f       	andi	r18, 0xF0	; 240
     9d6:	32 27       	eor	r19, r18
     9d8:	86 81       	ldd	r24, Z+6	; 0x06
     9da:	80 53       	subi	r24, 0x30	; 48
     9dc:	28 2b       	or	r18, r24
     9de:	15 96       	adiw	r26, 0x05	; 5
     9e0:	2c 93       	st	X, r18
     9e2:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     9e4:	22 81       	ldd	r18, Z+2	; 0x02
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	20 53       	subi	r18, 0x30	; 48
     9ea:	31 09       	sbc	r19, r1
     9ec:	22 95       	swap	r18
     9ee:	32 95       	swap	r19
     9f0:	30 7f       	andi	r19, 0xF0	; 240
     9f2:	32 27       	eor	r19, r18
     9f4:	20 7f       	andi	r18, 0xF0	; 240
     9f6:	32 27       	eor	r19, r18
     9f8:	83 81       	ldd	r24, Z+3	; 0x03
     9fa:	80 53       	subi	r24, 0x30	; 48
     9fc:	28 2b       	or	r18, r24
     9fe:	16 96       	adiw	r26, 0x06	; 6
     a00:	2c 93       	st	X, r18
     a02:	08 95       	ret

00000a04 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     a16:	c8 2f       	mov	r28, r24
     a18:	88 23       	and	r24, r24
     a1a:	21 f0       	breq	.+8      	; 0xa24 <read_DS3231+0x20>
		stop_TWI();
     a1c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     a20:	8c 2f       	mov	r24, r28
     a22:	28 c0       	rjmp	.+80     	; 0xa74 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     a2a:	c8 2f       	mov	r28, r24
     a2c:	88 23       	and	r24, r24
     a2e:	21 f0       	breq	.+8      	; 0xa38 <read_DS3231+0x34>
		stop_TWI();
     a30:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     a34:	8c 2f       	mov	r24, r28
     a36:	1e c0       	rjmp	.+60     	; 0xa74 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	88 e6       	ldi	r24, 0x68	; 104
     a3c:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     a40:	c8 2f       	mov	r28, r24
     a42:	88 23       	and	r24, r24
     a44:	69 f0       	breq	.+26     	; 0xa60 <read_DS3231+0x5c>
		stop_TWI();
     a46:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     a4a:	8c 2f       	mov	r24, r28
     a4c:	13 c0       	rjmp	.+38     	; 0xa74 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a4e:	87 01       	movw	r16, r14
     a50:	0c 0f       	add	r16, r28
     a52:	11 1d       	adc	r17, r1
     a54:	0e 94 32 13 	call	0x2664	; 0x2664 <read_TWI>
     a58:	f8 01       	movw	r30, r16
     a5a:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a5c:	cf 5f       	subi	r28, 0xFF	; 255
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <read_DS3231+0x5e>
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	c6 30       	cpi	r28, 0x06	; 6
     a64:	a0 f3       	brcs	.-24     	; 0xa4e <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a66:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
     a6a:	f7 01       	movw	r30, r14
     a6c:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a6e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	return(0);
     a72:	80 e0       	ldi	r24, 0x00	; 0

}
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	27 97       	sbiw	r28, 0x07	; 7
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     a94:	be 01       	movw	r22, r28
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	88 e6       	ldi	r24, 0x68	; 104
     a9c:	0e 94 02 05 	call	0xa04	; 0xa04 <read_DS3231>
     aa0:	88 23       	and	r24, r24
     aa2:	49 f0       	breq	.+18     	; 0xab6 <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     aa4:	92 e1       	ldi	r25, 0x12	; 18
     aa6:	e9 e5       	ldi	r30, 0x59	; 89
     aa8:	fb e7       	ldi	r31, 0x7B	; 123
     aaa:	d8 01       	movw	r26, r16
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	9a 95       	dec	r25
     ab2:	e1 f7       	brne	.-8      	; 0xaac <get_time+0x2c>
		return(retval);
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 81 04 	call	0x902	; 0x902 <convert_ds2iso>
	return(0);
     ac2:	80 e0       	ldi	r24, 0x00	; 0

}
     ac4:	27 96       	adiw	r28, 0x07	; 7
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     ae8:	c8 2f       	mov	r28, r24
     aea:	88 23       	and	r24, r24
     aec:	21 f0       	breq	.+8      	; 0xaf6 <write_DS3231+0x22>
		stop_TWI();
     aee:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     af2:	8c 2f       	mov	r24, r28
     af4:	22 c0       	rjmp	.+68     	; 0xb3a <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     afc:	c8 2f       	mov	r28, r24
     afe:	88 23       	and	r24, r24
     b00:	b1 f0       	breq	.+44     	; 0xb2e <write_DS3231+0x5a>
		stop_TWI();
     b02:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     b06:	8c 2f       	mov	r24, r28
     b08:	18 c0       	rjmp	.+48     	; 0xb3a <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b0a:	78 01       	movw	r14, r16
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	e8 1a       	sub	r14, r24
     b10:	f8 0a       	sbc	r15, r24
     b12:	f8 01       	movw	r30, r16
     b14:	80 81       	ld	r24, Z
     b16:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     b1a:	c8 2f       	mov	r28, r24
     b1c:	88 23       	and	r24, r24
     b1e:	21 f0       	breq	.+8      	; 0xb28 <write_DS3231+0x54>
			stop_TWI();
     b20:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
			return(retval);
     b24:	8c 2f       	mov	r24, r28
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b28:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b2a:	87 01       	movw	r16, r14
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <write_DS3231+0x5c>
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b30:	d7 30       	cpi	r29, 0x07	; 7
     b32:	58 f3       	brcs	.-42     	; 0xb0a <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b34:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	return(0);
     b38:	80 e0       	ldi	r24, 0x00	; 0

}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	27 97       	sbiw	r28, 0x07	; 7
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b56:	bc 01       	movw	r22, r24
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 a2 04 	call	0x944	; 0x944 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b60:	be 01       	movw	r22, r28
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	88 e6       	ldi	r24, 0x68	; 104
     b68:	0e 94 6a 05 	call	0xad4	; 0xad4 <write_DS3231>
		return(retval);
	}
	return(0);

}
     b6c:	27 96       	adiw	r28, 0x07	; 7
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     b78:	45 e1       	ldi	r20, 0x15	; 21
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	6b e0       	ldi	r22, 0x0B	; 11
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <eeprom_read_block>
     b84:	08 95       	ret

00000b86 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     b86:	4b e0       	ldi	r20, 0x0B	; 11
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <eeprom_read_block>
     b92:	08 95       	ret

00000b94 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	65 97       	sbiw	r28, 0x15	; 21
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     baa:	45 e1       	ldi	r20, 0x15	; 21
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	6b e0       	ldi	r22, 0x0B	; 11
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <eeprom_update_block>

}
     bba:	65 96       	adiw	r28, 0x15	; 21
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <update_VERSION>:

void update_VERSION(void)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	2b 97       	sbiw	r28, 0x0b	; 11
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     bd4:	8b e0       	ldi	r24, 0x0B	; 11
     bd6:	eb e6       	ldi	r30, 0x6B	; 107
     bd8:	fb e7       	ldi	r31, 0x7B	; 123
     bda:	de 01       	movw	r26, r28
     bdc:	11 96       	adiw	r26, 0x01	; 1
     bde:	01 90       	ld	r0, Z+
     be0:	0d 92       	st	X+, r0
     be2:	8a 95       	dec	r24
     be4:	e1 f7       	brne	.-8      	; 0xbde <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     be6:	4b e0       	ldi	r20, 0x0B	; 11
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <eeprom_update_block>

}
     bf6:	2b 96       	adiw	r28, 0x0b	; 11
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c02:	0e 94 ca 05 	call	0xb94	; 0xb94 <update_BOOTTIME>
	update_VERSION();
     c06:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <update_VERSION>
     c0a:	08 95       	ret

00000c0c <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	c8 2f       	mov	r28, r24
     c1a:	e6 2e       	mov	r14, r22
     c1c:	f7 2e       	mov	r15, r23
     c1e:	8a 01       	movw	r16, r20
     c20:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     c28:	81 11       	cpse	r24, r1
     c2a:	2b c0       	rjmp	.+86     	; 0xc82 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c2c:	8f 2d       	mov	r24, r15
     c2e:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     c32:	81 11       	cpse	r24, r1
     c34:	26 c0       	rjmp	.+76     	; 0xc82 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c36:	8e 2d       	mov	r24, r14
     c38:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     c3c:	81 11       	cpse	r24, r1
     c3e:	21 c0       	rjmp	.+66     	; 0xc82 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	8c 2f       	mov	r24, r28
     c44:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     c48:	81 11       	cpse	r24, r1
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <read_FRAM+0x76>
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c50:	78 01       	movw	r14, r16
     c52:	ec 0e       	add	r14, r28
     c54:	f1 1c       	adc	r15, r1
     c56:	0e 94 32 13 	call	0x2664	; 0x2664 <read_TWI>
     c5a:	f7 01       	movw	r30, r14
     c5c:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c5e:	cf 5f       	subi	r28, 0xFF	; 255
     c60:	2c 2f       	mov	r18, r28
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	8d 2f       	mov	r24, r29
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	84 f3       	brlt	.-32     	; 0xc50 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c70:	ec 01       	movw	r28, r24
     c72:	c0 0f       	add	r28, r16
     c74:	d1 1f       	adc	r29, r17
     c76:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
     c7a:	88 83       	st	Y, r24

	stop_TWI();
     c7c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	return(0);
     c80:	80 e0       	ldi	r24, 0x00	; 0

}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	08 95       	ret

00000c90 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	f6 2e       	mov	r15, r22
     c9e:	17 2f       	mov	r17, r23
     ca0:	ea 01       	movw	r28, r20
     ca2:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     caa:	81 11       	cpse	r24, r1
     cac:	1c c0       	rjmp	.+56     	; 0xce6 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     cae:	81 2f       	mov	r24, r17
     cb0:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     cb4:	81 11       	cpse	r24, r1
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     cb8:	8f 2d       	mov	r24, r15
     cba:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     cbe:	81 11       	cpse	r24, r1
     cc0:	12 c0       	rjmp	.+36     	; 0xce6 <write_FRAM+0x56>
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	0b c0       	rjmp	.+22     	; 0xcdc <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cc6:	7e 01       	movw	r14, r28
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	e8 1a       	sub	r14, r24
     ccc:	f8 0a       	sbc	r15, r24
     cce:	88 81       	ld	r24, Y
     cd0:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     cd4:	81 11       	cpse	r24, r1
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     cd8:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cda:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     cdc:	10 17       	cp	r17, r16
     cde:	98 f3       	brcs	.-26     	; 0xcc6 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     ce0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	return(0);
     ce4:	80 e0       	ldi	r24, 0x00	; 0

}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	08 95       	ret

00000cf4 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	59 f0       	breq	.+22     	; 0xd1e <get_humidity+0x2a>
     d08:	18 f0       	brcs	.+6      	; 0xd10 <get_humidity+0x1c>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	79 f0       	breq	.+30     	; 0xd2c <get_humidity+0x38>
     d0e:	15 c0       	rjmp	.+42     	; 0xd3a <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
     d16:	4b 01       	movw	r8, r22
     d18:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d1a:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d1c:	17 c0       	rjmp	.+46     	; 0xd4c <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
     d24:	4b 01       	movw	r8, r22
     d26:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d28:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d2a:	10 c0       	rjmp	.+32     	; 0xd4c <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
     d32:	4b 01       	movw	r8, r22
     d34:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d36:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d3a:	0f 2e       	mov	r0, r31
     d3c:	81 2c       	mov	r8, r1
     d3e:	91 2c       	mov	r9, r1
     d40:	f0 ea       	ldi	r31, 0xA0	; 160
     d42:	af 2e       	mov	r10, r31
     d44:	f1 e4       	ldi	r31, 0x41	; 65
     d46:	bf 2e       	mov	r11, r31
     d48:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d4a:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d4c:	20 e8       	ldi	r18, 0x80	; 128
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	88 e4       	ldi	r24, 0x48	; 72
     d52:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 ea       	ldi	r20, 0xA0	; 160
     d5c:	50 e4       	ldi	r21, 0x40	; 64
     d5e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	37 ed       	ldi	r19, 0xD7	; 215
     d66:	43 e2       	ldi	r20, 0x23	; 35
     d68:	5e e3       	ldi	r21, 0x3E	; 62
     d6a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     d6e:	2f e5       	ldi	r18, 0x5F	; 95
     d70:	39 e2       	ldi	r19, 0x29	; 41
     d72:	4b ec       	ldi	r20, 0xCB	; 203
     d74:	5b e3       	ldi	r21, 0x3B	; 59
     d76:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
     d7a:	6b 01       	movw	r12, r22
     d7c:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     d7e:	29 ec       	ldi	r18, 0xC9	; 201
     d80:	3e e8       	ldi	r19, 0x8E	; 142
     d82:	4d e0       	ldi	r20, 0x0D	; 13
     d84:	5b e3       	ldi	r21, 0x3B	; 59
     d86:	c5 01       	movw	r24, r10
     d88:	b4 01       	movw	r22, r8
     d8a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	62 e2       	ldi	r22, 0x22	; 34
     d94:	7d ef       	ldi	r23, 0xFD	; 253
     d96:	86 e8       	ldi	r24, 0x86	; 134
     d98:	9f e3       	ldi	r25, 0x3F	; 63
     d9a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	c7 01       	movw	r24, r14
     da4:	b6 01       	movw	r22, r12
     da6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
	return(humidity);

}
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	08 95       	ret

00000dbc <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	2b 97       	sbiw	r28, 0x0b	; 11
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     dca:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     dce:	8b e0       	ldi	r24, 0x0B	; 11
     dd0:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     dd4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <init_XPORT>
	init_SPECID();
     dd8:	0e 94 0f 13 	call	0x261e	; 0x261e <init_SPECID>
	init_LED();
     ddc:	0e 94 9c 07 	call	0xf38	; 0xf38 <init_LED>
	init_BEEPER();
     de0:	0e 94 45 02 	call	0x48a	; 0x48a <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <init_RTC>
	init_USART();
     dec:	0e 94 8c 13 	call	0x2718	; 0x2718 <init_USART>
	init_TWI();
     df0:	0e 94 27 13 	call	0x264e	; 0x264e <init_TWI>
	init_MMA8451();
     df4:	0e 94 3e 09 	call	0x127c	; 0x127c <init_MMA8451>
	init_PNEU();
     df8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_PNEU>
	init_OLED(0);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 04 0a 	call	0x1408	; 0x1408 <init_OLED>
	init_OLED(1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	0e 94 04 0a 	call	0x1408	; 0x1408 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e08:	0e 94 01 06 	call	0xc02	; 0xc02 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     e0c:	80 ee       	ldi	r24, 0xE0	; 224
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     e14:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	0e 94 c3 05 	call	0xb86	; 0xb86 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	66 e7       	ldi	r22, 0x76	; 118
     e24:	7b e7       	ldi	r23, 0x7B	; 123
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e2c:	42 e0       	ldi	r20, 0x02	; 2
     e2e:	be 01       	movw	r22, r28
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>

}
     e3a:	2b 96       	adiw	r28, 0x0b	; 11
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e68:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e6c:	86 ff       	sbrs	r24, 6
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e70:	80 e4       	ldi	r24, 0x40	; 64
     e72:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e76:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <reboot>
	}

}
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	79 f5       	brne	.+94     	; 0xf0a <read_ionpump+0x6e>
		pins = AIN23;
     eac:	40 e3       	ldi	r20, 0x30	; 48
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     eb0:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     eb2:	20 e8       	ldi	r18, 0x80	; 128
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	89 e4       	ldi	r24, 0x49	; 73
     eb8:	0e 94 46 01 	call	0x28c	; 0x28c <read_ADS1115>
     ebc:	6b 01       	movw	r12, r22
     ebe:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     ec0:	2d ec       	ldi	r18, 0xCD	; 205
     ec2:	3c ec       	ldi	r19, 0xCC	; 204
     ec4:	4c ec       	ldi	r20, 0xCC	; 204
     ec6:	5e e3       	ldi	r21, 0x3E	; 62
     ec8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__cmpsf2>
     ecc:	88 23       	and	r24, r24
     ece:	14 f1       	brlt	.+68     	; 0xf14 <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e4       	ldi	r21, 0x40	; 64
     ed8:	c7 01       	movw	r24, r14
     eda:	b6 01       	movw	r22, r12
     edc:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
     ee0:	18 16       	cp	r1, r24
     ee2:	ec f0       	brlt	.+58     	; 0xf1e <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     ee4:	29 e7       	ldi	r18, 0x79	; 121
     ee6:	39 ee       	ldi	r19, 0xE9	; 233
     ee8:	42 e0       	ldi	r20, 0x02	; 2
     eea:	50 e4       	ldi	r21, 0x40	; 64
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     ef4:	2e e6       	ldi	r18, 0x6E	; 110
     ef6:	33 ea       	ldi	r19, 0xA3	; 163
     ef8:	4b ed       	ldi	r20, 0xDB	; 219
     efa:	50 e4       	ldi	r21, 0x40	; 64
     efc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>

	return(vacuum);
     f00:	56 2f       	mov	r21, r22
     f02:	47 2f       	mov	r20, r23
     f04:	38 2f       	mov	r19, r24
     f06:	29 2f       	mov	r18, r25
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     f0a:	5a e9       	ldi	r21, 0x9A	; 154
     f0c:	49 ef       	ldi	r20, 0xF9	; 249
     f0e:	39 e7       	ldi	r19, 0x79	; 121
     f10:	24 ec       	ldi	r18, 0xC4	; 196
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     f14:	5a e9       	ldi	r21, 0x9A	; 154
     f16:	49 ef       	ldi	r20, 0xF9	; 249
     f18:	39 e7       	ldi	r19, 0x79	; 121
     f1a:	24 ec       	ldi	r18, 0xC4	; 196
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f1e:	5a e9       	ldi	r21, 0x9A	; 154
     f20:	49 ef       	ldi	r20, 0xF9	; 249
     f22:	39 e7       	ldi	r19, 0x79	; 121
     f24:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f26:	65 2f       	mov	r22, r21
     f28:	74 2f       	mov	r23, r20
     f2a:	83 2f       	mov	r24, r19
     f2c:	92 2f       	mov	r25, r18
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f38:	e0 ea       	ldi	r30, 0xA0	; 160
     f3a:	f4 e0       	ldi	r31, 0x04	; 4
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f40:	81 83       	std	Z+1, r24	; 0x01
     f42:	08 95       	ret

00000f44 <main>:
extern void initialize(void);

int main(void)
{

	initialize();
     f44:	0e 94 de 06 	call	0xdbc	; 0xdbc <initialize>
	sei();
     f48:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     f4a:	80 91 17 2c 	lds	r24, 0x2C17	; 0x802c17 <recv0_buf+0x103>
     f4e:	88 23       	and	r24, r24
     f50:	e1 f3       	breq	.-8      	; 0xf4a <main+0x6>
			recv0_buf.done = NO;
     f52:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x103>
			on_BEEPER;
     f56:	e0 e2       	ldi	r30, 0x20	; 32
     f58:	f4 e0       	ldi	r31, 0x04	; 4
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	85 83       	std	Z+5, r24	; 0x05
     f5e:	a2 ec       	ldi	r26, 0xC2	; 194
     f60:	b2 ea       	ldi	r27, 0xA2	; 162
     f62:	11 97       	sbiw	r26, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x1e>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <main+0x24>
			_delay_ms(50);
			off_BEEPER;
     f68:	86 83       	std	Z+6, r24	; 0x06
			commands();
     f6a:	0e 94 c4 03 	call	0x788	; 0x788 <commands>
     f6e:	ed cf       	rjmp	.-38     	; 0xf4a <main+0x6>

00000f70 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	c8 2f       	mov	r28, r24
     f76:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	write_TWI(reg);
     f7e:	8d 2f       	mov	r24, r29
     f80:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
	start_TWI(addr, TWIREAD);
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	8c 2f       	mov	r24, r28
     f88:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	val = readlast_TWI();
     f8c:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
     f90:	c8 2f       	mov	r28, r24
	stop_TWI();
     f92:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
	return(val);

}
     f96:	8c 2f       	mov	r24, r28
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	d6 2f       	mov	r29, r22
     fa6:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
     fae:	c8 2f       	mov	r28, r24
     fb0:	88 23       	and	r24, r24
     fb2:	21 f0       	breq	.+8      	; 0xfbc <write_MCP23008+0x1e>
		stop_TWI();
     fb4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     fb8:	8c 2f       	mov	r24, r28
     fba:	17 c0       	rjmp	.+46     	; 0xfea <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     fbc:	8d 2f       	mov	r24, r29
     fbe:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     fc2:	c8 2f       	mov	r28, r24
     fc4:	88 23       	and	r24, r24
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <write_MCP23008+0x32>
		stop_TWI();
     fc8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     fcc:	8c 2f       	mov	r24, r28
     fce:	0d c0       	rjmp	.+26     	; 0xfea <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     fd0:	81 2f       	mov	r24, r17
     fd2:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
     fd6:	c8 2f       	mov	r28, r24
     fd8:	88 23       	and	r24, r24
     fda:	21 f0       	breq	.+8      	; 0xfe4 <write_MCP23008+0x46>
		stop_TWI();
     fdc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
     fe0:	8c 2f       	mov	r24, r28
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <write_MCP23008+0x4c>
	}
	stop_TWI();
     fe4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
	return(0);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
	
}
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	08 95       	ret

00000ff2 <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	88 e1       	ldi	r24, 0x18	; 24
    1004:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	write_TWI(TEMPREGISTER);
    1008:	85 e0       	ldi	r24, 0x05	; 5
    100a:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	88 e1       	ldi	r24, 0x18	; 24
    1012:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	highbyte = read_TWI();
    1016:	0e 94 32 13 	call	0x2664	; 0x2664 <read_TWI>
    101a:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    101c:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
    1020:	d8 2f       	mov	r29, r24
	stop_TWI();
    1022:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1026:	1c 2f       	mov	r17, r28
    1028:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    102a:	6c 2f       	mov	r22, r28
    102c:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1044:	6b 01       	movw	r12, r22
    1046:	7c 01       	movw	r14, r24
    1048:	6d 2f       	mov	r22, r29
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5d e3       	ldi	r21, 0x3D	; 61
    105c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
	if (sign) {
    106c:	11 23       	and	r17, r17
    106e:	41 f0       	breq	.+16     	; 0x1080 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	93 e4       	ldi	r25, 0x43	; 67
    107c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
	}
	return(temperature);
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	08 95       	ret

00001090 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	18 2f       	mov	r17, r24
    109e:	f6 2e       	mov	r15, r22
    10a0:	ea 01       	movw	r28, r20
    10a2:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
    10aa:	81 11       	cpse	r24, r1
    10ac:	1e c0       	rjmp	.+60     	; 0x10ea <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    10ae:	8f 2d       	mov	r24, r15
    10b0:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
    10b4:	81 11       	cpse	r24, r1
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	81 2f       	mov	r24, r17
    10bc:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
    10c0:	81 11       	cpse	r24, r1
    10c2:	13 c0       	rjmp	.+38     	; 0x10ea <read_MMA8451+0x5a>
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    10c8:	7e 01       	movw	r14, r28
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	e8 1a       	sub	r14, r24
    10ce:	f8 0a       	sbc	r15, r24
    10d0:	0e 94 32 13 	call	0x2664	; 0x2664 <read_TWI>
    10d4:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10d6:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10d8:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10da:	10 17       	cp	r17, r16
    10dc:	a8 f3       	brcs	.-22     	; 0x10c8 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10de:	0e 94 42 13 	call	0x2684	; 0x2684 <readlast_TWI>
    10e2:	88 83       	st	Y, r24
	stop_TWI();
    10e4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
	return(0);
    10e8:	80 e0       	ldi	r24, 0x00	; 0

}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	08 95       	ret

000010f8 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	26 97       	sbiw	r28, 0x06	; 6
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	6c 01       	movw	r12, r24
    1114:	7b 01       	movw	r14, r22
    1116:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    1118:	8a e9       	ldi	r24, 0x9A	; 154
    111a:	9f e3       	ldi	r25, 0x3F	; 63
    111c:	ac e1       	ldi	r26, 0x1C	; 28
    111e:	b6 ec       	ldi	r27, 0xC6	; 198
    1120:	fa 01       	movw	r30, r20
    1122:	80 83       	st	Z, r24
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	a2 83       	std	Z+2, r26	; 0x02
    1128:	b3 83       	std	Z+3, r27	; 0x03
    112a:	fb 01       	movw	r30, r22
    112c:	80 83       	st	Z, r24
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	a2 83       	std	Z+2, r26	; 0x02
    1132:	b3 83       	std	Z+3, r27	; 0x03
    1134:	f6 01       	movw	r30, r12
    1136:	80 83       	st	Z, r24
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	a2 83       	std	Z+2, r26	; 0x02
    113c:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    113e:	26 e0       	ldi	r18, 0x06	; 6
    1140:	ae 01       	movw	r20, r28
    1142:	4f 5f       	subi	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	8d e1       	ldi	r24, 0x1D	; 29
    114a:	0e 94 48 08 	call	0x1090	; 0x1090 <read_MMA8451>

	ix = datain[0];
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1152:	98 2f       	mov	r25, r24
    1154:	88 27       	eor	r24, r24
	ix |= datain[1];
    1156:	2a 81       	ldd	r18, Y+2	; 0x02
    1158:	82 2b       	or	r24, r18
	ix /= 4;
    115a:	bc 01       	movw	r22, r24
    115c:	77 23       	and	r23, r23
    115e:	14 f4       	brge	.+4      	; 0x1164 <get_orientation+0x6c>
    1160:	6d 5f       	subi	r22, 0xFD	; 253
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	75 95       	asr	r23
    1166:	67 95       	ror	r22
    1168:	75 95       	asr	r23
    116a:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    116c:	07 2e       	mov	r0, r23
    116e:	00 0c       	add	r0, r0
    1170:	88 0b       	sbc	r24, r24
    1172:	99 0b       	sbc	r25, r25
    1174:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    1178:	26 e6       	ldi	r18, 0x66	; 102
    117a:	36 e2       	ldi	r19, 0x26	; 38
    117c:	45 e7       	ldi	r20, 0x75	; 117
    117e:	5e e3       	ldi	r21, 0x3E	; 62
    1180:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1184:	f6 01       	movw	r30, r12
    1186:	60 83       	st	Z, r22
    1188:	71 83       	std	Z+1, r23	; 0x01
    118a:	82 83       	std	Z+2, r24	; 0x02
    118c:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    1192:	98 2f       	mov	r25, r24
    1194:	88 27       	eor	r24, r24
	iy |= datain[3];
    1196:	2c 81       	ldd	r18, Y+4	; 0x04
    1198:	82 2b       	or	r24, r18
	iy /= 4;
    119a:	bc 01       	movw	r22, r24
    119c:	77 23       	and	r23, r23
    119e:	14 f4       	brge	.+4      	; 0x11a4 <get_orientation+0xac>
    11a0:	6d 5f       	subi	r22, 0xFD	; 253
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	75 95       	asr	r23
    11a6:	67 95       	ror	r22
    11a8:	75 95       	asr	r23
    11aa:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    11ac:	07 2e       	mov	r0, r23
    11ae:	00 0c       	add	r0, r0
    11b0:	88 0b       	sbc	r24, r24
    11b2:	99 0b       	sbc	r25, r25
    11b4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    11b8:	26 e6       	ldi	r18, 0x66	; 102
    11ba:	36 e2       	ldi	r19, 0x26	; 38
    11bc:	45 e7       	ldi	r20, 0x75	; 117
    11be:	5e e3       	ldi	r21, 0x3E	; 62
    11c0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    11c4:	f7 01       	movw	r30, r14
    11c6:	60 83       	st	Z, r22
    11c8:	71 83       	std	Z+1, r23	; 0x01
    11ca:	82 83       	std	Z+2, r24	; 0x02
    11cc:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11d2:	98 2f       	mov	r25, r24
    11d4:	88 27       	eor	r24, r24
	iz |= datain[5];
    11d6:	2e 81       	ldd	r18, Y+6	; 0x06
    11d8:	82 2b       	or	r24, r18
	iz /= 4;
    11da:	bc 01       	movw	r22, r24
    11dc:	77 23       	and	r23, r23
    11de:	14 f4       	brge	.+4      	; 0x11e4 <get_orientation+0xec>
    11e0:	6d 5f       	subi	r22, 0xFD	; 253
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	75 95       	asr	r23
    11e6:	67 95       	ror	r22
    11e8:	75 95       	asr	r23
    11ea:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11ec:	07 2e       	mov	r0, r23
    11ee:	00 0c       	add	r0, r0
    11f0:	88 0b       	sbc	r24, r24
    11f2:	99 0b       	sbc	r25, r25
    11f4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    11f8:	26 e6       	ldi	r18, 0x66	; 102
    11fa:	36 e2       	ldi	r19, 0x26	; 38
    11fc:	45 e7       	ldi	r20, 0x75	; 117
    11fe:	5e e3       	ldi	r21, 0x3E	; 62
    1200:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1204:	f8 01       	movw	r30, r16
    1206:	60 83       	st	Z, r22
    1208:	71 83       	std	Z+1, r23	; 0x01
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	26 96       	adiw	r28, 0x06	; 6
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	08 95       	ret

00001228 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	d6 2f       	mov	r29, r22
    1230:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
    1238:	c8 2f       	mov	r28, r24
    123a:	88 23       	and	r24, r24
    123c:	21 f0       	breq	.+8      	; 0x1246 <write_MMA8451+0x1e>
		stop_TWI();
    123e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
    1242:	8c 2f       	mov	r24, r28
    1244:	17 c0       	rjmp	.+46     	; 0x1274 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1246:	8d 2f       	mov	r24, r29
    1248:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
    124c:	c8 2f       	mov	r28, r24
    124e:	88 23       	and	r24, r24
    1250:	21 f0       	breq	.+8      	; 0x125a <write_MMA8451+0x32>
		stop_TWI();
    1252:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
    1256:	8c 2f       	mov	r24, r28
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    125a:	81 2f       	mov	r24, r17
    125c:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
    1260:	c8 2f       	mov	r28, r24
    1262:	88 23       	and	r24, r24
    1264:	21 f0       	breq	.+8      	; 0x126e <write_MMA8451+0x46>
		stop_TWI();
    1266:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
		return(retval);
    126a:	8c 2f       	mov	r24, r28
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <write_MMA8451+0x4c>
	}
	stop_TWI();
    126e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>
	return(0);
    1272:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	08 95       	ret

0000127c <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1286:	40 e4       	ldi	r20, 0x40	; 64
    1288:	6b e2       	ldi	r22, 0x2B	; 43
    128a:	8d e1       	ldi	r24, 0x1D	; 29
    128c:	0e 94 14 09 	call	0x1228	; 0x1228 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	ae 01       	movw	r20, r28
    1294:	4f 5f       	subi	r20, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	6b e2       	ldi	r22, 0x2B	; 43
    129a:	8d e1       	ldi	r24, 0x1D	; 29
    129c:	0e 94 48 08 	call	0x1090	; 0x1090 <read_MMA8451>
	while (retval & 0x40) {
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	ae 01       	movw	r20, r28
    12a6:	4f 5f       	subi	r20, 0xFF	; 255
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	6b e2       	ldi	r22, 0x2B	; 43
    12ac:	8d e1       	ldi	r24, 0x1D	; 29
    12ae:	0e 94 48 08 	call	0x1090	; 0x1090 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	86 fd       	sbrc	r24, 6
    12b6:	f5 cf       	rjmp	.-22     	; 0x12a2 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    12b8:	40 ec       	ldi	r20, 0xC0	; 192
    12ba:	6f e0       	ldi	r22, 0x0F	; 15
    12bc:	8d e1       	ldi	r24, 0x1D	; 29
    12be:	0e 94 14 09 	call	0x1228	; 0x1228 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    12c2:	42 e0       	ldi	r20, 0x02	; 2
    12c4:	6b e2       	ldi	r22, 0x2B	; 43
    12c6:	8d e1       	ldi	r24, 0x1D	; 29
    12c8:	0e 94 14 09 	call	0x1228	; 0x1228 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    12cc:	4d e3       	ldi	r20, 0x3D	; 61
    12ce:	6a e2       	ldi	r22, 0x2A	; 42
    12d0:	8d e1       	ldi	r24, 0x1D	; 29
    12d2:	0e 94 14 09 	call	0x1228	; 0x1228 <write_MMA8451>

	return(retval);

}
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	0f 90       	pop	r0
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2e 97       	sbiw	r28, 0x0e	; 14
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	e7 e8       	ldi	r30, 0x87	; 135
    12fc:	fb e7       	ldi	r31, 0x7B	; 123
    12fe:	de 01       	movw	r26, r28
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	01 90       	ld	r0, Z+
    1304:	0d 92       	st	X+, r0
    1306:	8a 95       	dec	r24
    1308:	e1 f7       	brne	.-8      	; 0x1302 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    130a:	f8 01       	movw	r30, r16
    130c:	01 90       	ld	r0, Z+
    130e:	00 20       	and	r0, r0
    1310:	e9 f7       	brne	.-6      	; 0x130c <checksum_NMEA+0x2c>
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	3e 2f       	mov	r19, r30
    1316:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1318:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	06 c0       	rjmp	.+12     	; 0x132a <checksum_NMEA+0x4a>
		checksum ^= str[i];
    131e:	f8 01       	movw	r30, r16
    1320:	e8 0f       	add	r30, r24
    1322:	f1 1d       	adc	r31, r1
    1324:	20 81       	ld	r18, Z
    1326:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	83 17       	cp	r24, r19
    132c:	c0 f3       	brcs	.-16     	; 0x131e <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    132e:	1f 92       	push	r1
    1330:	9f 93       	push	r25
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	7e 01       	movw	r14, r28
    133c:	89 e0       	ldi	r24, 0x09	; 9
    133e:	e8 0e       	add	r14, r24
    1340:	f1 1c       	adc	r15, r1
    1342:	ff 92       	push	r15
    1344:	ef 92       	push	r14
    1346:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
	strcat(str, chksum);
    134a:	b7 01       	movw	r22, r14
    134c:	c8 01       	movw	r24, r16
    134e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <strcat>

}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	2e 96       	adiw	r28, 0x0e	; 14
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	08 95       	ret

00001372 <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	28 97       	sbiw	r28, 0x08	; 8
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	08 2f       	mov	r16, r24
    1386:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    1388:	88 e0       	ldi	r24, 0x08	; 8
    138a:	ef e8       	ldi	r30, 0x8F	; 143
    138c:	fb e7       	ldi	r31, 0x7B	; 123
    138e:	de 01       	movw	r26, r28
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	01 90       	ld	r0, Z+
    1394:	0d 92       	st	X+, r0
    1396:	8a 95       	dec	r24
    1398:	e1 f7       	brne	.-8      	; 0x1392 <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    139a:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    139e:	82 ff       	sbrs	r24, 2
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <format_ERR+0x36>
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <format_ERR+0x3a>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9f 93       	push	r25
    13ae:	8f 93       	push	r24
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	9f 93       	push	r25
    13b6:	8f 93       	push	r24
    13b8:	1f 93       	push	r17
    13ba:	0f 93       	push	r16
    13bc:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
	checksum_NMEA(str);
    13c0:	80 2f       	mov	r24, r16
    13c2:	91 2f       	mov	r25, r17
    13c4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>

}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	28 96       	adiw	r28, 0x08	; 8
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	d6 2f       	mov	r29, r22
    13ea:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	0e 94 4f 13 	call	0x269e	; 0x269e <start_TWI>
	write_TWI(type);
    13f2:	8d 2f       	mov	r24, r29
    13f4:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
	write_TWI(byteToSend);
    13f8:	8c 2f       	mov	r24, r28
    13fa:	0e 94 77 13 	call	0x26ee	; 0x26ee <write_TWI>
	stop_TWI();
    13fe:	0e 94 73 13 	call	0x26e6	; 0x26e6 <stop_TWI>

}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1408:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    140a:	e0 e6       	ldi	r30, 0x60	; 96
    140c:	f4 e0       	ldi	r31, 0x04	; 4
    140e:	90 e4       	ldi	r25, 0x40	; 64
    1410:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a1 e4       	ldi	r26, 0x41	; 65
    1416:	b3 e0       	ldi	r27, 0x03	; 3
    1418:	11 97       	sbiw	r26, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <init_OLED+0x10>
    141c:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    141e:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1420:	81 11       	cpse	r24, r1
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1424:	cc e3       	ldi	r28, 0x3C	; 60
    1426:	01 c0       	rjmp	.+2      	; 0x142a <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1428:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    142a:	4a e2       	ldi	r20, 0x2A	; 42
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	8c 2f       	mov	r24, r28
    1430:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1434:	41 e7       	ldi	r20, 0x71	; 113
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	8c 2f       	mov	r24, r28
    143a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    143e:	4c e5       	ldi	r20, 0x5C	; 92
    1440:	60 e4       	ldi	r22, 0x40	; 64
    1442:	8c 2f       	mov	r24, r28
    1444:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1448:	48 e2       	ldi	r20, 0x28	; 40
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	8c 2f       	mov	r24, r28
    144e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1452:	48 e0       	ldi	r20, 0x08	; 8
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	8c 2f       	mov	r24, r28
    1458:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    145c:	4a e2       	ldi	r20, 0x2A	; 42
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	8c 2f       	mov	r24, r28
    1462:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1466:	49 e7       	ldi	r20, 0x79	; 121
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	8c 2f       	mov	r24, r28
    146c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1470:	45 ed       	ldi	r20, 0xD5	; 213
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	8c 2f       	mov	r24, r28
    1476:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    147a:	40 e7       	ldi	r20, 0x70	; 112
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	8c 2f       	mov	r24, r28
    1480:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1484:	48 e7       	ldi	r20, 0x78	; 120
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	8c 2f       	mov	r24, r28
    148a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    148e:	48 e0       	ldi	r20, 0x08	; 8
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	8c 2f       	mov	r24, r28
    1494:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1498:	46 e0       	ldi	r20, 0x06	; 6
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	8c 2f       	mov	r24, r28
    149e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    14a2:	42 e7       	ldi	r20, 0x72	; 114
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	8c 2f       	mov	r24, r28
    14a8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	60 e4       	ldi	r22, 0x40	; 64
    14b0:	8c 2f       	mov	r24, r28
    14b2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14b6:	4a e2       	ldi	r20, 0x2A	; 42
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	8c 2f       	mov	r24, r28
    14bc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14c0:	49 e7       	ldi	r20, 0x79	; 121
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	8c 2f       	mov	r24, r28
    14c6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    14ca:	4a ed       	ldi	r20, 0xDA	; 218
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	8c 2f       	mov	r24, r28
    14d0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	8c 2f       	mov	r24, r28
    14da:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14de:	4c ed       	ldi	r20, 0xDC	; 220
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	8c 2f       	mov	r24, r28
    14e4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	8c 2f       	mov	r24, r28
    14ee:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    14f2:	41 e8       	ldi	r20, 0x81	; 129
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	8c 2f       	mov	r24, r28
    14f8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	8c 2f       	mov	r24, r28
    1502:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1506:	49 ed       	ldi	r20, 0xD9	; 217
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	8c 2f       	mov	r24, r28
    150c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1510:	41 ef       	ldi	r20, 0xF1	; 241
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	8c 2f       	mov	r24, r28
    1516:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    151a:	4b ed       	ldi	r20, 0xDB	; 219
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	8c 2f       	mov	r24, r28
    1520:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1524:	40 e4       	ldi	r20, 0x40	; 64
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	8c 2f       	mov	r24, r28
    152a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    152e:	48 e7       	ldi	r20, 0x78	; 120
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1538:	48 e2       	ldi	r20, 0x28	; 40
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	8c 2f       	mov	r24, r28
    153e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	8c 2f       	mov	r24, r28
    1548:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	8c 2f       	mov	r24, r28
    1552:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1556:	4c e0       	ldi	r20, 0x0C	; 12
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	8c 2f       	mov	r24, r28
    155c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
    1560:	ba e6       	ldi	r27, 0x6A	; 106
    1562:	24 e0       	ldi	r18, 0x04	; 4
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	b1 50       	subi	r27, 0x01	; 1
    1568:	20 40       	sbci	r18, 0x00	; 0
    156a:	80 40       	sbci	r24, 0x00	; 0
    156c:	e1 f7       	brne	.-8      	; 0x1566 <init_OLED+0x15e>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    1570:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1574:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    1580:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	e2 97       	sbiw	r28, 0x32	; 50
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    15a0:	91 e1       	ldi	r25, 0x11	; 17
    15a2:	e7 e9       	ldi	r30, 0x97	; 151
    15a4:	fb e7       	ldi	r31, 0x7B	; 123
    15a6:	de 01       	movw	r26, r28
    15a8:	92 96       	adiw	r26, 0x22	; 34
    15aa:	01 90       	ld	r0, Z+
    15ac:	0d 92       	st	X+, r0
    15ae:	9a 95       	dec	r25
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <writestr_OLED+0x22>

	if (displaynumber == 0) {
    15b2:	81 11       	cpse	r24, r1
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    15b6:	0c e3       	ldi	r16, 0x3C	; 60
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    15ba:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	7c 01       	movw	r14, r24
    15c2:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcpy>
	if (strlen(strbuf) > 16) {
    15c6:	f7 01       	movw	r30, r14
    15c8:	01 90       	ld	r0, Z+
    15ca:	00 20       	and	r0, r0
    15cc:	e9 f7       	brne	.-6      	; 0x15c8 <writestr_OLED+0x40>
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	ee 19       	sub	r30, r14
    15d2:	ff 09       	sbc	r31, r15
    15d4:	71 97       	sbiw	r30, 0x11	; 17
    15d6:	08 f0       	brcs	.+2      	; 0x15da <writestr_OLED+0x52>
		strbuf[16] = '\0';
    15d8:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    15da:	be 01       	movw	r22, r28
    15dc:	6e 5d       	subi	r22, 0xDE	; 222
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <strcat>

	if (lineno == 1) {
    15e8:	11 30       	cpi	r17, 0x01	; 1
    15ea:	39 f4       	brne	.+14     	; 0x15fa <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	80 2f       	mov	r24, r16
    15f2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	12 c0       	rjmp	.+36     	; 0x161e <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    15fa:	40 ec       	ldi	r20, 0xC0	; 192
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	80 2f       	mov	r24, r16
    1600:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>
    1604:	f8 cf       	rjmp	.-16     	; 0x15f6 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1606:	e1 e0       	ldi	r30, 0x01	; 1
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	ec 0f       	add	r30, r28
    160c:	fd 1f       	adc	r31, r29
    160e:	e1 0f       	add	r30, r17
    1610:	f1 1d       	adc	r31, r1
    1612:	40 81       	ld	r20, Z
    1614:	60 e4       	ldi	r22, 0x40	; 64
    1616:	80 2f       	mov	r24, r16
    1618:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    161c:	1f 5f       	subi	r17, 0xFF	; 255
    161e:	10 31       	cpi	r17, 0x10	; 16
    1620:	90 f3       	brcs	.-28     	; 0x1606 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    162a:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    162e:	e2 96       	adiw	r28, 0x32	; 50
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	08 95       	ret

00001642 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	61 97       	sbiw	r28, 0x11	; 17
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1654:	81 e1       	ldi	r24, 0x11	; 17
    1656:	e7 e9       	ldi	r30, 0x97	; 151
    1658:	fb e7       	ldi	r31, 0x7B	; 123
    165a:	de 01       	movw	r26, r28
    165c:	11 96       	adiw	r26, 0x01	; 1
    165e:	01 90       	ld	r0, Z+
    1660:	0d 92       	st	X+, r0
    1662:	8a 95       	dec	r24
    1664:	e1 f7       	brne	.-8      	; 0x165e <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	be 01       	movw	r22, r28
    166a:	6f 5f       	subi	r22, 0xFF	; 255
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	81 2f       	mov	r24, r17
    1670:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1674:	42 e0       	ldi	r20, 0x02	; 2
    1676:	be 01       	movw	r22, r28
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	81 2f       	mov	r24, r17
    167e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
	timerOLED = 0;
    1682:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1686:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    168a:	61 96       	adiw	r28, 0x11	; 17
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	08 95       	ret

00001698 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	84 e2       	ldi	r24, 0x24	; 36
    169e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16a2:	81 11       	cpse	r24, r1
    16a4:	35 c0       	rjmp	.+106    	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	6a e0       	ldi	r22, 0x0A	; 10
    16aa:	84 e2       	ldi	r24, 0x24	; 36
    16ac:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16b0:	81 11       	cpse	r24, r1
    16b2:	2e c0       	rjmp	.+92     	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    16b4:	4e ef       	ldi	r20, 0xFE	; 254
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	81 e2       	ldi	r24, 0x21	; 33
    16ba:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16be:	81 11       	cpse	r24, r1
    16c0:	27 c0       	rjmp	.+78     	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	81 e2       	ldi	r24, 0x21	; 33
    16c8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16cc:	81 11       	cpse	r24, r1
    16ce:	20 c0       	rjmp	.+64     	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    16d0:	4c ef       	ldi	r20, 0xFC	; 252
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	81 e2       	ldi	r24, 0x21	; 33
    16d6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16da:	81 11       	cpse	r24, r1
    16dc:	19 c0       	rjmp	.+50     	; 0x1710 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	64 e0       	ldi	r22, 0x04	; 4
    16e2:	81 e2       	ldi	r24, 0x21	; 33
    16e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16e8:	81 11       	cpse	r24, r1
    16ea:	12 c0       	rjmp	.+36     	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	65 e0       	ldi	r22, 0x05	; 5
    16f0:	81 e2       	ldi	r24, 0x21	; 33
    16f2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    16f6:	81 11       	cpse	r24, r1
    16f8:	0b c0       	rjmp	.+22     	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	66 e0       	ldi	r22, 0x06	; 6
    16fe:	81 e2       	ldi	r24, 0x21	; 33
    1700:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
    1704:	81 11       	cpse	r24, r1
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1708:	89 e0       	ldi	r24, 0x09	; 9
    170a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    170e:	80 e0       	ldi	r24, 0x00	; 0

}
    1710:	08 95       	ret

00001712 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	6c 01       	movw	r12, r24
    1724:	8b 01       	movw	r16, r22
    1726:	7a 01       	movw	r14, r20
    1728:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    172a:	69 e0       	ldi	r22, 0x09	; 9
    172c:	81 e2       	ldi	r24, 0x21	; 33
    172e:	0e 94 b8 07 	call	0xf70	; 0xf70 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1732:	98 2f       	mov	r25, r24
    1734:	92 95       	swap	r25
    1736:	96 95       	lsr	r25
    1738:	96 95       	lsr	r25
    173a:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    173c:	91 30       	cpi	r25, 0x01	; 1
    173e:	21 f4       	brne	.+8      	; 0x1748 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    1740:	93 e6       	ldi	r25, 0x63	; 99
    1742:	f6 01       	movw	r30, r12
    1744:	90 83       	st	Z, r25
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    1748:	92 30       	cpi	r25, 0x02	; 2
    174a:	21 f4       	brne	.+8      	; 0x1754 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    174c:	9f e6       	ldi	r25, 0x6F	; 111
    174e:	f6 01       	movw	r30, r12
    1750:	90 83       	st	Z, r25
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    1754:	93 30       	cpi	r25, 0x03	; 3
    1756:	21 f4       	brne	.+8      	; 0x1760 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    1758:	94 e7       	ldi	r25, 0x74	; 116
    175a:	f6 01       	movw	r30, r12
    175c:	90 83       	st	Z, r25
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    1760:	98 e7       	ldi	r25, 0x78	; 120
    1762:	f6 01       	movw	r30, r12
    1764:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1766:	98 2f       	mov	r25, r24
    1768:	96 95       	lsr	r25
    176a:	96 95       	lsr	r25
	state &= 0b00000011;
    176c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    176e:	91 30       	cpi	r25, 0x01	; 1
    1770:	21 f4       	brne	.+8      	; 0x177a <read_PNEUSENSORS+0x68>
		*right = 'c';
    1772:	93 e6       	ldi	r25, 0x63	; 99
    1774:	f7 01       	movw	r30, r14
    1776:	90 83       	st	Z, r25
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    177a:	92 30       	cpi	r25, 0x02	; 2
    177c:	21 f4       	brne	.+8      	; 0x1786 <read_PNEUSENSORS+0x74>
		*right = 'o';
    177e:	9f e6       	ldi	r25, 0x6F	; 111
    1780:	f7 01       	movw	r30, r14
    1782:	90 83       	st	Z, r25
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    1786:	93 30       	cpi	r25, 0x03	; 3
    1788:	21 f4       	brne	.+8      	; 0x1792 <read_PNEUSENSORS+0x80>
		*right = 't';
    178a:	94 e7       	ldi	r25, 0x74	; 116
    178c:	f7 01       	movw	r30, r14
    178e:	90 83       	st	Z, r25
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    1792:	98 e7       	ldi	r25, 0x78	; 120
    1794:	f7 01       	movw	r30, r14
    1796:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1798:	98 2f       	mov	r25, r24
    179a:	92 95       	swap	r25
    179c:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    179e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17a0:	91 30       	cpi	r25, 0x01	; 1
    17a2:	21 f4       	brne	.+8      	; 0x17ac <read_PNEUSENSORS+0x9a>
		*left = 'o';
    17a4:	9f e6       	ldi	r25, 0x6F	; 111
    17a6:	f8 01       	movw	r30, r16
    17a8:	90 83       	st	Z, r25
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <read_PNEUSENSORS+0xb8>
	} else if (state == 2) {
    17ac:	92 30       	cpi	r25, 0x02	; 2
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <read_PNEUSENSORS+0xa6>
		*left = 'c';
    17b0:	93 e6       	ldi	r25, 0x63	; 99
    17b2:	f8 01       	movw	r30, r16
    17b4:	90 83       	st	Z, r25
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <read_PNEUSENSORS+0xb8>
	} else if (state == 3) {
    17b8:	93 30       	cpi	r25, 0x03	; 3
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <read_PNEUSENSORS+0xb2>
		*left = 't';
    17bc:	94 e7       	ldi	r25, 0x74	; 116
    17be:	f8 01       	movw	r30, r16
    17c0:	90 83       	st	Z, r25
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <read_PNEUSENSORS+0xb8>
	} else {
		*left = 'x';
    17c4:	98 e7       	ldi	r25, 0x78	; 120
    17c6:	f8 01       	movw	r30, r16
    17c8:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    17ca:	81 ff       	sbrs	r24, 1
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <read_PNEUSENSORS+0xc2>
		*air = '0';
    17ce:	80 e3       	ldi	r24, 0x30	; 48
    17d0:	88 83       	st	Y, r24
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <read_PNEUSENSORS+0xc6>
	} else {
		*air = '1';
    17d4:	81 e3       	ldi	r24, 0x31	; 49
    17d6:	88 83       	st	Y, r24
	}
}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	08 95       	ret

000017ea <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	d8 2f       	mov	r29, r24
    17f0:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    17f2:	69 e0       	ldi	r22, 0x09	; 9
    17f4:	84 e2       	ldi	r24, 0x24	; 36
    17f6:	0e 94 b8 07 	call	0xf70	; 0xf70 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    17fa:	8d 2b       	or	r24, r29
    17fc:	48 2f       	mov	r20, r24
    17fe:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1800:	6a e0       	ldi	r22, 0x0A	; 10
    1802:	84 e2       	ldi	r24, 0x24	; 36
    1804:	0e 94 cf 07 	call	0xf9e	; 0xf9e <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	6a 97       	sbiw	r28, 0x1a	; 26
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    181c:	99 e0       	ldi	r25, 0x09	; 9
    181e:	e0 ec       	ldi	r30, 0xC0	; 192
    1820:	fb e7       	ldi	r31, 0x7B	; 123
    1822:	de 01       	movw	r26, r28
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	01 90       	ld	r0, Z+
    1828:	0d 92       	st	X+, r0
    182a:	9a 95       	dec	r25
    182c:	e1 f7       	brne	.-8      	; 0x1826 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    182e:	8c 36       	cpi	r24, 0x6C	; 108
    1830:	31 f1       	breq	.+76     	; 0x187e <close_PNEU+0x70>
    1832:	18 f4       	brcc	.+6      	; 0x183a <close_PNEU+0x2c>
    1834:	82 36       	cpi	r24, 0x62	; 98
    1836:	39 f0       	breq	.+14     	; 0x1846 <close_PNEU+0x38>
    1838:	75 c0       	rjmp	.+234    	; 0x1924 <close_PNEU+0x116>
    183a:	82 37       	cpi	r24, 0x72	; 114
    183c:	c1 f1       	breq	.+112    	; 0x18ae <close_PNEU+0xa0>
    183e:	83 37       	cpi	r24, 0x73	; 115
    1840:	09 f4       	brne	.+2      	; 0x1844 <close_PNEU+0x36>
    1842:	4d c0       	rjmp	.+154    	; 0x18de <close_PNEU+0xd0>
    1844:	6f c0       	rjmp	.+222    	; 0x1924 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1846:	6a ee       	ldi	r22, 0xEA	; 234
    1848:	84 e4       	ldi	r24, 0x44	; 68
    184a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    184e:	66 ee       	ldi	r22, 0xE6	; 230
    1850:	88 e8       	ldi	r24, 0x88	; 136
    1852:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1856:	88 ea       	ldi	r24, 0xA8	; 168
    1858:	9b e7       	ldi	r25, 0x7B	; 123
    185a:	9f 93       	push	r25
    185c:	8f 93       	push	r24
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	9f 93       	push	r25
    1864:	8f 93       	push	r24
    1866:	09 96       	adiw	r24, 0x09	; 9
    1868:	9f 93       	push	r25
    186a:	8f 93       	push	r24
    186c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	47 c0       	rjmp	.+142    	; 0x190c <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    187e:	6a ee       	ldi	r22, 0xEA	; 234
    1880:	84 e4       	ldi	r24, 0x44	; 68
    1882:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1886:	8d ea       	ldi	r24, 0xAD	; 173
    1888:	9b e7       	ldi	r25, 0x7B	; 123
    188a:	9f 93       	push	r25
    188c:	8f 93       	push	r24
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	9f 93       	push	r25
    1894:	8f 93       	push	r24
    1896:	09 96       	adiw	r24, 0x09	; 9
    1898:	9f 93       	push	r25
    189a:	8f 93       	push	r24
    189c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18ae:	66 ee       	ldi	r22, 0xE6	; 230
    18b0:	88 e8       	ldi	r24, 0x88	; 136
    18b2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    18b6:	82 eb       	ldi	r24, 0xB2	; 178
    18b8:	9b e7       	ldi	r25, 0x7B	; 123
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	9f 93       	push	r25
    18c4:	8f 93       	push	r24
    18c6:	09 96       	adiw	r24, 0x09	; 9
    18c8:	9f 93       	push	r25
    18ca:	8f 93       	push	r24
    18cc:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    18de:	6c ee       	ldi	r22, 0xEC	; 236
    18e0:	82 e2       	ldi	r24, 0x22	; 34
    18e2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    18e6:	88 eb       	ldi	r24, 0xB8	; 184
    18e8:	9b e7       	ldi	r25, 0x7B	; 123
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	9f 93       	push	r25
    18f4:	8f 93       	push	r24
    18f6:	09 96       	adiw	r24, 0x09	; 9
    18f8:	9f 93       	push	r25
    18fa:	8f 93       	push	r24
    18fc:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 21 0b 	call	0x1642	; 0x1642 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	be 01       	movw	r22, r28
    1916:	66 5f       	subi	r22, 0xF6	; 246
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
	return(GREATERPROMPT);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1924:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1926:	6a 96       	adiw	r28, 0x1a	; 26
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	69 97       	sbiw	r28, 0x19	; 25
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    1940:	98 e0       	ldi	r25, 0x08	; 8
    1942:	e9 ec       	ldi	r30, 0xC9	; 201
    1944:	fb e7       	ldi	r31, 0x7B	; 123
    1946:	de 01       	movw	r26, r28
    1948:	11 96       	adiw	r26, 0x01	; 1
    194a:	01 90       	ld	r0, Z+
    194c:	0d 92       	st	X+, r0
    194e:	9a 95       	dec	r25
    1950:	e1 f7       	brne	.-8      	; 0x194a <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    1952:	8c 36       	cpi	r24, 0x6C	; 108
    1954:	31 f1       	breq	.+76     	; 0x19a2 <open_PNEU+0x70>
    1956:	18 f4       	brcc	.+6      	; 0x195e <open_PNEU+0x2c>
    1958:	82 36       	cpi	r24, 0x62	; 98
    195a:	39 f0       	breq	.+14     	; 0x196a <open_PNEU+0x38>
    195c:	75 c0       	rjmp	.+234    	; 0x1a48 <open_PNEU+0x116>
    195e:	82 37       	cpi	r24, 0x72	; 114
    1960:	c1 f1       	breq	.+112    	; 0x19d2 <open_PNEU+0xa0>
    1962:	83 37       	cpi	r24, 0x73	; 115
    1964:	09 f4       	brne	.+2      	; 0x1968 <open_PNEU+0x36>
    1966:	4d c0       	rjmp	.+154    	; 0x1a02 <open_PNEU+0xd0>
    1968:	6f c0       	rjmp	.+222    	; 0x1a48 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    196a:	6e ea       	ldi	r22, 0xAE	; 174
    196c:	84 e4       	ldi	r24, 0x44	; 68
    196e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1972:	6e e6       	ldi	r22, 0x6E	; 110
    1974:	88 e8       	ldi	r24, 0x88	; 136
    1976:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    197a:	88 ea       	ldi	r24, 0xA8	; 168
    197c:	9b e7       	ldi	r25, 0x7B	; 123
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
    198a:	08 96       	adiw	r24, 0x08	; 8
    198c:	9f 93       	push	r25
    198e:	8f 93       	push	r24
    1990:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	47 c0       	rjmp	.+142    	; 0x1a30 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19a2:	6e ea       	ldi	r22, 0xAE	; 174
    19a4:	84 e4       	ldi	r24, 0x44	; 68
    19a6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    19aa:	8d ea       	ldi	r24, 0xAD	; 173
    19ac:	9b e7       	ldi	r25, 0x7B	; 123
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	08 96       	adiw	r24, 0x08	; 8
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	2f c0       	rjmp	.+94     	; 0x1a30 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19d2:	6e e6       	ldi	r22, 0x6E	; 110
    19d4:	88 e8       	ldi	r24, 0x88	; 136
    19d6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    19da:	82 eb       	ldi	r24, 0xB2	; 178
    19dc:	9b e7       	ldi	r25, 0x7B	; 123
    19de:	9f 93       	push	r25
    19e0:	8f 93       	push	r24
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	08 96       	adiw	r24, 0x08	; 8
    19ec:	9f 93       	push	r25
    19ee:	8f 93       	push	r24
    19f0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	17 c0       	rjmp	.+46     	; 0x1a30 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a02:	6e ec       	ldi	r22, 0xCE	; 206
    1a04:	82 e2       	ldi	r24, 0x22	; 34
    1a06:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a0a:	88 eb       	ldi	r24, 0xB8	; 184
    1a0c:	9b e7       	ldi	r25, 0x7B	; 123
    1a0e:	9f 93       	push	r25
    1a10:	8f 93       	push	r24
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	9f 93       	push	r25
    1a18:	8f 93       	push	r24
    1a1a:	08 96       	adiw	r24, 0x08	; 8
    1a1c:	9f 93       	push	r25
    1a1e:	8f 93       	push	r24
    1a20:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			break;
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	0e 94 21 0b 	call	0x1642	; 0x1642 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	be 01       	movw	r22, r28
    1a3a:	67 5f       	subi	r22, 0xF7	; 247
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
	return(GREATERPROMPT);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a48:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a4a:	69 96       	adiw	r28, 0x19	; 25
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1a78:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1a7c:	88 23       	and	r24, r24
    1a7e:	64 f4       	brge	.+24     	; 0x1a98 <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1a80:	80 e8       	ldi	r24, 0x80	; 128
    1a82:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1a86:	68 e0       	ldi	r22, 0x08	; 8
    1a88:	81 e2       	ldi	r24, 0x21	; 33
    1a8a:	0e 94 b8 07 	call	0xf70	; 0xf70 <read_MCP23008>
    1a8e:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <pneuState>
		toggle_BEEPER;
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1aba:	e0 e0       	ldi	r30, 0x00	; 0
    1abc:	f4 e0       	ldi	r31, 0x04	; 4
    1abe:	88 e0       	ldi	r24, 0x08	; 8
    1ac0:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1ac2:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1ac4:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1ac6:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1ac8:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1aca:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1acc:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1ace:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1ad0:	e0 e2       	ldi	r30, 0x20	; 32
    1ad2:	f4 e0       	ldi	r31, 0x04	; 4
    1ad4:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1ad6:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1ad8:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1ada:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1adc:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1ade:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1ae0:	e0 e4       	ldi	r30, 0x40	; 64
    1ae2:	f4 e0       	ldi	r31, 0x04	; 4
    1ae4:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1ae6:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1ae8:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1aea:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1aec:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1aee:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1af0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1af2:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1af4:	e0 e6       	ldi	r30, 0x60	; 96
    1af6:	f4 e0       	ldi	r31, 0x04	; 4
    1af8:	94 e0       	ldi	r25, 0x04	; 4
    1afa:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1afc:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1afe:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b00:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b02:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b04:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b06:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b08:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b0a:	e0 e8       	ldi	r30, 0x80	; 128
    1b0c:	f4 e0       	ldi	r31, 0x04	; 4
    1b0e:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b10:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b12:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b14:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b16:	e0 ea       	ldi	r30, 0xA0	; 160
    1b18:	f4 e0       	ldi	r31, 0x04	; 4
    1b1a:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b1c:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b1e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b20:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b22:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b24:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b26:	86 8b       	std	Z+22, r24	; 0x16
    1b28:	08 95       	ret

00001b2a <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b2a:	2f 92       	push	r2
    1b2c:	3f 92       	push	r3
    1b2e:	4f 92       	push	r4
    1b30:	5f 92       	push	r5
    1b32:	6f 92       	push	r6
    1b34:	7f 92       	push	r7
    1b36:	8f 92       	push	r8
    1b38:	9f 92       	push	r9
    1b3a:	af 92       	push	r10
    1b3c:	bf 92       	push	r11
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	cd 59       	subi	r28, 0x9D	; 157
    1b54:	d2 40       	sbci	r29, 0x02	; 2
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1b5a:	92 e4       	ldi	r25, 0x42	; 66
    1b5c:	e8 e1       	ldi	r30, 0x18	; 24
    1b5e:	fc e7       	ldi	r31, 0x7C	; 124
    1b60:	de 01       	movw	r26, r28
    1b62:	af 5a       	subi	r26, 0xAF	; 175
    1b64:	be 4f       	sbci	r27, 0xFE	; 254
    1b66:	01 90       	ld	r0, Z+
    1b68:	0d 92       	st	X+, r0
    1b6a:	9a 95       	dec	r25
    1b6c:	e1 f7       	brne	.-8      	; 0x1b66 <report+0x3c>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1b6e:	90 e2       	ldi	r25, 0x20	; 32
    1b70:	ea e5       	ldi	r30, 0x5A	; 90
    1b72:	fc e7       	ldi	r31, 0x7C	; 124
    1b74:	de 01       	movw	r26, r28
    1b76:	ad 56       	subi	r26, 0x6D	; 109
    1b78:	be 4f       	sbci	r27, 0xFE	; 254
    1b7a:	01 90       	ld	r0, Z+
    1b7c:	0d 92       	st	X+, r0
    1b7e:	9a 95       	dec	r25
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <report+0x50>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1b82:	92 e1       	ldi	r25, 0x12	; 18
    1b84:	ea e7       	ldi	r30, 0x7A	; 122
    1b86:	fc e7       	ldi	r31, 0x7C	; 124
    1b88:	de 01       	movw	r26, r28
    1b8a:	ad 54       	subi	r26, 0x4D	; 77
    1b8c:	be 4f       	sbci	r27, 0xFE	; 254
    1b8e:	01 90       	ld	r0, Z+
    1b90:	0d 92       	st	X+, r0
    1b92:	9a 95       	dec	r25
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <report+0x64>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1b96:	91 e3       	ldi	r25, 0x31	; 49
    1b98:	ec e8       	ldi	r30, 0x8C	; 140
    1b9a:	fc e7       	ldi	r31, 0x7C	; 124
    1b9c:	de 01       	movw	r26, r28
    1b9e:	ab 53       	subi	r26, 0x3B	; 59
    1ba0:	be 4f       	sbci	r27, 0xFE	; 254
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	0d 92       	st	X+, r0
    1ba6:	9a 95       	dec	r25
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <report+0x78>
//	const char dformat_PNU[] = "%c %c %c %c";
	const char dformat_PN1[] = "left:%c   right:%c";
    1baa:	93 e1       	ldi	r25, 0x13	; 19
    1bac:	ed eb       	ldi	r30, 0xBD	; 189
    1bae:	fc e7       	ldi	r31, 0x7C	; 124
    1bb0:	de 01       	movw	r26, r28
    1bb2:	aa 50       	subi	r26, 0x0A	; 10
    1bb4:	be 4f       	sbci	r27, 0xFE	; 254
    1bb6:	01 90       	ld	r0, Z+
    1bb8:	0d 92       	st	X+, r0
    1bba:	9a 95       	dec	r25
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <report+0x8c>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1bbe:	93 e1       	ldi	r25, 0x13	; 19
    1bc0:	e0 ed       	ldi	r30, 0xD0	; 208
    1bc2:	fc e7       	ldi	r31, 0x7C	; 124
    1bc4:	de 01       	movw	r26, r28
    1bc6:	a7 5f       	subi	r26, 0xF7	; 247
    1bc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1bca:	01 90       	ld	r0, Z+
    1bcc:	0d 92       	st	X+, r0
    1bce:	9a 95       	dec	r25
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <report+0xa0>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1bd2:	9d e1       	ldi	r25, 0x1D	; 29
    1bd4:	e3 ee       	ldi	r30, 0xE3	; 227
    1bd6:	fc e7       	ldi	r31, 0x7C	; 124
    1bd8:	de 01       	movw	r26, r28
    1bda:	a4 5e       	subi	r26, 0xE4	; 228
    1bdc:	bd 4f       	sbci	r27, 0xFD	; 253
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	9a 95       	dec	r25
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <report+0xb4>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1be6:	99 e2       	ldi	r25, 0x29	; 41
    1be8:	e0 e0       	ldi	r30, 0x00	; 0
    1bea:	fd e7       	ldi	r31, 0x7D	; 125
    1bec:	de 01       	movw	r26, r28
    1bee:	a7 5c       	subi	r26, 0xC7	; 199
    1bf0:	bd 4f       	sbci	r27, 0xFD	; 253
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	0d 92       	st	X+, r0
    1bf6:	9a 95       	dec	r25
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <report+0xc8>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1bfa:	9d e0       	ldi	r25, 0x0D	; 13
    1bfc:	e9 e2       	ldi	r30, 0x29	; 41
    1bfe:	fd e7       	ldi	r31, 0x7D	; 125
    1c00:	de 01       	movw	r26, r28
    1c02:	ae 59       	subi	r26, 0x9E	; 158
    1c04:	bd 4f       	sbci	r27, 0xFD	; 253
    1c06:	01 90       	ld	r0, Z+
    1c08:	0d 92       	st	X+, r0
    1c0a:	9a 95       	dec	r25
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <report+0xdc>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c0e:	91 e1       	ldi	r25, 0x11	; 17
    1c10:	e6 e3       	ldi	r30, 0x36	; 54
    1c12:	fd e7       	ldi	r31, 0x7D	; 125
    1c14:	de 01       	movw	r26, r28
    1c16:	a1 59       	subi	r26, 0x91	; 145
    1c18:	bd 4f       	sbci	r27, 0xFD	; 253
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	9a 95       	dec	r25
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <report+0xf0>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1c22:	08 2f       	mov	r16, r24
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	84 e3       	ldi	r24, 0x34	; 52
    1c28:	80 9f       	mul	r24, r16
    1c2a:	f0 01       	movw	r30, r0
    1c2c:	81 9f       	mul	r24, r17
    1c2e:	f0 0d       	add	r31, r0
    1c30:	11 24       	eor	r1, r1
    1c32:	ed 5f       	subi	r30, 0xFD	; 253
    1c34:	f7 4d       	sbci	r31, 0xD7	; 215
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	8f 36       	cpi	r24, 0x6F	; 111
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <report+0x114>
    1c3c:	49 c1       	rjmp	.+658    	; 0x1ed0 <report+0x3a6>
    1c3e:	30 f4       	brcc	.+12     	; 0x1c4c <report+0x122>
    1c40:	86 35       	cpi	r24, 0x56	; 86
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <report+0x11c>
    1c44:	9f c3       	rjmp	.+1854   	; 0x2384 <report+0x85a>
    1c46:	85 36       	cpi	r24, 0x65	; 101
    1c48:	59 f0       	breq	.+22     	; 0x1c60 <report+0x136>
    1c4a:	ef c3       	rjmp	.+2014   	; 0x242a <report+0x900>
    1c4c:	84 37       	cpi	r24, 0x74	; 116
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <report+0x128>
    1c50:	ca c2       	rjmp	.+1428   	; 0x21e6 <report+0x6bc>
    1c52:	86 37       	cpi	r24, 0x76	; 118
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <report+0x12e>
    1c56:	27 c3       	rjmp	.+1614   	; 0x22a6 <report+0x77c>
    1c58:	80 37       	cpi	r24, 0x70	; 112
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <report+0x134>
    1c5c:	e6 c3       	rjmp	.+1996   	; 0x242a <report+0x900>
    1c5e:	24 c2       	rjmp	.+1096   	; 0x20a8 <report+0x57e>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
    1c66:	f6 2e       	mov	r15, r22
    1c68:	e7 2e       	mov	r14, r23
    1c6a:	d8 2e       	mov	r13, r24
    1c6c:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <get_humidity>
    1c74:	b6 2e       	mov	r11, r22
    1c76:	a7 2e       	mov	r10, r23
    1c78:	98 2e       	mov	r9, r24
    1c7a:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
    1c82:	c0 57       	subi	r28, 0x70	; 112
    1c84:	dd 4f       	sbci	r29, 0xFD	; 253
    1c86:	68 83       	st	Y, r22
    1c88:	c0 59       	subi	r28, 0x90	; 144
    1c8a:	d2 40       	sbci	r29, 0x02	; 2
    1c8c:	cf 56       	subi	r28, 0x6F	; 111
    1c8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1c90:	78 83       	st	Y, r23
    1c92:	c1 59       	subi	r28, 0x91	; 145
    1c94:	d2 40       	sbci	r29, 0x02	; 2
    1c96:	ce 56       	subi	r28, 0x6E	; 110
    1c98:	dd 4f       	sbci	r29, 0xFD	; 253
    1c9a:	88 83       	st	Y, r24
    1c9c:	c2 59       	subi	r28, 0x92	; 146
    1c9e:	d2 40       	sbci	r29, 0x02	; 2
    1ca0:	cd 56       	subi	r28, 0x6D	; 109
    1ca2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ca4:	98 83       	st	Y, r25
    1ca6:	c3 59       	subi	r28, 0x93	; 147
    1ca8:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <get_humidity>
    1cb0:	cc 56       	subi	r28, 0x6C	; 108
    1cb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1cb4:	68 83       	st	Y, r22
    1cb6:	c4 59       	subi	r28, 0x94	; 148
    1cb8:	d2 40       	sbci	r29, 0x02	; 2
    1cba:	cb 56       	subi	r28, 0x6B	; 107
    1cbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1cbe:	78 83       	st	Y, r23
    1cc0:	c5 59       	subi	r28, 0x95	; 149
    1cc2:	d2 40       	sbci	r29, 0x02	; 2
    1cc4:	ca 56       	subi	r28, 0x6A	; 106
    1cc6:	dd 4f       	sbci	r29, 0xFD	; 253
    1cc8:	88 83       	st	Y, r24
    1cca:	c6 59       	subi	r28, 0x96	; 150
    1ccc:	d2 40       	sbci	r29, 0x02	; 2
    1cce:	c9 56       	subi	r28, 0x69	; 105
    1cd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1cd2:	98 83       	st	Y, r25
    1cd4:	c7 59       	subi	r28, 0x97	; 151
    1cd6:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
    1cde:	c8 56       	subi	r28, 0x68	; 104
    1ce0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ce2:	68 83       	st	Y, r22
    1ce4:	c8 59       	subi	r28, 0x98	; 152
    1ce6:	d2 40       	sbci	r29, 0x02	; 2
    1ce8:	c7 56       	subi	r28, 0x67	; 103
    1cea:	dd 4f       	sbci	r29, 0xFD	; 253
    1cec:	78 83       	st	Y, r23
    1cee:	c9 59       	subi	r28, 0x99	; 153
    1cf0:	d2 40       	sbci	r29, 0x02	; 2
    1cf2:	c6 56       	subi	r28, 0x66	; 102
    1cf4:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf6:	88 83       	st	Y, r24
    1cf8:	ca 59       	subi	r28, 0x9A	; 154
    1cfa:	d2 40       	sbci	r29, 0x02	; 2
    1cfc:	c5 56       	subi	r28, 0x65	; 101
    1cfe:	dd 4f       	sbci	r29, 0xFD	; 253
    1d00:	98 83       	st	Y, r25
    1d02:	cb 59       	subi	r28, 0x9B	; 155
    1d04:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <get_humidity>
    1d0c:	76 2e       	mov	r7, r22
    1d0e:	67 2e       	mov	r6, r23
    1d10:	58 2e       	mov	r5, r24
    1d12:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	0e 94 17 13 	call	0x262e	; 0x262e <get_temperature>
    1d1a:	c4 56       	subi	r28, 0x64	; 100
    1d1c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d1e:	68 83       	st	Y, r22
    1d20:	cc 59       	subi	r28, 0x9C	; 156
    1d22:	d2 40       	sbci	r29, 0x02	; 2
    1d24:	c3 56       	subi	r28, 0x63	; 99
    1d26:	dd 4f       	sbci	r29, 0xFD	; 253
    1d28:	78 83       	st	Y, r23
    1d2a:	cd 59       	subi	r28, 0x9D	; 157
    1d2c:	d2 40       	sbci	r29, 0x02	; 2
    1d2e:	38 2e       	mov	r3, r24
    1d30:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1d32:	ce 01       	movw	r24, r28
    1d34:	8b 5e       	subi	r24, 0xEB	; 235
    1d36:	9e 4f       	sbci	r25, 0xFE	; 254
    1d38:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1d3c:	24 e3       	ldi	r18, 0x34	; 52
    1d3e:	20 9f       	mul	r18, r16
    1d40:	c0 01       	movw	r24, r0
    1d42:	21 9f       	mul	r18, r17
    1d44:	90 0d       	add	r25, r0
    1d46:	11 24       	eor	r1, r1
    1d48:	82 5d       	subi	r24, 0xD2	; 210
    1d4a:	97 4d       	sbci	r25, 0xD7	; 215
    1d4c:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d50:	22 ff       	sbrs	r18, 2
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <report+0x230>
    1d54:	22 e0       	ldi	r18, 0x02	; 2
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <report+0x234>
    1d5a:	21 e0       	ldi	r18, 0x01	; 1
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	9f 93       	push	r25
    1d60:	8f 93       	push	r24
    1d62:	2f 92       	push	r2
    1d64:	3f 92       	push	r3
    1d66:	c3 56       	subi	r28, 0x63	; 99
    1d68:	dd 4f       	sbci	r29, 0xFD	; 253
    1d6a:	88 81       	ld	r24, Y
    1d6c:	cd 59       	subi	r28, 0x9D	; 157
    1d6e:	d2 40       	sbci	r29, 0x02	; 2
    1d70:	8f 93       	push	r24
    1d72:	c4 56       	subi	r28, 0x64	; 100
    1d74:	dd 4f       	sbci	r29, 0xFD	; 253
    1d76:	98 81       	ld	r25, Y
    1d78:	cc 59       	subi	r28, 0x9C	; 156
    1d7a:	d2 40       	sbci	r29, 0x02	; 2
    1d7c:	9f 93       	push	r25
    1d7e:	4f 92       	push	r4
    1d80:	5f 92       	push	r5
    1d82:	6f 92       	push	r6
    1d84:	7f 92       	push	r7
    1d86:	c5 56       	subi	r28, 0x65	; 101
    1d88:	dd 4f       	sbci	r29, 0xFD	; 253
    1d8a:	88 81       	ld	r24, Y
    1d8c:	cb 59       	subi	r28, 0x9B	; 155
    1d8e:	d2 40       	sbci	r29, 0x02	; 2
    1d90:	8f 93       	push	r24
    1d92:	c6 56       	subi	r28, 0x66	; 102
    1d94:	dd 4f       	sbci	r29, 0xFD	; 253
    1d96:	98 81       	ld	r25, Y
    1d98:	ca 59       	subi	r28, 0x9A	; 154
    1d9a:	d2 40       	sbci	r29, 0x02	; 2
    1d9c:	9f 93       	push	r25
    1d9e:	c7 56       	subi	r28, 0x67	; 103
    1da0:	dd 4f       	sbci	r29, 0xFD	; 253
    1da2:	88 81       	ld	r24, Y
    1da4:	c9 59       	subi	r28, 0x99	; 153
    1da6:	d2 40       	sbci	r29, 0x02	; 2
    1da8:	8f 93       	push	r24
    1daa:	c8 56       	subi	r28, 0x68	; 104
    1dac:	dd 4f       	sbci	r29, 0xFD	; 253
    1dae:	98 81       	ld	r25, Y
    1db0:	c8 59       	subi	r28, 0x98	; 152
    1db2:	d2 40       	sbci	r29, 0x02	; 2
    1db4:	9f 93       	push	r25
    1db6:	c9 56       	subi	r28, 0x69	; 105
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	88 81       	ld	r24, Y
    1dbc:	c7 59       	subi	r28, 0x97	; 151
    1dbe:	d2 40       	sbci	r29, 0x02	; 2
    1dc0:	8f 93       	push	r24
    1dc2:	ca 56       	subi	r28, 0x6A	; 106
    1dc4:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc6:	98 81       	ld	r25, Y
    1dc8:	c6 59       	subi	r28, 0x96	; 150
    1dca:	d2 40       	sbci	r29, 0x02	; 2
    1dcc:	9f 93       	push	r25
    1dce:	cb 56       	subi	r28, 0x6B	; 107
    1dd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd2:	88 81       	ld	r24, Y
    1dd4:	c5 59       	subi	r28, 0x95	; 149
    1dd6:	d2 40       	sbci	r29, 0x02	; 2
    1dd8:	8f 93       	push	r24
    1dda:	cc 56       	subi	r28, 0x6C	; 108
    1ddc:	dd 4f       	sbci	r29, 0xFD	; 253
    1dde:	98 81       	ld	r25, Y
    1de0:	c4 59       	subi	r28, 0x94	; 148
    1de2:	d2 40       	sbci	r29, 0x02	; 2
    1de4:	9f 93       	push	r25
    1de6:	cd 56       	subi	r28, 0x6D	; 109
    1de8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dea:	88 81       	ld	r24, Y
    1dec:	c3 59       	subi	r28, 0x93	; 147
    1dee:	d2 40       	sbci	r29, 0x02	; 2
    1df0:	8f 93       	push	r24
    1df2:	ce 56       	subi	r28, 0x6E	; 110
    1df4:	dd 4f       	sbci	r29, 0xFD	; 253
    1df6:	98 81       	ld	r25, Y
    1df8:	c2 59       	subi	r28, 0x92	; 146
    1dfa:	d2 40       	sbci	r29, 0x02	; 2
    1dfc:	9f 93       	push	r25
    1dfe:	cf 56       	subi	r28, 0x6F	; 111
    1e00:	dd 4f       	sbci	r29, 0xFD	; 253
    1e02:	88 81       	ld	r24, Y
    1e04:	c1 59       	subi	r28, 0x91	; 145
    1e06:	d2 40       	sbci	r29, 0x02	; 2
    1e08:	8f 93       	push	r24
    1e0a:	c0 57       	subi	r28, 0x70	; 112
    1e0c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e0e:	98 81       	ld	r25, Y
    1e10:	c0 59       	subi	r28, 0x90	; 144
    1e12:	d2 40       	sbci	r29, 0x02	; 2
    1e14:	9f 93       	push	r25
    1e16:	8f 92       	push	r8
    1e18:	9f 92       	push	r9
    1e1a:	af 92       	push	r10
    1e1c:	bf 92       	push	r11
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	ce 01       	movw	r24, r28
    1e28:	8b 5e       	subi	r24, 0xEB	; 235
    1e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e2c:	9f 93       	push	r25
    1e2e:	8f 93       	push	r24
    1e30:	3f 93       	push	r19
    1e32:	2f 93       	push	r18
    1e34:	cc 96       	adiw	r24, 0x3c	; 60
    1e36:	9f 93       	push	r25
    1e38:	8f 93       	push	r24
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	0f 5f       	subi	r16, 0xFF	; 255
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	1f 93       	push	r17
    1e42:	0f 93       	push	r16
    1e44:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			checksum_NMEA(outbuf);
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e52:	f8 01       	movw	r30, r16
    1e54:	01 90       	ld	r0, Z+
    1e56:	00 20       	and	r0, r0
    1e58:	e9 f7       	brne	.-6      	; 0x1e54 <report+0x32a>
    1e5a:	31 97       	sbiw	r30, 0x01	; 1
    1e5c:	af 01       	movw	r20, r30
    1e5e:	40 1b       	sub	r20, r16
    1e60:	51 0b       	sbc	r21, r17
    1e62:	b8 01       	movw	r22, r16
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	61 ed       	ldi	r22, 0xD1	; 209
    1e6e:	7b e7       	ldi	r23, 0x7B	; 123
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    1e76:	26 e6       	ldi	r18, 0x66	; 102
    1e78:	36 e6       	ldi	r19, 0x66	; 102
    1e7a:	46 ee       	ldi	r20, 0xE6	; 230
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	6f 2d       	mov	r22, r15
    1e80:	7e 2d       	mov	r23, r14
    1e82:	8d 2d       	mov	r24, r13
    1e84:	9c 2d       	mov	r25, r12
    1e86:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1e8a:	8f 92       	push	r8
    1e8c:	9f 92       	push	r9
    1e8e:	af 92       	push	r10
    1e90:	bf 92       	push	r11
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	52 e4       	ldi	r21, 0x42	; 66
    1e9a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	7f 93       	push	r23
    1ea4:	6f 93       	push	r22
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	81 ee       	ldi	r24, 0xE1	; 225
    1eb0:	9b e7       	ldi	r25, 0x7B	; 123
    1eb2:	9f 93       	push	r25
    1eb4:	8f 93       	push	r24
    1eb6:	1f 93       	push	r17
    1eb8:	0f 93       	push	r16
    1eba:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    1ebe:	42 e0       	ldi	r20, 0x02	; 2
    1ec0:	b8 01       	movw	r22, r16
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			break;
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    1ece:	ae c2       	rjmp	.+1372   	; 0x242c <report+0x902>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    1ed0:	ae 01       	movw	r20, r28
    1ed2:	48 57       	subi	r20, 0x78	; 120
    1ed4:	5d 4f       	sbci	r21, 0xFD	; 253
    1ed6:	be 01       	movw	r22, r28
    1ed8:	6c 57       	subi	r22, 0x7C	; 124
    1eda:	7d 4f       	sbci	r23, 0xFD	; 253
    1edc:	ce 01       	movw	r24, r28
    1ede:	80 58       	subi	r24, 0x80	; 128
    1ee0:	9d 4f       	sbci	r25, 0xFD	; 253
    1ee2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <get_orientation>
			get_time(currenttime);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	8b 5e       	subi	r24, 0xEB	; 235
    1eea:	9e 4f       	sbci	r25, 0xFE	; 254
    1eec:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1ef0:	24 e3       	ldi	r18, 0x34	; 52
    1ef2:	20 9f       	mul	r18, r16
    1ef4:	c0 01       	movw	r24, r0
    1ef6:	21 9f       	mul	r18, r17
    1ef8:	90 0d       	add	r25, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	82 5d       	subi	r24, 0xD2	; 210
    1efe:	97 4d       	sbci	r25, 0xD7	; 215
    1f00:	c8 57       	subi	r28, 0x78	; 120
    1f02:	dd 4f       	sbci	r29, 0xFD	; 253
    1f04:	18 81       	ld	r17, Y
    1f06:	c8 58       	subi	r28, 0x88	; 136
    1f08:	d2 40       	sbci	r29, 0x02	; 2
    1f0a:	c7 57       	subi	r28, 0x77	; 119
    1f0c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f0e:	08 81       	ld	r16, Y
    1f10:	c9 58       	subi	r28, 0x89	; 137
    1f12:	d2 40       	sbci	r29, 0x02	; 2
    1f14:	c6 57       	subi	r28, 0x76	; 118
    1f16:	dd 4f       	sbci	r29, 0xFD	; 253
    1f18:	f8 80       	ld	r15, Y
    1f1a:	ca 58       	subi	r28, 0x8A	; 138
    1f1c:	d2 40       	sbci	r29, 0x02	; 2
    1f1e:	c5 57       	subi	r28, 0x75	; 117
    1f20:	dd 4f       	sbci	r29, 0xFD	; 253
    1f22:	e8 80       	ld	r14, Y
    1f24:	cb 58       	subi	r28, 0x8B	; 139
    1f26:	d2 40       	sbci	r29, 0x02	; 2
    1f28:	cc 57       	subi	r28, 0x7C	; 124
    1f2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2c:	e8 81       	ld	r30, Y
    1f2e:	c4 58       	subi	r28, 0x84	; 132
    1f30:	d2 40       	sbci	r29, 0x02	; 2
    1f32:	cb 57       	subi	r28, 0x7B	; 123
    1f34:	dd 4f       	sbci	r29, 0xFD	; 253
    1f36:	f8 81       	ld	r31, Y
    1f38:	c5 58       	subi	r28, 0x85	; 133
    1f3a:	d2 40       	sbci	r29, 0x02	; 2
    1f3c:	ca 57       	subi	r28, 0x7A	; 122
    1f3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f40:	a8 81       	ld	r26, Y
    1f42:	c6 58       	subi	r28, 0x86	; 134
    1f44:	d2 40       	sbci	r29, 0x02	; 2
    1f46:	c9 57       	subi	r28, 0x79	; 121
    1f48:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4a:	b8 81       	ld	r27, Y
    1f4c:	c7 58       	subi	r28, 0x87	; 135
    1f4e:	d2 40       	sbci	r29, 0x02	; 2
    1f50:	c0 58       	subi	r28, 0x80	; 128
    1f52:	dd 4f       	sbci	r29, 0xFD	; 253
    1f54:	48 81       	ld	r20, Y
    1f56:	c0 58       	subi	r28, 0x80	; 128
    1f58:	d2 40       	sbci	r29, 0x02	; 2
    1f5a:	cf 57       	subi	r28, 0x7F	; 127
    1f5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5e:	58 81       	ld	r21, Y
    1f60:	c1 58       	subi	r28, 0x81	; 129
    1f62:	d2 40       	sbci	r29, 0x02	; 2
    1f64:	ce 57       	subi	r28, 0x7E	; 126
    1f66:	dd 4f       	sbci	r29, 0xFD	; 253
    1f68:	68 81       	ld	r22, Y
    1f6a:	c2 58       	subi	r28, 0x82	; 130
    1f6c:	d2 40       	sbci	r29, 0x02	; 2
    1f6e:	cd 57       	subi	r28, 0x7D	; 125
    1f70:	dd 4f       	sbci	r29, 0xFD	; 253
    1f72:	78 81       	ld	r23, Y
    1f74:	c3 58       	subi	r28, 0x83	; 131
    1f76:	d2 40       	sbci	r29, 0x02	; 2
    1f78:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f7c:	22 ff       	sbrs	r18, 2
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <report+0x45c>
    1f80:	22 e0       	ldi	r18, 0x02	; 2
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <report+0x460>
    1f86:	21 e0       	ldi	r18, 0x01	; 1
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	9f 93       	push	r25
    1f8c:	8f 93       	push	r24
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	bf 93       	push	r27
    1f98:	af 93       	push	r26
    1f9a:	ff 93       	push	r31
    1f9c:	ef 93       	push	r30
    1f9e:	7f 93       	push	r23
    1fa0:	6f 93       	push	r22
    1fa2:	5f 93       	push	r21
    1fa4:	4f 93       	push	r20
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	8b 5e       	subi	r24, 0xEB	; 235
    1faa:	9e 4f       	sbci	r25, 0xFE	; 254
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	3f 93       	push	r19
    1fb2:	2f 93       	push	r18
    1fb4:	82 58       	subi	r24, 0x82	; 130
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	9f 93       	push	r25
    1fba:	8f 93       	push	r24
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	0f 5f       	subi	r16, 0xFF	; 255
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	1f 93       	push	r17
    1fc4:	0f 93       	push	r16
    1fc6:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			checksum_NMEA(outbuf);
    1fca:	c8 01       	movw	r24, r16
    1fcc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	00 20       	and	r0, r0
    1fd6:	e9 f7       	brne	.-6      	; 0x1fd2 <report+0x4a8>
    1fd8:	31 97       	sbiw	r30, 0x01	; 1
    1fda:	af 01       	movw	r20, r30
    1fdc:	40 1b       	sub	r20, r16
    1fde:	51 0b       	sbc	r21, r17
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			writestr_OLED(1, "Orientation", 1);
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	67 ef       	ldi	r22, 0xF7	; 247
    1fec:	7b e7       	ldi	r23, 0x7B	; 123
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    1ff4:	c5 57       	subi	r28, 0x75	; 117
    1ff6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff8:	88 81       	ld	r24, Y
    1ffa:	cb 58       	subi	r28, 0x8B	; 139
    1ffc:	d2 40       	sbci	r29, 0x02	; 2
    1ffe:	8f 93       	push	r24
    2000:	c6 57       	subi	r28, 0x76	; 118
    2002:	dd 4f       	sbci	r29, 0xFD	; 253
    2004:	88 81       	ld	r24, Y
    2006:	ca 58       	subi	r28, 0x8A	; 138
    2008:	d2 40       	sbci	r29, 0x02	; 2
    200a:	8f 93       	push	r24
    200c:	c7 57       	subi	r28, 0x77	; 119
    200e:	dd 4f       	sbci	r29, 0xFD	; 253
    2010:	88 81       	ld	r24, Y
    2012:	c9 58       	subi	r28, 0x89	; 137
    2014:	d2 40       	sbci	r29, 0x02	; 2
    2016:	8f 93       	push	r24
    2018:	c8 57       	subi	r28, 0x78	; 120
    201a:	dd 4f       	sbci	r29, 0xFD	; 253
    201c:	88 81       	ld	r24, Y
    201e:	c8 58       	subi	r28, 0x88	; 136
    2020:	d2 40       	sbci	r29, 0x02	; 2
    2022:	8f 93       	push	r24
    2024:	c9 57       	subi	r28, 0x79	; 121
    2026:	dd 4f       	sbci	r29, 0xFD	; 253
    2028:	88 81       	ld	r24, Y
    202a:	c7 58       	subi	r28, 0x87	; 135
    202c:	d2 40       	sbci	r29, 0x02	; 2
    202e:	8f 93       	push	r24
    2030:	ca 57       	subi	r28, 0x7A	; 122
    2032:	dd 4f       	sbci	r29, 0xFD	; 253
    2034:	88 81       	ld	r24, Y
    2036:	c6 58       	subi	r28, 0x86	; 134
    2038:	d2 40       	sbci	r29, 0x02	; 2
    203a:	8f 93       	push	r24
    203c:	cb 57       	subi	r28, 0x7B	; 123
    203e:	dd 4f       	sbci	r29, 0xFD	; 253
    2040:	88 81       	ld	r24, Y
    2042:	c5 58       	subi	r28, 0x85	; 133
    2044:	d2 40       	sbci	r29, 0x02	; 2
    2046:	8f 93       	push	r24
    2048:	cc 57       	subi	r28, 0x7C	; 124
    204a:	dd 4f       	sbci	r29, 0xFD	; 253
    204c:	88 81       	ld	r24, Y
    204e:	c4 58       	subi	r28, 0x84	; 132
    2050:	d2 40       	sbci	r29, 0x02	; 2
    2052:	8f 93       	push	r24
    2054:	cd 57       	subi	r28, 0x7D	; 125
    2056:	dd 4f       	sbci	r29, 0xFD	; 253
    2058:	88 81       	ld	r24, Y
    205a:	c3 58       	subi	r28, 0x83	; 131
    205c:	d2 40       	sbci	r29, 0x02	; 2
    205e:	8f 93       	push	r24
    2060:	ce 57       	subi	r28, 0x7E	; 126
    2062:	dd 4f       	sbci	r29, 0xFD	; 253
    2064:	88 81       	ld	r24, Y
    2066:	c2 58       	subi	r28, 0x82	; 130
    2068:	d2 40       	sbci	r29, 0x02	; 2
    206a:	8f 93       	push	r24
    206c:	cf 57       	subi	r28, 0x7F	; 127
    206e:	dd 4f       	sbci	r29, 0xFD	; 253
    2070:	88 81       	ld	r24, Y
    2072:	c1 58       	subi	r28, 0x81	; 129
    2074:	d2 40       	sbci	r29, 0x02	; 2
    2076:	8f 93       	push	r24
    2078:	c0 58       	subi	r28, 0x80	; 128
    207a:	dd 4f       	sbci	r29, 0xFD	; 253
    207c:	88 81       	ld	r24, Y
    207e:	c0 58       	subi	r28, 0x80	; 128
    2080:	d2 40       	sbci	r29, 0x02	; 2
    2082:	8f 93       	push	r24
    2084:	ce 01       	movw	r24, r28
    2086:	8d 54       	subi	r24, 0x4D	; 77
    2088:	9e 4f       	sbci	r25, 0xFE	; 254
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	1f 93       	push	r17
    2090:	0f 93       	push	r16
    2092:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	42 e0       	ldi	r20, 0x02	; 2
    209c:	b8 01       	movw	r22, r16
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    20a6:	c2 c1       	rjmp	.+900    	; 0x242c <report+0x902>

		case 'p':
			get_time(currenttime);
    20a8:	ce 01       	movw	r24, r28
    20aa:	8b 5e       	subi	r24, 0xEB	; 235
    20ac:	9e 4f       	sbci	r25, 0xFE	; 254
    20ae:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    20b2:	9e 01       	movw	r18, r28
    20b4:	21 57       	subi	r18, 0x71	; 113
    20b6:	3d 4f       	sbci	r19, 0xFD	; 253
    20b8:	ae 01       	movw	r20, r28
    20ba:	42 57       	subi	r20, 0x72	; 114
    20bc:	5d 4f       	sbci	r21, 0xFD	; 253
    20be:	be 01       	movw	r22, r28
    20c0:	63 57       	subi	r22, 0x73	; 115
    20c2:	7d 4f       	sbci	r23, 0xFD	; 253
    20c4:	ce 01       	movw	r24, r28
    20c6:	84 57       	subi	r24, 0x74	; 116
    20c8:	9d 4f       	sbci	r25, 0xFD	; 253
    20ca:	0e 94 89 0b 	call	0x1712	; 0x1712 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    20ce:	24 e3       	ldi	r18, 0x34	; 52
    20d0:	20 9f       	mul	r18, r16
    20d2:	c0 01       	movw	r24, r0
    20d4:	21 9f       	mul	r18, r17
    20d6:	90 0d       	add	r25, r0
    20d8:	11 24       	eor	r1, r1
    20da:	82 5d       	subi	r24, 0xD2	; 210
    20dc:	97 4d       	sbci	r25, 0xD7	; 215
    20de:	c1 57       	subi	r28, 0x71	; 113
    20e0:	dd 4f       	sbci	r29, 0xFD	; 253
    20e2:	78 81       	ld	r23, Y
    20e4:	cf 58       	subi	r28, 0x8F	; 143
    20e6:	d2 40       	sbci	r29, 0x02	; 2
    20e8:	c2 57       	subi	r28, 0x72	; 114
    20ea:	dd 4f       	sbci	r29, 0xFD	; 253
    20ec:	68 81       	ld	r22, Y
    20ee:	ce 58       	subi	r28, 0x8E	; 142
    20f0:	d2 40       	sbci	r29, 0x02	; 2
    20f2:	c3 57       	subi	r28, 0x73	; 115
    20f4:	dd 4f       	sbci	r29, 0xFD	; 253
    20f6:	58 81       	ld	r21, Y
    20f8:	cd 58       	subi	r28, 0x8D	; 141
    20fa:	d2 40       	sbci	r29, 0x02	; 2
    20fc:	c4 57       	subi	r28, 0x74	; 116
    20fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2100:	48 81       	ld	r20, Y
    2102:	cc 58       	subi	r28, 0x8C	; 140
    2104:	d2 40       	sbci	r29, 0x02	; 2
    2106:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    210a:	22 ff       	sbrs	r18, 2
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <report+0x5ea>
    210e:	22 e0       	ldi	r18, 0x02	; 2
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <report+0x5ee>
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	1f 92       	push	r1
    211e:	7f 93       	push	r23
    2120:	1f 92       	push	r1
    2122:	6f 93       	push	r22
    2124:	1f 92       	push	r1
    2126:	5f 93       	push	r21
    2128:	1f 92       	push	r1
    212a:	4f 93       	push	r20
    212c:	ce 01       	movw	r24, r28
    212e:	8b 5e       	subi	r24, 0xEB	; 235
    2130:	9e 4f       	sbci	r25, 0xFE	; 254
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	3f 93       	push	r19
    2138:	2f 93       	push	r18
    213a:	80 55       	subi	r24, 0x50	; 80
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	8e 01       	movw	r16, r28
    2144:	0f 5f       	subi	r16, 0xFF	; 255
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	1f 93       	push	r17
    214a:	0f 93       	push	r16
    214c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			checksum_NMEA(outbuf);
    2150:	c8 01       	movw	r24, r16
    2152:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2156:	f8 01       	movw	r30, r16
    2158:	01 90       	ld	r0, Z+
    215a:	00 20       	and	r0, r0
    215c:	e9 f7       	brne	.-6      	; 0x2158 <report+0x62e>
    215e:	31 97       	sbiw	r30, 0x01	; 1
    2160:	af 01       	movw	r20, r30
    2162:	40 1b       	sub	r20, r16
    2164:	51 0b       	sbc	r21, r17
    2166:	b8 01       	movw	r22, r16
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    216e:	c2 57       	subi	r28, 0x72	; 114
    2170:	dd 4f       	sbci	r29, 0xFD	; 253
    2172:	88 81       	ld	r24, Y
    2174:	ce 58       	subi	r28, 0x8E	; 142
    2176:	d2 40       	sbci	r29, 0x02	; 2
    2178:	1f 92       	push	r1
    217a:	8f 93       	push	r24
    217c:	c3 57       	subi	r28, 0x73	; 115
    217e:	dd 4f       	sbci	r29, 0xFD	; 253
    2180:	88 81       	ld	r24, Y
    2182:	cd 58       	subi	r28, 0x8D	; 141
    2184:	d2 40       	sbci	r29, 0x02	; 2
    2186:	1f 92       	push	r1
    2188:	8f 93       	push	r24
    218a:	ce 01       	movw	r24, r28
    218c:	8a 50       	subi	r24, 0x0A	; 10
    218e:	9e 4f       	sbci	r25, 0xFE	; 254
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	1f 93       	push	r17
    2196:	0f 93       	push	r16
    2198:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			writestr_OLED(1, outbuf, 1);
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	b8 01       	movw	r22, r16
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    21a6:	c1 57       	subi	r28, 0x71	; 113
    21a8:	dd 4f       	sbci	r29, 0xFD	; 253
    21aa:	88 81       	ld	r24, Y
    21ac:	cf 58       	subi	r28, 0x8F	; 143
    21ae:	d2 40       	sbci	r29, 0x02	; 2
    21b0:	1f 92       	push	r1
    21b2:	8f 93       	push	r24
    21b4:	c4 57       	subi	r28, 0x74	; 116
    21b6:	dd 4f       	sbci	r29, 0xFD	; 253
    21b8:	88 81       	ld	r24, Y
    21ba:	cc 58       	subi	r28, 0x8C	; 140
    21bc:	d2 40       	sbci	r29, 0x02	; 2
    21be:	1f 92       	push	r1
    21c0:	8f 93       	push	r24
    21c2:	ce 01       	movw	r24, r28
    21c4:	87 5f       	subi	r24, 0xF7	; 247
    21c6:	9d 4f       	sbci	r25, 0xFD	; 253
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	1f 93       	push	r17
    21ce:	0f 93       	push	r16
    21d0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	42 e0       	ldi	r20, 0x02	; 2
    21da:	b8 01       	movw	r22, r16
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    21e4:	23 c1       	rjmp	.+582    	; 0x242c <report+0x902>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    21e6:	ce 01       	movw	r24, r28
    21e8:	8b 5e       	subi	r24, 0xEB	; 235
    21ea:	9e 4f       	sbci	r25, 0xFE	; 254
    21ec:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    21f0:	24 e1       	ldi	r18, 0x14	; 20
    21f2:	ae 01       	movw	r20, r28
    21f4:	47 5d       	subi	r20, 0xD7	; 215
    21f6:	5e 4f       	sbci	r21, 0xFE	; 254
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	80 e5       	ldi	r24, 0x50	; 80
    21fe:	0e 94 06 06 	call	0xc0c	; 0xc0c <read_FRAM>
			get_BOOTTIME(boottime);
    2202:	ce 01       	movw	r24, r28
    2204:	83 5c       	subi	r24, 0xC3	; 195
    2206:	9e 4f       	sbci	r25, 0xFE	; 254
    2208:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    220c:	24 e3       	ldi	r18, 0x34	; 52
    220e:	20 9f       	mul	r18, r16
    2210:	c0 01       	movw	r24, r0
    2212:	21 9f       	mul	r18, r17
    2214:	90 0d       	add	r25, r0
    2216:	11 24       	eor	r1, r1
    2218:	82 5d       	subi	r24, 0xD2	; 210
    221a:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    221c:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2220:	22 ff       	sbrs	r18, 2
    2222:	03 c0       	rjmp	.+6      	; 0x222a <report+0x700>
    2224:	22 e0       	ldi	r18, 0x02	; 2
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <report+0x704>
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	9f 93       	push	r25
    2230:	8f 93       	push	r24
    2232:	ce 01       	movw	r24, r28
    2234:	83 5c       	subi	r24, 0xC3	; 195
    2236:	9e 4f       	sbci	r25, 0xFE	; 254
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	44 97       	sbiw	r24, 0x14	; 20
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	8e 01       	movw	r16, r28
    2244:	0b 5e       	subi	r16, 0xEB	; 235
    2246:	1e 4f       	sbci	r17, 0xFE	; 254
    2248:	1f 93       	push	r17
    224a:	0f 93       	push	r16
    224c:	3f 93       	push	r19
    224e:	2f 93       	push	r18
    2250:	8d 50       	subi	r24, 0x0D	; 13
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	8b 51       	subi	r24, 0x1B	; 27
    225a:	92 40       	sbci	r25, 0x02	; 2
    225c:	7c 01       	movw	r14, r24
    225e:	9f 93       	push	r25
    2260:	8f 93       	push	r24
    2262:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2266:	c7 01       	movw	r24, r14
    2268:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    226c:	f7 01       	movw	r30, r14
    226e:	01 90       	ld	r0, Z+
    2270:	00 20       	and	r0, r0
    2272:	e9 f7       	brne	.-6      	; 0x226e <report+0x744>
    2274:	31 97       	sbiw	r30, 0x01	; 1
    2276:	af 01       	movw	r20, r30
    2278:	4e 19       	sub	r20, r14
    227a:	5f 09       	sbc	r21, r15
    227c:	b7 01       	movw	r22, r14
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			writestr_OLED(1, "Time", 1);
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	63 e0       	ldi	r22, 0x03	; 3
    2288:	7c e7       	ldi	r23, 0x7C	; 124
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2290:	b8 01       	movw	r22, r16
    2292:	65 5f       	subi	r22, 0xF5	; 245
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	42 e0       	ldi	r20, 0x02	; 2
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			break;
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    22a4:	c3 c0       	rjmp	.+390    	; 0x242c <report+0x902>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <read_ionpump>
    22ac:	f6 2e       	mov	r15, r22
    22ae:	e7 2e       	mov	r14, r23
    22b0:	d8 2e       	mov	r13, r24
    22b2:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <read_ionpump>
    22ba:	b6 2e       	mov	r11, r22
    22bc:	a7 2e       	mov	r10, r23
    22be:	98 2e       	mov	r9, r24
    22c0:	89 2e       	mov	r8, r25
			get_time(currenttime);
    22c2:	ce 01       	movw	r24, r28
    22c4:	8b 5e       	subi	r24, 0xEB	; 235
    22c6:	9e 4f       	sbci	r25, 0xFE	; 254
    22c8:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    22cc:	24 e3       	ldi	r18, 0x34	; 52
    22ce:	20 9f       	mul	r18, r16
    22d0:	c0 01       	movw	r24, r0
    22d2:	21 9f       	mul	r18, r17
    22d4:	90 0d       	add	r25, r0
    22d6:	11 24       	eor	r1, r1
    22d8:	82 5d       	subi	r24, 0xD2	; 210
    22da:	97 4d       	sbci	r25, 0xD7	; 215
    22dc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22e0:	22 ff       	sbrs	r18, 2
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <report+0x7c0>
    22e4:	22 e0       	ldi	r18, 0x02	; 2
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <report+0x7c4>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	8f 92       	push	r8
    22f4:	9f 92       	push	r9
    22f6:	af 92       	push	r10
    22f8:	bf 92       	push	r11
    22fa:	cf 92       	push	r12
    22fc:	df 92       	push	r13
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	ce 01       	movw	r24, r28
    2304:	8b 5e       	subi	r24, 0xEB	; 235
    2306:	9e 4f       	sbci	r25, 0xFE	; 254
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	3f 93       	push	r19
    230e:	2f 93       	push	r18
    2310:	8c 5d       	subi	r24, 0xDC	; 220
    2312:	9e 4f       	sbci	r25, 0xFE	; 254
    2314:	9f 93       	push	r25
    2316:	8f 93       	push	r24
    2318:	8e 01       	movw	r16, r28
    231a:	0f 5f       	subi	r16, 0xFF	; 255
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	1f 93       	push	r17
    2320:	0f 93       	push	r16
    2322:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			checksum_NMEA(outbuf);
    2326:	c8 01       	movw	r24, r16
    2328:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    232c:	f8 01       	movw	r30, r16
    232e:	01 90       	ld	r0, Z+
    2330:	00 20       	and	r0, r0
    2332:	e9 f7       	brne	.-6      	; 0x232e <report+0x804>
    2334:	31 97       	sbiw	r30, 0x01	; 1
    2336:	af 01       	movw	r20, r30
    2338:	40 1b       	sub	r20, r16
    233a:	51 0b       	sbc	r21, r17
    233c:	b8 01       	movw	r22, r16
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	68 e0       	ldi	r22, 0x08	; 8
    2348:	7c e7       	ldi	r23, 0x7C	; 124
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	ce 01       	movw	r24, r28
    2362:	8e 59       	subi	r24, 0x9E	; 158
    2364:	9d 4f       	sbci	r25, 0xFD	; 253
    2366:	9f 93       	push	r25
    2368:	8f 93       	push	r24
    236a:	1f 93       	push	r17
    236c:	0f 93       	push	r16
    236e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2372:	42 e0       	ldi	r20, 0x02	; 2
    2374:	b8 01       	movw	r22, r16
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			break;
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2380:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2382:	54 c0       	rjmp	.+168    	; 0x242c <report+0x902>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2384:	ce 01       	movw	r24, r28
    2386:	86 5f       	subi	r24, 0xF6	; 246
    2388:	9e 4f       	sbci	r25, 0xFE	; 254
    238a:	0e 94 c3 05 	call	0xb86	; 0xb86 <get_VERSION>
			get_time(currenttime);
    238e:	ce 01       	movw	r24, r28
    2390:	8b 5e       	subi	r24, 0xEB	; 235
    2392:	9e 4f       	sbci	r25, 0xFE	; 254
    2394:	0e 94 40 05 	call	0xa80	; 0xa80 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2398:	24 e3       	ldi	r18, 0x34	; 52
    239a:	20 9f       	mul	r18, r16
    239c:	c0 01       	movw	r24, r0
    239e:	21 9f       	mul	r18, r17
    23a0:	90 0d       	add	r25, r0
    23a2:	11 24       	eor	r1, r1
    23a4:	82 5d       	subi	r24, 0xD2	; 210
    23a6:	97 4d       	sbci	r25, 0xD7	; 215
    23a8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23ac:	22 ff       	sbrs	r18, 2
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <report+0x88c>
    23b0:	22 e0       	ldi	r18, 0x02	; 2
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <report+0x890>
    23b6:	21 e0       	ldi	r18, 0x01	; 1
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	9f 93       	push	r25
    23bc:	8f 93       	push	r24
    23be:	ce 01       	movw	r24, r28
    23c0:	86 5f       	subi	r24, 0xF6	; 246
    23c2:	9e 4f       	sbci	r25, 0xFE	; 254
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	0b 96       	adiw	r24, 0x0b	; 11
    23ca:	9f 93       	push	r25
    23cc:	8f 93       	push	r24
    23ce:	3f 93       	push	r19
    23d0:	2f 93       	push	r18
    23d2:	86 5a       	subi	r24, 0xA6	; 166
    23d4:	9e 4f       	sbci	r25, 0xFE	; 254
    23d6:	9f 93       	push	r25
    23d8:	8f 93       	push	r24
    23da:	8e 01       	movw	r16, r28
    23dc:	0f 5f       	subi	r16, 0xFF	; 255
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	1f 93       	push	r17
    23e2:	0f 93       	push	r16
    23e4:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <sprintf>
			checksum_NMEA(outbuf);
    23e8:	c8 01       	movw	r24, r16
    23ea:	0e 94 70 09 	call	0x12e0	; 0x12e0 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23ee:	f8 01       	movw	r30, r16
    23f0:	01 90       	ld	r0, Z+
    23f2:	00 20       	and	r0, r0
    23f4:	e9 f7       	brne	.-6      	; 0x23f0 <report+0x8c6>
    23f6:	31 97       	sbiw	r30, 0x01	; 1
    23f8:	af 01       	movw	r20, r30
    23fa:	40 1b       	sub	r20, r16
    23fc:	51 0b       	sbc	r21, r17
    23fe:	b8 01       	movw	r22, r16
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	66 e7       	ldi	r22, 0x76	; 118
    240a:	7b e7       	ldi	r23, 0x7B	; 123
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			get_VERSION(outbuf);
    2412:	c8 01       	movw	r24, r16
    2414:	0e 94 c3 05 	call	0xb86	; 0xb86 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2418:	42 e0       	ldi	r20, 0x02	; 2
    241a:	b8 01       	movw	r22, r16
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <writestr_OLED>
			break;
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2426:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2428:	01 c0       	rjmp	.+2      	; 0x242c <report+0x902>

		default:
			return(ERRORPROMPT);
    242a:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    242c:	c3 56       	subi	r28, 0x63	; 99
    242e:	dd 4f       	sbci	r29, 0xFD	; 253
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	7f 90       	pop	r7
    244e:	6f 90       	pop	r6
    2450:	5f 90       	pop	r5
    2452:	4f 90       	pop	r4
    2454:	3f 90       	pop	r3
    2456:	2f 90       	pop	r2
    2458:	08 95       	ret

0000245a <get_ROBOVoltage>:
------------------------------------------------------------------------------*/

#include "roboclaw.h"

float get_ROBOVoltage(uint8_t controller)
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <get_ROBOVoltage+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <get_ROBOVoltage+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd, tbuf[4];
	uint16_t value, crcReceived, crcExpected;

	cmd = ROBOREADMAINVOLTAGE;
	tbuf[0] = controller;
    2466:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = cmd;
    2468:	88 e1       	ldi	r24, 0x18	; 24
    246a:	8a 83       	std	Y+2, r24	; 0x02
	send_USART(1, tbuf, 2);
    246c:	42 e0       	ldi	r20, 0x02	; 2
    246e:	be 01       	movw	r22, r28
    2470:	6f 5f       	subi	r22, 0xFF	; 255
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	0e 94 dd 13 	call	0x27ba	; 0x27ba <send_USART>
	return(0);
}
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	cb 01       	movw	r24, r22
    2480:	24 96       	adiw	r28, 0x04	; 4
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <crc16>:
	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/

uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{
    248c:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0

uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2496:	1b c0       	rjmp	.+54     	; 0x24ce <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2498:	fd 01       	movw	r30, r26
    249a:	e4 0f       	add	r30, r20
    249c:	f5 1f       	adc	r31, r21
    249e:	20 81       	ld	r18, Z
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	32 2f       	mov	r19, r18
    24a4:	22 27       	eor	r18, r18
    24a6:	82 27       	eor	r24, r18
    24a8:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	0c c0       	rjmp	.+24     	; 0x24c6 <crc16+0x3a>
			if (crc & 0x8000) {
    24ae:	99 23       	and	r25, r25
    24b0:	3c f4       	brge	.+14     	; 0x24c0 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	31 e2       	ldi	r19, 0x21	; 33
    24b8:	83 27       	eor	r24, r19
    24ba:	30 e1       	ldi	r19, 0x10	; 16
    24bc:	93 27       	eor	r25, r19
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <crc16+0x38>
			} else {
				crc = crc << 1;
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	28 30       	cpi	r18, 0x08	; 8
    24c8:	90 f3       	brcs	.-28     	; 0x24ae <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    24ca:	4f 5f       	subi	r20, 0xFF	; 255
    24cc:	5f 4f       	sbci	r21, 0xFF	; 255
    24ce:	46 17       	cp	r20, r22
    24d0:	57 07       	cpc	r21, r23
    24d2:	10 f3       	brcs	.-60     	; 0x2498 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
    24d4:	08 95       	ret

000024d6 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    24d6:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    24d8:	e0 e6       	ldi	r30, 0x60	; 96
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    24de:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    24e0:	88 ed       	ldi	r24, 0xD8	; 216
    24e2:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    24e4:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <init_RTC+0x14>
		asm("nop");
    24e8:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    24ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    24ee:	96 fd       	sbrc	r25, 6
    24f0:	fb cf       	rjmp	.-10     	; 0x24e8 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    24f2:	e0 e6       	ldi	r30, 0x60	; 96
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    24f8:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    24fa:	28 ed       	ldi	r18, 0xD8	; 216
    24fc:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    24fe:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2500:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2502:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2504:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2506:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2508:	01 c0       	rjmp	.+2      	; 0x250c <init_RTC+0x36>
		asm("nop");
    250a:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    250c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2510:	91 11       	cpse	r25, r1
    2512:	fb cf       	rjmp	.-10     	; 0x250a <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2514:	e0 e4       	ldi	r30, 0x40	; 64
    2516:	f1 e0       	ldi	r31, 0x01	; 1
    2518:	42 87       	std	Z+10, r20	; 0x0a
    251a:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2520:	85 81       	ldd	r24, Z+5	; 0x05
    2522:	81 60       	ori	r24, 0x01	; 1
    2524:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2526:	81 eb       	ldi	r24, 0xB1	; 177
    2528:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	81 60       	ori	r24, 0x01	; 1
    252e:	82 83       	std	Z+2, r24	; 0x02
    2530:	08 95       	ret

00002532 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	2f 93       	push	r18
    253e:	3f 93       	push	r19
    2540:	4f 93       	push	r20
    2542:	5f 93       	push	r21
    2544:	6f 93       	push	r22
    2546:	7f 93       	push	r23
    2548:	8f 93       	push	r24
    254a:	9f 93       	push	r25
    254c:	af 93       	push	r26
    254e:	bf 93       	push	r27
    2550:	ef 93       	push	r30
    2552:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    255a:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    255e:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	b9 f0       	breq	.+46     	; 0x2594 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2566:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    256a:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    256e:	28 17       	cp	r18, r24
    2570:	39 07       	cpc	r19, r25
    2572:	58 f4       	brcc	.+22     	; 0x258a <__vector_3+0x58>
			clear_OLED(0);
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	0e 94 21 0b 	call	0x1642	; 0x1642 <clear_OLED>
			clear_OLED(1);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	0e 94 21 0b 	call	0x1642	; 0x1642 <clear_OLED>
			timerOLED = 0;
    2580:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    2584:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <__vector_3+0x62>
		} else {
			timerOLED++;
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    2590:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2594:	80 e2       	ldi	r24, 0x20	; 32
    2596:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    259a:	ff 91       	pop	r31
    259c:	ef 91       	pop	r30
    259e:	bf 91       	pop	r27
    25a0:	af 91       	pop	r26
    25a2:	9f 91       	pop	r25
    25a4:	8f 91       	pop	r24
    25a6:	7f 91       	pop	r23
    25a8:	6f 91       	pop	r22
    25aa:	5f 91       	pop	r21
    25ac:	4f 91       	pop	r20
    25ae:	3f 91       	pop	r19
    25b0:	2f 91       	pop	r18
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	0f 90       	pop	r0
    25b8:	1f 90       	pop	r1
    25ba:	18 95       	reti

000025bc <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	24 e3       	ldi	r18, 0x34	; 52
    25c4:	28 9f       	mul	r18, r24
    25c6:	f0 01       	movw	r30, r0
    25c8:	29 9f       	mul	r18, r25
    25ca:	f0 0d       	add	r31, r0
    25cc:	11 24       	eor	r1, r1
    25ce:	ed 5f       	subi	r30, 0xFD	; 253
    25d0:	f7 4d       	sbci	r31, 0xD7	; 215
    25d2:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    25d4:	24 37       	cpi	r18, 0x74	; 116
    25d6:	e9 f4       	brne	.+58     	; 0x2612 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    25d8:	24 e3       	ldi	r18, 0x34	; 52
    25da:	28 9f       	mul	r18, r24
    25dc:	e0 01       	movw	r28, r0
    25de:	29 9f       	mul	r18, r25
    25e0:	d0 0d       	add	r29, r0
    25e2:	11 24       	eor	r1, r1
    25e4:	cb 5f       	subi	r28, 0xFB	; 251
    25e6:	d7 4d       	sbci	r29, 0xD7	; 215
    25e8:	fe 01       	movw	r30, r28
    25ea:	01 90       	ld	r0, Z+
    25ec:	00 20       	and	r0, r0
    25ee:	e9 f7       	brne	.-6      	; 0x25ea <set+0x2e>
    25f0:	31 97       	sbiw	r30, 0x01	; 1
    25f2:	ec 1b       	sub	r30, r28
    25f4:	fd 0b       	sbc	r31, r29
    25f6:	73 97       	sbiw	r30, 0x13	; 19
    25f8:	71 f4       	brne	.+28     	; 0x2616 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    25fa:	ce 01       	movw	r24, r28
    25fc:	0e 94 a4 05 	call	0xb48	; 0xb48 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2600:	24 e1       	ldi	r18, 0x14	; 20
    2602:	ae 01       	movw	r20, r28
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	80 e5       	ldi	r24, 0x50	; 80
    260a:	0e 94 48 06 	call	0xc90	; 0xc90 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2616:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    261e:	e0 ea       	ldi	r30, 0xA0	; 160
    2620:	f4 e0       	ldi	r31, 0x04	; 4
    2622:	82 89       	ldd	r24, Z+18	; 0x12
    2624:	87 7f       	andi	r24, 0xF7	; 247
    2626:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2628:	84 e0       	ldi	r24, 0x04	; 4
    262a:	82 83       	std	Z+2, r24	; 0x02
    262c:	08 95       	ret

0000262e <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	18 f0       	brcs	.+6      	; 0x2638 <get_temperature+0xa>
    2632:	83 30       	cpi	r24, 0x03	; 3
    2634:	21 f0       	breq	.+8      	; 0x263e <get_temperature+0x10>
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2638:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <read_AD590>
			break;
    263c:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    263e:	0e 94 f9 07 	call	0xff2	; 0xff2 <read_MCP9808>
			break;
    2642:	08 95       	ret
		default:
			temperature = -999.9;
    2644:	6a e9       	ldi	r22, 0x9A	; 154
    2646:	79 ef       	ldi	r23, 0xF9	; 249
    2648:	89 e7       	ldi	r24, 0x79	; 121
    264a:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    264c:	08 95       	ret

0000264e <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    264e:	e0 ea       	ldi	r30, 0xA0	; 160
    2650:	f8 e0       	ldi	r31, 0x08	; 8
    2652:	8b e0       	ldi	r24, 0x0B	; 11
    2654:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2656:	83 81       	ldd	r24, Z+3	; 0x03
    2658:	81 60       	ori	r24, 0x01	; 1
    265a:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    265c:	85 81       	ldd	r24, Z+5	; 0x05
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	85 83       	std	Z+5, r24	; 0x05
    2662:	08 95       	ret

00002664 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2666:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2668:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    266c:	88 23       	and	r24, r24
    266e:	dc f7       	brge	.-10     	; 0x2666 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    2670:	e0 ea       	ldi	r30, 0xA0	; 160
    2672:	f8 e0       	ldi	r31, 0x08	; 8
    2674:	84 81       	ldd	r24, Z+4	; 0x04
    2676:	8b 7f       	andi	r24, 0xFB	; 251
    2678:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    267a:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    267c:	94 81       	ldd	r25, Z+4	; 0x04
    267e:	92 60       	ori	r25, 0x02	; 2
    2680:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    2682:	08 95       	ret

00002684 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <readlast_TWI+0x4>
		asm("nop");
    2686:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2688:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    268c:	88 23       	and	r24, r24
    268e:	dc f7       	brge	.-10     	; 0x2686 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2690:	e0 ea       	ldi	r30, 0xA0	; 160
    2692:	f8 e0       	ldi	r31, 0x08	; 8
    2694:	84 81       	ldd	r24, Z+4	; 0x04
    2696:	84 60       	ori	r24, 0x04	; 4
    2698:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    269a:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    269c:	08 95       	ret

0000269e <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    269e:	61 30       	cpi	r22, 0x01	; 1
    26a0:	29 f4       	brne	.+10     	; 0x26ac <start_TWI+0xe>
//		addr |= 0x01;
		addr = ((addr << 1) | 0x01);
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	81 60       	ori	r24, 0x01	; 1
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <start_TWI+0x10>

	} else {
		addr = ((addr << 1) & ~0x01);
    26ac:	88 0f       	add	r24, r24
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition
    26ae:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <start_TWI+0x18>
		asm("nop");								// Wait for addr transmission
    26b4:	00 00       	nop
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    26b6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26ba:	80 7c       	andi	r24, 0xC0	; 192
    26bc:	d9 f3       	breq	.-10     	; 0x26b4 <start_TWI+0x16>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    26be:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26c2:	82 fd       	sbrc	r24, 2
    26c4:	0c c0       	rjmp	.+24     	; 0x26de <start_TWI+0x40>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    26c6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26ca:	83 fd       	sbrc	r24, 3
    26cc:	0a c0       	rjmp	.+20     	; 0x26e2 <start_TWI+0x44>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    26ce:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26d2:	89 2f       	mov	r24, r25
    26d4:	80 71       	andi	r24, 0x10	; 16
    26d6:	94 ff       	sbrs	r25, 4
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <start_TWI+0x46>
		return(TWINODEVICE);
    26da:	84 e0       	ldi	r24, 0x04	; 4
    26dc:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    26e2:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    26e4:	08 95       	ret

000026e6 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    26e6:	87 e0       	ldi	r24, 0x07	; 7
    26e8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    26ec:	08 95       	ret

000026ee <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <write_TWI+0x4>
		asm("nop");
    26f0:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    26f2:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26f6:	96 ff       	sbrs	r25, 6
    26f8:	fb cf       	rjmp	.-10     	; 0x26f0 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    26fa:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <write_TWI+0x14>
		asm("nop");
    2700:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2702:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2706:	86 ff       	sbrs	r24, 6
    2708:	fb cf       	rjmp	.-10     	; 0x2700 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    270a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    270e:	89 2f       	mov	r24, r25
    2710:	80 71       	andi	r24, 0x10	; 16
    2712:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    2714:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    2716:	08 95       	ret

00002718 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2718:	e0 e0       	ldi	r30, 0x00	; 0
    271a:	f4 e0       	ldi	r31, 0x04	; 4
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2720:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2722:	e0 e0       	ldi	r30, 0x00	; 0
    2724:	f8 e0       	ldi	r31, 0x08	; 8
    2726:	2d e6       	ldi	r18, 0x6D	; 109
    2728:	35 e0       	ldi	r19, 0x05	; 5
    272a:	20 87       	std	Z+8, r18	; 0x08
    272c:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    272e:	95 81       	ldd	r25, Z+5	; 0x05
    2730:	90 68       	ori	r25, 0x80	; 128
    2732:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2734:	96 81       	ldd	r25, Z+6	; 0x06
    2736:	90 64       	ori	r25, 0x40	; 64
    2738:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    273a:	96 81       	ldd	r25, Z+6	; 0x06
    273c:	90 68       	ori	r25, 0x80	; 128
    273e:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2740:	10 92 17 2d 	sts	0x2D17, r1	; 0x802d17 <send0_buf+0xff>
	send0_buf.tail = 0;
    2744:	10 92 18 2d 	sts	0x2D18, r1	; 0x802d18 <send0_buf+0x100>
	send0_buf.done = YES;
    2748:	80 93 1b 2d 	sts	0x2D1B, r24	; 0x802d1b <send0_buf+0x103>
	recv0_buf.head = 0;
    274c:	10 92 13 2c 	sts	0x2C13, r1	; 0x802c13 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    2750:	10 92 14 2c 	sts	0x2C14, r1	; 0x802c14 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    2754:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv0_buf>
	recv0_buf.done = NO;
    2758:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    275c:	e0 e4       	ldi	r30, 0x40	; 64
    275e:	f4 e0       	ldi	r31, 0x04	; 4
    2760:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2762:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2764:	e0 e2       	ldi	r30, 0x20	; 32
    2766:	f8 e0       	ldi	r31, 0x08	; 8
    2768:	20 87       	std	Z+8, r18	; 0x08
    276a:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    276c:	96 81       	ldd	r25, Z+6	; 0x06
    276e:	90 64       	ori	r25, 0x40	; 64
    2770:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    2772:	96 81       	ldd	r25, Z+6	; 0x06
    2774:	90 68       	ori	r25, 0x80	; 128
    2776:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    2778:	10 92 23 30 	sts	0x3023, r1	; 0x803023 <send1_buf+0xff>
	send1_buf.tail = 0;
    277c:	10 92 24 30 	sts	0x3024, r1	; 0x803024 <send1_buf+0x100>
	send1_buf.done = YES;
    2780:	80 93 27 30 	sts	0x3027, r24	; 0x803027 <send1_buf+0x103>
	recv1_buf.head = 0;
    2784:	10 92 0f 2b 	sts	0x2B0F, r1	; 0x802b0f <recv1_buf+0xff>
	recv1_buf.tail = 0;
    2788:	10 92 10 2b 	sts	0x2B10, r1	; 0x802b10 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    278c:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <recv1_buf>
	recv1_buf.done = NO;
    2790:	10 92 13 2b 	sts	0x2B13, r1	; 0x802b13 <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    2794:	e0 e2       	ldi	r30, 0x20	; 32
    2796:	f4 e0       	ldi	r31, 0x04	; 4
    2798:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    279a:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    279c:	e0 e6       	ldi	r30, 0x60	; 96
    279e:	f8 e0       	ldi	r31, 0x08	; 8
    27a0:	20 87       	std	Z+8, r18	; 0x08
    27a2:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    27a4:	96 81       	ldd	r25, Z+6	; 0x06
    27a6:	90 64       	ori	r25, 0x40	; 64
    27a8:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    27aa:	96 81       	ldd	r25, Z+6	; 0x06
    27ac:	90 68       	ori	r25, 0x80	; 128
    27ae:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    27b0:	80 93 23 2f 	sts	0x2F23, r24	; 0x802f23 <send3_buf+0x103>
	recv3_buf.done = NO;
    27b4:	10 92 1f 2e 	sts	0x2E1F, r1	; 0x802e1f <recv3_buf+0x103>
    27b8:	08 95       	ret

000027ba <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	eb 01       	movw	r28, r22
    27c4:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	01 f1       	breq	.+64     	; 0x280a <send_USART+0x50>
    27ca:	b0 f0       	brcs	.+44     	; 0x27f8 <send_USART+0x3e>
    27cc:	83 30       	cpi	r24, 0x03	; 3
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <send_USART+0x18>
    27d0:	6d c0       	rjmp	.+218    	; 0x28ac <send_USART+0xf2>
    27d2:	74 c0       	rjmp	.+232    	; 0x28bc <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    27d4:	e7 e1       	ldi	r30, 0x17	; 23
    27d6:	fd e2       	ldi	r31, 0x2D	; 45
    27d8:	80 81       	ld	r24, Z
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	38 81       	ld	r19, Y
    27de:	dc 01       	movw	r26, r24
    27e0:	a8 5e       	subi	r26, 0xE8	; 232
    27e2:	b3 4d       	sbci	r27, 0xD3	; 211
    27e4:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	6f ef       	ldi	r22, 0xFF	; 255
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
    27f0:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    27f2:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    27f4:	21 96       	adiw	r28, 0x01	; 1
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    27f8:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    27fa:	21 17       	cp	r18, r17
    27fc:	58 f3       	brcs	.-42     	; 0x27d4 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    27fe:	e0 e0       	ldi	r30, 0x00	; 0
    2800:	f8 e0       	ldi	r31, 0x08	; 8
    2802:	85 81       	ldd	r24, Z+5	; 0x05
    2804:	80 62       	ori	r24, 0x20	; 32
    2806:	85 83       	std	Z+5, r24	; 0x05
			break;
    2808:	59 c0       	rjmp	.+178    	; 0x28bc <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    280a:	64 2f       	mov	r22, r20
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	ce 01       	movw	r24, r28
    2810:	0e 94 46 12 	call	0x248c	; 0x248c <crc16>
    2814:	48 2f       	mov	r20, r24
    2816:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	11 c0       	rjmp	.+34     	; 0x283e <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    281c:	e3 e2       	ldi	r30, 0x23	; 35
    281e:	f0 e3       	ldi	r31, 0x30	; 48
    2820:	80 81       	ld	r24, Z
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	38 81       	ld	r19, Y
    2826:	dc 01       	movw	r26, r24
    2828:	ac 5d       	subi	r26, 0xDC	; 220
    282a:	b0 4d       	sbci	r27, 0xD0	; 208
    282c:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	6f ef       	ldi	r22, 0xFF	; 255
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
    2838:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    283a:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    283c:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    283e:	21 17       	cp	r18, r17
    2840:	68 f3       	brcs	.-38     	; 0x281c <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    2842:	e3 e2       	ldi	r30, 0x23	; 35
    2844:	f0 e3       	ldi	r31, 0x30	; 48
    2846:	80 81       	ld	r24, Z
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	dc 01       	movw	r26, r24
    284c:	ac 5d       	subi	r26, 0xDC	; 220
    284e:	b0 4d       	sbci	r27, 0xD0	; 208
    2850:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	2f ef       	ldi	r18, 0xFF	; 255
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	b9 01       	movw	r22, r18
    285a:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	dc 01       	movw	r26, r24
    2862:	ac 5d       	subi	r26, 0xDC	; 220
    2864:	b0 4d       	sbci	r27, 0xD0	; 208
    2866:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	b9 01       	movw	r22, r18
    286c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
    2870:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    2872:	1e 5f       	subi	r17, 0xFE	; 254
    2874:	10 93 25 30 	sts	0x3025, r17	; 0x803025 <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    2878:	10 92 26 30 	sts	0x3026, r1	; 0x803026 <send1_buf+0x102>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    287c:	e0 e2       	ldi	r30, 0x20	; 32
    287e:	f8 e0       	ldi	r31, 0x08	; 8
    2880:	85 81       	ldd	r24, Z+5	; 0x05
    2882:	80 62       	ori	r24, 0x20	; 32
    2884:	85 83       	std	Z+5, r24	; 0x05
			break;
    2886:	1a c0       	rjmp	.+52     	; 0x28bc <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2888:	ef e1       	ldi	r30, 0x1F	; 31
    288a:	ff e2       	ldi	r31, 0x2F	; 47
    288c:	80 81       	ld	r24, Z
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	38 81       	ld	r19, Y
    2892:	dc 01       	movw	r26, r24
    2894:	a0 5e       	subi	r26, 0xE0	; 224
    2896:	b1 4d       	sbci	r27, 0xD1	; 209
    2898:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	6f ef       	ldi	r22, 0xFF	; 255
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
    28a4:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28a6:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    28a8:	21 96       	adiw	r28, 0x01	; 1
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    28ac:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28ae:	21 17       	cp	r18, r17
    28b0:	58 f3       	brcs	.-42     	; 0x2888 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    28b2:	e0 e6       	ldi	r30, 0x60	; 96
    28b4:	f8 e0       	ldi	r31, 0x08	; 8
    28b6:	85 81       	ldd	r24, Z+5	; 0x05
    28b8:	80 62       	ori	r24, 0x20	; 32
    28ba:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	08 95       	ret

000028c6 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    28c6:	1f 92       	push	r1
    28c8:	0f 92       	push	r0
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	0f 92       	push	r0
    28ce:	11 24       	eor	r1, r1
    28d0:	5f 93       	push	r21
    28d2:	6f 93       	push	r22
    28d4:	7f 93       	push	r23
    28d6:	8f 93       	push	r24
    28d8:	9f 93       	push	r25
    28da:	af 93       	push	r26
    28dc:	bf 93       	push	r27
    28de:	ef 93       	push	r30
    28e0:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    28e2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    28e6:	8d 30       	cpi	r24, 0x0D	; 13
    28e8:	51 f4       	brne	.+20     	; 0x28fe <__vector_17+0x38>
		recv0_buf.done = YES;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <recv0_buf+0x103>
		recv0_buf.data[recv0_buf.head] = '\0';
    28f0:	e0 91 13 2c 	lds	r30, 0x2C13	; 0x802c13 <recv0_buf+0xff>
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	ec 5e       	subi	r30, 0xEC	; 236
    28f8:	f4 4d       	sbci	r31, 0xD4	; 212
    28fa:	10 82       	st	Z, r1
    28fc:	06 c0       	rjmp	.+12     	; 0x290a <__vector_17+0x44>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    28fe:	e0 91 13 2c 	lds	r30, 0x2C13	; 0x802c13 <recv0_buf+0xff>
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	ec 5e       	subi	r30, 0xEC	; 236
    2906:	f4 4d       	sbci	r31, 0xD4	; 212
    2908:	80 83       	st	Z, r24
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    290a:	e3 e1       	ldi	r30, 0x13	; 19
    290c:	fc e2       	ldi	r31, 0x2C	; 44
    290e:	80 81       	ld	r24, Z
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
    291c:	80 83       	st	Z, r24

}
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	0f 90       	pop	r0
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	0f 90       	pop	r0
    2936:	1f 90       	pop	r1
    2938:	18 95       	reti

0000293a <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    293a:	1f 92       	push	r1
    293c:	0f 92       	push	r0
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	0f 92       	push	r0
    2942:	11 24       	eor	r1, r1
    2944:	8f 93       	push	r24
    2946:	9f 93       	push	r25
    2948:	ef 93       	push	r30
    294a:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    294c:	e0 e0       	ldi	r30, 0x00	; 0
    294e:	f8 e0       	ldi	r31, 0x08	; 8
    2950:	85 81       	ldd	r24, Z+5	; 0x05
    2952:	8f 7d       	andi	r24, 0xDF	; 223
    2954:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2956:	80 91 17 2d 	lds	r24, 0x2D17	; 0x802d17 <send0_buf+0xff>
    295a:	e0 91 18 2d 	lds	r30, 0x2D18	; 0x802d18 <send0_buf+0x100>
    295e:	8e 17       	cp	r24, r30
    2960:	b9 f0       	breq	.+46     	; 0x2990 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	9e 0f       	add	r25, r30
    2966:	90 93 18 2d 	sts	0x2D18, r25	; 0x802d18 <send0_buf+0x100>
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	e8 5e       	subi	r30, 0xE8	; 232
    296e:	f3 4d       	sbci	r31, 0xD3	; 211
    2970:	80 81       	ld	r24, Z
    2972:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	9f 3f       	cpi	r25, 0xFF	; 255
    297a:	08 f4       	brcc	.+2      	; 0x297e <__vector_18+0x44>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	89 0f       	add	r24, r25
    2980:	80 93 18 2d 	sts	0x2D18, r24	; 0x802d18 <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2984:	e0 e0       	ldi	r30, 0x00	; 0
    2986:	f8 e0       	ldi	r31, 0x08	; 8
    2988:	85 81       	ldd	r24, Z+5	; 0x05
    298a:	80 62       	ori	r24, 0x20	; 32
    298c:	85 83       	std	Z+5, r24	; 0x05
    298e:	03 c0       	rjmp	.+6      	; 0x2996 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	80 93 1b 2d 	sts	0x2D1B, r24	; 0x802d1b <send0_buf+0x103>
	}

}
    2996:	ff 91       	pop	r31
    2998:	ef 91       	pop	r30
    299a:	9f 91       	pop	r25
    299c:	8f 91       	pop	r24
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    29be:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    29c2:	8d 30       	cpi	r24, 0x0D	; 13
    29c4:	21 f0       	breq	.+8      	; 0x29ce <__vector_26+0x26>
    29c6:	e0 91 12 2b 	lds	r30, 0x2B12	; 0x802b12 <recv1_buf+0x102>
    29ca:	ee 3f       	cpi	r30, 0xFE	; 254
    29cc:	78 f0       	brcs	.+30     	; 0x29ec <__vector_26+0x44>
		recv1_buf.done = YES;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x103>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    29d4:	a2 e1       	ldi	r26, 0x12	; 18
    29d6:	bb e2       	ldi	r27, 0x2B	; 43
    29d8:	8c 91       	ld	r24, X
    29da:	e8 2f       	mov	r30, r24
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	e0 5f       	subi	r30, 0xF0	; 240
    29e0:	f5 4d       	sbci	r31, 0xD5	; 213
    29e2:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    29e4:	80 93 11 2b 	sts	0x2B11, r24	; 0x802b11 <recv1_buf+0x101>
		recv1_buf.nxfrd = 0;
    29e8:	1c 92       	st	X, r1
		return;
    29ea:	08 c0       	rjmp	.+16     	; 0x29fc <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	9e 0f       	add	r25, r30
    29f0:	90 93 12 2b 	sts	0x2B12, r25	; 0x802b12 <recv1_buf+0x102>
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	e0 5f       	subi	r30, 0xF0	; 240
    29f8:	f5 4d       	sbci	r31, 0xD5	; 213
    29fa:	80 83       	st	Z, r24
	}

}
    29fc:	ff 91       	pop	r31
    29fe:	ef 91       	pop	r30
    2a00:	bf 91       	pop	r27
    2a02:	af 91       	pop	r26
    2a04:	9f 91       	pop	r25
    2a06:	8f 91       	pop	r24
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	0f 90       	pop	r0
    2a0e:	1f 90       	pop	r1
    2a10:	18 95       	reti

00002a12 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    2a12:	1f 92       	push	r1
    2a14:	0f 92       	push	r0
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	0f 92       	push	r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	8f 93       	push	r24
    2a1e:	9f 93       	push	r25
    2a20:	ef 93       	push	r30
    2a22:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2a24:	e0 e2       	ldi	r30, 0x20	; 32
    2a26:	f8 e0       	ldi	r31, 0x08	; 8
    2a28:	85 81       	ldd	r24, Z+5	; 0x05
    2a2a:	8f 7d       	andi	r24, 0xDF	; 223
    2a2c:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    2a2e:	80 91 23 30 	lds	r24, 0x3023	; 0x803023 <send1_buf+0xff>
    2a32:	e0 91 24 30 	lds	r30, 0x3024	; 0x803024 <send1_buf+0x100>
    2a36:	8e 17       	cp	r24, r30
    2a38:	b9 f0       	breq	.+46     	; 0x2a68 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	9e 0f       	add	r25, r30
    2a3e:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <send1_buf+0x100>
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	ec 5d       	subi	r30, 0xDC	; 220
    2a46:	f0 4d       	sbci	r31, 0xD0	; 208
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	9f 3f       	cpi	r25, 0xFF	; 255
    2a52:	08 f4       	brcc	.+2      	; 0x2a56 <__vector_27+0x44>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	89 0f       	add	r24, r25
    2a58:	80 93 24 30 	sts	0x3024, r24	; 0x803024 <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2a5c:	e0 e2       	ldi	r30, 0x20	; 32
    2a5e:	f8 e0       	ldi	r31, 0x08	; 8
    2a60:	85 81       	ldd	r24, Z+5	; 0x05
    2a62:	80 62       	ori	r24, 0x20	; 32
    2a64:	85 83       	std	Z+5, r24	; 0x05
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	80 93 27 30 	sts	0x3027, r24	; 0x803027 <send1_buf+0x103>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	9f 91       	pop	r25
    2a74:	8f 91       	pop	r24
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	8f 93       	push	r24
    2a8c:	9f 93       	push	r25
    2a8e:	af 93       	push	r26
    2a90:	bf 93       	push	r27
    2a92:	ef 93       	push	r30
    2a94:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    2a96:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2a9a:	8d 30       	cpi	r24, 0x0D	; 13
    2a9c:	21 f0       	breq	.+8      	; 0x2aa6 <__vector_37+0x26>
    2a9e:	e0 91 1e 2e 	lds	r30, 0x2E1E	; 0x802e1e <recv3_buf+0x102>
    2aa2:	ee 3f       	cpi	r30, 0xFE	; 254
    2aa4:	78 f0       	brcs	.+30     	; 0x2ac4 <__vector_37+0x44>
		recv3_buf.done = YES;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	80 93 1f 2e 	sts	0x2E1F, r24	; 0x802e1f <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2aac:	ae e1       	ldi	r26, 0x1E	; 30
    2aae:	be e2       	ldi	r27, 0x2E	; 46
    2ab0:	8c 91       	ld	r24, X
    2ab2:	e8 2f       	mov	r30, r24
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	e4 5e       	subi	r30, 0xE4	; 228
    2ab8:	f2 4d       	sbci	r31, 0xD2	; 210
    2aba:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2abc:	80 93 1d 2e 	sts	0x2E1D, r24	; 0x802e1d <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    2ac0:	1c 92       	st	X, r1
		return;
    2ac2:	08 c0       	rjmp	.+16     	; 0x2ad4 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	9e 0f       	add	r25, r30
    2ac8:	90 93 1e 2e 	sts	0x2E1E, r25	; 0x802e1e <recv3_buf+0x102>
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	e4 5e       	subi	r30, 0xE4	; 228
    2ad0:	f2 4d       	sbci	r31, 0xD2	; 210
    2ad2:	80 83       	st	Z, r24
	}

}
    2ad4:	ff 91       	pop	r31
    2ad6:	ef 91       	pop	r30
    2ad8:	bf 91       	pop	r27
    2ada:	af 91       	pop	r26
    2adc:	9f 91       	pop	r25
    2ade:	8f 91       	pop	r24
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	0f 90       	pop	r0
    2ae6:	1f 90       	pop	r1
    2ae8:	18 95       	reti

00002aea <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    2aea:	1f 92       	push	r1
    2aec:	0f 92       	push	r0
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	0f 92       	push	r0
    2af2:	11 24       	eor	r1, r1
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2b00:	a2 e2       	ldi	r26, 0x22	; 34
    2b02:	bf e2       	ldi	r27, 0x2F	; 47
    2b04:	ec 91       	ld	r30, X
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	8e 0f       	add	r24, r30
    2b0a:	8c 93       	st	X, r24
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	e0 5e       	subi	r30, 0xE0	; 224
    2b10:	f1 4d       	sbci	r31, 0xD1	; 209
    2b12:	90 81       	ld	r25, Z
    2b14:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2b18:	90 91 21 2f 	lds	r25, 0x2F21	; 0x802f21 <send3_buf+0x101>
    2b1c:	89 17       	cp	r24, r25
    2b1e:	40 f0       	brcs	.+16     	; 0x2b30 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2b20:	e0 e6       	ldi	r30, 0x60	; 96
    2b22:	f8 e0       	ldi	r31, 0x08	; 8
    2b24:	85 81       	ldd	r24, Z+5	; 0x05
    2b26:	8f 7d       	andi	r24, 0xDF	; 223
    2b28:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	80 93 23 2f 	sts	0x2F23, r24	; 0x802f23 <send3_buf+0x103>
	}

}
    2b30:	ff 91       	pop	r31
    2b32:	ef 91       	pop	r30
    2b34:	bf 91       	pop	r27
    2b36:	af 91       	pop	r26
    2b38:	9f 91       	pop	r25
    2b3a:	8f 91       	pop	r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	0f 90       	pop	r0
    2b42:	1f 90       	pop	r1
    2b44:	18 95       	reti

00002b46 <reboot>:
#include "initialize.h"

void reboot(void)
{

	init_XPORT();
    2b46:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    2b4a:	88 ed       	ldi	r24, 0xD8	; 216
    2b4c:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2b54:	08 95       	ret

00002b56 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    2b56:	e0 e4       	ldi	r30, 0x40	; 64
    2b58:	f4 e0       	ldi	r31, 0x04	; 4
    2b5a:	88 e0       	ldi	r24, 0x08	; 8
    2b5c:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    2b5e:	81 83       	std	Z+1, r24	; 0x01
    2b60:	ad e8       	ldi	r26, 0x8D	; 141
    2b62:	b0 e2       	ldi	r27, 0x20	; 32
    2b64:	11 97       	sbiw	r26, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <init_XPORT+0xe>
    2b68:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    2b6a:	85 83       	std	Z+5, r24	; 0x05
    2b6c:	08 95       	ret

00002b6e <__subsf3>:
    2b6e:	50 58       	subi	r21, 0x80	; 128

00002b70 <__addsf3>:
    2b70:	bb 27       	eor	r27, r27
    2b72:	aa 27       	eor	r26, r26
    2b74:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__addsf3x>
    2b78:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2b7c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2b80:	38 f0       	brcs	.+14     	; 0x2b90 <__addsf3+0x20>
    2b82:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2b86:	20 f0       	brcs	.+8      	; 0x2b90 <__addsf3+0x20>
    2b88:	39 f4       	brne	.+14     	; 0x2b98 <__addsf3+0x28>
    2b8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b8c:	19 f4       	brne	.+6      	; 0x2b94 <__addsf3+0x24>
    2b8e:	26 f4       	brtc	.+8      	; 0x2b98 <__addsf3+0x28>
    2b90:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2b94:	0e f4       	brtc	.+2      	; 0x2b98 <__addsf3+0x28>
    2b96:	e0 95       	com	r30
    2b98:	e7 fb       	bst	r30, 7
    2b9a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>

00002b9e <__addsf3x>:
    2b9e:	e9 2f       	mov	r30, r25
    2ba0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2ba4:	58 f3       	brcs	.-42     	; 0x2b7c <__addsf3+0xc>
    2ba6:	ba 17       	cp	r27, r26
    2ba8:	62 07       	cpc	r22, r18
    2baa:	73 07       	cpc	r23, r19
    2bac:	84 07       	cpc	r24, r20
    2bae:	95 07       	cpc	r25, r21
    2bb0:	20 f0       	brcs	.+8      	; 0x2bba <__addsf3x+0x1c>
    2bb2:	79 f4       	brne	.+30     	; 0x2bd2 <__addsf3x+0x34>
    2bb4:	a6 f5       	brtc	.+104    	; 0x2c1e <__addsf3x+0x80>
    2bb6:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__fp_zero>
    2bba:	0e f4       	brtc	.+2      	; 0x2bbe <__addsf3x+0x20>
    2bbc:	e0 95       	com	r30
    2bbe:	0b 2e       	mov	r0, r27
    2bc0:	ba 2f       	mov	r27, r26
    2bc2:	a0 2d       	mov	r26, r0
    2bc4:	0b 01       	movw	r0, r22
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	90 01       	movw	r18, r0
    2bca:	0c 01       	movw	r0, r24
    2bcc:	ca 01       	movw	r24, r20
    2bce:	a0 01       	movw	r20, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	ff 27       	eor	r31, r31
    2bd4:	59 1b       	sub	r21, r25
    2bd6:	99 f0       	breq	.+38     	; 0x2bfe <__addsf3x+0x60>
    2bd8:	59 3f       	cpi	r21, 0xF9	; 249
    2bda:	50 f4       	brcc	.+20     	; 0x2bf0 <__addsf3x+0x52>
    2bdc:	50 3e       	cpi	r21, 0xE0	; 224
    2bde:	68 f1       	brcs	.+90     	; 0x2c3a <__addsf3x+0x9c>
    2be0:	1a 16       	cp	r1, r26
    2be2:	f0 40       	sbci	r31, 0x00	; 0
    2be4:	a2 2f       	mov	r26, r18
    2be6:	23 2f       	mov	r18, r19
    2be8:	34 2f       	mov	r19, r20
    2bea:	44 27       	eor	r20, r20
    2bec:	58 5f       	subi	r21, 0xF8	; 248
    2bee:	f3 cf       	rjmp	.-26     	; 0x2bd6 <__addsf3x+0x38>
    2bf0:	46 95       	lsr	r20
    2bf2:	37 95       	ror	r19
    2bf4:	27 95       	ror	r18
    2bf6:	a7 95       	ror	r26
    2bf8:	f0 40       	sbci	r31, 0x00	; 0
    2bfa:	53 95       	inc	r21
    2bfc:	c9 f7       	brne	.-14     	; 0x2bf0 <__addsf3x+0x52>
    2bfe:	7e f4       	brtc	.+30     	; 0x2c1e <__addsf3x+0x80>
    2c00:	1f 16       	cp	r1, r31
    2c02:	ba 0b       	sbc	r27, r26
    2c04:	62 0b       	sbc	r22, r18
    2c06:	73 0b       	sbc	r23, r19
    2c08:	84 0b       	sbc	r24, r20
    2c0a:	ba f0       	brmi	.+46     	; 0x2c3a <__addsf3x+0x9c>
    2c0c:	91 50       	subi	r25, 0x01	; 1
    2c0e:	a1 f0       	breq	.+40     	; 0x2c38 <__addsf3x+0x9a>
    2c10:	ff 0f       	add	r31, r31
    2c12:	bb 1f       	adc	r27, r27
    2c14:	66 1f       	adc	r22, r22
    2c16:	77 1f       	adc	r23, r23
    2c18:	88 1f       	adc	r24, r24
    2c1a:	c2 f7       	brpl	.-16     	; 0x2c0c <__addsf3x+0x6e>
    2c1c:	0e c0       	rjmp	.+28     	; 0x2c3a <__addsf3x+0x9c>
    2c1e:	ba 0f       	add	r27, r26
    2c20:	62 1f       	adc	r22, r18
    2c22:	73 1f       	adc	r23, r19
    2c24:	84 1f       	adc	r24, r20
    2c26:	48 f4       	brcc	.+18     	; 0x2c3a <__addsf3x+0x9c>
    2c28:	87 95       	ror	r24
    2c2a:	77 95       	ror	r23
    2c2c:	67 95       	ror	r22
    2c2e:	b7 95       	ror	r27
    2c30:	f7 95       	ror	r31
    2c32:	9e 3f       	cpi	r25, 0xFE	; 254
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <__addsf3x+0x9a>
    2c36:	b0 cf       	rjmp	.-160    	; 0x2b98 <__addsf3+0x28>
    2c38:	93 95       	inc	r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <__addsf3x+0xa2>
    2c3e:	99 27       	eor	r25, r25
    2c40:	ee 0f       	add	r30, r30
    2c42:	97 95       	ror	r25
    2c44:	87 95       	ror	r24
    2c46:	08 95       	ret

00002c48 <__cmpsf2>:
    2c48:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2c4c:	08 f4       	brcc	.+2      	; 0x2c50 <__cmpsf2+0x8>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	08 95       	ret

00002c52 <__divsf3>:
    2c52:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__divsf3x>
    2c56:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2c5a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2c5e:	58 f0       	brcs	.+22     	; 0x2c76 <__divsf3+0x24>
    2c60:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2c64:	40 f0       	brcs	.+16     	; 0x2c76 <__divsf3+0x24>
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <__divsf3+0x20>
    2c68:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6a:	29 f0       	breq	.+10     	; 0x2c76 <__divsf3+0x24>
    2c6c:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2c70:	51 11       	cpse	r21, r1
    2c72:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2c76:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>

00002c7a <__divsf3x>:
    2c7a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2c7e:	68 f3       	brcs	.-38     	; 0x2c5a <__divsf3+0x8>

00002c80 <__divsf3_pse>:
    2c80:	99 23       	and	r25, r25
    2c82:	b1 f3       	breq	.-20     	; 0x2c70 <__divsf3+0x1e>
    2c84:	55 23       	and	r21, r21
    2c86:	91 f3       	breq	.-28     	; 0x2c6c <__divsf3+0x1a>
    2c88:	95 1b       	sub	r25, r21
    2c8a:	55 0b       	sbc	r21, r21
    2c8c:	bb 27       	eor	r27, r27
    2c8e:	aa 27       	eor	r26, r26
    2c90:	62 17       	cp	r22, r18
    2c92:	73 07       	cpc	r23, r19
    2c94:	84 07       	cpc	r24, r20
    2c96:	38 f0       	brcs	.+14     	; 0x2ca6 <__divsf3_pse+0x26>
    2c98:	9f 5f       	subi	r25, 0xFF	; 255
    2c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	44 1f       	adc	r20, r20
    2ca2:	aa 1f       	adc	r26, r26
    2ca4:	a9 f3       	breq	.-22     	; 0x2c90 <__divsf3_pse+0x10>
    2ca6:	35 d0       	rcall	.+106    	; 0x2d12 <__divsf3_pse+0x92>
    2ca8:	0e 2e       	mov	r0, r30
    2caa:	3a f0       	brmi	.+14     	; 0x2cba <__divsf3_pse+0x3a>
    2cac:	e0 e8       	ldi	r30, 0x80	; 128
    2cae:	32 d0       	rcall	.+100    	; 0x2d14 <__divsf3_pse+0x94>
    2cb0:	91 50       	subi	r25, 0x01	; 1
    2cb2:	50 40       	sbci	r21, 0x00	; 0
    2cb4:	e6 95       	lsr	r30
    2cb6:	00 1c       	adc	r0, r0
    2cb8:	ca f7       	brpl	.-14     	; 0x2cac <__divsf3_pse+0x2c>
    2cba:	2b d0       	rcall	.+86     	; 0x2d12 <__divsf3_pse+0x92>
    2cbc:	fe 2f       	mov	r31, r30
    2cbe:	29 d0       	rcall	.+82     	; 0x2d12 <__divsf3_pse+0x92>
    2cc0:	66 0f       	add	r22, r22
    2cc2:	77 1f       	adc	r23, r23
    2cc4:	88 1f       	adc	r24, r24
    2cc6:	bb 1f       	adc	r27, r27
    2cc8:	26 17       	cp	r18, r22
    2cca:	37 07       	cpc	r19, r23
    2ccc:	48 07       	cpc	r20, r24
    2cce:	ab 07       	cpc	r26, r27
    2cd0:	b0 e8       	ldi	r27, 0x80	; 128
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <__divsf3_pse+0x56>
    2cd4:	bb 0b       	sbc	r27, r27
    2cd6:	80 2d       	mov	r24, r0
    2cd8:	bf 01       	movw	r22, r30
    2cda:	ff 27       	eor	r31, r31
    2cdc:	93 58       	subi	r25, 0x83	; 131
    2cde:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce0:	3a f0       	brmi	.+14     	; 0x2cf0 <__divsf3_pse+0x70>
    2ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ce4:	51 05       	cpc	r21, r1
    2ce6:	78 f0       	brcs	.+30     	; 0x2d06 <__divsf3_pse+0x86>
    2ce8:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2cec:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf2:	e4 f3       	brlt	.-8      	; 0x2cec <__divsf3_pse+0x6c>
    2cf4:	98 3e       	cpi	r25, 0xE8	; 232
    2cf6:	d4 f3       	brlt	.-12     	; 0x2cec <__divsf3_pse+0x6c>
    2cf8:	86 95       	lsr	r24
    2cfa:	77 95       	ror	r23
    2cfc:	67 95       	ror	r22
    2cfe:	b7 95       	ror	r27
    2d00:	f7 95       	ror	r31
    2d02:	9f 5f       	subi	r25, 0xFF	; 255
    2d04:	c9 f7       	brne	.-14     	; 0x2cf8 <__divsf3_pse+0x78>
    2d06:	88 0f       	add	r24, r24
    2d08:	91 1d       	adc	r25, r1
    2d0a:	96 95       	lsr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	97 f9       	bld	r25, 7
    2d10:	08 95       	ret
    2d12:	e1 e0       	ldi	r30, 0x01	; 1
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	88 1f       	adc	r24, r24
    2d1a:	bb 1f       	adc	r27, r27
    2d1c:	62 17       	cp	r22, r18
    2d1e:	73 07       	cpc	r23, r19
    2d20:	84 07       	cpc	r24, r20
    2d22:	ba 07       	cpc	r27, r26
    2d24:	20 f0       	brcs	.+8      	; 0x2d2e <__divsf3_pse+0xae>
    2d26:	62 1b       	sub	r22, r18
    2d28:	73 0b       	sbc	r23, r19
    2d2a:	84 0b       	sbc	r24, r20
    2d2c:	ba 0b       	sbc	r27, r26
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	88 f7       	brcc	.-30     	; 0x2d14 <__divsf3_pse+0x94>
    2d32:	e0 95       	com	r30
    2d34:	08 95       	ret

00002d36 <__floatunsisf>:
    2d36:	e8 94       	clt
    2d38:	09 c0       	rjmp	.+18     	; 0x2d4c <__floatsisf+0x12>

00002d3a <__floatsisf>:
    2d3a:	97 fb       	bst	r25, 7
    2d3c:	3e f4       	brtc	.+14     	; 0x2d4c <__floatsisf+0x12>
    2d3e:	90 95       	com	r25
    2d40:	80 95       	com	r24
    2d42:	70 95       	com	r23
    2d44:	61 95       	neg	r22
    2d46:	7f 4f       	sbci	r23, 0xFF	; 255
    2d48:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4c:	99 23       	and	r25, r25
    2d4e:	a9 f0       	breq	.+42     	; 0x2d7a <__floatsisf+0x40>
    2d50:	f9 2f       	mov	r31, r25
    2d52:	96 e9       	ldi	r25, 0x96	; 150
    2d54:	bb 27       	eor	r27, r27
    2d56:	93 95       	inc	r25
    2d58:	f6 95       	lsr	r31
    2d5a:	87 95       	ror	r24
    2d5c:	77 95       	ror	r23
    2d5e:	67 95       	ror	r22
    2d60:	b7 95       	ror	r27
    2d62:	f1 11       	cpse	r31, r1
    2d64:	f8 cf       	rjmp	.-16     	; 0x2d56 <__floatsisf+0x1c>
    2d66:	fa f4       	brpl	.+62     	; 0x2da6 <__floatsisf+0x6c>
    2d68:	bb 0f       	add	r27, r27
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <__floatsisf+0x36>
    2d6c:	60 ff       	sbrs	r22, 0
    2d6e:	1b c0       	rjmp	.+54     	; 0x2da6 <__floatsisf+0x6c>
    2d70:	6f 5f       	subi	r22, 0xFF	; 255
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	16 c0       	rjmp	.+44     	; 0x2da6 <__floatsisf+0x6c>
    2d7a:	88 23       	and	r24, r24
    2d7c:	11 f0       	breq	.+4      	; 0x2d82 <__floatsisf+0x48>
    2d7e:	96 e9       	ldi	r25, 0x96	; 150
    2d80:	11 c0       	rjmp	.+34     	; 0x2da4 <__floatsisf+0x6a>
    2d82:	77 23       	and	r23, r23
    2d84:	21 f0       	breq	.+8      	; 0x2d8e <__floatsisf+0x54>
    2d86:	9e e8       	ldi	r25, 0x8E	; 142
    2d88:	87 2f       	mov	r24, r23
    2d8a:	76 2f       	mov	r23, r22
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <__floatsisf+0x5e>
    2d8e:	66 23       	and	r22, r22
    2d90:	71 f0       	breq	.+28     	; 0x2dae <__floatsisf+0x74>
    2d92:	96 e8       	ldi	r25, 0x86	; 134
    2d94:	86 2f       	mov	r24, r22
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	2a f0       	brmi	.+10     	; 0x2da6 <__floatsisf+0x6c>
    2d9c:	9a 95       	dec	r25
    2d9e:	66 0f       	add	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	88 1f       	adc	r24, r24
    2da4:	da f7       	brpl	.-10     	; 0x2d9c <__floatsisf+0x62>
    2da6:	88 0f       	add	r24, r24
    2da8:	96 95       	lsr	r25
    2daa:	87 95       	ror	r24
    2dac:	97 f9       	bld	r25, 7
    2dae:	08 95       	ret

00002db0 <__fp_cmp>:
    2db0:	99 0f       	add	r25, r25
    2db2:	00 08       	sbc	r0, r0
    2db4:	55 0f       	add	r21, r21
    2db6:	aa 0b       	sbc	r26, r26
    2db8:	e0 e8       	ldi	r30, 0x80	; 128
    2dba:	fe ef       	ldi	r31, 0xFE	; 254
    2dbc:	16 16       	cp	r1, r22
    2dbe:	17 06       	cpc	r1, r23
    2dc0:	e8 07       	cpc	r30, r24
    2dc2:	f9 07       	cpc	r31, r25
    2dc4:	c0 f0       	brcs	.+48     	; 0x2df6 <__fp_cmp+0x46>
    2dc6:	12 16       	cp	r1, r18
    2dc8:	13 06       	cpc	r1, r19
    2dca:	e4 07       	cpc	r30, r20
    2dcc:	f5 07       	cpc	r31, r21
    2dce:	98 f0       	brcs	.+38     	; 0x2df6 <__fp_cmp+0x46>
    2dd0:	62 1b       	sub	r22, r18
    2dd2:	73 0b       	sbc	r23, r19
    2dd4:	84 0b       	sbc	r24, r20
    2dd6:	95 0b       	sbc	r25, r21
    2dd8:	39 f4       	brne	.+14     	; 0x2de8 <__fp_cmp+0x38>
    2dda:	0a 26       	eor	r0, r26
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <__fp_cmp+0x46>
    2dde:	23 2b       	or	r18, r19
    2de0:	24 2b       	or	r18, r20
    2de2:	25 2b       	or	r18, r21
    2de4:	21 f4       	brne	.+8      	; 0x2dee <__fp_cmp+0x3e>
    2de6:	08 95       	ret
    2de8:	0a 26       	eor	r0, r26
    2dea:	09 f4       	brne	.+2      	; 0x2dee <__fp_cmp+0x3e>
    2dec:	a1 40       	sbci	r26, 0x01	; 1
    2dee:	a6 95       	lsr	r26
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	81 1d       	adc	r24, r1
    2df4:	81 1d       	adc	r24, r1
    2df6:	08 95       	ret

00002df8 <__fp_inf>:
    2df8:	97 f9       	bld	r25, 7
    2dfa:	9f 67       	ori	r25, 0x7F	; 127
    2dfc:	80 e8       	ldi	r24, 0x80	; 128
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	08 95       	ret

00002e04 <__fp_nan>:
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	80 ec       	ldi	r24, 0xC0	; 192
    2e08:	08 95       	ret

00002e0a <__fp_pscA>:
    2e0a:	00 24       	eor	r0, r0
    2e0c:	0a 94       	dec	r0
    2e0e:	16 16       	cp	r1, r22
    2e10:	17 06       	cpc	r1, r23
    2e12:	18 06       	cpc	r1, r24
    2e14:	09 06       	cpc	r0, r25
    2e16:	08 95       	ret

00002e18 <__fp_pscB>:
    2e18:	00 24       	eor	r0, r0
    2e1a:	0a 94       	dec	r0
    2e1c:	12 16       	cp	r1, r18
    2e1e:	13 06       	cpc	r1, r19
    2e20:	14 06       	cpc	r1, r20
    2e22:	05 06       	cpc	r0, r21
    2e24:	08 95       	ret

00002e26 <__fp_round>:
    2e26:	09 2e       	mov	r0, r25
    2e28:	03 94       	inc	r0
    2e2a:	00 0c       	add	r0, r0
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__fp_round+0xc>
    2e2e:	88 23       	and	r24, r24
    2e30:	52 f0       	brmi	.+20     	; 0x2e46 <__fp_round+0x20>
    2e32:	bb 0f       	add	r27, r27
    2e34:	40 f4       	brcc	.+16     	; 0x2e46 <__fp_round+0x20>
    2e36:	bf 2b       	or	r27, r31
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <__fp_round+0x18>
    2e3a:	60 ff       	sbrs	r22, 0
    2e3c:	04 c0       	rjmp	.+8      	; 0x2e46 <__fp_round+0x20>
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	8f 4f       	sbci	r24, 0xFF	; 255
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	08 95       	ret

00002e48 <__fp_split3>:
    2e48:	57 fd       	sbrc	r21, 7
    2e4a:	90 58       	subi	r25, 0x80	; 128
    2e4c:	44 0f       	add	r20, r20
    2e4e:	55 1f       	adc	r21, r21
    2e50:	59 f0       	breq	.+22     	; 0x2e68 <__fp_splitA+0x10>
    2e52:	5f 3f       	cpi	r21, 0xFF	; 255
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <__fp_splitA+0x1a>
    2e56:	47 95       	ror	r20

00002e58 <__fp_splitA>:
    2e58:	88 0f       	add	r24, r24
    2e5a:	97 fb       	bst	r25, 7
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <__fp_splitA+0x20>
    2e60:	9f 3f       	cpi	r25, 0xFF	; 255
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <__fp_splitA+0x2a>
    2e64:	87 95       	ror	r24
    2e66:	08 95       	ret
    2e68:	12 16       	cp	r1, r18
    2e6a:	13 06       	cpc	r1, r19
    2e6c:	14 06       	cpc	r1, r20
    2e6e:	55 1f       	adc	r21, r21
    2e70:	f2 cf       	rjmp	.-28     	; 0x2e56 <__fp_split3+0xe>
    2e72:	46 95       	lsr	r20
    2e74:	f1 df       	rcall	.-30     	; 0x2e58 <__fp_splitA>
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <__fp_splitA+0x30>
    2e78:	16 16       	cp	r1, r22
    2e7a:	17 06       	cpc	r1, r23
    2e7c:	18 06       	cpc	r1, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	f1 cf       	rjmp	.-30     	; 0x2e64 <__fp_splitA+0xc>
    2e82:	86 95       	lsr	r24
    2e84:	71 05       	cpc	r23, r1
    2e86:	61 05       	cpc	r22, r1
    2e88:	08 94       	sec
    2e8a:	08 95       	ret

00002e8c <__fp_zero>:
    2e8c:	e8 94       	clt

00002e8e <__fp_szero>:
    2e8e:	bb 27       	eor	r27, r27
    2e90:	66 27       	eor	r22, r22
    2e92:	77 27       	eor	r23, r23
    2e94:	cb 01       	movw	r24, r22
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__gesf2>:
    2e9a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <__gesf2+0x8>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	08 95       	ret

00002ea4 <__mulsf3>:
    2ea4:	0e 94 65 17 	call	0x2eca	; 0x2eca <__mulsf3x>
    2ea8:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2eac:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2eb0:	38 f0       	brcs	.+14     	; 0x2ec0 <__mulsf3+0x1c>
    2eb2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <__mulsf3+0x1c>
    2eb8:	95 23       	and	r25, r21
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <__mulsf3+0x1c>
    2ebc:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2ec0:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2ec4:	11 24       	eor	r1, r1
    2ec6:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>

00002eca <__mulsf3x>:
    2eca:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2ece:	70 f3       	brcs	.-36     	; 0x2eac <__mulsf3+0x8>

00002ed0 <__mulsf3_pse>:
    2ed0:	95 9f       	mul	r25, r21
    2ed2:	c1 f3       	breq	.-16     	; 0x2ec4 <__mulsf3+0x20>
    2ed4:	95 0f       	add	r25, r21
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	55 1f       	adc	r21, r21
    2eda:	62 9f       	mul	r22, r18
    2edc:	f0 01       	movw	r30, r0
    2ede:	72 9f       	mul	r23, r18
    2ee0:	bb 27       	eor	r27, r27
    2ee2:	f0 0d       	add	r31, r0
    2ee4:	b1 1d       	adc	r27, r1
    2ee6:	63 9f       	mul	r22, r19
    2ee8:	aa 27       	eor	r26, r26
    2eea:	f0 0d       	add	r31, r0
    2eec:	b1 1d       	adc	r27, r1
    2eee:	aa 1f       	adc	r26, r26
    2ef0:	64 9f       	mul	r22, r20
    2ef2:	66 27       	eor	r22, r22
    2ef4:	b0 0d       	add	r27, r0
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	66 1f       	adc	r22, r22
    2efa:	82 9f       	mul	r24, r18
    2efc:	22 27       	eor	r18, r18
    2efe:	b0 0d       	add	r27, r0
    2f00:	a1 1d       	adc	r26, r1
    2f02:	62 1f       	adc	r22, r18
    2f04:	73 9f       	mul	r23, r19
    2f06:	b0 0d       	add	r27, r0
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	62 1f       	adc	r22, r18
    2f0c:	83 9f       	mul	r24, r19
    2f0e:	a0 0d       	add	r26, r0
    2f10:	61 1d       	adc	r22, r1
    2f12:	22 1f       	adc	r18, r18
    2f14:	74 9f       	mul	r23, r20
    2f16:	33 27       	eor	r19, r19
    2f18:	a0 0d       	add	r26, r0
    2f1a:	61 1d       	adc	r22, r1
    2f1c:	23 1f       	adc	r18, r19
    2f1e:	84 9f       	mul	r24, r20
    2f20:	60 0d       	add	r22, r0
    2f22:	21 1d       	adc	r18, r1
    2f24:	82 2f       	mov	r24, r18
    2f26:	76 2f       	mov	r23, r22
    2f28:	6a 2f       	mov	r22, r26
    2f2a:	11 24       	eor	r1, r1
    2f2c:	9f 57       	subi	r25, 0x7F	; 127
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	9a f0       	brmi	.+38     	; 0x2f58 <__mulsf3_pse+0x88>
    2f32:	f1 f0       	breq	.+60     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f34:	88 23       	and	r24, r24
    2f36:	4a f0       	brmi	.+18     	; 0x2f4a <__mulsf3_pse+0x7a>
    2f38:	ee 0f       	add	r30, r30
    2f3a:	ff 1f       	adc	r31, r31
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	66 1f       	adc	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	88 1f       	adc	r24, r24
    2f44:	91 50       	subi	r25, 0x01	; 1
    2f46:	50 40       	sbci	r21, 0x00	; 0
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__mulsf3_pse+0x64>
    2f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f4c:	51 05       	cpc	r21, r1
    2f4e:	80 f0       	brcs	.+32     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f50:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2f54:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2f58:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5a:	e4 f3       	brlt	.-8      	; 0x2f54 <__mulsf3_pse+0x84>
    2f5c:	98 3e       	cpi	r25, 0xE8	; 232
    2f5e:	d4 f3       	brlt	.-12     	; 0x2f54 <__mulsf3_pse+0x84>
    2f60:	86 95       	lsr	r24
    2f62:	77 95       	ror	r23
    2f64:	67 95       	ror	r22
    2f66:	b7 95       	ror	r27
    2f68:	f7 95       	ror	r31
    2f6a:	e7 95       	ror	r30
    2f6c:	9f 5f       	subi	r25, 0xFF	; 255
    2f6e:	c1 f7       	brne	.-16     	; 0x2f60 <__mulsf3_pse+0x90>
    2f70:	fe 2b       	or	r31, r30
    2f72:	88 0f       	add	r24, r24
    2f74:	91 1d       	adc	r25, r1
    2f76:	96 95       	lsr	r25
    2f78:	87 95       	ror	r24
    2f7a:	97 f9       	bld	r25, 7
    2f7c:	08 95       	ret

00002f7e <vfprintf>:
    2f7e:	a0 e1       	ldi	r26, 0x10	; 16
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e5 ec       	ldi	r30, 0xC5	; 197
    2f84:	f7 e1       	ldi	r31, 0x17	; 23
    2f86:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__>
    2f8a:	7c 01       	movw	r14, r24
    2f8c:	1b 01       	movw	r2, r22
    2f8e:	6a 01       	movw	r12, r20
    2f90:	fc 01       	movw	r30, r24
    2f92:	16 82       	std	Z+6, r1	; 0x06
    2f94:	17 82       	std	Z+7, r1	; 0x07
    2f96:	83 81       	ldd	r24, Z+3	; 0x03
    2f98:	81 ff       	sbrs	r24, 1
    2f9a:	44 c3       	rjmp	.+1672   	; 0x3624 <vfprintf+0x6a6>
    2f9c:	9e 01       	movw	r18, r28
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa2:	39 01       	movw	r6, r18
    2fa4:	f7 01       	movw	r30, r14
    2fa6:	93 81       	ldd	r25, Z+3	; 0x03
    2fa8:	f1 01       	movw	r30, r2
    2faa:	93 fd       	sbrc	r25, 3
    2fac:	85 91       	lpm	r24, Z+
    2fae:	93 ff       	sbrs	r25, 3
    2fb0:	81 91       	ld	r24, Z+
    2fb2:	1f 01       	movw	r2, r30
    2fb4:	88 23       	and	r24, r24
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <vfprintf+0x3c>
    2fb8:	31 c3       	rjmp	.+1634   	; 0x361c <vfprintf+0x69e>
    2fba:	85 32       	cpi	r24, 0x25	; 37
    2fbc:	39 f4       	brne	.+14     	; 0x2fcc <vfprintf+0x4e>
    2fbe:	93 fd       	sbrc	r25, 3
    2fc0:	85 91       	lpm	r24, Z+
    2fc2:	93 ff       	sbrs	r25, 3
    2fc4:	81 91       	ld	r24, Z+
    2fc6:	1f 01       	movw	r2, r30
    2fc8:	85 32       	cpi	r24, 0x25	; 37
    2fca:	39 f4       	brne	.+14     	; 0x2fda <vfprintf+0x5c>
    2fcc:	b7 01       	movw	r22, r14
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    2fd4:	56 01       	movw	r10, r12
    2fd6:	65 01       	movw	r12, r10
    2fd8:	e5 cf       	rjmp	.-54     	; 0x2fa4 <vfprintf+0x26>
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	51 2c       	mov	r5, r1
    2fde:	91 2c       	mov	r9, r1
    2fe0:	ff e1       	ldi	r31, 0x1F	; 31
    2fe2:	f9 15       	cp	r31, r9
    2fe4:	d8 f0       	brcs	.+54     	; 0x301c <vfprintf+0x9e>
    2fe6:	8b 32       	cpi	r24, 0x2B	; 43
    2fe8:	79 f0       	breq	.+30     	; 0x3008 <vfprintf+0x8a>
    2fea:	38 f4       	brcc	.+14     	; 0x2ffa <vfprintf+0x7c>
    2fec:	80 32       	cpi	r24, 0x20	; 32
    2fee:	79 f0       	breq	.+30     	; 0x300e <vfprintf+0x90>
    2ff0:	83 32       	cpi	r24, 0x23	; 35
    2ff2:	a1 f4       	brne	.+40     	; 0x301c <vfprintf+0x9e>
    2ff4:	f9 2d       	mov	r31, r9
    2ff6:	f0 61       	ori	r31, 0x10	; 16
    2ff8:	2e c0       	rjmp	.+92     	; 0x3056 <vfprintf+0xd8>
    2ffa:	8d 32       	cpi	r24, 0x2D	; 45
    2ffc:	61 f0       	breq	.+24     	; 0x3016 <vfprintf+0x98>
    2ffe:	80 33       	cpi	r24, 0x30	; 48
    3000:	69 f4       	brne	.+26     	; 0x301c <vfprintf+0x9e>
    3002:	29 2d       	mov	r18, r9
    3004:	21 60       	ori	r18, 0x01	; 1
    3006:	2d c0       	rjmp	.+90     	; 0x3062 <vfprintf+0xe4>
    3008:	39 2d       	mov	r19, r9
    300a:	32 60       	ori	r19, 0x02	; 2
    300c:	93 2e       	mov	r9, r19
    300e:	89 2d       	mov	r24, r9
    3010:	84 60       	ori	r24, 0x04	; 4
    3012:	98 2e       	mov	r9, r24
    3014:	2a c0       	rjmp	.+84     	; 0x306a <vfprintf+0xec>
    3016:	e9 2d       	mov	r30, r9
    3018:	e8 60       	ori	r30, 0x08	; 8
    301a:	15 c0       	rjmp	.+42     	; 0x3046 <vfprintf+0xc8>
    301c:	97 fc       	sbrc	r9, 7
    301e:	2d c0       	rjmp	.+90     	; 0x307a <vfprintf+0xfc>
    3020:	20 ed       	ldi	r18, 0xD0	; 208
    3022:	28 0f       	add	r18, r24
    3024:	2a 30       	cpi	r18, 0x0A	; 10
    3026:	88 f4       	brcc	.+34     	; 0x304a <vfprintf+0xcc>
    3028:	96 fe       	sbrs	r9, 6
    302a:	06 c0       	rjmp	.+12     	; 0x3038 <vfprintf+0xba>
    302c:	3a e0       	ldi	r19, 0x0A	; 10
    302e:	13 9f       	mul	r17, r19
    3030:	20 0d       	add	r18, r0
    3032:	11 24       	eor	r1, r1
    3034:	12 2f       	mov	r17, r18
    3036:	19 c0       	rjmp	.+50     	; 0x306a <vfprintf+0xec>
    3038:	8a e0       	ldi	r24, 0x0A	; 10
    303a:	58 9e       	mul	r5, r24
    303c:	20 0d       	add	r18, r0
    303e:	11 24       	eor	r1, r1
    3040:	52 2e       	mov	r5, r18
    3042:	e9 2d       	mov	r30, r9
    3044:	e0 62       	ori	r30, 0x20	; 32
    3046:	9e 2e       	mov	r9, r30
    3048:	10 c0       	rjmp	.+32     	; 0x306a <vfprintf+0xec>
    304a:	8e 32       	cpi	r24, 0x2E	; 46
    304c:	31 f4       	brne	.+12     	; 0x305a <vfprintf+0xdc>
    304e:	96 fc       	sbrc	r9, 6
    3050:	e5 c2       	rjmp	.+1482   	; 0x361c <vfprintf+0x69e>
    3052:	f9 2d       	mov	r31, r9
    3054:	f0 64       	ori	r31, 0x40	; 64
    3056:	9f 2e       	mov	r9, r31
    3058:	08 c0       	rjmp	.+16     	; 0x306a <vfprintf+0xec>
    305a:	8c 36       	cpi	r24, 0x6C	; 108
    305c:	21 f4       	brne	.+8      	; 0x3066 <vfprintf+0xe8>
    305e:	29 2d       	mov	r18, r9
    3060:	20 68       	ori	r18, 0x80	; 128
    3062:	92 2e       	mov	r9, r18
    3064:	02 c0       	rjmp	.+4      	; 0x306a <vfprintf+0xec>
    3066:	88 36       	cpi	r24, 0x68	; 104
    3068:	41 f4       	brne	.+16     	; 0x307a <vfprintf+0xfc>
    306a:	f1 01       	movw	r30, r2
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	1f 01       	movw	r2, r30
    3076:	81 11       	cpse	r24, r1
    3078:	b3 cf       	rjmp	.-154    	; 0x2fe0 <vfprintf+0x62>
    307a:	9b eb       	ldi	r25, 0xBB	; 187
    307c:	98 0f       	add	r25, r24
    307e:	93 30       	cpi	r25, 0x03	; 3
    3080:	20 f4       	brcc	.+8      	; 0x308a <vfprintf+0x10c>
    3082:	99 2d       	mov	r25, r9
    3084:	90 61       	ori	r25, 0x10	; 16
    3086:	80 5e       	subi	r24, 0xE0	; 224
    3088:	07 c0       	rjmp	.+14     	; 0x3098 <vfprintf+0x11a>
    308a:	9b e9       	ldi	r25, 0x9B	; 155
    308c:	98 0f       	add	r25, r24
    308e:	93 30       	cpi	r25, 0x03	; 3
    3090:	08 f0       	brcs	.+2      	; 0x3094 <vfprintf+0x116>
    3092:	66 c1       	rjmp	.+716    	; 0x3360 <vfprintf+0x3e2>
    3094:	99 2d       	mov	r25, r9
    3096:	9f 7e       	andi	r25, 0xEF	; 239
    3098:	96 ff       	sbrs	r25, 6
    309a:	16 e0       	ldi	r17, 0x06	; 6
    309c:	9f 73       	andi	r25, 0x3F	; 63
    309e:	99 2e       	mov	r9, r25
    30a0:	85 36       	cpi	r24, 0x65	; 101
    30a2:	19 f4       	brne	.+6      	; 0x30aa <vfprintf+0x12c>
    30a4:	90 64       	ori	r25, 0x40	; 64
    30a6:	99 2e       	mov	r9, r25
    30a8:	08 c0       	rjmp	.+16     	; 0x30ba <vfprintf+0x13c>
    30aa:	86 36       	cpi	r24, 0x66	; 102
    30ac:	21 f4       	brne	.+8      	; 0x30b6 <vfprintf+0x138>
    30ae:	39 2f       	mov	r19, r25
    30b0:	30 68       	ori	r19, 0x80	; 128
    30b2:	93 2e       	mov	r9, r19
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x13c>
    30b6:	11 11       	cpse	r17, r1
    30b8:	11 50       	subi	r17, 0x01	; 1
    30ba:	97 fe       	sbrs	r9, 7
    30bc:	07 c0       	rjmp	.+14     	; 0x30cc <vfprintf+0x14e>
    30be:	1c 33       	cpi	r17, 0x3C	; 60
    30c0:	50 f4       	brcc	.+20     	; 0x30d6 <vfprintf+0x158>
    30c2:	44 24       	eor	r4, r4
    30c4:	43 94       	inc	r4
    30c6:	41 0e       	add	r4, r17
    30c8:	27 e0       	ldi	r18, 0x07	; 7
    30ca:	0b c0       	rjmp	.+22     	; 0x30e2 <vfprintf+0x164>
    30cc:	18 30       	cpi	r17, 0x08	; 8
    30ce:	38 f0       	brcs	.+14     	; 0x30de <vfprintf+0x160>
    30d0:	27 e0       	ldi	r18, 0x07	; 7
    30d2:	17 e0       	ldi	r17, 0x07	; 7
    30d4:	05 c0       	rjmp	.+10     	; 0x30e0 <vfprintf+0x162>
    30d6:	27 e0       	ldi	r18, 0x07	; 7
    30d8:	9c e3       	ldi	r25, 0x3C	; 60
    30da:	49 2e       	mov	r4, r25
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <vfprintf+0x164>
    30de:	21 2f       	mov	r18, r17
    30e0:	41 2c       	mov	r4, r1
    30e2:	56 01       	movw	r10, r12
    30e4:	84 e0       	ldi	r24, 0x04	; 4
    30e6:	a8 0e       	add	r10, r24
    30e8:	b1 1c       	adc	r11, r1
    30ea:	f6 01       	movw	r30, r12
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	04 2d       	mov	r16, r4
    30f6:	a3 01       	movw	r20, r6
    30f8:	0e 94 95 1b 	call	0x372a	; 0x372a <__ftoa_engine>
    30fc:	6c 01       	movw	r12, r24
    30fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3100:	fc 87       	std	Y+12, r31	; 0x0c
    3102:	f0 ff       	sbrs	r31, 0
    3104:	02 c0       	rjmp	.+4      	; 0x310a <vfprintf+0x18c>
    3106:	f3 ff       	sbrs	r31, 3
    3108:	06 c0       	rjmp	.+12     	; 0x3116 <vfprintf+0x198>
    310a:	91 fc       	sbrc	r9, 1
    310c:	06 c0       	rjmp	.+12     	; 0x311a <vfprintf+0x19c>
    310e:	92 fe       	sbrs	r9, 2
    3110:	06 c0       	rjmp	.+12     	; 0x311e <vfprintf+0x1a0>
    3112:	00 e2       	ldi	r16, 0x20	; 32
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <vfprintf+0x1a2>
    3116:	0d e2       	ldi	r16, 0x2D	; 45
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <vfprintf+0x1a2>
    311a:	0b e2       	ldi	r16, 0x2B	; 43
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <vfprintf+0x1a2>
    311e:	00 e0       	ldi	r16, 0x00	; 0
    3120:	8c 85       	ldd	r24, Y+12	; 0x0c
    3122:	8c 70       	andi	r24, 0x0C	; 12
    3124:	19 f0       	breq	.+6      	; 0x312c <vfprintf+0x1ae>
    3126:	01 11       	cpse	r16, r1
    3128:	5a c2       	rjmp	.+1204   	; 0x35de <vfprintf+0x660>
    312a:	9b c2       	rjmp	.+1334   	; 0x3662 <vfprintf+0x6e4>
    312c:	97 fe       	sbrs	r9, 7
    312e:	10 c0       	rjmp	.+32     	; 0x3150 <vfprintf+0x1d2>
    3130:	4c 0c       	add	r4, r12
    3132:	fc 85       	ldd	r31, Y+12	; 0x0c
    3134:	f4 ff       	sbrs	r31, 4
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <vfprintf+0x1c2>
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	81 33       	cpi	r24, 0x31	; 49
    313c:	09 f4       	brne	.+2      	; 0x3140 <vfprintf+0x1c2>
    313e:	4a 94       	dec	r4
    3140:	14 14       	cp	r1, r4
    3142:	74 f5       	brge	.+92     	; 0x31a0 <vfprintf+0x222>
    3144:	28 e0       	ldi	r18, 0x08	; 8
    3146:	24 15       	cp	r18, r4
    3148:	78 f5       	brcc	.+94     	; 0x31a8 <vfprintf+0x22a>
    314a:	88 e0       	ldi	r24, 0x08	; 8
    314c:	48 2e       	mov	r4, r24
    314e:	2c c0       	rjmp	.+88     	; 0x31a8 <vfprintf+0x22a>
    3150:	96 fc       	sbrc	r9, 6
    3152:	2a c0       	rjmp	.+84     	; 0x31a8 <vfprintf+0x22a>
    3154:	81 2f       	mov	r24, r17
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	8c 15       	cp	r24, r12
    315a:	9d 05       	cpc	r25, r13
    315c:	9c f0       	brlt	.+38     	; 0x3184 <vfprintf+0x206>
    315e:	3c ef       	ldi	r19, 0xFC	; 252
    3160:	c3 16       	cp	r12, r19
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	d3 06       	cpc	r13, r19
    3166:	74 f0       	brlt	.+28     	; 0x3184 <vfprintf+0x206>
    3168:	89 2d       	mov	r24, r9
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	98 2e       	mov	r9, r24
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <vfprintf+0x206>
    3170:	e2 e0       	ldi	r30, 0x02	; 2
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	ec 0f       	add	r30, r28
    3176:	fd 1f       	adc	r31, r29
    3178:	e1 0f       	add	r30, r17
    317a:	f1 1d       	adc	r31, r1
    317c:	80 81       	ld	r24, Z
    317e:	80 33       	cpi	r24, 0x30	; 48
    3180:	19 f4       	brne	.+6      	; 0x3188 <vfprintf+0x20a>
    3182:	11 50       	subi	r17, 0x01	; 1
    3184:	11 11       	cpse	r17, r1
    3186:	f4 cf       	rjmp	.-24     	; 0x3170 <vfprintf+0x1f2>
    3188:	97 fe       	sbrs	r9, 7
    318a:	0e c0       	rjmp	.+28     	; 0x31a8 <vfprintf+0x22a>
    318c:	44 24       	eor	r4, r4
    318e:	43 94       	inc	r4
    3190:	41 0e       	add	r4, r17
    3192:	81 2f       	mov	r24, r17
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	c8 16       	cp	r12, r24
    3198:	d9 06       	cpc	r13, r25
    319a:	2c f4       	brge	.+10     	; 0x31a6 <vfprintf+0x228>
    319c:	1c 19       	sub	r17, r12
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <vfprintf+0x22a>
    31a0:	44 24       	eor	r4, r4
    31a2:	43 94       	inc	r4
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x22a>
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	97 fe       	sbrs	r9, 7
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <vfprintf+0x23a>
    31ac:	1c 14       	cp	r1, r12
    31ae:	1d 04       	cpc	r1, r13
    31b0:	34 f4       	brge	.+12     	; 0x31be <vfprintf+0x240>
    31b2:	c6 01       	movw	r24, r12
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <vfprintf+0x244>
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x244>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	01 11       	cpse	r16, r1
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	11 23       	and	r17, r17
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <vfprintf+0x258>
    31ca:	21 2f       	mov	r18, r17
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	2f 5f       	subi	r18, 0xFF	; 255
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	25 2d       	mov	r18, r5
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	82 17       	cp	r24, r18
    31dc:	93 07       	cpc	r25, r19
    31de:	14 f4       	brge	.+4      	; 0x31e4 <vfprintf+0x266>
    31e0:	58 1a       	sub	r5, r24
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <vfprintf+0x268>
    31e4:	51 2c       	mov	r5, r1
    31e6:	89 2d       	mov	r24, r9
    31e8:	89 70       	andi	r24, 0x09	; 9
    31ea:	49 f4       	brne	.+18     	; 0x31fe <vfprintf+0x280>
    31ec:	55 20       	and	r5, r5
    31ee:	39 f0       	breq	.+14     	; 0x31fe <vfprintf+0x280>
    31f0:	b7 01       	movw	r22, r14
    31f2:	80 e2       	ldi	r24, 0x20	; 32
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    31fa:	5a 94       	dec	r5
    31fc:	f7 cf       	rjmp	.-18     	; 0x31ec <vfprintf+0x26e>
    31fe:	00 23       	and	r16, r16
    3200:	29 f0       	breq	.+10     	; 0x320c <vfprintf+0x28e>
    3202:	b7 01       	movw	r22, r14
    3204:	80 2f       	mov	r24, r16
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    320c:	93 fc       	sbrc	r9, 3
    320e:	09 c0       	rjmp	.+18     	; 0x3222 <vfprintf+0x2a4>
    3210:	55 20       	and	r5, r5
    3212:	39 f0       	breq	.+14     	; 0x3222 <vfprintf+0x2a4>
    3214:	b7 01       	movw	r22, r14
    3216:	80 e3       	ldi	r24, 0x30	; 48
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    321e:	5a 94       	dec	r5
    3220:	f7 cf       	rjmp	.-18     	; 0x3210 <vfprintf+0x292>
    3222:	97 fe       	sbrs	r9, 7
    3224:	4c c0       	rjmp	.+152    	; 0x32be <vfprintf+0x340>
    3226:	46 01       	movw	r8, r12
    3228:	d7 fe       	sbrs	r13, 7
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0x2b2>
    322c:	81 2c       	mov	r8, r1
    322e:	91 2c       	mov	r9, r1
    3230:	c6 01       	movw	r24, r12
    3232:	88 19       	sub	r24, r8
    3234:	99 09       	sbc	r25, r9
    3236:	f3 01       	movw	r30, r6
    3238:	e8 0f       	add	r30, r24
    323a:	f9 1f       	adc	r31, r25
    323c:	ed 87       	std	Y+13, r30	; 0x0d
    323e:	fe 87       	std	Y+14, r31	; 0x0e
    3240:	96 01       	movw	r18, r12
    3242:	24 19       	sub	r18, r4
    3244:	31 09       	sbc	r19, r1
    3246:	2f 87       	std	Y+15, r18	; 0x0f
    3248:	38 8b       	std	Y+16, r19	; 0x10
    324a:	01 2f       	mov	r16, r17
    324c:	10 e0       	ldi	r17, 0x00	; 0
    324e:	11 95       	neg	r17
    3250:	01 95       	neg	r16
    3252:	11 09       	sbc	r17, r1
    3254:	3f ef       	ldi	r19, 0xFF	; 255
    3256:	83 16       	cp	r8, r19
    3258:	93 06       	cpc	r9, r19
    325a:	29 f4       	brne	.+10     	; 0x3266 <vfprintf+0x2e8>
    325c:	b7 01       	movw	r22, r14
    325e:	8e e2       	ldi	r24, 0x2E	; 46
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3266:	c8 14       	cp	r12, r8
    3268:	d9 04       	cpc	r13, r9
    326a:	4c f0       	brlt	.+18     	; 0x327e <vfprintf+0x300>
    326c:	8f 85       	ldd	r24, Y+15	; 0x0f
    326e:	98 89       	ldd	r25, Y+16	; 0x10
    3270:	88 15       	cp	r24, r8
    3272:	99 05       	cpc	r25, r9
    3274:	24 f4       	brge	.+8      	; 0x327e <vfprintf+0x300>
    3276:	ed 85       	ldd	r30, Y+13	; 0x0d
    3278:	fe 85       	ldd	r31, Y+14	; 0x0e
    327a:	81 81       	ldd	r24, Z+1	; 0x01
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <vfprintf+0x302>
    327e:	80 e3       	ldi	r24, 0x30	; 48
    3280:	f1 e0       	ldi	r31, 0x01	; 1
    3282:	8f 1a       	sub	r8, r31
    3284:	91 08       	sbc	r9, r1
    3286:	2d 85       	ldd	r18, Y+13	; 0x0d
    3288:	3e 85       	ldd	r19, Y+14	; 0x0e
    328a:	2f 5f       	subi	r18, 0xFF	; 255
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	2d 87       	std	Y+13, r18	; 0x0d
    3290:	3e 87       	std	Y+14, r19	; 0x0e
    3292:	80 16       	cp	r8, r16
    3294:	91 06       	cpc	r9, r17
    3296:	2c f0       	brlt	.+10     	; 0x32a2 <vfprintf+0x324>
    3298:	b7 01       	movw	r22, r14
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    32a0:	d9 cf       	rjmp	.-78     	; 0x3254 <vfprintf+0x2d6>
    32a2:	c8 14       	cp	r12, r8
    32a4:	d9 04       	cpc	r13, r9
    32a6:	41 f4       	brne	.+16     	; 0x32b8 <vfprintf+0x33a>
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	96 33       	cpi	r25, 0x36	; 54
    32ac:	20 f4       	brcc	.+8      	; 0x32b6 <vfprintf+0x338>
    32ae:	95 33       	cpi	r25, 0x35	; 53
    32b0:	19 f4       	brne	.+6      	; 0x32b8 <vfprintf+0x33a>
    32b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    32b4:	34 ff       	sbrs	r19, 4
    32b6:	81 e3       	ldi	r24, 0x31	; 49
    32b8:	b7 01       	movw	r22, r14
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	4e c0       	rjmp	.+156    	; 0x335a <vfprintf+0x3dc>
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	81 33       	cpi	r24, 0x31	; 49
    32c2:	19 f0       	breq	.+6      	; 0x32ca <vfprintf+0x34c>
    32c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c6:	9f 7e       	andi	r25, 0xEF	; 239
    32c8:	9c 87       	std	Y+12, r25	; 0x0c
    32ca:	b7 01       	movw	r22, r14
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    32d2:	11 11       	cpse	r17, r1
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <vfprintf+0x362>
    32d6:	94 fc       	sbrc	r9, 4
    32d8:	18 c0       	rjmp	.+48     	; 0x330a <vfprintf+0x38c>
    32da:	85 e6       	ldi	r24, 0x65	; 101
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	17 c0       	rjmp	.+46     	; 0x330e <vfprintf+0x390>
    32e0:	b7 01       	movw	r22, r14
    32e2:	8e e2       	ldi	r24, 0x2E	; 46
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    32ea:	1e 5f       	subi	r17, 0xFE	; 254
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	01 e0       	ldi	r16, 0x01	; 1
    32f0:	08 0f       	add	r16, r24
    32f2:	f3 01       	movw	r30, r6
    32f4:	e8 0f       	add	r30, r24
    32f6:	f1 1d       	adc	r31, r1
    32f8:	80 81       	ld	r24, Z
    32fa:	b7 01       	movw	r22, r14
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3302:	80 2f       	mov	r24, r16
    3304:	01 13       	cpse	r16, r17
    3306:	f3 cf       	rjmp	.-26     	; 0x32ee <vfprintf+0x370>
    3308:	e6 cf       	rjmp	.-52     	; 0x32d6 <vfprintf+0x358>
    330a:	85 e4       	ldi	r24, 0x45	; 69
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	b7 01       	movw	r22, r14
    3310:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3314:	d7 fc       	sbrc	r13, 7
    3316:	06 c0       	rjmp	.+12     	; 0x3324 <vfprintf+0x3a6>
    3318:	c1 14       	cp	r12, r1
    331a:	d1 04       	cpc	r13, r1
    331c:	41 f4       	brne	.+16     	; 0x332e <vfprintf+0x3b0>
    331e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3320:	e4 ff       	sbrs	r30, 4
    3322:	05 c0       	rjmp	.+10     	; 0x332e <vfprintf+0x3b0>
    3324:	d1 94       	neg	r13
    3326:	c1 94       	neg	r12
    3328:	d1 08       	sbc	r13, r1
    332a:	8d e2       	ldi	r24, 0x2D	; 45
    332c:	01 c0       	rjmp	.+2      	; 0x3330 <vfprintf+0x3b2>
    332e:	8b e2       	ldi	r24, 0x2B	; 43
    3330:	b7 01       	movw	r22, r14
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3338:	80 e3       	ldi	r24, 0x30	; 48
    333a:	2a e0       	ldi	r18, 0x0A	; 10
    333c:	c2 16       	cp	r12, r18
    333e:	d1 04       	cpc	r13, r1
    3340:	2c f0       	brlt	.+10     	; 0x334c <vfprintf+0x3ce>
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	fa e0       	ldi	r31, 0x0A	; 10
    3346:	cf 1a       	sub	r12, r31
    3348:	d1 08       	sbc	r13, r1
    334a:	f7 cf       	rjmp	.-18     	; 0x333a <vfprintf+0x3bc>
    334c:	b7 01       	movw	r22, r14
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3354:	b7 01       	movw	r22, r14
    3356:	c6 01       	movw	r24, r12
    3358:	c0 96       	adiw	r24, 0x30	; 48
    335a:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    335e:	54 c1       	rjmp	.+680    	; 0x3608 <vfprintf+0x68a>
    3360:	83 36       	cpi	r24, 0x63	; 99
    3362:	31 f0       	breq	.+12     	; 0x3370 <vfprintf+0x3f2>
    3364:	83 37       	cpi	r24, 0x73	; 115
    3366:	79 f0       	breq	.+30     	; 0x3386 <vfprintf+0x408>
    3368:	83 35       	cpi	r24, 0x53	; 83
    336a:	09 f0       	breq	.+2      	; 0x336e <vfprintf+0x3f0>
    336c:	56 c0       	rjmp	.+172    	; 0x341a <vfprintf+0x49c>
    336e:	20 c0       	rjmp	.+64     	; 0x33b0 <vfprintf+0x432>
    3370:	56 01       	movw	r10, r12
    3372:	32 e0       	ldi	r19, 0x02	; 2
    3374:	a3 0e       	add	r10, r19
    3376:	b1 1c       	adc	r11, r1
    3378:	f6 01       	movw	r30, r12
    337a:	80 81       	ld	r24, Z
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	01 e0       	ldi	r16, 0x01	; 1
    3380:	10 e0       	ldi	r17, 0x00	; 0
    3382:	63 01       	movw	r12, r6
    3384:	12 c0       	rjmp	.+36     	; 0x33aa <vfprintf+0x42c>
    3386:	56 01       	movw	r10, r12
    3388:	f2 e0       	ldi	r31, 0x02	; 2
    338a:	af 0e       	add	r10, r31
    338c:	b1 1c       	adc	r11, r1
    338e:	f6 01       	movw	r30, r12
    3390:	c0 80       	ld	r12, Z
    3392:	d1 80       	ldd	r13, Z+1	; 0x01
    3394:	96 fe       	sbrs	r9, 6
    3396:	03 c0       	rjmp	.+6      	; 0x339e <vfprintf+0x420>
    3398:	61 2f       	mov	r22, r17
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x424>
    339e:	6f ef       	ldi	r22, 0xFF	; 255
    33a0:	7f ef       	ldi	r23, 0xFF	; 255
    33a2:	c6 01       	movw	r24, r12
    33a4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <strnlen>
    33a8:	8c 01       	movw	r16, r24
    33aa:	f9 2d       	mov	r31, r9
    33ac:	ff 77       	andi	r31, 0x7F	; 127
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <vfprintf+0x45a>
    33b0:	56 01       	movw	r10, r12
    33b2:	22 e0       	ldi	r18, 0x02	; 2
    33b4:	a2 0e       	add	r10, r18
    33b6:	b1 1c       	adc	r11, r1
    33b8:	f6 01       	movw	r30, r12
    33ba:	c0 80       	ld	r12, Z
    33bc:	d1 80       	ldd	r13, Z+1	; 0x01
    33be:	96 fe       	sbrs	r9, 6
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <vfprintf+0x44a>
    33c2:	61 2f       	mov	r22, r17
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <vfprintf+0x44e>
    33c8:	6f ef       	ldi	r22, 0xFF	; 255
    33ca:	7f ef       	ldi	r23, 0xFF	; 255
    33cc:	c6 01       	movw	r24, r12
    33ce:	0e 94 6d 1c 	call	0x38da	; 0x38da <strnlen_P>
    33d2:	8c 01       	movw	r16, r24
    33d4:	f9 2d       	mov	r31, r9
    33d6:	f0 68       	ori	r31, 0x80	; 128
    33d8:	9f 2e       	mov	r9, r31
    33da:	f3 fd       	sbrc	r31, 3
    33dc:	1a c0       	rjmp	.+52     	; 0x3412 <vfprintf+0x494>
    33de:	85 2d       	mov	r24, r5
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	08 17       	cp	r16, r24
    33e4:	19 07       	cpc	r17, r25
    33e6:	a8 f4       	brcc	.+42     	; 0x3412 <vfprintf+0x494>
    33e8:	b7 01       	movw	r22, r14
    33ea:	80 e2       	ldi	r24, 0x20	; 32
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    33f2:	5a 94       	dec	r5
    33f4:	f4 cf       	rjmp	.-24     	; 0x33de <vfprintf+0x460>
    33f6:	f6 01       	movw	r30, r12
    33f8:	97 fc       	sbrc	r9, 7
    33fa:	85 91       	lpm	r24, Z+
    33fc:	97 fe       	sbrs	r9, 7
    33fe:	81 91       	ld	r24, Z+
    3400:	6f 01       	movw	r12, r30
    3402:	b7 01       	movw	r22, r14
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    340a:	51 10       	cpse	r5, r1
    340c:	5a 94       	dec	r5
    340e:	01 50       	subi	r16, 0x01	; 1
    3410:	11 09       	sbc	r17, r1
    3412:	01 15       	cp	r16, r1
    3414:	11 05       	cpc	r17, r1
    3416:	79 f7       	brne	.-34     	; 0x33f6 <vfprintf+0x478>
    3418:	f7 c0       	rjmp	.+494    	; 0x3608 <vfprintf+0x68a>
    341a:	84 36       	cpi	r24, 0x64	; 100
    341c:	11 f0       	breq	.+4      	; 0x3422 <vfprintf+0x4a4>
    341e:	89 36       	cpi	r24, 0x69	; 105
    3420:	61 f5       	brne	.+88     	; 0x347a <vfprintf+0x4fc>
    3422:	56 01       	movw	r10, r12
    3424:	97 fe       	sbrs	r9, 7
    3426:	09 c0       	rjmp	.+18     	; 0x343a <vfprintf+0x4bc>
    3428:	24 e0       	ldi	r18, 0x04	; 4
    342a:	a2 0e       	add	r10, r18
    342c:	b1 1c       	adc	r11, r1
    342e:	f6 01       	movw	r30, r12
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	0a c0       	rjmp	.+20     	; 0x344e <vfprintf+0x4d0>
    343a:	f2 e0       	ldi	r31, 0x02	; 2
    343c:	af 0e       	add	r10, r31
    343e:	b1 1c       	adc	r11, r1
    3440:	f6 01       	movw	r30, r12
    3442:	60 81       	ld	r22, Z
    3444:	71 81       	ldd	r23, Z+1	; 0x01
    3446:	07 2e       	mov	r0, r23
    3448:	00 0c       	add	r0, r0
    344a:	88 0b       	sbc	r24, r24
    344c:	99 0b       	sbc	r25, r25
    344e:	f9 2d       	mov	r31, r9
    3450:	ff 76       	andi	r31, 0x6F	; 111
    3452:	9f 2e       	mov	r9, r31
    3454:	97 ff       	sbrs	r25, 7
    3456:	09 c0       	rjmp	.+18     	; 0x346a <vfprintf+0x4ec>
    3458:	90 95       	com	r25
    345a:	80 95       	com	r24
    345c:	70 95       	com	r23
    345e:	61 95       	neg	r22
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	8f 4f       	sbci	r24, 0xFF	; 255
    3464:	9f 4f       	sbci	r25, 0xFF	; 255
    3466:	f0 68       	ori	r31, 0x80	; 128
    3468:	9f 2e       	mov	r9, r31
    346a:	2a e0       	ldi	r18, 0x0A	; 10
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	a3 01       	movw	r20, r6
    3470:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__ultoa_invert>
    3474:	c8 2e       	mov	r12, r24
    3476:	c6 18       	sub	r12, r6
    3478:	3f c0       	rjmp	.+126    	; 0x34f8 <vfprintf+0x57a>
    347a:	09 2d       	mov	r16, r9
    347c:	85 37       	cpi	r24, 0x75	; 117
    347e:	21 f4       	brne	.+8      	; 0x3488 <vfprintf+0x50a>
    3480:	0f 7e       	andi	r16, 0xEF	; 239
    3482:	2a e0       	ldi	r18, 0x0A	; 10
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	1d c0       	rjmp	.+58     	; 0x34c2 <vfprintf+0x544>
    3488:	09 7f       	andi	r16, 0xF9	; 249
    348a:	8f 36       	cpi	r24, 0x6F	; 111
    348c:	91 f0       	breq	.+36     	; 0x34b2 <vfprintf+0x534>
    348e:	18 f4       	brcc	.+6      	; 0x3496 <vfprintf+0x518>
    3490:	88 35       	cpi	r24, 0x58	; 88
    3492:	59 f0       	breq	.+22     	; 0x34aa <vfprintf+0x52c>
    3494:	c3 c0       	rjmp	.+390    	; 0x361c <vfprintf+0x69e>
    3496:	80 37       	cpi	r24, 0x70	; 112
    3498:	19 f0       	breq	.+6      	; 0x34a0 <vfprintf+0x522>
    349a:	88 37       	cpi	r24, 0x78	; 120
    349c:	11 f0       	breq	.+4      	; 0x34a2 <vfprintf+0x524>
    349e:	be c0       	rjmp	.+380    	; 0x361c <vfprintf+0x69e>
    34a0:	00 61       	ori	r16, 0x10	; 16
    34a2:	04 ff       	sbrs	r16, 4
    34a4:	09 c0       	rjmp	.+18     	; 0x34b8 <vfprintf+0x53a>
    34a6:	04 60       	ori	r16, 0x04	; 4
    34a8:	07 c0       	rjmp	.+14     	; 0x34b8 <vfprintf+0x53a>
    34aa:	94 fe       	sbrs	r9, 4
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <vfprintf+0x540>
    34ae:	06 60       	ori	r16, 0x06	; 6
    34b0:	06 c0       	rjmp	.+12     	; 0x34be <vfprintf+0x540>
    34b2:	28 e0       	ldi	r18, 0x08	; 8
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	05 c0       	rjmp	.+10     	; 0x34c2 <vfprintf+0x544>
    34b8:	20 e1       	ldi	r18, 0x10	; 16
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <vfprintf+0x544>
    34be:	20 e1       	ldi	r18, 0x10	; 16
    34c0:	32 e0       	ldi	r19, 0x02	; 2
    34c2:	56 01       	movw	r10, r12
    34c4:	07 ff       	sbrs	r16, 7
    34c6:	09 c0       	rjmp	.+18     	; 0x34da <vfprintf+0x55c>
    34c8:	84 e0       	ldi	r24, 0x04	; 4
    34ca:	a8 0e       	add	r10, r24
    34cc:	b1 1c       	adc	r11, r1
    34ce:	f6 01       	movw	r30, r12
    34d0:	60 81       	ld	r22, Z
    34d2:	71 81       	ldd	r23, Z+1	; 0x01
    34d4:	82 81       	ldd	r24, Z+2	; 0x02
    34d6:	93 81       	ldd	r25, Z+3	; 0x03
    34d8:	08 c0       	rjmp	.+16     	; 0x34ea <vfprintf+0x56c>
    34da:	f2 e0       	ldi	r31, 0x02	; 2
    34dc:	af 0e       	add	r10, r31
    34de:	b1 1c       	adc	r11, r1
    34e0:	f6 01       	movw	r30, r12
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	a3 01       	movw	r20, r6
    34ec:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__ultoa_invert>
    34f0:	c8 2e       	mov	r12, r24
    34f2:	c6 18       	sub	r12, r6
    34f4:	0f 77       	andi	r16, 0x7F	; 127
    34f6:	90 2e       	mov	r9, r16
    34f8:	96 fe       	sbrs	r9, 6
    34fa:	0b c0       	rjmp	.+22     	; 0x3512 <vfprintf+0x594>
    34fc:	09 2d       	mov	r16, r9
    34fe:	0e 7f       	andi	r16, 0xFE	; 254
    3500:	c1 16       	cp	r12, r17
    3502:	50 f4       	brcc	.+20     	; 0x3518 <vfprintf+0x59a>
    3504:	94 fe       	sbrs	r9, 4
    3506:	0a c0       	rjmp	.+20     	; 0x351c <vfprintf+0x59e>
    3508:	92 fc       	sbrc	r9, 2
    350a:	08 c0       	rjmp	.+16     	; 0x351c <vfprintf+0x59e>
    350c:	09 2d       	mov	r16, r9
    350e:	0e 7e       	andi	r16, 0xEE	; 238
    3510:	05 c0       	rjmp	.+10     	; 0x351c <vfprintf+0x59e>
    3512:	dc 2c       	mov	r13, r12
    3514:	09 2d       	mov	r16, r9
    3516:	03 c0       	rjmp	.+6      	; 0x351e <vfprintf+0x5a0>
    3518:	dc 2c       	mov	r13, r12
    351a:	01 c0       	rjmp	.+2      	; 0x351e <vfprintf+0x5a0>
    351c:	d1 2e       	mov	r13, r17
    351e:	04 ff       	sbrs	r16, 4
    3520:	0d c0       	rjmp	.+26     	; 0x353c <vfprintf+0x5be>
    3522:	fe 01       	movw	r30, r28
    3524:	ec 0d       	add	r30, r12
    3526:	f1 1d       	adc	r31, r1
    3528:	80 81       	ld	r24, Z
    352a:	80 33       	cpi	r24, 0x30	; 48
    352c:	11 f4       	brne	.+4      	; 0x3532 <vfprintf+0x5b4>
    352e:	09 7e       	andi	r16, 0xE9	; 233
    3530:	09 c0       	rjmp	.+18     	; 0x3544 <vfprintf+0x5c6>
    3532:	02 ff       	sbrs	r16, 2
    3534:	06 c0       	rjmp	.+12     	; 0x3542 <vfprintf+0x5c4>
    3536:	d3 94       	inc	r13
    3538:	d3 94       	inc	r13
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <vfprintf+0x5c6>
    353c:	80 2f       	mov	r24, r16
    353e:	86 78       	andi	r24, 0x86	; 134
    3540:	09 f0       	breq	.+2      	; 0x3544 <vfprintf+0x5c6>
    3542:	d3 94       	inc	r13
    3544:	03 fd       	sbrc	r16, 3
    3546:	11 c0       	rjmp	.+34     	; 0x356a <vfprintf+0x5ec>
    3548:	00 ff       	sbrs	r16, 0
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <vfprintf+0x5da>
    354c:	1c 2d       	mov	r17, r12
    354e:	d5 14       	cp	r13, r5
    3550:	80 f4       	brcc	.+32     	; 0x3572 <vfprintf+0x5f4>
    3552:	15 0d       	add	r17, r5
    3554:	1d 19       	sub	r17, r13
    3556:	0d c0       	rjmp	.+26     	; 0x3572 <vfprintf+0x5f4>
    3558:	d5 14       	cp	r13, r5
    355a:	58 f4       	brcc	.+22     	; 0x3572 <vfprintf+0x5f4>
    355c:	b7 01       	movw	r22, r14
    355e:	80 e2       	ldi	r24, 0x20	; 32
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3566:	d3 94       	inc	r13
    3568:	f7 cf       	rjmp	.-18     	; 0x3558 <vfprintf+0x5da>
    356a:	d5 14       	cp	r13, r5
    356c:	10 f4       	brcc	.+4      	; 0x3572 <vfprintf+0x5f4>
    356e:	5d 18       	sub	r5, r13
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <vfprintf+0x5f6>
    3572:	51 2c       	mov	r5, r1
    3574:	04 ff       	sbrs	r16, 4
    3576:	10 c0       	rjmp	.+32     	; 0x3598 <vfprintf+0x61a>
    3578:	b7 01       	movw	r22, r14
    357a:	80 e3       	ldi	r24, 0x30	; 48
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3582:	02 ff       	sbrs	r16, 2
    3584:	17 c0       	rjmp	.+46     	; 0x35b4 <vfprintf+0x636>
    3586:	01 fd       	sbrc	r16, 1
    3588:	03 c0       	rjmp	.+6      	; 0x3590 <vfprintf+0x612>
    358a:	88 e7       	ldi	r24, 0x78	; 120
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <vfprintf+0x616>
    3590:	88 e5       	ldi	r24, 0x58	; 88
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	b7 01       	movw	r22, r14
    3596:	0c c0       	rjmp	.+24     	; 0x35b0 <vfprintf+0x632>
    3598:	80 2f       	mov	r24, r16
    359a:	86 78       	andi	r24, 0x86	; 134
    359c:	59 f0       	breq	.+22     	; 0x35b4 <vfprintf+0x636>
    359e:	01 ff       	sbrs	r16, 1
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <vfprintf+0x628>
    35a2:	8b e2       	ldi	r24, 0x2B	; 43
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <vfprintf+0x62a>
    35a6:	80 e2       	ldi	r24, 0x20	; 32
    35a8:	07 fd       	sbrc	r16, 7
    35aa:	8d e2       	ldi	r24, 0x2D	; 45
    35ac:	b7 01       	movw	r22, r14
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    35b4:	c1 16       	cp	r12, r17
    35b6:	38 f4       	brcc	.+14     	; 0x35c6 <vfprintf+0x648>
    35b8:	b7 01       	movw	r22, r14
    35ba:	80 e3       	ldi	r24, 0x30	; 48
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    35c2:	11 50       	subi	r17, 0x01	; 1
    35c4:	f7 cf       	rjmp	.-18     	; 0x35b4 <vfprintf+0x636>
    35c6:	ca 94       	dec	r12
    35c8:	f3 01       	movw	r30, r6
    35ca:	ec 0d       	add	r30, r12
    35cc:	f1 1d       	adc	r31, r1
    35ce:	80 81       	ld	r24, Z
    35d0:	b7 01       	movw	r22, r14
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    35d8:	c1 10       	cpse	r12, r1
    35da:	f5 cf       	rjmp	.-22     	; 0x35c6 <vfprintf+0x648>
    35dc:	15 c0       	rjmp	.+42     	; 0x3608 <vfprintf+0x68a>
    35de:	f4 e0       	ldi	r31, 0x04	; 4
    35e0:	f5 15       	cp	r31, r5
    35e2:	60 f5       	brcc	.+88     	; 0x363c <vfprintf+0x6be>
    35e4:	84 e0       	ldi	r24, 0x04	; 4
    35e6:	58 1a       	sub	r5, r24
    35e8:	93 fe       	sbrs	r9, 3
    35ea:	1f c0       	rjmp	.+62     	; 0x362a <vfprintf+0x6ac>
    35ec:	01 11       	cpse	r16, r1
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <vfprintf+0x6c0>
    35f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    35f2:	23 ff       	sbrs	r18, 3
    35f4:	2a c0       	rjmp	.+84     	; 0x364a <vfprintf+0x6cc>
    35f6:	00 ea       	ldi	r16, 0xA0	; 160
    35f8:	10 e0       	ldi	r17, 0x00	; 0
    35fa:	39 2d       	mov	r19, r9
    35fc:	30 71       	andi	r19, 0x10	; 16
    35fe:	93 2e       	mov	r9, r19
    3600:	f8 01       	movw	r30, r16
    3602:	84 91       	lpm	r24, Z
    3604:	81 11       	cpse	r24, r1
    3606:	24 c0       	rjmp	.+72     	; 0x3650 <vfprintf+0x6d2>
    3608:	55 20       	and	r5, r5
    360a:	09 f4       	brne	.+2      	; 0x360e <vfprintf+0x690>
    360c:	e4 cc       	rjmp	.-1592   	; 0x2fd6 <vfprintf+0x58>
    360e:	b7 01       	movw	r22, r14
    3610:	80 e2       	ldi	r24, 0x20	; 32
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3618:	5a 94       	dec	r5
    361a:	f6 cf       	rjmp	.-20     	; 0x3608 <vfprintf+0x68a>
    361c:	f7 01       	movw	r30, r14
    361e:	86 81       	ldd	r24, Z+6	; 0x06
    3620:	97 81       	ldd	r25, Z+7	; 0x07
    3622:	26 c0       	rjmp	.+76     	; 0x3670 <vfprintf+0x6f2>
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	23 c0       	rjmp	.+70     	; 0x3670 <vfprintf+0x6f2>
    362a:	b7 01       	movw	r22, r14
    362c:	80 e2       	ldi	r24, 0x20	; 32
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3634:	5a 94       	dec	r5
    3636:	51 10       	cpse	r5, r1
    3638:	f8 cf       	rjmp	.-16     	; 0x362a <vfprintf+0x6ac>
    363a:	d8 cf       	rjmp	.-80     	; 0x35ec <vfprintf+0x66e>
    363c:	51 2c       	mov	r5, r1
    363e:	b7 01       	movw	r22, r14
    3640:	80 2f       	mov	r24, r16
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    3648:	d3 cf       	rjmp	.-90     	; 0x35f0 <vfprintf+0x672>
    364a:	04 ea       	ldi	r16, 0xA4	; 164
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	d5 cf       	rjmp	.-86     	; 0x35fa <vfprintf+0x67c>
    3650:	91 10       	cpse	r9, r1
    3652:	80 52       	subi	r24, 0x20	; 32
    3654:	b7 01       	movw	r22, r14
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 95 1c 	call	0x392a	; 0x392a <fputc>
    365c:	0f 5f       	subi	r16, 0xFF	; 255
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	cf cf       	rjmp	.-98     	; 0x3600 <vfprintf+0x682>
    3662:	23 e0       	ldi	r18, 0x03	; 3
    3664:	25 15       	cp	r18, r5
    3666:	10 f4       	brcc	.+4      	; 0x366c <vfprintf+0x6ee>
    3668:	83 e0       	ldi	r24, 0x03	; 3
    366a:	bd cf       	rjmp	.-134    	; 0x35e6 <vfprintf+0x668>
    366c:	51 2c       	mov	r5, r1
    366e:	c0 cf       	rjmp	.-128    	; 0x35f0 <vfprintf+0x672>
    3670:	60 96       	adiw	r28, 0x10	; 16
    3672:	e2 e1       	ldi	r30, 0x12	; 18
    3674:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__epilogue_restores__>

00003678 <__divmodhi4>:
    3678:	97 fb       	bst	r25, 7
    367a:	07 2e       	mov	r0, r23
    367c:	16 f4       	brtc	.+4      	; 0x3682 <__divmodhi4+0xa>
    367e:	00 94       	com	r0
    3680:	07 d0       	rcall	.+14     	; 0x3690 <__divmodhi4_neg1>
    3682:	77 fd       	sbrc	r23, 7
    3684:	09 d0       	rcall	.+18     	; 0x3698 <__divmodhi4_neg2>
    3686:	0e 94 81 1b 	call	0x3702	; 0x3702 <__udivmodhi4>
    368a:	07 fc       	sbrc	r0, 7
    368c:	05 d0       	rcall	.+10     	; 0x3698 <__divmodhi4_neg2>
    368e:	3e f4       	brtc	.+14     	; 0x369e <__divmodhi4_exit>

00003690 <__divmodhi4_neg1>:
    3690:	90 95       	com	r25
    3692:	81 95       	neg	r24
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	08 95       	ret

00003698 <__divmodhi4_neg2>:
    3698:	70 95       	com	r23
    369a:	61 95       	neg	r22
    369c:	7f 4f       	sbci	r23, 0xFF	; 255

0000369e <__divmodhi4_exit>:
    369e:	08 95       	ret

000036a0 <__prologue_saves__>:
    36a0:	2f 92       	push	r2
    36a2:	3f 92       	push	r3
    36a4:	4f 92       	push	r4
    36a6:	5f 92       	push	r5
    36a8:	6f 92       	push	r6
    36aa:	7f 92       	push	r7
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	ca 1b       	sub	r28, r26
    36ca:	db 0b       	sbc	r29, r27
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	09 94       	ijmp

000036d2 <__epilogue_restores__>:
    36d2:	2a 88       	ldd	r2, Y+18	; 0x12
    36d4:	39 88       	ldd	r3, Y+17	; 0x11
    36d6:	48 88       	ldd	r4, Y+16	; 0x10
    36d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    36da:	6e 84       	ldd	r6, Y+14	; 0x0e
    36dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    36de:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    36e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    36e4:	b9 84       	ldd	r11, Y+9	; 0x09
    36e6:	c8 84       	ldd	r12, Y+8	; 0x08
    36e8:	df 80       	ldd	r13, Y+7	; 0x07
    36ea:	ee 80       	ldd	r14, Y+6	; 0x06
    36ec:	fd 80       	ldd	r15, Y+5	; 0x05
    36ee:	0c 81       	ldd	r16, Y+4	; 0x04
    36f0:	1b 81       	ldd	r17, Y+3	; 0x03
    36f2:	aa 81       	ldd	r26, Y+2	; 0x02
    36f4:	b9 81       	ldd	r27, Y+1	; 0x01
    36f6:	ce 0f       	add	r28, r30
    36f8:	d1 1d       	adc	r29, r1
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	ed 01       	movw	r28, r26
    3700:	08 95       	ret

00003702 <__udivmodhi4>:
    3702:	aa 1b       	sub	r26, r26
    3704:	bb 1b       	sub	r27, r27
    3706:	51 e1       	ldi	r21, 0x11	; 17
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <__udivmodhi4_ep>

0000370a <__udivmodhi4_loop>:
    370a:	aa 1f       	adc	r26, r26
    370c:	bb 1f       	adc	r27, r27
    370e:	a6 17       	cp	r26, r22
    3710:	b7 07       	cpc	r27, r23
    3712:	10 f0       	brcs	.+4      	; 0x3718 <__udivmodhi4_ep>
    3714:	a6 1b       	sub	r26, r22
    3716:	b7 0b       	sbc	r27, r23

00003718 <__udivmodhi4_ep>:
    3718:	88 1f       	adc	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	5a 95       	dec	r21
    371e:	a9 f7       	brne	.-22     	; 0x370a <__udivmodhi4_loop>
    3720:	80 95       	com	r24
    3722:	90 95       	com	r25
    3724:	bc 01       	movw	r22, r24
    3726:	cd 01       	movw	r24, r26
    3728:	08 95       	ret

0000372a <__ftoa_engine>:
    372a:	28 30       	cpi	r18, 0x08	; 8
    372c:	08 f0       	brcs	.+2      	; 0x3730 <__ftoa_engine+0x6>
    372e:	27 e0       	ldi	r18, 0x07	; 7
    3730:	33 27       	eor	r19, r19
    3732:	da 01       	movw	r26, r20
    3734:	99 0f       	add	r25, r25
    3736:	31 1d       	adc	r19, r1
    3738:	87 fd       	sbrc	r24, 7
    373a:	91 60       	ori	r25, 0x01	; 1
    373c:	00 96       	adiw	r24, 0x00	; 0
    373e:	61 05       	cpc	r22, r1
    3740:	71 05       	cpc	r23, r1
    3742:	39 f4       	brne	.+14     	; 0x3752 <__ftoa_engine+0x28>
    3744:	32 60       	ori	r19, 0x02	; 2
    3746:	2e 5f       	subi	r18, 0xFE	; 254
    3748:	3d 93       	st	X+, r19
    374a:	30 e3       	ldi	r19, 0x30	; 48
    374c:	2a 95       	dec	r18
    374e:	e1 f7       	brne	.-8      	; 0x3748 <__ftoa_engine+0x1e>
    3750:	08 95       	ret
    3752:	9f 3f       	cpi	r25, 0xFF	; 255
    3754:	30 f0       	brcs	.+12     	; 0x3762 <__ftoa_engine+0x38>
    3756:	80 38       	cpi	r24, 0x80	; 128
    3758:	71 05       	cpc	r23, r1
    375a:	61 05       	cpc	r22, r1
    375c:	09 f0       	breq	.+2      	; 0x3760 <__ftoa_engine+0x36>
    375e:	3c 5f       	subi	r19, 0xFC	; 252
    3760:	3c 5f       	subi	r19, 0xFC	; 252
    3762:	3d 93       	st	X+, r19
    3764:	91 30       	cpi	r25, 0x01	; 1
    3766:	08 f0       	brcs	.+2      	; 0x376a <__ftoa_engine+0x40>
    3768:	80 68       	ori	r24, 0x80	; 128
    376a:	91 1d       	adc	r25, r1
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	1f 93       	push	r17
    3772:	0f 93       	push	r16
    3774:	ff 92       	push	r15
    3776:	ef 92       	push	r14
    3778:	19 2f       	mov	r17, r25
    377a:	98 7f       	andi	r25, 0xF8	; 248
    377c:	96 95       	lsr	r25
    377e:	e9 2f       	mov	r30, r25
    3780:	96 95       	lsr	r25
    3782:	96 95       	lsr	r25
    3784:	e9 0f       	add	r30, r25
    3786:	ff 27       	eor	r31, r31
    3788:	ee 5f       	subi	r30, 0xFE	; 254
    378a:	fe 4f       	sbci	r31, 0xFE	; 254
    378c:	99 27       	eor	r25, r25
    378e:	33 27       	eor	r19, r19
    3790:	ee 24       	eor	r14, r14
    3792:	ff 24       	eor	r15, r15
    3794:	a7 01       	movw	r20, r14
    3796:	e7 01       	movw	r28, r14
    3798:	05 90       	lpm	r0, Z+
    379a:	08 94       	sec
    379c:	07 94       	ror	r0
    379e:	28 f4       	brcc	.+10     	; 0x37aa <__ftoa_engine+0x80>
    37a0:	36 0f       	add	r19, r22
    37a2:	e7 1e       	adc	r14, r23
    37a4:	f8 1e       	adc	r15, r24
    37a6:	49 1f       	adc	r20, r25
    37a8:	51 1d       	adc	r21, r1
    37aa:	66 0f       	add	r22, r22
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 1f       	adc	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	06 94       	lsr	r0
    37b4:	a1 f7       	brne	.-24     	; 0x379e <__ftoa_engine+0x74>
    37b6:	05 90       	lpm	r0, Z+
    37b8:	07 94       	ror	r0
    37ba:	28 f4       	brcc	.+10     	; 0x37c6 <__ftoa_engine+0x9c>
    37bc:	e7 0e       	add	r14, r23
    37be:	f8 1e       	adc	r15, r24
    37c0:	49 1f       	adc	r20, r25
    37c2:	56 1f       	adc	r21, r22
    37c4:	c1 1d       	adc	r28, r1
    37c6:	77 0f       	add	r23, r23
    37c8:	88 1f       	adc	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	66 1f       	adc	r22, r22
    37ce:	06 94       	lsr	r0
    37d0:	a1 f7       	brne	.-24     	; 0x37ba <__ftoa_engine+0x90>
    37d2:	05 90       	lpm	r0, Z+
    37d4:	07 94       	ror	r0
    37d6:	28 f4       	brcc	.+10     	; 0x37e2 <__ftoa_engine+0xb8>
    37d8:	f8 0e       	add	r15, r24
    37da:	49 1f       	adc	r20, r25
    37dc:	56 1f       	adc	r21, r22
    37de:	c7 1f       	adc	r28, r23
    37e0:	d1 1d       	adc	r29, r1
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	66 1f       	adc	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	06 94       	lsr	r0
    37ec:	a1 f7       	brne	.-24     	; 0x37d6 <__ftoa_engine+0xac>
    37ee:	05 90       	lpm	r0, Z+
    37f0:	07 94       	ror	r0
    37f2:	20 f4       	brcc	.+8      	; 0x37fc <__ftoa_engine+0xd2>
    37f4:	49 0f       	add	r20, r25
    37f6:	56 1f       	adc	r21, r22
    37f8:	c7 1f       	adc	r28, r23
    37fa:	d8 1f       	adc	r29, r24
    37fc:	99 0f       	add	r25, r25
    37fe:	66 1f       	adc	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	06 94       	lsr	r0
    3806:	a9 f7       	brne	.-22     	; 0x37f2 <__ftoa_engine+0xc8>
    3808:	84 91       	lpm	r24, Z
    380a:	10 95       	com	r17
    380c:	17 70       	andi	r17, 0x07	; 7
    380e:	41 f0       	breq	.+16     	; 0x3820 <__ftoa_engine+0xf6>
    3810:	d6 95       	lsr	r29
    3812:	c7 95       	ror	r28
    3814:	57 95       	ror	r21
    3816:	47 95       	ror	r20
    3818:	f7 94       	ror	r15
    381a:	e7 94       	ror	r14
    381c:	1a 95       	dec	r17
    381e:	c1 f7       	brne	.-16     	; 0x3810 <__ftoa_engine+0xe6>
    3820:	e8 ea       	ldi	r30, 0xA8	; 168
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	68 94       	set
    3826:	15 90       	lpm	r1, Z+
    3828:	15 91       	lpm	r17, Z+
    382a:	35 91       	lpm	r19, Z+
    382c:	65 91       	lpm	r22, Z+
    382e:	95 91       	lpm	r25, Z+
    3830:	05 90       	lpm	r0, Z+
    3832:	7f e2       	ldi	r23, 0x2F	; 47
    3834:	73 95       	inc	r23
    3836:	e1 18       	sub	r14, r1
    3838:	f1 0a       	sbc	r15, r17
    383a:	43 0b       	sbc	r20, r19
    383c:	56 0b       	sbc	r21, r22
    383e:	c9 0b       	sbc	r28, r25
    3840:	d0 09       	sbc	r29, r0
    3842:	c0 f7       	brcc	.-16     	; 0x3834 <__ftoa_engine+0x10a>
    3844:	e1 0c       	add	r14, r1
    3846:	f1 1e       	adc	r15, r17
    3848:	43 1f       	adc	r20, r19
    384a:	56 1f       	adc	r21, r22
    384c:	c9 1f       	adc	r28, r25
    384e:	d0 1d       	adc	r29, r0
    3850:	7e f4       	brtc	.+30     	; 0x3870 <__ftoa_engine+0x146>
    3852:	70 33       	cpi	r23, 0x30	; 48
    3854:	11 f4       	brne	.+4      	; 0x385a <__ftoa_engine+0x130>
    3856:	8a 95       	dec	r24
    3858:	e6 cf       	rjmp	.-52     	; 0x3826 <__ftoa_engine+0xfc>
    385a:	e8 94       	clt
    385c:	01 50       	subi	r16, 0x01	; 1
    385e:	30 f0       	brcs	.+12     	; 0x386c <__ftoa_engine+0x142>
    3860:	08 0f       	add	r16, r24
    3862:	0a f4       	brpl	.+2      	; 0x3866 <__ftoa_engine+0x13c>
    3864:	00 27       	eor	r16, r16
    3866:	02 17       	cp	r16, r18
    3868:	08 f4       	brcc	.+2      	; 0x386c <__ftoa_engine+0x142>
    386a:	20 2f       	mov	r18, r16
    386c:	23 95       	inc	r18
    386e:	02 2f       	mov	r16, r18
    3870:	7a 33       	cpi	r23, 0x3A	; 58
    3872:	28 f0       	brcs	.+10     	; 0x387e <__ftoa_engine+0x154>
    3874:	79 e3       	ldi	r23, 0x39	; 57
    3876:	7d 93       	st	X+, r23
    3878:	2a 95       	dec	r18
    387a:	e9 f7       	brne	.-6      	; 0x3876 <__ftoa_engine+0x14c>
    387c:	10 c0       	rjmp	.+32     	; 0x389e <__ftoa_engine+0x174>
    387e:	7d 93       	st	X+, r23
    3880:	2a 95       	dec	r18
    3882:	89 f6       	brne	.-94     	; 0x3826 <__ftoa_engine+0xfc>
    3884:	06 94       	lsr	r0
    3886:	97 95       	ror	r25
    3888:	67 95       	ror	r22
    388a:	37 95       	ror	r19
    388c:	17 95       	ror	r17
    388e:	17 94       	ror	r1
    3890:	e1 18       	sub	r14, r1
    3892:	f1 0a       	sbc	r15, r17
    3894:	43 0b       	sbc	r20, r19
    3896:	56 0b       	sbc	r21, r22
    3898:	c9 0b       	sbc	r28, r25
    389a:	d0 09       	sbc	r29, r0
    389c:	98 f0       	brcs	.+38     	; 0x38c4 <__ftoa_engine+0x19a>
    389e:	23 95       	inc	r18
    38a0:	7e 91       	ld	r23, -X
    38a2:	73 95       	inc	r23
    38a4:	7a 33       	cpi	r23, 0x3A	; 58
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__ftoa_engine+0x180>
    38a8:	70 e3       	ldi	r23, 0x30	; 48
    38aa:	7c 93       	st	X, r23
    38ac:	20 13       	cpse	r18, r16
    38ae:	b8 f7       	brcc	.-18     	; 0x389e <__ftoa_engine+0x174>
    38b0:	7e 91       	ld	r23, -X
    38b2:	70 61       	ori	r23, 0x10	; 16
    38b4:	7d 93       	st	X+, r23
    38b6:	30 f0       	brcs	.+12     	; 0x38c4 <__ftoa_engine+0x19a>
    38b8:	83 95       	inc	r24
    38ba:	71 e3       	ldi	r23, 0x31	; 49
    38bc:	7d 93       	st	X+, r23
    38be:	70 e3       	ldi	r23, 0x30	; 48
    38c0:	2a 95       	dec	r18
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <__ftoa_engine+0x192>
    38c4:	11 24       	eor	r1, r1
    38c6:	ef 90       	pop	r14
    38c8:	ff 90       	pop	r15
    38ca:	0f 91       	pop	r16
    38cc:	1f 91       	pop	r17
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	99 27       	eor	r25, r25
    38d4:	87 fd       	sbrc	r24, 7
    38d6:	90 95       	com	r25
    38d8:	08 95       	ret

000038da <strnlen_P>:
    38da:	fc 01       	movw	r30, r24
    38dc:	05 90       	lpm	r0, Z+
    38de:	61 50       	subi	r22, 0x01	; 1
    38e0:	70 40       	sbci	r23, 0x00	; 0
    38e2:	01 10       	cpse	r0, r1
    38e4:	d8 f7       	brcc	.-10     	; 0x38dc <strnlen_P+0x2>
    38e6:	80 95       	com	r24
    38e8:	90 95       	com	r25
    38ea:	8e 0f       	add	r24, r30
    38ec:	9f 1f       	adc	r25, r31
    38ee:	08 95       	ret

000038f0 <strcat>:
    38f0:	fb 01       	movw	r30, r22
    38f2:	dc 01       	movw	r26, r24
    38f4:	0d 90       	ld	r0, X+
    38f6:	00 20       	and	r0, r0
    38f8:	e9 f7       	brne	.-6      	; 0x38f4 <strcat+0x4>
    38fa:	11 97       	sbiw	r26, 0x01	; 1
    38fc:	01 90       	ld	r0, Z+
    38fe:	0d 92       	st	X+, r0
    3900:	00 20       	and	r0, r0
    3902:	e1 f7       	brne	.-8      	; 0x38fc <strcat+0xc>
    3904:	08 95       	ret

00003906 <strcpy>:
    3906:	fb 01       	movw	r30, r22
    3908:	dc 01       	movw	r26, r24
    390a:	01 90       	ld	r0, Z+
    390c:	0d 92       	st	X+, r0
    390e:	00 20       	and	r0, r0
    3910:	e1 f7       	brne	.-8      	; 0x390a <strcpy+0x4>
    3912:	08 95       	ret

00003914 <strnlen>:
    3914:	fc 01       	movw	r30, r24
    3916:	61 50       	subi	r22, 0x01	; 1
    3918:	70 40       	sbci	r23, 0x00	; 0
    391a:	01 90       	ld	r0, Z+
    391c:	01 10       	cpse	r0, r1
    391e:	d8 f7       	brcc	.-10     	; 0x3916 <strnlen+0x2>
    3920:	80 95       	com	r24
    3922:	90 95       	com	r25
    3924:	8e 0f       	add	r24, r30
    3926:	9f 1f       	adc	r25, r31
    3928:	08 95       	ret

0000392a <fputc>:
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	fb 01       	movw	r30, r22
    3934:	23 81       	ldd	r18, Z+3	; 0x03
    3936:	21 fd       	sbrc	r18, 1
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <fputc+0x16>
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	9f ef       	ldi	r25, 0xFF	; 255
    393e:	2c c0       	rjmp	.+88     	; 0x3998 <fputc+0x6e>
    3940:	22 ff       	sbrs	r18, 2
    3942:	16 c0       	rjmp	.+44     	; 0x3970 <fputc+0x46>
    3944:	46 81       	ldd	r20, Z+6	; 0x06
    3946:	57 81       	ldd	r21, Z+7	; 0x07
    3948:	24 81       	ldd	r18, Z+4	; 0x04
    394a:	35 81       	ldd	r19, Z+5	; 0x05
    394c:	42 17       	cp	r20, r18
    394e:	53 07       	cpc	r21, r19
    3950:	44 f4       	brge	.+16     	; 0x3962 <fputc+0x38>
    3952:	a0 81       	ld	r26, Z
    3954:	b1 81       	ldd	r27, Z+1	; 0x01
    3956:	9d 01       	movw	r18, r26
    3958:	2f 5f       	subi	r18, 0xFF	; 255
    395a:	3f 4f       	sbci	r19, 0xFF	; 255
    395c:	20 83       	st	Z, r18
    395e:	31 83       	std	Z+1, r19	; 0x01
    3960:	8c 93       	st	X, r24
    3962:	26 81       	ldd	r18, Z+6	; 0x06
    3964:	37 81       	ldd	r19, Z+7	; 0x07
    3966:	2f 5f       	subi	r18, 0xFF	; 255
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	26 83       	std	Z+6, r18	; 0x06
    396c:	37 83       	std	Z+7, r19	; 0x07
    396e:	14 c0       	rjmp	.+40     	; 0x3998 <fputc+0x6e>
    3970:	8b 01       	movw	r16, r22
    3972:	ec 01       	movw	r28, r24
    3974:	fb 01       	movw	r30, r22
    3976:	00 84       	ldd	r0, Z+8	; 0x08
    3978:	f1 85       	ldd	r31, Z+9	; 0x09
    397a:	e0 2d       	mov	r30, r0
    397c:	09 95       	icall
    397e:	89 2b       	or	r24, r25
    3980:	e1 f6       	brne	.-72     	; 0x393a <fputc+0x10>
    3982:	d8 01       	movw	r26, r16
    3984:	16 96       	adiw	r26, 0x06	; 6
    3986:	8d 91       	ld	r24, X+
    3988:	9c 91       	ld	r25, X
    398a:	17 97       	sbiw	r26, 0x07	; 7
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	16 96       	adiw	r26, 0x06	; 6
    3990:	8d 93       	st	X+, r24
    3992:	9c 93       	st	X, r25
    3994:	17 97       	sbiw	r26, 0x07	; 7
    3996:	ce 01       	movw	r24, r28
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	1f 91       	pop	r17
    399e:	0f 91       	pop	r16
    39a0:	08 95       	ret

000039a2 <sprintf>:
    39a2:	ae e0       	ldi	r26, 0x0E	; 14
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	e7 ed       	ldi	r30, 0xD7	; 215
    39a8:	fc e1       	ldi	r31, 0x1C	; 28
    39aa:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__prologue_saves__+0x1c>
    39ae:	0d 89       	ldd	r16, Y+21	; 0x15
    39b0:	1e 89       	ldd	r17, Y+22	; 0x16
    39b2:	86 e0       	ldi	r24, 0x06	; 6
    39b4:	8c 83       	std	Y+4, r24	; 0x04
    39b6:	09 83       	std	Y+1, r16	; 0x01
    39b8:	1a 83       	std	Y+2, r17	; 0x02
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
    39bc:	9f e7       	ldi	r25, 0x7F	; 127
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	9e 83       	std	Y+6, r25	; 0x06
    39c2:	ae 01       	movw	r20, r28
    39c4:	47 5e       	subi	r20, 0xE7	; 231
    39c6:	5f 4f       	sbci	r21, 0xFF	; 255
    39c8:	6f 89       	ldd	r22, Y+23	; 0x17
    39ca:	78 8d       	ldd	r23, Y+24	; 0x18
    39cc:	ce 01       	movw	r24, r28
    39ce:	01 96       	adiw	r24, 0x01	; 1
    39d0:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <vfprintf>
    39d4:	ef 81       	ldd	r30, Y+7	; 0x07
    39d6:	f8 85       	ldd	r31, Y+8	; 0x08
    39d8:	e0 0f       	add	r30, r16
    39da:	f1 1f       	adc	r31, r17
    39dc:	10 82       	st	Z, r1
    39de:	2e 96       	adiw	r28, 0x0e	; 14
    39e0:	e4 e0       	ldi	r30, 0x04	; 4
    39e2:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x1c>

000039e6 <__ultoa_invert>:
    39e6:	fa 01       	movw	r30, r20
    39e8:	aa 27       	eor	r26, r26
    39ea:	28 30       	cpi	r18, 0x08	; 8
    39ec:	51 f1       	breq	.+84     	; 0x3a42 <__ultoa_invert+0x5c>
    39ee:	20 31       	cpi	r18, 0x10	; 16
    39f0:	81 f1       	breq	.+96     	; 0x3a52 <__ultoa_invert+0x6c>
    39f2:	e8 94       	clt
    39f4:	6f 93       	push	r22
    39f6:	6e 7f       	andi	r22, 0xFE	; 254
    39f8:	6e 5f       	subi	r22, 0xFE	; 254
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	8f 4f       	sbci	r24, 0xFF	; 255
    39fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3a00:	af 4f       	sbci	r26, 0xFF	; 255
    3a02:	b1 e0       	ldi	r27, 0x01	; 1
    3a04:	3e d0       	rcall	.+124    	; 0x3a82 <__ultoa_invert+0x9c>
    3a06:	b4 e0       	ldi	r27, 0x04	; 4
    3a08:	3c d0       	rcall	.+120    	; 0x3a82 <__ultoa_invert+0x9c>
    3a0a:	67 0f       	add	r22, r23
    3a0c:	78 1f       	adc	r23, r24
    3a0e:	89 1f       	adc	r24, r25
    3a10:	9a 1f       	adc	r25, r26
    3a12:	a1 1d       	adc	r26, r1
    3a14:	68 0f       	add	r22, r24
    3a16:	79 1f       	adc	r23, r25
    3a18:	8a 1f       	adc	r24, r26
    3a1a:	91 1d       	adc	r25, r1
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	6a 0f       	add	r22, r26
    3a20:	71 1d       	adc	r23, r1
    3a22:	81 1d       	adc	r24, r1
    3a24:	91 1d       	adc	r25, r1
    3a26:	a1 1d       	adc	r26, r1
    3a28:	20 d0       	rcall	.+64     	; 0x3a6a <__ultoa_invert+0x84>
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <__ultoa_invert+0x48>
    3a2c:	68 94       	set
    3a2e:	3f 91       	pop	r19
    3a30:	2a e0       	ldi	r18, 0x0A	; 10
    3a32:	26 9f       	mul	r18, r22
    3a34:	11 24       	eor	r1, r1
    3a36:	30 19       	sub	r19, r0
    3a38:	30 5d       	subi	r19, 0xD0	; 208
    3a3a:	31 93       	st	Z+, r19
    3a3c:	de f6       	brtc	.-74     	; 0x39f4 <__ultoa_invert+0xe>
    3a3e:	cf 01       	movw	r24, r30
    3a40:	08 95       	ret
    3a42:	46 2f       	mov	r20, r22
    3a44:	47 70       	andi	r20, 0x07	; 7
    3a46:	40 5d       	subi	r20, 0xD0	; 208
    3a48:	41 93       	st	Z+, r20
    3a4a:	b3 e0       	ldi	r27, 0x03	; 3
    3a4c:	0f d0       	rcall	.+30     	; 0x3a6c <__ultoa_invert+0x86>
    3a4e:	c9 f7       	brne	.-14     	; 0x3a42 <__ultoa_invert+0x5c>
    3a50:	f6 cf       	rjmp	.-20     	; 0x3a3e <__ultoa_invert+0x58>
    3a52:	46 2f       	mov	r20, r22
    3a54:	4f 70       	andi	r20, 0x0F	; 15
    3a56:	40 5d       	subi	r20, 0xD0	; 208
    3a58:	4a 33       	cpi	r20, 0x3A	; 58
    3a5a:	18 f0       	brcs	.+6      	; 0x3a62 <__ultoa_invert+0x7c>
    3a5c:	49 5d       	subi	r20, 0xD9	; 217
    3a5e:	31 fd       	sbrc	r19, 1
    3a60:	40 52       	subi	r20, 0x20	; 32
    3a62:	41 93       	st	Z+, r20
    3a64:	02 d0       	rcall	.+4      	; 0x3a6a <__ultoa_invert+0x84>
    3a66:	a9 f7       	brne	.-22     	; 0x3a52 <__ultoa_invert+0x6c>
    3a68:	ea cf       	rjmp	.-44     	; 0x3a3e <__ultoa_invert+0x58>
    3a6a:	b4 e0       	ldi	r27, 0x04	; 4
    3a6c:	a6 95       	lsr	r26
    3a6e:	97 95       	ror	r25
    3a70:	87 95       	ror	r24
    3a72:	77 95       	ror	r23
    3a74:	67 95       	ror	r22
    3a76:	ba 95       	dec	r27
    3a78:	c9 f7       	brne	.-14     	; 0x3a6c <__ultoa_invert+0x86>
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	61 05       	cpc	r22, r1
    3a7e:	71 05       	cpc	r23, r1
    3a80:	08 95       	ret
    3a82:	9b 01       	movw	r18, r22
    3a84:	ac 01       	movw	r20, r24
    3a86:	0a 2e       	mov	r0, r26
    3a88:	06 94       	lsr	r0
    3a8a:	57 95       	ror	r21
    3a8c:	47 95       	ror	r20
    3a8e:	37 95       	ror	r19
    3a90:	27 95       	ror	r18
    3a92:	ba 95       	dec	r27
    3a94:	c9 f7       	brne	.-14     	; 0x3a88 <__ultoa_invert+0xa2>
    3a96:	62 0f       	add	r22, r18
    3a98:	73 1f       	adc	r23, r19
    3a9a:	84 1f       	adc	r24, r20
    3a9c:	95 1f       	adc	r25, r21
    3a9e:	a0 1d       	adc	r26, r0
    3aa0:	08 95       	ret

00003aa2 <eeprom_read_block>:
    3aa2:	60 50       	subi	r22, 0x00	; 0
    3aa4:	7c 4e       	sbci	r23, 0xEC	; 236
    3aa6:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <memcpy>

00003aaa <eeprom_update_block>:
    3aaa:	dc 01       	movw	r26, r24
    3aac:	a4 0f       	add	r26, r20
    3aae:	b5 1f       	adc	r27, r21
    3ab0:	41 50       	subi	r20, 0x01	; 1
    3ab2:	50 40       	sbci	r21, 0x00	; 0
    3ab4:	48 f0       	brcs	.+18     	; 0x3ac8 <eeprom_update_block+0x1e>
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	84 0f       	add	r24, r20
    3aba:	95 1f       	adc	r25, r21
    3abc:	2e 91       	ld	r18, -X
    3abe:	0e 94 66 1d 	call	0x3acc	; 0x3acc <eeprom_update_r18>
    3ac2:	41 50       	subi	r20, 0x01	; 1
    3ac4:	50 40       	sbci	r21, 0x00	; 0
    3ac6:	d0 f7       	brcc	.-12     	; 0x3abc <eeprom_update_block+0x12>
    3ac8:	08 95       	ret

00003aca <eeprom_update_byte>:
    3aca:	26 2f       	mov	r18, r22

00003acc <eeprom_update_r18>:
    3acc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <eeprom_mapen>
    3ad0:	00 80       	ld	r0, Z
    3ad2:	02 16       	cp	r0, r18
    3ad4:	19 f0       	breq	.+6      	; 0x3adc <eeprom_update_r18+0x10>
    3ad6:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <eeprom_write_r18>
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	08 95       	ret

00003ae0 <eeprom_write_byte>:
    3ae0:	26 2f       	mov	r18, r22

00003ae2 <eeprom_write_r18>:
    3ae2:	af 93       	push	r26
    3ae4:	bf 93       	push	r27
    3ae6:	e0 e0       	ldi	r30, 0x00	; 0
    3ae8:	f0 e1       	ldi	r31, 0x10	; 16
    3aea:	32 81       	ldd	r19, Z+2	; 0x02
    3aec:	31 fd       	sbrc	r19, 1
    3aee:	fd cf       	rjmp	.-6      	; 0x3aea <eeprom_write_r18+0x8>
    3af0:	dc 01       	movw	r26, r24
    3af2:	a0 50       	subi	r26, 0x00	; 0
    3af4:	bc 4e       	sbci	r27, 0xEC	; 236
    3af6:	2c 93       	st	X, r18
    3af8:	2d e9       	ldi	r18, 0x9D	; 157
    3afa:	24 bf       	out	0x34, r18	; 52
    3afc:	23 e0       	ldi	r18, 0x03	; 3
    3afe:	20 83       	st	Z, r18
    3b00:	01 96       	adiw	r24, 0x01	; 1
    3b02:	bf 91       	pop	r27
    3b04:	af 91       	pop	r26
    3b06:	08 95       	ret

00003b08 <eeprom_read_byte>:
    3b08:	03 d0       	rcall	.+6      	; 0x3b10 <eeprom_mapen>
    3b0a:	80 81       	ld	r24, Z
    3b0c:	99 27       	eor	r25, r25
    3b0e:	08 95       	ret

00003b10 <eeprom_mapen>:
    3b10:	fc 01       	movw	r30, r24
    3b12:	e0 50       	subi	r30, 0x00	; 0
    3b14:	fc 4e       	sbci	r31, 0xEC	; 236
    3b16:	08 95       	ret

00003b18 <memcpy>:
    3b18:	fb 01       	movw	r30, r22
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <memcpy+0xa>
    3b1e:	01 90       	ld	r0, Z+
    3b20:	0d 92       	st	X+, r0
    3b22:	41 50       	subi	r20, 0x01	; 1
    3b24:	50 40       	sbci	r21, 0x00	; 0
    3b26:	d8 f7       	brcc	.-10     	; 0x3b1e <memcpy+0x6>
    3b28:	08 95       	ret

00003b2a <_exit>:
    3b2a:	f8 94       	cli

00003b2c <__stop_program>:
    3b2c:	ff cf       	rjmp	.-2      	; 0x3b2c <__stop_program>
